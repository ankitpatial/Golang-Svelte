// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/auditlog"
	"roofix/ent/channelmessage"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/predicate"
	"roofix/ent/surveyprogress"
	"roofix/ent/useractivity"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiUserUpdate is the builder for updating ApiUser entities.
type ApiUserUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiUserUpdate builder.
func (auu *ApiUserUpdate) Where(ps ...predicate.ApiUser) *ApiUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUsername sets the "username" field.
func (auu *ApiUserUpdate) SetUsername(s string) *ApiUserUpdate {
	auu.mutation.SetUsername(s)
	return auu
}

// SetPwdHash sets the "pwd_hash" field.
func (auu *ApiUserUpdate) SetPwdHash(s string) *ApiUserUpdate {
	auu.mutation.SetPwdHash(s)
	return auu
}

// SetActive sets the "active" field.
func (auu *ApiUserUpdate) SetActive(b bool) *ApiUserUpdate {
	auu.mutation.SetActive(b)
	return auu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (auu *ApiUserUpdate) SetNillableActive(b *bool) *ApiUserUpdate {
	if b != nil {
		auu.SetActive(*b)
	}
	return auu
}

// SetCbAPIURL sets the "cb_api_url" field.
func (auu *ApiUserUpdate) SetCbAPIURL(s string) *ApiUserUpdate {
	auu.mutation.SetCbAPIURL(s)
	return auu
}

// SetNillableCbAPIURL sets the "cb_api_url" field if the given value is not nil.
func (auu *ApiUserUpdate) SetNillableCbAPIURL(s *string) *ApiUserUpdate {
	if s != nil {
		auu.SetCbAPIURL(*s)
	}
	return auu
}

// ClearCbAPIURL clears the value of the "cb_api_url" field.
func (auu *ApiUserUpdate) ClearCbAPIURL() *ApiUserUpdate {
	auu.mutation.ClearCbAPIURL()
	return auu
}

// SetCbAPIAuth sets the "cb_api_auth" field.
func (auu *ApiUserUpdate) SetCbAPIAuth(aaa apiuser.CbAPIAuth) *ApiUserUpdate {
	auu.mutation.SetCbAPIAuth(aaa)
	return auu
}

// SetNillableCbAPIAuth sets the "cb_api_auth" field if the given value is not nil.
func (auu *ApiUserUpdate) SetNillableCbAPIAuth(aaa *apiuser.CbAPIAuth) *ApiUserUpdate {
	if aaa != nil {
		auu.SetCbAPIAuth(*aaa)
	}
	return auu
}

// ClearCbAPIAuth clears the value of the "cb_api_auth" field.
func (auu *ApiUserUpdate) ClearCbAPIAuth() *ApiUserUpdate {
	auu.mutation.ClearCbAPIAuth()
	return auu
}

// SetCbAPIUser sets the "cb_api_user" field.
func (auu *ApiUserUpdate) SetCbAPIUser(s string) *ApiUserUpdate {
	auu.mutation.SetCbAPIUser(s)
	return auu
}

// SetNillableCbAPIUser sets the "cb_api_user" field if the given value is not nil.
func (auu *ApiUserUpdate) SetNillableCbAPIUser(s *string) *ApiUserUpdate {
	if s != nil {
		auu.SetCbAPIUser(*s)
	}
	return auu
}

// ClearCbAPIUser clears the value of the "cb_api_user" field.
func (auu *ApiUserUpdate) ClearCbAPIUser() *ApiUserUpdate {
	auu.mutation.ClearCbAPIUser()
	return auu
}

// SetCbAPIPwd sets the "cb_api_pwd" field.
func (auu *ApiUserUpdate) SetCbAPIPwd(s string) *ApiUserUpdate {
	auu.mutation.SetCbAPIPwd(s)
	return auu
}

// SetNillableCbAPIPwd sets the "cb_api_pwd" field if the given value is not nil.
func (auu *ApiUserUpdate) SetNillableCbAPIPwd(s *string) *ApiUserUpdate {
	if s != nil {
		auu.SetCbAPIPwd(*s)
	}
	return auu
}

// ClearCbAPIPwd clears the value of the "cb_api_pwd" field.
func (auu *ApiUserUpdate) ClearCbAPIPwd() *ApiUserUpdate {
	auu.mutation.ClearCbAPIPwd()
	return auu
}

// SetCbAPIToken sets the "cb_api_token" field.
func (auu *ApiUserUpdate) SetCbAPIToken(s string) *ApiUserUpdate {
	auu.mutation.SetCbAPIToken(s)
	return auu
}

// SetNillableCbAPIToken sets the "cb_api_token" field if the given value is not nil.
func (auu *ApiUserUpdate) SetNillableCbAPIToken(s *string) *ApiUserUpdate {
	if s != nil {
		auu.SetCbAPIToken(*s)
	}
	return auu
}

// ClearCbAPIToken clears the value of the "cb_api_token" field.
func (auu *ApiUserUpdate) ClearCbAPIToken() *ApiUserUpdate {
	auu.mutation.ClearCbAPIToken()
	return auu
}

// SetCbAPIEndpoints sets the "cb_api_endpoints" field.
func (auu *ApiUserUpdate) SetCbAPIEndpoints(m map[string]string) *ApiUserUpdate {
	auu.mutation.SetCbAPIEndpoints(m)
	return auu
}

// ClearCbAPIEndpoints clears the value of the "cb_api_endpoints" field.
func (auu *ApiUserUpdate) ClearCbAPIEndpoints() *ApiUserUpdate {
	auu.mutation.ClearCbAPIEndpoints()
	return auu
}

// AddTokenIDs adds the "tokens" edge to the ApiUserToken entity by IDs.
func (auu *ApiUserUpdate) AddTokenIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddTokenIDs(ids...)
	return auu
}

// AddTokens adds the "tokens" edges to the ApiUserToken entity.
func (auu *ApiUserUpdate) AddTokens(a ...*ApiUserToken) *ApiUserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddTokenIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (auu *ApiUserUpdate) AddAuditLogIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddAuditLogIDs(ids...)
	return auu
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (auu *ApiUserUpdate) AddAuditLogs(a ...*AuditLog) *ApiUserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddAuditLogIDs(ids...)
}

// AddCreatedEstimateIDs adds the "created_estimates" edge to the Estimate entity by IDs.
func (auu *ApiUserUpdate) AddCreatedEstimateIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddCreatedEstimateIDs(ids...)
	return auu
}

// AddCreatedEstimates adds the "created_estimates" edges to the Estimate entity.
func (auu *ApiUserUpdate) AddCreatedEstimates(e ...*Estimate) *ApiUserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auu.AddCreatedEstimateIDs(ids...)
}

// AddCreatedJobIDs adds the "created_jobs" edge to the Job entity by IDs.
func (auu *ApiUserUpdate) AddCreatedJobIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddCreatedJobIDs(ids...)
	return auu
}

// AddCreatedJobs adds the "created_jobs" edges to the Job entity.
func (auu *ApiUserUpdate) AddCreatedJobs(j ...*Job) *ApiUserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auu.AddCreatedJobIDs(ids...)
}

// AddCreatedPartnerIDs adds the "created_partners" edge to the Partner entity by IDs.
func (auu *ApiUserUpdate) AddCreatedPartnerIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddCreatedPartnerIDs(ids...)
	return auu
}

// AddCreatedPartners adds the "created_partners" edges to the Partner entity.
func (auu *ApiUserUpdate) AddCreatedPartners(p ...*Partner) *ApiUserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auu.AddCreatedPartnerIDs(ids...)
}

// AddSurveyProgresIDs adds the "survey_progress" edge to the SurveyProgress entity by IDs.
func (auu *ApiUserUpdate) AddSurveyProgresIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddSurveyProgresIDs(ids...)
	return auu
}

// AddSurveyProgress adds the "survey_progress" edges to the SurveyProgress entity.
func (auu *ApiUserUpdate) AddSurveyProgress(s ...*SurveyProgress) *ApiUserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auu.AddSurveyProgresIDs(ids...)
}

// AddEstimateActivityIDs adds the "estimate_activities" edge to the EstimateActivity entity by IDs.
func (auu *ApiUserUpdate) AddEstimateActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddEstimateActivityIDs(ids...)
	return auu
}

// AddEstimateActivities adds the "estimate_activities" edges to the EstimateActivity entity.
func (auu *ApiUserUpdate) AddEstimateActivities(e ...*EstimateActivity) *ApiUserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auu.AddEstimateActivityIDs(ids...)
}

// AddUserActivityIDs adds the "user_activities" edge to the UserActivity entity by IDs.
func (auu *ApiUserUpdate) AddUserActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddUserActivityIDs(ids...)
	return auu
}

// AddUserActivities adds the "user_activities" edges to the UserActivity entity.
func (auu *ApiUserUpdate) AddUserActivities(u ...*UserActivity) *ApiUserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auu.AddUserActivityIDs(ids...)
}

// AddPartnerActivityIDs adds the "partner_activities" edge to the PartnerActivity entity by IDs.
func (auu *ApiUserUpdate) AddPartnerActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddPartnerActivityIDs(ids...)
	return auu
}

// AddPartnerActivities adds the "partner_activities" edges to the PartnerActivity entity.
func (auu *ApiUserUpdate) AddPartnerActivities(p ...*PartnerActivity) *ApiUserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auu.AddPartnerActivityIDs(ids...)
}

// AddJobActivityIDs adds the "job_activities" edge to the JobActivity entity by IDs.
func (auu *ApiUserUpdate) AddJobActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddJobActivityIDs(ids...)
	return auu
}

// AddJobActivities adds the "job_activities" edges to the JobActivity entity.
func (auu *ApiUserUpdate) AddJobActivities(j ...*JobActivity) *ApiUserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auu.AddJobActivityIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the ChannelMessage entity by IDs.
func (auu *ApiUserUpdate) AddNotificationIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddNotificationIDs(ids...)
	return auu
}

// AddNotifications adds the "notifications" edges to the ChannelMessage entity.
func (auu *ApiUserUpdate) AddNotifications(c ...*ChannelMessage) *ApiUserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auu.AddNotificationIDs(ids...)
}

// AddJobProgressHistoryIDs adds the "job_progress_history" edge to the JobProgressHistory entity by IDs.
func (auu *ApiUserUpdate) AddJobProgressHistoryIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.AddJobProgressHistoryIDs(ids...)
	return auu
}

// AddJobProgressHistory adds the "job_progress_history" edges to the JobProgressHistory entity.
func (auu *ApiUserUpdate) AddJobProgressHistory(j ...*JobProgressHistory) *ApiUserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auu.AddJobProgressHistoryIDs(ids...)
}

// Mutation returns the ApiUserMutation object of the builder.
func (auu *ApiUserUpdate) Mutation() *ApiUserMutation {
	return auu.mutation
}

// ClearTokens clears all "tokens" edges to the ApiUserToken entity.
func (auu *ApiUserUpdate) ClearTokens() *ApiUserUpdate {
	auu.mutation.ClearTokens()
	return auu
}

// RemoveTokenIDs removes the "tokens" edge to ApiUserToken entities by IDs.
func (auu *ApiUserUpdate) RemoveTokenIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveTokenIDs(ids...)
	return auu
}

// RemoveTokens removes "tokens" edges to ApiUserToken entities.
func (auu *ApiUserUpdate) RemoveTokens(a ...*ApiUserToken) *ApiUserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveTokenIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (auu *ApiUserUpdate) ClearAuditLogs() *ApiUserUpdate {
	auu.mutation.ClearAuditLogs()
	return auu
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (auu *ApiUserUpdate) RemoveAuditLogIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveAuditLogIDs(ids...)
	return auu
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (auu *ApiUserUpdate) RemoveAuditLogs(a ...*AuditLog) *ApiUserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveAuditLogIDs(ids...)
}

// ClearCreatedEstimates clears all "created_estimates" edges to the Estimate entity.
func (auu *ApiUserUpdate) ClearCreatedEstimates() *ApiUserUpdate {
	auu.mutation.ClearCreatedEstimates()
	return auu
}

// RemoveCreatedEstimateIDs removes the "created_estimates" edge to Estimate entities by IDs.
func (auu *ApiUserUpdate) RemoveCreatedEstimateIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveCreatedEstimateIDs(ids...)
	return auu
}

// RemoveCreatedEstimates removes "created_estimates" edges to Estimate entities.
func (auu *ApiUserUpdate) RemoveCreatedEstimates(e ...*Estimate) *ApiUserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auu.RemoveCreatedEstimateIDs(ids...)
}

// ClearCreatedJobs clears all "created_jobs" edges to the Job entity.
func (auu *ApiUserUpdate) ClearCreatedJobs() *ApiUserUpdate {
	auu.mutation.ClearCreatedJobs()
	return auu
}

// RemoveCreatedJobIDs removes the "created_jobs" edge to Job entities by IDs.
func (auu *ApiUserUpdate) RemoveCreatedJobIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveCreatedJobIDs(ids...)
	return auu
}

// RemoveCreatedJobs removes "created_jobs" edges to Job entities.
func (auu *ApiUserUpdate) RemoveCreatedJobs(j ...*Job) *ApiUserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auu.RemoveCreatedJobIDs(ids...)
}

// ClearCreatedPartners clears all "created_partners" edges to the Partner entity.
func (auu *ApiUserUpdate) ClearCreatedPartners() *ApiUserUpdate {
	auu.mutation.ClearCreatedPartners()
	return auu
}

// RemoveCreatedPartnerIDs removes the "created_partners" edge to Partner entities by IDs.
func (auu *ApiUserUpdate) RemoveCreatedPartnerIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveCreatedPartnerIDs(ids...)
	return auu
}

// RemoveCreatedPartners removes "created_partners" edges to Partner entities.
func (auu *ApiUserUpdate) RemoveCreatedPartners(p ...*Partner) *ApiUserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auu.RemoveCreatedPartnerIDs(ids...)
}

// ClearSurveyProgress clears all "survey_progress" edges to the SurveyProgress entity.
func (auu *ApiUserUpdate) ClearSurveyProgress() *ApiUserUpdate {
	auu.mutation.ClearSurveyProgress()
	return auu
}

// RemoveSurveyProgresIDs removes the "survey_progress" edge to SurveyProgress entities by IDs.
func (auu *ApiUserUpdate) RemoveSurveyProgresIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveSurveyProgresIDs(ids...)
	return auu
}

// RemoveSurveyProgress removes "survey_progress" edges to SurveyProgress entities.
func (auu *ApiUserUpdate) RemoveSurveyProgress(s ...*SurveyProgress) *ApiUserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auu.RemoveSurveyProgresIDs(ids...)
}

// ClearEstimateActivities clears all "estimate_activities" edges to the EstimateActivity entity.
func (auu *ApiUserUpdate) ClearEstimateActivities() *ApiUserUpdate {
	auu.mutation.ClearEstimateActivities()
	return auu
}

// RemoveEstimateActivityIDs removes the "estimate_activities" edge to EstimateActivity entities by IDs.
func (auu *ApiUserUpdate) RemoveEstimateActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveEstimateActivityIDs(ids...)
	return auu
}

// RemoveEstimateActivities removes "estimate_activities" edges to EstimateActivity entities.
func (auu *ApiUserUpdate) RemoveEstimateActivities(e ...*EstimateActivity) *ApiUserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auu.RemoveEstimateActivityIDs(ids...)
}

// ClearUserActivities clears all "user_activities" edges to the UserActivity entity.
func (auu *ApiUserUpdate) ClearUserActivities() *ApiUserUpdate {
	auu.mutation.ClearUserActivities()
	return auu
}

// RemoveUserActivityIDs removes the "user_activities" edge to UserActivity entities by IDs.
func (auu *ApiUserUpdate) RemoveUserActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveUserActivityIDs(ids...)
	return auu
}

// RemoveUserActivities removes "user_activities" edges to UserActivity entities.
func (auu *ApiUserUpdate) RemoveUserActivities(u ...*UserActivity) *ApiUserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auu.RemoveUserActivityIDs(ids...)
}

// ClearPartnerActivities clears all "partner_activities" edges to the PartnerActivity entity.
func (auu *ApiUserUpdate) ClearPartnerActivities() *ApiUserUpdate {
	auu.mutation.ClearPartnerActivities()
	return auu
}

// RemovePartnerActivityIDs removes the "partner_activities" edge to PartnerActivity entities by IDs.
func (auu *ApiUserUpdate) RemovePartnerActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemovePartnerActivityIDs(ids...)
	return auu
}

// RemovePartnerActivities removes "partner_activities" edges to PartnerActivity entities.
func (auu *ApiUserUpdate) RemovePartnerActivities(p ...*PartnerActivity) *ApiUserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auu.RemovePartnerActivityIDs(ids...)
}

// ClearJobActivities clears all "job_activities" edges to the JobActivity entity.
func (auu *ApiUserUpdate) ClearJobActivities() *ApiUserUpdate {
	auu.mutation.ClearJobActivities()
	return auu
}

// RemoveJobActivityIDs removes the "job_activities" edge to JobActivity entities by IDs.
func (auu *ApiUserUpdate) RemoveJobActivityIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveJobActivityIDs(ids...)
	return auu
}

// RemoveJobActivities removes "job_activities" edges to JobActivity entities.
func (auu *ApiUserUpdate) RemoveJobActivities(j ...*JobActivity) *ApiUserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auu.RemoveJobActivityIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the ChannelMessage entity.
func (auu *ApiUserUpdate) ClearNotifications() *ApiUserUpdate {
	auu.mutation.ClearNotifications()
	return auu
}

// RemoveNotificationIDs removes the "notifications" edge to ChannelMessage entities by IDs.
func (auu *ApiUserUpdate) RemoveNotificationIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveNotificationIDs(ids...)
	return auu
}

// RemoveNotifications removes "notifications" edges to ChannelMessage entities.
func (auu *ApiUserUpdate) RemoveNotifications(c ...*ChannelMessage) *ApiUserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auu.RemoveNotificationIDs(ids...)
}

// ClearJobProgressHistory clears all "job_progress_history" edges to the JobProgressHistory entity.
func (auu *ApiUserUpdate) ClearJobProgressHistory() *ApiUserUpdate {
	auu.mutation.ClearJobProgressHistory()
	return auu
}

// RemoveJobProgressHistoryIDs removes the "job_progress_history" edge to JobProgressHistory entities by IDs.
func (auu *ApiUserUpdate) RemoveJobProgressHistoryIDs(ids ...string) *ApiUserUpdate {
	auu.mutation.RemoveJobProgressHistoryIDs(ids...)
	return auu
}

// RemoveJobProgressHistory removes "job_progress_history" edges to JobProgressHistory entities.
func (auu *ApiUserUpdate) RemoveJobProgressHistory(j ...*JobProgressHistory) *ApiUserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auu.RemoveJobProgressHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *ApiUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *ApiUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *ApiUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *ApiUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *ApiUserUpdate) check() error {
	if v, ok := auu.mutation.Username(); ok {
		if err := apiuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "ApiUser.username": %w`, err)}
		}
	}
	if v, ok := auu.mutation.PwdHash(); ok {
		if err := apiuser.PwdHashValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hash", err: fmt.Errorf(`ent: validator failed for field "ApiUser.pwd_hash": %w`, err)}
		}
	}
	if v, ok := auu.mutation.CbAPIAuth(); ok {
		if err := apiuser.CbAPIAuthValidator(v); err != nil {
			return &ValidationError{Name: "cb_api_auth", err: fmt.Errorf(`ent: validator failed for field "ApiUser.cb_api_auth": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auu *ApiUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiUserUpdate {
	auu.modifiers = append(auu.modifiers, modifiers...)
	return auu
}

func (auu *ApiUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := auu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiuser.Table, apiuser.Columns, sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Username(); ok {
		_spec.SetField(apiuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auu.mutation.PwdHash(); ok {
		_spec.SetField(apiuser.FieldPwdHash, field.TypeString, value)
	}
	if value, ok := auu.mutation.Active(); ok {
		_spec.SetField(apiuser.FieldActive, field.TypeBool, value)
	}
	if value, ok := auu.mutation.CbAPIURL(); ok {
		_spec.SetField(apiuser.FieldCbAPIURL, field.TypeString, value)
	}
	if auu.mutation.CbAPIURLCleared() {
		_spec.ClearField(apiuser.FieldCbAPIURL, field.TypeString)
	}
	if value, ok := auu.mutation.CbAPIAuth(); ok {
		_spec.SetField(apiuser.FieldCbAPIAuth, field.TypeEnum, value)
	}
	if auu.mutation.CbAPIAuthCleared() {
		_spec.ClearField(apiuser.FieldCbAPIAuth, field.TypeEnum)
	}
	if value, ok := auu.mutation.CbAPIUser(); ok {
		_spec.SetField(apiuser.FieldCbAPIUser, field.TypeString, value)
	}
	if auu.mutation.CbAPIUserCleared() {
		_spec.ClearField(apiuser.FieldCbAPIUser, field.TypeString)
	}
	if value, ok := auu.mutation.CbAPIPwd(); ok {
		_spec.SetField(apiuser.FieldCbAPIPwd, field.TypeString, value)
	}
	if auu.mutation.CbAPIPwdCleared() {
		_spec.ClearField(apiuser.FieldCbAPIPwd, field.TypeString)
	}
	if value, ok := auu.mutation.CbAPIToken(); ok {
		_spec.SetField(apiuser.FieldCbAPIToken, field.TypeString, value)
	}
	if auu.mutation.CbAPITokenCleared() {
		_spec.ClearField(apiuser.FieldCbAPIToken, field.TypeString)
	}
	if value, ok := auu.mutation.CbAPIEndpoints(); ok {
		_spec.SetField(apiuser.FieldCbAPIEndpoints, field.TypeJSON, value)
	}
	if auu.mutation.CbAPIEndpointsCleared() {
		_spec.ClearField(apiuser.FieldCbAPIEndpoints, field.TypeJSON)
	}
	if auu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !auu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !auu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedCreatedEstimatesIDs(); len(nodes) > 0 && !auu.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.CreatedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedCreatedJobsIDs(); len(nodes) > 0 && !auu.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.CreatedJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.CreatedPartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedCreatedPartnersIDs(); len(nodes) > 0 && !auu.mutation.CreatedPartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.CreatedPartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedSurveyProgressIDs(); len(nodes) > 0 && !auu.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.SurveyProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedEstimateActivitiesIDs(); len(nodes) > 0 && !auu.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.EstimateActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedUserActivitiesIDs(); len(nodes) > 0 && !auu.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.UserActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedPartnerActivitiesIDs(); len(nodes) > 0 && !auu.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.PartnerActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedJobActivitiesIDs(); len(nodes) > 0 && !auu.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.JobActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !auu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedJobProgressHistoryIDs(); len(nodes) > 0 && !auu.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.JobProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// ApiUserUpdateOne is the builder for updating a single ApiUser entity.
type ApiUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUsername sets the "username" field.
func (auuo *ApiUserUpdateOne) SetUsername(s string) *ApiUserUpdateOne {
	auuo.mutation.SetUsername(s)
	return auuo
}

// SetPwdHash sets the "pwd_hash" field.
func (auuo *ApiUserUpdateOne) SetPwdHash(s string) *ApiUserUpdateOne {
	auuo.mutation.SetPwdHash(s)
	return auuo
}

// SetActive sets the "active" field.
func (auuo *ApiUserUpdateOne) SetActive(b bool) *ApiUserUpdateOne {
	auuo.mutation.SetActive(b)
	return auuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (auuo *ApiUserUpdateOne) SetNillableActive(b *bool) *ApiUserUpdateOne {
	if b != nil {
		auuo.SetActive(*b)
	}
	return auuo
}

// SetCbAPIURL sets the "cb_api_url" field.
func (auuo *ApiUserUpdateOne) SetCbAPIURL(s string) *ApiUserUpdateOne {
	auuo.mutation.SetCbAPIURL(s)
	return auuo
}

// SetNillableCbAPIURL sets the "cb_api_url" field if the given value is not nil.
func (auuo *ApiUserUpdateOne) SetNillableCbAPIURL(s *string) *ApiUserUpdateOne {
	if s != nil {
		auuo.SetCbAPIURL(*s)
	}
	return auuo
}

// ClearCbAPIURL clears the value of the "cb_api_url" field.
func (auuo *ApiUserUpdateOne) ClearCbAPIURL() *ApiUserUpdateOne {
	auuo.mutation.ClearCbAPIURL()
	return auuo
}

// SetCbAPIAuth sets the "cb_api_auth" field.
func (auuo *ApiUserUpdateOne) SetCbAPIAuth(aaa apiuser.CbAPIAuth) *ApiUserUpdateOne {
	auuo.mutation.SetCbAPIAuth(aaa)
	return auuo
}

// SetNillableCbAPIAuth sets the "cb_api_auth" field if the given value is not nil.
func (auuo *ApiUserUpdateOne) SetNillableCbAPIAuth(aaa *apiuser.CbAPIAuth) *ApiUserUpdateOne {
	if aaa != nil {
		auuo.SetCbAPIAuth(*aaa)
	}
	return auuo
}

// ClearCbAPIAuth clears the value of the "cb_api_auth" field.
func (auuo *ApiUserUpdateOne) ClearCbAPIAuth() *ApiUserUpdateOne {
	auuo.mutation.ClearCbAPIAuth()
	return auuo
}

// SetCbAPIUser sets the "cb_api_user" field.
func (auuo *ApiUserUpdateOne) SetCbAPIUser(s string) *ApiUserUpdateOne {
	auuo.mutation.SetCbAPIUser(s)
	return auuo
}

// SetNillableCbAPIUser sets the "cb_api_user" field if the given value is not nil.
func (auuo *ApiUserUpdateOne) SetNillableCbAPIUser(s *string) *ApiUserUpdateOne {
	if s != nil {
		auuo.SetCbAPIUser(*s)
	}
	return auuo
}

// ClearCbAPIUser clears the value of the "cb_api_user" field.
func (auuo *ApiUserUpdateOne) ClearCbAPIUser() *ApiUserUpdateOne {
	auuo.mutation.ClearCbAPIUser()
	return auuo
}

// SetCbAPIPwd sets the "cb_api_pwd" field.
func (auuo *ApiUserUpdateOne) SetCbAPIPwd(s string) *ApiUserUpdateOne {
	auuo.mutation.SetCbAPIPwd(s)
	return auuo
}

// SetNillableCbAPIPwd sets the "cb_api_pwd" field if the given value is not nil.
func (auuo *ApiUserUpdateOne) SetNillableCbAPIPwd(s *string) *ApiUserUpdateOne {
	if s != nil {
		auuo.SetCbAPIPwd(*s)
	}
	return auuo
}

// ClearCbAPIPwd clears the value of the "cb_api_pwd" field.
func (auuo *ApiUserUpdateOne) ClearCbAPIPwd() *ApiUserUpdateOne {
	auuo.mutation.ClearCbAPIPwd()
	return auuo
}

// SetCbAPIToken sets the "cb_api_token" field.
func (auuo *ApiUserUpdateOne) SetCbAPIToken(s string) *ApiUserUpdateOne {
	auuo.mutation.SetCbAPIToken(s)
	return auuo
}

// SetNillableCbAPIToken sets the "cb_api_token" field if the given value is not nil.
func (auuo *ApiUserUpdateOne) SetNillableCbAPIToken(s *string) *ApiUserUpdateOne {
	if s != nil {
		auuo.SetCbAPIToken(*s)
	}
	return auuo
}

// ClearCbAPIToken clears the value of the "cb_api_token" field.
func (auuo *ApiUserUpdateOne) ClearCbAPIToken() *ApiUserUpdateOne {
	auuo.mutation.ClearCbAPIToken()
	return auuo
}

// SetCbAPIEndpoints sets the "cb_api_endpoints" field.
func (auuo *ApiUserUpdateOne) SetCbAPIEndpoints(m map[string]string) *ApiUserUpdateOne {
	auuo.mutation.SetCbAPIEndpoints(m)
	return auuo
}

// ClearCbAPIEndpoints clears the value of the "cb_api_endpoints" field.
func (auuo *ApiUserUpdateOne) ClearCbAPIEndpoints() *ApiUserUpdateOne {
	auuo.mutation.ClearCbAPIEndpoints()
	return auuo
}

// AddTokenIDs adds the "tokens" edge to the ApiUserToken entity by IDs.
func (auuo *ApiUserUpdateOne) AddTokenIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddTokenIDs(ids...)
	return auuo
}

// AddTokens adds the "tokens" edges to the ApiUserToken entity.
func (auuo *ApiUserUpdateOne) AddTokens(a ...*ApiUserToken) *ApiUserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddTokenIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (auuo *ApiUserUpdateOne) AddAuditLogIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddAuditLogIDs(ids...)
	return auuo
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (auuo *ApiUserUpdateOne) AddAuditLogs(a ...*AuditLog) *ApiUserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddAuditLogIDs(ids...)
}

// AddCreatedEstimateIDs adds the "created_estimates" edge to the Estimate entity by IDs.
func (auuo *ApiUserUpdateOne) AddCreatedEstimateIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddCreatedEstimateIDs(ids...)
	return auuo
}

// AddCreatedEstimates adds the "created_estimates" edges to the Estimate entity.
func (auuo *ApiUserUpdateOne) AddCreatedEstimates(e ...*Estimate) *ApiUserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auuo.AddCreatedEstimateIDs(ids...)
}

// AddCreatedJobIDs adds the "created_jobs" edge to the Job entity by IDs.
func (auuo *ApiUserUpdateOne) AddCreatedJobIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddCreatedJobIDs(ids...)
	return auuo
}

// AddCreatedJobs adds the "created_jobs" edges to the Job entity.
func (auuo *ApiUserUpdateOne) AddCreatedJobs(j ...*Job) *ApiUserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auuo.AddCreatedJobIDs(ids...)
}

// AddCreatedPartnerIDs adds the "created_partners" edge to the Partner entity by IDs.
func (auuo *ApiUserUpdateOne) AddCreatedPartnerIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddCreatedPartnerIDs(ids...)
	return auuo
}

// AddCreatedPartners adds the "created_partners" edges to the Partner entity.
func (auuo *ApiUserUpdateOne) AddCreatedPartners(p ...*Partner) *ApiUserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auuo.AddCreatedPartnerIDs(ids...)
}

// AddSurveyProgresIDs adds the "survey_progress" edge to the SurveyProgress entity by IDs.
func (auuo *ApiUserUpdateOne) AddSurveyProgresIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddSurveyProgresIDs(ids...)
	return auuo
}

// AddSurveyProgress adds the "survey_progress" edges to the SurveyProgress entity.
func (auuo *ApiUserUpdateOne) AddSurveyProgress(s ...*SurveyProgress) *ApiUserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auuo.AddSurveyProgresIDs(ids...)
}

// AddEstimateActivityIDs adds the "estimate_activities" edge to the EstimateActivity entity by IDs.
func (auuo *ApiUserUpdateOne) AddEstimateActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddEstimateActivityIDs(ids...)
	return auuo
}

// AddEstimateActivities adds the "estimate_activities" edges to the EstimateActivity entity.
func (auuo *ApiUserUpdateOne) AddEstimateActivities(e ...*EstimateActivity) *ApiUserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auuo.AddEstimateActivityIDs(ids...)
}

// AddUserActivityIDs adds the "user_activities" edge to the UserActivity entity by IDs.
func (auuo *ApiUserUpdateOne) AddUserActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddUserActivityIDs(ids...)
	return auuo
}

// AddUserActivities adds the "user_activities" edges to the UserActivity entity.
func (auuo *ApiUserUpdateOne) AddUserActivities(u ...*UserActivity) *ApiUserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auuo.AddUserActivityIDs(ids...)
}

// AddPartnerActivityIDs adds the "partner_activities" edge to the PartnerActivity entity by IDs.
func (auuo *ApiUserUpdateOne) AddPartnerActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddPartnerActivityIDs(ids...)
	return auuo
}

// AddPartnerActivities adds the "partner_activities" edges to the PartnerActivity entity.
func (auuo *ApiUserUpdateOne) AddPartnerActivities(p ...*PartnerActivity) *ApiUserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auuo.AddPartnerActivityIDs(ids...)
}

// AddJobActivityIDs adds the "job_activities" edge to the JobActivity entity by IDs.
func (auuo *ApiUserUpdateOne) AddJobActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddJobActivityIDs(ids...)
	return auuo
}

// AddJobActivities adds the "job_activities" edges to the JobActivity entity.
func (auuo *ApiUserUpdateOne) AddJobActivities(j ...*JobActivity) *ApiUserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auuo.AddJobActivityIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the ChannelMessage entity by IDs.
func (auuo *ApiUserUpdateOne) AddNotificationIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddNotificationIDs(ids...)
	return auuo
}

// AddNotifications adds the "notifications" edges to the ChannelMessage entity.
func (auuo *ApiUserUpdateOne) AddNotifications(c ...*ChannelMessage) *ApiUserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auuo.AddNotificationIDs(ids...)
}

// AddJobProgressHistoryIDs adds the "job_progress_history" edge to the JobProgressHistory entity by IDs.
func (auuo *ApiUserUpdateOne) AddJobProgressHistoryIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.AddJobProgressHistoryIDs(ids...)
	return auuo
}

// AddJobProgressHistory adds the "job_progress_history" edges to the JobProgressHistory entity.
func (auuo *ApiUserUpdateOne) AddJobProgressHistory(j ...*JobProgressHistory) *ApiUserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auuo.AddJobProgressHistoryIDs(ids...)
}

// Mutation returns the ApiUserMutation object of the builder.
func (auuo *ApiUserUpdateOne) Mutation() *ApiUserMutation {
	return auuo.mutation
}

// ClearTokens clears all "tokens" edges to the ApiUserToken entity.
func (auuo *ApiUserUpdateOne) ClearTokens() *ApiUserUpdateOne {
	auuo.mutation.ClearTokens()
	return auuo
}

// RemoveTokenIDs removes the "tokens" edge to ApiUserToken entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveTokenIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveTokenIDs(ids...)
	return auuo
}

// RemoveTokens removes "tokens" edges to ApiUserToken entities.
func (auuo *ApiUserUpdateOne) RemoveTokens(a ...*ApiUserToken) *ApiUserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveTokenIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (auuo *ApiUserUpdateOne) ClearAuditLogs() *ApiUserUpdateOne {
	auuo.mutation.ClearAuditLogs()
	return auuo
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveAuditLogIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveAuditLogIDs(ids...)
	return auuo
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (auuo *ApiUserUpdateOne) RemoveAuditLogs(a ...*AuditLog) *ApiUserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveAuditLogIDs(ids...)
}

// ClearCreatedEstimates clears all "created_estimates" edges to the Estimate entity.
func (auuo *ApiUserUpdateOne) ClearCreatedEstimates() *ApiUserUpdateOne {
	auuo.mutation.ClearCreatedEstimates()
	return auuo
}

// RemoveCreatedEstimateIDs removes the "created_estimates" edge to Estimate entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveCreatedEstimateIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveCreatedEstimateIDs(ids...)
	return auuo
}

// RemoveCreatedEstimates removes "created_estimates" edges to Estimate entities.
func (auuo *ApiUserUpdateOne) RemoveCreatedEstimates(e ...*Estimate) *ApiUserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auuo.RemoveCreatedEstimateIDs(ids...)
}

// ClearCreatedJobs clears all "created_jobs" edges to the Job entity.
func (auuo *ApiUserUpdateOne) ClearCreatedJobs() *ApiUserUpdateOne {
	auuo.mutation.ClearCreatedJobs()
	return auuo
}

// RemoveCreatedJobIDs removes the "created_jobs" edge to Job entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveCreatedJobIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveCreatedJobIDs(ids...)
	return auuo
}

// RemoveCreatedJobs removes "created_jobs" edges to Job entities.
func (auuo *ApiUserUpdateOne) RemoveCreatedJobs(j ...*Job) *ApiUserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auuo.RemoveCreatedJobIDs(ids...)
}

// ClearCreatedPartners clears all "created_partners" edges to the Partner entity.
func (auuo *ApiUserUpdateOne) ClearCreatedPartners() *ApiUserUpdateOne {
	auuo.mutation.ClearCreatedPartners()
	return auuo
}

// RemoveCreatedPartnerIDs removes the "created_partners" edge to Partner entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveCreatedPartnerIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveCreatedPartnerIDs(ids...)
	return auuo
}

// RemoveCreatedPartners removes "created_partners" edges to Partner entities.
func (auuo *ApiUserUpdateOne) RemoveCreatedPartners(p ...*Partner) *ApiUserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auuo.RemoveCreatedPartnerIDs(ids...)
}

// ClearSurveyProgress clears all "survey_progress" edges to the SurveyProgress entity.
func (auuo *ApiUserUpdateOne) ClearSurveyProgress() *ApiUserUpdateOne {
	auuo.mutation.ClearSurveyProgress()
	return auuo
}

// RemoveSurveyProgresIDs removes the "survey_progress" edge to SurveyProgress entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveSurveyProgresIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveSurveyProgresIDs(ids...)
	return auuo
}

// RemoveSurveyProgress removes "survey_progress" edges to SurveyProgress entities.
func (auuo *ApiUserUpdateOne) RemoveSurveyProgress(s ...*SurveyProgress) *ApiUserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auuo.RemoveSurveyProgresIDs(ids...)
}

// ClearEstimateActivities clears all "estimate_activities" edges to the EstimateActivity entity.
func (auuo *ApiUserUpdateOne) ClearEstimateActivities() *ApiUserUpdateOne {
	auuo.mutation.ClearEstimateActivities()
	return auuo
}

// RemoveEstimateActivityIDs removes the "estimate_activities" edge to EstimateActivity entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveEstimateActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveEstimateActivityIDs(ids...)
	return auuo
}

// RemoveEstimateActivities removes "estimate_activities" edges to EstimateActivity entities.
func (auuo *ApiUserUpdateOne) RemoveEstimateActivities(e ...*EstimateActivity) *ApiUserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auuo.RemoveEstimateActivityIDs(ids...)
}

// ClearUserActivities clears all "user_activities" edges to the UserActivity entity.
func (auuo *ApiUserUpdateOne) ClearUserActivities() *ApiUserUpdateOne {
	auuo.mutation.ClearUserActivities()
	return auuo
}

// RemoveUserActivityIDs removes the "user_activities" edge to UserActivity entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveUserActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveUserActivityIDs(ids...)
	return auuo
}

// RemoveUserActivities removes "user_activities" edges to UserActivity entities.
func (auuo *ApiUserUpdateOne) RemoveUserActivities(u ...*UserActivity) *ApiUserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auuo.RemoveUserActivityIDs(ids...)
}

// ClearPartnerActivities clears all "partner_activities" edges to the PartnerActivity entity.
func (auuo *ApiUserUpdateOne) ClearPartnerActivities() *ApiUserUpdateOne {
	auuo.mutation.ClearPartnerActivities()
	return auuo
}

// RemovePartnerActivityIDs removes the "partner_activities" edge to PartnerActivity entities by IDs.
func (auuo *ApiUserUpdateOne) RemovePartnerActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemovePartnerActivityIDs(ids...)
	return auuo
}

// RemovePartnerActivities removes "partner_activities" edges to PartnerActivity entities.
func (auuo *ApiUserUpdateOne) RemovePartnerActivities(p ...*PartnerActivity) *ApiUserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auuo.RemovePartnerActivityIDs(ids...)
}

// ClearJobActivities clears all "job_activities" edges to the JobActivity entity.
func (auuo *ApiUserUpdateOne) ClearJobActivities() *ApiUserUpdateOne {
	auuo.mutation.ClearJobActivities()
	return auuo
}

// RemoveJobActivityIDs removes the "job_activities" edge to JobActivity entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveJobActivityIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveJobActivityIDs(ids...)
	return auuo
}

// RemoveJobActivities removes "job_activities" edges to JobActivity entities.
func (auuo *ApiUserUpdateOne) RemoveJobActivities(j ...*JobActivity) *ApiUserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auuo.RemoveJobActivityIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the ChannelMessage entity.
func (auuo *ApiUserUpdateOne) ClearNotifications() *ApiUserUpdateOne {
	auuo.mutation.ClearNotifications()
	return auuo
}

// RemoveNotificationIDs removes the "notifications" edge to ChannelMessage entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveNotificationIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveNotificationIDs(ids...)
	return auuo
}

// RemoveNotifications removes "notifications" edges to ChannelMessage entities.
func (auuo *ApiUserUpdateOne) RemoveNotifications(c ...*ChannelMessage) *ApiUserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auuo.RemoveNotificationIDs(ids...)
}

// ClearJobProgressHistory clears all "job_progress_history" edges to the JobProgressHistory entity.
func (auuo *ApiUserUpdateOne) ClearJobProgressHistory() *ApiUserUpdateOne {
	auuo.mutation.ClearJobProgressHistory()
	return auuo
}

// RemoveJobProgressHistoryIDs removes the "job_progress_history" edge to JobProgressHistory entities by IDs.
func (auuo *ApiUserUpdateOne) RemoveJobProgressHistoryIDs(ids ...string) *ApiUserUpdateOne {
	auuo.mutation.RemoveJobProgressHistoryIDs(ids...)
	return auuo
}

// RemoveJobProgressHistory removes "job_progress_history" edges to JobProgressHistory entities.
func (auuo *ApiUserUpdateOne) RemoveJobProgressHistory(j ...*JobProgressHistory) *ApiUserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auuo.RemoveJobProgressHistoryIDs(ids...)
}

// Where appends a list predicates to the ApiUserUpdate builder.
func (auuo *ApiUserUpdateOne) Where(ps ...predicate.ApiUser) *ApiUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *ApiUserUpdateOne) Select(field string, fields ...string) *ApiUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated ApiUser entity.
func (auuo *ApiUserUpdateOne) Save(ctx context.Context) (*ApiUser, error) {
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *ApiUserUpdateOne) SaveX(ctx context.Context) *ApiUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *ApiUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *ApiUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *ApiUserUpdateOne) check() error {
	if v, ok := auuo.mutation.Username(); ok {
		if err := apiuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "ApiUser.username": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.PwdHash(); ok {
		if err := apiuser.PwdHashValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hash", err: fmt.Errorf(`ent: validator failed for field "ApiUser.pwd_hash": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.CbAPIAuth(); ok {
		if err := apiuser.CbAPIAuthValidator(v); err != nil {
			return &ValidationError{Name: "cb_api_auth", err: fmt.Errorf(`ent: validator failed for field "ApiUser.cb_api_auth": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auuo *ApiUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiUserUpdateOne {
	auuo.modifiers = append(auuo.modifiers, modifiers...)
	return auuo
}

func (auuo *ApiUserUpdateOne) sqlSave(ctx context.Context) (_node *ApiUser, err error) {
	if err := auuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiuser.Table, apiuser.Columns, sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiuser.FieldID)
		for _, f := range fields {
			if !apiuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apiuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Username(); ok {
		_spec.SetField(apiuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auuo.mutation.PwdHash(); ok {
		_spec.SetField(apiuser.FieldPwdHash, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Active(); ok {
		_spec.SetField(apiuser.FieldActive, field.TypeBool, value)
	}
	if value, ok := auuo.mutation.CbAPIURL(); ok {
		_spec.SetField(apiuser.FieldCbAPIURL, field.TypeString, value)
	}
	if auuo.mutation.CbAPIURLCleared() {
		_spec.ClearField(apiuser.FieldCbAPIURL, field.TypeString)
	}
	if value, ok := auuo.mutation.CbAPIAuth(); ok {
		_spec.SetField(apiuser.FieldCbAPIAuth, field.TypeEnum, value)
	}
	if auuo.mutation.CbAPIAuthCleared() {
		_spec.ClearField(apiuser.FieldCbAPIAuth, field.TypeEnum)
	}
	if value, ok := auuo.mutation.CbAPIUser(); ok {
		_spec.SetField(apiuser.FieldCbAPIUser, field.TypeString, value)
	}
	if auuo.mutation.CbAPIUserCleared() {
		_spec.ClearField(apiuser.FieldCbAPIUser, field.TypeString)
	}
	if value, ok := auuo.mutation.CbAPIPwd(); ok {
		_spec.SetField(apiuser.FieldCbAPIPwd, field.TypeString, value)
	}
	if auuo.mutation.CbAPIPwdCleared() {
		_spec.ClearField(apiuser.FieldCbAPIPwd, field.TypeString)
	}
	if value, ok := auuo.mutation.CbAPIToken(); ok {
		_spec.SetField(apiuser.FieldCbAPIToken, field.TypeString, value)
	}
	if auuo.mutation.CbAPITokenCleared() {
		_spec.ClearField(apiuser.FieldCbAPIToken, field.TypeString)
	}
	if value, ok := auuo.mutation.CbAPIEndpoints(); ok {
		_spec.SetField(apiuser.FieldCbAPIEndpoints, field.TypeJSON, value)
	}
	if auuo.mutation.CbAPIEndpointsCleared() {
		_spec.ClearField(apiuser.FieldCbAPIEndpoints, field.TypeJSON)
	}
	if auuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !auuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !auuo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedCreatedEstimatesIDs(); len(nodes) > 0 && !auuo.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.CreatedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedCreatedJobsIDs(); len(nodes) > 0 && !auuo.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.CreatedJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.CreatedPartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedCreatedPartnersIDs(); len(nodes) > 0 && !auuo.mutation.CreatedPartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.CreatedPartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedSurveyProgressIDs(); len(nodes) > 0 && !auuo.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.SurveyProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedEstimateActivitiesIDs(); len(nodes) > 0 && !auuo.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.EstimateActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedUserActivitiesIDs(); len(nodes) > 0 && !auuo.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.UserActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedPartnerActivitiesIDs(); len(nodes) > 0 && !auuo.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.PartnerActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedJobActivitiesIDs(); len(nodes) > 0 && !auuo.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.JobActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !auuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedJobProgressHistoryIDs(); len(nodes) > 0 && !auuo.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.JobProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auuo.modifiers...)
	_node = &ApiUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}

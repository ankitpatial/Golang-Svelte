// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/partner"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InstallationJob is the model entity for the InstallationJob schema.
type InstallationJob struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Type holds the value of the "type" field.
	Type enum.InstallationType `json:"type,omitempty"`
	// OwnerName holds the value of the "owner_name" field.
	OwnerName string `json:"owner_name,omitempty"`
	// OwnerPhone holds the value of the "owner_phone" field.
	OwnerPhone string `json:"owner_phone,omitempty"`
	// OwnerEmail holds the value of the "owner_email" field.
	OwnerEmail string `json:"owner_email,omitempty"`
	// OwnerAddress holds the value of the "owner_address" field.
	OwnerAddress string `json:"owner_address,omitempty"`
	// OwnerAddressLat holds the value of the "owner_address_lat" field.
	OwnerAddressLat *float64 `json:"owner_address_lat,omitempty"`
	// OwnerAddressLng holds the value of the "owner_address_lng" field.
	OwnerAddressLng *float64 `json:"owner_address_lng,omitempty"`
	// SpecialNote holds the value of the "special_note" field.
	SpecialNote *string `json:"special_note,omitempty"`
	// Pkg holds the value of the "pkg" field.
	Pkg string `json:"pkg,omitempty"`
	// PkgDescription holds the value of the "pkg_description" field.
	PkgDescription string `json:"pkg_description,omitempty"`
	// PkgFeatures holds the value of the "pkg_features" field.
	PkgFeatures []string `json:"pkg_features,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Approval holds the value of the "approval" field.
	Approval enum.Approval `json:"approval,omitempty"`
	// ApprovalAt holds the value of the "approval_at" field.
	ApprovalAt time.Time `json:"approval_at,omitempty"`
	// DenyReason holds the value of the "deny_reason" field.
	DenyReason string `json:"deny_reason,omitempty"`
	// Status holds the value of the "status" field.
	Status enum.InstallationStatus `json:"status,omitempty"`
	// StatusAt holds the value of the "status_at" field.
	StatusAt time.Time `json:"status_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstallationJobQuery when eager-loading is set.
	Edges                 InstallationJobEdges `json:"edges"`
	requesting_partner_id *string
	assigned_partner_id   *string
	creator_id            *string
	sales_rep_id          *string
	selectValues          sql.SelectValues
}

// InstallationJobEdges holds the relations/edges for other nodes in the graph.
type InstallationJobEdges struct {
	// Items holds the value of the items edge.
	Items []*InstallationJobItem `json:"items,omitempty"`
	// ProgressHistory holds the value of the progress_history edge.
	ProgressHistory []*InstallationJobProgress `json:"progress_history,omitempty"`
	// RequestingPartner holds the value of the requesting_partner edge.
	RequestingPartner *Partner `json:"requesting_partner,omitempty"`
	// AssignedPartner holds the value of the assigned_partner edge.
	AssignedPartner *Partner `json:"assigned_partner,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// SalesRep holds the value of the sales_rep edge.
	SalesRep *User `json:"sales_rep,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedItems           map[string][]*InstallationJobItem
	namedProgressHistory map[string][]*InstallationJobProgress
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e InstallationJobEdges) ItemsOrErr() ([]*InstallationJobItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// ProgressHistoryOrErr returns the ProgressHistory value or an error if the edge
// was not loaded in eager-loading.
func (e InstallationJobEdges) ProgressHistoryOrErr() ([]*InstallationJobProgress, error) {
	if e.loadedTypes[1] {
		return e.ProgressHistory, nil
	}
	return nil, &NotLoadedError{edge: "progress_history"}
}

// RequestingPartnerOrErr returns the RequestingPartner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobEdges) RequestingPartnerOrErr() (*Partner, error) {
	if e.loadedTypes[2] {
		if e.RequestingPartner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.RequestingPartner, nil
	}
	return nil, &NotLoadedError{edge: "requesting_partner"}
}

// AssignedPartnerOrErr returns the AssignedPartner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobEdges) AssignedPartnerOrErr() (*Partner, error) {
	if e.loadedTypes[3] {
		if e.AssignedPartner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.AssignedPartner, nil
	}
	return nil, &NotLoadedError{edge: "assigned_partner"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// SalesRepOrErr returns the SalesRep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobEdges) SalesRepOrErr() (*User, error) {
	if e.loadedTypes[5] {
		if e.SalesRep == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.SalesRep, nil
	}
	return nil, &NotLoadedError{edge: "sales_rep"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstallationJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case installationjob.FieldPkgFeatures:
			values[i] = new([]byte)
		case installationjob.FieldOwnerAddressLat, installationjob.FieldOwnerAddressLng, installationjob.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case installationjob.FieldID, installationjob.FieldType, installationjob.FieldOwnerName, installationjob.FieldOwnerPhone, installationjob.FieldOwnerEmail, installationjob.FieldOwnerAddress, installationjob.FieldSpecialNote, installationjob.FieldPkg, installationjob.FieldPkgDescription, installationjob.FieldApproval, installationjob.FieldDenyReason, installationjob.FieldStatus:
			values[i] = new(sql.NullString)
		case installationjob.FieldCreatedAt, installationjob.FieldUpdatedAt, installationjob.FieldApprovalAt, installationjob.FieldStatusAt:
			values[i] = new(sql.NullTime)
		case installationjob.ForeignKeys[0]: // requesting_partner_id
			values[i] = new(sql.NullString)
		case installationjob.ForeignKeys[1]: // assigned_partner_id
			values[i] = new(sql.NullString)
		case installationjob.ForeignKeys[2]: // creator_id
			values[i] = new(sql.NullString)
		case installationjob.ForeignKeys[3]: // sales_rep_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstallationJob fields.
func (ij *InstallationJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case installationjob.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ij.ID = value.String
			}
		case installationjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ij.CreatedAt = value.Time
			}
		case installationjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ij.UpdatedAt = value.Time
			}
		case installationjob.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ij.Type = enum.InstallationType(value.String)
			}
		case installationjob.FieldOwnerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_name", values[i])
			} else if value.Valid {
				ij.OwnerName = value.String
			}
		case installationjob.FieldOwnerPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_phone", values[i])
			} else if value.Valid {
				ij.OwnerPhone = value.String
			}
		case installationjob.FieldOwnerEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_email", values[i])
			} else if value.Valid {
				ij.OwnerEmail = value.String
			}
		case installationjob.FieldOwnerAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_address", values[i])
			} else if value.Valid {
				ij.OwnerAddress = value.String
			}
		case installationjob.FieldOwnerAddressLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_address_lat", values[i])
			} else if value.Valid {
				ij.OwnerAddressLat = new(float64)
				*ij.OwnerAddressLat = value.Float64
			}
		case installationjob.FieldOwnerAddressLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_address_lng", values[i])
			} else if value.Valid {
				ij.OwnerAddressLng = new(float64)
				*ij.OwnerAddressLng = value.Float64
			}
		case installationjob.FieldSpecialNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field special_note", values[i])
			} else if value.Valid {
				ij.SpecialNote = new(string)
				*ij.SpecialNote = value.String
			}
		case installationjob.FieldPkg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pkg", values[i])
			} else if value.Valid {
				ij.Pkg = value.String
			}
		case installationjob.FieldPkgDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pkg_description", values[i])
			} else if value.Valid {
				ij.PkgDescription = value.String
			}
		case installationjob.FieldPkgFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pkg_features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ij.PkgFeatures); err != nil {
					return fmt.Errorf("unmarshal field pkg_features: %w", err)
				}
			}
		case installationjob.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ij.Price = value.Float64
			}
		case installationjob.FieldApproval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval", values[i])
			} else if value.Valid {
				ij.Approval = enum.Approval(value.String)
			}
		case installationjob.FieldApprovalAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approval_at", values[i])
			} else if value.Valid {
				ij.ApprovalAt = value.Time
			}
		case installationjob.FieldDenyReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deny_reason", values[i])
			} else if value.Valid {
				ij.DenyReason = value.String
			}
		case installationjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ij.Status = enum.InstallationStatus(value.String)
			}
		case installationjob.FieldStatusAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field status_at", values[i])
			} else if value.Valid {
				ij.StatusAt = value.Time
			}
		case installationjob.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requesting_partner_id", values[i])
			} else if value.Valid {
				ij.requesting_partner_id = new(string)
				*ij.requesting_partner_id = value.String
			}
		case installationjob.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_partner_id", values[i])
			} else if value.Valid {
				ij.assigned_partner_id = new(string)
				*ij.assigned_partner_id = value.String
			}
		case installationjob.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				ij.creator_id = new(string)
				*ij.creator_id = value.String
			}
		case installationjob.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales_rep_id", values[i])
			} else if value.Valid {
				ij.sales_rep_id = new(string)
				*ij.sales_rep_id = value.String
			}
		default:
			ij.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstallationJob.
// This includes values selected through modifiers, order, etc.
func (ij *InstallationJob) Value(name string) (ent.Value, error) {
	return ij.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the InstallationJob entity.
func (ij *InstallationJob) QueryItems() *InstallationJobItemQuery {
	return NewInstallationJobClient(ij.config).QueryItems(ij)
}

// QueryProgressHistory queries the "progress_history" edge of the InstallationJob entity.
func (ij *InstallationJob) QueryProgressHistory() *InstallationJobProgressQuery {
	return NewInstallationJobClient(ij.config).QueryProgressHistory(ij)
}

// QueryRequestingPartner queries the "requesting_partner" edge of the InstallationJob entity.
func (ij *InstallationJob) QueryRequestingPartner() *PartnerQuery {
	return NewInstallationJobClient(ij.config).QueryRequestingPartner(ij)
}

// QueryAssignedPartner queries the "assigned_partner" edge of the InstallationJob entity.
func (ij *InstallationJob) QueryAssignedPartner() *PartnerQuery {
	return NewInstallationJobClient(ij.config).QueryAssignedPartner(ij)
}

// QueryCreator queries the "creator" edge of the InstallationJob entity.
func (ij *InstallationJob) QueryCreator() *UserQuery {
	return NewInstallationJobClient(ij.config).QueryCreator(ij)
}

// QuerySalesRep queries the "sales_rep" edge of the InstallationJob entity.
func (ij *InstallationJob) QuerySalesRep() *UserQuery {
	return NewInstallationJobClient(ij.config).QuerySalesRep(ij)
}

// Update returns a builder for updating this InstallationJob.
// Note that you need to call InstallationJob.Unwrap() before calling this method if this InstallationJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (ij *InstallationJob) Update() *InstallationJobUpdateOne {
	return NewInstallationJobClient(ij.config).UpdateOne(ij)
}

// Unwrap unwraps the InstallationJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ij *InstallationJob) Unwrap() *InstallationJob {
	_tx, ok := ij.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstallationJob is not a transactional entity")
	}
	ij.config.driver = _tx.drv
	return ij
}

// String implements the fmt.Stringer.
func (ij *InstallationJob) String() string {
	var builder strings.Builder
	builder.WriteString("InstallationJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ij.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ij.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ij.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ij.Type))
	builder.WriteString(", ")
	builder.WriteString("owner_name=")
	builder.WriteString(ij.OwnerName)
	builder.WriteString(", ")
	builder.WriteString("owner_phone=")
	builder.WriteString(ij.OwnerPhone)
	builder.WriteString(", ")
	builder.WriteString("owner_email=")
	builder.WriteString(ij.OwnerEmail)
	builder.WriteString(", ")
	builder.WriteString("owner_address=")
	builder.WriteString(ij.OwnerAddress)
	builder.WriteString(", ")
	if v := ij.OwnerAddressLat; v != nil {
		builder.WriteString("owner_address_lat=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ij.OwnerAddressLng; v != nil {
		builder.WriteString("owner_address_lng=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ij.SpecialNote; v != nil {
		builder.WriteString("special_note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("pkg=")
	builder.WriteString(ij.Pkg)
	builder.WriteString(", ")
	builder.WriteString("pkg_description=")
	builder.WriteString(ij.PkgDescription)
	builder.WriteString(", ")
	builder.WriteString("pkg_features=")
	builder.WriteString(fmt.Sprintf("%v", ij.PkgFeatures))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ij.Price))
	builder.WriteString(", ")
	builder.WriteString("approval=")
	builder.WriteString(fmt.Sprintf("%v", ij.Approval))
	builder.WriteString(", ")
	builder.WriteString("approval_at=")
	builder.WriteString(ij.ApprovalAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deny_reason=")
	builder.WriteString(ij.DenyReason)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ij.Status))
	builder.WriteString(", ")
	builder.WriteString("status_at=")
	builder.WriteString(ij.StatusAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedItems returns the Items named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ij *InstallationJob) NamedItems(name string) ([]*InstallationJobItem, error) {
	if ij.Edges.namedItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ij.Edges.namedItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ij *InstallationJob) appendNamedItems(name string, edges ...*InstallationJobItem) {
	if ij.Edges.namedItems == nil {
		ij.Edges.namedItems = make(map[string][]*InstallationJobItem)
	}
	if len(edges) == 0 {
		ij.Edges.namedItems[name] = []*InstallationJobItem{}
	} else {
		ij.Edges.namedItems[name] = append(ij.Edges.namedItems[name], edges...)
	}
}

// NamedProgressHistory returns the ProgressHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ij *InstallationJob) NamedProgressHistory(name string) ([]*InstallationJobProgress, error) {
	if ij.Edges.namedProgressHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ij.Edges.namedProgressHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ij *InstallationJob) appendNamedProgressHistory(name string, edges ...*InstallationJobProgress) {
	if ij.Edges.namedProgressHistory == nil {
		ij.Edges.namedProgressHistory = make(map[string][]*InstallationJobProgress)
	}
	if len(edges) == 0 {
		ij.Edges.namedProgressHistory[name] = []*InstallationJobProgress{}
	} else {
		ij.Edges.namedProgressHistory[name] = append(ij.Edges.namedProgressHistory[name], edges...)
	}
}

// InstallationJobs is a parsable slice of InstallationJob.
type InstallationJobs []*InstallationJob

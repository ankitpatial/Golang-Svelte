// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (au *ApiUser) Tokens(ctx context.Context) (result []*ApiUserToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.TokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryTokens().All(ctx)
	}
	return result, err
}

func (au *ApiUser) AuditLogs(ctx context.Context) (result []*AuditLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedAuditLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.AuditLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryAuditLogs().All(ctx)
	}
	return result, err
}

func (au *ApiUser) CreatedEstimates(ctx context.Context) (result []*Estimate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedCreatedEstimates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.CreatedEstimatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryCreatedEstimates().All(ctx)
	}
	return result, err
}

func (au *ApiUser) CreatedJobs(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedCreatedJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.CreatedJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryCreatedJobs().All(ctx)
	}
	return result, err
}

func (au *ApiUser) CreatedPartners(ctx context.Context) (result []*Partner, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedCreatedPartners(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.CreatedPartnersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryCreatedPartners().All(ctx)
	}
	return result, err
}

func (au *ApiUser) SurveyProgress(ctx context.Context) (result []*SurveyProgress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedSurveyProgress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.SurveyProgressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QuerySurveyProgress().All(ctx)
	}
	return result, err
}

func (au *ApiUser) EstimateActivities(ctx context.Context) (result []*EstimateActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedEstimateActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.EstimateActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryEstimateActivities().All(ctx)
	}
	return result, err
}

func (au *ApiUser) UserActivities(ctx context.Context) (result []*UserActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedUserActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.UserActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryUserActivities().All(ctx)
	}
	return result, err
}

func (au *ApiUser) PartnerActivities(ctx context.Context) (result []*PartnerActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedPartnerActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.PartnerActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryPartnerActivities().All(ctx)
	}
	return result, err
}

func (au *ApiUser) JobActivities(ctx context.Context) (result []*JobActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedJobActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.JobActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryJobActivities().All(ctx)
	}
	return result, err
}

func (au *ApiUser) Notifications(ctx context.Context) (result []*ChannelMessage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedNotifications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.NotificationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryNotifications().All(ctx)
	}
	return result, err
}

func (au *ApiUser) JobProgressHistory(ctx context.Context) (result []*JobProgressHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedJobProgressHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.JobProgressHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryJobProgressHistory().All(ctx)
	}
	return result, err
}

func (aut *ApiUserToken) APIUser(ctx context.Context) (*ApiUser, error) {
	result, err := aut.Edges.APIUserOrErr()
	if IsNotLoaded(err) {
		result, err = aut.QueryAPIUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (al *AuditLog) User(ctx context.Context) (*User, error) {
	result, err := al.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = al.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (al *AuditLog) APIUser(ctx context.Context) (*ApiUser, error) {
	result, err := al.Edges.APIUserOrErr()
	if IsNotLoaded(err) {
		result, err = al.QueryAPIUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Channel) Subscriptions(ctx context.Context) (result []*ChannelSub, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedSubscriptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.SubscriptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QuerySubscriptions().All(ctx)
	}
	return result, err
}

func (c *Channel) Messages(ctx context.Context) (result []*ChannelMessage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.MessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryMessages().All(ctx)
	}
	return result, err
}

func (cm *ChannelMessage) Reads(ctx context.Context) (result []*ChannelMessageRead, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cm.NamedReads(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cm.Edges.ReadsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cm.QueryReads().All(ctx)
	}
	return result, err
}

func (cm *ChannelMessage) Channel(ctx context.Context) (*Channel, error) {
	result, err := cm.Edges.ChannelOrErr()
	if IsNotLoaded(err) {
		result, err = cm.QueryChannel().Only(ctx)
	}
	return result, err
}

func (cm *ChannelMessage) From(ctx context.Context) (*User, error) {
	result, err := cm.Edges.FromOrErr()
	if IsNotLoaded(err) {
		result, err = cm.QueryFrom().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cm *ChannelMessage) FromAPIUser(ctx context.Context) (*ApiUser, error) {
	result, err := cm.Edges.FromAPIUserOrErr()
	if IsNotLoaded(err) {
		result, err = cm.QueryFromAPIUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cm *ChannelMessage) To(ctx context.Context) (*User, error) {
	result, err := cm.Edges.ToOrErr()
	if IsNotLoaded(err) {
		result, err = cm.QueryTo().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cmr *ChannelMessageRead) ChannelMessage(ctx context.Context) (*ChannelMessage, error) {
	result, err := cmr.Edges.ChannelMessageOrErr()
	if IsNotLoaded(err) {
		result, err = cmr.QueryChannelMessage().Only(ctx)
	}
	return result, err
}

func (cmr *ChannelMessageRead) User(ctx context.Context) (*User, error) {
	result, err := cmr.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = cmr.QueryUser().Only(ctx)
	}
	return result, err
}

func (cs *ChannelSub) Channel(ctx context.Context) (*Channel, error) {
	result, err := cs.Edges.ChannelOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryChannel().Only(ctx)
	}
	return result, err
}

func (cs *ChannelSub) User(ctx context.Context) (*User, error) {
	result, err := cs.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *ChannelSub) Partner(ctx context.Context) (*Partner, error) {
	result, err := cs.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cu *ContactUs) Partner(ctx context.Context) (*Partner, error) {
	result, err := cu.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = cu.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cu *ContactUs) Creator(ctx context.Context) (*User, error) {
	result, err := cu.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = cu.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) TrainingVideo(ctx context.Context) (*TrainingVideo, error) {
	result, err := d.Edges.TrainingVideoOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryTrainingVideo().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) TrainingVideoPoster(ctx context.Context) (*TrainingVideo, error) {
	result, err := d.Edges.TrainingVideoPosterOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryTrainingVideoPoster().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) ProductsImage(ctx context.Context) (*Product, error) {
	result, err := d.Edges.ProductsImageOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryProductsImage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) InstallationJobItemImage(ctx context.Context) (*InstallationJobItem, error) {
	result, err := d.Edges.InstallationJobItemImageOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryInstallationJobItemImage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) EstimatePdf(ctx context.Context) (*Estimate, error) {
	result, err := d.Edges.EstimatePdfOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryEstimatePdf().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) JobEstimatePdf(ctx context.Context) (*Job, error) {
	result, err := d.Edges.JobEstimatePdfOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryJobEstimatePdf().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) Activities(ctx context.Context) (result []*EstimateActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryActivities().All(ctx)
	}
	return result, err
}

func (e *Estimate) JobInfo(ctx context.Context) (*Job, error) {
	result, err := e.Edges.JobInfoOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryJobInfo().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) Partner(ctx context.Context) (*Partner, error) {
	result, err := e.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) HomeOwner(ctx context.Context) (*HomeOwner, error) {
	result, err := e.Edges.HomeOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryHomeOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) SalesRep(ctx context.Context) (*User, error) {
	result, err := e.Edges.SalesRepOrErr()
	if IsNotLoaded(err) {
		result, err = e.QuerySalesRep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) Creator(ctx context.Context) (*User, error) {
	result, err := e.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := e.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) Pdf(ctx context.Context) (*Document, error) {
	result, err := e.Edges.PdfOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPdf().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ea *EstimateActivity) Estimate(ctx context.Context) (*Estimate, error) {
	result, err := ea.Edges.EstimateOrErr()
	if IsNotLoaded(err) {
		result, err = ea.QueryEstimate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ea *EstimateActivity) Creator(ctx context.Context) (*User, error) {
	result, err := ea.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = ea.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ea *EstimateActivity) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := ea.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = ea.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ho *HomeOwner) Estimates(ctx context.Context) (result []*Estimate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ho.NamedEstimates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ho.Edges.EstimatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ho.QueryEstimates().All(ctx)
	}
	return result, err
}

func (ho *HomeOwner) Jobs(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ho.NamedJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ho.Edges.JobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ho.QueryJobs().All(ctx)
	}
	return result, err
}

func (ho *HomeOwner) Partner(ctx context.Context) (*Partner, error) {
	result, err := ho.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = ho.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ij *InstallationJob) Items(ctx context.Context) (result []*InstallationJobItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ij.NamedItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ij.Edges.ItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ij.QueryItems().All(ctx)
	}
	return result, err
}

func (ij *InstallationJob) ProgressHistory(ctx context.Context) (result []*InstallationJobProgress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ij.NamedProgressHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ij.Edges.ProgressHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ij.QueryProgressHistory().All(ctx)
	}
	return result, err
}

func (ij *InstallationJob) RequestingPartner(ctx context.Context) (*Partner, error) {
	result, err := ij.Edges.RequestingPartnerOrErr()
	if IsNotLoaded(err) {
		result, err = ij.QueryRequestingPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ij *InstallationJob) AssignedPartner(ctx context.Context) (*Partner, error) {
	result, err := ij.Edges.AssignedPartnerOrErr()
	if IsNotLoaded(err) {
		result, err = ij.QueryAssignedPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ij *InstallationJob) Creator(ctx context.Context) (*User, error) {
	result, err := ij.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = ij.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ij *InstallationJob) SalesRep(ctx context.Context) (*User, error) {
	result, err := ij.Edges.SalesRepOrErr()
	if IsNotLoaded(err) {
		result, err = ij.QuerySalesRep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (iji *InstallationJobItem) Job(ctx context.Context) (*InstallationJob, error) {
	result, err := iji.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = iji.QueryJob().Only(ctx)
	}
	return result, err
}

func (ijp *InstallationJobProgress) Job(ctx context.Context) (*InstallationJob, error) {
	result, err := ijp.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = ijp.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ijp *InstallationJobProgress) Creator(ctx context.Context) (*User, error) {
	result, err := ijp.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = ijp.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) Payments(ctx context.Context) (result []*Payment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedPayments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.PaymentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryPayments().All(ctx)
	}
	return result, err
}

func (j *Job) Activities(ctx context.Context) (result []*JobActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.ActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryActivities().All(ctx)
	}
	return result, err
}

func (j *Job) AssignmentHistory(ctx context.Context) (result []*JobAssignmentHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedAssignmentHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.AssignmentHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryAssignmentHistory().All(ctx)
	}
	return result, err
}

func (j *Job) ProgressHistory(ctx context.Context) (result []*JobProgressHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedProgressHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.ProgressHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryProgressHistory().All(ctx)
	}
	return result, err
}

func (j *Job) Notes(ctx context.Context) (result []*JobNote, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedNotes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.NotesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryNotes().All(ctx)
	}
	return result, err
}

func (j *Job) DocUrls(ctx context.Context) (result []*JobDocURL, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = j.NamedDocUrls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = j.Edges.DocUrlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = j.QueryDocUrls().All(ctx)
	}
	return result, err
}

func (j *Job) Estimate(ctx context.Context) (*Estimate, error) {
	result, err := j.Edges.EstimateOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryEstimate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := j.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) Creator(ctx context.Context) (*User, error) {
	result, err := j.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) HomeOwner(ctx context.Context) (*HomeOwner, error) {
	result, err := j.Edges.HomeOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryHomeOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) SalesRep(ctx context.Context) (*User, error) {
	result, err := j.Edges.SalesRepOrErr()
	if IsNotLoaded(err) {
		result, err = j.QuerySalesRep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) Requester(ctx context.Context) (*Partner, error) {
	result, err := j.Edges.RequesterOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryRequester().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) RoofingPartner(ctx context.Context) (*Partner, error) {
	result, err := j.Edges.RoofingPartnerOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryRoofingPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) IntegrationPartner(ctx context.Context) (*Partner, error) {
	result, err := j.Edges.IntegrationPartnerOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryIntegrationPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) EpcPartner(ctx context.Context) (*Partner, error) {
	result, err := j.Edges.EpcPartnerOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryEpcPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) Epc(ctx context.Context) (*OptionList, error) {
	result, err := j.Edges.EpcOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryEpc().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (j *Job) EstimatePdf(ctx context.Context) (*Document, error) {
	result, err := j.Edges.EstimatePdfOrErr()
	if IsNotLoaded(err) {
		result, err = j.QueryEstimatePdf().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ja *JobActivity) Job(ctx context.Context) (*Job, error) {
	result, err := ja.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = ja.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ja *JobActivity) Creator(ctx context.Context) (*User, error) {
	result, err := ja.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = ja.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ja *JobActivity) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := ja.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = ja.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jah *JobAssignmentHistory) Job(ctx context.Context) (*Job, error) {
	result, err := jah.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = jah.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jah *JobAssignmentHistory) Partner(ctx context.Context) (*Partner, error) {
	result, err := jah.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = jah.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jdu *JobDocURL) Job(ctx context.Context) (*Job, error) {
	result, err := jdu.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = jdu.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jdu *JobDocURL) Creator(ctx context.Context) (*User, error) {
	result, err := jdu.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = jdu.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jn *JobNote) Job(ctx context.Context) (*Job, error) {
	result, err := jn.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = jn.QueryJob().Only(ctx)
	}
	return result, err
}

func (jn *JobNote) User(ctx context.Context) (*User, error) {
	result, err := jn.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = jn.QueryUser().Only(ctx)
	}
	return result, err
}

func (jn *JobNote) Partner(ctx context.Context) (*Partner, error) {
	result, err := jn.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = jn.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jph *JobProgressHistory) Job(ctx context.Context) (*Job, error) {
	result, err := jph.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = jph.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jph *JobProgressHistory) Creator(ctx context.Context) (*User, error) {
	result, err := jph.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = jph.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jph *JobProgressHistory) CreatorAPIUser(ctx context.Context) (*ApiUser, error) {
	result, err := jph.Edges.CreatorAPIUserOrErr()
	if IsNotLoaded(err) {
		result, err = jph.QueryCreatorAPIUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ns *NotifySetting) User(ctx context.Context) (*User, error) {
	result, err := ns.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ns.QueryUser().Only(ctx)
	}
	return result, err
}

func (ol *OptionList) FinanceOptions(ctx context.Context) (result []*Partner, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ol.NamedFinanceOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ol.Edges.FinanceOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ol.QueryFinanceOptions().All(ctx)
	}
	return result, err
}

func (ol *OptionList) EpcOptions(ctx context.Context) (result []*Partner, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ol.NamedEpcOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ol.Edges.EpcOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ol.QueryEpcOptions().All(ctx)
	}
	return result, err
}

func (ol *OptionList) Epc(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ol.NamedEpc(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ol.Edges.EpcOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ol.QueryEpc().All(ctx)
	}
	return result, err
}

func (pa *Partner) RequestedEstimates(ctx context.Context) (result []*Estimate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedRequestedEstimates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.RequestedEstimatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryRequestedEstimates().All(ctx)
	}
	return result, err
}

func (pa *Partner) EstimateHomeOwners(ctx context.Context) (result []*HomeOwner, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedEstimateHomeOwners(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.EstimateHomeOwnersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryEstimateHomeOwners().All(ctx)
	}
	return result, err
}

func (pa *Partner) RoofingJobs(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedRoofingJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.RoofingJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryRoofingJobs().All(ctx)
	}
	return result, err
}

func (pa *Partner) IntegrationJobs(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedIntegrationJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.IntegrationJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryIntegrationJobs().All(ctx)
	}
	return result, err
}

func (pa *Partner) EpcJobs(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedEpcJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.EpcJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryEpcJobs().All(ctx)
	}
	return result, err
}

func (pa *Partner) JobRequests(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedJobRequests(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.JobRequestsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryJobRequests().All(ctx)
	}
	return result, err
}

func (pa *Partner) Activities(ctx context.Context) (result []*PartnerActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryActivities().All(ctx)
	}
	return result, err
}

func (pa *Partner) JobAssignmentHistory(ctx context.Context) (result []*JobAssignmentHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedJobAssignmentHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.JobAssignmentHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryJobAssignmentHistory().All(ctx)
	}
	return result, err
}

func (pa *Partner) RequestedInstallationJobs(ctx context.Context) (result []*InstallationJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedRequestedInstallationJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.RequestedInstallationJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryRequestedInstallationJobs().All(ctx)
	}
	return result, err
}

func (pa *Partner) AssignedInstallationJobs(ctx context.Context) (result []*InstallationJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedAssignedInstallationJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.AssignedInstallationJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryAssignedInstallationJobs().All(ctx)
	}
	return result, err
}

func (pa *Partner) Contacts(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedContacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ContactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryContacts().All(ctx)
	}
	return result, err
}

func (pa *Partner) Creator(ctx context.Context) (*User, error) {
	result, err := pa.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Partner) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := pa.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Partner) Services(ctx context.Context) (result []*PartnerService, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedServices(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ServicesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryServices().All(ctx)
	}
	return result, err
}

func (pa *Partner) ServiceStates(ctx context.Context) (result []*PartnerServiceState, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedServiceStates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ServiceStatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryServiceStates().All(ctx)
	}
	return result, err
}

func (pa *Partner) ServiceCities(ctx context.Context) (result []*PartnerServiceCity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedServiceCities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ServiceCitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryServiceCities().All(ctx)
	}
	return result, err
}

func (pa *Partner) TrainingVideos(ctx context.Context) (result []*PartnerTrainingVideo, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedTrainingVideos(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.TrainingVideosOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryTrainingVideos().All(ctx)
	}
	return result, err
}

func (pa *Partner) ContactUsRequests(ctx context.Context) (result []*ContactUs, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedContactUsRequests(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ContactUsRequestsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryContactUsRequests().All(ctx)
	}
	return result, err
}

func (pa *Partner) Surveys(ctx context.Context) (result []*Survey, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedSurveys(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.SurveysOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QuerySurveys().All(ctx)
	}
	return result, err
}

func (pa *Partner) Sessions(ctx context.Context) (result []*UserSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.SessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QuerySessions().All(ctx)
	}
	return result, err
}

func (pa *Partner) JobNotes(ctx context.Context) (result []*JobNote, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedJobNotes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.JobNotesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryJobNotes().All(ctx)
	}
	return result, err
}

func (pa *Partner) Channels(ctx context.Context) (result []*ChannelSub, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedChannels(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ChannelsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryChannels().All(ctx)
	}
	return result, err
}

func (pa *Partner) FinanceOptions(ctx context.Context) (result []*OptionList, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedFinanceOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.FinanceOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryFinanceOptions().All(ctx)
	}
	return result, err
}

func (pa *Partner) EpcOptions(ctx context.Context) (result []*OptionList, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedEpcOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.EpcOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryEpcOptions().All(ctx)
	}
	return result, err
}

func (pa *Partner) PartnerContacts(ctx context.Context) (result []*PartnerContact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedPartnerContacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.PartnerContactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryPartnerContacts().All(ctx)
	}
	return result, err
}

func (pa *PartnerActivity) Partner(ctx context.Context) (*Partner, error) {
	result, err := pa.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *PartnerActivity) Creator(ctx context.Context) (*User, error) {
	result, err := pa.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *PartnerActivity) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := pa.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pc *PartnerContact) User(ctx context.Context) (*User, error) {
	result, err := pc.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pc.QueryUser().Only(ctx)
	}
	return result, err
}

func (pc *PartnerContact) Partner(ctx context.Context) (*Partner, error) {
	result, err := pc.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = pc.QueryPartner().Only(ctx)
	}
	return result, err
}

func (pc *PartnerContact) Sessions(ctx context.Context) (result []*UserSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.SessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QuerySessions().All(ctx)
	}
	return result, err
}

func (ps *PartnerService) Partner(ctx context.Context) (*Partner, error) {
	result, err := ps.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryPartner().Only(ctx)
	}
	return result, err
}

func (psc *PartnerServiceCity) Partner(ctx context.Context) (*Partner, error) {
	result, err := psc.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = psc.QueryPartner().Only(ctx)
	}
	return result, err
}

func (pss *PartnerServiceState) Partner(ctx context.Context) (*Partner, error) {
	result, err := pss.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryPartner().Only(ctx)
	}
	return result, err
}

func (ptv *PartnerTrainingVideo) Video(ctx context.Context) (*TrainingVideo, error) {
	result, err := ptv.Edges.VideoOrErr()
	if IsNotLoaded(err) {
		result, err = ptv.QueryVideo().Only(ctx)
	}
	return result, err
}

func (ptv *PartnerTrainingVideo) Partner(ctx context.Context) (*Partner, error) {
	result, err := ptv.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = ptv.QueryPartner().Only(ctx)
	}
	return result, err
}

func (pa *Payment) Job(ctx context.Context) (*Job, error) {
	result, err := pa.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pc *PostalCode) Pricing(ctx context.Context) (result []*Pricing, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedPricing(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.PricingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QueryPricing().All(ctx)
	}
	return result, err
}

func (pr *Pricing) Postal(ctx context.Context) (*PostalCode, error) {
	result, err := pr.Edges.PostalOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryPostal().Only(ctx)
	}
	return result, err
}

func (pr *Product) Package(ctx context.Context) (result []*ProductPackage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedPackage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.PackageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryPackage().All(ctx)
	}
	return result, err
}

func (pr *Product) Creator(ctx context.Context) (*User, error) {
	result, err := pr.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCreator().Only(ctx)
	}
	return result, err
}

func (pr *Product) Image(ctx context.Context) (*Document, error) {
	result, err := pr.Edges.ImageOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryImage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pp *ProductPackage) Items(ctx context.Context) (result []*Product, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pp.NamedItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pp.Edges.ItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pp.QueryItems().All(ctx)
	}
	return result, err
}

func (pp *ProductPackage) Creator(ctx context.Context) (*User, error) {
	result, err := pp.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = pp.QueryCreator().Only(ctx)
	}
	return result, err
}

func (s *Survey) ProgressHistory(ctx context.Context) (result []*SurveyProgress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedProgressHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProgressHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryProgressHistory().All(ctx)
	}
	return result, err
}

func (s *Survey) CreatedBy(ctx context.Context) (*User, error) {
	result, err := s.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryCreatedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Survey) Partner(ctx context.Context) (*Partner, error) {
	result, err := s.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sp *SurveyProgress) Survey(ctx context.Context) (*Survey, error) {
	result, err := sp.Edges.SurveyOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QuerySurvey().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sp *SurveyProgress) Creator(ctx context.Context) (*User, error) {
	result, err := sp.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sp *SurveyProgress) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := sp.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tc *TrainingCourse) TrainingVideos(ctx context.Context) (result []*TrainingVideo, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = tc.NamedTrainingVideos(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = tc.Edges.TrainingVideosOrErr()
	}
	if IsNotLoaded(err) {
		result, err = tc.QueryTrainingVideos().All(ctx)
	}
	return result, err
}

func (tc *TrainingCourse) Creator(ctx context.Context) (*User, error) {
	result, err := tc.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = tc.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tv *TrainingVideo) TrainingVideos(ctx context.Context) (result []*PartnerTrainingVideo, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = tv.NamedTrainingVideos(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = tv.Edges.TrainingVideosOrErr()
	}
	if IsNotLoaded(err) {
		result, err = tv.QueryTrainingVideos().All(ctx)
	}
	return result, err
}

func (tv *TrainingVideo) Creator(ctx context.Context) (*User, error) {
	result, err := tv.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = tv.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tv *TrainingVideo) Course(ctx context.Context) (*TrainingCourse, error) {
	result, err := tv.Edges.CourseOrErr()
	if IsNotLoaded(err) {
		result, err = tv.QueryCourse().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tv *TrainingVideo) Poster(ctx context.Context) (*Document, error) {
	result, err := tv.Edges.PosterOrErr()
	if IsNotLoaded(err) {
		result, err = tv.QueryPoster().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tv *TrainingVideo) Video(ctx context.Context) (*Document, error) {
	result, err := tv.Edges.VideoOrErr()
	if IsNotLoaded(err) {
		result, err = tv.QueryVideo().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Auths(ctx context.Context) (*UserAuth, error) {
	result, err := u.Edges.AuthsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryAuths().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Sessions(ctx context.Context) (result []*UserSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySessions().All(ctx)
	}
	return result, err
}

func (u *User) AuditLogs(ctx context.Context) (result []*AuditLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAuditLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AuditLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAuditLogs().All(ctx)
	}
	return result, err
}

func (u *User) Notify(ctx context.Context) (result []*NotifySetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedNotify(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.NotifyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryNotify().All(ctx)
	}
	return result, err
}

func (u *User) CreatedJobs(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedJobs().All(ctx)
	}
	return result, err
}

func (u *User) CreatedEstimates(ctx context.Context) (result []*Estimate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedEstimates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedEstimatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedEstimates().All(ctx)
	}
	return result, err
}

func (u *User) SalesRepEstimates(ctx context.Context) (result []*Estimate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSalesRepEstimates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SalesRepEstimatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySalesRepEstimates().All(ctx)
	}
	return result, err
}

func (u *User) Sales(ctx context.Context) (result []*Job, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSales(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SalesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySales().All(ctx)
	}
	return result, err
}

func (u *User) CreatedInstallationJobs(ctx context.Context) (result []*InstallationJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedInstallationJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedInstallationJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedInstallationJobs().All(ctx)
	}
	return result, err
}

func (u *User) InstallationLeads(ctx context.Context) (result []*InstallationJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedInstallationLeads(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.InstallationLeadsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryInstallationLeads().All(ctx)
	}
	return result, err
}

func (u *User) EstimateActivities(ctx context.Context) (result []*EstimateActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedEstimateActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.EstimateActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryEstimateActivities().All(ctx)
	}
	return result, err
}

func (u *User) JobActivities(ctx context.Context) (result []*JobActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedJobActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.JobActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryJobActivities().All(ctx)
	}
	return result, err
}

func (u *User) PartnerActivities(ctx context.Context) (result []*PartnerActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPartnerActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PartnerActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPartnerActivities().All(ctx)
	}
	return result, err
}

func (u *User) UserActivities(ctx context.Context) (result []*UserActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserActivities().All(ctx)
	}
	return result, err
}

func (u *User) Activities(ctx context.Context) (result []*UserActivity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedActivities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ActivitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryActivities().All(ctx)
	}
	return result, err
}

func (u *User) JobProgressHistory(ctx context.Context) (result []*JobProgressHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedJobProgressHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.JobProgressHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryJobProgressHistory().All(ctx)
	}
	return result, err
}

func (u *User) InstallationJobStatusChanger(ctx context.Context) (result []*InstallationJobProgress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedInstallationJobStatusChanger(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.InstallationJobStatusChangerOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryInstallationJobStatusChanger().All(ctx)
	}
	return result, err
}

func (u *User) ContactUsRequests(ctx context.Context) (result []*ContactUs, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedContactUsRequests(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ContactUsRequestsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryContactUsRequests().All(ctx)
	}
	return result, err
}

func (u *User) Partner(ctx context.Context) (result []*Partner, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPartner(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PartnerOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPartner().All(ctx)
	}
	return result, err
}

func (u *User) Surveys(ctx context.Context) (result []*Survey, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSurveys(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SurveysOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySurveys().All(ctx)
	}
	return result, err
}

func (u *User) SurveyProgress(ctx context.Context) (result []*SurveyProgress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSurveyProgress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SurveyProgressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySurveyProgress().All(ctx)
	}
	return result, err
}

func (u *User) CreatedTrainingVideos(ctx context.Context) (result []*TrainingVideo, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedTrainingVideos(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedTrainingVideosOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedTrainingVideos().All(ctx)
	}
	return result, err
}

func (u *User) CreatedTrainingCourses(ctx context.Context) (result []*TrainingCourse, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCreatedTrainingCourses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CreatedTrainingCoursesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedTrainingCourses().All(ctx)
	}
	return result, err
}

func (u *User) JobNotes(ctx context.Context) (result []*JobNote, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedJobNotes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.JobNotesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryJobNotes().All(ctx)
	}
	return result, err
}

func (u *User) ChatChannels(ctx context.Context) (result []*ChannelSub, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedChatChannels(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ChatChannelsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryChatChannels().All(ctx)
	}
	return result, err
}

func (u *User) SentMessages(ctx context.Context) (result []*ChannelMessage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSentMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SentMessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySentMessages().All(ctx)
	}
	return result, err
}

func (u *User) ReceivedMessages(ctx context.Context) (result []*ChannelMessage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedReceivedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ReceivedMessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryReceivedMessages().All(ctx)
	}
	return result, err
}

func (u *User) ChannelMessageRead(ctx context.Context) (result []*ChannelMessageRead, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedChannelMessageRead(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ChannelMessageReadOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryChannelMessageRead().All(ctx)
	}
	return result, err
}

func (u *User) ProductsCreated(ctx context.Context) (result []*Product, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedProductsCreated(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ProductsCreatedOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryProductsCreated().All(ctx)
	}
	return result, err
}

func (u *User) ProductPkgCreated(ctx context.Context) (result []*ProductPackage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedProductPkgCreated(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ProductPkgCreatedOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryProductPkgCreated().All(ctx)
	}
	return result, err
}

func (u *User) JobDocUrls(ctx context.Context) (result []*JobDocURL, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedJobDocUrls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.JobDocUrlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryJobDocUrls().All(ctx)
	}
	return result, err
}

func (u *User) PartnerContacts(ctx context.Context) (result []*PartnerContact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPartnerContacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PartnerContactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPartnerContacts().All(ctx)
	}
	return result, err
}

func (ua *UserActivity) User(ctx context.Context) (*User, error) {
	result, err := ua.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ua *UserActivity) Creator(ctx context.Context) (*User, error) {
	result, err := ua.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryCreator().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ua *UserActivity) CreatorAPI(ctx context.Context) (*ApiUser, error) {
	result, err := ua.Edges.CreatorAPIOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryCreatorAPI().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ua *UserAuth) User(ctx context.Context) (*User, error) {
	result, err := ua.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryUser().Only(ctx)
	}
	return result, err
}

func (us *UserSession) Sockets(ctx context.Context) (result []*UserSessionSocket, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = us.NamedSockets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = us.Edges.SocketsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = us.QuerySockets().All(ctx)
	}
	return result, err
}

func (us *UserSession) User(ctx context.Context) (*User, error) {
	result, err := us.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryUser().Only(ctx)
	}
	return result, err
}

func (us *UserSession) Partner(ctx context.Context) (*Partner, error) {
	result, err := us.Edges.PartnerOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryPartner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (us *UserSession) PartnerContact(ctx context.Context) (*PartnerContact, error) {
	result, err := us.Edges.PartnerContactOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryPartnerContact().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (uss *UserSessionSocket) Session(ctx context.Context) (*UserSession, error) {
	result, err := uss.Edges.SessionOrErr()
	if IsNotLoaded(err) {
		result, err = uss.QuerySession().Only(ctx)
	}
	return result, err
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/installationjobitem"
	"roofix/ent/job"
	"roofix/ent/predicate"
	"roofix/ent/product"
	"roofix/ent/trainingvideo"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentQuery is the builder for querying Document entities.
type DocumentQuery struct {
	config
	ctx                          *QueryContext
	order                        []document.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.Document
	withTrainingVideo            *TrainingVideoQuery
	withTrainingVideoPoster      *TrainingVideoQuery
	withProductsImage            *ProductQuery
	withInstallationJobItemImage *InstallationJobItemQuery
	withEstimatePdf              *EstimateQuery
	withJobEstimatePdf           *JobQuery
	withFKs                      bool
	loadTotal                    []func(context.Context, []*Document) error
	modifiers                    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DocumentQuery builder.
func (dq *DocumentQuery) Where(ps ...predicate.Document) *DocumentQuery {
	dq.predicates = append(dq.predicates, ps...)
	return dq
}

// Limit the number of records to be returned by this query.
func (dq *DocumentQuery) Limit(limit int) *DocumentQuery {
	dq.ctx.Limit = &limit
	return dq
}

// Offset to start from.
func (dq *DocumentQuery) Offset(offset int) *DocumentQuery {
	dq.ctx.Offset = &offset
	return dq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dq *DocumentQuery) Unique(unique bool) *DocumentQuery {
	dq.ctx.Unique = &unique
	return dq
}

// Order specifies how the records should be ordered.
func (dq *DocumentQuery) Order(o ...document.OrderOption) *DocumentQuery {
	dq.order = append(dq.order, o...)
	return dq
}

// QueryTrainingVideo chains the current query on the "training_video" edge.
func (dq *DocumentQuery) QueryTrainingVideo() *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.TrainingVideoTable, document.TrainingVideoColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrainingVideoPoster chains the current query on the "training_video_poster" edge.
func (dq *DocumentQuery) QueryTrainingVideoPoster() *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.TrainingVideoPosterTable, document.TrainingVideoPosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductsImage chains the current query on the "products_image" edge.
func (dq *DocumentQuery) QueryProductsImage() *ProductQuery {
	query := (&ProductClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.ProductsImageTable, document.ProductsImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstallationJobItemImage chains the current query on the "installation_job_item_image" edge.
func (dq *DocumentQuery) QueryInstallationJobItemImage() *InstallationJobItemQuery {
	query := (&InstallationJobItemClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(installationjobitem.Table, installationjobitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, document.InstallationJobItemImageTable, document.InstallationJobItemImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEstimatePdf chains the current query on the "estimate_pdf" edge.
func (dq *DocumentQuery) QueryEstimatePdf() *EstimateQuery {
	query := (&EstimateClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.EstimatePdfTable, document.EstimatePdfColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobEstimatePdf chains the current query on the "job_estimate_pdf" edge.
func (dq *DocumentQuery) QueryJobEstimatePdf() *JobQuery {
	query := (&JobClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.JobEstimatePdfTable, document.JobEstimatePdfColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Document entity from the query.
// Returns a *NotFoundError when no Document was found.
func (dq *DocumentQuery) First(ctx context.Context) (*Document, error) {
	nodes, err := dq.Limit(1).All(setContextOp(ctx, dq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{document.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dq *DocumentQuery) FirstX(ctx context.Context) *Document {
	node, err := dq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Document ID from the query.
// Returns a *NotFoundError when no Document ID was found.
func (dq *DocumentQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dq.Limit(1).IDs(setContextOp(ctx, dq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{document.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dq *DocumentQuery) FirstIDX(ctx context.Context) string {
	id, err := dq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Document entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Document entity is found.
// Returns a *NotFoundError when no Document entities are found.
func (dq *DocumentQuery) Only(ctx context.Context) (*Document, error) {
	nodes, err := dq.Limit(2).All(setContextOp(ctx, dq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{document.Label}
	default:
		return nil, &NotSingularError{document.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dq *DocumentQuery) OnlyX(ctx context.Context) *Document {
	node, err := dq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Document ID in the query.
// Returns a *NotSingularError when more than one Document ID is found.
// Returns a *NotFoundError when no entities are found.
func (dq *DocumentQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dq.Limit(2).IDs(setContextOp(ctx, dq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{document.Label}
	default:
		err = &NotSingularError{document.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dq *DocumentQuery) OnlyIDX(ctx context.Context) string {
	id, err := dq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Documents.
func (dq *DocumentQuery) All(ctx context.Context) ([]*Document, error) {
	ctx = setContextOp(ctx, dq.ctx, "All")
	if err := dq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Document, *DocumentQuery]()
	return withInterceptors[[]*Document](ctx, dq, qr, dq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dq *DocumentQuery) AllX(ctx context.Context) []*Document {
	nodes, err := dq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Document IDs.
func (dq *DocumentQuery) IDs(ctx context.Context) (ids []string, err error) {
	if dq.ctx.Unique == nil && dq.path != nil {
		dq.Unique(true)
	}
	ctx = setContextOp(ctx, dq.ctx, "IDs")
	if err = dq.Select(document.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dq *DocumentQuery) IDsX(ctx context.Context) []string {
	ids, err := dq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dq *DocumentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dq.ctx, "Count")
	if err := dq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dq, querierCount[*DocumentQuery](), dq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dq *DocumentQuery) CountX(ctx context.Context) int {
	count, err := dq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dq *DocumentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dq.ctx, "Exist")
	switch _, err := dq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dq *DocumentQuery) ExistX(ctx context.Context) bool {
	exist, err := dq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DocumentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dq *DocumentQuery) Clone() *DocumentQuery {
	if dq == nil {
		return nil
	}
	return &DocumentQuery{
		config:                       dq.config,
		ctx:                          dq.ctx.Clone(),
		order:                        append([]document.OrderOption{}, dq.order...),
		inters:                       append([]Interceptor{}, dq.inters...),
		predicates:                   append([]predicate.Document{}, dq.predicates...),
		withTrainingVideo:            dq.withTrainingVideo.Clone(),
		withTrainingVideoPoster:      dq.withTrainingVideoPoster.Clone(),
		withProductsImage:            dq.withProductsImage.Clone(),
		withInstallationJobItemImage: dq.withInstallationJobItemImage.Clone(),
		withEstimatePdf:              dq.withEstimatePdf.Clone(),
		withJobEstimatePdf:           dq.withJobEstimatePdf.Clone(),
		// clone intermediate query.
		sql:  dq.sql.Clone(),
		path: dq.path,
	}
}

// WithTrainingVideo tells the query-builder to eager-load the nodes that are connected to
// the "training_video" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithTrainingVideo(opts ...func(*TrainingVideoQuery)) *DocumentQuery {
	query := (&TrainingVideoClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withTrainingVideo = query
	return dq
}

// WithTrainingVideoPoster tells the query-builder to eager-load the nodes that are connected to
// the "training_video_poster" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithTrainingVideoPoster(opts ...func(*TrainingVideoQuery)) *DocumentQuery {
	query := (&TrainingVideoClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withTrainingVideoPoster = query
	return dq
}

// WithProductsImage tells the query-builder to eager-load the nodes that are connected to
// the "products_image" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithProductsImage(opts ...func(*ProductQuery)) *DocumentQuery {
	query := (&ProductClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withProductsImage = query
	return dq
}

// WithInstallationJobItemImage tells the query-builder to eager-load the nodes that are connected to
// the "installation_job_item_image" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithInstallationJobItemImage(opts ...func(*InstallationJobItemQuery)) *DocumentQuery {
	query := (&InstallationJobItemClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withInstallationJobItemImage = query
	return dq
}

// WithEstimatePdf tells the query-builder to eager-load the nodes that are connected to
// the "estimate_pdf" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithEstimatePdf(opts ...func(*EstimateQuery)) *DocumentQuery {
	query := (&EstimateClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withEstimatePdf = query
	return dq
}

// WithJobEstimatePdf tells the query-builder to eager-load the nodes that are connected to
// the "job_estimate_pdf" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DocumentQuery) WithJobEstimatePdf(opts ...func(*JobQuery)) *DocumentQuery {
	query := (&JobClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withJobEstimatePdf = query
	return dq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Document.Query().
//		GroupBy(document.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dq *DocumentQuery) GroupBy(field string, fields ...string) *DocumentGroupBy {
	dq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DocumentGroupBy{build: dq}
	grbuild.flds = &dq.ctx.Fields
	grbuild.label = document.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.Document.Query().
//		Select(document.FieldCreatedAt).
//		Scan(ctx, &v)
func (dq *DocumentQuery) Select(fields ...string) *DocumentSelect {
	dq.ctx.Fields = append(dq.ctx.Fields, fields...)
	sbuild := &DocumentSelect{DocumentQuery: dq}
	sbuild.label = document.Label
	sbuild.flds, sbuild.scan = &dq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DocumentSelect configured with the given aggregations.
func (dq *DocumentQuery) Aggregate(fns ...AggregateFunc) *DocumentSelect {
	return dq.Select().Aggregate(fns...)
}

func (dq *DocumentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dq); err != nil {
				return err
			}
		}
	}
	for _, f := range dq.ctx.Fields {
		if !document.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dq.path != nil {
		prev, err := dq.path(ctx)
		if err != nil {
			return err
		}
		dq.sql = prev
	}
	return nil
}

func (dq *DocumentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Document, error) {
	var (
		nodes       = []*Document{}
		withFKs     = dq.withFKs
		_spec       = dq.querySpec()
		loadedTypes = [6]bool{
			dq.withTrainingVideo != nil,
			dq.withTrainingVideoPoster != nil,
			dq.withProductsImage != nil,
			dq.withInstallationJobItemImage != nil,
			dq.withEstimatePdf != nil,
			dq.withJobEstimatePdf != nil,
		}
	)
	if dq.withInstallationJobItemImage != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, document.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Document).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Document{config: dq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dq.modifiers) > 0 {
		_spec.Modifiers = dq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dq.withTrainingVideo; query != nil {
		if err := dq.loadTrainingVideo(ctx, query, nodes, nil,
			func(n *Document, e *TrainingVideo) { n.Edges.TrainingVideo = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withTrainingVideoPoster; query != nil {
		if err := dq.loadTrainingVideoPoster(ctx, query, nodes, nil,
			func(n *Document, e *TrainingVideo) { n.Edges.TrainingVideoPoster = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withProductsImage; query != nil {
		if err := dq.loadProductsImage(ctx, query, nodes, nil,
			func(n *Document, e *Product) { n.Edges.ProductsImage = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withInstallationJobItemImage; query != nil {
		if err := dq.loadInstallationJobItemImage(ctx, query, nodes, nil,
			func(n *Document, e *InstallationJobItem) { n.Edges.InstallationJobItemImage = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withEstimatePdf; query != nil {
		if err := dq.loadEstimatePdf(ctx, query, nodes, nil,
			func(n *Document, e *Estimate) { n.Edges.EstimatePdf = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withJobEstimatePdf; query != nil {
		if err := dq.loadJobEstimatePdf(ctx, query, nodes, nil,
			func(n *Document, e *Job) { n.Edges.JobEstimatePdf = e }); err != nil {
			return nil, err
		}
	}
	for i := range dq.loadTotal {
		if err := dq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dq *DocumentQuery) loadTrainingVideo(ctx context.Context, query *TrainingVideoQuery, nodes []*Document, init func(*Document), assign func(*Document, *TrainingVideo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Document)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.TrainingVideo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(document.TrainingVideoColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.video_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "video_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "video_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dq *DocumentQuery) loadTrainingVideoPoster(ctx context.Context, query *TrainingVideoQuery, nodes []*Document, init func(*Document), assign func(*Document, *TrainingVideo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Document)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.TrainingVideo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(document.TrainingVideoPosterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.poster_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "poster_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "poster_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dq *DocumentQuery) loadProductsImage(ctx context.Context, query *ProductQuery, nodes []*Document, init func(*Document), assign func(*Document, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Document)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(document.ProductsImageColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.image_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "image_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "image_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dq *DocumentQuery) loadInstallationJobItemImage(ctx context.Context, query *InstallationJobItemQuery, nodes []*Document, init func(*Document), assign func(*Document, *InstallationJobItem)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Document)
	for i := range nodes {
		if nodes[i].image_id == nil {
			continue
		}
		fk := *nodes[i].image_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(installationjobitem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dq *DocumentQuery) loadEstimatePdf(ctx context.Context, query *EstimateQuery, nodes []*Document, init func(*Document), assign func(*Document, *Estimate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Document)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Estimate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(document.EstimatePdfColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.pdf_doc_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "pdf_doc_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "pdf_doc_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dq *DocumentQuery) loadJobEstimatePdf(ctx context.Context, query *JobQuery, nodes []*Document, init func(*Document), assign func(*Document, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Document)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(document.JobEstimatePdfColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.estimate_pdf_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "estimate_pdf_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "estimate_pdf_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (dq *DocumentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dq.querySpec()
	if len(dq.modifiers) > 0 {
		_spec.Modifiers = dq.modifiers
	}
	_spec.Node.Columns = dq.ctx.Fields
	if len(dq.ctx.Fields) > 0 {
		_spec.Unique = dq.ctx.Unique != nil && *dq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dq.driver, _spec)
}

func (dq *DocumentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	_spec.From = dq.sql
	if unique := dq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dq.path != nil {
		_spec.Unique = true
	}
	if fields := dq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for i := range fields {
			if fields[i] != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dq *DocumentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dq.driver.Dialect())
	t1 := builder.Table(document.Table)
	columns := dq.ctx.Fields
	if len(columns) == 0 {
		columns = document.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dq.sql != nil {
		selector = dq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dq.ctx.Unique != nil && *dq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range dq.modifiers {
		m(selector)
	}
	for _, p := range dq.predicates {
		p(selector)
	}
	for _, p := range dq.order {
		p(selector)
	}
	if offset := dq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dq *DocumentQuery) Modify(modifiers ...func(s *sql.Selector)) *DocumentSelect {
	dq.modifiers = append(dq.modifiers, modifiers...)
	return dq.Select()
}

// DocumentGroupBy is the group-by builder for Document entities.
type DocumentGroupBy struct {
	selector
	build *DocumentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dgb *DocumentGroupBy) Aggregate(fns ...AggregateFunc) *DocumentGroupBy {
	dgb.fns = append(dgb.fns, fns...)
	return dgb
}

// Scan applies the selector query and scans the result into the given value.
func (dgb *DocumentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dgb.build.ctx, "GroupBy")
	if err := dgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentQuery, *DocumentGroupBy](ctx, dgb.build, dgb, dgb.build.inters, v)
}

func (dgb *DocumentGroupBy) sqlScan(ctx context.Context, root *DocumentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dgb.fns))
	for _, fn := range dgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dgb.flds)+len(dgb.fns))
		for _, f := range *dgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DocumentSelect is the builder for selecting fields of Document entities.
type DocumentSelect struct {
	*DocumentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ds *DocumentSelect) Aggregate(fns ...AggregateFunc) *DocumentSelect {
	ds.fns = append(ds.fns, fns...)
	return ds
}

// Scan applies the selector query and scans the result into the given value.
func (ds *DocumentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ds.ctx, "Select")
	if err := ds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentQuery, *DocumentSelect](ctx, ds.DocumentQuery, ds, ds.inters, v)
}

func (ds *DocumentSelect) sqlScan(ctx context.Context, root *DocumentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ds.fns))
	for _, fn := range ds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ds *DocumentSelect) Modify(modifiers ...func(s *sql.Selector)) *DocumentSelect {
	ds.modifiers = append(ds.modifiers, modifiers...)
	return ds
}

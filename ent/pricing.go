// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/postalcode"
	"roofix/ent/pricing"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Pricing is the model entity for the Pricing schema.
type Pricing struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// PostalCountry holds the value of the "postal_country" field.
	PostalCountry string `json:"postal_country,omitempty"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode string `json:"postal_code,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID uint8 `json:"product_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// PricePer holds the value of the "price_per" field.
	PricePer string `json:"price_per,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PricingQuery when eager-loading is set.
	Edges        PricingEdges `json:"edges"`
	postal_id    *string
	selectValues sql.SelectValues
}

// PricingEdges holds the relations/edges for other nodes in the graph.
type PricingEdges struct {
	// Postal holds the value of the postal edge.
	Postal *PostalCode `json:"postal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PostalOrErr returns the Postal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PricingEdges) PostalOrErr() (*PostalCode, error) {
	if e.loadedTypes[0] {
		if e.Postal == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: postalcode.Label}
		}
		return e.Postal, nil
	}
	return nil, &NotLoadedError{edge: "postal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pricing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pricing.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case pricing.FieldProductID:
			values[i] = new(sql.NullInt64)
		case pricing.FieldID, pricing.FieldPostalCountry, pricing.FieldPostalCode, pricing.FieldDescription, pricing.FieldPricePer:
			values[i] = new(sql.NullString)
		case pricing.FieldCreatedAt, pricing.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case pricing.ForeignKeys[0]: // postal_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pricing fields.
func (pr *Pricing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pricing.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pr.ID = value.String
			}
		case pricing.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case pricing.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case pricing.FieldPostalCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_country", values[i])
			} else if value.Valid {
				pr.PostalCountry = value.String
			}
		case pricing.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				pr.PostalCode = value.String
			}
		case pricing.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pr.ProductID = uint8(value.Int64)
			}
		case pricing.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case pricing.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pr.Price = value.Float64
			}
		case pricing.FieldPricePer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_per", values[i])
			} else if value.Valid {
				pr.PricePer = value.String
			}
		case pricing.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_id", values[i])
			} else if value.Valid {
				pr.postal_id = new(string)
				*pr.postal_id = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pricing.
// This includes values selected through modifiers, order, etc.
func (pr *Pricing) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryPostal queries the "postal" edge of the Pricing entity.
func (pr *Pricing) QueryPostal() *PostalCodeQuery {
	return NewPricingClient(pr.config).QueryPostal(pr)
}

// Update returns a builder for updating this Pricing.
// Note that you need to call Pricing.Unwrap() before calling this method if this Pricing
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Pricing) Update() *PricingUpdateOne {
	return NewPricingClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Pricing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Pricing) Unwrap() *Pricing {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pricing is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Pricing) String() string {
	var builder strings.Builder
	builder.WriteString("Pricing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("postal_country=")
	builder.WriteString(pr.PostalCountry)
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(pr.PostalCode)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteString(", ")
	builder.WriteString("price_per=")
	builder.WriteString(pr.PricePer)
	builder.WriteByte(')')
	return builder.String()
}

// Pricings is a parsable slice of Pricing.
type Pricings []*Pricing

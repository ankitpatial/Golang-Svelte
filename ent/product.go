// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/document"
	"roofix/ent/product"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Type holds the value of the "type" field.
	Type enum.Product `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Features holds the value of the "features" field.
	Features []string `json:"features,omitempty"`
	// SpecialNote holds the value of the "special_note" field.
	SpecialNote string `json:"special_note,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice float64 `json:"unit_price,omitempty"`
	// UnitsInStock holds the value of the "units_in_stock" field.
	UnitsInStock int `json:"units_in_stock,omitempty"`
	// UnitsOnOrder holds the value of the "units_on_order" field.
	UnitsOnOrder int `json:"units_on_order,omitempty"`
	// Discontinued holds the value of the "discontinued" field.
	Discontinued bool `json:"discontinued,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges        ProductEdges `json:"edges"`
	image_id     *string
	creator_id   *string
	selectValues sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Package holds the value of the package edge.
	Package []*ProductPackage `json:"package,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Image holds the value of the image edge.
	Image *Document `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedPackage map[string][]*ProductPackage
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) PackageOrErr() ([]*ProductPackage, error) {
	if e.loadedTypes[0] {
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) ImageOrErr() (*Document, error) {
	if e.loadedTypes[2] {
		if e.Image == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: document.Label}
		}
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldFeatures:
			values[i] = new([]byte)
		case product.FieldDiscontinued:
			values[i] = new(sql.NullBool)
		case product.FieldUnitPrice:
			values[i] = new(sql.NullFloat64)
		case product.FieldUnitsInStock, product.FieldUnitsOnOrder:
			values[i] = new(sql.NullInt64)
		case product.FieldID, product.FieldType, product.FieldName, product.FieldDescription, product.FieldSpecialNote:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case product.ForeignKeys[0]: // image_id
			values[i] = new(sql.NullString)
		case product.ForeignKeys[1]: // creator_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pr.ID = value.String
			}
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case product.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = enum.Product(value.String)
			}
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case product.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case product.FieldSpecialNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field special_note", values[i])
			} else if value.Valid {
				pr.SpecialNote = value.String
			}
		case product.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value.Valid {
				pr.UnitPrice = value.Float64
			}
		case product.FieldUnitsInStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field units_in_stock", values[i])
			} else if value.Valid {
				pr.UnitsInStock = int(value.Int64)
			}
		case product.FieldUnitsOnOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field units_on_order", values[i])
			} else if value.Valid {
				pr.UnitsOnOrder = int(value.Int64)
			}
		case product.FieldDiscontinued:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field discontinued", values[i])
			} else if value.Valid {
				pr.Discontinued = value.Bool
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_id", values[i])
			} else if value.Valid {
				pr.image_id = new(string)
				*pr.image_id = value.String
			}
		case product.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				pr.creator_id = new(string)
				*pr.creator_id = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the Product entity.
func (pr *Product) QueryPackage() *ProductPackageQuery {
	return NewProductClient(pr.config).QueryPackage(pr)
}

// QueryCreator queries the "creator" edge of the Product entity.
func (pr *Product) QueryCreator() *UserQuery {
	return NewProductClient(pr.config).QueryCreator(pr)
}

// QueryImage queries the "image" edge of the Product entity.
func (pr *Product) QueryImage() *DocumentQuery {
	return NewProductClient(pr.config).QueryImage(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", pr.Features))
	builder.WriteString(", ")
	builder.WriteString("special_note=")
	builder.WriteString(pr.SpecialNote)
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("units_in_stock=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnitsInStock))
	builder.WriteString(", ")
	builder.WriteString("units_on_order=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnitsOnOrder))
	builder.WriteString(", ")
	builder.WriteString("discontinued=")
	builder.WriteString(fmt.Sprintf("%v", pr.Discontinued))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPackage returns the Package named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Product) NamedPackage(name string) ([]*ProductPackage, error) {
	if pr.Edges.namedPackage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedPackage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Product) appendNamedPackage(name string, edges ...*ProductPackage) {
	if pr.Edges.namedPackage == nil {
		pr.Edges.namedPackage = make(map[string][]*ProductPackage)
	}
	if len(edges) == 0 {
		pr.Edges.namedPackage[name] = []*ProductPackage{}
	} else {
		pr.Edges.namedPackage[name] = append(pr.Edges.namedPackage[name], edges...)
	}
}

// Products is a parsable slice of Product.
type Products []*Product

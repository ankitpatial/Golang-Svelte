// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/auditlog"
	"roofix/ent/channelmessage"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/surveyprogress"
	"roofix/ent/useractivity"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiUserCreate is the builder for creating a ApiUser entity.
type ApiUserCreate struct {
	config
	mutation *ApiUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (auc *ApiUserCreate) SetCreatedAt(t time.Time) *ApiUserCreate {
	auc.mutation.SetCreatedAt(t)
	return auc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableCreatedAt(t *time.Time) *ApiUserCreate {
	if t != nil {
		auc.SetCreatedAt(*t)
	}
	return auc
}

// SetUsername sets the "username" field.
func (auc *ApiUserCreate) SetUsername(s string) *ApiUserCreate {
	auc.mutation.SetUsername(s)
	return auc
}

// SetPwdHash sets the "pwd_hash" field.
func (auc *ApiUserCreate) SetPwdHash(s string) *ApiUserCreate {
	auc.mutation.SetPwdHash(s)
	return auc
}

// SetActive sets the "active" field.
func (auc *ApiUserCreate) SetActive(b bool) *ApiUserCreate {
	auc.mutation.SetActive(b)
	return auc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableActive(b *bool) *ApiUserCreate {
	if b != nil {
		auc.SetActive(*b)
	}
	return auc
}

// SetCbAPIURL sets the "cb_api_url" field.
func (auc *ApiUserCreate) SetCbAPIURL(s string) *ApiUserCreate {
	auc.mutation.SetCbAPIURL(s)
	return auc
}

// SetNillableCbAPIURL sets the "cb_api_url" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableCbAPIURL(s *string) *ApiUserCreate {
	if s != nil {
		auc.SetCbAPIURL(*s)
	}
	return auc
}

// SetCbAPIAuth sets the "cb_api_auth" field.
func (auc *ApiUserCreate) SetCbAPIAuth(aaa apiuser.CbAPIAuth) *ApiUserCreate {
	auc.mutation.SetCbAPIAuth(aaa)
	return auc
}

// SetNillableCbAPIAuth sets the "cb_api_auth" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableCbAPIAuth(aaa *apiuser.CbAPIAuth) *ApiUserCreate {
	if aaa != nil {
		auc.SetCbAPIAuth(*aaa)
	}
	return auc
}

// SetCbAPIUser sets the "cb_api_user" field.
func (auc *ApiUserCreate) SetCbAPIUser(s string) *ApiUserCreate {
	auc.mutation.SetCbAPIUser(s)
	return auc
}

// SetNillableCbAPIUser sets the "cb_api_user" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableCbAPIUser(s *string) *ApiUserCreate {
	if s != nil {
		auc.SetCbAPIUser(*s)
	}
	return auc
}

// SetCbAPIPwd sets the "cb_api_pwd" field.
func (auc *ApiUserCreate) SetCbAPIPwd(s string) *ApiUserCreate {
	auc.mutation.SetCbAPIPwd(s)
	return auc
}

// SetNillableCbAPIPwd sets the "cb_api_pwd" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableCbAPIPwd(s *string) *ApiUserCreate {
	if s != nil {
		auc.SetCbAPIPwd(*s)
	}
	return auc
}

// SetCbAPIToken sets the "cb_api_token" field.
func (auc *ApiUserCreate) SetCbAPIToken(s string) *ApiUserCreate {
	auc.mutation.SetCbAPIToken(s)
	return auc
}

// SetNillableCbAPIToken sets the "cb_api_token" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableCbAPIToken(s *string) *ApiUserCreate {
	if s != nil {
		auc.SetCbAPIToken(*s)
	}
	return auc
}

// SetCbAPIEndpoints sets the "cb_api_endpoints" field.
func (auc *ApiUserCreate) SetCbAPIEndpoints(m map[string]string) *ApiUserCreate {
	auc.mutation.SetCbAPIEndpoints(m)
	return auc
}

// SetID sets the "id" field.
func (auc *ApiUserCreate) SetID(s string) *ApiUserCreate {
	auc.mutation.SetID(s)
	return auc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auc *ApiUserCreate) SetNillableID(s *string) *ApiUserCreate {
	if s != nil {
		auc.SetID(*s)
	}
	return auc
}

// AddTokenIDs adds the "tokens" edge to the ApiUserToken entity by IDs.
func (auc *ApiUserCreate) AddTokenIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddTokenIDs(ids...)
	return auc
}

// AddTokens adds the "tokens" edges to the ApiUserToken entity.
func (auc *ApiUserCreate) AddTokens(a ...*ApiUserToken) *ApiUserCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddTokenIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (auc *ApiUserCreate) AddAuditLogIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddAuditLogIDs(ids...)
	return auc
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (auc *ApiUserCreate) AddAuditLogs(a ...*AuditLog) *ApiUserCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddAuditLogIDs(ids...)
}

// AddCreatedEstimateIDs adds the "created_estimates" edge to the Estimate entity by IDs.
func (auc *ApiUserCreate) AddCreatedEstimateIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddCreatedEstimateIDs(ids...)
	return auc
}

// AddCreatedEstimates adds the "created_estimates" edges to the Estimate entity.
func (auc *ApiUserCreate) AddCreatedEstimates(e ...*Estimate) *ApiUserCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auc.AddCreatedEstimateIDs(ids...)
}

// AddCreatedJobIDs adds the "created_jobs" edge to the Job entity by IDs.
func (auc *ApiUserCreate) AddCreatedJobIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddCreatedJobIDs(ids...)
	return auc
}

// AddCreatedJobs adds the "created_jobs" edges to the Job entity.
func (auc *ApiUserCreate) AddCreatedJobs(j ...*Job) *ApiUserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auc.AddCreatedJobIDs(ids...)
}

// AddCreatedPartnerIDs adds the "created_partners" edge to the Partner entity by IDs.
func (auc *ApiUserCreate) AddCreatedPartnerIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddCreatedPartnerIDs(ids...)
	return auc
}

// AddCreatedPartners adds the "created_partners" edges to the Partner entity.
func (auc *ApiUserCreate) AddCreatedPartners(p ...*Partner) *ApiUserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auc.AddCreatedPartnerIDs(ids...)
}

// AddSurveyProgresIDs adds the "survey_progress" edge to the SurveyProgress entity by IDs.
func (auc *ApiUserCreate) AddSurveyProgresIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddSurveyProgresIDs(ids...)
	return auc
}

// AddSurveyProgress adds the "survey_progress" edges to the SurveyProgress entity.
func (auc *ApiUserCreate) AddSurveyProgress(s ...*SurveyProgress) *ApiUserCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auc.AddSurveyProgresIDs(ids...)
}

// AddEstimateActivityIDs adds the "estimate_activities" edge to the EstimateActivity entity by IDs.
func (auc *ApiUserCreate) AddEstimateActivityIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddEstimateActivityIDs(ids...)
	return auc
}

// AddEstimateActivities adds the "estimate_activities" edges to the EstimateActivity entity.
func (auc *ApiUserCreate) AddEstimateActivities(e ...*EstimateActivity) *ApiUserCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auc.AddEstimateActivityIDs(ids...)
}

// AddUserActivityIDs adds the "user_activities" edge to the UserActivity entity by IDs.
func (auc *ApiUserCreate) AddUserActivityIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddUserActivityIDs(ids...)
	return auc
}

// AddUserActivities adds the "user_activities" edges to the UserActivity entity.
func (auc *ApiUserCreate) AddUserActivities(u ...*UserActivity) *ApiUserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auc.AddUserActivityIDs(ids...)
}

// AddPartnerActivityIDs adds the "partner_activities" edge to the PartnerActivity entity by IDs.
func (auc *ApiUserCreate) AddPartnerActivityIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddPartnerActivityIDs(ids...)
	return auc
}

// AddPartnerActivities adds the "partner_activities" edges to the PartnerActivity entity.
func (auc *ApiUserCreate) AddPartnerActivities(p ...*PartnerActivity) *ApiUserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auc.AddPartnerActivityIDs(ids...)
}

// AddJobActivityIDs adds the "job_activities" edge to the JobActivity entity by IDs.
func (auc *ApiUserCreate) AddJobActivityIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddJobActivityIDs(ids...)
	return auc
}

// AddJobActivities adds the "job_activities" edges to the JobActivity entity.
func (auc *ApiUserCreate) AddJobActivities(j ...*JobActivity) *ApiUserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auc.AddJobActivityIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the ChannelMessage entity by IDs.
func (auc *ApiUserCreate) AddNotificationIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddNotificationIDs(ids...)
	return auc
}

// AddNotifications adds the "notifications" edges to the ChannelMessage entity.
func (auc *ApiUserCreate) AddNotifications(c ...*ChannelMessage) *ApiUserCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auc.AddNotificationIDs(ids...)
}

// AddJobProgressHistoryIDs adds the "job_progress_history" edge to the JobProgressHistory entity by IDs.
func (auc *ApiUserCreate) AddJobProgressHistoryIDs(ids ...string) *ApiUserCreate {
	auc.mutation.AddJobProgressHistoryIDs(ids...)
	return auc
}

// AddJobProgressHistory adds the "job_progress_history" edges to the JobProgressHistory entity.
func (auc *ApiUserCreate) AddJobProgressHistory(j ...*JobProgressHistory) *ApiUserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return auc.AddJobProgressHistoryIDs(ids...)
}

// Mutation returns the ApiUserMutation object of the builder.
func (auc *ApiUserCreate) Mutation() *ApiUserMutation {
	return auc.mutation
}

// Save creates the ApiUser in the database.
func (auc *ApiUserCreate) Save(ctx context.Context) (*ApiUser, error) {
	auc.defaults()
	return withHooks(ctx, auc.sqlSave, auc.mutation, auc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (auc *ApiUserCreate) SaveX(ctx context.Context) *ApiUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *ApiUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *ApiUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *ApiUserCreate) defaults() {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		v := apiuser.DefaultCreatedAt()
		auc.mutation.SetCreatedAt(v)
	}
	if _, ok := auc.mutation.Active(); !ok {
		v := apiuser.DefaultActive
		auc.mutation.SetActive(v)
	}
	if _, ok := auc.mutation.CbAPIAuth(); !ok {
		v := apiuser.DefaultCbAPIAuth
		auc.mutation.SetCbAPIAuth(v)
	}
	if _, ok := auc.mutation.ID(); !ok {
		v := apiuser.DefaultID()
		auc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *ApiUserCreate) check() error {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ApiUser.created_at"`)}
	}
	if _, ok := auc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "ApiUser.username"`)}
	}
	if v, ok := auc.mutation.Username(); ok {
		if err := apiuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "ApiUser.username": %w`, err)}
		}
	}
	if _, ok := auc.mutation.PwdHash(); !ok {
		return &ValidationError{Name: "pwd_hash", err: errors.New(`ent: missing required field "ApiUser.pwd_hash"`)}
	}
	if v, ok := auc.mutation.PwdHash(); ok {
		if err := apiuser.PwdHashValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hash", err: fmt.Errorf(`ent: validator failed for field "ApiUser.pwd_hash": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "ApiUser.active"`)}
	}
	if v, ok := auc.mutation.CbAPIAuth(); ok {
		if err := apiuser.CbAPIAuthValidator(v); err != nil {
			return &ValidationError{Name: "cb_api_auth", err: fmt.Errorf(`ent: validator failed for field "ApiUser.cb_api_auth": %w`, err)}
		}
	}
	if v, ok := auc.mutation.ID(); ok {
		if err := apiuser.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ApiUser.id": %w`, err)}
		}
	}
	return nil
}

func (auc *ApiUserCreate) sqlSave(ctx context.Context) (*ApiUser, error) {
	if err := auc.check(); err != nil {
		return nil, err
	}
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApiUser.ID type: %T", _spec.ID.Value)
		}
	}
	auc.mutation.id = &_node.ID
	auc.mutation.done = true
	return _node, nil
}

func (auc *ApiUserCreate) createSpec() (*ApiUser, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiUser{config: auc.config}
		_spec = sqlgraph.NewCreateSpec(apiuser.Table, sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString))
	)
	_spec.OnConflict = auc.conflict
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.CreatedAt(); ok {
		_spec.SetField(apiuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := auc.mutation.Username(); ok {
		_spec.SetField(apiuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := auc.mutation.PwdHash(); ok {
		_spec.SetField(apiuser.FieldPwdHash, field.TypeString, value)
		_node.PwdHash = value
	}
	if value, ok := auc.mutation.Active(); ok {
		_spec.SetField(apiuser.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := auc.mutation.CbAPIURL(); ok {
		_spec.SetField(apiuser.FieldCbAPIURL, field.TypeString, value)
		_node.CbAPIURL = &value
	}
	if value, ok := auc.mutation.CbAPIAuth(); ok {
		_spec.SetField(apiuser.FieldCbAPIAuth, field.TypeEnum, value)
		_node.CbAPIAuth = value
	}
	if value, ok := auc.mutation.CbAPIUser(); ok {
		_spec.SetField(apiuser.FieldCbAPIUser, field.TypeString, value)
		_node.CbAPIUser = value
	}
	if value, ok := auc.mutation.CbAPIPwd(); ok {
		_spec.SetField(apiuser.FieldCbAPIPwd, field.TypeString, value)
		_node.CbAPIPwd = value
	}
	if value, ok := auc.mutation.CbAPIToken(); ok {
		_spec.SetField(apiuser.FieldCbAPIToken, field.TypeString, value)
		_node.CbAPIToken = value
	}
	if value, ok := auc.mutation.CbAPIEndpoints(); ok {
		_spec.SetField(apiuser.FieldCbAPIEndpoints, field.TypeJSON, value)
		_node.CbAPIEndpoints = value
	}
	if nodes := auc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.TokensTable,
			Columns: []string{apiuser.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.AuditLogsTable,
			Columns: []string{apiuser.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.CreatedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedEstimatesTable,
			Columns: []string{apiuser.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.CreatedJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedJobsTable,
			Columns: []string{apiuser.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.CreatedPartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.CreatedPartnersTable,
			Columns: []string{apiuser.CreatedPartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.SurveyProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.SurveyProgressTable,
			Columns: []string{apiuser.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.EstimateActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.EstimateActivitiesTable,
			Columns: []string{apiuser.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.UserActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.UserActivitiesTable,
			Columns: []string{apiuser.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.PartnerActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.PartnerActivitiesTable,
			Columns: []string{apiuser.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.JobActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobActivitiesTable,
			Columns: []string{apiuser.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.NotificationsTable,
			Columns: []string{apiuser.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.JobProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apiuser.JobProgressHistoryTable,
			Columns: []string{apiuser.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (auc *ApiUserCreate) OnConflict(opts ...sql.ConflictOption) *ApiUserUpsertOne {
	auc.conflict = opts
	return &ApiUserUpsertOne{
		create: auc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (auc *ApiUserCreate) OnConflictColumns(columns ...string) *ApiUserUpsertOne {
	auc.conflict = append(auc.conflict, sql.ConflictColumns(columns...))
	return &ApiUserUpsertOne{
		create: auc,
	}
}

type (
	// ApiUserUpsertOne is the builder for "upsert"-ing
	//  one ApiUser node.
	ApiUserUpsertOne struct {
		create *ApiUserCreate
	}

	// ApiUserUpsert is the "OnConflict" setter.
	ApiUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *ApiUserUpsert) SetUsername(v string) *ApiUserUpsert {
	u.Set(apiuser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateUsername() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldUsername)
	return u
}

// SetPwdHash sets the "pwd_hash" field.
func (u *ApiUserUpsert) SetPwdHash(v string) *ApiUserUpsert {
	u.Set(apiuser.FieldPwdHash, v)
	return u
}

// UpdatePwdHash sets the "pwd_hash" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdatePwdHash() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldPwdHash)
	return u
}

// SetActive sets the "active" field.
func (u *ApiUserUpsert) SetActive(v bool) *ApiUserUpsert {
	u.Set(apiuser.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateActive() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldActive)
	return u
}

// SetCbAPIURL sets the "cb_api_url" field.
func (u *ApiUserUpsert) SetCbAPIURL(v string) *ApiUserUpsert {
	u.Set(apiuser.FieldCbAPIURL, v)
	return u
}

// UpdateCbAPIURL sets the "cb_api_url" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateCbAPIURL() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldCbAPIURL)
	return u
}

// ClearCbAPIURL clears the value of the "cb_api_url" field.
func (u *ApiUserUpsert) ClearCbAPIURL() *ApiUserUpsert {
	u.SetNull(apiuser.FieldCbAPIURL)
	return u
}

// SetCbAPIAuth sets the "cb_api_auth" field.
func (u *ApiUserUpsert) SetCbAPIAuth(v apiuser.CbAPIAuth) *ApiUserUpsert {
	u.Set(apiuser.FieldCbAPIAuth, v)
	return u
}

// UpdateCbAPIAuth sets the "cb_api_auth" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateCbAPIAuth() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldCbAPIAuth)
	return u
}

// ClearCbAPIAuth clears the value of the "cb_api_auth" field.
func (u *ApiUserUpsert) ClearCbAPIAuth() *ApiUserUpsert {
	u.SetNull(apiuser.FieldCbAPIAuth)
	return u
}

// SetCbAPIUser sets the "cb_api_user" field.
func (u *ApiUserUpsert) SetCbAPIUser(v string) *ApiUserUpsert {
	u.Set(apiuser.FieldCbAPIUser, v)
	return u
}

// UpdateCbAPIUser sets the "cb_api_user" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateCbAPIUser() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldCbAPIUser)
	return u
}

// ClearCbAPIUser clears the value of the "cb_api_user" field.
func (u *ApiUserUpsert) ClearCbAPIUser() *ApiUserUpsert {
	u.SetNull(apiuser.FieldCbAPIUser)
	return u
}

// SetCbAPIPwd sets the "cb_api_pwd" field.
func (u *ApiUserUpsert) SetCbAPIPwd(v string) *ApiUserUpsert {
	u.Set(apiuser.FieldCbAPIPwd, v)
	return u
}

// UpdateCbAPIPwd sets the "cb_api_pwd" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateCbAPIPwd() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldCbAPIPwd)
	return u
}

// ClearCbAPIPwd clears the value of the "cb_api_pwd" field.
func (u *ApiUserUpsert) ClearCbAPIPwd() *ApiUserUpsert {
	u.SetNull(apiuser.FieldCbAPIPwd)
	return u
}

// SetCbAPIToken sets the "cb_api_token" field.
func (u *ApiUserUpsert) SetCbAPIToken(v string) *ApiUserUpsert {
	u.Set(apiuser.FieldCbAPIToken, v)
	return u
}

// UpdateCbAPIToken sets the "cb_api_token" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateCbAPIToken() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldCbAPIToken)
	return u
}

// ClearCbAPIToken clears the value of the "cb_api_token" field.
func (u *ApiUserUpsert) ClearCbAPIToken() *ApiUserUpsert {
	u.SetNull(apiuser.FieldCbAPIToken)
	return u
}

// SetCbAPIEndpoints sets the "cb_api_endpoints" field.
func (u *ApiUserUpsert) SetCbAPIEndpoints(v map[string]string) *ApiUserUpsert {
	u.Set(apiuser.FieldCbAPIEndpoints, v)
	return u
}

// UpdateCbAPIEndpoints sets the "cb_api_endpoints" field to the value that was provided on create.
func (u *ApiUserUpsert) UpdateCbAPIEndpoints() *ApiUserUpsert {
	u.SetExcluded(apiuser.FieldCbAPIEndpoints)
	return u
}

// ClearCbAPIEndpoints clears the value of the "cb_api_endpoints" field.
func (u *ApiUserUpsert) ClearCbAPIEndpoints() *ApiUserUpsert {
	u.SetNull(apiuser.FieldCbAPIEndpoints)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApiUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiUserUpsertOne) UpdateNewValues() *ApiUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apiuser.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apiuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApiUserUpsertOne) Ignore() *ApiUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiUserUpsertOne) DoNothing() *ApiUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiUserCreate.OnConflict
// documentation for more info.
func (u *ApiUserUpsertOne) Update(set func(*ApiUserUpsert)) *ApiUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *ApiUserUpsertOne) SetUsername(v string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateUsername() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateUsername()
	})
}

// SetPwdHash sets the "pwd_hash" field.
func (u *ApiUserUpsertOne) SetPwdHash(v string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetPwdHash(v)
	})
}

// UpdatePwdHash sets the "pwd_hash" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdatePwdHash() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdatePwdHash()
	})
}

// SetActive sets the "active" field.
func (u *ApiUserUpsertOne) SetActive(v bool) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateActive() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateActive()
	})
}

// SetCbAPIURL sets the "cb_api_url" field.
func (u *ApiUserUpsertOne) SetCbAPIURL(v string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIURL(v)
	})
}

// UpdateCbAPIURL sets the "cb_api_url" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateCbAPIURL() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIURL()
	})
}

// ClearCbAPIURL clears the value of the "cb_api_url" field.
func (u *ApiUserUpsertOne) ClearCbAPIURL() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIURL()
	})
}

// SetCbAPIAuth sets the "cb_api_auth" field.
func (u *ApiUserUpsertOne) SetCbAPIAuth(v apiuser.CbAPIAuth) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIAuth(v)
	})
}

// UpdateCbAPIAuth sets the "cb_api_auth" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateCbAPIAuth() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIAuth()
	})
}

// ClearCbAPIAuth clears the value of the "cb_api_auth" field.
func (u *ApiUserUpsertOne) ClearCbAPIAuth() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIAuth()
	})
}

// SetCbAPIUser sets the "cb_api_user" field.
func (u *ApiUserUpsertOne) SetCbAPIUser(v string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIUser(v)
	})
}

// UpdateCbAPIUser sets the "cb_api_user" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateCbAPIUser() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIUser()
	})
}

// ClearCbAPIUser clears the value of the "cb_api_user" field.
func (u *ApiUserUpsertOne) ClearCbAPIUser() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIUser()
	})
}

// SetCbAPIPwd sets the "cb_api_pwd" field.
func (u *ApiUserUpsertOne) SetCbAPIPwd(v string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIPwd(v)
	})
}

// UpdateCbAPIPwd sets the "cb_api_pwd" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateCbAPIPwd() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIPwd()
	})
}

// ClearCbAPIPwd clears the value of the "cb_api_pwd" field.
func (u *ApiUserUpsertOne) ClearCbAPIPwd() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIPwd()
	})
}

// SetCbAPIToken sets the "cb_api_token" field.
func (u *ApiUserUpsertOne) SetCbAPIToken(v string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIToken(v)
	})
}

// UpdateCbAPIToken sets the "cb_api_token" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateCbAPIToken() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIToken()
	})
}

// ClearCbAPIToken clears the value of the "cb_api_token" field.
func (u *ApiUserUpsertOne) ClearCbAPIToken() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIToken()
	})
}

// SetCbAPIEndpoints sets the "cb_api_endpoints" field.
func (u *ApiUserUpsertOne) SetCbAPIEndpoints(v map[string]string) *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIEndpoints(v)
	})
}

// UpdateCbAPIEndpoints sets the "cb_api_endpoints" field to the value that was provided on create.
func (u *ApiUserUpsertOne) UpdateCbAPIEndpoints() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIEndpoints()
	})
}

// ClearCbAPIEndpoints clears the value of the "cb_api_endpoints" field.
func (u *ApiUserUpsertOne) ClearCbAPIEndpoints() *ApiUserUpsertOne {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIEndpoints()
	})
}

// Exec executes the query.
func (u *ApiUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ApiUserUpsertOne.ID is not supported by MySQL driver. Use ApiUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApiUserCreateBulk is the builder for creating many ApiUser entities in bulk.
type ApiUserCreateBulk struct {
	config
	builders []*ApiUserCreate
	conflict []sql.ConflictOption
}

// Save creates the ApiUser entities in the database.
func (aucb *ApiUserCreateBulk) Save(ctx context.Context) ([]*ApiUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*ApiUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *ApiUserCreateBulk) SaveX(ctx context.Context) []*ApiUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *ApiUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *ApiUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aucb *ApiUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiUserUpsertBulk {
	aucb.conflict = opts
	return &ApiUserUpsertBulk{
		create: aucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aucb *ApiUserCreateBulk) OnConflictColumns(columns ...string) *ApiUserUpsertBulk {
	aucb.conflict = append(aucb.conflict, sql.ConflictColumns(columns...))
	return &ApiUserUpsertBulk{
		create: aucb,
	}
}

// ApiUserUpsertBulk is the builder for "upsert"-ing
// a bulk of ApiUser nodes.
type ApiUserUpsertBulk struct {
	create *ApiUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApiUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiUserUpsertBulk) UpdateNewValues() *ApiUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apiuser.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apiuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApiUserUpsertBulk) Ignore() *ApiUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiUserUpsertBulk) DoNothing() *ApiUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiUserCreateBulk.OnConflict
// documentation for more info.
func (u *ApiUserUpsertBulk) Update(set func(*ApiUserUpsert)) *ApiUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *ApiUserUpsertBulk) SetUsername(v string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateUsername() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateUsername()
	})
}

// SetPwdHash sets the "pwd_hash" field.
func (u *ApiUserUpsertBulk) SetPwdHash(v string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetPwdHash(v)
	})
}

// UpdatePwdHash sets the "pwd_hash" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdatePwdHash() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdatePwdHash()
	})
}

// SetActive sets the "active" field.
func (u *ApiUserUpsertBulk) SetActive(v bool) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateActive() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateActive()
	})
}

// SetCbAPIURL sets the "cb_api_url" field.
func (u *ApiUserUpsertBulk) SetCbAPIURL(v string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIURL(v)
	})
}

// UpdateCbAPIURL sets the "cb_api_url" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateCbAPIURL() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIURL()
	})
}

// ClearCbAPIURL clears the value of the "cb_api_url" field.
func (u *ApiUserUpsertBulk) ClearCbAPIURL() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIURL()
	})
}

// SetCbAPIAuth sets the "cb_api_auth" field.
func (u *ApiUserUpsertBulk) SetCbAPIAuth(v apiuser.CbAPIAuth) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIAuth(v)
	})
}

// UpdateCbAPIAuth sets the "cb_api_auth" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateCbAPIAuth() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIAuth()
	})
}

// ClearCbAPIAuth clears the value of the "cb_api_auth" field.
func (u *ApiUserUpsertBulk) ClearCbAPIAuth() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIAuth()
	})
}

// SetCbAPIUser sets the "cb_api_user" field.
func (u *ApiUserUpsertBulk) SetCbAPIUser(v string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIUser(v)
	})
}

// UpdateCbAPIUser sets the "cb_api_user" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateCbAPIUser() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIUser()
	})
}

// ClearCbAPIUser clears the value of the "cb_api_user" field.
func (u *ApiUserUpsertBulk) ClearCbAPIUser() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIUser()
	})
}

// SetCbAPIPwd sets the "cb_api_pwd" field.
func (u *ApiUserUpsertBulk) SetCbAPIPwd(v string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIPwd(v)
	})
}

// UpdateCbAPIPwd sets the "cb_api_pwd" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateCbAPIPwd() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIPwd()
	})
}

// ClearCbAPIPwd clears the value of the "cb_api_pwd" field.
func (u *ApiUserUpsertBulk) ClearCbAPIPwd() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIPwd()
	})
}

// SetCbAPIToken sets the "cb_api_token" field.
func (u *ApiUserUpsertBulk) SetCbAPIToken(v string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIToken(v)
	})
}

// UpdateCbAPIToken sets the "cb_api_token" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateCbAPIToken() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIToken()
	})
}

// ClearCbAPIToken clears the value of the "cb_api_token" field.
func (u *ApiUserUpsertBulk) ClearCbAPIToken() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIToken()
	})
}

// SetCbAPIEndpoints sets the "cb_api_endpoints" field.
func (u *ApiUserUpsertBulk) SetCbAPIEndpoints(v map[string]string) *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.SetCbAPIEndpoints(v)
	})
}

// UpdateCbAPIEndpoints sets the "cb_api_endpoints" field to the value that was provided on create.
func (u *ApiUserUpsertBulk) UpdateCbAPIEndpoints() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.UpdateCbAPIEndpoints()
	})
}

// ClearCbAPIEndpoints clears the value of the "cb_api_endpoints" field.
func (u *ApiUserUpsertBulk) ClearCbAPIEndpoints() *ApiUserUpsertBulk {
	return u.Update(func(s *ApiUserUpsert) {
		s.ClearCbAPIEndpoints()
	})
}

// Exec executes the query.
func (u *ApiUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ApiUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

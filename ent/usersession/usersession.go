// Code generated by ent, DO NOT EDIT.

package usersession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usersession type in the database.
	Label = "user_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// EdgeSockets holds the string denoting the sockets edge name in mutations.
	EdgeSockets = "sockets"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// EdgePartnerContact holds the string denoting the partner_contact edge name in mutations.
	EdgePartnerContact = "partner_contact"
	// Table holds the table name of the usersession in the database.
	Table = "user_sessions"
	// SocketsTable is the table that holds the sockets relation/edge.
	SocketsTable = "user_session_sockets"
	// SocketsInverseTable is the table name for the UserSessionSocket entity.
	// It exists in this package in order to avoid circular dependency with the "usersessionsocket" package.
	SocketsInverseTable = "user_session_sockets"
	// SocketsColumn is the table column denoting the sockets relation/edge.
	SocketsColumn = "sessions_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_sessions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PartnerTable is the table that holds the partner relation/edge.
	PartnerTable = "user_sessions"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
	// PartnerColumn is the table column denoting the partner relation/edge.
	PartnerColumn = "partner_id"
	// PartnerContactTable is the table that holds the partner_contact relation/edge.
	PartnerContactTable = "user_sessions"
	// PartnerContactInverseTable is the table name for the PartnerContact entity.
	// It exists in this package in order to avoid circular dependency with the "partnercontact" package.
	PartnerContactInverseTable = "partner_contacts"
	// PartnerContactColumn is the table column denoting the partner_contact relation/edge.
	PartnerContactColumn = "partner_contact_id"
)

// Columns holds all SQL columns for usersession fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldExpiresAt,
	FieldIP,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_sessions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partner_id",
	"partner_contact_id",
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultExpiresAt holds the default value on creation for the "expires_at" field.
	DefaultExpiresAt func() time.Time
	// IPValidator is a validator for the "ip" field. It is called by the builders before save.
	IPValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the UserSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// BySocketsCount orders the results by sockets count.
func BySocketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSocketsStep(), opts...)
	}
}

// BySockets orders the results by sockets terms.
func BySockets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSocketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPartnerField orders the results by partner field.
func ByPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByPartnerContactField orders the results by partner_contact field.
func ByPartnerContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerContactStep(), sql.OrderByField(field, opts...))
	}
}
func newSocketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SocketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SocketsTable, SocketsColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
	)
}
func newPartnerContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerContactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnerContactTable, PartnerContactColumn),
	)
}

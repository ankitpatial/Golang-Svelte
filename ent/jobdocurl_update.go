// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/job"
	"roofix/ent/jobdocurl"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobDocURLUpdate is the builder for updating JobDocURL entities.
type JobDocURLUpdate struct {
	config
	hooks     []Hook
	mutation  *JobDocURLMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobDocURLUpdate builder.
func (jduu *JobDocURLUpdate) Where(ps ...predicate.JobDocURL) *JobDocURLUpdate {
	jduu.mutation.Where(ps...)
	return jduu
}

// SetUpdatedAt sets the "updated_at" field.
func (jduu *JobDocURLUpdate) SetUpdatedAt(t time.Time) *JobDocURLUpdate {
	jduu.mutation.SetUpdatedAt(t)
	return jduu
}

// SetType sets the "type" field.
func (jduu *JobDocURLUpdate) SetType(edut enum.JobDocUrlType) *JobDocURLUpdate {
	jduu.mutation.SetType(edut)
	return jduu
}

// SetURL sets the "url" field.
func (jduu *JobDocURLUpdate) SetURL(s string) *JobDocURLUpdate {
	jduu.mutation.SetURL(s)
	return jduu
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jduu *JobDocURLUpdate) SetJobID(id string) *JobDocURLUpdate {
	jduu.mutation.SetJobID(id)
	return jduu
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jduu *JobDocURLUpdate) SetNillableJobID(id *string) *JobDocURLUpdate {
	if id != nil {
		jduu = jduu.SetJobID(*id)
	}
	return jduu
}

// SetJob sets the "job" edge to the Job entity.
func (jduu *JobDocURLUpdate) SetJob(j *Job) *JobDocURLUpdate {
	return jduu.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jduu *JobDocURLUpdate) SetCreatorID(id string) *JobDocURLUpdate {
	jduu.mutation.SetCreatorID(id)
	return jduu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jduu *JobDocURLUpdate) SetNillableCreatorID(id *string) *JobDocURLUpdate {
	if id != nil {
		jduu = jduu.SetCreatorID(*id)
	}
	return jduu
}

// SetCreator sets the "creator" edge to the User entity.
func (jduu *JobDocURLUpdate) SetCreator(u *User) *JobDocURLUpdate {
	return jduu.SetCreatorID(u.ID)
}

// Mutation returns the JobDocURLMutation object of the builder.
func (jduu *JobDocURLUpdate) Mutation() *JobDocURLMutation {
	return jduu.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (jduu *JobDocURLUpdate) ClearJob() *JobDocURLUpdate {
	jduu.mutation.ClearJob()
	return jduu
}

// ClearCreator clears the "creator" edge to the User entity.
func (jduu *JobDocURLUpdate) ClearCreator() *JobDocURLUpdate {
	jduu.mutation.ClearCreator()
	return jduu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jduu *JobDocURLUpdate) Save(ctx context.Context) (int, error) {
	jduu.defaults()
	return withHooks(ctx, jduu.sqlSave, jduu.mutation, jduu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jduu *JobDocURLUpdate) SaveX(ctx context.Context) int {
	affected, err := jduu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jduu *JobDocURLUpdate) Exec(ctx context.Context) error {
	_, err := jduu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jduu *JobDocURLUpdate) ExecX(ctx context.Context) {
	if err := jduu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jduu *JobDocURLUpdate) defaults() {
	if _, ok := jduu.mutation.UpdatedAt(); !ok {
		v := jobdocurl.UpdateDefaultUpdatedAt()
		jduu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jduu *JobDocURLUpdate) check() error {
	if v, ok := jduu.mutation.GetType(); ok {
		if err := jobdocurl.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "JobDocURL.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jduu *JobDocURLUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobDocURLUpdate {
	jduu.modifiers = append(jduu.modifiers, modifiers...)
	return jduu
}

func (jduu *JobDocURLUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jduu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobdocurl.Table, jobdocurl.Columns, sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString))
	if ps := jduu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jduu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdocurl.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jduu.mutation.GetType(); ok {
		_spec.SetField(jobdocurl.FieldType, field.TypeEnum, value)
	}
	if value, ok := jduu.mutation.URL(); ok {
		_spec.SetField(jobdocurl.FieldURL, field.TypeString, value)
	}
	if jduu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.JobTable,
			Columns: []string{jobdocurl.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.JobTable,
			Columns: []string{jobdocurl.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.CreatorTable,
			Columns: []string{jobdocurl.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.CreatorTable,
			Columns: []string{jobdocurl.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jduu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jduu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobdocurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jduu.mutation.done = true
	return n, nil
}

// JobDocURLUpdateOne is the builder for updating a single JobDocURL entity.
type JobDocURLUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobDocURLMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (jduuo *JobDocURLUpdateOne) SetUpdatedAt(t time.Time) *JobDocURLUpdateOne {
	jduuo.mutation.SetUpdatedAt(t)
	return jduuo
}

// SetType sets the "type" field.
func (jduuo *JobDocURLUpdateOne) SetType(edut enum.JobDocUrlType) *JobDocURLUpdateOne {
	jduuo.mutation.SetType(edut)
	return jduuo
}

// SetURL sets the "url" field.
func (jduuo *JobDocURLUpdateOne) SetURL(s string) *JobDocURLUpdateOne {
	jduuo.mutation.SetURL(s)
	return jduuo
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jduuo *JobDocURLUpdateOne) SetJobID(id string) *JobDocURLUpdateOne {
	jduuo.mutation.SetJobID(id)
	return jduuo
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jduuo *JobDocURLUpdateOne) SetNillableJobID(id *string) *JobDocURLUpdateOne {
	if id != nil {
		jduuo = jduuo.SetJobID(*id)
	}
	return jduuo
}

// SetJob sets the "job" edge to the Job entity.
func (jduuo *JobDocURLUpdateOne) SetJob(j *Job) *JobDocURLUpdateOne {
	return jduuo.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jduuo *JobDocURLUpdateOne) SetCreatorID(id string) *JobDocURLUpdateOne {
	jduuo.mutation.SetCreatorID(id)
	return jduuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jduuo *JobDocURLUpdateOne) SetNillableCreatorID(id *string) *JobDocURLUpdateOne {
	if id != nil {
		jduuo = jduuo.SetCreatorID(*id)
	}
	return jduuo
}

// SetCreator sets the "creator" edge to the User entity.
func (jduuo *JobDocURLUpdateOne) SetCreator(u *User) *JobDocURLUpdateOne {
	return jduuo.SetCreatorID(u.ID)
}

// Mutation returns the JobDocURLMutation object of the builder.
func (jduuo *JobDocURLUpdateOne) Mutation() *JobDocURLMutation {
	return jduuo.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (jduuo *JobDocURLUpdateOne) ClearJob() *JobDocURLUpdateOne {
	jduuo.mutation.ClearJob()
	return jduuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (jduuo *JobDocURLUpdateOne) ClearCreator() *JobDocURLUpdateOne {
	jduuo.mutation.ClearCreator()
	return jduuo
}

// Where appends a list predicates to the JobDocURLUpdate builder.
func (jduuo *JobDocURLUpdateOne) Where(ps ...predicate.JobDocURL) *JobDocURLUpdateOne {
	jduuo.mutation.Where(ps...)
	return jduuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jduuo *JobDocURLUpdateOne) Select(field string, fields ...string) *JobDocURLUpdateOne {
	jduuo.fields = append([]string{field}, fields...)
	return jduuo
}

// Save executes the query and returns the updated JobDocURL entity.
func (jduuo *JobDocURLUpdateOne) Save(ctx context.Context) (*JobDocURL, error) {
	jduuo.defaults()
	return withHooks(ctx, jduuo.sqlSave, jduuo.mutation, jduuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jduuo *JobDocURLUpdateOne) SaveX(ctx context.Context) *JobDocURL {
	node, err := jduuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jduuo *JobDocURLUpdateOne) Exec(ctx context.Context) error {
	_, err := jduuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jduuo *JobDocURLUpdateOne) ExecX(ctx context.Context) {
	if err := jduuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jduuo *JobDocURLUpdateOne) defaults() {
	if _, ok := jduuo.mutation.UpdatedAt(); !ok {
		v := jobdocurl.UpdateDefaultUpdatedAt()
		jduuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jduuo *JobDocURLUpdateOne) check() error {
	if v, ok := jduuo.mutation.GetType(); ok {
		if err := jobdocurl.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "JobDocURL.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jduuo *JobDocURLUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobDocURLUpdateOne {
	jduuo.modifiers = append(jduuo.modifiers, modifiers...)
	return jduuo
}

func (jduuo *JobDocURLUpdateOne) sqlSave(ctx context.Context) (_node *JobDocURL, err error) {
	if err := jduuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobdocurl.Table, jobdocurl.Columns, sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString))
	id, ok := jduuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobDocURL.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jduuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobdocurl.FieldID)
		for _, f := range fields {
			if !jobdocurl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobdocurl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jduuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jduuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdocurl.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jduuo.mutation.GetType(); ok {
		_spec.SetField(jobdocurl.FieldType, field.TypeEnum, value)
	}
	if value, ok := jduuo.mutation.URL(); ok {
		_spec.SetField(jobdocurl.FieldURL, field.TypeString, value)
	}
	if jduuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.JobTable,
			Columns: []string{jobdocurl.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.JobTable,
			Columns: []string{jobdocurl.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.CreatorTable,
			Columns: []string{jobdocurl.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.CreatorTable,
			Columns: []string{jobdocurl.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jduuo.modifiers...)
	_node = &JobDocURL{config: jduuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jduuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobdocurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jduuo.mutation.done = true
	return _node, nil
}

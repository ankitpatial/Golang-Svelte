// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/auditlog"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks     []Hook
	mutation  *AuditLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (alu *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetAction sets the "action" field.
func (alu *AuditLogUpdate) SetAction(s string) *AuditLogUpdate {
	alu.mutation.SetAction(s)
	return alu
}

// SetDescription sets the "description" field.
func (alu *AuditLogUpdate) SetDescription(s string) *AuditLogUpdate {
	alu.mutation.SetDescription(s)
	return alu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableDescription(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetDescription(*s)
	}
	return alu
}

// ClearDescription clears the value of the "description" field.
func (alu *AuditLogUpdate) ClearDescription() *AuditLogUpdate {
	alu.mutation.ClearDescription()
	return alu
}

// SetIP sets the "ip" field.
func (alu *AuditLogUpdate) SetIP(s string) *AuditLogUpdate {
	alu.mutation.SetIP(s)
	return alu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableIP(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetIP(*s)
	}
	return alu
}

// ClearIP clears the value of the "ip" field.
func (alu *AuditLogUpdate) ClearIP() *AuditLogUpdate {
	alu.mutation.ClearIP()
	return alu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (alu *AuditLogUpdate) SetUserID(id string) *AuditLogUpdate {
	alu.mutation.SetUserID(id)
	return alu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableUserID(id *string) *AuditLogUpdate {
	if id != nil {
		alu = alu.SetUserID(*id)
	}
	return alu
}

// SetUser sets the "user" edge to the User entity.
func (alu *AuditLogUpdate) SetUser(u *User) *AuditLogUpdate {
	return alu.SetUserID(u.ID)
}

// SetAPIUserID sets the "api_user" edge to the ApiUser entity by ID.
func (alu *AuditLogUpdate) SetAPIUserID(id string) *AuditLogUpdate {
	alu.mutation.SetAPIUserID(id)
	return alu
}

// SetNillableAPIUserID sets the "api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableAPIUserID(id *string) *AuditLogUpdate {
	if id != nil {
		alu = alu.SetAPIUserID(*id)
	}
	return alu
}

// SetAPIUser sets the "api_user" edge to the ApiUser entity.
func (alu *AuditLogUpdate) SetAPIUser(a *ApiUser) *AuditLogUpdate {
	return alu.SetAPIUserID(a.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (alu *AuditLogUpdate) Mutation() *AuditLogMutation {
	return alu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (alu *AuditLogUpdate) ClearUser() *AuditLogUpdate {
	alu.mutation.ClearUser()
	return alu
}

// ClearAPIUser clears the "api_user" edge to the ApiUser entity.
func (alu *AuditLogUpdate) ClearAPIUser() *AuditLogUpdate {
	alu.mutation.ClearAPIUser()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AuditLogUpdate) check() error {
	if v, ok := alu.mutation.Action(); ok {
		if err := auditlog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AuditLog.action": %w`, err)}
		}
	}
	if v, ok := alu.mutation.Description(); ok {
		if err := auditlog.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AuditLog.description": %w`, err)}
		}
	}
	if v, ok := alu.mutation.IP(); ok {
		if err := auditlog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "AuditLog.ip": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (alu *AuditLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditLogUpdate {
	alu.modifiers = append(alu.modifiers, modifiers...)
	return alu
}

func (alu *AuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
	}
	if value, ok := alu.mutation.Description(); ok {
		_spec.SetField(auditlog.FieldDescription, field.TypeString, value)
	}
	if alu.mutation.DescriptionCleared() {
		_spec.ClearField(auditlog.FieldDescription, field.TypeString)
	}
	if value, ok := alu.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
	}
	if alu.mutation.IPCleared() {
		_spec.ClearField(auditlog.FieldIP, field.TypeString)
	}
	if alu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: []string{auditlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: []string{auditlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.APIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.APIUserTable,
			Columns: []string{auditlog.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.APIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.APIUserTable,
			Columns: []string{auditlog.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(alu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuditLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAction sets the "action" field.
func (aluo *AuditLogUpdateOne) SetAction(s string) *AuditLogUpdateOne {
	aluo.mutation.SetAction(s)
	return aluo
}

// SetDescription sets the "description" field.
func (aluo *AuditLogUpdateOne) SetDescription(s string) *AuditLogUpdateOne {
	aluo.mutation.SetDescription(s)
	return aluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableDescription(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetDescription(*s)
	}
	return aluo
}

// ClearDescription clears the value of the "description" field.
func (aluo *AuditLogUpdateOne) ClearDescription() *AuditLogUpdateOne {
	aluo.mutation.ClearDescription()
	return aluo
}

// SetIP sets the "ip" field.
func (aluo *AuditLogUpdateOne) SetIP(s string) *AuditLogUpdateOne {
	aluo.mutation.SetIP(s)
	return aluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableIP(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetIP(*s)
	}
	return aluo
}

// ClearIP clears the value of the "ip" field.
func (aluo *AuditLogUpdateOne) ClearIP() *AuditLogUpdateOne {
	aluo.mutation.ClearIP()
	return aluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (aluo *AuditLogUpdateOne) SetUserID(id string) *AuditLogUpdateOne {
	aluo.mutation.SetUserID(id)
	return aluo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableUserID(id *string) *AuditLogUpdateOne {
	if id != nil {
		aluo = aluo.SetUserID(*id)
	}
	return aluo
}

// SetUser sets the "user" edge to the User entity.
func (aluo *AuditLogUpdateOne) SetUser(u *User) *AuditLogUpdateOne {
	return aluo.SetUserID(u.ID)
}

// SetAPIUserID sets the "api_user" edge to the ApiUser entity by ID.
func (aluo *AuditLogUpdateOne) SetAPIUserID(id string) *AuditLogUpdateOne {
	aluo.mutation.SetAPIUserID(id)
	return aluo
}

// SetNillableAPIUserID sets the "api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableAPIUserID(id *string) *AuditLogUpdateOne {
	if id != nil {
		aluo = aluo.SetAPIUserID(*id)
	}
	return aluo
}

// SetAPIUser sets the "api_user" edge to the ApiUser entity.
func (aluo *AuditLogUpdateOne) SetAPIUser(a *ApiUser) *AuditLogUpdateOne {
	return aluo.SetAPIUserID(a.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (aluo *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return aluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aluo *AuditLogUpdateOne) ClearUser() *AuditLogUpdateOne {
	aluo.mutation.ClearUser()
	return aluo
}

// ClearAPIUser clears the "api_user" edge to the ApiUser entity.
func (aluo *AuditLogUpdateOne) ClearAPIUser() *AuditLogUpdateOne {
	aluo.mutation.ClearAPIUser()
	return aluo
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (aluo *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLog entity.
func (aluo *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AuditLogUpdateOne) check() error {
	if v, ok := aluo.mutation.Action(); ok {
		if err := auditlog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AuditLog.action": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.Description(); ok {
		if err := auditlog.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AuditLog.description": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.IP(); ok {
		if err := auditlog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "AuditLog.ip": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aluo *AuditLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditLogUpdateOne {
	aluo.modifiers = append(aluo.modifiers, modifiers...)
	return aluo
}

func (aluo *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Description(); ok {
		_spec.SetField(auditlog.FieldDescription, field.TypeString, value)
	}
	if aluo.mutation.DescriptionCleared() {
		_spec.ClearField(auditlog.FieldDescription, field.TypeString)
	}
	if value, ok := aluo.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
	}
	if aluo.mutation.IPCleared() {
		_spec.ClearField(auditlog.FieldIP, field.TypeString)
	}
	if aluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: []string{auditlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: []string{auditlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.APIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.APIUserTable,
			Columns: []string{auditlog.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.APIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.APIUserTable,
			Columns: []string{auditlog.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aluo.modifiers...)
	_node = &AuditLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}

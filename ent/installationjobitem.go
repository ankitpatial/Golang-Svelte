// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InstallationJobItem is the model entity for the InstallationJobItem schema.
type InstallationJobItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Features holds the value of the "features" field.
	Features []string `json:"features,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// ImgKey holds the value of the "img_key" field.
	ImgKey string `json:"img_key,omitempty"`
	// SpecialNote holds the value of the "special_note" field.
	SpecialNote string `json:"special_note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstallationJobItemQuery when eager-loading is set.
	Edges        InstallationJobItemEdges `json:"edges"`
	job_id       *string
	selectValues sql.SelectValues
}

// InstallationJobItemEdges holds the relations/edges for other nodes in the graph.
type InstallationJobItemEdges struct {
	// Job holds the value of the job edge.
	Job *InstallationJob `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobItemEdges) JobOrErr() (*InstallationJob, error) {
	if e.loadedTypes[0] {
		if e.Job == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: installationjob.Label}
		}
		return e.Job, nil
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstallationJobItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case installationjobitem.FieldFeatures:
			values[i] = new([]byte)
		case installationjobitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case installationjobitem.FieldID, installationjobitem.FieldName, installationjobitem.FieldDescription, installationjobitem.FieldImgKey, installationjobitem.FieldSpecialNote:
			values[i] = new(sql.NullString)
		case installationjobitem.ForeignKeys[0]: // job_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstallationJobItem fields.
func (iji *InstallationJobItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case installationjobitem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				iji.ID = value.String
			}
		case installationjobitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				iji.Name = value.String
			}
		case installationjobitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				iji.Description = value.String
			}
		case installationjobitem.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &iji.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case installationjobitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				iji.Price = value.Float64
			}
		case installationjobitem.FieldImgKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_key", values[i])
			} else if value.Valid {
				iji.ImgKey = value.String
			}
		case installationjobitem.FieldSpecialNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field special_note", values[i])
			} else if value.Valid {
				iji.SpecialNote = value.String
			}
		case installationjobitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				iji.job_id = new(string)
				*iji.job_id = value.String
			}
		default:
			iji.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstallationJobItem.
// This includes values selected through modifiers, order, etc.
func (iji *InstallationJobItem) Value(name string) (ent.Value, error) {
	return iji.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the InstallationJobItem entity.
func (iji *InstallationJobItem) QueryJob() *InstallationJobQuery {
	return NewInstallationJobItemClient(iji.config).QueryJob(iji)
}

// Update returns a builder for updating this InstallationJobItem.
// Note that you need to call InstallationJobItem.Unwrap() before calling this method if this InstallationJobItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (iji *InstallationJobItem) Update() *InstallationJobItemUpdateOne {
	return NewInstallationJobItemClient(iji.config).UpdateOne(iji)
}

// Unwrap unwraps the InstallationJobItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iji *InstallationJobItem) Unwrap() *InstallationJobItem {
	_tx, ok := iji.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstallationJobItem is not a transactional entity")
	}
	iji.config.driver = _tx.drv
	return iji
}

// String implements the fmt.Stringer.
func (iji *InstallationJobItem) String() string {
	var builder strings.Builder
	builder.WriteString("InstallationJobItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iji.ID))
	builder.WriteString("name=")
	builder.WriteString(iji.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(iji.Description)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", iji.Features))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", iji.Price))
	builder.WriteString(", ")
	builder.WriteString("img_key=")
	builder.WriteString(iji.ImgKey)
	builder.WriteString(", ")
	builder.WriteString("special_note=")
	builder.WriteString(iji.SpecialNote)
	builder.WriteByte(')')
	return builder.String()
}

// InstallationJobItems is a parsable slice of InstallationJobItem.
type InstallationJobItems []*InstallationJobItem

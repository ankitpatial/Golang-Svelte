// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/installationjob"
	"roofix/ent/job"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobnote"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/partnerservice"
	"roofix/ent/partnerservicecity"
	"roofix/ent/partnerservicestate"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/survey"
	"roofix/ent/user"
	"roofix/ent/usersession"
	"roofix/pkg/enum"
	"roofix/pkg/model"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerCreate is the builder for creating a Partner entity.
type PartnerCreate struct {
	config
	mutation *PartnerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PartnerCreate) SetCreatedAt(t time.Time) *PartnerCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableCreatedAt(t *time.Time) *PartnerCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PartnerCreate) SetUpdatedAt(t time.Time) *PartnerCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableUpdatedAt(t *time.Time) *PartnerCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetExternalID sets the "external_id" field.
func (pc *PartnerCreate) SetExternalID(s string) *PartnerCreate {
	pc.mutation.SetExternalID(s)
	return pc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableExternalID(s *string) *PartnerCreate {
	if s != nil {
		pc.SetExternalID(*s)
	}
	return pc
}

// SetCreatorID sets the "creator_id" field.
func (pc *PartnerCreate) SetCreatorID(s string) *PartnerCreate {
	pc.mutation.SetCreatorID(s)
	return pc
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableCreatorID(s *string) *PartnerCreate {
	if s != nil {
		pc.SetCreatorID(*s)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PartnerCreate) SetType(e enum.Partner) *PartnerCreate {
	pc.mutation.SetType(e)
	return pc
}

// SetName sets the "name" field.
func (pc *PartnerCreate) SetName(s string) *PartnerCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetAddress sets the "address" field.
func (pc *PartnerCreate) SetAddress(s string) *PartnerCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableAddress(s *string) *PartnerCreate {
	if s != nil {
		pc.SetAddress(*s)
	}
	return pc
}

// SetWebsite sets the "website" field.
func (pc *PartnerCreate) SetWebsite(s string) *PartnerCreate {
	pc.mutation.SetWebsite(s)
	return pc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableWebsite(s *string) *PartnerCreate {
	if s != nil {
		pc.SetWebsite(*s)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PartnerCreate) SetPhone(s string) *PartnerCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *PartnerCreate) SetNillablePhone(s *string) *PartnerCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetLatitude sets the "latitude" field.
func (pc *PartnerCreate) SetLatitude(f float64) *PartnerCreate {
	pc.mutation.SetLatitude(f)
	return pc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableLatitude(f *float64) *PartnerCreate {
	if f != nil {
		pc.SetLatitude(*f)
	}
	return pc
}

// SetLongitude sets the "longitude" field.
func (pc *PartnerCreate) SetLongitude(f float64) *PartnerCreate {
	pc.mutation.SetLongitude(f)
	return pc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableLongitude(f *float64) *PartnerCreate {
	if f != nil {
		pc.SetLongitude(*f)
	}
	return pc
}

// SetIsNationWide sets the "is_nation_wide" field.
func (pc *PartnerCreate) SetIsNationWide(b bool) *PartnerCreate {
	pc.mutation.SetIsNationWide(b)
	return pc
}

// SetNillableIsNationWide sets the "is_nation_wide" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableIsNationWide(b *bool) *PartnerCreate {
	if b != nil {
		pc.SetIsNationWide(*b)
	}
	return pc
}

// SetCrewCount sets the "crew_count" field.
func (pc *PartnerCreate) SetCrewCount(u uint16) *PartnerCreate {
	pc.mutation.SetCrewCount(u)
	return pc
}

// SetNillableCrewCount sets the "crew_count" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableCrewCount(u *uint16) *PartnerCreate {
	if u != nil {
		pc.SetCrewCount(*u)
	}
	return pc
}

// SetYearsInBusiness sets the "years_in_business" field.
func (pc *PartnerCreate) SetYearsInBusiness(i int) *PartnerCreate {
	pc.mutation.SetYearsInBusiness(i)
	return pc
}

// SetNillableYearsInBusiness sets the "years_in_business" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableYearsInBusiness(i *int) *PartnerCreate {
	if i != nil {
		pc.SetYearsInBusiness(*i)
	}
	return pc
}

// SetJobCapacity sets the "job_capacity" field.
func (pc *PartnerCreate) SetJobCapacity(u uint16) *PartnerCreate {
	pc.mutation.SetJobCapacity(u)
	return pc
}

// SetNillableJobCapacity sets the "job_capacity" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableJobCapacity(u *uint16) *PartnerCreate {
	if u != nil {
		pc.SetJobCapacity(*u)
	}
	return pc
}

// SetAsphaltLeadT sets the "asphalt_lead_t" field.
func (pc *PartnerCreate) SetAsphaltLeadT(s string) *PartnerCreate {
	pc.mutation.SetAsphaltLeadT(s)
	return pc
}

// SetNillableAsphaltLeadT sets the "asphalt_lead_t" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableAsphaltLeadT(s *string) *PartnerCreate {
	if s != nil {
		pc.SetAsphaltLeadT(*s)
	}
	return pc
}

// SetMetalLeadT sets the "metal_lead_t" field.
func (pc *PartnerCreate) SetMetalLeadT(s string) *PartnerCreate {
	pc.mutation.SetMetalLeadT(s)
	return pc
}

// SetNillableMetalLeadT sets the "metal_lead_t" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableMetalLeadT(s *string) *PartnerCreate {
	if s != nil {
		pc.SetMetalLeadT(*s)
	}
	return pc
}

// SetTileLeadT sets the "tile_lead_t" field.
func (pc *PartnerCreate) SetTileLeadT(s string) *PartnerCreate {
	pc.mutation.SetTileLeadT(s)
	return pc
}

// SetNillableTileLeadT sets the "tile_lead_t" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableTileLeadT(s *string) *PartnerCreate {
	if s != nil {
		pc.SetTileLeadT(*s)
	}
	return pc
}

// SetSetupStepsCompleted sets the "setup_steps_completed" field.
func (pc *PartnerCreate) SetSetupStepsCompleted(u uint8) *PartnerCreate {
	pc.mutation.SetSetupStepsCompleted(u)
	return pc
}

// SetNillableSetupStepsCompleted sets the "setup_steps_completed" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableSetupStepsCompleted(u *uint8) *PartnerCreate {
	if u != nil {
		pc.SetSetupStepsCompleted(*u)
	}
	return pc
}

// SetSalesVolume sets the "sales_volume" field.
func (pc *PartnerCreate) SetSalesVolume(i int) *PartnerCreate {
	pc.mutation.SetSalesVolume(i)
	return pc
}

// SetNillableSalesVolume sets the "sales_volume" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableSalesVolume(i *int) *PartnerCreate {
	if i != nil {
		pc.SetSalesVolume(*i)
	}
	return pc
}

// SetDownPayment sets the "down_payment" field.
func (pc *PartnerCreate) SetDownPayment(i int) *PartnerCreate {
	pc.mutation.SetDownPayment(i)
	return pc
}

// SetNillableDownPayment sets the "down_payment" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableDownPayment(i *int) *PartnerCreate {
	if i != nil {
		pc.SetDownPayment(*i)
	}
	return pc
}

// SetPif sets the "pif" field.
func (pc *PartnerCreate) SetPif(i int) *PartnerCreate {
	pc.mutation.SetPif(i)
	return pc
}

// SetNillablePif sets the "pif" field if the given value is not nil.
func (pc *PartnerCreate) SetNillablePif(i *int) *PartnerCreate {
	if i != nil {
		pc.SetPif(*i)
	}
	return pc
}

// SetInstallInHouse sets the "install_in_house" field.
func (pc *PartnerCreate) SetInstallInHouse(b bool) *PartnerCreate {
	pc.mutation.SetInstallInHouse(b)
	return pc
}

// SetNillableInstallInHouse sets the "install_in_house" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableInstallInHouse(b *bool) *PartnerCreate {
	if b != nil {
		pc.SetInstallInHouse(*b)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PartnerCreate) SetStatus(es enum.PartnerStatus) *PartnerCreate {
	pc.mutation.SetStatus(es)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableStatus(es *enum.PartnerStatus) *PartnerCreate {
	if es != nil {
		pc.SetStatus(*es)
	}
	return pc
}

// SetEpcStatus sets the "epc_status" field.
func (pc *PartnerCreate) SetEpcStatus(es enum.EPCStatus) *PartnerCreate {
	pc.mutation.SetEpcStatus(es)
	return pc
}

// SetNillableEpcStatus sets the "epc_status" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableEpcStatus(es *enum.EPCStatus) *PartnerCreate {
	if es != nil {
		pc.SetEpcStatus(*es)
	}
	return pc
}

// SetMobileAppSettings sets the "mobile_app_settings" field.
func (pc *PartnerCreate) SetMobileAppSettings(mas model.MobileAppSettings) *PartnerCreate {
	pc.mutation.SetMobileAppSettings(mas)
	return pc
}

// SetNillableMobileAppSettings sets the "mobile_app_settings" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableMobileAppSettings(mas *model.MobileAppSettings) *PartnerCreate {
	if mas != nil {
		pc.SetMobileAppSettings(*mas)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PartnerCreate) SetID(s string) *PartnerCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableID(s *string) *PartnerCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// AddRequestedEstimateIDs adds the "requested_estimates" edge to the Estimate entity by IDs.
func (pc *PartnerCreate) AddRequestedEstimateIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddRequestedEstimateIDs(ids...)
	return pc
}

// AddRequestedEstimates adds the "requested_estimates" edges to the Estimate entity.
func (pc *PartnerCreate) AddRequestedEstimates(e ...*Estimate) *PartnerCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddRequestedEstimateIDs(ids...)
}

// AddEstimateHomeOwnerIDs adds the "estimate_home_owners" edge to the HomeOwner entity by IDs.
func (pc *PartnerCreate) AddEstimateHomeOwnerIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddEstimateHomeOwnerIDs(ids...)
	return pc
}

// AddEstimateHomeOwners adds the "estimate_home_owners" edges to the HomeOwner entity.
func (pc *PartnerCreate) AddEstimateHomeOwners(h ...*HomeOwner) *PartnerCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pc.AddEstimateHomeOwnerIDs(ids...)
}

// AddRoofingJobIDs adds the "roofing_jobs" edge to the Job entity by IDs.
func (pc *PartnerCreate) AddRoofingJobIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddRoofingJobIDs(ids...)
	return pc
}

// AddRoofingJobs adds the "roofing_jobs" edges to the Job entity.
func (pc *PartnerCreate) AddRoofingJobs(j ...*Job) *PartnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pc.AddRoofingJobIDs(ids...)
}

// AddIntegrationJobIDs adds the "integration_jobs" edge to the Job entity by IDs.
func (pc *PartnerCreate) AddIntegrationJobIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddIntegrationJobIDs(ids...)
	return pc
}

// AddIntegrationJobs adds the "integration_jobs" edges to the Job entity.
func (pc *PartnerCreate) AddIntegrationJobs(j ...*Job) *PartnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pc.AddIntegrationJobIDs(ids...)
}

// AddEpcJobIDs adds the "epc_jobs" edge to the Job entity by IDs.
func (pc *PartnerCreate) AddEpcJobIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddEpcJobIDs(ids...)
	return pc
}

// AddEpcJobs adds the "epc_jobs" edges to the Job entity.
func (pc *PartnerCreate) AddEpcJobs(j ...*Job) *PartnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pc.AddEpcJobIDs(ids...)
}

// AddJobRequestIDs adds the "job_requests" edge to the Job entity by IDs.
func (pc *PartnerCreate) AddJobRequestIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddJobRequestIDs(ids...)
	return pc
}

// AddJobRequests adds the "job_requests" edges to the Job entity.
func (pc *PartnerCreate) AddJobRequests(j ...*Job) *PartnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pc.AddJobRequestIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the PartnerActivity entity by IDs.
func (pc *PartnerCreate) AddActivityIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddActivityIDs(ids...)
	return pc
}

// AddActivities adds the "activities" edges to the PartnerActivity entity.
func (pc *PartnerCreate) AddActivities(p ...*PartnerActivity) *PartnerCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddActivityIDs(ids...)
}

// AddJobAssignmentHistoryIDs adds the "job_assignment_history" edge to the JobAssignmentHistory entity by IDs.
func (pc *PartnerCreate) AddJobAssignmentHistoryIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddJobAssignmentHistoryIDs(ids...)
	return pc
}

// AddJobAssignmentHistory adds the "job_assignment_history" edges to the JobAssignmentHistory entity.
func (pc *PartnerCreate) AddJobAssignmentHistory(j ...*JobAssignmentHistory) *PartnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pc.AddJobAssignmentHistoryIDs(ids...)
}

// AddRequestedInstallationJobIDs adds the "requested_installation_jobs" edge to the InstallationJob entity by IDs.
func (pc *PartnerCreate) AddRequestedInstallationJobIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddRequestedInstallationJobIDs(ids...)
	return pc
}

// AddRequestedInstallationJobs adds the "requested_installation_jobs" edges to the InstallationJob entity.
func (pc *PartnerCreate) AddRequestedInstallationJobs(i ...*InstallationJob) *PartnerCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddRequestedInstallationJobIDs(ids...)
}

// AddAssignedInstallationJobIDs adds the "assigned_installation_jobs" edge to the InstallationJob entity by IDs.
func (pc *PartnerCreate) AddAssignedInstallationJobIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddAssignedInstallationJobIDs(ids...)
	return pc
}

// AddAssignedInstallationJobs adds the "assigned_installation_jobs" edges to the InstallationJob entity.
func (pc *PartnerCreate) AddAssignedInstallationJobs(i ...*InstallationJob) *PartnerCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddAssignedInstallationJobIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the User entity by IDs.
func (pc *PartnerCreate) AddContactIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddContactIDs(ids...)
	return pc
}

// AddContacts adds the "contacts" edges to the User entity.
func (pc *PartnerCreate) AddContacts(u ...*User) *PartnerCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddContactIDs(ids...)
}

// SetCreator sets the "creator" edge to the User entity.
func (pc *PartnerCreate) SetCreator(u *User) *PartnerCreate {
	return pc.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (pc *PartnerCreate) SetCreatorAPIID(id string) *PartnerCreate {
	pc.mutation.SetCreatorAPIID(id)
	return pc
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (pc *PartnerCreate) SetNillableCreatorAPIID(id *string) *PartnerCreate {
	if id != nil {
		pc = pc.SetCreatorAPIID(*id)
	}
	return pc
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (pc *PartnerCreate) SetCreatorAPI(a *ApiUser) *PartnerCreate {
	return pc.SetCreatorAPIID(a.ID)
}

// AddServiceIDs adds the "services" edge to the PartnerService entity by IDs.
func (pc *PartnerCreate) AddServiceIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddServiceIDs(ids...)
	return pc
}

// AddServices adds the "services" edges to the PartnerService entity.
func (pc *PartnerCreate) AddServices(p ...*PartnerService) *PartnerCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddServiceIDs(ids...)
}

// AddServiceStateIDs adds the "service_states" edge to the PartnerServiceState entity by IDs.
func (pc *PartnerCreate) AddServiceStateIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddServiceStateIDs(ids...)
	return pc
}

// AddServiceStates adds the "service_states" edges to the PartnerServiceState entity.
func (pc *PartnerCreate) AddServiceStates(p ...*PartnerServiceState) *PartnerCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddServiceStateIDs(ids...)
}

// AddServiceCityIDs adds the "service_cities" edge to the PartnerServiceCity entity by IDs.
func (pc *PartnerCreate) AddServiceCityIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddServiceCityIDs(ids...)
	return pc
}

// AddServiceCities adds the "service_cities" edges to the PartnerServiceCity entity.
func (pc *PartnerCreate) AddServiceCities(p ...*PartnerServiceCity) *PartnerCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddServiceCityIDs(ids...)
}

// AddTrainingVideoIDs adds the "training_videos" edge to the PartnerTrainingVideo entity by IDs.
func (pc *PartnerCreate) AddTrainingVideoIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddTrainingVideoIDs(ids...)
	return pc
}

// AddTrainingVideos adds the "training_videos" edges to the PartnerTrainingVideo entity.
func (pc *PartnerCreate) AddTrainingVideos(p ...*PartnerTrainingVideo) *PartnerCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddTrainingVideoIDs(ids...)
}

// AddContactUsRequestIDs adds the "contact_us_requests" edge to the ContactUs entity by IDs.
func (pc *PartnerCreate) AddContactUsRequestIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddContactUsRequestIDs(ids...)
	return pc
}

// AddContactUsRequests adds the "contact_us_requests" edges to the ContactUs entity.
func (pc *PartnerCreate) AddContactUsRequests(c ...*ContactUs) *PartnerCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddContactUsRequestIDs(ids...)
}

// AddSurveyIDs adds the "surveys" edge to the Survey entity by IDs.
func (pc *PartnerCreate) AddSurveyIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddSurveyIDs(ids...)
	return pc
}

// AddSurveys adds the "surveys" edges to the Survey entity.
func (pc *PartnerCreate) AddSurveys(s ...*Survey) *PartnerCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSurveyIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (pc *PartnerCreate) AddSessionIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddSessionIDs(ids...)
	return pc
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (pc *PartnerCreate) AddSessions(u ...*UserSession) *PartnerCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddSessionIDs(ids...)
}

// AddJobNoteIDs adds the "job_notes" edge to the JobNote entity by IDs.
func (pc *PartnerCreate) AddJobNoteIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddJobNoteIDs(ids...)
	return pc
}

// AddJobNotes adds the "job_notes" edges to the JobNote entity.
func (pc *PartnerCreate) AddJobNotes(j ...*JobNote) *PartnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pc.AddJobNoteIDs(ids...)
}

// AddChannelIDs adds the "channels" edge to the ChannelSub entity by IDs.
func (pc *PartnerCreate) AddChannelIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddChannelIDs(ids...)
	return pc
}

// AddChannels adds the "channels" edges to the ChannelSub entity.
func (pc *PartnerCreate) AddChannels(c ...*ChannelSub) *PartnerCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddChannelIDs(ids...)
}

// AddFinanceOptionIDs adds the "finance_options" edge to the OptionList entity by IDs.
func (pc *PartnerCreate) AddFinanceOptionIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddFinanceOptionIDs(ids...)
	return pc
}

// AddFinanceOptions adds the "finance_options" edges to the OptionList entity.
func (pc *PartnerCreate) AddFinanceOptions(o ...*OptionList) *PartnerCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddFinanceOptionIDs(ids...)
}

// AddEpcOptionIDs adds the "epc_options" edge to the OptionList entity by IDs.
func (pc *PartnerCreate) AddEpcOptionIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddEpcOptionIDs(ids...)
	return pc
}

// AddEpcOptions adds the "epc_options" edges to the OptionList entity.
func (pc *PartnerCreate) AddEpcOptions(o ...*OptionList) *PartnerCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddEpcOptionIDs(ids...)
}

// AddPartnerContactIDs adds the "partner_contacts" edge to the PartnerContact entity by IDs.
func (pc *PartnerCreate) AddPartnerContactIDs(ids ...string) *PartnerCreate {
	pc.mutation.AddPartnerContactIDs(ids...)
	return pc
}

// AddPartnerContacts adds the "partner_contacts" edges to the PartnerContact entity.
func (pc *PartnerCreate) AddPartnerContacts(p ...*PartnerContact) *PartnerCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPartnerContactIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (pc *PartnerCreate) Mutation() *PartnerMutation {
	return pc.mutation
}

// Save creates the Partner in the database.
func (pc *PartnerCreate) Save(ctx context.Context) (*Partner, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartnerCreate) SaveX(ctx context.Context) *Partner {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PartnerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PartnerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PartnerCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := partner.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := partner.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.IsNationWide(); !ok {
		v := partner.DefaultIsNationWide
		pc.mutation.SetIsNationWide(v)
	}
	if _, ok := pc.mutation.CrewCount(); !ok {
		v := partner.DefaultCrewCount
		pc.mutation.SetCrewCount(v)
	}
	if _, ok := pc.mutation.JobCapacity(); !ok {
		v := partner.DefaultJobCapacity
		pc.mutation.SetJobCapacity(v)
	}
	if _, ok := pc.mutation.SetupStepsCompleted(); !ok {
		v := partner.DefaultSetupStepsCompleted
		pc.mutation.SetSetupStepsCompleted(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := partner.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := partner.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartnerCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Partner.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Partner.updated_at"`)}
	}
	if v, ok := pc.mutation.ExternalID(); ok {
		if err := partner.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Partner.external_id": %w`, err)}
		}
	}
	if v, ok := pc.mutation.CreatorID(); ok {
		if err := partner.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Partner.creator_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Partner.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := partner.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Partner.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Partner.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := partner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Partner.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := partner.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Partner.phone": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsNationWide(); !ok {
		return &ValidationError{Name: "is_nation_wide", err: errors.New(`ent: missing required field "Partner.is_nation_wide"`)}
	}
	if _, ok := pc.mutation.CrewCount(); !ok {
		return &ValidationError{Name: "crew_count", err: errors.New(`ent: missing required field "Partner.crew_count"`)}
	}
	if _, ok := pc.mutation.JobCapacity(); !ok {
		return &ValidationError{Name: "job_capacity", err: errors.New(`ent: missing required field "Partner.job_capacity"`)}
	}
	if _, ok := pc.mutation.SetupStepsCompleted(); !ok {
		return &ValidationError{Name: "setup_steps_completed", err: errors.New(`ent: missing required field "Partner.setup_steps_completed"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Partner.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := partner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Partner.status": %w`, err)}
		}
	}
	if v, ok := pc.mutation.EpcStatus(); ok {
		if err := partner.EpcStatusValidator(v); err != nil {
			return &ValidationError{Name: "epc_status", err: fmt.Errorf(`ent: validator failed for field "Partner.epc_status": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := partner.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Partner.id": %w`, err)}
		}
	}
	return nil
}

func (pc *PartnerCreate) sqlSave(ctx context.Context) (*Partner, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Partner.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PartnerCreate) createSpec() (*Partner, *sqlgraph.CreateSpec) {
	var (
		_node = &Partner{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(partner.Table, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(partner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(partner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.ExternalID(); ok {
		_spec.SetField(partner.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(partner.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(partner.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pc.mutation.Website(); ok {
		_spec.SetField(partner.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(partner.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.Latitude(); ok {
		_spec.SetField(partner.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := pc.mutation.Longitude(); ok {
		_spec.SetField(partner.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := pc.mutation.IsNationWide(); ok {
		_spec.SetField(partner.FieldIsNationWide, field.TypeBool, value)
		_node.IsNationWide = value
	}
	if value, ok := pc.mutation.CrewCount(); ok {
		_spec.SetField(partner.FieldCrewCount, field.TypeUint16, value)
		_node.CrewCount = value
	}
	if value, ok := pc.mutation.YearsInBusiness(); ok {
		_spec.SetField(partner.FieldYearsInBusiness, field.TypeInt, value)
		_node.YearsInBusiness = &value
	}
	if value, ok := pc.mutation.JobCapacity(); ok {
		_spec.SetField(partner.FieldJobCapacity, field.TypeUint16, value)
		_node.JobCapacity = value
	}
	if value, ok := pc.mutation.AsphaltLeadT(); ok {
		_spec.SetField(partner.FieldAsphaltLeadT, field.TypeString, value)
		_node.AsphaltLeadT = value
	}
	if value, ok := pc.mutation.MetalLeadT(); ok {
		_spec.SetField(partner.FieldMetalLeadT, field.TypeString, value)
		_node.MetalLeadT = value
	}
	if value, ok := pc.mutation.TileLeadT(); ok {
		_spec.SetField(partner.FieldTileLeadT, field.TypeString, value)
		_node.TileLeadT = value
	}
	if value, ok := pc.mutation.SetupStepsCompleted(); ok {
		_spec.SetField(partner.FieldSetupStepsCompleted, field.TypeUint8, value)
		_node.SetupStepsCompleted = value
	}
	if value, ok := pc.mutation.SalesVolume(); ok {
		_spec.SetField(partner.FieldSalesVolume, field.TypeInt, value)
		_node.SalesVolume = &value
	}
	if value, ok := pc.mutation.DownPayment(); ok {
		_spec.SetField(partner.FieldDownPayment, field.TypeInt, value)
		_node.DownPayment = &value
	}
	if value, ok := pc.mutation.Pif(); ok {
		_spec.SetField(partner.FieldPif, field.TypeInt, value)
		_node.Pif = &value
	}
	if value, ok := pc.mutation.InstallInHouse(); ok {
		_spec.SetField(partner.FieldInstallInHouse, field.TypeBool, value)
		_node.InstallInHouse = &value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(partner.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.EpcStatus(); ok {
		_spec.SetField(partner.FieldEpcStatus, field.TypeEnum, value)
		_node.EpcStatus = value
	}
	if value, ok := pc.mutation.MobileAppSettings(); ok {
		_spec.SetField(partner.FieldMobileAppSettings, field.TypeJSON, value)
		_node.MobileAppSettings = value
	}
	if nodes := pc.mutation.RequestedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EstimateHomeOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RoofingJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.IntegrationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EpcJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.JobRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.JobAssignmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RequestedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AssignedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: pc.config, mutation: newPartnerContactMutation(pc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partner.CreatorTable,
			Columns: []string{partner.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partner.CreatorAPITable,
			Columns: []string{partner.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ServiceStatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ServiceCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ContactUsRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.JobNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FinanceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EpcOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PartnerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Partner.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PartnerCreate) OnConflict(opts ...sql.ConflictOption) *PartnerUpsertOne {
	pc.conflict = opts
	return &PartnerUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Partner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PartnerCreate) OnConflictColumns(columns ...string) *PartnerUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PartnerUpsertOne{
		create: pc,
	}
}

type (
	// PartnerUpsertOne is the builder for "upsert"-ing
	//  one Partner node.
	PartnerUpsertOne struct {
		create *PartnerCreate
	}

	// PartnerUpsert is the "OnConflict" setter.
	PartnerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerUpsert) SetUpdatedAt(v time.Time) *PartnerUpsert {
	u.Set(partner.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateUpdatedAt() *PartnerUpsert {
	u.SetExcluded(partner.FieldUpdatedAt)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *PartnerUpsert) SetExternalID(v string) *PartnerUpsert {
	u.Set(partner.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateExternalID() *PartnerUpsert {
	u.SetExcluded(partner.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_id" field.
func (u *PartnerUpsert) ClearExternalID() *PartnerUpsert {
	u.SetNull(partner.FieldExternalID)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *PartnerUpsert) SetCreatorID(v string) *PartnerUpsert {
	u.Set(partner.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateCreatorID() *PartnerUpsert {
	u.SetExcluded(partner.FieldCreatorID)
	return u
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *PartnerUpsert) ClearCreatorID() *PartnerUpsert {
	u.SetNull(partner.FieldCreatorID)
	return u
}

// SetType sets the "type" field.
func (u *PartnerUpsert) SetType(v enum.Partner) *PartnerUpsert {
	u.Set(partner.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateType() *PartnerUpsert {
	u.SetExcluded(partner.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *PartnerUpsert) SetName(v string) *PartnerUpsert {
	u.Set(partner.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateName() *PartnerUpsert {
	u.SetExcluded(partner.FieldName)
	return u
}

// SetAddress sets the "address" field.
func (u *PartnerUpsert) SetAddress(v string) *PartnerUpsert {
	u.Set(partner.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateAddress() *PartnerUpsert {
	u.SetExcluded(partner.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *PartnerUpsert) ClearAddress() *PartnerUpsert {
	u.SetNull(partner.FieldAddress)
	return u
}

// SetWebsite sets the "website" field.
func (u *PartnerUpsert) SetWebsite(v string) *PartnerUpsert {
	u.Set(partner.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateWebsite() *PartnerUpsert {
	u.SetExcluded(partner.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *PartnerUpsert) ClearWebsite() *PartnerUpsert {
	u.SetNull(partner.FieldWebsite)
	return u
}

// SetPhone sets the "phone" field.
func (u *PartnerUpsert) SetPhone(v string) *PartnerUpsert {
	u.Set(partner.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *PartnerUpsert) UpdatePhone() *PartnerUpsert {
	u.SetExcluded(partner.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *PartnerUpsert) ClearPhone() *PartnerUpsert {
	u.SetNull(partner.FieldPhone)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *PartnerUpsert) SetLatitude(v float64) *PartnerUpsert {
	u.Set(partner.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateLatitude() *PartnerUpsert {
	u.SetExcluded(partner.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *PartnerUpsert) AddLatitude(v float64) *PartnerUpsert {
	u.Add(partner.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *PartnerUpsert) ClearLatitude() *PartnerUpsert {
	u.SetNull(partner.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *PartnerUpsert) SetLongitude(v float64) *PartnerUpsert {
	u.Set(partner.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateLongitude() *PartnerUpsert {
	u.SetExcluded(partner.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *PartnerUpsert) AddLongitude(v float64) *PartnerUpsert {
	u.Add(partner.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *PartnerUpsert) ClearLongitude() *PartnerUpsert {
	u.SetNull(partner.FieldLongitude)
	return u
}

// SetIsNationWide sets the "is_nation_wide" field.
func (u *PartnerUpsert) SetIsNationWide(v bool) *PartnerUpsert {
	u.Set(partner.FieldIsNationWide, v)
	return u
}

// UpdateIsNationWide sets the "is_nation_wide" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateIsNationWide() *PartnerUpsert {
	u.SetExcluded(partner.FieldIsNationWide)
	return u
}

// SetCrewCount sets the "crew_count" field.
func (u *PartnerUpsert) SetCrewCount(v uint16) *PartnerUpsert {
	u.Set(partner.FieldCrewCount, v)
	return u
}

// UpdateCrewCount sets the "crew_count" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateCrewCount() *PartnerUpsert {
	u.SetExcluded(partner.FieldCrewCount)
	return u
}

// AddCrewCount adds v to the "crew_count" field.
func (u *PartnerUpsert) AddCrewCount(v uint16) *PartnerUpsert {
	u.Add(partner.FieldCrewCount, v)
	return u
}

// SetYearsInBusiness sets the "years_in_business" field.
func (u *PartnerUpsert) SetYearsInBusiness(v int) *PartnerUpsert {
	u.Set(partner.FieldYearsInBusiness, v)
	return u
}

// UpdateYearsInBusiness sets the "years_in_business" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateYearsInBusiness() *PartnerUpsert {
	u.SetExcluded(partner.FieldYearsInBusiness)
	return u
}

// AddYearsInBusiness adds v to the "years_in_business" field.
func (u *PartnerUpsert) AddYearsInBusiness(v int) *PartnerUpsert {
	u.Add(partner.FieldYearsInBusiness, v)
	return u
}

// ClearYearsInBusiness clears the value of the "years_in_business" field.
func (u *PartnerUpsert) ClearYearsInBusiness() *PartnerUpsert {
	u.SetNull(partner.FieldYearsInBusiness)
	return u
}

// SetJobCapacity sets the "job_capacity" field.
func (u *PartnerUpsert) SetJobCapacity(v uint16) *PartnerUpsert {
	u.Set(partner.FieldJobCapacity, v)
	return u
}

// UpdateJobCapacity sets the "job_capacity" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateJobCapacity() *PartnerUpsert {
	u.SetExcluded(partner.FieldJobCapacity)
	return u
}

// AddJobCapacity adds v to the "job_capacity" field.
func (u *PartnerUpsert) AddJobCapacity(v uint16) *PartnerUpsert {
	u.Add(partner.FieldJobCapacity, v)
	return u
}

// SetAsphaltLeadT sets the "asphalt_lead_t" field.
func (u *PartnerUpsert) SetAsphaltLeadT(v string) *PartnerUpsert {
	u.Set(partner.FieldAsphaltLeadT, v)
	return u
}

// UpdateAsphaltLeadT sets the "asphalt_lead_t" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateAsphaltLeadT() *PartnerUpsert {
	u.SetExcluded(partner.FieldAsphaltLeadT)
	return u
}

// ClearAsphaltLeadT clears the value of the "asphalt_lead_t" field.
func (u *PartnerUpsert) ClearAsphaltLeadT() *PartnerUpsert {
	u.SetNull(partner.FieldAsphaltLeadT)
	return u
}

// SetMetalLeadT sets the "metal_lead_t" field.
func (u *PartnerUpsert) SetMetalLeadT(v string) *PartnerUpsert {
	u.Set(partner.FieldMetalLeadT, v)
	return u
}

// UpdateMetalLeadT sets the "metal_lead_t" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateMetalLeadT() *PartnerUpsert {
	u.SetExcluded(partner.FieldMetalLeadT)
	return u
}

// ClearMetalLeadT clears the value of the "metal_lead_t" field.
func (u *PartnerUpsert) ClearMetalLeadT() *PartnerUpsert {
	u.SetNull(partner.FieldMetalLeadT)
	return u
}

// SetTileLeadT sets the "tile_lead_t" field.
func (u *PartnerUpsert) SetTileLeadT(v string) *PartnerUpsert {
	u.Set(partner.FieldTileLeadT, v)
	return u
}

// UpdateTileLeadT sets the "tile_lead_t" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateTileLeadT() *PartnerUpsert {
	u.SetExcluded(partner.FieldTileLeadT)
	return u
}

// ClearTileLeadT clears the value of the "tile_lead_t" field.
func (u *PartnerUpsert) ClearTileLeadT() *PartnerUpsert {
	u.SetNull(partner.FieldTileLeadT)
	return u
}

// SetSetupStepsCompleted sets the "setup_steps_completed" field.
func (u *PartnerUpsert) SetSetupStepsCompleted(v uint8) *PartnerUpsert {
	u.Set(partner.FieldSetupStepsCompleted, v)
	return u
}

// UpdateSetupStepsCompleted sets the "setup_steps_completed" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateSetupStepsCompleted() *PartnerUpsert {
	u.SetExcluded(partner.FieldSetupStepsCompleted)
	return u
}

// AddSetupStepsCompleted adds v to the "setup_steps_completed" field.
func (u *PartnerUpsert) AddSetupStepsCompleted(v uint8) *PartnerUpsert {
	u.Add(partner.FieldSetupStepsCompleted, v)
	return u
}

// SetSalesVolume sets the "sales_volume" field.
func (u *PartnerUpsert) SetSalesVolume(v int) *PartnerUpsert {
	u.Set(partner.FieldSalesVolume, v)
	return u
}

// UpdateSalesVolume sets the "sales_volume" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateSalesVolume() *PartnerUpsert {
	u.SetExcluded(partner.FieldSalesVolume)
	return u
}

// AddSalesVolume adds v to the "sales_volume" field.
func (u *PartnerUpsert) AddSalesVolume(v int) *PartnerUpsert {
	u.Add(partner.FieldSalesVolume, v)
	return u
}

// ClearSalesVolume clears the value of the "sales_volume" field.
func (u *PartnerUpsert) ClearSalesVolume() *PartnerUpsert {
	u.SetNull(partner.FieldSalesVolume)
	return u
}

// SetDownPayment sets the "down_payment" field.
func (u *PartnerUpsert) SetDownPayment(v int) *PartnerUpsert {
	u.Set(partner.FieldDownPayment, v)
	return u
}

// UpdateDownPayment sets the "down_payment" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateDownPayment() *PartnerUpsert {
	u.SetExcluded(partner.FieldDownPayment)
	return u
}

// AddDownPayment adds v to the "down_payment" field.
func (u *PartnerUpsert) AddDownPayment(v int) *PartnerUpsert {
	u.Add(partner.FieldDownPayment, v)
	return u
}

// ClearDownPayment clears the value of the "down_payment" field.
func (u *PartnerUpsert) ClearDownPayment() *PartnerUpsert {
	u.SetNull(partner.FieldDownPayment)
	return u
}

// SetPif sets the "pif" field.
func (u *PartnerUpsert) SetPif(v int) *PartnerUpsert {
	u.Set(partner.FieldPif, v)
	return u
}

// UpdatePif sets the "pif" field to the value that was provided on create.
func (u *PartnerUpsert) UpdatePif() *PartnerUpsert {
	u.SetExcluded(partner.FieldPif)
	return u
}

// AddPif adds v to the "pif" field.
func (u *PartnerUpsert) AddPif(v int) *PartnerUpsert {
	u.Add(partner.FieldPif, v)
	return u
}

// ClearPif clears the value of the "pif" field.
func (u *PartnerUpsert) ClearPif() *PartnerUpsert {
	u.SetNull(partner.FieldPif)
	return u
}

// SetInstallInHouse sets the "install_in_house" field.
func (u *PartnerUpsert) SetInstallInHouse(v bool) *PartnerUpsert {
	u.Set(partner.FieldInstallInHouse, v)
	return u
}

// UpdateInstallInHouse sets the "install_in_house" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateInstallInHouse() *PartnerUpsert {
	u.SetExcluded(partner.FieldInstallInHouse)
	return u
}

// ClearInstallInHouse clears the value of the "install_in_house" field.
func (u *PartnerUpsert) ClearInstallInHouse() *PartnerUpsert {
	u.SetNull(partner.FieldInstallInHouse)
	return u
}

// SetStatus sets the "status" field.
func (u *PartnerUpsert) SetStatus(v enum.PartnerStatus) *PartnerUpsert {
	u.Set(partner.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateStatus() *PartnerUpsert {
	u.SetExcluded(partner.FieldStatus)
	return u
}

// SetEpcStatus sets the "epc_status" field.
func (u *PartnerUpsert) SetEpcStatus(v enum.EPCStatus) *PartnerUpsert {
	u.Set(partner.FieldEpcStatus, v)
	return u
}

// UpdateEpcStatus sets the "epc_status" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateEpcStatus() *PartnerUpsert {
	u.SetExcluded(partner.FieldEpcStatus)
	return u
}

// ClearEpcStatus clears the value of the "epc_status" field.
func (u *PartnerUpsert) ClearEpcStatus() *PartnerUpsert {
	u.SetNull(partner.FieldEpcStatus)
	return u
}

// SetMobileAppSettings sets the "mobile_app_settings" field.
func (u *PartnerUpsert) SetMobileAppSettings(v model.MobileAppSettings) *PartnerUpsert {
	u.Set(partner.FieldMobileAppSettings, v)
	return u
}

// UpdateMobileAppSettings sets the "mobile_app_settings" field to the value that was provided on create.
func (u *PartnerUpsert) UpdateMobileAppSettings() *PartnerUpsert {
	u.SetExcluded(partner.FieldMobileAppSettings)
	return u
}

// ClearMobileAppSettings clears the value of the "mobile_app_settings" field.
func (u *PartnerUpsert) ClearMobileAppSettings() *PartnerUpsert {
	u.SetNull(partner.FieldMobileAppSettings)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Partner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partner.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerUpsertOne) UpdateNewValues() *PartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(partner.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partner.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Partner.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnerUpsertOne) Ignore() *PartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerUpsertOne) DoNothing() *PartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerCreate.OnConflict
// documentation for more info.
func (u *PartnerUpsertOne) Update(set func(*PartnerUpsert)) *PartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerUpsertOne) SetUpdatedAt(v time.Time) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateUpdatedAt() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExternalID sets the "external_id" field.
func (u *PartnerUpsertOne) SetExternalID(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateExternalID() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *PartnerUpsertOne) ClearExternalID() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearExternalID()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *PartnerUpsertOne) SetCreatorID(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateCreatorID() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateCreatorID()
	})
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *PartnerUpsertOne) ClearCreatorID() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearCreatorID()
	})
}

// SetType sets the "type" field.
func (u *PartnerUpsertOne) SetType(v enum.Partner) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateType() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PartnerUpsertOne) SetName(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateName() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateName()
	})
}

// SetAddress sets the "address" field.
func (u *PartnerUpsertOne) SetAddress(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateAddress() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *PartnerUpsertOne) ClearAddress() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearAddress()
	})
}

// SetWebsite sets the "website" field.
func (u *PartnerUpsertOne) SetWebsite(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateWebsite() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *PartnerUpsertOne) ClearWebsite() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearWebsite()
	})
}

// SetPhone sets the "phone" field.
func (u *PartnerUpsertOne) SetPhone(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdatePhone() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *PartnerUpsertOne) ClearPhone() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearPhone()
	})
}

// SetLatitude sets the "latitude" field.
func (u *PartnerUpsertOne) SetLatitude(v float64) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *PartnerUpsertOne) AddLatitude(v float64) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateLatitude() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *PartnerUpsertOne) ClearLatitude() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *PartnerUpsertOne) SetLongitude(v float64) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *PartnerUpsertOne) AddLongitude(v float64) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateLongitude() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *PartnerUpsertOne) ClearLongitude() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearLongitude()
	})
}

// SetIsNationWide sets the "is_nation_wide" field.
func (u *PartnerUpsertOne) SetIsNationWide(v bool) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetIsNationWide(v)
	})
}

// UpdateIsNationWide sets the "is_nation_wide" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateIsNationWide() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateIsNationWide()
	})
}

// SetCrewCount sets the "crew_count" field.
func (u *PartnerUpsertOne) SetCrewCount(v uint16) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetCrewCount(v)
	})
}

// AddCrewCount adds v to the "crew_count" field.
func (u *PartnerUpsertOne) AddCrewCount(v uint16) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddCrewCount(v)
	})
}

// UpdateCrewCount sets the "crew_count" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateCrewCount() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateCrewCount()
	})
}

// SetYearsInBusiness sets the "years_in_business" field.
func (u *PartnerUpsertOne) SetYearsInBusiness(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetYearsInBusiness(v)
	})
}

// AddYearsInBusiness adds v to the "years_in_business" field.
func (u *PartnerUpsertOne) AddYearsInBusiness(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddYearsInBusiness(v)
	})
}

// UpdateYearsInBusiness sets the "years_in_business" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateYearsInBusiness() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateYearsInBusiness()
	})
}

// ClearYearsInBusiness clears the value of the "years_in_business" field.
func (u *PartnerUpsertOne) ClearYearsInBusiness() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearYearsInBusiness()
	})
}

// SetJobCapacity sets the "job_capacity" field.
func (u *PartnerUpsertOne) SetJobCapacity(v uint16) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetJobCapacity(v)
	})
}

// AddJobCapacity adds v to the "job_capacity" field.
func (u *PartnerUpsertOne) AddJobCapacity(v uint16) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddJobCapacity(v)
	})
}

// UpdateJobCapacity sets the "job_capacity" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateJobCapacity() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateJobCapacity()
	})
}

// SetAsphaltLeadT sets the "asphalt_lead_t" field.
func (u *PartnerUpsertOne) SetAsphaltLeadT(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetAsphaltLeadT(v)
	})
}

// UpdateAsphaltLeadT sets the "asphalt_lead_t" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateAsphaltLeadT() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateAsphaltLeadT()
	})
}

// ClearAsphaltLeadT clears the value of the "asphalt_lead_t" field.
func (u *PartnerUpsertOne) ClearAsphaltLeadT() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearAsphaltLeadT()
	})
}

// SetMetalLeadT sets the "metal_lead_t" field.
func (u *PartnerUpsertOne) SetMetalLeadT(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetMetalLeadT(v)
	})
}

// UpdateMetalLeadT sets the "metal_lead_t" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateMetalLeadT() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateMetalLeadT()
	})
}

// ClearMetalLeadT clears the value of the "metal_lead_t" field.
func (u *PartnerUpsertOne) ClearMetalLeadT() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearMetalLeadT()
	})
}

// SetTileLeadT sets the "tile_lead_t" field.
func (u *PartnerUpsertOne) SetTileLeadT(v string) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetTileLeadT(v)
	})
}

// UpdateTileLeadT sets the "tile_lead_t" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateTileLeadT() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateTileLeadT()
	})
}

// ClearTileLeadT clears the value of the "tile_lead_t" field.
func (u *PartnerUpsertOne) ClearTileLeadT() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearTileLeadT()
	})
}

// SetSetupStepsCompleted sets the "setup_steps_completed" field.
func (u *PartnerUpsertOne) SetSetupStepsCompleted(v uint8) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetSetupStepsCompleted(v)
	})
}

// AddSetupStepsCompleted adds v to the "setup_steps_completed" field.
func (u *PartnerUpsertOne) AddSetupStepsCompleted(v uint8) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddSetupStepsCompleted(v)
	})
}

// UpdateSetupStepsCompleted sets the "setup_steps_completed" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateSetupStepsCompleted() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateSetupStepsCompleted()
	})
}

// SetSalesVolume sets the "sales_volume" field.
func (u *PartnerUpsertOne) SetSalesVolume(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetSalesVolume(v)
	})
}

// AddSalesVolume adds v to the "sales_volume" field.
func (u *PartnerUpsertOne) AddSalesVolume(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddSalesVolume(v)
	})
}

// UpdateSalesVolume sets the "sales_volume" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateSalesVolume() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateSalesVolume()
	})
}

// ClearSalesVolume clears the value of the "sales_volume" field.
func (u *PartnerUpsertOne) ClearSalesVolume() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearSalesVolume()
	})
}

// SetDownPayment sets the "down_payment" field.
func (u *PartnerUpsertOne) SetDownPayment(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetDownPayment(v)
	})
}

// AddDownPayment adds v to the "down_payment" field.
func (u *PartnerUpsertOne) AddDownPayment(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddDownPayment(v)
	})
}

// UpdateDownPayment sets the "down_payment" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateDownPayment() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateDownPayment()
	})
}

// ClearDownPayment clears the value of the "down_payment" field.
func (u *PartnerUpsertOne) ClearDownPayment() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearDownPayment()
	})
}

// SetPif sets the "pif" field.
func (u *PartnerUpsertOne) SetPif(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetPif(v)
	})
}

// AddPif adds v to the "pif" field.
func (u *PartnerUpsertOne) AddPif(v int) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.AddPif(v)
	})
}

// UpdatePif sets the "pif" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdatePif() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdatePif()
	})
}

// ClearPif clears the value of the "pif" field.
func (u *PartnerUpsertOne) ClearPif() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearPif()
	})
}

// SetInstallInHouse sets the "install_in_house" field.
func (u *PartnerUpsertOne) SetInstallInHouse(v bool) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetInstallInHouse(v)
	})
}

// UpdateInstallInHouse sets the "install_in_house" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateInstallInHouse() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateInstallInHouse()
	})
}

// ClearInstallInHouse clears the value of the "install_in_house" field.
func (u *PartnerUpsertOne) ClearInstallInHouse() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearInstallInHouse()
	})
}

// SetStatus sets the "status" field.
func (u *PartnerUpsertOne) SetStatus(v enum.PartnerStatus) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateStatus() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateStatus()
	})
}

// SetEpcStatus sets the "epc_status" field.
func (u *PartnerUpsertOne) SetEpcStatus(v enum.EPCStatus) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetEpcStatus(v)
	})
}

// UpdateEpcStatus sets the "epc_status" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateEpcStatus() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateEpcStatus()
	})
}

// ClearEpcStatus clears the value of the "epc_status" field.
func (u *PartnerUpsertOne) ClearEpcStatus() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearEpcStatus()
	})
}

// SetMobileAppSettings sets the "mobile_app_settings" field.
func (u *PartnerUpsertOne) SetMobileAppSettings(v model.MobileAppSettings) *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.SetMobileAppSettings(v)
	})
}

// UpdateMobileAppSettings sets the "mobile_app_settings" field to the value that was provided on create.
func (u *PartnerUpsertOne) UpdateMobileAppSettings() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateMobileAppSettings()
	})
}

// ClearMobileAppSettings clears the value of the "mobile_app_settings" field.
func (u *PartnerUpsertOne) ClearMobileAppSettings() *PartnerUpsertOne {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearMobileAppSettings()
	})
}

// Exec executes the query.
func (u *PartnerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PartnerUpsertOne.ID is not supported by MySQL driver. Use PartnerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnerCreateBulk is the builder for creating many Partner entities in bulk.
type PartnerCreateBulk struct {
	config
	builders []*PartnerCreate
	conflict []sql.ConflictOption
}

// Save creates the Partner entities in the database.
func (pcb *PartnerCreateBulk) Save(ctx context.Context) ([]*Partner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Partner, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartnerCreateBulk) SaveX(ctx context.Context) []*Partner {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PartnerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PartnerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Partner.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PartnerCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnerUpsertBulk {
	pcb.conflict = opts
	return &PartnerUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Partner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PartnerCreateBulk) OnConflictColumns(columns ...string) *PartnerUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PartnerUpsertBulk{
		create: pcb,
	}
}

// PartnerUpsertBulk is the builder for "upsert"-ing
// a bulk of Partner nodes.
type PartnerUpsertBulk struct {
	create *PartnerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Partner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partner.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerUpsertBulk) UpdateNewValues() *PartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(partner.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partner.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Partner.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnerUpsertBulk) Ignore() *PartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerUpsertBulk) DoNothing() *PartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerCreateBulk.OnConflict
// documentation for more info.
func (u *PartnerUpsertBulk) Update(set func(*PartnerUpsert)) *PartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerUpsertBulk) SetUpdatedAt(v time.Time) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateUpdatedAt() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExternalID sets the "external_id" field.
func (u *PartnerUpsertBulk) SetExternalID(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateExternalID() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *PartnerUpsertBulk) ClearExternalID() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearExternalID()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *PartnerUpsertBulk) SetCreatorID(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateCreatorID() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateCreatorID()
	})
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *PartnerUpsertBulk) ClearCreatorID() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearCreatorID()
	})
}

// SetType sets the "type" field.
func (u *PartnerUpsertBulk) SetType(v enum.Partner) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateType() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PartnerUpsertBulk) SetName(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateName() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateName()
	})
}

// SetAddress sets the "address" field.
func (u *PartnerUpsertBulk) SetAddress(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateAddress() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *PartnerUpsertBulk) ClearAddress() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearAddress()
	})
}

// SetWebsite sets the "website" field.
func (u *PartnerUpsertBulk) SetWebsite(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateWebsite() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *PartnerUpsertBulk) ClearWebsite() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearWebsite()
	})
}

// SetPhone sets the "phone" field.
func (u *PartnerUpsertBulk) SetPhone(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdatePhone() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *PartnerUpsertBulk) ClearPhone() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearPhone()
	})
}

// SetLatitude sets the "latitude" field.
func (u *PartnerUpsertBulk) SetLatitude(v float64) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *PartnerUpsertBulk) AddLatitude(v float64) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateLatitude() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *PartnerUpsertBulk) ClearLatitude() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *PartnerUpsertBulk) SetLongitude(v float64) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *PartnerUpsertBulk) AddLongitude(v float64) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateLongitude() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *PartnerUpsertBulk) ClearLongitude() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearLongitude()
	})
}

// SetIsNationWide sets the "is_nation_wide" field.
func (u *PartnerUpsertBulk) SetIsNationWide(v bool) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetIsNationWide(v)
	})
}

// UpdateIsNationWide sets the "is_nation_wide" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateIsNationWide() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateIsNationWide()
	})
}

// SetCrewCount sets the "crew_count" field.
func (u *PartnerUpsertBulk) SetCrewCount(v uint16) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetCrewCount(v)
	})
}

// AddCrewCount adds v to the "crew_count" field.
func (u *PartnerUpsertBulk) AddCrewCount(v uint16) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddCrewCount(v)
	})
}

// UpdateCrewCount sets the "crew_count" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateCrewCount() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateCrewCount()
	})
}

// SetYearsInBusiness sets the "years_in_business" field.
func (u *PartnerUpsertBulk) SetYearsInBusiness(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetYearsInBusiness(v)
	})
}

// AddYearsInBusiness adds v to the "years_in_business" field.
func (u *PartnerUpsertBulk) AddYearsInBusiness(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddYearsInBusiness(v)
	})
}

// UpdateYearsInBusiness sets the "years_in_business" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateYearsInBusiness() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateYearsInBusiness()
	})
}

// ClearYearsInBusiness clears the value of the "years_in_business" field.
func (u *PartnerUpsertBulk) ClearYearsInBusiness() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearYearsInBusiness()
	})
}

// SetJobCapacity sets the "job_capacity" field.
func (u *PartnerUpsertBulk) SetJobCapacity(v uint16) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetJobCapacity(v)
	})
}

// AddJobCapacity adds v to the "job_capacity" field.
func (u *PartnerUpsertBulk) AddJobCapacity(v uint16) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddJobCapacity(v)
	})
}

// UpdateJobCapacity sets the "job_capacity" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateJobCapacity() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateJobCapacity()
	})
}

// SetAsphaltLeadT sets the "asphalt_lead_t" field.
func (u *PartnerUpsertBulk) SetAsphaltLeadT(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetAsphaltLeadT(v)
	})
}

// UpdateAsphaltLeadT sets the "asphalt_lead_t" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateAsphaltLeadT() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateAsphaltLeadT()
	})
}

// ClearAsphaltLeadT clears the value of the "asphalt_lead_t" field.
func (u *PartnerUpsertBulk) ClearAsphaltLeadT() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearAsphaltLeadT()
	})
}

// SetMetalLeadT sets the "metal_lead_t" field.
func (u *PartnerUpsertBulk) SetMetalLeadT(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetMetalLeadT(v)
	})
}

// UpdateMetalLeadT sets the "metal_lead_t" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateMetalLeadT() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateMetalLeadT()
	})
}

// ClearMetalLeadT clears the value of the "metal_lead_t" field.
func (u *PartnerUpsertBulk) ClearMetalLeadT() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearMetalLeadT()
	})
}

// SetTileLeadT sets the "tile_lead_t" field.
func (u *PartnerUpsertBulk) SetTileLeadT(v string) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetTileLeadT(v)
	})
}

// UpdateTileLeadT sets the "tile_lead_t" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateTileLeadT() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateTileLeadT()
	})
}

// ClearTileLeadT clears the value of the "tile_lead_t" field.
func (u *PartnerUpsertBulk) ClearTileLeadT() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearTileLeadT()
	})
}

// SetSetupStepsCompleted sets the "setup_steps_completed" field.
func (u *PartnerUpsertBulk) SetSetupStepsCompleted(v uint8) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetSetupStepsCompleted(v)
	})
}

// AddSetupStepsCompleted adds v to the "setup_steps_completed" field.
func (u *PartnerUpsertBulk) AddSetupStepsCompleted(v uint8) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddSetupStepsCompleted(v)
	})
}

// UpdateSetupStepsCompleted sets the "setup_steps_completed" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateSetupStepsCompleted() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateSetupStepsCompleted()
	})
}

// SetSalesVolume sets the "sales_volume" field.
func (u *PartnerUpsertBulk) SetSalesVolume(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetSalesVolume(v)
	})
}

// AddSalesVolume adds v to the "sales_volume" field.
func (u *PartnerUpsertBulk) AddSalesVolume(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddSalesVolume(v)
	})
}

// UpdateSalesVolume sets the "sales_volume" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateSalesVolume() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateSalesVolume()
	})
}

// ClearSalesVolume clears the value of the "sales_volume" field.
func (u *PartnerUpsertBulk) ClearSalesVolume() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearSalesVolume()
	})
}

// SetDownPayment sets the "down_payment" field.
func (u *PartnerUpsertBulk) SetDownPayment(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetDownPayment(v)
	})
}

// AddDownPayment adds v to the "down_payment" field.
func (u *PartnerUpsertBulk) AddDownPayment(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddDownPayment(v)
	})
}

// UpdateDownPayment sets the "down_payment" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateDownPayment() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateDownPayment()
	})
}

// ClearDownPayment clears the value of the "down_payment" field.
func (u *PartnerUpsertBulk) ClearDownPayment() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearDownPayment()
	})
}

// SetPif sets the "pif" field.
func (u *PartnerUpsertBulk) SetPif(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetPif(v)
	})
}

// AddPif adds v to the "pif" field.
func (u *PartnerUpsertBulk) AddPif(v int) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.AddPif(v)
	})
}

// UpdatePif sets the "pif" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdatePif() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdatePif()
	})
}

// ClearPif clears the value of the "pif" field.
func (u *PartnerUpsertBulk) ClearPif() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearPif()
	})
}

// SetInstallInHouse sets the "install_in_house" field.
func (u *PartnerUpsertBulk) SetInstallInHouse(v bool) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetInstallInHouse(v)
	})
}

// UpdateInstallInHouse sets the "install_in_house" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateInstallInHouse() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateInstallInHouse()
	})
}

// ClearInstallInHouse clears the value of the "install_in_house" field.
func (u *PartnerUpsertBulk) ClearInstallInHouse() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearInstallInHouse()
	})
}

// SetStatus sets the "status" field.
func (u *PartnerUpsertBulk) SetStatus(v enum.PartnerStatus) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateStatus() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateStatus()
	})
}

// SetEpcStatus sets the "epc_status" field.
func (u *PartnerUpsertBulk) SetEpcStatus(v enum.EPCStatus) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetEpcStatus(v)
	})
}

// UpdateEpcStatus sets the "epc_status" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateEpcStatus() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateEpcStatus()
	})
}

// ClearEpcStatus clears the value of the "epc_status" field.
func (u *PartnerUpsertBulk) ClearEpcStatus() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearEpcStatus()
	})
}

// SetMobileAppSettings sets the "mobile_app_settings" field.
func (u *PartnerUpsertBulk) SetMobileAppSettings(v model.MobileAppSettings) *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.SetMobileAppSettings(v)
	})
}

// UpdateMobileAppSettings sets the "mobile_app_settings" field to the value that was provided on create.
func (u *PartnerUpsertBulk) UpdateMobileAppSettings() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.UpdateMobileAppSettings()
	})
}

// ClearMobileAppSettings clears the value of the "mobile_app_settings" field.
func (u *PartnerUpsertBulk) ClearMobileAppSettings() *PartnerUpsertBulk {
	return u.Update(func(s *PartnerUpsert) {
		s.ClearMobileAppSettings()
	})
}

// Exec executes the query.
func (u *PartnerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

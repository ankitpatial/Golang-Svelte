// Code generated by ent, DO NOT EDIT.

package partnerservicestate

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldUpdatedAt, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldCountry, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldState, v))
}

// LicenseNo applies equality check predicate on the "license_no" field. It's identical to LicenseNoEQ.
func LicenseNo(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldLicenseNo, v))
}

// LicenseExpDate applies equality check predicate on the "license_exp_date" field. It's identical to LicenseExpDateEQ.
func LicenseExpDate(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldLicenseExpDate, v))
}

// ProofDocID applies equality check predicate on the "proof_doc_id" field. It's identical to ProofDocIDEQ.
func ProofDocID(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldProofDocID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldUpdatedAt, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContainsFold(FieldCountry, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContainsFold(FieldState, v))
}

// LicenseNoEQ applies the EQ predicate on the "license_no" field.
func LicenseNoEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldLicenseNo, v))
}

// LicenseNoNEQ applies the NEQ predicate on the "license_no" field.
func LicenseNoNEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldLicenseNo, v))
}

// LicenseNoIn applies the In predicate on the "license_no" field.
func LicenseNoIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldLicenseNo, vs...))
}

// LicenseNoNotIn applies the NotIn predicate on the "license_no" field.
func LicenseNoNotIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldLicenseNo, vs...))
}

// LicenseNoGT applies the GT predicate on the "license_no" field.
func LicenseNoGT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldLicenseNo, v))
}

// LicenseNoGTE applies the GTE predicate on the "license_no" field.
func LicenseNoGTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldLicenseNo, v))
}

// LicenseNoLT applies the LT predicate on the "license_no" field.
func LicenseNoLT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldLicenseNo, v))
}

// LicenseNoLTE applies the LTE predicate on the "license_no" field.
func LicenseNoLTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldLicenseNo, v))
}

// LicenseNoContains applies the Contains predicate on the "license_no" field.
func LicenseNoContains(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContains(FieldLicenseNo, v))
}

// LicenseNoHasPrefix applies the HasPrefix predicate on the "license_no" field.
func LicenseNoHasPrefix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasPrefix(FieldLicenseNo, v))
}

// LicenseNoHasSuffix applies the HasSuffix predicate on the "license_no" field.
func LicenseNoHasSuffix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasSuffix(FieldLicenseNo, v))
}

// LicenseNoIsNil applies the IsNil predicate on the "license_no" field.
func LicenseNoIsNil() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIsNull(FieldLicenseNo))
}

// LicenseNoNotNil applies the NotNil predicate on the "license_no" field.
func LicenseNoNotNil() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotNull(FieldLicenseNo))
}

// LicenseNoEqualFold applies the EqualFold predicate on the "license_no" field.
func LicenseNoEqualFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEqualFold(FieldLicenseNo, v))
}

// LicenseNoContainsFold applies the ContainsFold predicate on the "license_no" field.
func LicenseNoContainsFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContainsFold(FieldLicenseNo, v))
}

// LicenseExpDateEQ applies the EQ predicate on the "license_exp_date" field.
func LicenseExpDateEQ(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldLicenseExpDate, v))
}

// LicenseExpDateNEQ applies the NEQ predicate on the "license_exp_date" field.
func LicenseExpDateNEQ(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldLicenseExpDate, v))
}

// LicenseExpDateIn applies the In predicate on the "license_exp_date" field.
func LicenseExpDateIn(vs ...time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldLicenseExpDate, vs...))
}

// LicenseExpDateNotIn applies the NotIn predicate on the "license_exp_date" field.
func LicenseExpDateNotIn(vs ...time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldLicenseExpDate, vs...))
}

// LicenseExpDateGT applies the GT predicate on the "license_exp_date" field.
func LicenseExpDateGT(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldLicenseExpDate, v))
}

// LicenseExpDateGTE applies the GTE predicate on the "license_exp_date" field.
func LicenseExpDateGTE(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldLicenseExpDate, v))
}

// LicenseExpDateLT applies the LT predicate on the "license_exp_date" field.
func LicenseExpDateLT(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldLicenseExpDate, v))
}

// LicenseExpDateLTE applies the LTE predicate on the "license_exp_date" field.
func LicenseExpDateLTE(v time.Time) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldLicenseExpDate, v))
}

// LicenseExpDateIsNil applies the IsNil predicate on the "license_exp_date" field.
func LicenseExpDateIsNil() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIsNull(FieldLicenseExpDate))
}

// LicenseExpDateNotNil applies the NotNil predicate on the "license_exp_date" field.
func LicenseExpDateNotNil() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotNull(FieldLicenseExpDate))
}

// ProofDocIDEQ applies the EQ predicate on the "proof_doc_id" field.
func ProofDocIDEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEQ(FieldProofDocID, v))
}

// ProofDocIDNEQ applies the NEQ predicate on the "proof_doc_id" field.
func ProofDocIDNEQ(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNEQ(FieldProofDocID, v))
}

// ProofDocIDIn applies the In predicate on the "proof_doc_id" field.
func ProofDocIDIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIn(FieldProofDocID, vs...))
}

// ProofDocIDNotIn applies the NotIn predicate on the "proof_doc_id" field.
func ProofDocIDNotIn(vs ...string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotIn(FieldProofDocID, vs...))
}

// ProofDocIDGT applies the GT predicate on the "proof_doc_id" field.
func ProofDocIDGT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGT(FieldProofDocID, v))
}

// ProofDocIDGTE applies the GTE predicate on the "proof_doc_id" field.
func ProofDocIDGTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldGTE(FieldProofDocID, v))
}

// ProofDocIDLT applies the LT predicate on the "proof_doc_id" field.
func ProofDocIDLT(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLT(FieldProofDocID, v))
}

// ProofDocIDLTE applies the LTE predicate on the "proof_doc_id" field.
func ProofDocIDLTE(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldLTE(FieldProofDocID, v))
}

// ProofDocIDContains applies the Contains predicate on the "proof_doc_id" field.
func ProofDocIDContains(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContains(FieldProofDocID, v))
}

// ProofDocIDHasPrefix applies the HasPrefix predicate on the "proof_doc_id" field.
func ProofDocIDHasPrefix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasPrefix(FieldProofDocID, v))
}

// ProofDocIDHasSuffix applies the HasSuffix predicate on the "proof_doc_id" field.
func ProofDocIDHasSuffix(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldHasSuffix(FieldProofDocID, v))
}

// ProofDocIDIsNil applies the IsNil predicate on the "proof_doc_id" field.
func ProofDocIDIsNil() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldIsNull(FieldProofDocID))
}

// ProofDocIDNotNil applies the NotNil predicate on the "proof_doc_id" field.
func ProofDocIDNotNil() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldNotNull(FieldProofDocID))
}

// ProofDocIDEqualFold applies the EqualFold predicate on the "proof_doc_id" field.
func ProofDocIDEqualFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldEqualFold(FieldProofDocID, v))
}

// ProofDocIDContainsFold applies the ContainsFold predicate on the "proof_doc_id" field.
func ProofDocIDContainsFold(v string) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(sql.FieldContainsFold(FieldProofDocID, v))
}

// HasPartner applies the HasEdge predicate on the "partner" edge.
func HasPartner() predicate.PartnerServiceState {
	return predicate.PartnerServiceState(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerWith applies the HasEdge predicate on the "partner" edge with a given conditions (other predicates).
func HasPartnerWith(preds ...predicate.Partner) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(func(s *sql.Selector) {
		step := newPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartnerServiceState) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartnerServiceState) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartnerServiceState) predicate.PartnerServiceState {
	return predicate.PartnerServiceState(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/ent/schema"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"roofix/pkg/model"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EstimateUpdate is the builder for updating Estimate entities.
type EstimateUpdate struct {
	config
	hooks     []Hook
	mutation  *EstimateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EstimateUpdate builder.
func (eu *EstimateUpdate) Where(ps ...predicate.Estimate) *EstimateUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EstimateUpdate) SetUpdatedAt(t time.Time) *EstimateUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetRegionID sets the "region_id" field.
func (eu *EstimateUpdate) SetRegionID(u uint8) *EstimateUpdate {
	eu.mutation.ResetRegionID()
	eu.mutation.SetRegionID(u)
	return eu
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableRegionID(u *uint8) *EstimateUpdate {
	if u != nil {
		eu.SetRegionID(*u)
	}
	return eu
}

// AddRegionID adds u to the "region_id" field.
func (eu *EstimateUpdate) AddRegionID(u int8) *EstimateUpdate {
	eu.mutation.AddRegionID(u)
	return eu
}

// SetStatus sets the "status" field.
func (eu *EstimateUpdate) SetStatus(es enum.EstimateStatus) *EstimateUpdate {
	eu.mutation.SetStatus(es)
	return eu
}

// SetCurrentMaterial sets the "current_material" field.
func (eu *EstimateUpdate) SetCurrentMaterial(s string) *EstimateUpdate {
	eu.mutation.SetCurrentMaterial(s)
	return eu
}

// SetNillableCurrentMaterial sets the "current_material" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableCurrentMaterial(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetCurrentMaterial(*s)
	}
	return eu
}

// ClearCurrentMaterial clears the value of the "current_material" field.
func (eu *EstimateUpdate) ClearCurrentMaterial() *EstimateUpdate {
	eu.mutation.ClearCurrentMaterial()
	return eu
}

// SetNewRoofingMaterial sets the "new_roofing_material" field.
func (eu *EstimateUpdate) SetNewRoofingMaterial(s string) *EstimateUpdate {
	eu.mutation.SetNewRoofingMaterial(s)
	return eu
}

// SetNillableNewRoofingMaterial sets the "new_roofing_material" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableNewRoofingMaterial(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetNewRoofingMaterial(*s)
	}
	return eu
}

// ClearNewRoofingMaterial clears the value of the "new_roofing_material" field.
func (eu *EstimateUpdate) ClearNewRoofingMaterial() *EstimateUpdate {
	eu.mutation.ClearNewRoofingMaterial()
	return eu
}

// SetLowSlope sets the "lowSlope" field.
func (eu *EstimateUpdate) SetLowSlope(b bool) *EstimateUpdate {
	eu.mutation.SetLowSlope(b)
	return eu
}

// SetNillableLowSlope sets the "lowSlope" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableLowSlope(b *bool) *EstimateUpdate {
	if b != nil {
		eu.SetLowSlope(*b)
	}
	return eu
}

// SetCurrentMaterialLowSlope sets the "current_material_low_slope" field.
func (eu *EstimateUpdate) SetCurrentMaterialLowSlope(s string) *EstimateUpdate {
	eu.mutation.SetCurrentMaterialLowSlope(s)
	return eu
}

// SetNillableCurrentMaterialLowSlope sets the "current_material_low_slope" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableCurrentMaterialLowSlope(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetCurrentMaterialLowSlope(*s)
	}
	return eu
}

// ClearCurrentMaterialLowSlope clears the value of the "current_material_low_slope" field.
func (eu *EstimateUpdate) ClearCurrentMaterialLowSlope() *EstimateUpdate {
	eu.mutation.ClearCurrentMaterialLowSlope()
	return eu
}

// SetNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field.
func (eu *EstimateUpdate) SetNewRoofingMaterialLowSlope(s string) *EstimateUpdate {
	eu.mutation.SetNewRoofingMaterialLowSlope(s)
	return eu
}

// SetNillableNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableNewRoofingMaterialLowSlope(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetNewRoofingMaterialLowSlope(*s)
	}
	return eu
}

// ClearNewRoofingMaterialLowSlope clears the value of the "new_roofing_material_low_slope" field.
func (eu *EstimateUpdate) ClearNewRoofingMaterialLowSlope() *EstimateUpdate {
	eu.mutation.ClearNewRoofingMaterialLowSlope()
	return eu
}

// SetRedeck sets the "redeck" field.
func (eu *EstimateUpdate) SetRedeck(b bool) *EstimateUpdate {
	eu.mutation.SetRedeck(b)
	return eu
}

// SetNillableRedeck sets the "redeck" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableRedeck(b *bool) *EstimateUpdate {
	if b != nil {
		eu.SetRedeck(*b)
	}
	return eu
}

// SetLayers sets the "layers" field.
func (eu *EstimateUpdate) SetLayers(u uint8) *EstimateUpdate {
	eu.mutation.ResetLayers()
	eu.mutation.SetLayers(u)
	return eu
}

// AddLayers adds u to the "layers" field.
func (eu *EstimateUpdate) AddLayers(u int8) *EstimateUpdate {
	eu.mutation.AddLayers(u)
	return eu
}

// SetLayer2Material sets the "layer2_material" field.
func (eu *EstimateUpdate) SetLayer2Material(s string) *EstimateUpdate {
	eu.mutation.SetLayer2Material(s)
	return eu
}

// SetNillableLayer2Material sets the "layer2_material" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableLayer2Material(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetLayer2Material(*s)
	}
	return eu
}

// ClearLayer2Material clears the value of the "layer2_material" field.
func (eu *EstimateUpdate) ClearLayer2Material() *EstimateUpdate {
	eu.mutation.ClearLayer2Material()
	return eu
}

// SetLayer3Material sets the "layer3_material" field.
func (eu *EstimateUpdate) SetLayer3Material(s string) *EstimateUpdate {
	eu.mutation.SetLayer3Material(s)
	return eu
}

// SetNillableLayer3Material sets the "layer3_material" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableLayer3Material(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetLayer3Material(*s)
	}
	return eu
}

// ClearLayer3Material clears the value of the "layer3_material" field.
func (eu *EstimateUpdate) ClearLayer3Material() *EstimateUpdate {
	eu.mutation.ClearLayer3Material()
	return eu
}

// SetPartialPercentage sets the "partial_percentage" field.
func (eu *EstimateUpdate) SetPartialPercentage(f float64) *EstimateUpdate {
	eu.mutation.ResetPartialPercentage()
	eu.mutation.SetPartialPercentage(f)
	return eu
}

// SetNillablePartialPercentage sets the "partial_percentage" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillablePartialPercentage(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetPartialPercentage(*f)
	}
	return eu
}

// AddPartialPercentage adds f to the "partial_percentage" field.
func (eu *EstimateUpdate) AddPartialPercentage(f float64) *EstimateUpdate {
	eu.mutation.AddPartialPercentage(f)
	return eu
}

// ClearPartialPercentage clears the value of the "partial_percentage" field.
func (eu *EstimateUpdate) ClearPartialPercentage() *EstimateUpdate {
	eu.mutation.ClearPartialPercentage()
	return eu
}

// SetMaterialMappingNote sets the "material_mapping_note" field.
func (eu *EstimateUpdate) SetMaterialMappingNote(s string) *EstimateUpdate {
	eu.mutation.SetMaterialMappingNote(s)
	return eu
}

// SetNillableMaterialMappingNote sets the "material_mapping_note" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableMaterialMappingNote(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetMaterialMappingNote(*s)
	}
	return eu
}

// ClearMaterialMappingNote clears the value of the "material_mapping_note" field.
func (eu *EstimateUpdate) ClearMaterialMappingNote() *EstimateUpdate {
	eu.mutation.ClearMaterialMappingNote()
	return eu
}

// SetMeasureType sets the "measure_type" field.
func (eu *EstimateUpdate) SetMeasureType(e enum.Measure) *EstimateUpdate {
	eu.mutation.SetMeasureType(e)
	return eu
}

// SetExtraChargeType sets the "extra_charge_type" field.
func (eu *EstimateUpdate) SetExtraChargeType(ec enum.ExtraCharge) *EstimateUpdate {
	eu.mutation.SetExtraChargeType(ec)
	return eu
}

// SetNillableExtraChargeType sets the "extra_charge_type" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableExtraChargeType(ec *enum.ExtraCharge) *EstimateUpdate {
	if ec != nil {
		eu.SetExtraChargeType(*ec)
	}
	return eu
}

// ClearExtraChargeType clears the value of the "extra_charge_type" field.
func (eu *EstimateUpdate) ClearExtraChargeType() *EstimateUpdate {
	eu.mutation.ClearExtraChargeType()
	return eu
}

// SetExtraCharges sets the "extra_charges" field.
func (eu *EstimateUpdate) SetExtraCharges(f float64) *EstimateUpdate {
	eu.mutation.ResetExtraCharges()
	eu.mutation.SetExtraCharges(f)
	return eu
}

// SetNillableExtraCharges sets the "extra_charges" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableExtraCharges(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetExtraCharges(*f)
	}
	return eu
}

// AddExtraCharges adds f to the "extra_charges" field.
func (eu *EstimateUpdate) AddExtraCharges(f float64) *EstimateUpdate {
	eu.mutation.AddExtraCharges(f)
	return eu
}

// ClearExtraCharges clears the value of the "extra_charges" field.
func (eu *EstimateUpdate) ClearExtraCharges() *EstimateUpdate {
	eu.mutation.ClearExtraCharges()
	return eu
}

// SetExtraChargeCond sets the "extra_charge_cond" field.
func (eu *EstimateUpdate) SetExtraChargeCond(mcc []*model.ExtraChargeCondition) *EstimateUpdate {
	eu.mutation.SetExtraChargeCond(mcc)
	return eu
}

// AppendExtraChargeCond appends mcc to the "extra_charge_cond" field.
func (eu *EstimateUpdate) AppendExtraChargeCond(mcc []*model.ExtraChargeCondition) *EstimateUpdate {
	eu.mutation.AppendExtraChargeCond(mcc)
	return eu
}

// ClearExtraChargeCond clears the value of the "extra_charge_cond" field.
func (eu *EstimateUpdate) ClearExtraChargeCond() *EstimateUpdate {
	eu.mutation.ClearExtraChargeCond()
	return eu
}

// SetExtraChargeNote sets the "extra_charge_note" field.
func (eu *EstimateUpdate) SetExtraChargeNote(s string) *EstimateUpdate {
	eu.mutation.SetExtraChargeNote(s)
	return eu
}

// SetNillableExtraChargeNote sets the "extra_charge_note" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableExtraChargeNote(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetExtraChargeNote(*s)
	}
	return eu
}

// ClearExtraChargeNote clears the value of the "extra_charge_note" field.
func (eu *EstimateUpdate) ClearExtraChargeNote() *EstimateUpdate {
	eu.mutation.ClearExtraChargeNote()
	return eu
}

// SetEstimator sets the "estimator" field.
func (eu *EstimateUpdate) SetEstimator(s string) *EstimateUpdate {
	eu.mutation.SetEstimator(s)
	return eu
}

// SetNillableEstimator sets the "estimator" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableEstimator(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetEstimator(*s)
	}
	return eu
}

// ClearEstimator clears the value of the "estimator" field.
func (eu *EstimateUpdate) ClearEstimator() *EstimateUpdate {
	eu.mutation.ClearEstimator()
	return eu
}

// SetEstimatorOrderID sets the "estimator_order_id" field.
func (eu *EstimateUpdate) SetEstimatorOrderID(u uint) *EstimateUpdate {
	eu.mutation.ResetEstimatorOrderID()
	eu.mutation.SetEstimatorOrderID(u)
	return eu
}

// SetNillableEstimatorOrderID sets the "estimator_order_id" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableEstimatorOrderID(u *uint) *EstimateUpdate {
	if u != nil {
		eu.SetEstimatorOrderID(*u)
	}
	return eu
}

// AddEstimatorOrderID adds u to the "estimator_order_id" field.
func (eu *EstimateUpdate) AddEstimatorOrderID(u int) *EstimateUpdate {
	eu.mutation.AddEstimatorOrderID(u)
	return eu
}

// ClearEstimatorOrderID clears the value of the "estimator_order_id" field.
func (eu *EstimateUpdate) ClearEstimatorOrderID() *EstimateUpdate {
	eu.mutation.ClearEstimatorOrderID()
	return eu
}

// SetEstimatorReportID sets the "estimator_report_id" field.
func (eu *EstimateUpdate) SetEstimatorReportID(u uint) *EstimateUpdate {
	eu.mutation.ResetEstimatorReportID()
	eu.mutation.SetEstimatorReportID(u)
	return eu
}

// SetNillableEstimatorReportID sets the "estimator_report_id" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableEstimatorReportID(u *uint) *EstimateUpdate {
	if u != nil {
		eu.SetEstimatorReportID(*u)
	}
	return eu
}

// AddEstimatorReportID adds u to the "estimator_report_id" field.
func (eu *EstimateUpdate) AddEstimatorReportID(u int) *EstimateUpdate {
	eu.mutation.AddEstimatorReportID(u)
	return eu
}

// ClearEstimatorReportID clears the value of the "estimator_report_id" field.
func (eu *EstimateUpdate) ClearEstimatorReportID() *EstimateUpdate {
	eu.mutation.ClearEstimatorReportID()
	return eu
}

// SetTotalSquares sets the "total_squares" field.
func (eu *EstimateUpdate) SetTotalSquares(f float64) *EstimateUpdate {
	eu.mutation.ResetTotalSquares()
	eu.mutation.SetTotalSquares(f)
	return eu
}

// SetNillableTotalSquares sets the "total_squares" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableTotalSquares(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetTotalSquares(*f)
	}
	return eu
}

// AddTotalSquares adds f to the "total_squares" field.
func (eu *EstimateUpdate) AddTotalSquares(f float64) *EstimateUpdate {
	eu.mutation.AddTotalSquares(f)
	return eu
}

// SetPrimaryPitch sets the "primary_pitch" field.
func (eu *EstimateUpdate) SetPrimaryPitch(f float64) *EstimateUpdate {
	eu.mutation.ResetPrimaryPitch()
	eu.mutation.SetPrimaryPitch(f)
	return eu
}

// SetNillablePrimaryPitch sets the "primary_pitch" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillablePrimaryPitch(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetPrimaryPitch(*f)
	}
	return eu
}

// AddPrimaryPitch adds f to the "primary_pitch" field.
func (eu *EstimateUpdate) AddPrimaryPitch(f float64) *EstimateUpdate {
	eu.mutation.AddPrimaryPitch(f)
	return eu
}

// SetPrice sets the "price" field.
func (eu *EstimateUpdate) SetPrice(f float64) *EstimateUpdate {
	eu.mutation.ResetPrice()
	eu.mutation.SetPrice(f)
	return eu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillablePrice(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetPrice(*f)
	}
	return eu
}

// AddPrice adds f to the "price" field.
func (eu *EstimateUpdate) AddPrice(f float64) *EstimateUpdate {
	eu.mutation.AddPrice(f)
	return eu
}

// SetPriceSummary sets the "price_summary" field.
func (eu *EstimateUpdate) SetPriceSummary(s string) *EstimateUpdate {
	eu.mutation.SetPriceSummary(s)
	return eu
}

// SetNillablePriceSummary sets the "price_summary" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillablePriceSummary(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetPriceSummary(*s)
	}
	return eu
}

// ClearPriceSummary clears the value of the "price_summary" field.
func (eu *EstimateUpdate) ClearPriceSummary() *EstimateUpdate {
	eu.mutation.ClearPriceSummary()
	return eu
}

// SetBounds sets the "bounds" field.
func (eu *EstimateUpdate) SetBounds(s []schema.Point) *EstimateUpdate {
	eu.mutation.SetBounds(s)
	return eu
}

// AppendBounds appends s to the "bounds" field.
func (eu *EstimateUpdate) AppendBounds(s []schema.Point) *EstimateUpdate {
	eu.mutation.AppendBounds(s)
	return eu
}

// ClearBounds clears the value of the "bounds" field.
func (eu *EstimateUpdate) ClearBounds() *EstimateUpdate {
	eu.mutation.ClearBounds()
	return eu
}

// SetEstimatorRawResponse sets the "estimator_raw_response" field.
func (eu *EstimateUpdate) SetEstimatorRawResponse(m map[string]interface{}) *EstimateUpdate {
	eu.mutation.SetEstimatorRawResponse(m)
	return eu
}

// ClearEstimatorRawResponse clears the value of the "estimator_raw_response" field.
func (eu *EstimateUpdate) ClearEstimatorRawResponse() *EstimateUpdate {
	eu.mutation.ClearEstimatorRawResponse()
	return eu
}

// SetOverride sets the "override" field.
func (eu *EstimateUpdate) SetOverride(b bool) *EstimateUpdate {
	eu.mutation.SetOverride(b)
	return eu
}

// SetNillableOverride sets the "override" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableOverride(b *bool) *EstimateUpdate {
	if b != nil {
		eu.SetOverride(*b)
	}
	return eu
}

// ClearOverride clears the value of the "override" field.
func (eu *EstimateUpdate) ClearOverride() *EstimateUpdate {
	eu.mutation.ClearOverride()
	return eu
}

// SetOverrideTotalSquares sets the "override_total_squares" field.
func (eu *EstimateUpdate) SetOverrideTotalSquares(f float64) *EstimateUpdate {
	eu.mutation.ResetOverrideTotalSquares()
	eu.mutation.SetOverrideTotalSquares(f)
	return eu
}

// SetNillableOverrideTotalSquares sets the "override_total_squares" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableOverrideTotalSquares(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetOverrideTotalSquares(*f)
	}
	return eu
}

// AddOverrideTotalSquares adds f to the "override_total_squares" field.
func (eu *EstimateUpdate) AddOverrideTotalSquares(f float64) *EstimateUpdate {
	eu.mutation.AddOverrideTotalSquares(f)
	return eu
}

// SetOverridePrimaryPitch sets the "override_primary_pitch" field.
func (eu *EstimateUpdate) SetOverridePrimaryPitch(f float64) *EstimateUpdate {
	eu.mutation.ResetOverridePrimaryPitch()
	eu.mutation.SetOverridePrimaryPitch(f)
	return eu
}

// SetNillableOverridePrimaryPitch sets the "override_primary_pitch" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableOverridePrimaryPitch(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetOverridePrimaryPitch(*f)
	}
	return eu
}

// AddOverridePrimaryPitch adds f to the "override_primary_pitch" field.
func (eu *EstimateUpdate) AddOverridePrimaryPitch(f float64) *EstimateUpdate {
	eu.mutation.AddOverridePrimaryPitch(f)
	return eu
}

// SetOverridePrice sets the "override_price" field.
func (eu *EstimateUpdate) SetOverridePrice(f float64) *EstimateUpdate {
	eu.mutation.ResetOverridePrice()
	eu.mutation.SetOverridePrice(f)
	return eu
}

// SetNillableOverridePrice sets the "override_price" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableOverridePrice(f *float64) *EstimateUpdate {
	if f != nil {
		eu.SetOverridePrice(*f)
	}
	return eu
}

// AddOverridePrice adds f to the "override_price" field.
func (eu *EstimateUpdate) AddOverridePrice(f float64) *EstimateUpdate {
	eu.mutation.AddOverridePrice(f)
	return eu
}

// SetOverridePriceSummary sets the "override_price_summary" field.
func (eu *EstimateUpdate) SetOverridePriceSummary(s string) *EstimateUpdate {
	eu.mutation.SetOverridePriceSummary(s)
	return eu
}

// SetNillableOverridePriceSummary sets the "override_price_summary" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableOverridePriceSummary(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetOverridePriceSummary(*s)
	}
	return eu
}

// ClearOverridePriceSummary clears the value of the "override_price_summary" field.
func (eu *EstimateUpdate) ClearOverridePriceSummary() *EstimateUpdate {
	eu.mutation.ClearOverridePriceSummary()
	return eu
}

// SetCompanyRefID sets the "company_ref_id" field.
func (eu *EstimateUpdate) SetCompanyRefID(s string) *EstimateUpdate {
	eu.mutation.SetCompanyRefID(s)
	return eu
}

// SetNillableCompanyRefID sets the "company_ref_id" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableCompanyRefID(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetCompanyRefID(*s)
	}
	return eu
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (eu *EstimateUpdate) ClearCompanyRefID() *EstimateUpdate {
	eu.mutation.ClearCompanyRefID()
	return eu
}

// SetCompanyRefName sets the "company_ref_name" field.
func (eu *EstimateUpdate) SetCompanyRefName(s string) *EstimateUpdate {
	eu.mutation.SetCompanyRefName(s)
	return eu
}

// SetNillableCompanyRefName sets the "company_ref_name" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableCompanyRefName(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetCompanyRefName(*s)
	}
	return eu
}

// ClearCompanyRefName clears the value of the "company_ref_name" field.
func (eu *EstimateUpdate) ClearCompanyRefName() *EstimateUpdate {
	eu.mutation.ClearCompanyRefName()
	return eu
}

// SetFailureReason sets the "failure_reason" field.
func (eu *EstimateUpdate) SetFailureReason(s string) *EstimateUpdate {
	eu.mutation.SetFailureReason(s)
	return eu
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (eu *EstimateUpdate) SetNillableFailureReason(s *string) *EstimateUpdate {
	if s != nil {
		eu.SetFailureReason(*s)
	}
	return eu
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (eu *EstimateUpdate) ClearFailureReason() *EstimateUpdate {
	eu.mutation.ClearFailureReason()
	return eu
}

// AddActivityIDs adds the "activities" edge to the EstimateActivity entity by IDs.
func (eu *EstimateUpdate) AddActivityIDs(ids ...string) *EstimateUpdate {
	eu.mutation.AddActivityIDs(ids...)
	return eu
}

// AddActivities adds the "activities" edges to the EstimateActivity entity.
func (eu *EstimateUpdate) AddActivities(e ...*EstimateActivity) *EstimateUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddActivityIDs(ids...)
}

// SetJobInfoID sets the "job_info" edge to the Job entity by ID.
func (eu *EstimateUpdate) SetJobInfoID(id string) *EstimateUpdate {
	eu.mutation.SetJobInfoID(id)
	return eu
}

// SetNillableJobInfoID sets the "job_info" edge to the Job entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillableJobInfoID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetJobInfoID(*id)
	}
	return eu
}

// SetJobInfo sets the "job_info" edge to the Job entity.
func (eu *EstimateUpdate) SetJobInfo(j *Job) *EstimateUpdate {
	return eu.SetJobInfoID(j.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (eu *EstimateUpdate) SetPartnerID(id string) *EstimateUpdate {
	eu.mutation.SetPartnerID(id)
	return eu
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillablePartnerID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetPartnerID(*id)
	}
	return eu
}

// SetPartner sets the "partner" edge to the Partner entity.
func (eu *EstimateUpdate) SetPartner(p *Partner) *EstimateUpdate {
	return eu.SetPartnerID(p.ID)
}

// SetHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID.
func (eu *EstimateUpdate) SetHomeOwnerID(id string) *EstimateUpdate {
	eu.mutation.SetHomeOwnerID(id)
	return eu
}

// SetNillableHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillableHomeOwnerID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetHomeOwnerID(*id)
	}
	return eu
}

// SetHomeOwner sets the "home_owner" edge to the HomeOwner entity.
func (eu *EstimateUpdate) SetHomeOwner(h *HomeOwner) *EstimateUpdate {
	return eu.SetHomeOwnerID(h.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (eu *EstimateUpdate) SetSalesRepID(id string) *EstimateUpdate {
	eu.mutation.SetSalesRepID(id)
	return eu
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillableSalesRepID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetSalesRepID(*id)
	}
	return eu
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (eu *EstimateUpdate) SetSalesRep(u *User) *EstimateUpdate {
	return eu.SetSalesRepID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (eu *EstimateUpdate) SetCreatorID(id string) *EstimateUpdate {
	eu.mutation.SetCreatorID(id)
	return eu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillableCreatorID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetCreatorID(*id)
	}
	return eu
}

// SetCreator sets the "creator" edge to the User entity.
func (eu *EstimateUpdate) SetCreator(u *User) *EstimateUpdate {
	return eu.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (eu *EstimateUpdate) SetCreatorAPIID(id string) *EstimateUpdate {
	eu.mutation.SetCreatorAPIID(id)
	return eu
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillableCreatorAPIID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetCreatorAPIID(*id)
	}
	return eu
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (eu *EstimateUpdate) SetCreatorAPI(a *ApiUser) *EstimateUpdate {
	return eu.SetCreatorAPIID(a.ID)
}

// SetPdfID sets the "pdf" edge to the Document entity by ID.
func (eu *EstimateUpdate) SetPdfID(id string) *EstimateUpdate {
	eu.mutation.SetPdfID(id)
	return eu
}

// SetNillablePdfID sets the "pdf" edge to the Document entity by ID if the given value is not nil.
func (eu *EstimateUpdate) SetNillablePdfID(id *string) *EstimateUpdate {
	if id != nil {
		eu = eu.SetPdfID(*id)
	}
	return eu
}

// SetPdf sets the "pdf" edge to the Document entity.
func (eu *EstimateUpdate) SetPdf(d *Document) *EstimateUpdate {
	return eu.SetPdfID(d.ID)
}

// Mutation returns the EstimateMutation object of the builder.
func (eu *EstimateUpdate) Mutation() *EstimateMutation {
	return eu.mutation
}

// ClearActivities clears all "activities" edges to the EstimateActivity entity.
func (eu *EstimateUpdate) ClearActivities() *EstimateUpdate {
	eu.mutation.ClearActivities()
	return eu
}

// RemoveActivityIDs removes the "activities" edge to EstimateActivity entities by IDs.
func (eu *EstimateUpdate) RemoveActivityIDs(ids ...string) *EstimateUpdate {
	eu.mutation.RemoveActivityIDs(ids...)
	return eu
}

// RemoveActivities removes "activities" edges to EstimateActivity entities.
func (eu *EstimateUpdate) RemoveActivities(e ...*EstimateActivity) *EstimateUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveActivityIDs(ids...)
}

// ClearJobInfo clears the "job_info" edge to the Job entity.
func (eu *EstimateUpdate) ClearJobInfo() *EstimateUpdate {
	eu.mutation.ClearJobInfo()
	return eu
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (eu *EstimateUpdate) ClearPartner() *EstimateUpdate {
	eu.mutation.ClearPartner()
	return eu
}

// ClearHomeOwner clears the "home_owner" edge to the HomeOwner entity.
func (eu *EstimateUpdate) ClearHomeOwner() *EstimateUpdate {
	eu.mutation.ClearHomeOwner()
	return eu
}

// ClearSalesRep clears the "sales_rep" edge to the User entity.
func (eu *EstimateUpdate) ClearSalesRep() *EstimateUpdate {
	eu.mutation.ClearSalesRep()
	return eu
}

// ClearCreator clears the "creator" edge to the User entity.
func (eu *EstimateUpdate) ClearCreator() *EstimateUpdate {
	eu.mutation.ClearCreator()
	return eu
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (eu *EstimateUpdate) ClearCreatorAPI() *EstimateUpdate {
	eu.mutation.ClearCreatorAPI()
	return eu
}

// ClearPdf clears the "pdf" edge to the Document entity.
func (eu *EstimateUpdate) ClearPdf() *EstimateUpdate {
	eu.mutation.ClearPdf()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EstimateUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EstimateUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EstimateUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EstimateUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EstimateUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := estimate.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EstimateUpdate) check() error {
	if v, ok := eu.mutation.Status(); ok {
		if err := estimate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Estimate.status": %w`, err)}
		}
	}
	if v, ok := eu.mutation.CurrentMaterial(); ok {
		if err := estimate.CurrentMaterialValidator(v); err != nil {
			return &ValidationError{Name: "current_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.current_material": %w`, err)}
		}
	}
	if v, ok := eu.mutation.NewRoofingMaterial(); ok {
		if err := estimate.NewRoofingMaterialValidator(v); err != nil {
			return &ValidationError{Name: "new_roofing_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.new_roofing_material": %w`, err)}
		}
	}
	if v, ok := eu.mutation.CurrentMaterialLowSlope(); ok {
		if err := estimate.CurrentMaterialLowSlopeValidator(v); err != nil {
			return &ValidationError{Name: "current_material_low_slope", err: fmt.Errorf(`ent: validator failed for field "Estimate.current_material_low_slope": %w`, err)}
		}
	}
	if v, ok := eu.mutation.NewRoofingMaterialLowSlope(); ok {
		if err := estimate.NewRoofingMaterialLowSlopeValidator(v); err != nil {
			return &ValidationError{Name: "new_roofing_material_low_slope", err: fmt.Errorf(`ent: validator failed for field "Estimate.new_roofing_material_low_slope": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Layer2Material(); ok {
		if err := estimate.Layer2MaterialValidator(v); err != nil {
			return &ValidationError{Name: "layer2_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.layer2_material": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Layer3Material(); ok {
		if err := estimate.Layer3MaterialValidator(v); err != nil {
			return &ValidationError{Name: "layer3_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.layer3_material": %w`, err)}
		}
	}
	if v, ok := eu.mutation.MaterialMappingNote(); ok {
		if err := estimate.MaterialMappingNoteValidator(v); err != nil {
			return &ValidationError{Name: "material_mapping_note", err: fmt.Errorf(`ent: validator failed for field "Estimate.material_mapping_note": %w`, err)}
		}
	}
	if v, ok := eu.mutation.MeasureType(); ok {
		if err := estimate.MeasureTypeValidator(v); err != nil {
			return &ValidationError{Name: "measure_type", err: fmt.Errorf(`ent: validator failed for field "Estimate.measure_type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.ExtraChargeType(); ok {
		if err := estimate.ExtraChargeTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_charge_type", err: fmt.Errorf(`ent: validator failed for field "Estimate.extra_charge_type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.CompanyRefID(); ok {
		if err := estimate.CompanyRefIDValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_id", err: fmt.Errorf(`ent: validator failed for field "Estimate.company_ref_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.CompanyRefName(); ok {
		if err := estimate.CompanyRefNameValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_name", err: fmt.Errorf(`ent: validator failed for field "Estimate.company_ref_name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.FailureReason(); ok {
		if err := estimate.FailureReasonValidator(v); err != nil {
			return &ValidationError{Name: "failure_reason", err: fmt.Errorf(`ent: validator failed for field "Estimate.failure_reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EstimateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EstimateUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EstimateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(estimate.Table, estimate.Columns, sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(estimate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.RegionID(); ok {
		_spec.SetField(estimate.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.AddedRegionID(); ok {
		_spec.AddField(estimate.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(estimate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.CurrentMaterial(); ok {
		_spec.SetField(estimate.FieldCurrentMaterial, field.TypeString, value)
	}
	if eu.mutation.CurrentMaterialCleared() {
		_spec.ClearField(estimate.FieldCurrentMaterial, field.TypeString)
	}
	if value, ok := eu.mutation.NewRoofingMaterial(); ok {
		_spec.SetField(estimate.FieldNewRoofingMaterial, field.TypeString, value)
	}
	if eu.mutation.NewRoofingMaterialCleared() {
		_spec.ClearField(estimate.FieldNewRoofingMaterial, field.TypeString)
	}
	if value, ok := eu.mutation.LowSlope(); ok {
		_spec.SetField(estimate.FieldLowSlope, field.TypeBool, value)
	}
	if value, ok := eu.mutation.CurrentMaterialLowSlope(); ok {
		_spec.SetField(estimate.FieldCurrentMaterialLowSlope, field.TypeString, value)
	}
	if eu.mutation.CurrentMaterialLowSlopeCleared() {
		_spec.ClearField(estimate.FieldCurrentMaterialLowSlope, field.TypeString)
	}
	if value, ok := eu.mutation.NewRoofingMaterialLowSlope(); ok {
		_spec.SetField(estimate.FieldNewRoofingMaterialLowSlope, field.TypeString, value)
	}
	if eu.mutation.NewRoofingMaterialLowSlopeCleared() {
		_spec.ClearField(estimate.FieldNewRoofingMaterialLowSlope, field.TypeString)
	}
	if value, ok := eu.mutation.Redeck(); ok {
		_spec.SetField(estimate.FieldRedeck, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Layers(); ok {
		_spec.SetField(estimate.FieldLayers, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.AddedLayers(); ok {
		_spec.AddField(estimate.FieldLayers, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.Layer2Material(); ok {
		_spec.SetField(estimate.FieldLayer2Material, field.TypeString, value)
	}
	if eu.mutation.Layer2MaterialCleared() {
		_spec.ClearField(estimate.FieldLayer2Material, field.TypeString)
	}
	if value, ok := eu.mutation.Layer3Material(); ok {
		_spec.SetField(estimate.FieldLayer3Material, field.TypeString, value)
	}
	if eu.mutation.Layer3MaterialCleared() {
		_spec.ClearField(estimate.FieldLayer3Material, field.TypeString)
	}
	if value, ok := eu.mutation.PartialPercentage(); ok {
		_spec.SetField(estimate.FieldPartialPercentage, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedPartialPercentage(); ok {
		_spec.AddField(estimate.FieldPartialPercentage, field.TypeFloat64, value)
	}
	if eu.mutation.PartialPercentageCleared() {
		_spec.ClearField(estimate.FieldPartialPercentage, field.TypeFloat64)
	}
	if value, ok := eu.mutation.MaterialMappingNote(); ok {
		_spec.SetField(estimate.FieldMaterialMappingNote, field.TypeString, value)
	}
	if eu.mutation.MaterialMappingNoteCleared() {
		_spec.ClearField(estimate.FieldMaterialMappingNote, field.TypeString)
	}
	if value, ok := eu.mutation.MeasureType(); ok {
		_spec.SetField(estimate.FieldMeasureType, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.ExtraChargeType(); ok {
		_spec.SetField(estimate.FieldExtraChargeType, field.TypeEnum, value)
	}
	if eu.mutation.ExtraChargeTypeCleared() {
		_spec.ClearField(estimate.FieldExtraChargeType, field.TypeEnum)
	}
	if value, ok := eu.mutation.ExtraCharges(); ok {
		_spec.SetField(estimate.FieldExtraCharges, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedExtraCharges(); ok {
		_spec.AddField(estimate.FieldExtraCharges, field.TypeFloat64, value)
	}
	if eu.mutation.ExtraChargesCleared() {
		_spec.ClearField(estimate.FieldExtraCharges, field.TypeFloat64)
	}
	if value, ok := eu.mutation.ExtraChargeCond(); ok {
		_spec.SetField(estimate.FieldExtraChargeCond, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedExtraChargeCond(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, estimate.FieldExtraChargeCond, value)
		})
	}
	if eu.mutation.ExtraChargeCondCleared() {
		_spec.ClearField(estimate.FieldExtraChargeCond, field.TypeJSON)
	}
	if value, ok := eu.mutation.ExtraChargeNote(); ok {
		_spec.SetField(estimate.FieldExtraChargeNote, field.TypeString, value)
	}
	if eu.mutation.ExtraChargeNoteCleared() {
		_spec.ClearField(estimate.FieldExtraChargeNote, field.TypeString)
	}
	if value, ok := eu.mutation.Estimator(); ok {
		_spec.SetField(estimate.FieldEstimator, field.TypeString, value)
	}
	if eu.mutation.EstimatorCleared() {
		_spec.ClearField(estimate.FieldEstimator, field.TypeString)
	}
	if value, ok := eu.mutation.EstimatorOrderID(); ok {
		_spec.SetField(estimate.FieldEstimatorOrderID, field.TypeUint, value)
	}
	if value, ok := eu.mutation.AddedEstimatorOrderID(); ok {
		_spec.AddField(estimate.FieldEstimatorOrderID, field.TypeUint, value)
	}
	if eu.mutation.EstimatorOrderIDCleared() {
		_spec.ClearField(estimate.FieldEstimatorOrderID, field.TypeUint)
	}
	if value, ok := eu.mutation.EstimatorReportID(); ok {
		_spec.SetField(estimate.FieldEstimatorReportID, field.TypeUint, value)
	}
	if value, ok := eu.mutation.AddedEstimatorReportID(); ok {
		_spec.AddField(estimate.FieldEstimatorReportID, field.TypeUint, value)
	}
	if eu.mutation.EstimatorReportIDCleared() {
		_spec.ClearField(estimate.FieldEstimatorReportID, field.TypeUint)
	}
	if value, ok := eu.mutation.TotalSquares(); ok {
		_spec.SetField(estimate.FieldTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedTotalSquares(); ok {
		_spec.AddField(estimate.FieldTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.PrimaryPitch(); ok {
		_spec.SetField(estimate.FieldPrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedPrimaryPitch(); ok {
		_spec.AddField(estimate.FieldPrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.Price(); ok {
		_spec.SetField(estimate.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedPrice(); ok {
		_spec.AddField(estimate.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.PriceSummary(); ok {
		_spec.SetField(estimate.FieldPriceSummary, field.TypeString, value)
	}
	if eu.mutation.PriceSummaryCleared() {
		_spec.ClearField(estimate.FieldPriceSummary, field.TypeString)
	}
	if value, ok := eu.mutation.Bounds(); ok {
		_spec.SetField(estimate.FieldBounds, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedBounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, estimate.FieldBounds, value)
		})
	}
	if eu.mutation.BoundsCleared() {
		_spec.ClearField(estimate.FieldBounds, field.TypeJSON)
	}
	if value, ok := eu.mutation.EstimatorRawResponse(); ok {
		_spec.SetField(estimate.FieldEstimatorRawResponse, field.TypeJSON, value)
	}
	if eu.mutation.EstimatorRawResponseCleared() {
		_spec.ClearField(estimate.FieldEstimatorRawResponse, field.TypeJSON)
	}
	if value, ok := eu.mutation.Override(); ok {
		_spec.SetField(estimate.FieldOverride, field.TypeBool, value)
	}
	if eu.mutation.OverrideCleared() {
		_spec.ClearField(estimate.FieldOverride, field.TypeBool)
	}
	if value, ok := eu.mutation.OverrideTotalSquares(); ok {
		_spec.SetField(estimate.FieldOverrideTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedOverrideTotalSquares(); ok {
		_spec.AddField(estimate.FieldOverrideTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.OverridePrimaryPitch(); ok {
		_spec.SetField(estimate.FieldOverridePrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedOverridePrimaryPitch(); ok {
		_spec.AddField(estimate.FieldOverridePrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.OverridePrice(); ok {
		_spec.SetField(estimate.FieldOverridePrice, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedOverridePrice(); ok {
		_spec.AddField(estimate.FieldOverridePrice, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.OverridePriceSummary(); ok {
		_spec.SetField(estimate.FieldOverridePriceSummary, field.TypeString, value)
	}
	if eu.mutation.OverridePriceSummaryCleared() {
		_spec.ClearField(estimate.FieldOverridePriceSummary, field.TypeString)
	}
	if value, ok := eu.mutation.CompanyRefID(); ok {
		_spec.SetField(estimate.FieldCompanyRefID, field.TypeString, value)
	}
	if eu.mutation.CompanyRefIDCleared() {
		_spec.ClearField(estimate.FieldCompanyRefID, field.TypeString)
	}
	if value, ok := eu.mutation.CompanyRefName(); ok {
		_spec.SetField(estimate.FieldCompanyRefName, field.TypeString, value)
	}
	if eu.mutation.CompanyRefNameCleared() {
		_spec.ClearField(estimate.FieldCompanyRefName, field.TypeString)
	}
	if value, ok := eu.mutation.FailureReason(); ok {
		_spec.SetField(estimate.FieldFailureReason, field.TypeString, value)
	}
	if eu.mutation.FailureReasonCleared() {
		_spec.ClearField(estimate.FieldFailureReason, field.TypeString)
	}
	if eu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !eu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.JobInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   estimate.JobInfoTable,
			Columns: []string{estimate.JobInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.JobInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   estimate.JobInfoTable,
			Columns: []string{estimate.JobInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.PartnerTable,
			Columns: []string{estimate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.PartnerTable,
			Columns: []string{estimate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.HomeOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.HomeOwnerTable,
			Columns: []string{estimate.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.HomeOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.HomeOwnerTable,
			Columns: []string{estimate.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SalesRepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.SalesRepTable,
			Columns: []string{estimate.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.SalesRepTable,
			Columns: []string{estimate.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorTable,
			Columns: []string{estimate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorTable,
			Columns: []string{estimate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorAPITable,
			Columns: []string{estimate.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorAPITable,
			Columns: []string{estimate.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   estimate.PdfTable,
			Columns: []string{estimate.PdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   estimate.PdfTable,
			Columns: []string{estimate.PdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{estimate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EstimateUpdateOne is the builder for updating a single Estimate entity.
type EstimateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EstimateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EstimateUpdateOne) SetUpdatedAt(t time.Time) *EstimateUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetRegionID sets the "region_id" field.
func (euo *EstimateUpdateOne) SetRegionID(u uint8) *EstimateUpdateOne {
	euo.mutation.ResetRegionID()
	euo.mutation.SetRegionID(u)
	return euo
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableRegionID(u *uint8) *EstimateUpdateOne {
	if u != nil {
		euo.SetRegionID(*u)
	}
	return euo
}

// AddRegionID adds u to the "region_id" field.
func (euo *EstimateUpdateOne) AddRegionID(u int8) *EstimateUpdateOne {
	euo.mutation.AddRegionID(u)
	return euo
}

// SetStatus sets the "status" field.
func (euo *EstimateUpdateOne) SetStatus(es enum.EstimateStatus) *EstimateUpdateOne {
	euo.mutation.SetStatus(es)
	return euo
}

// SetCurrentMaterial sets the "current_material" field.
func (euo *EstimateUpdateOne) SetCurrentMaterial(s string) *EstimateUpdateOne {
	euo.mutation.SetCurrentMaterial(s)
	return euo
}

// SetNillableCurrentMaterial sets the "current_material" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableCurrentMaterial(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetCurrentMaterial(*s)
	}
	return euo
}

// ClearCurrentMaterial clears the value of the "current_material" field.
func (euo *EstimateUpdateOne) ClearCurrentMaterial() *EstimateUpdateOne {
	euo.mutation.ClearCurrentMaterial()
	return euo
}

// SetNewRoofingMaterial sets the "new_roofing_material" field.
func (euo *EstimateUpdateOne) SetNewRoofingMaterial(s string) *EstimateUpdateOne {
	euo.mutation.SetNewRoofingMaterial(s)
	return euo
}

// SetNillableNewRoofingMaterial sets the "new_roofing_material" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableNewRoofingMaterial(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetNewRoofingMaterial(*s)
	}
	return euo
}

// ClearNewRoofingMaterial clears the value of the "new_roofing_material" field.
func (euo *EstimateUpdateOne) ClearNewRoofingMaterial() *EstimateUpdateOne {
	euo.mutation.ClearNewRoofingMaterial()
	return euo
}

// SetLowSlope sets the "lowSlope" field.
func (euo *EstimateUpdateOne) SetLowSlope(b bool) *EstimateUpdateOne {
	euo.mutation.SetLowSlope(b)
	return euo
}

// SetNillableLowSlope sets the "lowSlope" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableLowSlope(b *bool) *EstimateUpdateOne {
	if b != nil {
		euo.SetLowSlope(*b)
	}
	return euo
}

// SetCurrentMaterialLowSlope sets the "current_material_low_slope" field.
func (euo *EstimateUpdateOne) SetCurrentMaterialLowSlope(s string) *EstimateUpdateOne {
	euo.mutation.SetCurrentMaterialLowSlope(s)
	return euo
}

// SetNillableCurrentMaterialLowSlope sets the "current_material_low_slope" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableCurrentMaterialLowSlope(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetCurrentMaterialLowSlope(*s)
	}
	return euo
}

// ClearCurrentMaterialLowSlope clears the value of the "current_material_low_slope" field.
func (euo *EstimateUpdateOne) ClearCurrentMaterialLowSlope() *EstimateUpdateOne {
	euo.mutation.ClearCurrentMaterialLowSlope()
	return euo
}

// SetNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field.
func (euo *EstimateUpdateOne) SetNewRoofingMaterialLowSlope(s string) *EstimateUpdateOne {
	euo.mutation.SetNewRoofingMaterialLowSlope(s)
	return euo
}

// SetNillableNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableNewRoofingMaterialLowSlope(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetNewRoofingMaterialLowSlope(*s)
	}
	return euo
}

// ClearNewRoofingMaterialLowSlope clears the value of the "new_roofing_material_low_slope" field.
func (euo *EstimateUpdateOne) ClearNewRoofingMaterialLowSlope() *EstimateUpdateOne {
	euo.mutation.ClearNewRoofingMaterialLowSlope()
	return euo
}

// SetRedeck sets the "redeck" field.
func (euo *EstimateUpdateOne) SetRedeck(b bool) *EstimateUpdateOne {
	euo.mutation.SetRedeck(b)
	return euo
}

// SetNillableRedeck sets the "redeck" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableRedeck(b *bool) *EstimateUpdateOne {
	if b != nil {
		euo.SetRedeck(*b)
	}
	return euo
}

// SetLayers sets the "layers" field.
func (euo *EstimateUpdateOne) SetLayers(u uint8) *EstimateUpdateOne {
	euo.mutation.ResetLayers()
	euo.mutation.SetLayers(u)
	return euo
}

// AddLayers adds u to the "layers" field.
func (euo *EstimateUpdateOne) AddLayers(u int8) *EstimateUpdateOne {
	euo.mutation.AddLayers(u)
	return euo
}

// SetLayer2Material sets the "layer2_material" field.
func (euo *EstimateUpdateOne) SetLayer2Material(s string) *EstimateUpdateOne {
	euo.mutation.SetLayer2Material(s)
	return euo
}

// SetNillableLayer2Material sets the "layer2_material" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableLayer2Material(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetLayer2Material(*s)
	}
	return euo
}

// ClearLayer2Material clears the value of the "layer2_material" field.
func (euo *EstimateUpdateOne) ClearLayer2Material() *EstimateUpdateOne {
	euo.mutation.ClearLayer2Material()
	return euo
}

// SetLayer3Material sets the "layer3_material" field.
func (euo *EstimateUpdateOne) SetLayer3Material(s string) *EstimateUpdateOne {
	euo.mutation.SetLayer3Material(s)
	return euo
}

// SetNillableLayer3Material sets the "layer3_material" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableLayer3Material(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetLayer3Material(*s)
	}
	return euo
}

// ClearLayer3Material clears the value of the "layer3_material" field.
func (euo *EstimateUpdateOne) ClearLayer3Material() *EstimateUpdateOne {
	euo.mutation.ClearLayer3Material()
	return euo
}

// SetPartialPercentage sets the "partial_percentage" field.
func (euo *EstimateUpdateOne) SetPartialPercentage(f float64) *EstimateUpdateOne {
	euo.mutation.ResetPartialPercentage()
	euo.mutation.SetPartialPercentage(f)
	return euo
}

// SetNillablePartialPercentage sets the "partial_percentage" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillablePartialPercentage(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetPartialPercentage(*f)
	}
	return euo
}

// AddPartialPercentage adds f to the "partial_percentage" field.
func (euo *EstimateUpdateOne) AddPartialPercentage(f float64) *EstimateUpdateOne {
	euo.mutation.AddPartialPercentage(f)
	return euo
}

// ClearPartialPercentage clears the value of the "partial_percentage" field.
func (euo *EstimateUpdateOne) ClearPartialPercentage() *EstimateUpdateOne {
	euo.mutation.ClearPartialPercentage()
	return euo
}

// SetMaterialMappingNote sets the "material_mapping_note" field.
func (euo *EstimateUpdateOne) SetMaterialMappingNote(s string) *EstimateUpdateOne {
	euo.mutation.SetMaterialMappingNote(s)
	return euo
}

// SetNillableMaterialMappingNote sets the "material_mapping_note" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableMaterialMappingNote(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetMaterialMappingNote(*s)
	}
	return euo
}

// ClearMaterialMappingNote clears the value of the "material_mapping_note" field.
func (euo *EstimateUpdateOne) ClearMaterialMappingNote() *EstimateUpdateOne {
	euo.mutation.ClearMaterialMappingNote()
	return euo
}

// SetMeasureType sets the "measure_type" field.
func (euo *EstimateUpdateOne) SetMeasureType(e enum.Measure) *EstimateUpdateOne {
	euo.mutation.SetMeasureType(e)
	return euo
}

// SetExtraChargeType sets the "extra_charge_type" field.
func (euo *EstimateUpdateOne) SetExtraChargeType(ec enum.ExtraCharge) *EstimateUpdateOne {
	euo.mutation.SetExtraChargeType(ec)
	return euo
}

// SetNillableExtraChargeType sets the "extra_charge_type" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableExtraChargeType(ec *enum.ExtraCharge) *EstimateUpdateOne {
	if ec != nil {
		euo.SetExtraChargeType(*ec)
	}
	return euo
}

// ClearExtraChargeType clears the value of the "extra_charge_type" field.
func (euo *EstimateUpdateOne) ClearExtraChargeType() *EstimateUpdateOne {
	euo.mutation.ClearExtraChargeType()
	return euo
}

// SetExtraCharges sets the "extra_charges" field.
func (euo *EstimateUpdateOne) SetExtraCharges(f float64) *EstimateUpdateOne {
	euo.mutation.ResetExtraCharges()
	euo.mutation.SetExtraCharges(f)
	return euo
}

// SetNillableExtraCharges sets the "extra_charges" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableExtraCharges(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetExtraCharges(*f)
	}
	return euo
}

// AddExtraCharges adds f to the "extra_charges" field.
func (euo *EstimateUpdateOne) AddExtraCharges(f float64) *EstimateUpdateOne {
	euo.mutation.AddExtraCharges(f)
	return euo
}

// ClearExtraCharges clears the value of the "extra_charges" field.
func (euo *EstimateUpdateOne) ClearExtraCharges() *EstimateUpdateOne {
	euo.mutation.ClearExtraCharges()
	return euo
}

// SetExtraChargeCond sets the "extra_charge_cond" field.
func (euo *EstimateUpdateOne) SetExtraChargeCond(mcc []*model.ExtraChargeCondition) *EstimateUpdateOne {
	euo.mutation.SetExtraChargeCond(mcc)
	return euo
}

// AppendExtraChargeCond appends mcc to the "extra_charge_cond" field.
func (euo *EstimateUpdateOne) AppendExtraChargeCond(mcc []*model.ExtraChargeCondition) *EstimateUpdateOne {
	euo.mutation.AppendExtraChargeCond(mcc)
	return euo
}

// ClearExtraChargeCond clears the value of the "extra_charge_cond" field.
func (euo *EstimateUpdateOne) ClearExtraChargeCond() *EstimateUpdateOne {
	euo.mutation.ClearExtraChargeCond()
	return euo
}

// SetExtraChargeNote sets the "extra_charge_note" field.
func (euo *EstimateUpdateOne) SetExtraChargeNote(s string) *EstimateUpdateOne {
	euo.mutation.SetExtraChargeNote(s)
	return euo
}

// SetNillableExtraChargeNote sets the "extra_charge_note" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableExtraChargeNote(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetExtraChargeNote(*s)
	}
	return euo
}

// ClearExtraChargeNote clears the value of the "extra_charge_note" field.
func (euo *EstimateUpdateOne) ClearExtraChargeNote() *EstimateUpdateOne {
	euo.mutation.ClearExtraChargeNote()
	return euo
}

// SetEstimator sets the "estimator" field.
func (euo *EstimateUpdateOne) SetEstimator(s string) *EstimateUpdateOne {
	euo.mutation.SetEstimator(s)
	return euo
}

// SetNillableEstimator sets the "estimator" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableEstimator(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetEstimator(*s)
	}
	return euo
}

// ClearEstimator clears the value of the "estimator" field.
func (euo *EstimateUpdateOne) ClearEstimator() *EstimateUpdateOne {
	euo.mutation.ClearEstimator()
	return euo
}

// SetEstimatorOrderID sets the "estimator_order_id" field.
func (euo *EstimateUpdateOne) SetEstimatorOrderID(u uint) *EstimateUpdateOne {
	euo.mutation.ResetEstimatorOrderID()
	euo.mutation.SetEstimatorOrderID(u)
	return euo
}

// SetNillableEstimatorOrderID sets the "estimator_order_id" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableEstimatorOrderID(u *uint) *EstimateUpdateOne {
	if u != nil {
		euo.SetEstimatorOrderID(*u)
	}
	return euo
}

// AddEstimatorOrderID adds u to the "estimator_order_id" field.
func (euo *EstimateUpdateOne) AddEstimatorOrderID(u int) *EstimateUpdateOne {
	euo.mutation.AddEstimatorOrderID(u)
	return euo
}

// ClearEstimatorOrderID clears the value of the "estimator_order_id" field.
func (euo *EstimateUpdateOne) ClearEstimatorOrderID() *EstimateUpdateOne {
	euo.mutation.ClearEstimatorOrderID()
	return euo
}

// SetEstimatorReportID sets the "estimator_report_id" field.
func (euo *EstimateUpdateOne) SetEstimatorReportID(u uint) *EstimateUpdateOne {
	euo.mutation.ResetEstimatorReportID()
	euo.mutation.SetEstimatorReportID(u)
	return euo
}

// SetNillableEstimatorReportID sets the "estimator_report_id" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableEstimatorReportID(u *uint) *EstimateUpdateOne {
	if u != nil {
		euo.SetEstimatorReportID(*u)
	}
	return euo
}

// AddEstimatorReportID adds u to the "estimator_report_id" field.
func (euo *EstimateUpdateOne) AddEstimatorReportID(u int) *EstimateUpdateOne {
	euo.mutation.AddEstimatorReportID(u)
	return euo
}

// ClearEstimatorReportID clears the value of the "estimator_report_id" field.
func (euo *EstimateUpdateOne) ClearEstimatorReportID() *EstimateUpdateOne {
	euo.mutation.ClearEstimatorReportID()
	return euo
}

// SetTotalSquares sets the "total_squares" field.
func (euo *EstimateUpdateOne) SetTotalSquares(f float64) *EstimateUpdateOne {
	euo.mutation.ResetTotalSquares()
	euo.mutation.SetTotalSquares(f)
	return euo
}

// SetNillableTotalSquares sets the "total_squares" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableTotalSquares(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetTotalSquares(*f)
	}
	return euo
}

// AddTotalSquares adds f to the "total_squares" field.
func (euo *EstimateUpdateOne) AddTotalSquares(f float64) *EstimateUpdateOne {
	euo.mutation.AddTotalSquares(f)
	return euo
}

// SetPrimaryPitch sets the "primary_pitch" field.
func (euo *EstimateUpdateOne) SetPrimaryPitch(f float64) *EstimateUpdateOne {
	euo.mutation.ResetPrimaryPitch()
	euo.mutation.SetPrimaryPitch(f)
	return euo
}

// SetNillablePrimaryPitch sets the "primary_pitch" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillablePrimaryPitch(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetPrimaryPitch(*f)
	}
	return euo
}

// AddPrimaryPitch adds f to the "primary_pitch" field.
func (euo *EstimateUpdateOne) AddPrimaryPitch(f float64) *EstimateUpdateOne {
	euo.mutation.AddPrimaryPitch(f)
	return euo
}

// SetPrice sets the "price" field.
func (euo *EstimateUpdateOne) SetPrice(f float64) *EstimateUpdateOne {
	euo.mutation.ResetPrice()
	euo.mutation.SetPrice(f)
	return euo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillablePrice(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetPrice(*f)
	}
	return euo
}

// AddPrice adds f to the "price" field.
func (euo *EstimateUpdateOne) AddPrice(f float64) *EstimateUpdateOne {
	euo.mutation.AddPrice(f)
	return euo
}

// SetPriceSummary sets the "price_summary" field.
func (euo *EstimateUpdateOne) SetPriceSummary(s string) *EstimateUpdateOne {
	euo.mutation.SetPriceSummary(s)
	return euo
}

// SetNillablePriceSummary sets the "price_summary" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillablePriceSummary(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetPriceSummary(*s)
	}
	return euo
}

// ClearPriceSummary clears the value of the "price_summary" field.
func (euo *EstimateUpdateOne) ClearPriceSummary() *EstimateUpdateOne {
	euo.mutation.ClearPriceSummary()
	return euo
}

// SetBounds sets the "bounds" field.
func (euo *EstimateUpdateOne) SetBounds(s []schema.Point) *EstimateUpdateOne {
	euo.mutation.SetBounds(s)
	return euo
}

// AppendBounds appends s to the "bounds" field.
func (euo *EstimateUpdateOne) AppendBounds(s []schema.Point) *EstimateUpdateOne {
	euo.mutation.AppendBounds(s)
	return euo
}

// ClearBounds clears the value of the "bounds" field.
func (euo *EstimateUpdateOne) ClearBounds() *EstimateUpdateOne {
	euo.mutation.ClearBounds()
	return euo
}

// SetEstimatorRawResponse sets the "estimator_raw_response" field.
func (euo *EstimateUpdateOne) SetEstimatorRawResponse(m map[string]interface{}) *EstimateUpdateOne {
	euo.mutation.SetEstimatorRawResponse(m)
	return euo
}

// ClearEstimatorRawResponse clears the value of the "estimator_raw_response" field.
func (euo *EstimateUpdateOne) ClearEstimatorRawResponse() *EstimateUpdateOne {
	euo.mutation.ClearEstimatorRawResponse()
	return euo
}

// SetOverride sets the "override" field.
func (euo *EstimateUpdateOne) SetOverride(b bool) *EstimateUpdateOne {
	euo.mutation.SetOverride(b)
	return euo
}

// SetNillableOverride sets the "override" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableOverride(b *bool) *EstimateUpdateOne {
	if b != nil {
		euo.SetOverride(*b)
	}
	return euo
}

// ClearOverride clears the value of the "override" field.
func (euo *EstimateUpdateOne) ClearOverride() *EstimateUpdateOne {
	euo.mutation.ClearOverride()
	return euo
}

// SetOverrideTotalSquares sets the "override_total_squares" field.
func (euo *EstimateUpdateOne) SetOverrideTotalSquares(f float64) *EstimateUpdateOne {
	euo.mutation.ResetOverrideTotalSquares()
	euo.mutation.SetOverrideTotalSquares(f)
	return euo
}

// SetNillableOverrideTotalSquares sets the "override_total_squares" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableOverrideTotalSquares(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetOverrideTotalSquares(*f)
	}
	return euo
}

// AddOverrideTotalSquares adds f to the "override_total_squares" field.
func (euo *EstimateUpdateOne) AddOverrideTotalSquares(f float64) *EstimateUpdateOne {
	euo.mutation.AddOverrideTotalSquares(f)
	return euo
}

// SetOverridePrimaryPitch sets the "override_primary_pitch" field.
func (euo *EstimateUpdateOne) SetOverridePrimaryPitch(f float64) *EstimateUpdateOne {
	euo.mutation.ResetOverridePrimaryPitch()
	euo.mutation.SetOverridePrimaryPitch(f)
	return euo
}

// SetNillableOverridePrimaryPitch sets the "override_primary_pitch" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableOverridePrimaryPitch(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetOverridePrimaryPitch(*f)
	}
	return euo
}

// AddOverridePrimaryPitch adds f to the "override_primary_pitch" field.
func (euo *EstimateUpdateOne) AddOverridePrimaryPitch(f float64) *EstimateUpdateOne {
	euo.mutation.AddOverridePrimaryPitch(f)
	return euo
}

// SetOverridePrice sets the "override_price" field.
func (euo *EstimateUpdateOne) SetOverridePrice(f float64) *EstimateUpdateOne {
	euo.mutation.ResetOverridePrice()
	euo.mutation.SetOverridePrice(f)
	return euo
}

// SetNillableOverridePrice sets the "override_price" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableOverridePrice(f *float64) *EstimateUpdateOne {
	if f != nil {
		euo.SetOverridePrice(*f)
	}
	return euo
}

// AddOverridePrice adds f to the "override_price" field.
func (euo *EstimateUpdateOne) AddOverridePrice(f float64) *EstimateUpdateOne {
	euo.mutation.AddOverridePrice(f)
	return euo
}

// SetOverridePriceSummary sets the "override_price_summary" field.
func (euo *EstimateUpdateOne) SetOverridePriceSummary(s string) *EstimateUpdateOne {
	euo.mutation.SetOverridePriceSummary(s)
	return euo
}

// SetNillableOverridePriceSummary sets the "override_price_summary" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableOverridePriceSummary(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetOverridePriceSummary(*s)
	}
	return euo
}

// ClearOverridePriceSummary clears the value of the "override_price_summary" field.
func (euo *EstimateUpdateOne) ClearOverridePriceSummary() *EstimateUpdateOne {
	euo.mutation.ClearOverridePriceSummary()
	return euo
}

// SetCompanyRefID sets the "company_ref_id" field.
func (euo *EstimateUpdateOne) SetCompanyRefID(s string) *EstimateUpdateOne {
	euo.mutation.SetCompanyRefID(s)
	return euo
}

// SetNillableCompanyRefID sets the "company_ref_id" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableCompanyRefID(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetCompanyRefID(*s)
	}
	return euo
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (euo *EstimateUpdateOne) ClearCompanyRefID() *EstimateUpdateOne {
	euo.mutation.ClearCompanyRefID()
	return euo
}

// SetCompanyRefName sets the "company_ref_name" field.
func (euo *EstimateUpdateOne) SetCompanyRefName(s string) *EstimateUpdateOne {
	euo.mutation.SetCompanyRefName(s)
	return euo
}

// SetNillableCompanyRefName sets the "company_ref_name" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableCompanyRefName(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetCompanyRefName(*s)
	}
	return euo
}

// ClearCompanyRefName clears the value of the "company_ref_name" field.
func (euo *EstimateUpdateOne) ClearCompanyRefName() *EstimateUpdateOne {
	euo.mutation.ClearCompanyRefName()
	return euo
}

// SetFailureReason sets the "failure_reason" field.
func (euo *EstimateUpdateOne) SetFailureReason(s string) *EstimateUpdateOne {
	euo.mutation.SetFailureReason(s)
	return euo
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableFailureReason(s *string) *EstimateUpdateOne {
	if s != nil {
		euo.SetFailureReason(*s)
	}
	return euo
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (euo *EstimateUpdateOne) ClearFailureReason() *EstimateUpdateOne {
	euo.mutation.ClearFailureReason()
	return euo
}

// AddActivityIDs adds the "activities" edge to the EstimateActivity entity by IDs.
func (euo *EstimateUpdateOne) AddActivityIDs(ids ...string) *EstimateUpdateOne {
	euo.mutation.AddActivityIDs(ids...)
	return euo
}

// AddActivities adds the "activities" edges to the EstimateActivity entity.
func (euo *EstimateUpdateOne) AddActivities(e ...*EstimateActivity) *EstimateUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddActivityIDs(ids...)
}

// SetJobInfoID sets the "job_info" edge to the Job entity by ID.
func (euo *EstimateUpdateOne) SetJobInfoID(id string) *EstimateUpdateOne {
	euo.mutation.SetJobInfoID(id)
	return euo
}

// SetNillableJobInfoID sets the "job_info" edge to the Job entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableJobInfoID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetJobInfoID(*id)
	}
	return euo
}

// SetJobInfo sets the "job_info" edge to the Job entity.
func (euo *EstimateUpdateOne) SetJobInfo(j *Job) *EstimateUpdateOne {
	return euo.SetJobInfoID(j.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (euo *EstimateUpdateOne) SetPartnerID(id string) *EstimateUpdateOne {
	euo.mutation.SetPartnerID(id)
	return euo
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillablePartnerID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetPartnerID(*id)
	}
	return euo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (euo *EstimateUpdateOne) SetPartner(p *Partner) *EstimateUpdateOne {
	return euo.SetPartnerID(p.ID)
}

// SetHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID.
func (euo *EstimateUpdateOne) SetHomeOwnerID(id string) *EstimateUpdateOne {
	euo.mutation.SetHomeOwnerID(id)
	return euo
}

// SetNillableHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableHomeOwnerID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetHomeOwnerID(*id)
	}
	return euo
}

// SetHomeOwner sets the "home_owner" edge to the HomeOwner entity.
func (euo *EstimateUpdateOne) SetHomeOwner(h *HomeOwner) *EstimateUpdateOne {
	return euo.SetHomeOwnerID(h.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (euo *EstimateUpdateOne) SetSalesRepID(id string) *EstimateUpdateOne {
	euo.mutation.SetSalesRepID(id)
	return euo
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableSalesRepID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetSalesRepID(*id)
	}
	return euo
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (euo *EstimateUpdateOne) SetSalesRep(u *User) *EstimateUpdateOne {
	return euo.SetSalesRepID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (euo *EstimateUpdateOne) SetCreatorID(id string) *EstimateUpdateOne {
	euo.mutation.SetCreatorID(id)
	return euo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableCreatorID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetCreatorID(*id)
	}
	return euo
}

// SetCreator sets the "creator" edge to the User entity.
func (euo *EstimateUpdateOne) SetCreator(u *User) *EstimateUpdateOne {
	return euo.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (euo *EstimateUpdateOne) SetCreatorAPIID(id string) *EstimateUpdateOne {
	euo.mutation.SetCreatorAPIID(id)
	return euo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillableCreatorAPIID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetCreatorAPIID(*id)
	}
	return euo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (euo *EstimateUpdateOne) SetCreatorAPI(a *ApiUser) *EstimateUpdateOne {
	return euo.SetCreatorAPIID(a.ID)
}

// SetPdfID sets the "pdf" edge to the Document entity by ID.
func (euo *EstimateUpdateOne) SetPdfID(id string) *EstimateUpdateOne {
	euo.mutation.SetPdfID(id)
	return euo
}

// SetNillablePdfID sets the "pdf" edge to the Document entity by ID if the given value is not nil.
func (euo *EstimateUpdateOne) SetNillablePdfID(id *string) *EstimateUpdateOne {
	if id != nil {
		euo = euo.SetPdfID(*id)
	}
	return euo
}

// SetPdf sets the "pdf" edge to the Document entity.
func (euo *EstimateUpdateOne) SetPdf(d *Document) *EstimateUpdateOne {
	return euo.SetPdfID(d.ID)
}

// Mutation returns the EstimateMutation object of the builder.
func (euo *EstimateUpdateOne) Mutation() *EstimateMutation {
	return euo.mutation
}

// ClearActivities clears all "activities" edges to the EstimateActivity entity.
func (euo *EstimateUpdateOne) ClearActivities() *EstimateUpdateOne {
	euo.mutation.ClearActivities()
	return euo
}

// RemoveActivityIDs removes the "activities" edge to EstimateActivity entities by IDs.
func (euo *EstimateUpdateOne) RemoveActivityIDs(ids ...string) *EstimateUpdateOne {
	euo.mutation.RemoveActivityIDs(ids...)
	return euo
}

// RemoveActivities removes "activities" edges to EstimateActivity entities.
func (euo *EstimateUpdateOne) RemoveActivities(e ...*EstimateActivity) *EstimateUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveActivityIDs(ids...)
}

// ClearJobInfo clears the "job_info" edge to the Job entity.
func (euo *EstimateUpdateOne) ClearJobInfo() *EstimateUpdateOne {
	euo.mutation.ClearJobInfo()
	return euo
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (euo *EstimateUpdateOne) ClearPartner() *EstimateUpdateOne {
	euo.mutation.ClearPartner()
	return euo
}

// ClearHomeOwner clears the "home_owner" edge to the HomeOwner entity.
func (euo *EstimateUpdateOne) ClearHomeOwner() *EstimateUpdateOne {
	euo.mutation.ClearHomeOwner()
	return euo
}

// ClearSalesRep clears the "sales_rep" edge to the User entity.
func (euo *EstimateUpdateOne) ClearSalesRep() *EstimateUpdateOne {
	euo.mutation.ClearSalesRep()
	return euo
}

// ClearCreator clears the "creator" edge to the User entity.
func (euo *EstimateUpdateOne) ClearCreator() *EstimateUpdateOne {
	euo.mutation.ClearCreator()
	return euo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (euo *EstimateUpdateOne) ClearCreatorAPI() *EstimateUpdateOne {
	euo.mutation.ClearCreatorAPI()
	return euo
}

// ClearPdf clears the "pdf" edge to the Document entity.
func (euo *EstimateUpdateOne) ClearPdf() *EstimateUpdateOne {
	euo.mutation.ClearPdf()
	return euo
}

// Where appends a list predicates to the EstimateUpdate builder.
func (euo *EstimateUpdateOne) Where(ps ...predicate.Estimate) *EstimateUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EstimateUpdateOne) Select(field string, fields ...string) *EstimateUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Estimate entity.
func (euo *EstimateUpdateOne) Save(ctx context.Context) (*Estimate, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EstimateUpdateOne) SaveX(ctx context.Context) *Estimate {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EstimateUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EstimateUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EstimateUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := estimate.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EstimateUpdateOne) check() error {
	if v, ok := euo.mutation.Status(); ok {
		if err := estimate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Estimate.status": %w`, err)}
		}
	}
	if v, ok := euo.mutation.CurrentMaterial(); ok {
		if err := estimate.CurrentMaterialValidator(v); err != nil {
			return &ValidationError{Name: "current_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.current_material": %w`, err)}
		}
	}
	if v, ok := euo.mutation.NewRoofingMaterial(); ok {
		if err := estimate.NewRoofingMaterialValidator(v); err != nil {
			return &ValidationError{Name: "new_roofing_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.new_roofing_material": %w`, err)}
		}
	}
	if v, ok := euo.mutation.CurrentMaterialLowSlope(); ok {
		if err := estimate.CurrentMaterialLowSlopeValidator(v); err != nil {
			return &ValidationError{Name: "current_material_low_slope", err: fmt.Errorf(`ent: validator failed for field "Estimate.current_material_low_slope": %w`, err)}
		}
	}
	if v, ok := euo.mutation.NewRoofingMaterialLowSlope(); ok {
		if err := estimate.NewRoofingMaterialLowSlopeValidator(v); err != nil {
			return &ValidationError{Name: "new_roofing_material_low_slope", err: fmt.Errorf(`ent: validator failed for field "Estimate.new_roofing_material_low_slope": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Layer2Material(); ok {
		if err := estimate.Layer2MaterialValidator(v); err != nil {
			return &ValidationError{Name: "layer2_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.layer2_material": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Layer3Material(); ok {
		if err := estimate.Layer3MaterialValidator(v); err != nil {
			return &ValidationError{Name: "layer3_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.layer3_material": %w`, err)}
		}
	}
	if v, ok := euo.mutation.MaterialMappingNote(); ok {
		if err := estimate.MaterialMappingNoteValidator(v); err != nil {
			return &ValidationError{Name: "material_mapping_note", err: fmt.Errorf(`ent: validator failed for field "Estimate.material_mapping_note": %w`, err)}
		}
	}
	if v, ok := euo.mutation.MeasureType(); ok {
		if err := estimate.MeasureTypeValidator(v); err != nil {
			return &ValidationError{Name: "measure_type", err: fmt.Errorf(`ent: validator failed for field "Estimate.measure_type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.ExtraChargeType(); ok {
		if err := estimate.ExtraChargeTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_charge_type", err: fmt.Errorf(`ent: validator failed for field "Estimate.extra_charge_type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.CompanyRefID(); ok {
		if err := estimate.CompanyRefIDValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_id", err: fmt.Errorf(`ent: validator failed for field "Estimate.company_ref_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.CompanyRefName(); ok {
		if err := estimate.CompanyRefNameValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_name", err: fmt.Errorf(`ent: validator failed for field "Estimate.company_ref_name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.FailureReason(); ok {
		if err := estimate.FailureReasonValidator(v); err != nil {
			return &ValidationError{Name: "failure_reason", err: fmt.Errorf(`ent: validator failed for field "Estimate.failure_reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EstimateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EstimateUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EstimateUpdateOne) sqlSave(ctx context.Context) (_node *Estimate, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(estimate.Table, estimate.Columns, sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Estimate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, estimate.FieldID)
		for _, f := range fields {
			if !estimate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != estimate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(estimate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.RegionID(); ok {
		_spec.SetField(estimate.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.AddedRegionID(); ok {
		_spec.AddField(estimate.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(estimate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.CurrentMaterial(); ok {
		_spec.SetField(estimate.FieldCurrentMaterial, field.TypeString, value)
	}
	if euo.mutation.CurrentMaterialCleared() {
		_spec.ClearField(estimate.FieldCurrentMaterial, field.TypeString)
	}
	if value, ok := euo.mutation.NewRoofingMaterial(); ok {
		_spec.SetField(estimate.FieldNewRoofingMaterial, field.TypeString, value)
	}
	if euo.mutation.NewRoofingMaterialCleared() {
		_spec.ClearField(estimate.FieldNewRoofingMaterial, field.TypeString)
	}
	if value, ok := euo.mutation.LowSlope(); ok {
		_spec.SetField(estimate.FieldLowSlope, field.TypeBool, value)
	}
	if value, ok := euo.mutation.CurrentMaterialLowSlope(); ok {
		_spec.SetField(estimate.FieldCurrentMaterialLowSlope, field.TypeString, value)
	}
	if euo.mutation.CurrentMaterialLowSlopeCleared() {
		_spec.ClearField(estimate.FieldCurrentMaterialLowSlope, field.TypeString)
	}
	if value, ok := euo.mutation.NewRoofingMaterialLowSlope(); ok {
		_spec.SetField(estimate.FieldNewRoofingMaterialLowSlope, field.TypeString, value)
	}
	if euo.mutation.NewRoofingMaterialLowSlopeCleared() {
		_spec.ClearField(estimate.FieldNewRoofingMaterialLowSlope, field.TypeString)
	}
	if value, ok := euo.mutation.Redeck(); ok {
		_spec.SetField(estimate.FieldRedeck, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Layers(); ok {
		_spec.SetField(estimate.FieldLayers, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.AddedLayers(); ok {
		_spec.AddField(estimate.FieldLayers, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.Layer2Material(); ok {
		_spec.SetField(estimate.FieldLayer2Material, field.TypeString, value)
	}
	if euo.mutation.Layer2MaterialCleared() {
		_spec.ClearField(estimate.FieldLayer2Material, field.TypeString)
	}
	if value, ok := euo.mutation.Layer3Material(); ok {
		_spec.SetField(estimate.FieldLayer3Material, field.TypeString, value)
	}
	if euo.mutation.Layer3MaterialCleared() {
		_spec.ClearField(estimate.FieldLayer3Material, field.TypeString)
	}
	if value, ok := euo.mutation.PartialPercentage(); ok {
		_spec.SetField(estimate.FieldPartialPercentage, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedPartialPercentage(); ok {
		_spec.AddField(estimate.FieldPartialPercentage, field.TypeFloat64, value)
	}
	if euo.mutation.PartialPercentageCleared() {
		_spec.ClearField(estimate.FieldPartialPercentage, field.TypeFloat64)
	}
	if value, ok := euo.mutation.MaterialMappingNote(); ok {
		_spec.SetField(estimate.FieldMaterialMappingNote, field.TypeString, value)
	}
	if euo.mutation.MaterialMappingNoteCleared() {
		_spec.ClearField(estimate.FieldMaterialMappingNote, field.TypeString)
	}
	if value, ok := euo.mutation.MeasureType(); ok {
		_spec.SetField(estimate.FieldMeasureType, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.ExtraChargeType(); ok {
		_spec.SetField(estimate.FieldExtraChargeType, field.TypeEnum, value)
	}
	if euo.mutation.ExtraChargeTypeCleared() {
		_spec.ClearField(estimate.FieldExtraChargeType, field.TypeEnum)
	}
	if value, ok := euo.mutation.ExtraCharges(); ok {
		_spec.SetField(estimate.FieldExtraCharges, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedExtraCharges(); ok {
		_spec.AddField(estimate.FieldExtraCharges, field.TypeFloat64, value)
	}
	if euo.mutation.ExtraChargesCleared() {
		_spec.ClearField(estimate.FieldExtraCharges, field.TypeFloat64)
	}
	if value, ok := euo.mutation.ExtraChargeCond(); ok {
		_spec.SetField(estimate.FieldExtraChargeCond, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedExtraChargeCond(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, estimate.FieldExtraChargeCond, value)
		})
	}
	if euo.mutation.ExtraChargeCondCleared() {
		_spec.ClearField(estimate.FieldExtraChargeCond, field.TypeJSON)
	}
	if value, ok := euo.mutation.ExtraChargeNote(); ok {
		_spec.SetField(estimate.FieldExtraChargeNote, field.TypeString, value)
	}
	if euo.mutation.ExtraChargeNoteCleared() {
		_spec.ClearField(estimate.FieldExtraChargeNote, field.TypeString)
	}
	if value, ok := euo.mutation.Estimator(); ok {
		_spec.SetField(estimate.FieldEstimator, field.TypeString, value)
	}
	if euo.mutation.EstimatorCleared() {
		_spec.ClearField(estimate.FieldEstimator, field.TypeString)
	}
	if value, ok := euo.mutation.EstimatorOrderID(); ok {
		_spec.SetField(estimate.FieldEstimatorOrderID, field.TypeUint, value)
	}
	if value, ok := euo.mutation.AddedEstimatorOrderID(); ok {
		_spec.AddField(estimate.FieldEstimatorOrderID, field.TypeUint, value)
	}
	if euo.mutation.EstimatorOrderIDCleared() {
		_spec.ClearField(estimate.FieldEstimatorOrderID, field.TypeUint)
	}
	if value, ok := euo.mutation.EstimatorReportID(); ok {
		_spec.SetField(estimate.FieldEstimatorReportID, field.TypeUint, value)
	}
	if value, ok := euo.mutation.AddedEstimatorReportID(); ok {
		_spec.AddField(estimate.FieldEstimatorReportID, field.TypeUint, value)
	}
	if euo.mutation.EstimatorReportIDCleared() {
		_spec.ClearField(estimate.FieldEstimatorReportID, field.TypeUint)
	}
	if value, ok := euo.mutation.TotalSquares(); ok {
		_spec.SetField(estimate.FieldTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedTotalSquares(); ok {
		_spec.AddField(estimate.FieldTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.PrimaryPitch(); ok {
		_spec.SetField(estimate.FieldPrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedPrimaryPitch(); ok {
		_spec.AddField(estimate.FieldPrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.Price(); ok {
		_spec.SetField(estimate.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedPrice(); ok {
		_spec.AddField(estimate.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.PriceSummary(); ok {
		_spec.SetField(estimate.FieldPriceSummary, field.TypeString, value)
	}
	if euo.mutation.PriceSummaryCleared() {
		_spec.ClearField(estimate.FieldPriceSummary, field.TypeString)
	}
	if value, ok := euo.mutation.Bounds(); ok {
		_spec.SetField(estimate.FieldBounds, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedBounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, estimate.FieldBounds, value)
		})
	}
	if euo.mutation.BoundsCleared() {
		_spec.ClearField(estimate.FieldBounds, field.TypeJSON)
	}
	if value, ok := euo.mutation.EstimatorRawResponse(); ok {
		_spec.SetField(estimate.FieldEstimatorRawResponse, field.TypeJSON, value)
	}
	if euo.mutation.EstimatorRawResponseCleared() {
		_spec.ClearField(estimate.FieldEstimatorRawResponse, field.TypeJSON)
	}
	if value, ok := euo.mutation.Override(); ok {
		_spec.SetField(estimate.FieldOverride, field.TypeBool, value)
	}
	if euo.mutation.OverrideCleared() {
		_spec.ClearField(estimate.FieldOverride, field.TypeBool)
	}
	if value, ok := euo.mutation.OverrideTotalSquares(); ok {
		_spec.SetField(estimate.FieldOverrideTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedOverrideTotalSquares(); ok {
		_spec.AddField(estimate.FieldOverrideTotalSquares, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.OverridePrimaryPitch(); ok {
		_spec.SetField(estimate.FieldOverridePrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedOverridePrimaryPitch(); ok {
		_spec.AddField(estimate.FieldOverridePrimaryPitch, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.OverridePrice(); ok {
		_spec.SetField(estimate.FieldOverridePrice, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedOverridePrice(); ok {
		_spec.AddField(estimate.FieldOverridePrice, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.OverridePriceSummary(); ok {
		_spec.SetField(estimate.FieldOverridePriceSummary, field.TypeString, value)
	}
	if euo.mutation.OverridePriceSummaryCleared() {
		_spec.ClearField(estimate.FieldOverridePriceSummary, field.TypeString)
	}
	if value, ok := euo.mutation.CompanyRefID(); ok {
		_spec.SetField(estimate.FieldCompanyRefID, field.TypeString, value)
	}
	if euo.mutation.CompanyRefIDCleared() {
		_spec.ClearField(estimate.FieldCompanyRefID, field.TypeString)
	}
	if value, ok := euo.mutation.CompanyRefName(); ok {
		_spec.SetField(estimate.FieldCompanyRefName, field.TypeString, value)
	}
	if euo.mutation.CompanyRefNameCleared() {
		_spec.ClearField(estimate.FieldCompanyRefName, field.TypeString)
	}
	if value, ok := euo.mutation.FailureReason(); ok {
		_spec.SetField(estimate.FieldFailureReason, field.TypeString, value)
	}
	if euo.mutation.FailureReasonCleared() {
		_spec.ClearField(estimate.FieldFailureReason, field.TypeString)
	}
	if euo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !euo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.JobInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   estimate.JobInfoTable,
			Columns: []string{estimate.JobInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.JobInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   estimate.JobInfoTable,
			Columns: []string{estimate.JobInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.PartnerTable,
			Columns: []string{estimate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.PartnerTable,
			Columns: []string{estimate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.HomeOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.HomeOwnerTable,
			Columns: []string{estimate.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.HomeOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.HomeOwnerTable,
			Columns: []string{estimate.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SalesRepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.SalesRepTable,
			Columns: []string{estimate.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.SalesRepTable,
			Columns: []string{estimate.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorTable,
			Columns: []string{estimate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorTable,
			Columns: []string{estimate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorAPITable,
			Columns: []string{estimate.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorAPITable,
			Columns: []string{estimate.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   estimate.PdfTable,
			Columns: []string{estimate.PdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   estimate.PdfTable,
			Columns: []string{estimate.PdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Estimate{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{estimate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

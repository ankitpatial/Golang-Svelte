// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelMessageCreate is the builder for creating a ChannelMessage entity.
type ChannelMessageCreate struct {
	config
	mutation *ChannelMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cmc *ChannelMessageCreate) SetCreatedAt(t time.Time) *ChannelMessageCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableCreatedAt(t *time.Time) *ChannelMessageCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetUpdatedAt sets the "updated_at" field.
func (cmc *ChannelMessageCreate) SetUpdatedAt(t time.Time) *ChannelMessageCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableUpdatedAt(t *time.Time) *ChannelMessageCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// SetTitle sets the "title" field.
func (cmc *ChannelMessageCreate) SetTitle(s string) *ChannelMessageCreate {
	cmc.mutation.SetTitle(s)
	return cmc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableTitle(s *string) *ChannelMessageCreate {
	if s != nil {
		cmc.SetTitle(*s)
	}
	return cmc
}

// SetMessage sets the "message" field.
func (cmc *ChannelMessageCreate) SetMessage(s string) *ChannelMessageCreate {
	cmc.mutation.SetMessage(s)
	return cmc
}

// SetFromName sets the "from_name" field.
func (cmc *ChannelMessageCreate) SetFromName(s string) *ChannelMessageCreate {
	cmc.mutation.SetFromName(s)
	return cmc
}

// SetToName sets the "to_name" field.
func (cmc *ChannelMessageCreate) SetToName(s string) *ChannelMessageCreate {
	cmc.mutation.SetToName(s)
	return cmc
}

// SetNillableToName sets the "to_name" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableToName(s *string) *ChannelMessageCreate {
	if s != nil {
		cmc.SetToName(*s)
	}
	return cmc
}

// SetPrivate sets the "private" field.
func (cmc *ChannelMessageCreate) SetPrivate(b bool) *ChannelMessageCreate {
	cmc.mutation.SetPrivate(b)
	return cmc
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillablePrivate(b *bool) *ChannelMessageCreate {
	if b != nil {
		cmc.SetPrivate(*b)
	}
	return cmc
}

// SetUnread sets the "unread" field.
func (cmc *ChannelMessageCreate) SetUnread(b bool) *ChannelMessageCreate {
	cmc.mutation.SetUnread(b)
	return cmc
}

// SetNillableUnread sets the "unread" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableUnread(b *bool) *ChannelMessageCreate {
	if b != nil {
		cmc.SetUnread(*b)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *ChannelMessageCreate) SetID(s string) *ChannelMessageCreate {
	cmc.mutation.SetID(s)
	return cmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableID(s *string) *ChannelMessageCreate {
	if s != nil {
		cmc.SetID(*s)
	}
	return cmc
}

// AddReadIDs adds the "reads" edge to the ChannelMessageRead entity by IDs.
func (cmc *ChannelMessageCreate) AddReadIDs(ids ...string) *ChannelMessageCreate {
	cmc.mutation.AddReadIDs(ids...)
	return cmc
}

// AddReads adds the "reads" edges to the ChannelMessageRead entity.
func (cmc *ChannelMessageCreate) AddReads(c ...*ChannelMessageRead) *ChannelMessageCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmc.AddReadIDs(ids...)
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (cmc *ChannelMessageCreate) SetChannelID(id string) *ChannelMessageCreate {
	cmc.mutation.SetChannelID(id)
	return cmc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (cmc *ChannelMessageCreate) SetChannel(c *Channel) *ChannelMessageCreate {
	return cmc.SetChannelID(c.ID)
}

// SetFromID sets the "from" edge to the User entity by ID.
func (cmc *ChannelMessageCreate) SetFromID(id string) *ChannelMessageCreate {
	cmc.mutation.SetFromID(id)
	return cmc
}

// SetNillableFromID sets the "from" edge to the User entity by ID if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableFromID(id *string) *ChannelMessageCreate {
	if id != nil {
		cmc = cmc.SetFromID(*id)
	}
	return cmc
}

// SetFrom sets the "from" edge to the User entity.
func (cmc *ChannelMessageCreate) SetFrom(u *User) *ChannelMessageCreate {
	return cmc.SetFromID(u.ID)
}

// SetFromAPIUserID sets the "from_api_user" edge to the ApiUser entity by ID.
func (cmc *ChannelMessageCreate) SetFromAPIUserID(id string) *ChannelMessageCreate {
	cmc.mutation.SetFromAPIUserID(id)
	return cmc
}

// SetNillableFromAPIUserID sets the "from_api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableFromAPIUserID(id *string) *ChannelMessageCreate {
	if id != nil {
		cmc = cmc.SetFromAPIUserID(*id)
	}
	return cmc
}

// SetFromAPIUser sets the "from_api_user" edge to the ApiUser entity.
func (cmc *ChannelMessageCreate) SetFromAPIUser(a *ApiUser) *ChannelMessageCreate {
	return cmc.SetFromAPIUserID(a.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (cmc *ChannelMessageCreate) SetToID(id string) *ChannelMessageCreate {
	cmc.mutation.SetToID(id)
	return cmc
}

// SetNillableToID sets the "to" edge to the User entity by ID if the given value is not nil.
func (cmc *ChannelMessageCreate) SetNillableToID(id *string) *ChannelMessageCreate {
	if id != nil {
		cmc = cmc.SetToID(*id)
	}
	return cmc
}

// SetTo sets the "to" edge to the User entity.
func (cmc *ChannelMessageCreate) SetTo(u *User) *ChannelMessageCreate {
	return cmc.SetToID(u.ID)
}

// Mutation returns the ChannelMessageMutation object of the builder.
func (cmc *ChannelMessageCreate) Mutation() *ChannelMessageMutation {
	return cmc.mutation
}

// Save creates the ChannelMessage in the database.
func (cmc *ChannelMessageCreate) Save(ctx context.Context) (*ChannelMessage, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ChannelMessageCreate) SaveX(ctx context.Context) *ChannelMessage {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ChannelMessageCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ChannelMessageCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *ChannelMessageCreate) defaults() {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := channelmessage.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := channelmessage.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cmc.mutation.Private(); !ok {
		v := channelmessage.DefaultPrivate
		cmc.mutation.SetPrivate(v)
	}
	if _, ok := cmc.mutation.ID(); !ok {
		v := channelmessage.DefaultID()
		cmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ChannelMessageCreate) check() error {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChannelMessage.created_at"`)}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChannelMessage.updated_at"`)}
	}
	if v, ok := cmc.mutation.Title(); ok {
		if err := channelmessage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.title": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "ChannelMessage.message"`)}
	}
	if v, ok := cmc.mutation.Message(); ok {
		if err := channelmessage.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.message": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.FromName(); !ok {
		return &ValidationError{Name: "from_name", err: errors.New(`ent: missing required field "ChannelMessage.from_name"`)}
	}
	if v, ok := cmc.mutation.FromName(); ok {
		if err := channelmessage.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "from_name", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.from_name": %w`, err)}
		}
	}
	if v, ok := cmc.mutation.ToName(); ok {
		if err := channelmessage.ToNameValidator(v); err != nil {
			return &ValidationError{Name: "to_name", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.to_name": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`ent: missing required field "ChannelMessage.private"`)}
	}
	if v, ok := cmc.mutation.ID(); ok {
		if err := channelmessage.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.id": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "ChannelMessage.channel"`)}
	}
	return nil
}

func (cmc *ChannelMessageCreate) sqlSave(ctx context.Context) (*ChannelMessage, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ChannelMessage.ID type: %T", _spec.ID.Value)
		}
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *ChannelMessageCreate) createSpec() (*ChannelMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ChannelMessage{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(channelmessage.Table, sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString))
	)
	_spec.OnConflict = cmc.conflict
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(channelmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.SetField(channelmessage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cmc.mutation.Title(); ok {
		_spec.SetField(channelmessage.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cmc.mutation.Message(); ok {
		_spec.SetField(channelmessage.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := cmc.mutation.FromName(); ok {
		_spec.SetField(channelmessage.FieldFromName, field.TypeString, value)
		_node.FromName = value
	}
	if value, ok := cmc.mutation.ToName(); ok {
		_spec.SetField(channelmessage.FieldToName, field.TypeString, value)
		_node.ToName = value
	}
	if value, ok := cmc.mutation.Private(); ok {
		_spec.SetField(channelmessage.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := cmc.mutation.Unread(); ok {
		_spec.SetField(channelmessage.FieldUnread, field.TypeBool, value)
		_node.Unread = value
	}
	if nodes := cmc.mutation.ReadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ChannelTable,
			Columns: []string{channelmessage.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromTable,
			Columns: []string{channelmessage.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.from_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.FromAPIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromAPIUserTable,
			Columns: []string{channelmessage.FromAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.from_api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ToTable,
			Columns: []string{channelmessage.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.to_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelMessage.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelMessageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cmc *ChannelMessageCreate) OnConflict(opts ...sql.ConflictOption) *ChannelMessageUpsertOne {
	cmc.conflict = opts
	return &ChannelMessageUpsertOne{
		create: cmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmc *ChannelMessageCreate) OnConflictColumns(columns ...string) *ChannelMessageUpsertOne {
	cmc.conflict = append(cmc.conflict, sql.ConflictColumns(columns...))
	return &ChannelMessageUpsertOne{
		create: cmc,
	}
}

type (
	// ChannelMessageUpsertOne is the builder for "upsert"-ing
	//  one ChannelMessage node.
	ChannelMessageUpsertOne struct {
		create *ChannelMessageCreate
	}

	// ChannelMessageUpsert is the "OnConflict" setter.
	ChannelMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelMessageUpsert) SetUpdatedAt(v time.Time) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdateUpdatedAt() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldUpdatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *ChannelMessageUpsert) SetTitle(v string) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdateTitle() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *ChannelMessageUpsert) ClearTitle() *ChannelMessageUpsert {
	u.SetNull(channelmessage.FieldTitle)
	return u
}

// SetMessage sets the "message" field.
func (u *ChannelMessageUpsert) SetMessage(v string) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdateMessage() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldMessage)
	return u
}

// SetFromName sets the "from_name" field.
func (u *ChannelMessageUpsert) SetFromName(v string) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldFromName, v)
	return u
}

// UpdateFromName sets the "from_name" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdateFromName() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldFromName)
	return u
}

// SetToName sets the "to_name" field.
func (u *ChannelMessageUpsert) SetToName(v string) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldToName, v)
	return u
}

// UpdateToName sets the "to_name" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdateToName() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldToName)
	return u
}

// ClearToName clears the value of the "to_name" field.
func (u *ChannelMessageUpsert) ClearToName() *ChannelMessageUpsert {
	u.SetNull(channelmessage.FieldToName)
	return u
}

// SetPrivate sets the "private" field.
func (u *ChannelMessageUpsert) SetPrivate(v bool) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldPrivate, v)
	return u
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdatePrivate() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldPrivate)
	return u
}

// SetUnread sets the "unread" field.
func (u *ChannelMessageUpsert) SetUnread(v bool) *ChannelMessageUpsert {
	u.Set(channelmessage.FieldUnread, v)
	return u
}

// UpdateUnread sets the "unread" field to the value that was provided on create.
func (u *ChannelMessageUpsert) UpdateUnread() *ChannelMessageUpsert {
	u.SetExcluded(channelmessage.FieldUnread)
	return u
}

// ClearUnread clears the value of the "unread" field.
func (u *ChannelMessageUpsert) ClearUnread() *ChannelMessageUpsert {
	u.SetNull(channelmessage.FieldUnread)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChannelMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelmessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelMessageUpsertOne) UpdateNewValues() *ChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(channelmessage.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channelmessage.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelMessageUpsertOne) Ignore() *ChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelMessageUpsertOne) DoNothing() *ChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelMessageCreate.OnConflict
// documentation for more info.
func (u *ChannelMessageUpsertOne) Update(set func(*ChannelMessageUpsert)) *ChannelMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelMessageUpsertOne) SetUpdatedAt(v time.Time) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdateUpdatedAt() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *ChannelMessageUpsertOne) SetTitle(v string) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdateTitle() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ChannelMessageUpsertOne) ClearTitle() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.ClearTitle()
	})
}

// SetMessage sets the "message" field.
func (u *ChannelMessageUpsertOne) SetMessage(v string) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdateMessage() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateMessage()
	})
}

// SetFromName sets the "from_name" field.
func (u *ChannelMessageUpsertOne) SetFromName(v string) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetFromName(v)
	})
}

// UpdateFromName sets the "from_name" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdateFromName() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateFromName()
	})
}

// SetToName sets the "to_name" field.
func (u *ChannelMessageUpsertOne) SetToName(v string) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetToName(v)
	})
}

// UpdateToName sets the "to_name" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdateToName() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateToName()
	})
}

// ClearToName clears the value of the "to_name" field.
func (u *ChannelMessageUpsertOne) ClearToName() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.ClearToName()
	})
}

// SetPrivate sets the "private" field.
func (u *ChannelMessageUpsertOne) SetPrivate(v bool) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdatePrivate() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdatePrivate()
	})
}

// SetUnread sets the "unread" field.
func (u *ChannelMessageUpsertOne) SetUnread(v bool) *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetUnread(v)
	})
}

// UpdateUnread sets the "unread" field to the value that was provided on create.
func (u *ChannelMessageUpsertOne) UpdateUnread() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateUnread()
	})
}

// ClearUnread clears the value of the "unread" field.
func (u *ChannelMessageUpsertOne) ClearUnread() *ChannelMessageUpsertOne {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.ClearUnread()
	})
}

// Exec executes the query.
func (u *ChannelMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChannelMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelMessageUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ChannelMessageUpsertOne.ID is not supported by MySQL driver. Use ChannelMessageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelMessageUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelMessageCreateBulk is the builder for creating many ChannelMessage entities in bulk.
type ChannelMessageCreateBulk struct {
	config
	builders []*ChannelMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the ChannelMessage entities in the database.
func (cmcb *ChannelMessageCreateBulk) Save(ctx context.Context) ([]*ChannelMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ChannelMessage, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ChannelMessageCreateBulk) SaveX(ctx context.Context) []*ChannelMessage {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ChannelMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ChannelMessageCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelMessageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cmcb *ChannelMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelMessageUpsertBulk {
	cmcb.conflict = opts
	return &ChannelMessageUpsertBulk{
		create: cmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmcb *ChannelMessageCreateBulk) OnConflictColumns(columns ...string) *ChannelMessageUpsertBulk {
	cmcb.conflict = append(cmcb.conflict, sql.ConflictColumns(columns...))
	return &ChannelMessageUpsertBulk{
		create: cmcb,
	}
}

// ChannelMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of ChannelMessage nodes.
type ChannelMessageUpsertBulk struct {
	create *ChannelMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChannelMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelmessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelMessageUpsertBulk) UpdateNewValues() *ChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(channelmessage.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channelmessage.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelMessageUpsertBulk) Ignore() *ChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelMessageUpsertBulk) DoNothing() *ChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelMessageCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelMessageUpsertBulk) Update(set func(*ChannelMessageUpsert)) *ChannelMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelMessageUpsertBulk) SetUpdatedAt(v time.Time) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdateUpdatedAt() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *ChannelMessageUpsertBulk) SetTitle(v string) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdateTitle() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ChannelMessageUpsertBulk) ClearTitle() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.ClearTitle()
	})
}

// SetMessage sets the "message" field.
func (u *ChannelMessageUpsertBulk) SetMessage(v string) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdateMessage() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateMessage()
	})
}

// SetFromName sets the "from_name" field.
func (u *ChannelMessageUpsertBulk) SetFromName(v string) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetFromName(v)
	})
}

// UpdateFromName sets the "from_name" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdateFromName() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateFromName()
	})
}

// SetToName sets the "to_name" field.
func (u *ChannelMessageUpsertBulk) SetToName(v string) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetToName(v)
	})
}

// UpdateToName sets the "to_name" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdateToName() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateToName()
	})
}

// ClearToName clears the value of the "to_name" field.
func (u *ChannelMessageUpsertBulk) ClearToName() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.ClearToName()
	})
}

// SetPrivate sets the "private" field.
func (u *ChannelMessageUpsertBulk) SetPrivate(v bool) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdatePrivate() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdatePrivate()
	})
}

// SetUnread sets the "unread" field.
func (u *ChannelMessageUpsertBulk) SetUnread(v bool) *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.SetUnread(v)
	})
}

// UpdateUnread sets the "unread" field to the value that was provided on create.
func (u *ChannelMessageUpsertBulk) UpdateUnread() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.UpdateUnread()
	})
}

// ClearUnread clears the value of the "unread" field.
func (u *ChannelMessageUpsertBulk) ClearUnread() *ChannelMessageUpsertBulk {
	return u.Update(func(s *ChannelMessageUpsert) {
		s.ClearUnread()
	})
}

// Exec executes the query.
func (u *ChannelMessageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChannelMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChannelMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

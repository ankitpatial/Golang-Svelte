// Code generated by ent, DO NOT EDIT.

package job

import (
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProgressAt applies equality check predicate on the "progress_at" field. It's identical to ProgressAtEQ.
func ProgressAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProgressAt, v))
}

// ProgressFlagAt applies equality check predicate on the "progress_flag_at" field. It's identical to ProgressFlagAtEQ.
func ProgressFlagAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProgressFlagAt, v))
}

// RegionID applies equality check predicate on the "region_id" field. It's identical to RegionIDEQ.
func RegionID(v uint8) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRegionID, v))
}

// CompanyRefID applies equality check predicate on the "company_ref_id" field. It's identical to CompanyRefIDEQ.
func CompanyRefID(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompanyRefID, v))
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompanyName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPrice, v))
}

// WorkOrderPrice applies equality check predicate on the "work_order_price" field. It's identical to WorkOrderPriceEQ.
func WorkOrderPrice(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldWorkOrderPrice, v))
}

// ContractPrice applies equality check predicate on the "contract_price" field. It's identical to ContractPriceEQ.
func ContractPrice(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldContractPrice, v))
}

// ChangeOrderPrice applies equality check predicate on the "change_order_price" field. It's identical to ChangeOrderPriceEQ.
func ChangeOrderPrice(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldChangeOrderPrice, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldNote, v))
}

// ShingleColor applies equality check predicate on the "shingle_color" field. It's identical to ShingleColorEQ.
func ShingleColor(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldShingleColor, v))
}

// PermitRequired applies equality check predicate on the "permit_required" field. It's identical to PermitRequiredEQ.
func PermitRequired(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPermitRequired, v))
}

// InspectionRequired applies equality check predicate on the "inspection_required" field. It's identical to InspectionRequiredEQ.
func InspectionRequired(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInspectionRequired, v))
}

// InspectionDate applies equality check predicate on the "inspection_date" field. It's identical to InspectionDateEQ.
func InspectionDate(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInspectionDate, v))
}

// ProgressInspectionDate applies equality check predicate on the "progress_inspection_date" field. It's identical to ProgressInspectionDateEQ.
func ProgressInspectionDate(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProgressInspectionDate, v))
}

// InstallDate applies equality check predicate on the "install_date" field. It's identical to InstallDateEQ.
func InstallDate(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInstallDate, v))
}

// CompletionDate applies equality check predicate on the "completion_date" field. It's identical to CompletionDateEQ.
func CompletionDate(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompletionDate, v))
}

// MaterialDeliveryDate applies equality check predicate on the "material_delivery_date" field. It's identical to MaterialDeliveryDateEQ.
func MaterialDeliveryDate(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaterialDeliveryDate, v))
}

// Agree applies equality check predicate on the "agree" field. It's identical to AgreeEQ.
func Agree(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAgree, v))
}

// AgreeAt applies equality check predicate on the "agree_at" field. It's identical to AgreeAtEQ.
func AgreeAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAgreeAt, v))
}

// PoNumber applies equality check predicate on the "po_number" field. It's identical to PoNumberEQ.
func PoNumber(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPoNumber, v))
}

// RoofingPartnerAssignedAt applies equality check predicate on the "roofing_partner_assigned_at" field. It's identical to RoofingPartnerAssignedAtEQ.
func RoofingPartnerAssignedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerFlagAt applies equality check predicate on the "roofing_partner_flag_at" field. It's identical to RoofingPartnerFlagAtEQ.
func RoofingPartnerFlagAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRoofingPartnerFlagAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v enum.JobProgress) predicate.Job {
	vc := v
	return predicate.Job(sql.FieldEQ(FieldProgress, vc))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v enum.JobProgress) predicate.Job {
	vc := v
	return predicate.Job(sql.FieldNEQ(FieldProgress, vc))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...enum.JobProgress) predicate.Job {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Job(sql.FieldIn(FieldProgress, v...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...enum.JobProgress) predicate.Job {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Job(sql.FieldNotIn(FieldProgress, v...))
}

// ProgressIsNil applies the IsNil predicate on the "progress" field.
func ProgressIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldProgress))
}

// ProgressNotNil applies the NotNil predicate on the "progress" field.
func ProgressNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldProgress))
}

// ProgressAtEQ applies the EQ predicate on the "progress_at" field.
func ProgressAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProgressAt, v))
}

// ProgressAtNEQ applies the NEQ predicate on the "progress_at" field.
func ProgressAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldProgressAt, v))
}

// ProgressAtIn applies the In predicate on the "progress_at" field.
func ProgressAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldProgressAt, vs...))
}

// ProgressAtNotIn applies the NotIn predicate on the "progress_at" field.
func ProgressAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldProgressAt, vs...))
}

// ProgressAtGT applies the GT predicate on the "progress_at" field.
func ProgressAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldProgressAt, v))
}

// ProgressAtGTE applies the GTE predicate on the "progress_at" field.
func ProgressAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldProgressAt, v))
}

// ProgressAtLT applies the LT predicate on the "progress_at" field.
func ProgressAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldProgressAt, v))
}

// ProgressAtLTE applies the LTE predicate on the "progress_at" field.
func ProgressAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldProgressAt, v))
}

// ProgressAtIsNil applies the IsNil predicate on the "progress_at" field.
func ProgressAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldProgressAt))
}

// ProgressAtNotNil applies the NotNil predicate on the "progress_at" field.
func ProgressAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldProgressAt))
}

// ProgressFlagAtEQ applies the EQ predicate on the "progress_flag_at" field.
func ProgressFlagAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProgressFlagAt, v))
}

// ProgressFlagAtNEQ applies the NEQ predicate on the "progress_flag_at" field.
func ProgressFlagAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldProgressFlagAt, v))
}

// ProgressFlagAtIn applies the In predicate on the "progress_flag_at" field.
func ProgressFlagAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldProgressFlagAt, vs...))
}

// ProgressFlagAtNotIn applies the NotIn predicate on the "progress_flag_at" field.
func ProgressFlagAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldProgressFlagAt, vs...))
}

// ProgressFlagAtGT applies the GT predicate on the "progress_flag_at" field.
func ProgressFlagAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldProgressFlagAt, v))
}

// ProgressFlagAtGTE applies the GTE predicate on the "progress_flag_at" field.
func ProgressFlagAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldProgressFlagAt, v))
}

// ProgressFlagAtLT applies the LT predicate on the "progress_flag_at" field.
func ProgressFlagAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldProgressFlagAt, v))
}

// ProgressFlagAtLTE applies the LTE predicate on the "progress_flag_at" field.
func ProgressFlagAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldProgressFlagAt, v))
}

// ProgressFlagAtIsNil applies the IsNil predicate on the "progress_flag_at" field.
func ProgressFlagAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldProgressFlagAt))
}

// ProgressFlagAtNotNil applies the NotNil predicate on the "progress_flag_at" field.
func ProgressFlagAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldProgressFlagAt))
}

// RegionIDEQ applies the EQ predicate on the "region_id" field.
func RegionIDEQ(v uint8) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRegionID, v))
}

// RegionIDNEQ applies the NEQ predicate on the "region_id" field.
func RegionIDNEQ(v uint8) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRegionID, v))
}

// RegionIDIn applies the In predicate on the "region_id" field.
func RegionIDIn(vs ...uint8) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRegionID, vs...))
}

// RegionIDNotIn applies the NotIn predicate on the "region_id" field.
func RegionIDNotIn(vs ...uint8) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRegionID, vs...))
}

// RegionIDGT applies the GT predicate on the "region_id" field.
func RegionIDGT(v uint8) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRegionID, v))
}

// RegionIDGTE applies the GTE predicate on the "region_id" field.
func RegionIDGTE(v uint8) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRegionID, v))
}

// RegionIDLT applies the LT predicate on the "region_id" field.
func RegionIDLT(v uint8) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRegionID, v))
}

// RegionIDLTE applies the LTE predicate on the "region_id" field.
func RegionIDLTE(v uint8) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRegionID, v))
}

// RegionIDIsNil applies the IsNil predicate on the "region_id" field.
func RegionIDIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldRegionID))
}

// RegionIDNotNil applies the NotNil predicate on the "region_id" field.
func RegionIDNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldRegionID))
}

// CompanyRefIDEQ applies the EQ predicate on the "company_ref_id" field.
func CompanyRefIDEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompanyRefID, v))
}

// CompanyRefIDNEQ applies the NEQ predicate on the "company_ref_id" field.
func CompanyRefIDNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCompanyRefID, v))
}

// CompanyRefIDIn applies the In predicate on the "company_ref_id" field.
func CompanyRefIDIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCompanyRefID, vs...))
}

// CompanyRefIDNotIn applies the NotIn predicate on the "company_ref_id" field.
func CompanyRefIDNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCompanyRefID, vs...))
}

// CompanyRefIDGT applies the GT predicate on the "company_ref_id" field.
func CompanyRefIDGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCompanyRefID, v))
}

// CompanyRefIDGTE applies the GTE predicate on the "company_ref_id" field.
func CompanyRefIDGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCompanyRefID, v))
}

// CompanyRefIDLT applies the LT predicate on the "company_ref_id" field.
func CompanyRefIDLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCompanyRefID, v))
}

// CompanyRefIDLTE applies the LTE predicate on the "company_ref_id" field.
func CompanyRefIDLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCompanyRefID, v))
}

// CompanyRefIDContains applies the Contains predicate on the "company_ref_id" field.
func CompanyRefIDContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCompanyRefID, v))
}

// CompanyRefIDHasPrefix applies the HasPrefix predicate on the "company_ref_id" field.
func CompanyRefIDHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCompanyRefID, v))
}

// CompanyRefIDHasSuffix applies the HasSuffix predicate on the "company_ref_id" field.
func CompanyRefIDHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCompanyRefID, v))
}

// CompanyRefIDIsNil applies the IsNil predicate on the "company_ref_id" field.
func CompanyRefIDIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldCompanyRefID))
}

// CompanyRefIDNotNil applies the NotNil predicate on the "company_ref_id" field.
func CompanyRefIDNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldCompanyRefID))
}

// CompanyRefIDEqualFold applies the EqualFold predicate on the "company_ref_id" field.
func CompanyRefIDEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCompanyRefID, v))
}

// CompanyRefIDContainsFold applies the ContainsFold predicate on the "company_ref_id" field.
func CompanyRefIDContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCompanyRefID, v))
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCompanyName, v))
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCompanyName, vs...))
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCompanyName, vs...))
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCompanyName, v))
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCompanyName, v))
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCompanyName, v))
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCompanyName, v))
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCompanyName, v))
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCompanyName, v))
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCompanyName, v))
}

// CompanyNameIsNil applies the IsNil predicate on the "company_name" field.
func CompanyNameIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldCompanyName))
}

// CompanyNameNotNil applies the NotNil predicate on the "company_name" field.
func CompanyNameNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldCompanyName))
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCompanyName, v))
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCompanyName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPrice, v))
}

// WorkOrderPriceEQ applies the EQ predicate on the "work_order_price" field.
func WorkOrderPriceEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldWorkOrderPrice, v))
}

// WorkOrderPriceNEQ applies the NEQ predicate on the "work_order_price" field.
func WorkOrderPriceNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldWorkOrderPrice, v))
}

// WorkOrderPriceIn applies the In predicate on the "work_order_price" field.
func WorkOrderPriceIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldWorkOrderPrice, vs...))
}

// WorkOrderPriceNotIn applies the NotIn predicate on the "work_order_price" field.
func WorkOrderPriceNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldWorkOrderPrice, vs...))
}

// WorkOrderPriceGT applies the GT predicate on the "work_order_price" field.
func WorkOrderPriceGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldWorkOrderPrice, v))
}

// WorkOrderPriceGTE applies the GTE predicate on the "work_order_price" field.
func WorkOrderPriceGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldWorkOrderPrice, v))
}

// WorkOrderPriceLT applies the LT predicate on the "work_order_price" field.
func WorkOrderPriceLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldWorkOrderPrice, v))
}

// WorkOrderPriceLTE applies the LTE predicate on the "work_order_price" field.
func WorkOrderPriceLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldWorkOrderPrice, v))
}

// ContractPriceEQ applies the EQ predicate on the "contract_price" field.
func ContractPriceEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldContractPrice, v))
}

// ContractPriceNEQ applies the NEQ predicate on the "contract_price" field.
func ContractPriceNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldContractPrice, v))
}

// ContractPriceIn applies the In predicate on the "contract_price" field.
func ContractPriceIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldContractPrice, vs...))
}

// ContractPriceNotIn applies the NotIn predicate on the "contract_price" field.
func ContractPriceNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldContractPrice, vs...))
}

// ContractPriceGT applies the GT predicate on the "contract_price" field.
func ContractPriceGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldContractPrice, v))
}

// ContractPriceGTE applies the GTE predicate on the "contract_price" field.
func ContractPriceGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldContractPrice, v))
}

// ContractPriceLT applies the LT predicate on the "contract_price" field.
func ContractPriceLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldContractPrice, v))
}

// ContractPriceLTE applies the LTE predicate on the "contract_price" field.
func ContractPriceLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldContractPrice, v))
}

// ContractPriceIsNil applies the IsNil predicate on the "contract_price" field.
func ContractPriceIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldContractPrice))
}

// ContractPriceNotNil applies the NotNil predicate on the "contract_price" field.
func ContractPriceNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldContractPrice))
}

// ChangeOrderPriceEQ applies the EQ predicate on the "change_order_price" field.
func ChangeOrderPriceEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldChangeOrderPrice, v))
}

// ChangeOrderPriceNEQ applies the NEQ predicate on the "change_order_price" field.
func ChangeOrderPriceNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldChangeOrderPrice, v))
}

// ChangeOrderPriceIn applies the In predicate on the "change_order_price" field.
func ChangeOrderPriceIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldChangeOrderPrice, vs...))
}

// ChangeOrderPriceNotIn applies the NotIn predicate on the "change_order_price" field.
func ChangeOrderPriceNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldChangeOrderPrice, vs...))
}

// ChangeOrderPriceGT applies the GT predicate on the "change_order_price" field.
func ChangeOrderPriceGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldChangeOrderPrice, v))
}

// ChangeOrderPriceGTE applies the GTE predicate on the "change_order_price" field.
func ChangeOrderPriceGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldChangeOrderPrice, v))
}

// ChangeOrderPriceLT applies the LT predicate on the "change_order_price" field.
func ChangeOrderPriceLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldChangeOrderPrice, v))
}

// ChangeOrderPriceLTE applies the LTE predicate on the "change_order_price" field.
func ChangeOrderPriceLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldChangeOrderPrice, v))
}

// ChangeOrderPriceIsNil applies the IsNil predicate on the "change_order_price" field.
func ChangeOrderPriceIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldChangeOrderPrice))
}

// ChangeOrderPriceNotNil applies the NotNil predicate on the "change_order_price" field.
func ChangeOrderPriceNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldChangeOrderPrice))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldNote, v))
}

// ShingleColorEQ applies the EQ predicate on the "shingle_color" field.
func ShingleColorEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldShingleColor, v))
}

// ShingleColorNEQ applies the NEQ predicate on the "shingle_color" field.
func ShingleColorNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldShingleColor, v))
}

// ShingleColorIn applies the In predicate on the "shingle_color" field.
func ShingleColorIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldShingleColor, vs...))
}

// ShingleColorNotIn applies the NotIn predicate on the "shingle_color" field.
func ShingleColorNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldShingleColor, vs...))
}

// ShingleColorGT applies the GT predicate on the "shingle_color" field.
func ShingleColorGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldShingleColor, v))
}

// ShingleColorGTE applies the GTE predicate on the "shingle_color" field.
func ShingleColorGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldShingleColor, v))
}

// ShingleColorLT applies the LT predicate on the "shingle_color" field.
func ShingleColorLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldShingleColor, v))
}

// ShingleColorLTE applies the LTE predicate on the "shingle_color" field.
func ShingleColorLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldShingleColor, v))
}

// ShingleColorContains applies the Contains predicate on the "shingle_color" field.
func ShingleColorContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldShingleColor, v))
}

// ShingleColorHasPrefix applies the HasPrefix predicate on the "shingle_color" field.
func ShingleColorHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldShingleColor, v))
}

// ShingleColorHasSuffix applies the HasSuffix predicate on the "shingle_color" field.
func ShingleColorHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldShingleColor, v))
}

// ShingleColorIsNil applies the IsNil predicate on the "shingle_color" field.
func ShingleColorIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldShingleColor))
}

// ShingleColorNotNil applies the NotNil predicate on the "shingle_color" field.
func ShingleColorNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldShingleColor))
}

// ShingleColorEqualFold applies the EqualFold predicate on the "shingle_color" field.
func ShingleColorEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldShingleColor, v))
}

// ShingleColorContainsFold applies the ContainsFold predicate on the "shingle_color" field.
func ShingleColorContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldShingleColor, v))
}

// PermitRequiredEQ applies the EQ predicate on the "permit_required" field.
func PermitRequiredEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPermitRequired, v))
}

// PermitRequiredNEQ applies the NEQ predicate on the "permit_required" field.
func PermitRequiredNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPermitRequired, v))
}

// PermitRequiredIsNil applies the IsNil predicate on the "permit_required" field.
func PermitRequiredIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldPermitRequired))
}

// PermitRequiredNotNil applies the NotNil predicate on the "permit_required" field.
func PermitRequiredNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldPermitRequired))
}

// InspectionRequiredEQ applies the EQ predicate on the "inspection_required" field.
func InspectionRequiredEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInspectionRequired, v))
}

// InspectionRequiredNEQ applies the NEQ predicate on the "inspection_required" field.
func InspectionRequiredNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldInspectionRequired, v))
}

// InspectionRequiredIsNil applies the IsNil predicate on the "inspection_required" field.
func InspectionRequiredIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldInspectionRequired))
}

// InspectionRequiredNotNil applies the NotNil predicate on the "inspection_required" field.
func InspectionRequiredNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldInspectionRequired))
}

// InspectionDateEQ applies the EQ predicate on the "inspection_date" field.
func InspectionDateEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInspectionDate, v))
}

// InspectionDateNEQ applies the NEQ predicate on the "inspection_date" field.
func InspectionDateNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldInspectionDate, v))
}

// InspectionDateIn applies the In predicate on the "inspection_date" field.
func InspectionDateIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldInspectionDate, vs...))
}

// InspectionDateNotIn applies the NotIn predicate on the "inspection_date" field.
func InspectionDateNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldInspectionDate, vs...))
}

// InspectionDateGT applies the GT predicate on the "inspection_date" field.
func InspectionDateGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldInspectionDate, v))
}

// InspectionDateGTE applies the GTE predicate on the "inspection_date" field.
func InspectionDateGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldInspectionDate, v))
}

// InspectionDateLT applies the LT predicate on the "inspection_date" field.
func InspectionDateLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldInspectionDate, v))
}

// InspectionDateLTE applies the LTE predicate on the "inspection_date" field.
func InspectionDateLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldInspectionDate, v))
}

// InspectionDateIsNil applies the IsNil predicate on the "inspection_date" field.
func InspectionDateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldInspectionDate))
}

// InspectionDateNotNil applies the NotNil predicate on the "inspection_date" field.
func InspectionDateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldInspectionDate))
}

// ProgressInspectionDateEQ applies the EQ predicate on the "progress_inspection_date" field.
func ProgressInspectionDateEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldProgressInspectionDate, v))
}

// ProgressInspectionDateNEQ applies the NEQ predicate on the "progress_inspection_date" field.
func ProgressInspectionDateNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldProgressInspectionDate, v))
}

// ProgressInspectionDateIn applies the In predicate on the "progress_inspection_date" field.
func ProgressInspectionDateIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldProgressInspectionDate, vs...))
}

// ProgressInspectionDateNotIn applies the NotIn predicate on the "progress_inspection_date" field.
func ProgressInspectionDateNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldProgressInspectionDate, vs...))
}

// ProgressInspectionDateGT applies the GT predicate on the "progress_inspection_date" field.
func ProgressInspectionDateGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldProgressInspectionDate, v))
}

// ProgressInspectionDateGTE applies the GTE predicate on the "progress_inspection_date" field.
func ProgressInspectionDateGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldProgressInspectionDate, v))
}

// ProgressInspectionDateLT applies the LT predicate on the "progress_inspection_date" field.
func ProgressInspectionDateLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldProgressInspectionDate, v))
}

// ProgressInspectionDateLTE applies the LTE predicate on the "progress_inspection_date" field.
func ProgressInspectionDateLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldProgressInspectionDate, v))
}

// ProgressInspectionDateIsNil applies the IsNil predicate on the "progress_inspection_date" field.
func ProgressInspectionDateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldProgressInspectionDate))
}

// ProgressInspectionDateNotNil applies the NotNil predicate on the "progress_inspection_date" field.
func ProgressInspectionDateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldProgressInspectionDate))
}

// InstallDateEQ applies the EQ predicate on the "install_date" field.
func InstallDateEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInstallDate, v))
}

// InstallDateNEQ applies the NEQ predicate on the "install_date" field.
func InstallDateNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldInstallDate, v))
}

// InstallDateIn applies the In predicate on the "install_date" field.
func InstallDateIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldInstallDate, vs...))
}

// InstallDateNotIn applies the NotIn predicate on the "install_date" field.
func InstallDateNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldInstallDate, vs...))
}

// InstallDateGT applies the GT predicate on the "install_date" field.
func InstallDateGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldInstallDate, v))
}

// InstallDateGTE applies the GTE predicate on the "install_date" field.
func InstallDateGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldInstallDate, v))
}

// InstallDateLT applies the LT predicate on the "install_date" field.
func InstallDateLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldInstallDate, v))
}

// InstallDateLTE applies the LTE predicate on the "install_date" field.
func InstallDateLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldInstallDate, v))
}

// InstallDateIsNil applies the IsNil predicate on the "install_date" field.
func InstallDateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldInstallDate))
}

// InstallDateNotNil applies the NotNil predicate on the "install_date" field.
func InstallDateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldInstallDate))
}

// CompletionDateEQ applies the EQ predicate on the "completion_date" field.
func CompletionDateEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompletionDate, v))
}

// CompletionDateNEQ applies the NEQ predicate on the "completion_date" field.
func CompletionDateNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCompletionDate, v))
}

// CompletionDateIn applies the In predicate on the "completion_date" field.
func CompletionDateIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCompletionDate, vs...))
}

// CompletionDateNotIn applies the NotIn predicate on the "completion_date" field.
func CompletionDateNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCompletionDate, vs...))
}

// CompletionDateGT applies the GT predicate on the "completion_date" field.
func CompletionDateGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCompletionDate, v))
}

// CompletionDateGTE applies the GTE predicate on the "completion_date" field.
func CompletionDateGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCompletionDate, v))
}

// CompletionDateLT applies the LT predicate on the "completion_date" field.
func CompletionDateLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCompletionDate, v))
}

// CompletionDateLTE applies the LTE predicate on the "completion_date" field.
func CompletionDateLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCompletionDate, v))
}

// CompletionDateIsNil applies the IsNil predicate on the "completion_date" field.
func CompletionDateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldCompletionDate))
}

// CompletionDateNotNil applies the NotNil predicate on the "completion_date" field.
func CompletionDateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldCompletionDate))
}

// MaterialDeliveryDateEQ applies the EQ predicate on the "material_delivery_date" field.
func MaterialDeliveryDateEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaterialDeliveryDate, v))
}

// MaterialDeliveryDateNEQ applies the NEQ predicate on the "material_delivery_date" field.
func MaterialDeliveryDateNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldMaterialDeliveryDate, v))
}

// MaterialDeliveryDateIn applies the In predicate on the "material_delivery_date" field.
func MaterialDeliveryDateIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldMaterialDeliveryDate, vs...))
}

// MaterialDeliveryDateNotIn applies the NotIn predicate on the "material_delivery_date" field.
func MaterialDeliveryDateNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldMaterialDeliveryDate, vs...))
}

// MaterialDeliveryDateGT applies the GT predicate on the "material_delivery_date" field.
func MaterialDeliveryDateGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldMaterialDeliveryDate, v))
}

// MaterialDeliveryDateGTE applies the GTE predicate on the "material_delivery_date" field.
func MaterialDeliveryDateGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldMaterialDeliveryDate, v))
}

// MaterialDeliveryDateLT applies the LT predicate on the "material_delivery_date" field.
func MaterialDeliveryDateLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldMaterialDeliveryDate, v))
}

// MaterialDeliveryDateLTE applies the LTE predicate on the "material_delivery_date" field.
func MaterialDeliveryDateLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldMaterialDeliveryDate, v))
}

// MaterialDeliveryDateIsNil applies the IsNil predicate on the "material_delivery_date" field.
func MaterialDeliveryDateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldMaterialDeliveryDate))
}

// MaterialDeliveryDateNotNil applies the NotNil predicate on the "material_delivery_date" field.
func MaterialDeliveryDateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldMaterialDeliveryDate))
}

// AgreeEQ applies the EQ predicate on the "agree" field.
func AgreeEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAgree, v))
}

// AgreeNEQ applies the NEQ predicate on the "agree" field.
func AgreeNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAgree, v))
}

// AgreeIsNil applies the IsNil predicate on the "agree" field.
func AgreeIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldAgree))
}

// AgreeNotNil applies the NotNil predicate on the "agree" field.
func AgreeNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldAgree))
}

// AgreeAtEQ applies the EQ predicate on the "agree_at" field.
func AgreeAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAgreeAt, v))
}

// AgreeAtNEQ applies the NEQ predicate on the "agree_at" field.
func AgreeAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAgreeAt, v))
}

// AgreeAtIn applies the In predicate on the "agree_at" field.
func AgreeAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldAgreeAt, vs...))
}

// AgreeAtNotIn applies the NotIn predicate on the "agree_at" field.
func AgreeAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldAgreeAt, vs...))
}

// AgreeAtGT applies the GT predicate on the "agree_at" field.
func AgreeAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldAgreeAt, v))
}

// AgreeAtGTE applies the GTE predicate on the "agree_at" field.
func AgreeAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldAgreeAt, v))
}

// AgreeAtLT applies the LT predicate on the "agree_at" field.
func AgreeAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldAgreeAt, v))
}

// AgreeAtLTE applies the LTE predicate on the "agree_at" field.
func AgreeAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldAgreeAt, v))
}

// AgreeAtIsNil applies the IsNil predicate on the "agree_at" field.
func AgreeAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldAgreeAt))
}

// AgreeAtNotNil applies the NotNil predicate on the "agree_at" field.
func AgreeAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldAgreeAt))
}

// PoNumberEQ applies the EQ predicate on the "po_number" field.
func PoNumberEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPoNumber, v))
}

// PoNumberNEQ applies the NEQ predicate on the "po_number" field.
func PoNumberNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPoNumber, v))
}

// PoNumberIn applies the In predicate on the "po_number" field.
func PoNumberIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPoNumber, vs...))
}

// PoNumberNotIn applies the NotIn predicate on the "po_number" field.
func PoNumberNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPoNumber, vs...))
}

// PoNumberGT applies the GT predicate on the "po_number" field.
func PoNumberGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPoNumber, v))
}

// PoNumberGTE applies the GTE predicate on the "po_number" field.
func PoNumberGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPoNumber, v))
}

// PoNumberLT applies the LT predicate on the "po_number" field.
func PoNumberLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPoNumber, v))
}

// PoNumberLTE applies the LTE predicate on the "po_number" field.
func PoNumberLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPoNumber, v))
}

// PoNumberContains applies the Contains predicate on the "po_number" field.
func PoNumberContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldPoNumber, v))
}

// PoNumberHasPrefix applies the HasPrefix predicate on the "po_number" field.
func PoNumberHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldPoNumber, v))
}

// PoNumberHasSuffix applies the HasSuffix predicate on the "po_number" field.
func PoNumberHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldPoNumber, v))
}

// PoNumberIsNil applies the IsNil predicate on the "po_number" field.
func PoNumberIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldPoNumber))
}

// PoNumberNotNil applies the NotNil predicate on the "po_number" field.
func PoNumberNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldPoNumber))
}

// PoNumberEqualFold applies the EqualFold predicate on the "po_number" field.
func PoNumberEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldPoNumber, v))
}

// PoNumberContainsFold applies the ContainsFold predicate on the "po_number" field.
func PoNumberContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldPoNumber, v))
}

// RoofingPartnerAssignedAtEQ applies the EQ predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerAssignedAtNEQ applies the NEQ predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerAssignedAtIn applies the In predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRoofingPartnerAssignedAt, vs...))
}

// RoofingPartnerAssignedAtNotIn applies the NotIn predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRoofingPartnerAssignedAt, vs...))
}

// RoofingPartnerAssignedAtGT applies the GT predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerAssignedAtGTE applies the GTE predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerAssignedAtLT applies the LT predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerAssignedAtLTE applies the LTE predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRoofingPartnerAssignedAt, v))
}

// RoofingPartnerAssignedAtIsNil applies the IsNil predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldRoofingPartnerAssignedAt))
}

// RoofingPartnerAssignedAtNotNil applies the NotNil predicate on the "roofing_partner_assigned_at" field.
func RoofingPartnerAssignedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldRoofingPartnerAssignedAt))
}

// RoofingPartnerFlagAtEQ applies the EQ predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRoofingPartnerFlagAt, v))
}

// RoofingPartnerFlagAtNEQ applies the NEQ predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRoofingPartnerFlagAt, v))
}

// RoofingPartnerFlagAtIn applies the In predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRoofingPartnerFlagAt, vs...))
}

// RoofingPartnerFlagAtNotIn applies the NotIn predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRoofingPartnerFlagAt, vs...))
}

// RoofingPartnerFlagAtGT applies the GT predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRoofingPartnerFlagAt, v))
}

// RoofingPartnerFlagAtGTE applies the GTE predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRoofingPartnerFlagAt, v))
}

// RoofingPartnerFlagAtLT applies the LT predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRoofingPartnerFlagAt, v))
}

// RoofingPartnerFlagAtLTE applies the LTE predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRoofingPartnerFlagAt, v))
}

// RoofingPartnerFlagAtIsNil applies the IsNil predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldRoofingPartnerFlagAt))
}

// RoofingPartnerFlagAtNotNil applies the NotNil predicate on the "roofing_partner_flag_at" field.
func RoofingPartnerFlagAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldRoofingPartnerFlagAt))
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivities applies the HasEdge predicate on the "activities" edge.
func HasActivities() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitiesWith applies the HasEdge predicate on the "activities" edge with a given conditions (other predicates).
func HasActivitiesWith(preds ...predicate.JobActivity) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignmentHistory applies the HasEdge predicate on the "assignment_history" edge.
func HasAssignmentHistory() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignmentHistoryTable, AssignmentHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignmentHistoryWith applies the HasEdge predicate on the "assignment_history" edge with a given conditions (other predicates).
func HasAssignmentHistoryWith(preds ...predicate.JobAssignmentHistory) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newAssignmentHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgressHistory applies the HasEdge predicate on the "progress_history" edge.
func HasProgressHistory() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgressHistoryTable, ProgressHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressHistoryWith applies the HasEdge predicate on the "progress_history" edge with a given conditions (other predicates).
func HasProgressHistoryWith(preds ...predicate.JobProgressHistory) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newProgressHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotes applies the HasEdge predicate on the "notes" edge.
func HasNotes() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotesWith applies the HasEdge predicate on the "notes" edge with a given conditions (other predicates).
func HasNotesWith(preds ...predicate.JobNote) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newNotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocUrls applies the HasEdge predicate on the "doc_urls" edge.
func HasDocUrls() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocUrlsTable, DocUrlsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocUrlsWith applies the HasEdge predicate on the "doc_urls" edge with a given conditions (other predicates).
func HasDocUrlsWith(preds ...predicate.JobDocURL) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newDocUrlsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEstimate applies the HasEdge predicate on the "estimate" edge.
func HasEstimate() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EstimateTable, EstimateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimateWith applies the HasEdge predicate on the "estimate" edge with a given conditions (other predicates).
func HasEstimateWith(preds ...predicate.Estimate) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newEstimateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatorAPI applies the HasEdge predicate on the "creator_api" edge.
func HasCreatorAPI() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPITable, CreatorAPIColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorAPIWith applies the HasEdge predicate on the "creator_api" edge with a given conditions (other predicates).
func HasCreatorAPIWith(preds ...predicate.ApiUser) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newCreatorAPIStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHomeOwner applies the HasEdge predicate on the "home_owner" edge.
func HasHomeOwner() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HomeOwnerTable, HomeOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeOwnerWith applies the HasEdge predicate on the "home_owner" edge with a given conditions (other predicates).
func HasHomeOwnerWith(preds ...predicate.HomeOwner) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newHomeOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSalesRep applies the HasEdge predicate on the "sales_rep" edge.
func HasSalesRep() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalesRepTable, SalesRepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesRepWith applies the HasEdge predicate on the "sales_rep" edge with a given conditions (other predicates).
func HasSalesRepWith(preds ...predicate.User) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newSalesRepStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequester applies the HasEdge predicate on the "requester" edge.
func HasRequester() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequesterWith applies the HasEdge predicate on the "requester" edge with a given conditions (other predicates).
func HasRequesterWith(preds ...predicate.Partner) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newRequesterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoofingPartner applies the HasEdge predicate on the "roofing_partner" edge.
func HasRoofingPartner() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoofingPartnerTable, RoofingPartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoofingPartnerWith applies the HasEdge predicate on the "roofing_partner" edge with a given conditions (other predicates).
func HasRoofingPartnerWith(preds ...predicate.Partner) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newRoofingPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIntegrationPartner applies the HasEdge predicate on the "integration_partner" edge.
func HasIntegrationPartner() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IntegrationPartnerTable, IntegrationPartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIntegrationPartnerWith applies the HasEdge predicate on the "integration_partner" edge with a given conditions (other predicates).
func HasIntegrationPartnerWith(preds ...predicate.Partner) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newIntegrationPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpcPartner applies the HasEdge predicate on the "epc_partner" edge.
func HasEpcPartner() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EpcPartnerTable, EpcPartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpcPartnerWith applies the HasEdge predicate on the "epc_partner" edge with a given conditions (other predicates).
func HasEpcPartnerWith(preds ...predicate.Partner) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newEpcPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpc applies the HasEdge predicate on the "epc" edge.
func HasEpc() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EpcTable, EpcColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpcWith applies the HasEdge predicate on the "epc" edge with a given conditions (other predicates).
func HasEpcWith(preds ...predicate.OptionList) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newEpcStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEstimatePdf applies the HasEdge predicate on the "estimate_pdf" edge.
func HasEstimatePdf() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EstimatePdfTable, EstimatePdfColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimatePdfWith applies the HasEdge predicate on the "estimate_pdf" edge with a given conditions (other predicates).
func HasEstimatePdfWith(preds ...predicate.Document) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newEstimatePdfStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package job

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldProgressAt holds the string denoting the progress_at field in the database.
	FieldProgressAt = "progress_at"
	// FieldProgressFlagAt holds the string denoting the progress_flag_at field in the database.
	FieldProgressFlagAt = "progress_flag_at"
	// FieldRegionID holds the string denoting the region_id field in the database.
	FieldRegionID = "region_id"
	// FieldCompanyRefID holds the string denoting the company_ref_id field in the database.
	FieldCompanyRefID = "company_ref_id"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldWorkOrderPrice holds the string denoting the work_order_price field in the database.
	FieldWorkOrderPrice = "work_order_price"
	// FieldContractPrice holds the string denoting the contract_price field in the database.
	FieldContractPrice = "contract_price"
	// FieldChangeOrderPrice holds the string denoting the change_order_price field in the database.
	FieldChangeOrderPrice = "change_order_price"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldShingleColor holds the string denoting the shingle_color field in the database.
	FieldShingleColor = "shingle_color"
	// FieldPermitRequired holds the string denoting the permit_required field in the database.
	FieldPermitRequired = "permit_required"
	// FieldInspectionRequired holds the string denoting the inspection_required field in the database.
	FieldInspectionRequired = "inspection_required"
	// FieldInspectionDate holds the string denoting the inspection_date field in the database.
	FieldInspectionDate = "inspection_date"
	// FieldProgressInspectionDate holds the string denoting the progress_inspection_date field in the database.
	FieldProgressInspectionDate = "progress_inspection_date"
	// FieldInstallDate holds the string denoting the install_date field in the database.
	FieldInstallDate = "install_date"
	// FieldCompletionDate holds the string denoting the completion_date field in the database.
	FieldCompletionDate = "completion_date"
	// FieldMaterialDeliveryDate holds the string denoting the material_delivery_date field in the database.
	FieldMaterialDeliveryDate = "material_delivery_date"
	// FieldAgree holds the string denoting the agree field in the database.
	FieldAgree = "agree"
	// FieldAgreeAt holds the string denoting the agree_at field in the database.
	FieldAgreeAt = "agree_at"
	// FieldPoNumber holds the string denoting the po_number field in the database.
	FieldPoNumber = "po_number"
	// FieldRoofingPartnerAssignedAt holds the string denoting the roofing_partner_assigned_at field in the database.
	FieldRoofingPartnerAssignedAt = "roofing_partner_assigned_at"
	// FieldRoofingPartnerFlagAt holds the string denoting the roofing_partner_flag_at field in the database.
	FieldRoofingPartnerFlagAt = "roofing_partner_flag_at"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeAssignmentHistory holds the string denoting the assignment_history edge name in mutations.
	EdgeAssignmentHistory = "assignment_history"
	// EdgeProgressHistory holds the string denoting the progress_history edge name in mutations.
	EdgeProgressHistory = "progress_history"
	// EdgeNotes holds the string denoting the notes edge name in mutations.
	EdgeNotes = "notes"
	// EdgeDocUrls holds the string denoting the doc_urls edge name in mutations.
	EdgeDocUrls = "doc_urls"
	// EdgeEstimate holds the string denoting the estimate edge name in mutations.
	EdgeEstimate = "estimate"
	// EdgeCreatorAPI holds the string denoting the creator_api edge name in mutations.
	EdgeCreatorAPI = "creator_api"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeHomeOwner holds the string denoting the home_owner edge name in mutations.
	EdgeHomeOwner = "home_owner"
	// EdgeSalesRep holds the string denoting the sales_rep edge name in mutations.
	EdgeSalesRep = "sales_rep"
	// EdgeRequester holds the string denoting the requester edge name in mutations.
	EdgeRequester = "requester"
	// EdgeRoofingPartner holds the string denoting the roofing_partner edge name in mutations.
	EdgeRoofingPartner = "roofing_partner"
	// EdgeIntegrationPartner holds the string denoting the integration_partner edge name in mutations.
	EdgeIntegrationPartner = "integration_partner"
	// EdgeEpcPartner holds the string denoting the epc_partner edge name in mutations.
	EdgeEpcPartner = "epc_partner"
	// EdgeEpc holds the string denoting the epc edge name in mutations.
	EdgeEpc = "epc"
	// EdgeEstimatePdf holds the string denoting the estimate_pdf edge name in mutations.
	EdgeEstimatePdf = "estimate_pdf"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "payments"
	// PaymentsInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentsInverseTable = "payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "job_id"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "job_activities"
	// ActivitiesInverseTable is the table name for the JobActivity entity.
	// It exists in this package in order to avoid circular dependency with the "jobactivity" package.
	ActivitiesInverseTable = "job_activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "job_id"
	// AssignmentHistoryTable is the table that holds the assignment_history relation/edge.
	AssignmentHistoryTable = "job_assignment_history"
	// AssignmentHistoryInverseTable is the table name for the JobAssignmentHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobassignmenthistory" package.
	AssignmentHistoryInverseTable = "job_assignment_history"
	// AssignmentHistoryColumn is the table column denoting the assignment_history relation/edge.
	AssignmentHistoryColumn = "job_id"
	// ProgressHistoryTable is the table that holds the progress_history relation/edge.
	ProgressHistoryTable = "job_progress_history"
	// ProgressHistoryInverseTable is the table name for the JobProgressHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobprogresshistory" package.
	ProgressHistoryInverseTable = "job_progress_history"
	// ProgressHistoryColumn is the table column denoting the progress_history relation/edge.
	ProgressHistoryColumn = "job_id"
	// NotesTable is the table that holds the notes relation/edge.
	NotesTable = "job_notes"
	// NotesInverseTable is the table name for the JobNote entity.
	// It exists in this package in order to avoid circular dependency with the "jobnote" package.
	NotesInverseTable = "job_notes"
	// NotesColumn is the table column denoting the notes relation/edge.
	NotesColumn = "job_id"
	// DocUrlsTable is the table that holds the doc_urls relation/edge.
	DocUrlsTable = "job_doc_ur_ls"
	// DocUrlsInverseTable is the table name for the JobDocURL entity.
	// It exists in this package in order to avoid circular dependency with the "jobdocurl" package.
	DocUrlsInverseTable = "job_doc_ur_ls"
	// DocUrlsColumn is the table column denoting the doc_urls relation/edge.
	DocUrlsColumn = "job_id"
	// EstimateTable is the table that holds the estimate relation/edge.
	EstimateTable = "jobs"
	// EstimateInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	EstimateInverseTable = "estimates"
	// EstimateColumn is the table column denoting the estimate relation/edge.
	EstimateColumn = "estimate_id"
	// CreatorAPITable is the table that holds the creator_api relation/edge.
	CreatorAPITable = "jobs"
	// CreatorAPIInverseTable is the table name for the ApiUser entity.
	// It exists in this package in order to avoid circular dependency with the "apiuser" package.
	CreatorAPIInverseTable = "api_users"
	// CreatorAPIColumn is the table column denoting the creator_api relation/edge.
	CreatorAPIColumn = "api_user_id"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "jobs"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// HomeOwnerTable is the table that holds the home_owner relation/edge.
	HomeOwnerTable = "jobs"
	// HomeOwnerInverseTable is the table name for the HomeOwner entity.
	// It exists in this package in order to avoid circular dependency with the "homeowner" package.
	HomeOwnerInverseTable = "home_owners"
	// HomeOwnerColumn is the table column denoting the home_owner relation/edge.
	HomeOwnerColumn = "home_owner_id"
	// SalesRepTable is the table that holds the sales_rep relation/edge.
	SalesRepTable = "jobs"
	// SalesRepInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SalesRepInverseTable = "users"
	// SalesRepColumn is the table column denoting the sales_rep relation/edge.
	SalesRepColumn = "sales_rep_id"
	// RequesterTable is the table that holds the requester relation/edge.
	RequesterTable = "jobs"
	// RequesterInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	RequesterInverseTable = "partners"
	// RequesterColumn is the table column denoting the requester relation/edge.
	RequesterColumn = "requester_id"
	// RoofingPartnerTable is the table that holds the roofing_partner relation/edge.
	RoofingPartnerTable = "jobs"
	// RoofingPartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	RoofingPartnerInverseTable = "partners"
	// RoofingPartnerColumn is the table column denoting the roofing_partner relation/edge.
	RoofingPartnerColumn = "roofing_partner_id"
	// IntegrationPartnerTable is the table that holds the integration_partner relation/edge.
	IntegrationPartnerTable = "jobs"
	// IntegrationPartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	IntegrationPartnerInverseTable = "partners"
	// IntegrationPartnerColumn is the table column denoting the integration_partner relation/edge.
	IntegrationPartnerColumn = "integration_partner_id"
	// EpcPartnerTable is the table that holds the epc_partner relation/edge.
	EpcPartnerTable = "jobs"
	// EpcPartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	EpcPartnerInverseTable = "partners"
	// EpcPartnerColumn is the table column denoting the epc_partner relation/edge.
	EpcPartnerColumn = "epc_partner_id"
	// EpcTable is the table that holds the epc relation/edge.
	EpcTable = "jobs"
	// EpcInverseTable is the table name for the OptionList entity.
	// It exists in this package in order to avoid circular dependency with the "optionlist" package.
	EpcInverseTable = "option_list"
	// EpcColumn is the table column denoting the epc relation/edge.
	EpcColumn = "epc_id"
	// EstimatePdfTable is the table that holds the estimate_pdf relation/edge.
	EstimatePdfTable = "jobs"
	// EstimatePdfInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	EstimatePdfInverseTable = "documents"
	// EstimatePdfColumn is the table column denoting the estimate_pdf relation/edge.
	EstimatePdfColumn = "estimate_pdf_id"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProgress,
	FieldProgressAt,
	FieldProgressFlagAt,
	FieldRegionID,
	FieldCompanyRefID,
	FieldCompanyName,
	FieldPrice,
	FieldWorkOrderPrice,
	FieldContractPrice,
	FieldChangeOrderPrice,
	FieldNote,
	FieldShingleColor,
	FieldPermitRequired,
	FieldInspectionRequired,
	FieldInspectionDate,
	FieldProgressInspectionDate,
	FieldInstallDate,
	FieldCompletionDate,
	FieldMaterialDeliveryDate,
	FieldAgree,
	FieldAgreeAt,
	FieldPoNumber,
	FieldRoofingPartnerAssignedAt,
	FieldRoofingPartnerFlagAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"api_user_id",
	"estimate_pdf_id",
	"estimate_id",
	"home_owner_id",
	"epc_id",
	"roofing_partner_id",
	"integration_partner_id",
	"epc_partner_id",
	"requester_id",
	"creator_id",
	"sales_rep_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRegionID holds the default value on creation for the "region_id" field.
	DefaultRegionID uint8
	// CompanyRefIDValidator is a validator for the "company_ref_id" field. It is called by the builders before save.
	CompanyRefIDValidator func(string) error
	// CompanyNameValidator is a validator for the "company_name" field. It is called by the builders before save.
	CompanyNameValidator func(string) error
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// DefaultWorkOrderPrice holds the default value on creation for the "work_order_price" field.
	DefaultWorkOrderPrice float64
	// DefaultContractPrice holds the default value on creation for the "contract_price" field.
	DefaultContractPrice float64
	// DefaultChangeOrderPrice holds the default value on creation for the "change_order_price" field.
	DefaultChangeOrderPrice float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// ProgressValidator is a validator for the "progress" field enum values. It is called by the builders before save.
func ProgressValidator(pr enum.JobProgress) error {
	switch pr.String() {
	case "New", "CustomerContacted", "JobDetailsConfirmed", "Permitting", "Delayed", "Scheduled", "InProgress", "Installed", "Invoiced", "InvoiceApproved", "InvoicePaid":
		return nil
	default:
		return fmt.Errorf("job: invalid enum value for progress field: %q", pr)
	}
}

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByProgressAt orders the results by the progress_at field.
func ByProgressAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgressAt, opts...).ToFunc()
}

// ByProgressFlagAt orders the results by the progress_flag_at field.
func ByProgressFlagAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgressFlagAt, opts...).ToFunc()
}

// ByRegionID orders the results by the region_id field.
func ByRegionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionID, opts...).ToFunc()
}

// ByCompanyRefID orders the results by the company_ref_id field.
func ByCompanyRefID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyRefID, opts...).ToFunc()
}

// ByCompanyName orders the results by the company_name field.
func ByCompanyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByWorkOrderPrice orders the results by the work_order_price field.
func ByWorkOrderPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkOrderPrice, opts...).ToFunc()
}

// ByContractPrice orders the results by the contract_price field.
func ByContractPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractPrice, opts...).ToFunc()
}

// ByChangeOrderPrice orders the results by the change_order_price field.
func ByChangeOrderPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeOrderPrice, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByShingleColor orders the results by the shingle_color field.
func ByShingleColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShingleColor, opts...).ToFunc()
}

// ByPermitRequired orders the results by the permit_required field.
func ByPermitRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermitRequired, opts...).ToFunc()
}

// ByInspectionRequired orders the results by the inspection_required field.
func ByInspectionRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInspectionRequired, opts...).ToFunc()
}

// ByInspectionDate orders the results by the inspection_date field.
func ByInspectionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInspectionDate, opts...).ToFunc()
}

// ByProgressInspectionDate orders the results by the progress_inspection_date field.
func ByProgressInspectionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgressInspectionDate, opts...).ToFunc()
}

// ByInstallDate orders the results by the install_date field.
func ByInstallDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallDate, opts...).ToFunc()
}

// ByCompletionDate orders the results by the completion_date field.
func ByCompletionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionDate, opts...).ToFunc()
}

// ByMaterialDeliveryDate orders the results by the material_delivery_date field.
func ByMaterialDeliveryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaterialDeliveryDate, opts...).ToFunc()
}

// ByAgree orders the results by the agree field.
func ByAgree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgree, opts...).ToFunc()
}

// ByAgreeAt orders the results by the agree_at field.
func ByAgreeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgreeAt, opts...).ToFunc()
}

// ByPoNumber orders the results by the po_number field.
func ByPoNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoNumber, opts...).ToFunc()
}

// ByRoofingPartnerAssignedAt orders the results by the roofing_partner_assigned_at field.
func ByRoofingPartnerAssignedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoofingPartnerAssignedAt, opts...).ToFunc()
}

// ByRoofingPartnerFlagAt orders the results by the roofing_partner_flag_at field.
func ByRoofingPartnerFlagAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoofingPartnerFlagAt, opts...).ToFunc()
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignmentHistoryCount orders the results by assignment_history count.
func ByAssignmentHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignmentHistoryStep(), opts...)
	}
}

// ByAssignmentHistory orders the results by assignment_history terms.
func ByAssignmentHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignmentHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgressHistoryCount orders the results by progress_history count.
func ByProgressHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressHistoryStep(), opts...)
	}
}

// ByProgressHistory orders the results by progress_history terms.
func ByProgressHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotesCount orders the results by notes count.
func ByNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotesStep(), opts...)
	}
}

// ByNotes orders the results by notes terms.
func ByNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocUrlsCount orders the results by doc_urls count.
func ByDocUrlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocUrlsStep(), opts...)
	}
}

// ByDocUrls orders the results by doc_urls terms.
func ByDocUrls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocUrlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEstimateField orders the results by estimate field.
func ByEstimateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimateStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorAPIField orders the results by creator_api field.
func ByCreatorAPIField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorAPIStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByHomeOwnerField orders the results by home_owner field.
func ByHomeOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHomeOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// BySalesRepField orders the results by sales_rep field.
func BySalesRepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesRepStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequesterField orders the results by requester field.
func ByRequesterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequesterStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoofingPartnerField orders the results by roofing_partner field.
func ByRoofingPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoofingPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByIntegrationPartnerField orders the results by integration_partner field.
func ByIntegrationPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByEpcPartnerField orders the results by epc_partner field.
func ByEpcPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpcPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByEpcField orders the results by epc field.
func ByEpcField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpcStep(), sql.OrderByField(field, opts...))
	}
}

// ByEstimatePdfField orders the results by estimate_pdf field.
func ByEstimatePdfField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimatePdfStep(), sql.OrderByField(field, opts...))
	}
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
	)
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newAssignmentHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignmentHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignmentHistoryTable, AssignmentHistoryColumn),
	)
}
func newProgressHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressHistoryTable, ProgressHistoryColumn),
	)
}
func newNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
	)
}
func newDocUrlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocUrlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocUrlsTable, DocUrlsColumn),
	)
}
func newEstimateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EstimateTable, EstimateColumn),
	)
}
func newCreatorAPIStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorAPIInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPITable, CreatorAPIColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newHomeOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HomeOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HomeOwnerTable, HomeOwnerColumn),
	)
}
func newSalesRepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesRepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SalesRepTable, SalesRepColumn),
	)
}
func newRequesterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequesterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
	)
}
func newRoofingPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoofingPartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoofingPartnerTable, RoofingPartnerColumn),
	)
}
func newIntegrationPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationPartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IntegrationPartnerTable, IntegrationPartnerColumn),
	)
}
func newEpcPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpcPartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EpcPartnerTable, EpcPartnerColumn),
	)
}
func newEpcStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpcInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EpcTable, EpcColumn),
	)
}
func newEstimatePdfStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimatePdfInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EstimatePdfTable, EstimatePdfColumn),
	)
}

var (
	// enum.JobProgress must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.JobProgress)(nil)
	// enum.JobProgress must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.JobProgress)(nil)
)

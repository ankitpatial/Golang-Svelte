// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/installationjobprogress"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// InstallationJobUpdate is the builder for updating InstallationJob entities.
type InstallationJobUpdate struct {
	config
	hooks     []Hook
	mutation  *InstallationJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InstallationJobUpdate builder.
func (iju *InstallationJobUpdate) Where(ps ...predicate.InstallationJob) *InstallationJobUpdate {
	iju.mutation.Where(ps...)
	return iju
}

// SetUpdatedAt sets the "updated_at" field.
func (iju *InstallationJobUpdate) SetUpdatedAt(t time.Time) *InstallationJobUpdate {
	iju.mutation.SetUpdatedAt(t)
	return iju
}

// SetType sets the "type" field.
func (iju *InstallationJobUpdate) SetType(et enum.InstallationType) *InstallationJobUpdate {
	iju.mutation.SetType(et)
	return iju
}

// SetOwnerName sets the "owner_name" field.
func (iju *InstallationJobUpdate) SetOwnerName(s string) *InstallationJobUpdate {
	iju.mutation.SetOwnerName(s)
	return iju
}

// SetOwnerPhone sets the "owner_phone" field.
func (iju *InstallationJobUpdate) SetOwnerPhone(s string) *InstallationJobUpdate {
	iju.mutation.SetOwnerPhone(s)
	return iju
}

// SetOwnerEmail sets the "owner_email" field.
func (iju *InstallationJobUpdate) SetOwnerEmail(s string) *InstallationJobUpdate {
	iju.mutation.SetOwnerEmail(s)
	return iju
}

// SetNillableOwnerEmail sets the "owner_email" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableOwnerEmail(s *string) *InstallationJobUpdate {
	if s != nil {
		iju.SetOwnerEmail(*s)
	}
	return iju
}

// ClearOwnerEmail clears the value of the "owner_email" field.
func (iju *InstallationJobUpdate) ClearOwnerEmail() *InstallationJobUpdate {
	iju.mutation.ClearOwnerEmail()
	return iju
}

// SetOwnerAddress sets the "owner_address" field.
func (iju *InstallationJobUpdate) SetOwnerAddress(s string) *InstallationJobUpdate {
	iju.mutation.SetOwnerAddress(s)
	return iju
}

// SetOwnerAddressLat sets the "owner_address_lat" field.
func (iju *InstallationJobUpdate) SetOwnerAddressLat(f float64) *InstallationJobUpdate {
	iju.mutation.ResetOwnerAddressLat()
	iju.mutation.SetOwnerAddressLat(f)
	return iju
}

// SetNillableOwnerAddressLat sets the "owner_address_lat" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableOwnerAddressLat(f *float64) *InstallationJobUpdate {
	if f != nil {
		iju.SetOwnerAddressLat(*f)
	}
	return iju
}

// AddOwnerAddressLat adds f to the "owner_address_lat" field.
func (iju *InstallationJobUpdate) AddOwnerAddressLat(f float64) *InstallationJobUpdate {
	iju.mutation.AddOwnerAddressLat(f)
	return iju
}

// ClearOwnerAddressLat clears the value of the "owner_address_lat" field.
func (iju *InstallationJobUpdate) ClearOwnerAddressLat() *InstallationJobUpdate {
	iju.mutation.ClearOwnerAddressLat()
	return iju
}

// SetOwnerAddressLng sets the "owner_address_lng" field.
func (iju *InstallationJobUpdate) SetOwnerAddressLng(f float64) *InstallationJobUpdate {
	iju.mutation.ResetOwnerAddressLng()
	iju.mutation.SetOwnerAddressLng(f)
	return iju
}

// SetNillableOwnerAddressLng sets the "owner_address_lng" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableOwnerAddressLng(f *float64) *InstallationJobUpdate {
	if f != nil {
		iju.SetOwnerAddressLng(*f)
	}
	return iju
}

// AddOwnerAddressLng adds f to the "owner_address_lng" field.
func (iju *InstallationJobUpdate) AddOwnerAddressLng(f float64) *InstallationJobUpdate {
	iju.mutation.AddOwnerAddressLng(f)
	return iju
}

// ClearOwnerAddressLng clears the value of the "owner_address_lng" field.
func (iju *InstallationJobUpdate) ClearOwnerAddressLng() *InstallationJobUpdate {
	iju.mutation.ClearOwnerAddressLng()
	return iju
}

// SetSpecialNote sets the "special_note" field.
func (iju *InstallationJobUpdate) SetSpecialNote(s string) *InstallationJobUpdate {
	iju.mutation.SetSpecialNote(s)
	return iju
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableSpecialNote(s *string) *InstallationJobUpdate {
	if s != nil {
		iju.SetSpecialNote(*s)
	}
	return iju
}

// ClearSpecialNote clears the value of the "special_note" field.
func (iju *InstallationJobUpdate) ClearSpecialNote() *InstallationJobUpdate {
	iju.mutation.ClearSpecialNote()
	return iju
}

// SetPkg sets the "pkg" field.
func (iju *InstallationJobUpdate) SetPkg(s string) *InstallationJobUpdate {
	iju.mutation.SetPkg(s)
	return iju
}

// SetPkgDescription sets the "pkg_description" field.
func (iju *InstallationJobUpdate) SetPkgDescription(s string) *InstallationJobUpdate {
	iju.mutation.SetPkgDescription(s)
	return iju
}

// SetNillablePkgDescription sets the "pkg_description" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillablePkgDescription(s *string) *InstallationJobUpdate {
	if s != nil {
		iju.SetPkgDescription(*s)
	}
	return iju
}

// ClearPkgDescription clears the value of the "pkg_description" field.
func (iju *InstallationJobUpdate) ClearPkgDescription() *InstallationJobUpdate {
	iju.mutation.ClearPkgDescription()
	return iju
}

// SetPkgFeatures sets the "pkg_features" field.
func (iju *InstallationJobUpdate) SetPkgFeatures(s []string) *InstallationJobUpdate {
	iju.mutation.SetPkgFeatures(s)
	return iju
}

// AppendPkgFeatures appends s to the "pkg_features" field.
func (iju *InstallationJobUpdate) AppendPkgFeatures(s []string) *InstallationJobUpdate {
	iju.mutation.AppendPkgFeatures(s)
	return iju
}

// ClearPkgFeatures clears the value of the "pkg_features" field.
func (iju *InstallationJobUpdate) ClearPkgFeatures() *InstallationJobUpdate {
	iju.mutation.ClearPkgFeatures()
	return iju
}

// SetPrice sets the "price" field.
func (iju *InstallationJobUpdate) SetPrice(f float64) *InstallationJobUpdate {
	iju.mutation.ResetPrice()
	iju.mutation.SetPrice(f)
	return iju
}

// AddPrice adds f to the "price" field.
func (iju *InstallationJobUpdate) AddPrice(f float64) *InstallationJobUpdate {
	iju.mutation.AddPrice(f)
	return iju
}

// SetApproval sets the "approval" field.
func (iju *InstallationJobUpdate) SetApproval(e enum.Approval) *InstallationJobUpdate {
	iju.mutation.SetApproval(e)
	return iju
}

// SetNillableApproval sets the "approval" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableApproval(e *enum.Approval) *InstallationJobUpdate {
	if e != nil {
		iju.SetApproval(*e)
	}
	return iju
}

// SetApprovalAt sets the "approval_at" field.
func (iju *InstallationJobUpdate) SetApprovalAt(t time.Time) *InstallationJobUpdate {
	iju.mutation.SetApprovalAt(t)
	return iju
}

// SetNillableApprovalAt sets the "approval_at" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableApprovalAt(t *time.Time) *InstallationJobUpdate {
	if t != nil {
		iju.SetApprovalAt(*t)
	}
	return iju
}

// SetDenyReason sets the "deny_reason" field.
func (iju *InstallationJobUpdate) SetDenyReason(s string) *InstallationJobUpdate {
	iju.mutation.SetDenyReason(s)
	return iju
}

// SetNillableDenyReason sets the "deny_reason" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableDenyReason(s *string) *InstallationJobUpdate {
	if s != nil {
		iju.SetDenyReason(*s)
	}
	return iju
}

// ClearDenyReason clears the value of the "deny_reason" field.
func (iju *InstallationJobUpdate) ClearDenyReason() *InstallationJobUpdate {
	iju.mutation.ClearDenyReason()
	return iju
}

// SetStatus sets the "status" field.
func (iju *InstallationJobUpdate) SetStatus(es enum.InstallationStatus) *InstallationJobUpdate {
	iju.mutation.SetStatus(es)
	return iju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableStatus(es *enum.InstallationStatus) *InstallationJobUpdate {
	if es != nil {
		iju.SetStatus(*es)
	}
	return iju
}

// SetStatusAt sets the "status_at" field.
func (iju *InstallationJobUpdate) SetStatusAt(t time.Time) *InstallationJobUpdate {
	iju.mutation.SetStatusAt(t)
	return iju
}

// SetNillableStatusAt sets the "status_at" field if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableStatusAt(t *time.Time) *InstallationJobUpdate {
	if t != nil {
		iju.SetStatusAt(*t)
	}
	return iju
}

// AddItemIDs adds the "items" edge to the InstallationJobItem entity by IDs.
func (iju *InstallationJobUpdate) AddItemIDs(ids ...string) *InstallationJobUpdate {
	iju.mutation.AddItemIDs(ids...)
	return iju
}

// AddItems adds the "items" edges to the InstallationJobItem entity.
func (iju *InstallationJobUpdate) AddItems(i ...*InstallationJobItem) *InstallationJobUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iju.AddItemIDs(ids...)
}

// AddProgressHistoryIDs adds the "progress_history" edge to the InstallationJobProgress entity by IDs.
func (iju *InstallationJobUpdate) AddProgressHistoryIDs(ids ...string) *InstallationJobUpdate {
	iju.mutation.AddProgressHistoryIDs(ids...)
	return iju
}

// AddProgressHistory adds the "progress_history" edges to the InstallationJobProgress entity.
func (iju *InstallationJobUpdate) AddProgressHistory(i ...*InstallationJobProgress) *InstallationJobUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iju.AddProgressHistoryIDs(ids...)
}

// SetRequestingPartnerID sets the "requesting_partner" edge to the Partner entity by ID.
func (iju *InstallationJobUpdate) SetRequestingPartnerID(id string) *InstallationJobUpdate {
	iju.mutation.SetRequestingPartnerID(id)
	return iju
}

// SetNillableRequestingPartnerID sets the "requesting_partner" edge to the Partner entity by ID if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableRequestingPartnerID(id *string) *InstallationJobUpdate {
	if id != nil {
		iju = iju.SetRequestingPartnerID(*id)
	}
	return iju
}

// SetRequestingPartner sets the "requesting_partner" edge to the Partner entity.
func (iju *InstallationJobUpdate) SetRequestingPartner(p *Partner) *InstallationJobUpdate {
	return iju.SetRequestingPartnerID(p.ID)
}

// SetAssignedPartnerID sets the "assigned_partner" edge to the Partner entity by ID.
func (iju *InstallationJobUpdate) SetAssignedPartnerID(id string) *InstallationJobUpdate {
	iju.mutation.SetAssignedPartnerID(id)
	return iju
}

// SetNillableAssignedPartnerID sets the "assigned_partner" edge to the Partner entity by ID if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableAssignedPartnerID(id *string) *InstallationJobUpdate {
	if id != nil {
		iju = iju.SetAssignedPartnerID(*id)
	}
	return iju
}

// SetAssignedPartner sets the "assigned_partner" edge to the Partner entity.
func (iju *InstallationJobUpdate) SetAssignedPartner(p *Partner) *InstallationJobUpdate {
	return iju.SetAssignedPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (iju *InstallationJobUpdate) SetCreatorID(id string) *InstallationJobUpdate {
	iju.mutation.SetCreatorID(id)
	return iju
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableCreatorID(id *string) *InstallationJobUpdate {
	if id != nil {
		iju = iju.SetCreatorID(*id)
	}
	return iju
}

// SetCreator sets the "creator" edge to the User entity.
func (iju *InstallationJobUpdate) SetCreator(u *User) *InstallationJobUpdate {
	return iju.SetCreatorID(u.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (iju *InstallationJobUpdate) SetSalesRepID(id string) *InstallationJobUpdate {
	iju.mutation.SetSalesRepID(id)
	return iju
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (iju *InstallationJobUpdate) SetNillableSalesRepID(id *string) *InstallationJobUpdate {
	if id != nil {
		iju = iju.SetSalesRepID(*id)
	}
	return iju
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (iju *InstallationJobUpdate) SetSalesRep(u *User) *InstallationJobUpdate {
	return iju.SetSalesRepID(u.ID)
}

// Mutation returns the InstallationJobMutation object of the builder.
func (iju *InstallationJobUpdate) Mutation() *InstallationJobMutation {
	return iju.mutation
}

// ClearItems clears all "items" edges to the InstallationJobItem entity.
func (iju *InstallationJobUpdate) ClearItems() *InstallationJobUpdate {
	iju.mutation.ClearItems()
	return iju
}

// RemoveItemIDs removes the "items" edge to InstallationJobItem entities by IDs.
func (iju *InstallationJobUpdate) RemoveItemIDs(ids ...string) *InstallationJobUpdate {
	iju.mutation.RemoveItemIDs(ids...)
	return iju
}

// RemoveItems removes "items" edges to InstallationJobItem entities.
func (iju *InstallationJobUpdate) RemoveItems(i ...*InstallationJobItem) *InstallationJobUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iju.RemoveItemIDs(ids...)
}

// ClearProgressHistory clears all "progress_history" edges to the InstallationJobProgress entity.
func (iju *InstallationJobUpdate) ClearProgressHistory() *InstallationJobUpdate {
	iju.mutation.ClearProgressHistory()
	return iju
}

// RemoveProgressHistoryIDs removes the "progress_history" edge to InstallationJobProgress entities by IDs.
func (iju *InstallationJobUpdate) RemoveProgressHistoryIDs(ids ...string) *InstallationJobUpdate {
	iju.mutation.RemoveProgressHistoryIDs(ids...)
	return iju
}

// RemoveProgressHistory removes "progress_history" edges to InstallationJobProgress entities.
func (iju *InstallationJobUpdate) RemoveProgressHistory(i ...*InstallationJobProgress) *InstallationJobUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iju.RemoveProgressHistoryIDs(ids...)
}

// ClearRequestingPartner clears the "requesting_partner" edge to the Partner entity.
func (iju *InstallationJobUpdate) ClearRequestingPartner() *InstallationJobUpdate {
	iju.mutation.ClearRequestingPartner()
	return iju
}

// ClearAssignedPartner clears the "assigned_partner" edge to the Partner entity.
func (iju *InstallationJobUpdate) ClearAssignedPartner() *InstallationJobUpdate {
	iju.mutation.ClearAssignedPartner()
	return iju
}

// ClearCreator clears the "creator" edge to the User entity.
func (iju *InstallationJobUpdate) ClearCreator() *InstallationJobUpdate {
	iju.mutation.ClearCreator()
	return iju
}

// ClearSalesRep clears the "sales_rep" edge to the User entity.
func (iju *InstallationJobUpdate) ClearSalesRep() *InstallationJobUpdate {
	iju.mutation.ClearSalesRep()
	return iju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iju *InstallationJobUpdate) Save(ctx context.Context) (int, error) {
	iju.defaults()
	return withHooks(ctx, iju.sqlSave, iju.mutation, iju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iju *InstallationJobUpdate) SaveX(ctx context.Context) int {
	affected, err := iju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iju *InstallationJobUpdate) Exec(ctx context.Context) error {
	_, err := iju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iju *InstallationJobUpdate) ExecX(ctx context.Context) {
	if err := iju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iju *InstallationJobUpdate) defaults() {
	if _, ok := iju.mutation.UpdatedAt(); !ok {
		v := installationjob.UpdateDefaultUpdatedAt()
		iju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iju *InstallationJobUpdate) check() error {
	if v, ok := iju.mutation.GetType(); ok {
		if err := installationjob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.type": %w`, err)}
		}
	}
	if v, ok := iju.mutation.OwnerName(); ok {
		if err := installationjob.OwnerNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_name", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_name": %w`, err)}
		}
	}
	if v, ok := iju.mutation.OwnerPhone(); ok {
		if err := installationjob.OwnerPhoneValidator(v); err != nil {
			return &ValidationError{Name: "owner_phone", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_phone": %w`, err)}
		}
	}
	if v, ok := iju.mutation.OwnerAddress(); ok {
		if err := installationjob.OwnerAddressValidator(v); err != nil {
			return &ValidationError{Name: "owner_address", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_address": %w`, err)}
		}
	}
	if v, ok := iju.mutation.SpecialNote(); ok {
		if err := installationjob.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.special_note": %w`, err)}
		}
	}
	if v, ok := iju.mutation.Pkg(); ok {
		if err := installationjob.PkgValidator(v); err != nil {
			return &ValidationError{Name: "pkg", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.pkg": %w`, err)}
		}
	}
	if v, ok := iju.mutation.PkgDescription(); ok {
		if err := installationjob.PkgDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "pkg_description", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.pkg_description": %w`, err)}
		}
	}
	if v, ok := iju.mutation.Approval(); ok {
		if err := installationjob.ApprovalValidator(v); err != nil {
			return &ValidationError{Name: "approval", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.approval": %w`, err)}
		}
	}
	if v, ok := iju.mutation.Status(); ok {
		if err := installationjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iju *InstallationJobUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstallationJobUpdate {
	iju.modifiers = append(iju.modifiers, modifiers...)
	return iju
}

func (iju *InstallationJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(installationjob.Table, installationjob.Columns, sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString))
	if ps := iju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iju.mutation.UpdatedAt(); ok {
		_spec.SetField(installationjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iju.mutation.GetType(); ok {
		_spec.SetField(installationjob.FieldType, field.TypeEnum, value)
	}
	if value, ok := iju.mutation.OwnerName(); ok {
		_spec.SetField(installationjob.FieldOwnerName, field.TypeString, value)
	}
	if value, ok := iju.mutation.OwnerPhone(); ok {
		_spec.SetField(installationjob.FieldOwnerPhone, field.TypeString, value)
	}
	if value, ok := iju.mutation.OwnerEmail(); ok {
		_spec.SetField(installationjob.FieldOwnerEmail, field.TypeString, value)
	}
	if iju.mutation.OwnerEmailCleared() {
		_spec.ClearField(installationjob.FieldOwnerEmail, field.TypeString)
	}
	if value, ok := iju.mutation.OwnerAddress(); ok {
		_spec.SetField(installationjob.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := iju.mutation.OwnerAddressLat(); ok {
		_spec.SetField(installationjob.FieldOwnerAddressLat, field.TypeFloat64, value)
	}
	if value, ok := iju.mutation.AddedOwnerAddressLat(); ok {
		_spec.AddField(installationjob.FieldOwnerAddressLat, field.TypeFloat64, value)
	}
	if iju.mutation.OwnerAddressLatCleared() {
		_spec.ClearField(installationjob.FieldOwnerAddressLat, field.TypeFloat64)
	}
	if value, ok := iju.mutation.OwnerAddressLng(); ok {
		_spec.SetField(installationjob.FieldOwnerAddressLng, field.TypeFloat64, value)
	}
	if value, ok := iju.mutation.AddedOwnerAddressLng(); ok {
		_spec.AddField(installationjob.FieldOwnerAddressLng, field.TypeFloat64, value)
	}
	if iju.mutation.OwnerAddressLngCleared() {
		_spec.ClearField(installationjob.FieldOwnerAddressLng, field.TypeFloat64)
	}
	if value, ok := iju.mutation.SpecialNote(); ok {
		_spec.SetField(installationjob.FieldSpecialNote, field.TypeString, value)
	}
	if iju.mutation.SpecialNoteCleared() {
		_spec.ClearField(installationjob.FieldSpecialNote, field.TypeString)
	}
	if value, ok := iju.mutation.Pkg(); ok {
		_spec.SetField(installationjob.FieldPkg, field.TypeString, value)
	}
	if value, ok := iju.mutation.PkgDescription(); ok {
		_spec.SetField(installationjob.FieldPkgDescription, field.TypeString, value)
	}
	if iju.mutation.PkgDescriptionCleared() {
		_spec.ClearField(installationjob.FieldPkgDescription, field.TypeString)
	}
	if value, ok := iju.mutation.PkgFeatures(); ok {
		_spec.SetField(installationjob.FieldPkgFeatures, field.TypeJSON, value)
	}
	if value, ok := iju.mutation.AppendedPkgFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, installationjob.FieldPkgFeatures, value)
		})
	}
	if iju.mutation.PkgFeaturesCleared() {
		_spec.ClearField(installationjob.FieldPkgFeatures, field.TypeJSON)
	}
	if value, ok := iju.mutation.Price(); ok {
		_spec.SetField(installationjob.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iju.mutation.AddedPrice(); ok {
		_spec.AddField(installationjob.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iju.mutation.Approval(); ok {
		_spec.SetField(installationjob.FieldApproval, field.TypeEnum, value)
	}
	if value, ok := iju.mutation.ApprovalAt(); ok {
		_spec.SetField(installationjob.FieldApprovalAt, field.TypeTime, value)
	}
	if value, ok := iju.mutation.DenyReason(); ok {
		_spec.SetField(installationjob.FieldDenyReason, field.TypeString, value)
	}
	if iju.mutation.DenyReasonCleared() {
		_spec.ClearField(installationjob.FieldDenyReason, field.TypeString)
	}
	if value, ok := iju.mutation.Status(); ok {
		_spec.SetField(installationjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iju.mutation.StatusAt(); ok {
		_spec.SetField(installationjob.FieldStatusAt, field.TypeTime, value)
	}
	if iju.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iju.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iju.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.RemovedProgressHistoryIDs(); len(nodes) > 0 && !iju.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iju.mutation.RequestingPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.RequestingPartnerTable,
			Columns: []string{installationjob.RequestingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.RequestingPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.RequestingPartnerTable,
			Columns: []string{installationjob.RequestingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iju.mutation.AssignedPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.AssignedPartnerTable,
			Columns: []string{installationjob.AssignedPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.AssignedPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.AssignedPartnerTable,
			Columns: []string{installationjob.AssignedPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iju.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.CreatorTable,
			Columns: []string{installationjob.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.CreatorTable,
			Columns: []string{installationjob.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iju.mutation.SalesRepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.SalesRepTable,
			Columns: []string{installationjob.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iju.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.SalesRepTable,
			Columns: []string{installationjob.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iju.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installationjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iju.mutation.done = true
	return n, nil
}

// InstallationJobUpdateOne is the builder for updating a single InstallationJob entity.
type InstallationJobUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InstallationJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ijuo *InstallationJobUpdateOne) SetUpdatedAt(t time.Time) *InstallationJobUpdateOne {
	ijuo.mutation.SetUpdatedAt(t)
	return ijuo
}

// SetType sets the "type" field.
func (ijuo *InstallationJobUpdateOne) SetType(et enum.InstallationType) *InstallationJobUpdateOne {
	ijuo.mutation.SetType(et)
	return ijuo
}

// SetOwnerName sets the "owner_name" field.
func (ijuo *InstallationJobUpdateOne) SetOwnerName(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetOwnerName(s)
	return ijuo
}

// SetOwnerPhone sets the "owner_phone" field.
func (ijuo *InstallationJobUpdateOne) SetOwnerPhone(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetOwnerPhone(s)
	return ijuo
}

// SetOwnerEmail sets the "owner_email" field.
func (ijuo *InstallationJobUpdateOne) SetOwnerEmail(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetOwnerEmail(s)
	return ijuo
}

// SetNillableOwnerEmail sets the "owner_email" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableOwnerEmail(s *string) *InstallationJobUpdateOne {
	if s != nil {
		ijuo.SetOwnerEmail(*s)
	}
	return ijuo
}

// ClearOwnerEmail clears the value of the "owner_email" field.
func (ijuo *InstallationJobUpdateOne) ClearOwnerEmail() *InstallationJobUpdateOne {
	ijuo.mutation.ClearOwnerEmail()
	return ijuo
}

// SetOwnerAddress sets the "owner_address" field.
func (ijuo *InstallationJobUpdateOne) SetOwnerAddress(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetOwnerAddress(s)
	return ijuo
}

// SetOwnerAddressLat sets the "owner_address_lat" field.
func (ijuo *InstallationJobUpdateOne) SetOwnerAddressLat(f float64) *InstallationJobUpdateOne {
	ijuo.mutation.ResetOwnerAddressLat()
	ijuo.mutation.SetOwnerAddressLat(f)
	return ijuo
}

// SetNillableOwnerAddressLat sets the "owner_address_lat" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableOwnerAddressLat(f *float64) *InstallationJobUpdateOne {
	if f != nil {
		ijuo.SetOwnerAddressLat(*f)
	}
	return ijuo
}

// AddOwnerAddressLat adds f to the "owner_address_lat" field.
func (ijuo *InstallationJobUpdateOne) AddOwnerAddressLat(f float64) *InstallationJobUpdateOne {
	ijuo.mutation.AddOwnerAddressLat(f)
	return ijuo
}

// ClearOwnerAddressLat clears the value of the "owner_address_lat" field.
func (ijuo *InstallationJobUpdateOne) ClearOwnerAddressLat() *InstallationJobUpdateOne {
	ijuo.mutation.ClearOwnerAddressLat()
	return ijuo
}

// SetOwnerAddressLng sets the "owner_address_lng" field.
func (ijuo *InstallationJobUpdateOne) SetOwnerAddressLng(f float64) *InstallationJobUpdateOne {
	ijuo.mutation.ResetOwnerAddressLng()
	ijuo.mutation.SetOwnerAddressLng(f)
	return ijuo
}

// SetNillableOwnerAddressLng sets the "owner_address_lng" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableOwnerAddressLng(f *float64) *InstallationJobUpdateOne {
	if f != nil {
		ijuo.SetOwnerAddressLng(*f)
	}
	return ijuo
}

// AddOwnerAddressLng adds f to the "owner_address_lng" field.
func (ijuo *InstallationJobUpdateOne) AddOwnerAddressLng(f float64) *InstallationJobUpdateOne {
	ijuo.mutation.AddOwnerAddressLng(f)
	return ijuo
}

// ClearOwnerAddressLng clears the value of the "owner_address_lng" field.
func (ijuo *InstallationJobUpdateOne) ClearOwnerAddressLng() *InstallationJobUpdateOne {
	ijuo.mutation.ClearOwnerAddressLng()
	return ijuo
}

// SetSpecialNote sets the "special_note" field.
func (ijuo *InstallationJobUpdateOne) SetSpecialNote(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetSpecialNote(s)
	return ijuo
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableSpecialNote(s *string) *InstallationJobUpdateOne {
	if s != nil {
		ijuo.SetSpecialNote(*s)
	}
	return ijuo
}

// ClearSpecialNote clears the value of the "special_note" field.
func (ijuo *InstallationJobUpdateOne) ClearSpecialNote() *InstallationJobUpdateOne {
	ijuo.mutation.ClearSpecialNote()
	return ijuo
}

// SetPkg sets the "pkg" field.
func (ijuo *InstallationJobUpdateOne) SetPkg(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetPkg(s)
	return ijuo
}

// SetPkgDescription sets the "pkg_description" field.
func (ijuo *InstallationJobUpdateOne) SetPkgDescription(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetPkgDescription(s)
	return ijuo
}

// SetNillablePkgDescription sets the "pkg_description" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillablePkgDescription(s *string) *InstallationJobUpdateOne {
	if s != nil {
		ijuo.SetPkgDescription(*s)
	}
	return ijuo
}

// ClearPkgDescription clears the value of the "pkg_description" field.
func (ijuo *InstallationJobUpdateOne) ClearPkgDescription() *InstallationJobUpdateOne {
	ijuo.mutation.ClearPkgDescription()
	return ijuo
}

// SetPkgFeatures sets the "pkg_features" field.
func (ijuo *InstallationJobUpdateOne) SetPkgFeatures(s []string) *InstallationJobUpdateOne {
	ijuo.mutation.SetPkgFeatures(s)
	return ijuo
}

// AppendPkgFeatures appends s to the "pkg_features" field.
func (ijuo *InstallationJobUpdateOne) AppendPkgFeatures(s []string) *InstallationJobUpdateOne {
	ijuo.mutation.AppendPkgFeatures(s)
	return ijuo
}

// ClearPkgFeatures clears the value of the "pkg_features" field.
func (ijuo *InstallationJobUpdateOne) ClearPkgFeatures() *InstallationJobUpdateOne {
	ijuo.mutation.ClearPkgFeatures()
	return ijuo
}

// SetPrice sets the "price" field.
func (ijuo *InstallationJobUpdateOne) SetPrice(f float64) *InstallationJobUpdateOne {
	ijuo.mutation.ResetPrice()
	ijuo.mutation.SetPrice(f)
	return ijuo
}

// AddPrice adds f to the "price" field.
func (ijuo *InstallationJobUpdateOne) AddPrice(f float64) *InstallationJobUpdateOne {
	ijuo.mutation.AddPrice(f)
	return ijuo
}

// SetApproval sets the "approval" field.
func (ijuo *InstallationJobUpdateOne) SetApproval(e enum.Approval) *InstallationJobUpdateOne {
	ijuo.mutation.SetApproval(e)
	return ijuo
}

// SetNillableApproval sets the "approval" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableApproval(e *enum.Approval) *InstallationJobUpdateOne {
	if e != nil {
		ijuo.SetApproval(*e)
	}
	return ijuo
}

// SetApprovalAt sets the "approval_at" field.
func (ijuo *InstallationJobUpdateOne) SetApprovalAt(t time.Time) *InstallationJobUpdateOne {
	ijuo.mutation.SetApprovalAt(t)
	return ijuo
}

// SetNillableApprovalAt sets the "approval_at" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableApprovalAt(t *time.Time) *InstallationJobUpdateOne {
	if t != nil {
		ijuo.SetApprovalAt(*t)
	}
	return ijuo
}

// SetDenyReason sets the "deny_reason" field.
func (ijuo *InstallationJobUpdateOne) SetDenyReason(s string) *InstallationJobUpdateOne {
	ijuo.mutation.SetDenyReason(s)
	return ijuo
}

// SetNillableDenyReason sets the "deny_reason" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableDenyReason(s *string) *InstallationJobUpdateOne {
	if s != nil {
		ijuo.SetDenyReason(*s)
	}
	return ijuo
}

// ClearDenyReason clears the value of the "deny_reason" field.
func (ijuo *InstallationJobUpdateOne) ClearDenyReason() *InstallationJobUpdateOne {
	ijuo.mutation.ClearDenyReason()
	return ijuo
}

// SetStatus sets the "status" field.
func (ijuo *InstallationJobUpdateOne) SetStatus(es enum.InstallationStatus) *InstallationJobUpdateOne {
	ijuo.mutation.SetStatus(es)
	return ijuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableStatus(es *enum.InstallationStatus) *InstallationJobUpdateOne {
	if es != nil {
		ijuo.SetStatus(*es)
	}
	return ijuo
}

// SetStatusAt sets the "status_at" field.
func (ijuo *InstallationJobUpdateOne) SetStatusAt(t time.Time) *InstallationJobUpdateOne {
	ijuo.mutation.SetStatusAt(t)
	return ijuo
}

// SetNillableStatusAt sets the "status_at" field if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableStatusAt(t *time.Time) *InstallationJobUpdateOne {
	if t != nil {
		ijuo.SetStatusAt(*t)
	}
	return ijuo
}

// AddItemIDs adds the "items" edge to the InstallationJobItem entity by IDs.
func (ijuo *InstallationJobUpdateOne) AddItemIDs(ids ...string) *InstallationJobUpdateOne {
	ijuo.mutation.AddItemIDs(ids...)
	return ijuo
}

// AddItems adds the "items" edges to the InstallationJobItem entity.
func (ijuo *InstallationJobUpdateOne) AddItems(i ...*InstallationJobItem) *InstallationJobUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ijuo.AddItemIDs(ids...)
}

// AddProgressHistoryIDs adds the "progress_history" edge to the InstallationJobProgress entity by IDs.
func (ijuo *InstallationJobUpdateOne) AddProgressHistoryIDs(ids ...string) *InstallationJobUpdateOne {
	ijuo.mutation.AddProgressHistoryIDs(ids...)
	return ijuo
}

// AddProgressHistory adds the "progress_history" edges to the InstallationJobProgress entity.
func (ijuo *InstallationJobUpdateOne) AddProgressHistory(i ...*InstallationJobProgress) *InstallationJobUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ijuo.AddProgressHistoryIDs(ids...)
}

// SetRequestingPartnerID sets the "requesting_partner" edge to the Partner entity by ID.
func (ijuo *InstallationJobUpdateOne) SetRequestingPartnerID(id string) *InstallationJobUpdateOne {
	ijuo.mutation.SetRequestingPartnerID(id)
	return ijuo
}

// SetNillableRequestingPartnerID sets the "requesting_partner" edge to the Partner entity by ID if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableRequestingPartnerID(id *string) *InstallationJobUpdateOne {
	if id != nil {
		ijuo = ijuo.SetRequestingPartnerID(*id)
	}
	return ijuo
}

// SetRequestingPartner sets the "requesting_partner" edge to the Partner entity.
func (ijuo *InstallationJobUpdateOne) SetRequestingPartner(p *Partner) *InstallationJobUpdateOne {
	return ijuo.SetRequestingPartnerID(p.ID)
}

// SetAssignedPartnerID sets the "assigned_partner" edge to the Partner entity by ID.
func (ijuo *InstallationJobUpdateOne) SetAssignedPartnerID(id string) *InstallationJobUpdateOne {
	ijuo.mutation.SetAssignedPartnerID(id)
	return ijuo
}

// SetNillableAssignedPartnerID sets the "assigned_partner" edge to the Partner entity by ID if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableAssignedPartnerID(id *string) *InstallationJobUpdateOne {
	if id != nil {
		ijuo = ijuo.SetAssignedPartnerID(*id)
	}
	return ijuo
}

// SetAssignedPartner sets the "assigned_partner" edge to the Partner entity.
func (ijuo *InstallationJobUpdateOne) SetAssignedPartner(p *Partner) *InstallationJobUpdateOne {
	return ijuo.SetAssignedPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ijuo *InstallationJobUpdateOne) SetCreatorID(id string) *InstallationJobUpdateOne {
	ijuo.mutation.SetCreatorID(id)
	return ijuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableCreatorID(id *string) *InstallationJobUpdateOne {
	if id != nil {
		ijuo = ijuo.SetCreatorID(*id)
	}
	return ijuo
}

// SetCreator sets the "creator" edge to the User entity.
func (ijuo *InstallationJobUpdateOne) SetCreator(u *User) *InstallationJobUpdateOne {
	return ijuo.SetCreatorID(u.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (ijuo *InstallationJobUpdateOne) SetSalesRepID(id string) *InstallationJobUpdateOne {
	ijuo.mutation.SetSalesRepID(id)
	return ijuo
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (ijuo *InstallationJobUpdateOne) SetNillableSalesRepID(id *string) *InstallationJobUpdateOne {
	if id != nil {
		ijuo = ijuo.SetSalesRepID(*id)
	}
	return ijuo
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (ijuo *InstallationJobUpdateOne) SetSalesRep(u *User) *InstallationJobUpdateOne {
	return ijuo.SetSalesRepID(u.ID)
}

// Mutation returns the InstallationJobMutation object of the builder.
func (ijuo *InstallationJobUpdateOne) Mutation() *InstallationJobMutation {
	return ijuo.mutation
}

// ClearItems clears all "items" edges to the InstallationJobItem entity.
func (ijuo *InstallationJobUpdateOne) ClearItems() *InstallationJobUpdateOne {
	ijuo.mutation.ClearItems()
	return ijuo
}

// RemoveItemIDs removes the "items" edge to InstallationJobItem entities by IDs.
func (ijuo *InstallationJobUpdateOne) RemoveItemIDs(ids ...string) *InstallationJobUpdateOne {
	ijuo.mutation.RemoveItemIDs(ids...)
	return ijuo
}

// RemoveItems removes "items" edges to InstallationJobItem entities.
func (ijuo *InstallationJobUpdateOne) RemoveItems(i ...*InstallationJobItem) *InstallationJobUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ijuo.RemoveItemIDs(ids...)
}

// ClearProgressHistory clears all "progress_history" edges to the InstallationJobProgress entity.
func (ijuo *InstallationJobUpdateOne) ClearProgressHistory() *InstallationJobUpdateOne {
	ijuo.mutation.ClearProgressHistory()
	return ijuo
}

// RemoveProgressHistoryIDs removes the "progress_history" edge to InstallationJobProgress entities by IDs.
func (ijuo *InstallationJobUpdateOne) RemoveProgressHistoryIDs(ids ...string) *InstallationJobUpdateOne {
	ijuo.mutation.RemoveProgressHistoryIDs(ids...)
	return ijuo
}

// RemoveProgressHistory removes "progress_history" edges to InstallationJobProgress entities.
func (ijuo *InstallationJobUpdateOne) RemoveProgressHistory(i ...*InstallationJobProgress) *InstallationJobUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ijuo.RemoveProgressHistoryIDs(ids...)
}

// ClearRequestingPartner clears the "requesting_partner" edge to the Partner entity.
func (ijuo *InstallationJobUpdateOne) ClearRequestingPartner() *InstallationJobUpdateOne {
	ijuo.mutation.ClearRequestingPartner()
	return ijuo
}

// ClearAssignedPartner clears the "assigned_partner" edge to the Partner entity.
func (ijuo *InstallationJobUpdateOne) ClearAssignedPartner() *InstallationJobUpdateOne {
	ijuo.mutation.ClearAssignedPartner()
	return ijuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (ijuo *InstallationJobUpdateOne) ClearCreator() *InstallationJobUpdateOne {
	ijuo.mutation.ClearCreator()
	return ijuo
}

// ClearSalesRep clears the "sales_rep" edge to the User entity.
func (ijuo *InstallationJobUpdateOne) ClearSalesRep() *InstallationJobUpdateOne {
	ijuo.mutation.ClearSalesRep()
	return ijuo
}

// Where appends a list predicates to the InstallationJobUpdate builder.
func (ijuo *InstallationJobUpdateOne) Where(ps ...predicate.InstallationJob) *InstallationJobUpdateOne {
	ijuo.mutation.Where(ps...)
	return ijuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ijuo *InstallationJobUpdateOne) Select(field string, fields ...string) *InstallationJobUpdateOne {
	ijuo.fields = append([]string{field}, fields...)
	return ijuo
}

// Save executes the query and returns the updated InstallationJob entity.
func (ijuo *InstallationJobUpdateOne) Save(ctx context.Context) (*InstallationJob, error) {
	ijuo.defaults()
	return withHooks(ctx, ijuo.sqlSave, ijuo.mutation, ijuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ijuo *InstallationJobUpdateOne) SaveX(ctx context.Context) *InstallationJob {
	node, err := ijuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ijuo *InstallationJobUpdateOne) Exec(ctx context.Context) error {
	_, err := ijuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijuo *InstallationJobUpdateOne) ExecX(ctx context.Context) {
	if err := ijuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ijuo *InstallationJobUpdateOne) defaults() {
	if _, ok := ijuo.mutation.UpdatedAt(); !ok {
		v := installationjob.UpdateDefaultUpdatedAt()
		ijuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ijuo *InstallationJobUpdateOne) check() error {
	if v, ok := ijuo.mutation.GetType(); ok {
		if err := installationjob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.type": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.OwnerName(); ok {
		if err := installationjob.OwnerNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_name", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_name": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.OwnerPhone(); ok {
		if err := installationjob.OwnerPhoneValidator(v); err != nil {
			return &ValidationError{Name: "owner_phone", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_phone": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.OwnerAddress(); ok {
		if err := installationjob.OwnerAddressValidator(v); err != nil {
			return &ValidationError{Name: "owner_address", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_address": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.SpecialNote(); ok {
		if err := installationjob.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.special_note": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.Pkg(); ok {
		if err := installationjob.PkgValidator(v); err != nil {
			return &ValidationError{Name: "pkg", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.pkg": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.PkgDescription(); ok {
		if err := installationjob.PkgDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "pkg_description", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.pkg_description": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.Approval(); ok {
		if err := installationjob.ApprovalValidator(v); err != nil {
			return &ValidationError{Name: "approval", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.approval": %w`, err)}
		}
	}
	if v, ok := ijuo.mutation.Status(); ok {
		if err := installationjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ijuo *InstallationJobUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstallationJobUpdateOne {
	ijuo.modifiers = append(ijuo.modifiers, modifiers...)
	return ijuo
}

func (ijuo *InstallationJobUpdateOne) sqlSave(ctx context.Context) (_node *InstallationJob, err error) {
	if err := ijuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(installationjob.Table, installationjob.Columns, sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString))
	id, ok := ijuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstallationJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ijuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installationjob.FieldID)
		for _, f := range fields {
			if !installationjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != installationjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ijuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ijuo.mutation.UpdatedAt(); ok {
		_spec.SetField(installationjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ijuo.mutation.GetType(); ok {
		_spec.SetField(installationjob.FieldType, field.TypeEnum, value)
	}
	if value, ok := ijuo.mutation.OwnerName(); ok {
		_spec.SetField(installationjob.FieldOwnerName, field.TypeString, value)
	}
	if value, ok := ijuo.mutation.OwnerPhone(); ok {
		_spec.SetField(installationjob.FieldOwnerPhone, field.TypeString, value)
	}
	if value, ok := ijuo.mutation.OwnerEmail(); ok {
		_spec.SetField(installationjob.FieldOwnerEmail, field.TypeString, value)
	}
	if ijuo.mutation.OwnerEmailCleared() {
		_spec.ClearField(installationjob.FieldOwnerEmail, field.TypeString)
	}
	if value, ok := ijuo.mutation.OwnerAddress(); ok {
		_spec.SetField(installationjob.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := ijuo.mutation.OwnerAddressLat(); ok {
		_spec.SetField(installationjob.FieldOwnerAddressLat, field.TypeFloat64, value)
	}
	if value, ok := ijuo.mutation.AddedOwnerAddressLat(); ok {
		_spec.AddField(installationjob.FieldOwnerAddressLat, field.TypeFloat64, value)
	}
	if ijuo.mutation.OwnerAddressLatCleared() {
		_spec.ClearField(installationjob.FieldOwnerAddressLat, field.TypeFloat64)
	}
	if value, ok := ijuo.mutation.OwnerAddressLng(); ok {
		_spec.SetField(installationjob.FieldOwnerAddressLng, field.TypeFloat64, value)
	}
	if value, ok := ijuo.mutation.AddedOwnerAddressLng(); ok {
		_spec.AddField(installationjob.FieldOwnerAddressLng, field.TypeFloat64, value)
	}
	if ijuo.mutation.OwnerAddressLngCleared() {
		_spec.ClearField(installationjob.FieldOwnerAddressLng, field.TypeFloat64)
	}
	if value, ok := ijuo.mutation.SpecialNote(); ok {
		_spec.SetField(installationjob.FieldSpecialNote, field.TypeString, value)
	}
	if ijuo.mutation.SpecialNoteCleared() {
		_spec.ClearField(installationjob.FieldSpecialNote, field.TypeString)
	}
	if value, ok := ijuo.mutation.Pkg(); ok {
		_spec.SetField(installationjob.FieldPkg, field.TypeString, value)
	}
	if value, ok := ijuo.mutation.PkgDescription(); ok {
		_spec.SetField(installationjob.FieldPkgDescription, field.TypeString, value)
	}
	if ijuo.mutation.PkgDescriptionCleared() {
		_spec.ClearField(installationjob.FieldPkgDescription, field.TypeString)
	}
	if value, ok := ijuo.mutation.PkgFeatures(); ok {
		_spec.SetField(installationjob.FieldPkgFeatures, field.TypeJSON, value)
	}
	if value, ok := ijuo.mutation.AppendedPkgFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, installationjob.FieldPkgFeatures, value)
		})
	}
	if ijuo.mutation.PkgFeaturesCleared() {
		_spec.ClearField(installationjob.FieldPkgFeatures, field.TypeJSON)
	}
	if value, ok := ijuo.mutation.Price(); ok {
		_spec.SetField(installationjob.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ijuo.mutation.AddedPrice(); ok {
		_spec.AddField(installationjob.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ijuo.mutation.Approval(); ok {
		_spec.SetField(installationjob.FieldApproval, field.TypeEnum, value)
	}
	if value, ok := ijuo.mutation.ApprovalAt(); ok {
		_spec.SetField(installationjob.FieldApprovalAt, field.TypeTime, value)
	}
	if value, ok := ijuo.mutation.DenyReason(); ok {
		_spec.SetField(installationjob.FieldDenyReason, field.TypeString, value)
	}
	if ijuo.mutation.DenyReasonCleared() {
		_spec.ClearField(installationjob.FieldDenyReason, field.TypeString)
	}
	if value, ok := ijuo.mutation.Status(); ok {
		_spec.SetField(installationjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ijuo.mutation.StatusAt(); ok {
		_spec.SetField(installationjob.FieldStatusAt, field.TypeTime, value)
	}
	if ijuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ijuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijuo.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.RemovedProgressHistoryIDs(); len(nodes) > 0 && !ijuo.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijuo.mutation.RequestingPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.RequestingPartnerTable,
			Columns: []string{installationjob.RequestingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.RequestingPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.RequestingPartnerTable,
			Columns: []string{installationjob.RequestingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijuo.mutation.AssignedPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.AssignedPartnerTable,
			Columns: []string{installationjob.AssignedPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.AssignedPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.AssignedPartnerTable,
			Columns: []string{installationjob.AssignedPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.CreatorTable,
			Columns: []string{installationjob.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.CreatorTable,
			Columns: []string{installationjob.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijuo.mutation.SalesRepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.SalesRepTable,
			Columns: []string{installationjob.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijuo.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.SalesRepTable,
			Columns: []string{installationjob.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ijuo.modifiers...)
	_node = &InstallationJob{config: ijuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ijuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installationjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ijuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrainingCourseCreate is the builder for creating a TrainingCourse entity.
type TrainingCourseCreate struct {
	config
	mutation *TrainingCourseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TrainingCourseCreate) SetCreatedAt(t time.Time) *TrainingCourseCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TrainingCourseCreate) SetNillableCreatedAt(t *time.Time) *TrainingCourseCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TrainingCourseCreate) SetUpdatedAt(t time.Time) *TrainingCourseCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TrainingCourseCreate) SetNillableUpdatedAt(t *time.Time) *TrainingCourseCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetName sets the "name" field.
func (tcc *TrainingCourseCreate) SetName(s string) *TrainingCourseCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TrainingCourseCreate) SetID(s string) *TrainingCourseCreate {
	tcc.mutation.SetID(s)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TrainingCourseCreate) SetNillableID(s *string) *TrainingCourseCreate {
	if s != nil {
		tcc.SetID(*s)
	}
	return tcc
}

// AddTrainingVideoIDs adds the "training_videos" edge to the TrainingVideo entity by IDs.
func (tcc *TrainingCourseCreate) AddTrainingVideoIDs(ids ...string) *TrainingCourseCreate {
	tcc.mutation.AddTrainingVideoIDs(ids...)
	return tcc
}

// AddTrainingVideos adds the "training_videos" edges to the TrainingVideo entity.
func (tcc *TrainingCourseCreate) AddTrainingVideos(t ...*TrainingVideo) *TrainingCourseCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddTrainingVideoIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tcc *TrainingCourseCreate) SetCreatorID(id string) *TrainingCourseCreate {
	tcc.mutation.SetCreatorID(id)
	return tcc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tcc *TrainingCourseCreate) SetNillableCreatorID(id *string) *TrainingCourseCreate {
	if id != nil {
		tcc = tcc.SetCreatorID(*id)
	}
	return tcc
}

// SetCreator sets the "creator" edge to the User entity.
func (tcc *TrainingCourseCreate) SetCreator(u *User) *TrainingCourseCreate {
	return tcc.SetCreatorID(u.ID)
}

// Mutation returns the TrainingCourseMutation object of the builder.
func (tcc *TrainingCourseCreate) Mutation() *TrainingCourseMutation {
	return tcc.mutation
}

// Save creates the TrainingCourse in the database.
func (tcc *TrainingCourseCreate) Save(ctx context.Context) (*TrainingCourse, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TrainingCourseCreate) SaveX(ctx context.Context) *TrainingCourse {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TrainingCourseCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TrainingCourseCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TrainingCourseCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := trainingcourse.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := trainingcourse.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.ID(); !ok {
		v := trainingcourse.DefaultID()
		tcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TrainingCourseCreate) check() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TrainingCourse.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TrainingCourse.updated_at"`)}
	}
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TrainingCourse.name"`)}
	}
	if v, ok := tcc.mutation.Name(); ok {
		if err := trainingcourse.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TrainingCourse.name": %w`, err)}
		}
	}
	if v, ok := tcc.mutation.ID(); ok {
		if err := trainingcourse.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TrainingCourse.id": %w`, err)}
		}
	}
	return nil
}

func (tcc *TrainingCourseCreate) sqlSave(ctx context.Context) (*TrainingCourse, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrainingCourse.ID type: %T", _spec.ID.Value)
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TrainingCourseCreate) createSpec() (*TrainingCourse, *sqlgraph.CreateSpec) {
	var (
		_node = &TrainingCourse{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(trainingcourse.Table, sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(trainingcourse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(trainingcourse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.SetField(trainingcourse.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := tcc.mutation.TrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trainingcourse.CreatorTable,
			Columns: []string{trainingcourse.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrainingCourse.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrainingCourseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcc *TrainingCourseCreate) OnConflict(opts ...sql.ConflictOption) *TrainingCourseUpsertOne {
	tcc.conflict = opts
	return &TrainingCourseUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrainingCourse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TrainingCourseCreate) OnConflictColumns(columns ...string) *TrainingCourseUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TrainingCourseUpsertOne{
		create: tcc,
	}
}

type (
	// TrainingCourseUpsertOne is the builder for "upsert"-ing
	//  one TrainingCourse node.
	TrainingCourseUpsertOne struct {
		create *TrainingCourseCreate
	}

	// TrainingCourseUpsert is the "OnConflict" setter.
	TrainingCourseUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TrainingCourseUpsert) SetUpdatedAt(v time.Time) *TrainingCourseUpsert {
	u.Set(trainingcourse.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrainingCourseUpsert) UpdateUpdatedAt() *TrainingCourseUpsert {
	u.SetExcluded(trainingcourse.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *TrainingCourseUpsert) SetName(v string) *TrainingCourseUpsert {
	u.Set(trainingcourse.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrainingCourseUpsert) UpdateName() *TrainingCourseUpsert {
	u.SetExcluded(trainingcourse.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TrainingCourse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trainingcourse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrainingCourseUpsertOne) UpdateNewValues() *TrainingCourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(trainingcourse.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trainingcourse.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrainingCourse.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrainingCourseUpsertOne) Ignore() *TrainingCourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrainingCourseUpsertOne) DoNothing() *TrainingCourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrainingCourseCreate.OnConflict
// documentation for more info.
func (u *TrainingCourseUpsertOne) Update(set func(*TrainingCourseUpsert)) *TrainingCourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrainingCourseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrainingCourseUpsertOne) SetUpdatedAt(v time.Time) *TrainingCourseUpsertOne {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrainingCourseUpsertOne) UpdateUpdatedAt() *TrainingCourseUpsertOne {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TrainingCourseUpsertOne) SetName(v string) *TrainingCourseUpsertOne {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrainingCourseUpsertOne) UpdateName() *TrainingCourseUpsertOne {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TrainingCourseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrainingCourseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrainingCourseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrainingCourseUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TrainingCourseUpsertOne.ID is not supported by MySQL driver. Use TrainingCourseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrainingCourseUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrainingCourseCreateBulk is the builder for creating many TrainingCourse entities in bulk.
type TrainingCourseCreateBulk struct {
	config
	builders []*TrainingCourseCreate
	conflict []sql.ConflictOption
}

// Save creates the TrainingCourse entities in the database.
func (tccb *TrainingCourseCreateBulk) Save(ctx context.Context) ([]*TrainingCourse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TrainingCourse, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainingCourseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TrainingCourseCreateBulk) SaveX(ctx context.Context) []*TrainingCourse {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TrainingCourseCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TrainingCourseCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrainingCourse.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrainingCourseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tccb *TrainingCourseCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrainingCourseUpsertBulk {
	tccb.conflict = opts
	return &TrainingCourseUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrainingCourse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TrainingCourseCreateBulk) OnConflictColumns(columns ...string) *TrainingCourseUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TrainingCourseUpsertBulk{
		create: tccb,
	}
}

// TrainingCourseUpsertBulk is the builder for "upsert"-ing
// a bulk of TrainingCourse nodes.
type TrainingCourseUpsertBulk struct {
	create *TrainingCourseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrainingCourse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trainingcourse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrainingCourseUpsertBulk) UpdateNewValues() *TrainingCourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(trainingcourse.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trainingcourse.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrainingCourse.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrainingCourseUpsertBulk) Ignore() *TrainingCourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrainingCourseUpsertBulk) DoNothing() *TrainingCourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrainingCourseCreateBulk.OnConflict
// documentation for more info.
func (u *TrainingCourseUpsertBulk) Update(set func(*TrainingCourseUpsert)) *TrainingCourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrainingCourseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrainingCourseUpsertBulk) SetUpdatedAt(v time.Time) *TrainingCourseUpsertBulk {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrainingCourseUpsertBulk) UpdateUpdatedAt() *TrainingCourseUpsertBulk {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TrainingCourseUpsertBulk) SetName(v string) *TrainingCourseUpsertBulk {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrainingCourseUpsertBulk) UpdateName() *TrainingCourseUpsertBulk {
	return u.Update(func(s *TrainingCourseUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TrainingCourseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrainingCourseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrainingCourseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrainingCourseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package partnercontact

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the partnercontact type in the database.
	Label = "partner_contact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPartnerID holds the string denoting the partner_id field in the database.
	FieldPartnerID = "partner_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldInvoicingEmail holds the string denoting the invoicing_email field in the database.
	FieldInvoicingEmail = "invoicing_email"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// Table holds the table name of the partnercontact in the database.
	Table = "partner_contacts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "partner_contacts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PartnerTable is the table that holds the partner relation/edge.
	PartnerTable = "partner_contacts"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
	// PartnerColumn is the table column denoting the partner relation/edge.
	PartnerColumn = "partner_id"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "user_sessions"
	// SessionsInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	SessionsInverseTable = "user_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "partner_contact_id"
)

// Columns holds all SQL columns for partnercontact fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPartnerID,
	FieldUserID,
	FieldRole,
	FieldType,
	FieldTitle,
	FieldDescription,
	FieldInvoicingEmail,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r enum.PartnerContactRole) error {
	switch r.String() {
	case "NONE", "ADMIN", "SALES_REP":
		return nil
	default:
		return fmt.Errorf("partnercontact: invalid enum value for role field: %q", r)
	}
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enum.PartnerContact) error {
	switch _type.String() {
	case "PRIMARY", "OPERATIONS", "APPROVAL", "ACCOUNTING", "INVOICING", "CUSTOMER_SERVICE", "CUSTOM":
		return nil
	default:
		return fmt.Errorf("partnercontact: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the PartnerContact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPartnerID orders the results by the partner_id field.
func ByPartnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartnerID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByInvoicingEmail orders the results by the invoicing_email field.
func ByInvoicingEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoicingEmail, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPartnerField orders the results by partner field.
func ByPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PartnerTable, PartnerColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}

var (
	// enum.PartnerContactRole must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.PartnerContactRole)(nil)
	// enum.PartnerContactRole must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.PartnerContactRole)(nil)
)

var (
	// enum.PartnerContact must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.PartnerContact)(nil)
	// enum.PartnerContact must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.PartnerContact)(nil)
)

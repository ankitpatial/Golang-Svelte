// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SurveyProgress is the model entity for the SurveyProgress schema.
type SurveyProgress struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// Status holds the value of the "status" field.
	Status enum.SurveyProgress `json:"status,omitempty"`
	// Complete holds the value of the "complete" field.
	Complete bool `json:"complete,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyProgressQuery when eager-loading is set.
	Edges        SurveyProgressEdges `json:"edges"`
	api_user_id  *string
	survey_id    *string
	creator      *string
	selectValues sql.SelectValues
}

// SurveyProgressEdges holds the relations/edges for other nodes in the graph.
type SurveyProgressEdges struct {
	// Survey holds the value of the survey edge.
	Survey *Survey `json:"survey,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// CreatorAPI holds the value of the creator_api edge.
	CreatorAPI *ApiUser `json:"creator_api,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// SurveyOrErr returns the Survey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyProgressEdges) SurveyOrErr() (*Survey, error) {
	if e.loadedTypes[0] {
		if e.Survey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: survey.Label}
		}
		return e.Survey, nil
	}
	return nil, &NotLoadedError{edge: "survey"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyProgressEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CreatorAPIOrErr returns the CreatorAPI value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyProgressEdges) CreatorAPIOrErr() (*ApiUser, error) {
	if e.loadedTypes[2] {
		if e.CreatorAPI == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.CreatorAPI, nil
	}
	return nil, &NotLoadedError{edge: "creator_api"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyProgress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyprogress.FieldComplete:
			values[i] = new(sql.NullBool)
		case surveyprogress.FieldID, surveyprogress.FieldStatus, surveyprogress.FieldNote:
			values[i] = new(sql.NullString)
		case surveyprogress.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case surveyprogress.ForeignKeys[0]: // api_user_id
			values[i] = new(sql.NullString)
		case surveyprogress.ForeignKeys[1]: // survey_id
			values[i] = new(sql.NullString)
		case surveyprogress.ForeignKeys[2]: // creator
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyProgress fields.
func (sp *SurveyProgress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyprogress.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sp.ID = value.String
			}
		case surveyprogress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case surveyprogress.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = enum.SurveyProgress(value.String)
			}
		case surveyprogress.FieldComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field complete", values[i])
			} else if value.Valid {
				sp.Complete = value.Bool
			}
		case surveyprogress.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				sp.Note = value.String
			}
		case surveyprogress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_user_id", values[i])
			} else if value.Valid {
				sp.api_user_id = new(string)
				*sp.api_user_id = value.String
			}
		case surveyprogress.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field survey_id", values[i])
			} else if value.Valid {
				sp.survey_id = new(string)
				*sp.survey_id = value.String
			}
		case surveyprogress.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				sp.creator = new(string)
				*sp.creator = value.String
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyProgress.
// This includes values selected through modifiers, order, etc.
func (sp *SurveyProgress) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QuerySurvey queries the "survey" edge of the SurveyProgress entity.
func (sp *SurveyProgress) QuerySurvey() *SurveyQuery {
	return NewSurveyProgressClient(sp.config).QuerySurvey(sp)
}

// QueryCreator queries the "creator" edge of the SurveyProgress entity.
func (sp *SurveyProgress) QueryCreator() *UserQuery {
	return NewSurveyProgressClient(sp.config).QueryCreator(sp)
}

// QueryCreatorAPI queries the "creator_api" edge of the SurveyProgress entity.
func (sp *SurveyProgress) QueryCreatorAPI() *ApiUserQuery {
	return NewSurveyProgressClient(sp.config).QueryCreatorAPI(sp)
}

// Update returns a builder for updating this SurveyProgress.
// Note that you need to call SurveyProgress.Unwrap() before calling this method if this SurveyProgress
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SurveyProgress) Update() *SurveyProgressUpdateOne {
	return NewSurveyProgressClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SurveyProgress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SurveyProgress) Unwrap() *SurveyProgress {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SurveyProgress is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SurveyProgress) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyProgress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", ")
	builder.WriteString("complete=")
	builder.WriteString(fmt.Sprintf("%v", sp.Complete))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(sp.Note)
	builder.WriteByte(')')
	return builder.String()
}

// SurveyProgresses is a parsable slice of SurveyProgress.
type SurveyProgresses []*SurveyProgress

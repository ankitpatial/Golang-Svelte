// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/document"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *ProductCreate) SetType(e enum.Product) *ProductCreate {
	pc.mutation.SetType(e)
	return pc
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductCreate) SetDescription(s string) *ProductCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetFeatures sets the "features" field.
func (pc *ProductCreate) SetFeatures(s []string) *ProductCreate {
	pc.mutation.SetFeatures(s)
	return pc
}

// SetSpecialNote sets the "special_note" field.
func (pc *ProductCreate) SetSpecialNote(s string) *ProductCreate {
	pc.mutation.SetSpecialNote(s)
	return pc
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSpecialNote(s *string) *ProductCreate {
	if s != nil {
		pc.SetSpecialNote(*s)
	}
	return pc
}

// SetUnitPrice sets the "unit_price" field.
func (pc *ProductCreate) SetUnitPrice(f float64) *ProductCreate {
	pc.mutation.SetUnitPrice(f)
	return pc
}

// SetUnitsInStock sets the "units_in_stock" field.
func (pc *ProductCreate) SetUnitsInStock(i int) *ProductCreate {
	pc.mutation.SetUnitsInStock(i)
	return pc
}

// SetNillableUnitsInStock sets the "units_in_stock" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUnitsInStock(i *int) *ProductCreate {
	if i != nil {
		pc.SetUnitsInStock(*i)
	}
	return pc
}

// SetUnitsOnOrder sets the "units_on_order" field.
func (pc *ProductCreate) SetUnitsOnOrder(i int) *ProductCreate {
	pc.mutation.SetUnitsOnOrder(i)
	return pc
}

// SetNillableUnitsOnOrder sets the "units_on_order" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUnitsOnOrder(i *int) *ProductCreate {
	if i != nil {
		pc.SetUnitsOnOrder(*i)
	}
	return pc
}

// SetDiscontinued sets the "discontinued" field.
func (pc *ProductCreate) SetDiscontinued(b bool) *ProductCreate {
	pc.mutation.SetDiscontinued(b)
	return pc
}

// SetNillableDiscontinued sets the "discontinued" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDiscontinued(b *bool) *ProductCreate {
	if b != nil {
		pc.SetDiscontinued(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(s string) *ProductCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableID(s *string) *ProductCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// AddPackageIDs adds the "package" edge to the ProductPackage entity by IDs.
func (pc *ProductCreate) AddPackageIDs(ids ...string) *ProductCreate {
	pc.mutation.AddPackageIDs(ids...)
	return pc
}

// AddPackage adds the "package" edges to the ProductPackage entity.
func (pc *ProductCreate) AddPackage(p ...*ProductPackage) *ProductCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPackageIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (pc *ProductCreate) SetCreatorID(id string) *ProductCreate {
	pc.mutation.SetCreatorID(id)
	return pc
}

// SetCreator sets the "creator" edge to the User entity.
func (pc *ProductCreate) SetCreator(u *User) *ProductCreate {
	return pc.SetCreatorID(u.ID)
}

// SetImageID sets the "image" edge to the Document entity by ID.
func (pc *ProductCreate) SetImageID(id string) *ProductCreate {
	pc.mutation.SetImageID(id)
	return pc
}

// SetNillableImageID sets the "image" edge to the Document entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableImageID(id *string) *ProductCreate {
	if id != nil {
		pc = pc.SetImageID(*id)
	}
	return pc
}

// SetImage sets the "image" edge to the Document entity.
func (pc *ProductCreate) SetImage(d *Document) *ProductCreate {
	return pc.SetImageID(d.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Features(); !ok {
		v := product.DefaultFeatures
		pc.mutation.SetFeatures(v)
	}
	if _, ok := pc.mutation.UnitsInStock(); !ok {
		v := product.DefaultUnitsInStock
		pc.mutation.SetUnitsInStock(v)
	}
	if _, ok := pc.mutation.UnitsOnOrder(); !ok {
		v := product.DefaultUnitsOnOrder
		pc.mutation.SetUnitsOnOrder(v)
	}
	if _, ok := pc.mutation.Discontinued(); !ok {
		v := product.DefaultDiscontinued
		pc.mutation.SetDiscontinued(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := product.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Product.updated_at"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Product.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := product.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Product.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Product.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Product.description"`)}
	}
	if v, ok := pc.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Features(); !ok {
		return &ValidationError{Name: "features", err: errors.New(`ent: missing required field "Product.features"`)}
	}
	if v, ok := pc.mutation.SpecialNote(); ok {
		if err := product.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "Product.special_note": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`ent: missing required field "Product.unit_price"`)}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := product.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Product.id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "Product.creator"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Product.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(product.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Features(); ok {
		_spec.SetField(product.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := pc.mutation.SpecialNote(); ok {
		_spec.SetField(product.FieldSpecialNote, field.TypeString, value)
		_node.SpecialNote = value
	}
	if value, ok := pc.mutation.UnitPrice(); ok {
		_spec.SetField(product.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := pc.mutation.UnitsInStock(); ok {
		_spec.SetField(product.FieldUnitsInStock, field.TypeInt, value)
		_node.UnitsInStock = value
	}
	if value, ok := pc.mutation.UnitsOnOrder(); ok {
		_spec.SetField(product.FieldUnitsOnOrder, field.TypeInt, value)
		_node.UnitsOnOrder = value
	}
	if value, ok := pc.mutation.Discontinued(); ok {
		_spec.SetField(product.FieldDiscontinued, field.TypeBool, value)
		_node.Discontinued = value
	}
	if nodes := pc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CreatorTable,
			Columns: []string{product.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.ImageTable,
			Columns: []string{product.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsert) SetUpdatedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedAt() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *ProductUpsert) SetType(v enum.Product) *ProductUpsert {
	u.Set(product.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProductUpsert) UpdateType() *ProductUpsert {
	u.SetExcluded(product.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *ProductUpsert) SetName(v string) *ProductUpsert {
	u.Set(product.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateName() *ProductUpsert {
	u.SetExcluded(product.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ProductUpsert) SetDescription(v string) *ProductUpsert {
	u.Set(product.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDescription() *ProductUpsert {
	u.SetExcluded(product.FieldDescription)
	return u
}

// SetFeatures sets the "features" field.
func (u *ProductUpsert) SetFeatures(v []string) *ProductUpsert {
	u.Set(product.FieldFeatures, v)
	return u
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *ProductUpsert) UpdateFeatures() *ProductUpsert {
	u.SetExcluded(product.FieldFeatures)
	return u
}

// SetSpecialNote sets the "special_note" field.
func (u *ProductUpsert) SetSpecialNote(v string) *ProductUpsert {
	u.Set(product.FieldSpecialNote, v)
	return u
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *ProductUpsert) UpdateSpecialNote() *ProductUpsert {
	u.SetExcluded(product.FieldSpecialNote)
	return u
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *ProductUpsert) ClearSpecialNote() *ProductUpsert {
	u.SetNull(product.FieldSpecialNote)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *ProductUpsert) SetUnitPrice(v float64) *ProductUpsert {
	u.Set(product.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUnitPrice() *ProductUpsert {
	u.SetExcluded(product.FieldUnitPrice)
	return u
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *ProductUpsert) AddUnitPrice(v float64) *ProductUpsert {
	u.Add(product.FieldUnitPrice, v)
	return u
}

// SetUnitsInStock sets the "units_in_stock" field.
func (u *ProductUpsert) SetUnitsInStock(v int) *ProductUpsert {
	u.Set(product.FieldUnitsInStock, v)
	return u
}

// UpdateUnitsInStock sets the "units_in_stock" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUnitsInStock() *ProductUpsert {
	u.SetExcluded(product.FieldUnitsInStock)
	return u
}

// AddUnitsInStock adds v to the "units_in_stock" field.
func (u *ProductUpsert) AddUnitsInStock(v int) *ProductUpsert {
	u.Add(product.FieldUnitsInStock, v)
	return u
}

// ClearUnitsInStock clears the value of the "units_in_stock" field.
func (u *ProductUpsert) ClearUnitsInStock() *ProductUpsert {
	u.SetNull(product.FieldUnitsInStock)
	return u
}

// SetUnitsOnOrder sets the "units_on_order" field.
func (u *ProductUpsert) SetUnitsOnOrder(v int) *ProductUpsert {
	u.Set(product.FieldUnitsOnOrder, v)
	return u
}

// UpdateUnitsOnOrder sets the "units_on_order" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUnitsOnOrder() *ProductUpsert {
	u.SetExcluded(product.FieldUnitsOnOrder)
	return u
}

// AddUnitsOnOrder adds v to the "units_on_order" field.
func (u *ProductUpsert) AddUnitsOnOrder(v int) *ProductUpsert {
	u.Add(product.FieldUnitsOnOrder, v)
	return u
}

// ClearUnitsOnOrder clears the value of the "units_on_order" field.
func (u *ProductUpsert) ClearUnitsOnOrder() *ProductUpsert {
	u.SetNull(product.FieldUnitsOnOrder)
	return u
}

// SetDiscontinued sets the "discontinued" field.
func (u *ProductUpsert) SetDiscontinued(v bool) *ProductUpsert {
	u.Set(product.FieldDiscontinued, v)
	return u
}

// UpdateDiscontinued sets the "discontinued" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDiscontinued() *ProductUpsert {
	u.SetExcluded(product.FieldDiscontinued)
	return u
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (u *ProductUpsert) ClearDiscontinued() *ProductUpsert {
	u.SetNull(product.FieldDiscontinued)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(product.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(product.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertOne) SetUpdatedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *ProductUpsertOne) SetType(v enum.Product) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateType() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *ProductUpsertOne) SetName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProductUpsertOne) SetDescription(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDescription() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDescription()
	})
}

// SetFeatures sets the "features" field.
func (u *ProductUpsertOne) SetFeatures(v []string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetFeatures(v)
	})
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateFeatures() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateFeatures()
	})
}

// SetSpecialNote sets the "special_note" field.
func (u *ProductUpsertOne) SetSpecialNote(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetSpecialNote(v)
	})
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateSpecialNote() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSpecialNote()
	})
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *ProductUpsertOne) ClearSpecialNote() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearSpecialNote()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *ProductUpsertOne) SetUnitPrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *ProductUpsertOne) AddUnitPrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUnitPrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetUnitsInStock sets the "units_in_stock" field.
func (u *ProductUpsertOne) SetUnitsInStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnitsInStock(v)
	})
}

// AddUnitsInStock adds v to the "units_in_stock" field.
func (u *ProductUpsertOne) AddUnitsInStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddUnitsInStock(v)
	})
}

// UpdateUnitsInStock sets the "units_in_stock" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUnitsInStock() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnitsInStock()
	})
}

// ClearUnitsInStock clears the value of the "units_in_stock" field.
func (u *ProductUpsertOne) ClearUnitsInStock() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearUnitsInStock()
	})
}

// SetUnitsOnOrder sets the "units_on_order" field.
func (u *ProductUpsertOne) SetUnitsOnOrder(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnitsOnOrder(v)
	})
}

// AddUnitsOnOrder adds v to the "units_on_order" field.
func (u *ProductUpsertOne) AddUnitsOnOrder(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddUnitsOnOrder(v)
	})
}

// UpdateUnitsOnOrder sets the "units_on_order" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUnitsOnOrder() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnitsOnOrder()
	})
}

// ClearUnitsOnOrder clears the value of the "units_on_order" field.
func (u *ProductUpsertOne) ClearUnitsOnOrder() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearUnitsOnOrder()
	})
}

// SetDiscontinued sets the "discontinued" field.
func (u *ProductUpsertOne) SetDiscontinued(v bool) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDiscontinued(v)
	})
}

// UpdateDiscontinued sets the "discontinued" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDiscontinued() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDiscontinued()
	})
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (u *ProductUpsertOne) ClearDiscontinued() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDiscontinued()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProductUpsertOne.ID is not supported by MySQL driver. Use ProductUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(product.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(product.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertBulk) SetUpdatedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *ProductUpsertBulk) SetType(v enum.Product) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateType() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *ProductUpsertBulk) SetName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProductUpsertBulk) SetDescription(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDescription() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDescription()
	})
}

// SetFeatures sets the "features" field.
func (u *ProductUpsertBulk) SetFeatures(v []string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetFeatures(v)
	})
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateFeatures() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateFeatures()
	})
}

// SetSpecialNote sets the "special_note" field.
func (u *ProductUpsertBulk) SetSpecialNote(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetSpecialNote(v)
	})
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateSpecialNote() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSpecialNote()
	})
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *ProductUpsertBulk) ClearSpecialNote() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearSpecialNote()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *ProductUpsertBulk) SetUnitPrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *ProductUpsertBulk) AddUnitPrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUnitPrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetUnitsInStock sets the "units_in_stock" field.
func (u *ProductUpsertBulk) SetUnitsInStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnitsInStock(v)
	})
}

// AddUnitsInStock adds v to the "units_in_stock" field.
func (u *ProductUpsertBulk) AddUnitsInStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddUnitsInStock(v)
	})
}

// UpdateUnitsInStock sets the "units_in_stock" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUnitsInStock() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnitsInStock()
	})
}

// ClearUnitsInStock clears the value of the "units_in_stock" field.
func (u *ProductUpsertBulk) ClearUnitsInStock() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearUnitsInStock()
	})
}

// SetUnitsOnOrder sets the "units_on_order" field.
func (u *ProductUpsertBulk) SetUnitsOnOrder(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnitsOnOrder(v)
	})
}

// AddUnitsOnOrder adds v to the "units_on_order" field.
func (u *ProductUpsertBulk) AddUnitsOnOrder(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddUnitsOnOrder(v)
	})
}

// UpdateUnitsOnOrder sets the "units_on_order" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUnitsOnOrder() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnitsOnOrder()
	})
}

// ClearUnitsOnOrder clears the value of the "units_on_order" field.
func (u *ProductUpsertBulk) ClearUnitsOnOrder() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearUnitsOnOrder()
	})
}

// SetDiscontinued sets the "discontinued" field.
func (u *ProductUpsertBulk) SetDiscontinued(v bool) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDiscontinued(v)
	})
}

// UpdateDiscontinued sets the "discontinued" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDiscontinued() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDiscontinued()
	})
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (u *ProductUpsertBulk) ClearDiscontinued() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDiscontinued()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

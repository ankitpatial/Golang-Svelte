// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApiUserToken is the model entity for the ApiUserToken schema.
type ApiUserToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// TokenType holds the value of the "token_type" field.
	TokenType string `json:"token_type,omitempty"`
	// TokenID holds the value of the "token_id" field.
	TokenID string `json:"token_id,omitempty"`
	// RefreshTokenID holds the value of the "refresh_token_id" field.
	RefreshTokenID string `json:"refresh_token_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApiUserTokenQuery when eager-loading is set.
	Edges        ApiUserTokenEdges `json:"edges"`
	api_user_id  *string
	selectValues sql.SelectValues
}

// ApiUserTokenEdges holds the relations/edges for other nodes in the graph.
type ApiUserTokenEdges struct {
	// APIUser holds the value of the api_user edge.
	APIUser *ApiUser `json:"api_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// APIUserOrErr returns the APIUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApiUserTokenEdges) APIUserOrErr() (*ApiUser, error) {
	if e.loadedTypes[0] {
		if e.APIUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.APIUser, nil
	}
	return nil, &NotLoadedError{edge: "api_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiUserToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apiusertoken.FieldID, apiusertoken.FieldTokenType, apiusertoken.FieldTokenID, apiusertoken.FieldRefreshTokenID:
			values[i] = new(sql.NullString)
		case apiusertoken.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case apiusertoken.ForeignKeys[0]: // api_user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiUserToken fields.
func (aut *ApiUserToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apiusertoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aut.ID = value.String
			}
		case apiusertoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aut.CreatedAt = value.Time
			}
		case apiusertoken.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				aut.TokenType = value.String
			}
		case apiusertoken.FieldTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value.Valid {
				aut.TokenID = value.String
			}
		case apiusertoken.FieldRefreshTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token_id", values[i])
			} else if value.Valid {
				aut.RefreshTokenID = value.String
			}
		case apiusertoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_user_id", values[i])
			} else if value.Valid {
				aut.api_user_id = new(string)
				*aut.api_user_id = value.String
			}
		default:
			aut.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiUserToken.
// This includes values selected through modifiers, order, etc.
func (aut *ApiUserToken) Value(name string) (ent.Value, error) {
	return aut.selectValues.Get(name)
}

// QueryAPIUser queries the "api_user" edge of the ApiUserToken entity.
func (aut *ApiUserToken) QueryAPIUser() *ApiUserQuery {
	return NewApiUserTokenClient(aut.config).QueryAPIUser(aut)
}

// Update returns a builder for updating this ApiUserToken.
// Note that you need to call ApiUserToken.Unwrap() before calling this method if this ApiUserToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (aut *ApiUserToken) Update() *ApiUserTokenUpdateOne {
	return NewApiUserTokenClient(aut.config).UpdateOne(aut)
}

// Unwrap unwraps the ApiUserToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aut *ApiUserToken) Unwrap() *ApiUserToken {
	_tx, ok := aut.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiUserToken is not a transactional entity")
	}
	aut.config.driver = _tx.drv
	return aut
}

// String implements the fmt.Stringer.
func (aut *ApiUserToken) String() string {
	var builder strings.Builder
	builder.WriteString("ApiUserToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aut.ID))
	builder.WriteString("created_at=")
	builder.WriteString(aut.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(aut.TokenType)
	builder.WriteString(", ")
	builder.WriteString("token_id=")
	builder.WriteString(aut.TokenID)
	builder.WriteString(", ")
	builder.WriteString("refresh_token_id=")
	builder.WriteString(aut.RefreshTokenID)
	builder.WriteByte(')')
	return builder.String()
}

// ApiUserTokens is a parsable slice of ApiUserToken.
type ApiUserTokens []*ApiUserToken

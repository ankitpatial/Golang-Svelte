// Code generated by ent, DO NOT EDIT.

package ent

import (
	"roofix/ent/apiaccess"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/auditlog"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/homeowner"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/installationjobprogress"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/notifysetting"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/partnerservice"
	"roofix/ent/partnerservicecity"
	"roofix/ent/partnerservicestate"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/payment"
	"roofix/ent/postalcode"
	"roofix/ent/pricing"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/schema"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/token"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"roofix/ent/useractivity"
	"roofix/ent/userauth"
	"roofix/ent/usersession"
	"roofix/ent/usersessionsocket"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	apiaccessMixin := schema.ApiAccess{}.Mixin()
	apiaccessMixinFields0 := apiaccessMixin[0].Fields()
	_ = apiaccessMixinFields0
	apiaccessFields := schema.ApiAccess{}.Fields()
	_ = apiaccessFields
	// apiaccessDescCreatedAt is the schema descriptor for created_at field.
	apiaccessDescCreatedAt := apiaccessMixinFields0[1].Descriptor()
	// apiaccess.DefaultCreatedAt holds the default value on creation for the created_at field.
	apiaccess.DefaultCreatedAt = apiaccessDescCreatedAt.Default.(func() time.Time)
	// apiaccessDescUpdatedAt is the schema descriptor for updated_at field.
	apiaccessDescUpdatedAt := apiaccessMixinFields0[2].Descriptor()
	// apiaccess.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	apiaccess.DefaultUpdatedAt = apiaccessDescUpdatedAt.Default.(func() time.Time)
	// apiaccess.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	apiaccess.UpdateDefaultUpdatedAt = apiaccessDescUpdatedAt.UpdateDefault.(func() time.Time)
	// apiaccessDescUsername is the schema descriptor for username field.
	apiaccessDescUsername := apiaccessFields[1].Descriptor()
	// apiaccess.DefaultUsername holds the default value on creation for the username field.
	apiaccess.DefaultUsername = apiaccessDescUsername.Default.(string)
	// apiaccessDescPassword is the schema descriptor for password field.
	apiaccessDescPassword := apiaccessFields[2].Descriptor()
	// apiaccess.DefaultPassword holds the default value on creation for the password field.
	apiaccess.DefaultPassword = apiaccessDescPassword.Default.(string)
	// apiaccessDescKey is the schema descriptor for key field.
	apiaccessDescKey := apiaccessFields[3].Descriptor()
	// apiaccess.DefaultKey holds the default value on creation for the key field.
	apiaccess.DefaultKey = apiaccessDescKey.Default.(string)
	// apiaccessDescSecret is the schema descriptor for secret field.
	apiaccessDescSecret := apiaccessFields[4].Descriptor()
	// apiaccess.DefaultSecret holds the default value on creation for the secret field.
	apiaccess.DefaultSecret = apiaccessDescSecret.Default.(string)
	// apiaccessDescAccessToken is the schema descriptor for access_token field.
	apiaccessDescAccessToken := apiaccessFields[5].Descriptor()
	// apiaccess.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	apiaccess.AccessTokenValidator = apiaccessDescAccessToken.Validators[0].(func(string) error)
	// apiaccessDescRefreshToken is the schema descriptor for refresh_token field.
	apiaccessDescRefreshToken := apiaccessFields[6].Descriptor()
	// apiaccess.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	apiaccess.RefreshTokenValidator = apiaccessDescRefreshToken.Validators[0].(func(string) error)
	// apiaccessDescID is the schema descriptor for id field.
	apiaccessDescID := apiaccessMixinFields0[0].Descriptor()
	// apiaccess.DefaultID holds the default value on creation for the id field.
	apiaccess.DefaultID = apiaccessDescID.Default.(func() string)
	// apiaccess.IDValidator is a validator for the "id" field. It is called by the builders before save.
	apiaccess.IDValidator = func() func(string) error {
		validators := apiaccessDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	apiuserMixin := schema.ApiUser{}.Mixin()
	apiuserMixinFields0 := apiuserMixin[0].Fields()
	_ = apiuserMixinFields0
	apiuserFields := schema.ApiUser{}.Fields()
	_ = apiuserFields
	// apiuserDescCreatedAt is the schema descriptor for created_at field.
	apiuserDescCreatedAt := apiuserMixinFields0[1].Descriptor()
	// apiuser.DefaultCreatedAt holds the default value on creation for the created_at field.
	apiuser.DefaultCreatedAt = apiuserDescCreatedAt.Default.(func() time.Time)
	// apiuserDescUsername is the schema descriptor for username field.
	apiuserDescUsername := apiuserFields[0].Descriptor()
	// apiuser.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	apiuser.UsernameValidator = apiuserDescUsername.Validators[0].(func(string) error)
	// apiuserDescPwdHash is the schema descriptor for pwd_hash field.
	apiuserDescPwdHash := apiuserFields[1].Descriptor()
	// apiuser.PwdHashValidator is a validator for the "pwd_hash" field. It is called by the builders before save.
	apiuser.PwdHashValidator = apiuserDescPwdHash.Validators[0].(func(string) error)
	// apiuserDescActive is the schema descriptor for active field.
	apiuserDescActive := apiuserFields[2].Descriptor()
	// apiuser.DefaultActive holds the default value on creation for the active field.
	apiuser.DefaultActive = apiuserDescActive.Default.(bool)
	// apiuserDescID is the schema descriptor for id field.
	apiuserDescID := apiuserMixinFields0[0].Descriptor()
	// apiuser.DefaultID holds the default value on creation for the id field.
	apiuser.DefaultID = apiuserDescID.Default.(func() string)
	// apiuser.IDValidator is a validator for the "id" field. It is called by the builders before save.
	apiuser.IDValidator = func() func(string) error {
		validators := apiuserDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	apiusertokenMixin := schema.ApiUserToken{}.Mixin()
	apiusertokenMixinFields0 := apiusertokenMixin[0].Fields()
	_ = apiusertokenMixinFields0
	apiusertokenFields := schema.ApiUserToken{}.Fields()
	_ = apiusertokenFields
	// apiusertokenDescCreatedAt is the schema descriptor for created_at field.
	apiusertokenDescCreatedAt := apiusertokenMixinFields0[1].Descriptor()
	// apiusertoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	apiusertoken.DefaultCreatedAt = apiusertokenDescCreatedAt.Default.(func() time.Time)
	// apiusertokenDescTokenType is the schema descriptor for token_type field.
	apiusertokenDescTokenType := apiusertokenFields[0].Descriptor()
	// apiusertoken.TokenTypeValidator is a validator for the "token_type" field. It is called by the builders before save.
	apiusertoken.TokenTypeValidator = apiusertokenDescTokenType.Validators[0].(func(string) error)
	// apiusertokenDescTokenID is the schema descriptor for token_id field.
	apiusertokenDescTokenID := apiusertokenFields[1].Descriptor()
	// apiusertoken.TokenIDValidator is a validator for the "token_id" field. It is called by the builders before save.
	apiusertoken.TokenIDValidator = apiusertokenDescTokenID.Validators[0].(func(string) error)
	// apiusertokenDescRefreshTokenID is the schema descriptor for refresh_token_id field.
	apiusertokenDescRefreshTokenID := apiusertokenFields[2].Descriptor()
	// apiusertoken.RefreshTokenIDValidator is a validator for the "refresh_token_id" field. It is called by the builders before save.
	apiusertoken.RefreshTokenIDValidator = apiusertokenDescRefreshTokenID.Validators[0].(func(string) error)
	// apiusertokenDescID is the schema descriptor for id field.
	apiusertokenDescID := apiusertokenMixinFields0[0].Descriptor()
	// apiusertoken.DefaultID holds the default value on creation for the id field.
	apiusertoken.DefaultID = apiusertokenDescID.Default.(func() string)
	// apiusertoken.IDValidator is a validator for the "id" field. It is called by the builders before save.
	apiusertoken.IDValidator = func() func(string) error {
		validators := apiusertokenDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	auditlogMixin := schema.AuditLog{}.Mixin()
	auditlogMixinFields0 := auditlogMixin[0].Fields()
	_ = auditlogMixinFields0
	auditlogFields := schema.AuditLog{}.Fields()
	_ = auditlogFields
	// auditlogDescCreatedAt is the schema descriptor for created_at field.
	auditlogDescCreatedAt := auditlogMixinFields0[1].Descriptor()
	// auditlog.DefaultCreatedAt holds the default value on creation for the created_at field.
	auditlog.DefaultCreatedAt = auditlogDescCreatedAt.Default.(func() time.Time)
	// auditlogDescAction is the schema descriptor for action field.
	auditlogDescAction := auditlogFields[0].Descriptor()
	// auditlog.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	auditlog.ActionValidator = auditlogDescAction.Validators[0].(func(string) error)
	// auditlogDescDescription is the schema descriptor for description field.
	auditlogDescDescription := auditlogFields[1].Descriptor()
	// auditlog.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	auditlog.DescriptionValidator = auditlogDescDescription.Validators[0].(func(string) error)
	// auditlogDescIP is the schema descriptor for ip field.
	auditlogDescIP := auditlogFields[2].Descriptor()
	// auditlog.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	auditlog.IPValidator = auditlogDescIP.Validators[0].(func(string) error)
	// auditlogDescID is the schema descriptor for id field.
	auditlogDescID := auditlogMixinFields0[0].Descriptor()
	// auditlog.DefaultID holds the default value on creation for the id field.
	auditlog.DefaultID = auditlogDescID.Default.(func() string)
	// auditlog.IDValidator is a validator for the "id" field. It is called by the builders before save.
	auditlog.IDValidator = func() func(string) error {
		validators := auditlogDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	channelMixin := schema.Channel{}.Mixin()
	channelMixinFields0 := channelMixin[0].Fields()
	_ = channelMixinFields0
	channelFields := schema.Channel{}.Fields()
	_ = channelFields
	// channelDescCreatedAt is the schema descriptor for created_at field.
	channelDescCreatedAt := channelMixinFields0[1].Descriptor()
	// channel.DefaultCreatedAt holds the default value on creation for the created_at field.
	channel.DefaultCreatedAt = channelDescCreatedAt.Default.(func() time.Time)
	// channelDescUpdatedAt is the schema descriptor for updated_at field.
	channelDescUpdatedAt := channelMixinFields0[2].Descriptor()
	// channel.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	channel.DefaultUpdatedAt = channelDescUpdatedAt.Default.(func() time.Time)
	// channel.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	channel.UpdateDefaultUpdatedAt = channelDescUpdatedAt.UpdateDefault.(func() time.Time)
	// channelDescRefID is the schema descriptor for ref_id field.
	channelDescRefID := channelFields[2].Descriptor()
	// channel.RefIDValidator is a validator for the "ref_id" field. It is called by the builders before save.
	channel.RefIDValidator = channelDescRefID.Validators[0].(func(string) error)
	// channelDescID is the schema descriptor for id field.
	channelDescID := channelMixinFields0[0].Descriptor()
	// channel.DefaultID holds the default value on creation for the id field.
	channel.DefaultID = channelDescID.Default.(func() string)
	// channel.IDValidator is a validator for the "id" field. It is called by the builders before save.
	channel.IDValidator = func() func(string) error {
		validators := channelDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	channelmessageMixin := schema.ChannelMessage{}.Mixin()
	channelmessageMixinFields0 := channelmessageMixin[0].Fields()
	_ = channelmessageMixinFields0
	channelmessageFields := schema.ChannelMessage{}.Fields()
	_ = channelmessageFields
	// channelmessageDescCreatedAt is the schema descriptor for created_at field.
	channelmessageDescCreatedAt := channelmessageMixinFields0[1].Descriptor()
	// channelmessage.DefaultCreatedAt holds the default value on creation for the created_at field.
	channelmessage.DefaultCreatedAt = channelmessageDescCreatedAt.Default.(func() time.Time)
	// channelmessageDescUpdatedAt is the schema descriptor for updated_at field.
	channelmessageDescUpdatedAt := channelmessageMixinFields0[2].Descriptor()
	// channelmessage.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	channelmessage.DefaultUpdatedAt = channelmessageDescUpdatedAt.Default.(func() time.Time)
	// channelmessage.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	channelmessage.UpdateDefaultUpdatedAt = channelmessageDescUpdatedAt.UpdateDefault.(func() time.Time)
	// channelmessageDescTitle is the schema descriptor for title field.
	channelmessageDescTitle := channelmessageFields[0].Descriptor()
	// channelmessage.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	channelmessage.TitleValidator = channelmessageDescTitle.Validators[0].(func(string) error)
	// channelmessageDescMessage is the schema descriptor for message field.
	channelmessageDescMessage := channelmessageFields[1].Descriptor()
	// channelmessage.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	channelmessage.MessageValidator = channelmessageDescMessage.Validators[0].(func(string) error)
	// channelmessageDescFromName is the schema descriptor for from_name field.
	channelmessageDescFromName := channelmessageFields[2].Descriptor()
	// channelmessage.FromNameValidator is a validator for the "from_name" field. It is called by the builders before save.
	channelmessage.FromNameValidator = channelmessageDescFromName.Validators[0].(func(string) error)
	// channelmessageDescToName is the schema descriptor for to_name field.
	channelmessageDescToName := channelmessageFields[3].Descriptor()
	// channelmessage.ToNameValidator is a validator for the "to_name" field. It is called by the builders before save.
	channelmessage.ToNameValidator = channelmessageDescToName.Validators[0].(func(string) error)
	// channelmessageDescPrivate is the schema descriptor for private field.
	channelmessageDescPrivate := channelmessageFields[4].Descriptor()
	// channelmessage.DefaultPrivate holds the default value on creation for the private field.
	channelmessage.DefaultPrivate = channelmessageDescPrivate.Default.(bool)
	// channelmessageDescID is the schema descriptor for id field.
	channelmessageDescID := channelmessageMixinFields0[0].Descriptor()
	// channelmessage.DefaultID holds the default value on creation for the id field.
	channelmessage.DefaultID = channelmessageDescID.Default.(func() string)
	// channelmessage.IDValidator is a validator for the "id" field. It is called by the builders before save.
	channelmessage.IDValidator = func() func(string) error {
		validators := channelmessageDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	channelmessagereadFields := schema.ChannelMessageRead{}.Fields()
	_ = channelmessagereadFields
	// channelmessagereadDescCreatedAt is the schema descriptor for created_at field.
	channelmessagereadDescCreatedAt := channelmessagereadFields[1].Descriptor()
	// channelmessageread.DefaultCreatedAt holds the default value on creation for the created_at field.
	channelmessageread.DefaultCreatedAt = channelmessagereadDescCreatedAt.Default.(func() time.Time)
	// channelmessagereadDescRead is the schema descriptor for read field.
	channelmessagereadDescRead := channelmessagereadFields[2].Descriptor()
	// channelmessageread.DefaultRead holds the default value on creation for the read field.
	channelmessageread.DefaultRead = channelmessagereadDescRead.Default.(bool)
	// channelmessagereadDescID is the schema descriptor for id field.
	channelmessagereadDescID := channelmessagereadFields[0].Descriptor()
	// channelmessageread.DefaultID holds the default value on creation for the id field.
	channelmessageread.DefaultID = channelmessagereadDescID.Default.(func() string)
	// channelmessageread.IDValidator is a validator for the "id" field. It is called by the builders before save.
	channelmessageread.IDValidator = func() func(string) error {
		validators := channelmessagereadDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	channelsubMixin := schema.ChannelSub{}.Mixin()
	channelsubMixinFields0 := channelsubMixin[0].Fields()
	_ = channelsubMixinFields0
	channelsubFields := schema.ChannelSub{}.Fields()
	_ = channelsubFields
	// channelsubDescCreatedAt is the schema descriptor for created_at field.
	channelsubDescCreatedAt := channelsubMixinFields0[1].Descriptor()
	// channelsub.DefaultCreatedAt holds the default value on creation for the created_at field.
	channelsub.DefaultCreatedAt = channelsubDescCreatedAt.Default.(func() time.Time)
	// channelsubDescUpdatedAt is the schema descriptor for updated_at field.
	channelsubDescUpdatedAt := channelsubMixinFields0[2].Descriptor()
	// channelsub.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	channelsub.DefaultUpdatedAt = channelsubDescUpdatedAt.Default.(func() time.Time)
	// channelsub.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	channelsub.UpdateDefaultUpdatedAt = channelsubDescUpdatedAt.UpdateDefault.(func() time.Time)
	// channelsubDescID is the schema descriptor for id field.
	channelsubDescID := channelsubMixinFields0[0].Descriptor()
	// channelsub.DefaultID holds the default value on creation for the id field.
	channelsub.DefaultID = channelsubDescID.Default.(func() string)
	// channelsub.IDValidator is a validator for the "id" field. It is called by the builders before save.
	channelsub.IDValidator = func() func(string) error {
		validators := channelsubDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	contactusMixin := schema.ContactUs{}.Mixin()
	contactusMixinFields0 := contactusMixin[0].Fields()
	_ = contactusMixinFields0
	contactusFields := schema.ContactUs{}.Fields()
	_ = contactusFields
	// contactusDescCreatedAt is the schema descriptor for created_at field.
	contactusDescCreatedAt := contactusMixinFields0[1].Descriptor()
	// contactus.DefaultCreatedAt holds the default value on creation for the created_at field.
	contactus.DefaultCreatedAt = contactusDescCreatedAt.Default.(func() time.Time)
	// contactusDescUpdatedAt is the schema descriptor for updated_at field.
	contactusDescUpdatedAt := contactusMixinFields0[2].Descriptor()
	// contactus.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	contactus.DefaultUpdatedAt = contactusDescUpdatedAt.Default.(func() time.Time)
	// contactus.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	contactus.UpdateDefaultUpdatedAt = contactusDescUpdatedAt.UpdateDefault.(func() time.Time)
	// contactusDescReason is the schema descriptor for reason field.
	contactusDescReason := contactusFields[0].Descriptor()
	// contactus.ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	contactus.ReasonValidator = contactusDescReason.Validators[0].(func(string) error)
	// contactusDescID is the schema descriptor for id field.
	contactusDescID := contactusMixinFields0[0].Descriptor()
	// contactus.DefaultID holds the default value on creation for the id field.
	contactus.DefaultID = contactusDescID.Default.(func() string)
	// contactus.IDValidator is a validator for the "id" field. It is called by the builders before save.
	contactus.IDValidator = func() func(string) error {
		validators := contactusDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	documentMixin := schema.Document{}.Mixin()
	documentMixinFields0 := documentMixin[0].Fields()
	_ = documentMixinFields0
	documentFields := schema.Document{}.Fields()
	_ = documentFields
	// documentDescCreatedAt is the schema descriptor for created_at field.
	documentDescCreatedAt := documentMixinFields0[1].Descriptor()
	// document.DefaultCreatedAt holds the default value on creation for the created_at field.
	document.DefaultCreatedAt = documentDescCreatedAt.Default.(func() time.Time)
	// documentDescUpdatedAt is the schema descriptor for updated_at field.
	documentDescUpdatedAt := documentMixinFields0[2].Descriptor()
	// document.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	document.DefaultUpdatedAt = documentDescUpdatedAt.Default.(func() time.Time)
	// document.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	document.UpdateDefaultUpdatedAt = documentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// documentDescBucket is the schema descriptor for bucket field.
	documentDescBucket := documentFields[0].Descriptor()
	// document.BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	document.BucketValidator = documentDescBucket.Validators[0].(func(string) error)
	// documentDescDir is the schema descriptor for dir field.
	documentDescDir := documentFields[3].Descriptor()
	// document.DirValidator is a validator for the "dir" field. It is called by the builders before save.
	document.DirValidator = documentDescDir.Validators[0].(func(string) error)
	// documentDescName is the schema descriptor for name field.
	documentDescName := documentFields[5].Descriptor()
	// document.NameValidator is a validator for the "name" field. It is called by the builders before save.
	document.NameValidator = documentDescName.Validators[0].(func(string) error)
	// documentDescFilename is the schema descriptor for filename field.
	documentDescFilename := documentFields[6].Descriptor()
	// document.FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	document.FilenameValidator = documentDescFilename.Validators[0].(func(string) error)
	// documentDescContentType is the schema descriptor for content_type field.
	documentDescContentType := documentFields[7].Descriptor()
	// document.ContentTypeValidator is a validator for the "content_type" field. It is called by the builders before save.
	document.ContentTypeValidator = documentDescContentType.Validators[0].(func(string) error)
	// documentDescReady is the schema descriptor for ready field.
	documentDescReady := documentFields[9].Descriptor()
	// document.DefaultReady holds the default value on creation for the ready field.
	document.DefaultReady = documentDescReady.Default.(bool)
	// documentDescCreatorID is the schema descriptor for creator_id field.
	documentDescCreatorID := documentFields[10].Descriptor()
	// document.CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	document.CreatorIDValidator = documentDescCreatorID.Validators[0].(func(string) error)
	// documentDescUpdaterID is the schema descriptor for updater_id field.
	documentDescUpdaterID := documentFields[11].Descriptor()
	// document.UpdaterIDValidator is a validator for the "updater_id" field. It is called by the builders before save.
	document.UpdaterIDValidator = documentDescUpdaterID.Validators[0].(func(string) error)
	// documentDescID is the schema descriptor for id field.
	documentDescID := documentMixinFields0[0].Descriptor()
	// document.DefaultID holds the default value on creation for the id field.
	document.DefaultID = documentDescID.Default.(func() string)
	// document.IDValidator is a validator for the "id" field. It is called by the builders before save.
	document.IDValidator = func() func(string) error {
		validators := documentDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	estimateMixin := schema.Estimate{}.Mixin()
	estimateMixinFields0 := estimateMixin[0].Fields()
	_ = estimateMixinFields0
	estimateFields := schema.Estimate{}.Fields()
	_ = estimateFields
	// estimateDescCreatedAt is the schema descriptor for created_at field.
	estimateDescCreatedAt := estimateMixinFields0[1].Descriptor()
	// estimate.DefaultCreatedAt holds the default value on creation for the created_at field.
	estimate.DefaultCreatedAt = estimateDescCreatedAt.Default.(func() time.Time)
	// estimateDescUpdatedAt is the schema descriptor for updated_at field.
	estimateDescUpdatedAt := estimateMixinFields0[2].Descriptor()
	// estimate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	estimate.DefaultUpdatedAt = estimateDescUpdatedAt.Default.(func() time.Time)
	// estimate.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	estimate.UpdateDefaultUpdatedAt = estimateDescUpdatedAt.UpdateDefault.(func() time.Time)
	// estimateDescRegionID is the schema descriptor for region_id field.
	estimateDescRegionID := estimateFields[0].Descriptor()
	// estimate.DefaultRegionID holds the default value on creation for the region_id field.
	estimate.DefaultRegionID = estimateDescRegionID.Default.(uint8)
	// estimateDescCurrentMaterial is the schema descriptor for current_material field.
	estimateDescCurrentMaterial := estimateFields[2].Descriptor()
	// estimate.CurrentMaterialValidator is a validator for the "current_material" field. It is called by the builders before save.
	estimate.CurrentMaterialValidator = estimateDescCurrentMaterial.Validators[0].(func(string) error)
	// estimateDescNewRoofingMaterial is the schema descriptor for new_roofing_material field.
	estimateDescNewRoofingMaterial := estimateFields[3].Descriptor()
	// estimate.NewRoofingMaterialValidator is a validator for the "new_roofing_material" field. It is called by the builders before save.
	estimate.NewRoofingMaterialValidator = estimateDescNewRoofingMaterial.Validators[0].(func(string) error)
	// estimateDescLowSlope is the schema descriptor for lowSlope field.
	estimateDescLowSlope := estimateFields[4].Descriptor()
	// estimate.DefaultLowSlope holds the default value on creation for the lowSlope field.
	estimate.DefaultLowSlope = estimateDescLowSlope.Default.(bool)
	// estimateDescCurrentMaterialLowSlope is the schema descriptor for current_material_low_slope field.
	estimateDescCurrentMaterialLowSlope := estimateFields[5].Descriptor()
	// estimate.CurrentMaterialLowSlopeValidator is a validator for the "current_material_low_slope" field. It is called by the builders before save.
	estimate.CurrentMaterialLowSlopeValidator = estimateDescCurrentMaterialLowSlope.Validators[0].(func(string) error)
	// estimateDescNewRoofingMaterialLowSlope is the schema descriptor for new_roofing_material_low_slope field.
	estimateDescNewRoofingMaterialLowSlope := estimateFields[6].Descriptor()
	// estimate.NewRoofingMaterialLowSlopeValidator is a validator for the "new_roofing_material_low_slope" field. It is called by the builders before save.
	estimate.NewRoofingMaterialLowSlopeValidator = estimateDescNewRoofingMaterialLowSlope.Validators[0].(func(string) error)
	// estimateDescRedeck is the schema descriptor for redeck field.
	estimateDescRedeck := estimateFields[7].Descriptor()
	// estimate.DefaultRedeck holds the default value on creation for the redeck field.
	estimate.DefaultRedeck = estimateDescRedeck.Default.(bool)
	// estimateDescLayer2Material is the schema descriptor for layer2_material field.
	estimateDescLayer2Material := estimateFields[9].Descriptor()
	// estimate.Layer2MaterialValidator is a validator for the "layer2_material" field. It is called by the builders before save.
	estimate.Layer2MaterialValidator = estimateDescLayer2Material.Validators[0].(func(string) error)
	// estimateDescLayer3Material is the schema descriptor for layer3_material field.
	estimateDescLayer3Material := estimateFields[10].Descriptor()
	// estimate.Layer3MaterialValidator is a validator for the "layer3_material" field. It is called by the builders before save.
	estimate.Layer3MaterialValidator = estimateDescLayer3Material.Validators[0].(func(string) error)
	// estimateDescPartialPercentage is the schema descriptor for partial_percentage field.
	estimateDescPartialPercentage := estimateFields[11].Descriptor()
	// estimate.DefaultPartialPercentage holds the default value on creation for the partial_percentage field.
	estimate.DefaultPartialPercentage = estimateDescPartialPercentage.Default.(float64)
	// estimateDescMaterialMappingNote is the schema descriptor for material_mapping_note field.
	estimateDescMaterialMappingNote := estimateFields[12].Descriptor()
	// estimate.MaterialMappingNoteValidator is a validator for the "material_mapping_note" field. It is called by the builders before save.
	estimate.MaterialMappingNoteValidator = estimateDescMaterialMappingNote.Validators[0].(func(string) error)
	// estimateDescExtraCharges is the schema descriptor for extra_charges field.
	estimateDescExtraCharges := estimateFields[15].Descriptor()
	// estimate.DefaultExtraCharges holds the default value on creation for the extra_charges field.
	estimate.DefaultExtraCharges = estimateDescExtraCharges.Default.(float64)
	// estimateDescEstimatorOrderID is the schema descriptor for estimator_order_id field.
	estimateDescEstimatorOrderID := estimateFields[19].Descriptor()
	// estimate.DefaultEstimatorOrderID holds the default value on creation for the estimator_order_id field.
	estimate.DefaultEstimatorOrderID = estimateDescEstimatorOrderID.Default.(uint)
	// estimateDescEstimatorReportID is the schema descriptor for estimator_report_id field.
	estimateDescEstimatorReportID := estimateFields[20].Descriptor()
	// estimate.DefaultEstimatorReportID holds the default value on creation for the estimator_report_id field.
	estimate.DefaultEstimatorReportID = estimateDescEstimatorReportID.Default.(uint)
	// estimateDescTotalSquares is the schema descriptor for total_squares field.
	estimateDescTotalSquares := estimateFields[21].Descriptor()
	// estimate.DefaultTotalSquares holds the default value on creation for the total_squares field.
	estimate.DefaultTotalSquares = estimateDescTotalSquares.Default.(float64)
	// estimateDescPrimaryPitch is the schema descriptor for primary_pitch field.
	estimateDescPrimaryPitch := estimateFields[22].Descriptor()
	// estimate.DefaultPrimaryPitch holds the default value on creation for the primary_pitch field.
	estimate.DefaultPrimaryPitch = estimateDescPrimaryPitch.Default.(float64)
	// estimateDescPrice is the schema descriptor for price field.
	estimateDescPrice := estimateFields[23].Descriptor()
	// estimate.DefaultPrice holds the default value on creation for the price field.
	estimate.DefaultPrice = estimateDescPrice.Default.(float64)
	// estimateDescOverride is the schema descriptor for override field.
	estimateDescOverride := estimateFields[27].Descriptor()
	// estimate.DefaultOverride holds the default value on creation for the override field.
	estimate.DefaultOverride = estimateDescOverride.Default.(bool)
	// estimateDescOverrideTotalSquares is the schema descriptor for override_total_squares field.
	estimateDescOverrideTotalSquares := estimateFields[28].Descriptor()
	// estimate.DefaultOverrideTotalSquares holds the default value on creation for the override_total_squares field.
	estimate.DefaultOverrideTotalSquares = estimateDescOverrideTotalSquares.Default.(float64)
	// estimateDescOverridePrimaryPitch is the schema descriptor for override_primary_pitch field.
	estimateDescOverridePrimaryPitch := estimateFields[29].Descriptor()
	// estimate.DefaultOverridePrimaryPitch holds the default value on creation for the override_primary_pitch field.
	estimate.DefaultOverridePrimaryPitch = estimateDescOverridePrimaryPitch.Default.(float64)
	// estimateDescOverridePrice is the schema descriptor for override_price field.
	estimateDescOverridePrice := estimateFields[30].Descriptor()
	// estimate.DefaultOverridePrice holds the default value on creation for the override_price field.
	estimate.DefaultOverridePrice = estimateDescOverridePrice.Default.(float64)
	// estimateDescCompanyRefID is the schema descriptor for company_ref_id field.
	estimateDescCompanyRefID := estimateFields[32].Descriptor()
	// estimate.CompanyRefIDValidator is a validator for the "company_ref_id" field. It is called by the builders before save.
	estimate.CompanyRefIDValidator = estimateDescCompanyRefID.Validators[0].(func(string) error)
	// estimateDescCompanyRefName is the schema descriptor for company_ref_name field.
	estimateDescCompanyRefName := estimateFields[33].Descriptor()
	// estimate.DefaultCompanyRefName holds the default value on creation for the company_ref_name field.
	estimate.DefaultCompanyRefName = estimateDescCompanyRefName.Default.(string)
	// estimate.CompanyRefNameValidator is a validator for the "company_ref_name" field. It is called by the builders before save.
	estimate.CompanyRefNameValidator = estimateDescCompanyRefName.Validators[0].(func(string) error)
	// estimateDescFailureReason is the schema descriptor for failure_reason field.
	estimateDescFailureReason := estimateFields[34].Descriptor()
	// estimate.FailureReasonValidator is a validator for the "failure_reason" field. It is called by the builders before save.
	estimate.FailureReasonValidator = estimateDescFailureReason.Validators[0].(func(string) error)
	// estimateDescID is the schema descriptor for id field.
	estimateDescID := estimateMixinFields0[0].Descriptor()
	// estimate.DefaultID holds the default value on creation for the id field.
	estimate.DefaultID = estimateDescID.Default.(func() string)
	// estimate.IDValidator is a validator for the "id" field. It is called by the builders before save.
	estimate.IDValidator = func() func(string) error {
		validators := estimateDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	estimateactivityMixin := schema.EstimateActivity{}.Mixin()
	estimateactivityMixinFields0 := estimateactivityMixin[0].Fields()
	_ = estimateactivityMixinFields0
	estimateactivityFields := schema.EstimateActivity{}.Fields()
	_ = estimateactivityFields
	// estimateactivityDescCreatedAt is the schema descriptor for created_at field.
	estimateactivityDescCreatedAt := estimateactivityMixinFields0[1].Descriptor()
	// estimateactivity.DefaultCreatedAt holds the default value on creation for the created_at field.
	estimateactivity.DefaultCreatedAt = estimateactivityDescCreatedAt.Default.(func() time.Time)
	// estimateactivityDescID is the schema descriptor for id field.
	estimateactivityDescID := estimateactivityMixinFields0[0].Descriptor()
	// estimateactivity.DefaultID holds the default value on creation for the id field.
	estimateactivity.DefaultID = estimateactivityDescID.Default.(func() string)
	// estimateactivity.IDValidator is a validator for the "id" field. It is called by the builders before save.
	estimateactivity.IDValidator = func() func(string) error {
		validators := estimateactivityDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	homeownerMixin := schema.HomeOwner{}.Mixin()
	homeownerMixinFields0 := homeownerMixin[0].Fields()
	_ = homeownerMixinFields0
	homeownerFields := schema.HomeOwner{}.Fields()
	_ = homeownerFields
	// homeownerDescCreatedAt is the schema descriptor for created_at field.
	homeownerDescCreatedAt := homeownerMixinFields0[1].Descriptor()
	// homeowner.DefaultCreatedAt holds the default value on creation for the created_at field.
	homeowner.DefaultCreatedAt = homeownerDescCreatedAt.Default.(func() time.Time)
	// homeownerDescUpdatedAt is the schema descriptor for updated_at field.
	homeownerDescUpdatedAt := homeownerMixinFields0[2].Descriptor()
	// homeowner.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	homeowner.DefaultUpdatedAt = homeownerDescUpdatedAt.Default.(func() time.Time)
	// homeowner.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	homeowner.UpdateDefaultUpdatedAt = homeownerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// homeownerDescFirstName is the schema descriptor for first_name field.
	homeownerDescFirstName := homeownerFields[0].Descriptor()
	// homeowner.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	homeowner.FirstNameValidator = homeownerDescFirstName.Validators[0].(func(string) error)
	// homeownerDescLastName is the schema descriptor for last_name field.
	homeownerDescLastName := homeownerFields[1].Descriptor()
	// homeowner.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	homeowner.LastNameValidator = homeownerDescLastName.Validators[0].(func(string) error)
	// homeownerDescPhone is the schema descriptor for phone field.
	homeownerDescPhone := homeownerFields[3].Descriptor()
	// homeowner.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	homeowner.PhoneValidator = homeownerDescPhone.Validators[0].(func(string) error)
	// homeownerDescCity is the schema descriptor for city field.
	homeownerDescCity := homeownerFields[6].Descriptor()
	// homeowner.CityValidator is a validator for the "city" field. It is called by the builders before save.
	homeowner.CityValidator = homeownerDescCity.Validators[0].(func(string) error)
	// homeownerDescState is the schema descriptor for state field.
	homeownerDescState := homeownerFields[7].Descriptor()
	// homeowner.StateValidator is a validator for the "state" field. It is called by the builders before save.
	homeowner.StateValidator = homeownerDescState.Validators[0].(func(string) error)
	// homeownerDescStateAbbr is the schema descriptor for state_abbr field.
	homeownerDescStateAbbr := homeownerFields[8].Descriptor()
	// homeowner.StateAbbrValidator is a validator for the "state_abbr" field. It is called by the builders before save.
	homeowner.StateAbbrValidator = homeownerDescStateAbbr.Validators[0].(func(string) error)
	// homeownerDescZip is the schema descriptor for zip field.
	homeownerDescZip := homeownerFields[9].Descriptor()
	// homeowner.ZipValidator is a validator for the "zip" field. It is called by the builders before save.
	homeowner.ZipValidator = homeownerDescZip.Validators[0].(func(string) error)
	// homeownerDescHash is the schema descriptor for hash field.
	homeownerDescHash := homeownerFields[13].Descriptor()
	// homeowner.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	homeowner.HashValidator = homeownerDescHash.Validators[0].(func(string) error)
	// homeownerDescID is the schema descriptor for id field.
	homeownerDescID := homeownerMixinFields0[0].Descriptor()
	// homeowner.DefaultID holds the default value on creation for the id field.
	homeowner.DefaultID = homeownerDescID.Default.(func() string)
	// homeowner.IDValidator is a validator for the "id" field. It is called by the builders before save.
	homeowner.IDValidator = func() func(string) error {
		validators := homeownerDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	installationjobMixin := schema.InstallationJob{}.Mixin()
	installationjobMixinFields0 := installationjobMixin[0].Fields()
	_ = installationjobMixinFields0
	installationjobFields := schema.InstallationJob{}.Fields()
	_ = installationjobFields
	// installationjobDescCreatedAt is the schema descriptor for created_at field.
	installationjobDescCreatedAt := installationjobMixinFields0[1].Descriptor()
	// installationjob.DefaultCreatedAt holds the default value on creation for the created_at field.
	installationjob.DefaultCreatedAt = installationjobDescCreatedAt.Default.(func() time.Time)
	// installationjobDescUpdatedAt is the schema descriptor for updated_at field.
	installationjobDescUpdatedAt := installationjobMixinFields0[2].Descriptor()
	// installationjob.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	installationjob.DefaultUpdatedAt = installationjobDescUpdatedAt.Default.(func() time.Time)
	// installationjob.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	installationjob.UpdateDefaultUpdatedAt = installationjobDescUpdatedAt.UpdateDefault.(func() time.Time)
	// installationjobDescOwnerName is the schema descriptor for owner_name field.
	installationjobDescOwnerName := installationjobFields[1].Descriptor()
	// installationjob.OwnerNameValidator is a validator for the "owner_name" field. It is called by the builders before save.
	installationjob.OwnerNameValidator = installationjobDescOwnerName.Validators[0].(func(string) error)
	// installationjobDescOwnerPhone is the schema descriptor for owner_phone field.
	installationjobDescOwnerPhone := installationjobFields[2].Descriptor()
	// installationjob.OwnerPhoneValidator is a validator for the "owner_phone" field. It is called by the builders before save.
	installationjob.OwnerPhoneValidator = installationjobDescOwnerPhone.Validators[0].(func(string) error)
	// installationjobDescOwnerAddress is the schema descriptor for owner_address field.
	installationjobDescOwnerAddress := installationjobFields[4].Descriptor()
	// installationjob.OwnerAddressValidator is a validator for the "owner_address" field. It is called by the builders before save.
	installationjob.OwnerAddressValidator = installationjobDescOwnerAddress.Validators[0].(func(string) error)
	// installationjobDescSpecialNote is the schema descriptor for special_note field.
	installationjobDescSpecialNote := installationjobFields[7].Descriptor()
	// installationjob.SpecialNoteValidator is a validator for the "special_note" field. It is called by the builders before save.
	installationjob.SpecialNoteValidator = installationjobDescSpecialNote.Validators[0].(func(string) error)
	// installationjobDescPkg is the schema descriptor for pkg field.
	installationjobDescPkg := installationjobFields[8].Descriptor()
	// installationjob.PkgValidator is a validator for the "pkg" field. It is called by the builders before save.
	installationjob.PkgValidator = installationjobDescPkg.Validators[0].(func(string) error)
	// installationjobDescPkgDescription is the schema descriptor for pkg_description field.
	installationjobDescPkgDescription := installationjobFields[9].Descriptor()
	// installationjob.PkgDescriptionValidator is a validator for the "pkg_description" field. It is called by the builders before save.
	installationjob.PkgDescriptionValidator = installationjobDescPkgDescription.Validators[0].(func(string) error)
	// installationjobDescPkgFeatures is the schema descriptor for pkg_features field.
	installationjobDescPkgFeatures := installationjobFields[10].Descriptor()
	// installationjob.DefaultPkgFeatures holds the default value on creation for the pkg_features field.
	installationjob.DefaultPkgFeatures = installationjobDescPkgFeatures.Default.([]string)
	// installationjobDescApprovalAt is the schema descriptor for approval_at field.
	installationjobDescApprovalAt := installationjobFields[13].Descriptor()
	// installationjob.DefaultApprovalAt holds the default value on creation for the approval_at field.
	installationjob.DefaultApprovalAt = installationjobDescApprovalAt.Default.(time.Time)
	// installationjobDescStatusAt is the schema descriptor for status_at field.
	installationjobDescStatusAt := installationjobFields[16].Descriptor()
	// installationjob.DefaultStatusAt holds the default value on creation for the status_at field.
	installationjob.DefaultStatusAt = installationjobDescStatusAt.Default.(time.Time)
	// installationjobDescID is the schema descriptor for id field.
	installationjobDescID := installationjobMixinFields0[0].Descriptor()
	// installationjob.DefaultID holds the default value on creation for the id field.
	installationjob.DefaultID = installationjobDescID.Default.(func() string)
	// installationjob.IDValidator is a validator for the "id" field. It is called by the builders before save.
	installationjob.IDValidator = func() func(string) error {
		validators := installationjobDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	installationjobitemFields := schema.InstallationJobItem{}.Fields()
	_ = installationjobitemFields
	// installationjobitemDescName is the schema descriptor for name field.
	installationjobitemDescName := installationjobitemFields[1].Descriptor()
	// installationjobitem.NameValidator is a validator for the "name" field. It is called by the builders before save.
	installationjobitem.NameValidator = installationjobitemDescName.Validators[0].(func(string) error)
	// installationjobitemDescDescription is the schema descriptor for description field.
	installationjobitemDescDescription := installationjobitemFields[2].Descriptor()
	// installationjobitem.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	installationjobitem.DescriptionValidator = installationjobitemDescDescription.Validators[0].(func(string) error)
	// installationjobitemDescFeatures is the schema descriptor for features field.
	installationjobitemDescFeatures := installationjobitemFields[3].Descriptor()
	// installationjobitem.DefaultFeatures holds the default value on creation for the features field.
	installationjobitem.DefaultFeatures = installationjobitemDescFeatures.Default.([]string)
	// installationjobitemDescSpecialNote is the schema descriptor for special_note field.
	installationjobitemDescSpecialNote := installationjobitemFields[6].Descriptor()
	// installationjobitem.SpecialNoteValidator is a validator for the "special_note" field. It is called by the builders before save.
	installationjobitem.SpecialNoteValidator = installationjobitemDescSpecialNote.Validators[0].(func(string) error)
	// installationjobitemDescID is the schema descriptor for id field.
	installationjobitemDescID := installationjobitemFields[0].Descriptor()
	// installationjobitem.DefaultID holds the default value on creation for the id field.
	installationjobitem.DefaultID = installationjobitemDescID.Default.(func() string)
	// installationjobitem.IDValidator is a validator for the "id" field. It is called by the builders before save.
	installationjobitem.IDValidator = func() func(string) error {
		validators := installationjobitemDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	installationjobprogressMixin := schema.InstallationJobProgress{}.Mixin()
	installationjobprogressMixinFields0 := installationjobprogressMixin[0].Fields()
	_ = installationjobprogressMixinFields0
	installationjobprogressFields := schema.InstallationJobProgress{}.Fields()
	_ = installationjobprogressFields
	// installationjobprogressDescCreatedAt is the schema descriptor for created_at field.
	installationjobprogressDescCreatedAt := installationjobprogressMixinFields0[1].Descriptor()
	// installationjobprogress.DefaultCreatedAt holds the default value on creation for the created_at field.
	installationjobprogress.DefaultCreatedAt = installationjobprogressDescCreatedAt.Default.(func() time.Time)
	// installationjobprogressDescUpdatedAt is the schema descriptor for updated_at field.
	installationjobprogressDescUpdatedAt := installationjobprogressMixinFields0[2].Descriptor()
	// installationjobprogress.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	installationjobprogress.DefaultUpdatedAt = installationjobprogressDescUpdatedAt.Default.(func() time.Time)
	// installationjobprogress.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	installationjobprogress.UpdateDefaultUpdatedAt = installationjobprogressDescUpdatedAt.UpdateDefault.(func() time.Time)
	// installationjobprogressDescComplete is the schema descriptor for complete field.
	installationjobprogressDescComplete := installationjobprogressFields[1].Descriptor()
	// installationjobprogress.DefaultComplete holds the default value on creation for the complete field.
	installationjobprogress.DefaultComplete = installationjobprogressDescComplete.Default.(bool)
	// installationjobprogressDescID is the schema descriptor for id field.
	installationjobprogressDescID := installationjobprogressMixinFields0[0].Descriptor()
	// installationjobprogress.DefaultID holds the default value on creation for the id field.
	installationjobprogress.DefaultID = installationjobprogressDescID.Default.(func() string)
	// installationjobprogress.IDValidator is a validator for the "id" field. It is called by the builders before save.
	installationjobprogress.IDValidator = func() func(string) error {
		validators := installationjobprogressDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	jobMixin := schema.Job{}.Mixin()
	jobMixinFields0 := jobMixin[0].Fields()
	_ = jobMixinFields0
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescCreatedAt is the schema descriptor for created_at field.
	jobDescCreatedAt := jobMixinFields0[1].Descriptor()
	// job.DefaultCreatedAt holds the default value on creation for the created_at field.
	job.DefaultCreatedAt = jobDescCreatedAt.Default.(func() time.Time)
	// jobDescUpdatedAt is the schema descriptor for updated_at field.
	jobDescUpdatedAt := jobMixinFields0[2].Descriptor()
	// job.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	job.DefaultUpdatedAt = jobDescUpdatedAt.Default.(func() time.Time)
	// job.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	job.UpdateDefaultUpdatedAt = jobDescUpdatedAt.UpdateDefault.(func() time.Time)
	// jobDescRegionID is the schema descriptor for region_id field.
	jobDescRegionID := jobFields[3].Descriptor()
	// job.DefaultRegionID holds the default value on creation for the region_id field.
	job.DefaultRegionID = jobDescRegionID.Default.(uint8)
	// jobDescCompanyRefID is the schema descriptor for company_ref_id field.
	jobDescCompanyRefID := jobFields[4].Descriptor()
	// job.CompanyRefIDValidator is a validator for the "company_ref_id" field. It is called by the builders before save.
	job.CompanyRefIDValidator = jobDescCompanyRefID.Validators[0].(func(string) error)
	// jobDescCompanyName is the schema descriptor for company_name field.
	jobDescCompanyName := jobFields[5].Descriptor()
	// job.CompanyNameValidator is a validator for the "company_name" field. It is called by the builders before save.
	job.CompanyNameValidator = jobDescCompanyName.Validators[0].(func(string) error)
	// jobDescPrice is the schema descriptor for price field.
	jobDescPrice := jobFields[6].Descriptor()
	// job.DefaultPrice holds the default value on creation for the price field.
	job.DefaultPrice = jobDescPrice.Default.(float64)
	// jobDescWorkOrderPrice is the schema descriptor for work_order_price field.
	jobDescWorkOrderPrice := jobFields[7].Descriptor()
	// job.DefaultWorkOrderPrice holds the default value on creation for the work_order_price field.
	job.DefaultWorkOrderPrice = jobDescWorkOrderPrice.Default.(float64)
	// jobDescContractPrice is the schema descriptor for contract_price field.
	jobDescContractPrice := jobFields[8].Descriptor()
	// job.DefaultContractPrice holds the default value on creation for the contract_price field.
	job.DefaultContractPrice = jobDescContractPrice.Default.(float64)
	// jobDescChangeOrderPrice is the schema descriptor for change_order_price field.
	jobDescChangeOrderPrice := jobFields[9].Descriptor()
	// job.DefaultChangeOrderPrice holds the default value on creation for the change_order_price field.
	job.DefaultChangeOrderPrice = jobDescChangeOrderPrice.Default.(float64)
	// jobDescID is the schema descriptor for id field.
	jobDescID := jobMixinFields0[0].Descriptor()
	// job.DefaultID holds the default value on creation for the id field.
	job.DefaultID = jobDescID.Default.(func() string)
	// job.IDValidator is a validator for the "id" field. It is called by the builders before save.
	job.IDValidator = func() func(string) error {
		validators := jobDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	jobactivityMixin := schema.JobActivity{}.Mixin()
	jobactivityMixinFields0 := jobactivityMixin[0].Fields()
	_ = jobactivityMixinFields0
	jobactivityFields := schema.JobActivity{}.Fields()
	_ = jobactivityFields
	// jobactivityDescCreatedAt is the schema descriptor for created_at field.
	jobactivityDescCreatedAt := jobactivityMixinFields0[1].Descriptor()
	// jobactivity.DefaultCreatedAt holds the default value on creation for the created_at field.
	jobactivity.DefaultCreatedAt = jobactivityDescCreatedAt.Default.(func() time.Time)
	// jobactivityDescID is the schema descriptor for id field.
	jobactivityDescID := jobactivityMixinFields0[0].Descriptor()
	// jobactivity.DefaultID holds the default value on creation for the id field.
	jobactivity.DefaultID = jobactivityDescID.Default.(func() string)
	// jobactivity.IDValidator is a validator for the "id" field. It is called by the builders before save.
	jobactivity.IDValidator = func() func(string) error {
		validators := jobactivityDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	jobassignmenthistoryMixin := schema.JobAssignmentHistory{}.Mixin()
	jobassignmenthistoryMixinFields0 := jobassignmenthistoryMixin[0].Fields()
	_ = jobassignmenthistoryMixinFields0
	jobassignmenthistoryFields := schema.JobAssignmentHistory{}.Fields()
	_ = jobassignmenthistoryFields
	// jobassignmenthistoryDescCreatedAt is the schema descriptor for created_at field.
	jobassignmenthistoryDescCreatedAt := jobassignmenthistoryMixinFields0[1].Descriptor()
	// jobassignmenthistory.DefaultCreatedAt holds the default value on creation for the created_at field.
	jobassignmenthistory.DefaultCreatedAt = jobassignmenthistoryDescCreatedAt.Default.(func() time.Time)
	// jobassignmenthistoryDescNote is the schema descriptor for Note field.
	jobassignmenthistoryDescNote := jobassignmenthistoryFields[1].Descriptor()
	// jobassignmenthistory.NoteValidator is a validator for the "Note" field. It is called by the builders before save.
	jobassignmenthistory.NoteValidator = jobassignmenthistoryDescNote.Validators[0].(func(string) error)
	// jobassignmenthistoryDescID is the schema descriptor for id field.
	jobassignmenthistoryDescID := jobassignmenthistoryMixinFields0[0].Descriptor()
	// jobassignmenthistory.DefaultID holds the default value on creation for the id field.
	jobassignmenthistory.DefaultID = jobassignmenthistoryDescID.Default.(func() string)
	// jobassignmenthistory.IDValidator is a validator for the "id" field. It is called by the builders before save.
	jobassignmenthistory.IDValidator = func() func(string) error {
		validators := jobassignmenthistoryDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	jobdocurlMixin := schema.JobDocURL{}.Mixin()
	jobdocurlMixinFields0 := jobdocurlMixin[0].Fields()
	_ = jobdocurlMixinFields0
	jobdocurlFields := schema.JobDocURL{}.Fields()
	_ = jobdocurlFields
	// jobdocurlDescCreatedAt is the schema descriptor for created_at field.
	jobdocurlDescCreatedAt := jobdocurlMixinFields0[1].Descriptor()
	// jobdocurl.DefaultCreatedAt holds the default value on creation for the created_at field.
	jobdocurl.DefaultCreatedAt = jobdocurlDescCreatedAt.Default.(func() time.Time)
	// jobdocurlDescUpdatedAt is the schema descriptor for updated_at field.
	jobdocurlDescUpdatedAt := jobdocurlMixinFields0[2].Descriptor()
	// jobdocurl.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	jobdocurl.DefaultUpdatedAt = jobdocurlDescUpdatedAt.Default.(func() time.Time)
	// jobdocurl.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	jobdocurl.UpdateDefaultUpdatedAt = jobdocurlDescUpdatedAt.UpdateDefault.(func() time.Time)
	// jobdocurlDescID is the schema descriptor for id field.
	jobdocurlDescID := jobdocurlMixinFields0[0].Descriptor()
	// jobdocurl.DefaultID holds the default value on creation for the id field.
	jobdocurl.DefaultID = jobdocurlDescID.Default.(func() string)
	// jobdocurl.IDValidator is a validator for the "id" field. It is called by the builders before save.
	jobdocurl.IDValidator = func() func(string) error {
		validators := jobdocurlDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	jobnoteMixin := schema.JobNote{}.Mixin()
	jobnoteMixinFields0 := jobnoteMixin[0].Fields()
	_ = jobnoteMixinFields0
	jobnoteFields := schema.JobNote{}.Fields()
	_ = jobnoteFields
	// jobnoteDescCreatedAt is the schema descriptor for created_at field.
	jobnoteDescCreatedAt := jobnoteMixinFields0[1].Descriptor()
	// jobnote.DefaultCreatedAt holds the default value on creation for the created_at field.
	jobnote.DefaultCreatedAt = jobnoteDescCreatedAt.Default.(func() time.Time)
	// jobnoteDescUpdatedAt is the schema descriptor for updated_at field.
	jobnoteDescUpdatedAt := jobnoteMixinFields0[2].Descriptor()
	// jobnote.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	jobnote.DefaultUpdatedAt = jobnoteDescUpdatedAt.Default.(func() time.Time)
	// jobnote.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	jobnote.UpdateDefaultUpdatedAt = jobnoteDescUpdatedAt.UpdateDefault.(func() time.Time)
	// jobnoteDescNote is the schema descriptor for note field.
	jobnoteDescNote := jobnoteFields[0].Descriptor()
	// jobnote.NoteValidator is a validator for the "note" field. It is called by the builders before save.
	jobnote.NoteValidator = jobnoteDescNote.Validators[0].(func(string) error)
	// jobnoteDescID is the schema descriptor for id field.
	jobnoteDescID := jobnoteMixinFields0[0].Descriptor()
	// jobnote.DefaultID holds the default value on creation for the id field.
	jobnote.DefaultID = jobnoteDescID.Default.(func() string)
	// jobnote.IDValidator is a validator for the "id" field. It is called by the builders before save.
	jobnote.IDValidator = func() func(string) error {
		validators := jobnoteDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	jobprogresshistoryMixin := schema.JobProgressHistory{}.Mixin()
	jobprogresshistoryMixinFields0 := jobprogresshistoryMixin[0].Fields()
	_ = jobprogresshistoryMixinFields0
	jobprogresshistoryFields := schema.JobProgressHistory{}.Fields()
	_ = jobprogresshistoryFields
	// jobprogresshistoryDescCreatedAt is the schema descriptor for created_at field.
	jobprogresshistoryDescCreatedAt := jobprogresshistoryMixinFields0[1].Descriptor()
	// jobprogresshistory.DefaultCreatedAt holds the default value on creation for the created_at field.
	jobprogresshistory.DefaultCreatedAt = jobprogresshistoryDescCreatedAt.Default.(func() time.Time)
	// jobprogresshistoryDescComplete is the schema descriptor for complete field.
	jobprogresshistoryDescComplete := jobprogresshistoryFields[1].Descriptor()
	// jobprogresshistory.DefaultComplete holds the default value on creation for the complete field.
	jobprogresshistory.DefaultComplete = jobprogresshistoryDescComplete.Default.(bool)
	// jobprogresshistoryDescID is the schema descriptor for id field.
	jobprogresshistoryDescID := jobprogresshistoryMixinFields0[0].Descriptor()
	// jobprogresshistory.DefaultID holds the default value on creation for the id field.
	jobprogresshistory.DefaultID = jobprogresshistoryDescID.Default.(func() string)
	// jobprogresshistory.IDValidator is a validator for the "id" field. It is called by the builders before save.
	jobprogresshistory.IDValidator = func() func(string) error {
		validators := jobprogresshistoryDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	notifysettingMixin := schema.NotifySetting{}.Mixin()
	notifysettingMixinFields0 := notifysettingMixin[0].Fields()
	_ = notifysettingMixinFields0
	notifysettingFields := schema.NotifySetting{}.Fields()
	_ = notifysettingFields
	// notifysettingDescCreatedAt is the schema descriptor for created_at field.
	notifysettingDescCreatedAt := notifysettingMixinFields0[1].Descriptor()
	// notifysetting.DefaultCreatedAt holds the default value on creation for the created_at field.
	notifysetting.DefaultCreatedAt = notifysettingDescCreatedAt.Default.(func() time.Time)
	// notifysettingDescTopicID is the schema descriptor for topic_id field.
	notifysettingDescTopicID := notifysettingFields[0].Descriptor()
	// notifysetting.TopicIDValidator is a validator for the "topic_id" field. It is called by the builders before save.
	notifysetting.TopicIDValidator = notifysettingDescTopicID.Validators[0].(func(string) error)
	// notifysettingDescReceiveEmail is the schema descriptor for receive_email field.
	notifysettingDescReceiveEmail := notifysettingFields[1].Descriptor()
	// notifysetting.DefaultReceiveEmail holds the default value on creation for the receive_email field.
	notifysetting.DefaultReceiveEmail = notifysettingDescReceiveEmail.Default.(bool)
	// notifysettingDescReceiveSms is the schema descriptor for receive_sms field.
	notifysettingDescReceiveSms := notifysettingFields[2].Descriptor()
	// notifysetting.DefaultReceiveSms holds the default value on creation for the receive_sms field.
	notifysetting.DefaultReceiveSms = notifysettingDescReceiveSms.Default.(bool)
	// notifysettingDescID is the schema descriptor for id field.
	notifysettingDescID := notifysettingMixinFields0[0].Descriptor()
	// notifysetting.DefaultID holds the default value on creation for the id field.
	notifysetting.DefaultID = notifysettingDescID.Default.(func() string)
	// notifysetting.IDValidator is a validator for the "id" field. It is called by the builders before save.
	notifysetting.IDValidator = func() func(string) error {
		validators := notifysettingDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	optionlistMixin := schema.OptionList{}.Mixin()
	optionlistMixinFields0 := optionlistMixin[0].Fields()
	_ = optionlistMixinFields0
	optionlistFields := schema.OptionList{}.Fields()
	_ = optionlistFields
	// optionlistDescCreatedAt is the schema descriptor for created_at field.
	optionlistDescCreatedAt := optionlistMixinFields0[1].Descriptor()
	// optionlist.DefaultCreatedAt holds the default value on creation for the created_at field.
	optionlist.DefaultCreatedAt = optionlistDescCreatedAt.Default.(func() time.Time)
	// optionlistDescUpdatedAt is the schema descriptor for updated_at field.
	optionlistDescUpdatedAt := optionlistMixinFields0[2].Descriptor()
	// optionlist.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	optionlist.DefaultUpdatedAt = optionlistDescUpdatedAt.Default.(func() time.Time)
	// optionlist.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	optionlist.UpdateDefaultUpdatedAt = optionlistDescUpdatedAt.UpdateDefault.(func() time.Time)
	// optionlistDescName is the schema descriptor for name field.
	optionlistDescName := optionlistFields[1].Descriptor()
	// optionlist.NameValidator is a validator for the "name" field. It is called by the builders before save.
	optionlist.NameValidator = optionlistDescName.Validators[0].(func(string) error)
	// optionlistDescDisplayName is the schema descriptor for display_name field.
	optionlistDescDisplayName := optionlistFields[2].Descriptor()
	// optionlist.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	optionlist.DisplayNameValidator = optionlistDescDisplayName.Validators[0].(func(string) error)
	// optionlistDescActive is the schema descriptor for active field.
	optionlistDescActive := optionlistFields[3].Descriptor()
	// optionlist.DefaultActive holds the default value on creation for the active field.
	optionlist.DefaultActive = optionlistDescActive.Default.(bool)
	// optionlistDescID is the schema descriptor for id field.
	optionlistDescID := optionlistMixinFields0[0].Descriptor()
	// optionlist.DefaultID holds the default value on creation for the id field.
	optionlist.DefaultID = optionlistDescID.Default.(func() string)
	// optionlist.IDValidator is a validator for the "id" field. It is called by the builders before save.
	optionlist.IDValidator = func() func(string) error {
		validators := optionlistDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partnerMixin := schema.Partner{}.Mixin()
	partnerMixinFields0 := partnerMixin[0].Fields()
	_ = partnerMixinFields0
	partnerFields := schema.Partner{}.Fields()
	_ = partnerFields
	// partnerDescCreatedAt is the schema descriptor for created_at field.
	partnerDescCreatedAt := partnerMixinFields0[1].Descriptor()
	// partner.DefaultCreatedAt holds the default value on creation for the created_at field.
	partner.DefaultCreatedAt = partnerDescCreatedAt.Default.(func() time.Time)
	// partnerDescUpdatedAt is the schema descriptor for updated_at field.
	partnerDescUpdatedAt := partnerMixinFields0[2].Descriptor()
	// partner.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	partner.DefaultUpdatedAt = partnerDescUpdatedAt.Default.(func() time.Time)
	// partner.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	partner.UpdateDefaultUpdatedAt = partnerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partnerDescExternalID is the schema descriptor for external_id field.
	partnerDescExternalID := partnerFields[0].Descriptor()
	// partner.ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	partner.ExternalIDValidator = partnerDescExternalID.Validators[0].(func(string) error)
	// partnerDescCreatorID is the schema descriptor for creator_id field.
	partnerDescCreatorID := partnerFields[1].Descriptor()
	// partner.CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	partner.CreatorIDValidator = partnerDescCreatorID.Validators[0].(func(string) error)
	// partnerDescName is the schema descriptor for name field.
	partnerDescName := partnerFields[3].Descriptor()
	// partner.NameValidator is a validator for the "name" field. It is called by the builders before save.
	partner.NameValidator = partnerDescName.Validators[0].(func(string) error)
	// partnerDescPhone is the schema descriptor for phone field.
	partnerDescPhone := partnerFields[6].Descriptor()
	// partner.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	partner.PhoneValidator = partnerDescPhone.Validators[0].(func(string) error)
	// partnerDescIsNationWide is the schema descriptor for is_nation_wide field.
	partnerDescIsNationWide := partnerFields[9].Descriptor()
	// partner.DefaultIsNationWide holds the default value on creation for the is_nation_wide field.
	partner.DefaultIsNationWide = partnerDescIsNationWide.Default.(bool)
	// partnerDescCrewCount is the schema descriptor for crew_count field.
	partnerDescCrewCount := partnerFields[10].Descriptor()
	// partner.DefaultCrewCount holds the default value on creation for the crew_count field.
	partner.DefaultCrewCount = partnerDescCrewCount.Default.(uint16)
	// partnerDescJobCapacity is the schema descriptor for job_capacity field.
	partnerDescJobCapacity := partnerFields[12].Descriptor()
	// partner.DefaultJobCapacity holds the default value on creation for the job_capacity field.
	partner.DefaultJobCapacity = partnerDescJobCapacity.Default.(uint16)
	// partnerDescSetupStepsCompleted is the schema descriptor for setup_steps_completed field.
	partnerDescSetupStepsCompleted := partnerFields[16].Descriptor()
	// partner.DefaultSetupStepsCompleted holds the default value on creation for the setup_steps_completed field.
	partner.DefaultSetupStepsCompleted = partnerDescSetupStepsCompleted.Default.(uint8)
	// partnerDescID is the schema descriptor for id field.
	partnerDescID := partnerMixinFields0[0].Descriptor()
	// partner.DefaultID holds the default value on creation for the id field.
	partner.DefaultID = partnerDescID.Default.(func() string)
	// partner.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partner.IDValidator = func() func(string) error {
		validators := partnerDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partneractivityMixin := schema.PartnerActivity{}.Mixin()
	partneractivityMixinFields0 := partneractivityMixin[0].Fields()
	_ = partneractivityMixinFields0
	partneractivityFields := schema.PartnerActivity{}.Fields()
	_ = partneractivityFields
	// partneractivityDescCreatedAt is the schema descriptor for created_at field.
	partneractivityDescCreatedAt := partneractivityMixinFields0[1].Descriptor()
	// partneractivity.DefaultCreatedAt holds the default value on creation for the created_at field.
	partneractivity.DefaultCreatedAt = partneractivityDescCreatedAt.Default.(func() time.Time)
	// partneractivityDescID is the schema descriptor for id field.
	partneractivityDescID := partneractivityMixinFields0[0].Descriptor()
	// partneractivity.DefaultID holds the default value on creation for the id field.
	partneractivity.DefaultID = partneractivityDescID.Default.(func() string)
	// partneractivity.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partneractivity.IDValidator = func() func(string) error {
		validators := partneractivityDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partnercontactMixin := schema.PartnerContact{}.Mixin()
	partnercontactMixinFields0 := partnercontactMixin[0].Fields()
	_ = partnercontactMixinFields0
	partnercontactFields := schema.PartnerContact{}.Fields()
	_ = partnercontactFields
	// partnercontactDescCreatedAt is the schema descriptor for created_at field.
	partnercontactDescCreatedAt := partnercontactMixinFields0[1].Descriptor()
	// partnercontact.DefaultCreatedAt holds the default value on creation for the created_at field.
	partnercontact.DefaultCreatedAt = partnercontactDescCreatedAt.Default.(func() time.Time)
	// partnercontactDescUpdatedAt is the schema descriptor for updated_at field.
	partnercontactDescUpdatedAt := partnercontactMixinFields0[2].Descriptor()
	// partnercontact.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	partnercontact.DefaultUpdatedAt = partnercontactDescUpdatedAt.Default.(func() time.Time)
	// partnercontact.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	partnercontact.UpdateDefaultUpdatedAt = partnercontactDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partnercontactDescTitle is the schema descriptor for title field.
	partnercontactDescTitle := partnercontactFields[4].Descriptor()
	// partnercontact.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	partnercontact.TitleValidator = partnercontactDescTitle.Validators[0].(func(string) error)
	// partnercontactDescDescription is the schema descriptor for description field.
	partnercontactDescDescription := partnercontactFields[5].Descriptor()
	// partnercontact.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	partnercontact.DescriptionValidator = partnercontactDescDescription.Validators[0].(func(string) error)
	// partnercontactDescID is the schema descriptor for id field.
	partnercontactDescID := partnercontactMixinFields0[0].Descriptor()
	// partnercontact.DefaultID holds the default value on creation for the id field.
	partnercontact.DefaultID = partnercontactDescID.Default.(func() string)
	// partnercontact.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partnercontact.IDValidator = func() func(string) error {
		validators := partnercontactDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partnerserviceMixin := schema.PartnerService{}.Mixin()
	partnerserviceMixinFields0 := partnerserviceMixin[0].Fields()
	_ = partnerserviceMixinFields0
	partnerserviceFields := schema.PartnerService{}.Fields()
	_ = partnerserviceFields
	// partnerserviceDescCreatedAt is the schema descriptor for created_at field.
	partnerserviceDescCreatedAt := partnerserviceMixinFields0[1].Descriptor()
	// partnerservice.DefaultCreatedAt holds the default value on creation for the created_at field.
	partnerservice.DefaultCreatedAt = partnerserviceDescCreatedAt.Default.(func() time.Time)
	// partnerserviceDescUpdatedAt is the schema descriptor for updated_at field.
	partnerserviceDescUpdatedAt := partnerserviceMixinFields0[2].Descriptor()
	// partnerservice.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	partnerservice.DefaultUpdatedAt = partnerserviceDescUpdatedAt.Default.(func() time.Time)
	// partnerservice.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	partnerservice.UpdateDefaultUpdatedAt = partnerserviceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partnerserviceDescID is the schema descriptor for id field.
	partnerserviceDescID := partnerserviceMixinFields0[0].Descriptor()
	// partnerservice.DefaultID holds the default value on creation for the id field.
	partnerservice.DefaultID = partnerserviceDescID.Default.(func() string)
	// partnerservice.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partnerservice.IDValidator = func() func(string) error {
		validators := partnerserviceDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partnerservicecityMixin := schema.PartnerServiceCity{}.Mixin()
	partnerservicecityMixinFields0 := partnerservicecityMixin[0].Fields()
	_ = partnerservicecityMixinFields0
	partnerservicecityFields := schema.PartnerServiceCity{}.Fields()
	_ = partnerservicecityFields
	// partnerservicecityDescCreatedAt is the schema descriptor for created_at field.
	partnerservicecityDescCreatedAt := partnerservicecityMixinFields0[1].Descriptor()
	// partnerservicecity.DefaultCreatedAt holds the default value on creation for the created_at field.
	partnerservicecity.DefaultCreatedAt = partnerservicecityDescCreatedAt.Default.(func() time.Time)
	// partnerservicecityDescUpdatedAt is the schema descriptor for updated_at field.
	partnerservicecityDescUpdatedAt := partnerservicecityMixinFields0[2].Descriptor()
	// partnerservicecity.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	partnerservicecity.DefaultUpdatedAt = partnerservicecityDescUpdatedAt.Default.(func() time.Time)
	// partnerservicecity.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	partnerservicecity.UpdateDefaultUpdatedAt = partnerservicecityDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partnerservicecityDescPostalID is the schema descriptor for postal_id field.
	partnerservicecityDescPostalID := partnerservicecityFields[0].Descriptor()
	// partnerservicecity.PostalIDValidator is a validator for the "postal_id" field. It is called by the builders before save.
	partnerservicecity.PostalIDValidator = partnerservicecityDescPostalID.Validators[0].(func(string) error)
	// partnerservicecityDescActive is the schema descriptor for active field.
	partnerservicecityDescActive := partnerservicecityFields[1].Descriptor()
	// partnerservicecity.DefaultActive holds the default value on creation for the active field.
	partnerservicecity.DefaultActive = partnerservicecityDescActive.Default.(bool)
	// partnerservicecityDescName is the schema descriptor for name field.
	partnerservicecityDescName := partnerservicecityFields[2].Descriptor()
	// partnerservicecity.NameValidator is a validator for the "name" field. It is called by the builders before save.
	partnerservicecity.NameValidator = partnerservicecityDescName.Validators[0].(func(string) error)
	// partnerservicecityDescLicenseNo is the schema descriptor for license_no field.
	partnerservicecityDescLicenseNo := partnerservicecityFields[4].Descriptor()
	// partnerservicecity.LicenseNoValidator is a validator for the "license_no" field. It is called by the builders before save.
	partnerservicecity.LicenseNoValidator = partnerservicecityDescLicenseNo.Validators[0].(func(string) error)
	// partnerservicecityDescProofDocID is the schema descriptor for proof_doc_id field.
	partnerservicecityDescProofDocID := partnerservicecityFields[5].Descriptor()
	// partnerservicecity.ProofDocIDValidator is a validator for the "proof_doc_id" field. It is called by the builders before save.
	partnerservicecity.ProofDocIDValidator = partnerservicecityDescProofDocID.Validators[0].(func(string) error)
	// partnerservicecityDescID is the schema descriptor for id field.
	partnerservicecityDescID := partnerservicecityMixinFields0[0].Descriptor()
	// partnerservicecity.DefaultID holds the default value on creation for the id field.
	partnerservicecity.DefaultID = partnerservicecityDescID.Default.(func() string)
	// partnerservicecity.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partnerservicecity.IDValidator = func() func(string) error {
		validators := partnerservicecityDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partnerservicestateMixin := schema.PartnerServiceState{}.Mixin()
	partnerservicestateMixinFields0 := partnerservicestateMixin[0].Fields()
	_ = partnerservicestateMixinFields0
	partnerservicestateFields := schema.PartnerServiceState{}.Fields()
	_ = partnerservicestateFields
	// partnerservicestateDescCreatedAt is the schema descriptor for created_at field.
	partnerservicestateDescCreatedAt := partnerservicestateMixinFields0[1].Descriptor()
	// partnerservicestate.DefaultCreatedAt holds the default value on creation for the created_at field.
	partnerservicestate.DefaultCreatedAt = partnerservicestateDescCreatedAt.Default.(func() time.Time)
	// partnerservicestateDescUpdatedAt is the schema descriptor for updated_at field.
	partnerservicestateDescUpdatedAt := partnerservicestateMixinFields0[2].Descriptor()
	// partnerservicestate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	partnerservicestate.DefaultUpdatedAt = partnerservicestateDescUpdatedAt.Default.(func() time.Time)
	// partnerservicestate.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	partnerservicestate.UpdateDefaultUpdatedAt = partnerservicestateDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partnerservicestateDescCountry is the schema descriptor for country field.
	partnerservicestateDescCountry := partnerservicestateFields[0].Descriptor()
	// partnerservicestate.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	partnerservicestate.CountryValidator = partnerservicestateDescCountry.Validators[0].(func(string) error)
	// partnerservicestateDescState is the schema descriptor for state field.
	partnerservicestateDescState := partnerservicestateFields[1].Descriptor()
	// partnerservicestate.StateValidator is a validator for the "state" field. It is called by the builders before save.
	partnerservicestate.StateValidator = partnerservicestateDescState.Validators[0].(func(string) error)
	// partnerservicestateDescLicenseNo is the schema descriptor for license_no field.
	partnerservicestateDescLicenseNo := partnerservicestateFields[2].Descriptor()
	// partnerservicestate.LicenseNoValidator is a validator for the "license_no" field. It is called by the builders before save.
	partnerservicestate.LicenseNoValidator = partnerservicestateDescLicenseNo.Validators[0].(func(string) error)
	// partnerservicestateDescProofDocID is the schema descriptor for proof_doc_id field.
	partnerservicestateDescProofDocID := partnerservicestateFields[4].Descriptor()
	// partnerservicestate.ProofDocIDValidator is a validator for the "proof_doc_id" field. It is called by the builders before save.
	partnerservicestate.ProofDocIDValidator = partnerservicestateDescProofDocID.Validators[0].(func(string) error)
	// partnerservicestateDescID is the schema descriptor for id field.
	partnerservicestateDescID := partnerservicestateMixinFields0[0].Descriptor()
	// partnerservicestate.DefaultID holds the default value on creation for the id field.
	partnerservicestate.DefaultID = partnerservicestateDescID.Default.(func() string)
	// partnerservicestate.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partnerservicestate.IDValidator = func() func(string) error {
		validators := partnerservicestateDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partnertrainingvideoMixin := schema.PartnerTrainingVideo{}.Mixin()
	partnertrainingvideoMixinFields0 := partnertrainingvideoMixin[0].Fields()
	_ = partnertrainingvideoMixinFields0
	partnertrainingvideoFields := schema.PartnerTrainingVideo{}.Fields()
	_ = partnertrainingvideoFields
	// partnertrainingvideoDescCreatedAt is the schema descriptor for created_at field.
	partnertrainingvideoDescCreatedAt := partnertrainingvideoMixinFields0[1].Descriptor()
	// partnertrainingvideo.DefaultCreatedAt holds the default value on creation for the created_at field.
	partnertrainingvideo.DefaultCreatedAt = partnertrainingvideoDescCreatedAt.Default.(func() time.Time)
	// partnertrainingvideoDescUpdatedAt is the schema descriptor for updated_at field.
	partnertrainingvideoDescUpdatedAt := partnertrainingvideoMixinFields0[2].Descriptor()
	// partnertrainingvideo.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	partnertrainingvideo.DefaultUpdatedAt = partnertrainingvideoDescUpdatedAt.Default.(func() time.Time)
	// partnertrainingvideo.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	partnertrainingvideo.UpdateDefaultUpdatedAt = partnertrainingvideoDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partnertrainingvideoDescEnabled is the schema descriptor for enabled field.
	partnertrainingvideoDescEnabled := partnertrainingvideoFields[0].Descriptor()
	// partnertrainingvideo.DefaultEnabled holds the default value on creation for the enabled field.
	partnertrainingvideo.DefaultEnabled = partnertrainingvideoDescEnabled.Default.(bool)
	// partnertrainingvideoDescID is the schema descriptor for id field.
	partnertrainingvideoDescID := partnertrainingvideoMixinFields0[0].Descriptor()
	// partnertrainingvideo.DefaultID holds the default value on creation for the id field.
	partnertrainingvideo.DefaultID = partnertrainingvideoDescID.Default.(func() string)
	// partnertrainingvideo.IDValidator is a validator for the "id" field. It is called by the builders before save.
	partnertrainingvideo.IDValidator = func() func(string) error {
		validators := partnertrainingvideoDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	paymentMixin := schema.Payment{}.Mixin()
	paymentMixinFields0 := paymentMixin[0].Fields()
	_ = paymentMixinFields0
	paymentFields := schema.Payment{}.Fields()
	_ = paymentFields
	// paymentDescCreatedAt is the schema descriptor for created_at field.
	paymentDescCreatedAt := paymentMixinFields0[1].Descriptor()
	// payment.DefaultCreatedAt holds the default value on creation for the created_at field.
	payment.DefaultCreatedAt = paymentDescCreatedAt.Default.(func() time.Time)
	// paymentDescUpdatedAt is the schema descriptor for updated_at field.
	paymentDescUpdatedAt := paymentMixinFields0[2].Descriptor()
	// payment.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	payment.DefaultUpdatedAt = paymentDescUpdatedAt.Default.(func() time.Time)
	// payment.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	payment.UpdateDefaultUpdatedAt = paymentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// paymentDescAmount is the schema descriptor for amount field.
	paymentDescAmount := paymentFields[0].Descriptor()
	// payment.DefaultAmount holds the default value on creation for the amount field.
	payment.DefaultAmount = paymentDescAmount.Default.(float64)
	// paymentDescStatusID is the schema descriptor for status_id field.
	paymentDescStatusID := paymentFields[1].Descriptor()
	// payment.DefaultStatusID holds the default value on creation for the status_id field.
	payment.DefaultStatusID = paymentDescStatusID.Default.(uint8)
	// paymentDescID is the schema descriptor for id field.
	paymentDescID := paymentMixinFields0[0].Descriptor()
	// payment.DefaultID holds the default value on creation for the id field.
	payment.DefaultID = paymentDescID.Default.(func() string)
	// payment.IDValidator is a validator for the "id" field. It is called by the builders before save.
	payment.IDValidator = func() func(string) error {
		validators := paymentDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	postalcodeMixin := schema.PostalCode{}.Mixin()
	postalcodeMixinFields0 := postalcodeMixin[0].Fields()
	_ = postalcodeMixinFields0
	postalcodeFields := schema.PostalCode{}.Fields()
	_ = postalcodeFields
	// postalcodeDescCreatedAt is the schema descriptor for created_at field.
	postalcodeDescCreatedAt := postalcodeMixinFields0[1].Descriptor()
	// postalcode.DefaultCreatedAt holds the default value on creation for the created_at field.
	postalcode.DefaultCreatedAt = postalcodeDescCreatedAt.Default.(func() time.Time)
	// postalcodeDescUpdatedAt is the schema descriptor for updated_at field.
	postalcodeDescUpdatedAt := postalcodeMixinFields0[2].Descriptor()
	// postalcode.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	postalcode.DefaultUpdatedAt = postalcodeDescUpdatedAt.Default.(func() time.Time)
	// postalcode.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	postalcode.UpdateDefaultUpdatedAt = postalcodeDescUpdatedAt.UpdateDefault.(func() time.Time)
	// postalcodeDescCountry is the schema descriptor for country field.
	postalcodeDescCountry := postalcodeFields[0].Descriptor()
	// postalcode.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	postalcode.CountryValidator = postalcodeDescCountry.Validators[0].(func(string) error)
	// postalcodeDescCode is the schema descriptor for code field.
	postalcodeDescCode := postalcodeFields[1].Descriptor()
	// postalcode.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	postalcode.CodeValidator = postalcodeDescCode.Validators[0].(func(string) error)
	// postalcodeDescCity is the schema descriptor for city field.
	postalcodeDescCity := postalcodeFields[2].Descriptor()
	// postalcode.CityValidator is a validator for the "city" field. It is called by the builders before save.
	postalcode.CityValidator = postalcodeDescCity.Validators[0].(func(string) error)
	// postalcodeDescState is the schema descriptor for state field.
	postalcodeDescState := postalcodeFields[3].Descriptor()
	// postalcode.StateValidator is a validator for the "state" field. It is called by the builders before save.
	postalcode.StateValidator = postalcodeDescState.Validators[0].(func(string) error)
	// postalcodeDescStateAbr is the schema descriptor for state_abr field.
	postalcodeDescStateAbr := postalcodeFields[4].Descriptor()
	// postalcode.StateAbrValidator is a validator for the "state_abr" field. It is called by the builders before save.
	postalcode.StateAbrValidator = postalcodeDescStateAbr.Validators[0].(func(string) error)
	// postalcodeDescServiceArea is the schema descriptor for service_area field.
	postalcodeDescServiceArea := postalcodeFields[9].Descriptor()
	// postalcode.DefaultServiceArea holds the default value on creation for the service_area field.
	postalcode.DefaultServiceArea = postalcodeDescServiceArea.Default.(bool)
	// postalcodeDescID is the schema descriptor for id field.
	postalcodeDescID := postalcodeMixinFields0[0].Descriptor()
	// postalcode.DefaultID holds the default value on creation for the id field.
	postalcode.DefaultID = postalcodeDescID.Default.(func() string)
	// postalcode.IDValidator is a validator for the "id" field. It is called by the builders before save.
	postalcode.IDValidator = func() func(string) error {
		validators := postalcodeDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	pricingMixin := schema.Pricing{}.Mixin()
	pricingMixinFields0 := pricingMixin[0].Fields()
	_ = pricingMixinFields0
	pricingFields := schema.Pricing{}.Fields()
	_ = pricingFields
	// pricingDescCreatedAt is the schema descriptor for created_at field.
	pricingDescCreatedAt := pricingMixinFields0[1].Descriptor()
	// pricing.DefaultCreatedAt holds the default value on creation for the created_at field.
	pricing.DefaultCreatedAt = pricingDescCreatedAt.Default.(func() time.Time)
	// pricingDescUpdatedAt is the schema descriptor for updated_at field.
	pricingDescUpdatedAt := pricingMixinFields0[2].Descriptor()
	// pricing.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	pricing.DefaultUpdatedAt = pricingDescUpdatedAt.Default.(func() time.Time)
	// pricing.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	pricing.UpdateDefaultUpdatedAt = pricingDescUpdatedAt.UpdateDefault.(func() time.Time)
	// pricingDescPostalCountry is the schema descriptor for postal_country field.
	pricingDescPostalCountry := pricingFields[0].Descriptor()
	// pricing.PostalCountryValidator is a validator for the "postal_country" field. It is called by the builders before save.
	pricing.PostalCountryValidator = pricingDescPostalCountry.Validators[0].(func(string) error)
	// pricingDescPostalCode is the schema descriptor for postal_code field.
	pricingDescPostalCode := pricingFields[1].Descriptor()
	// pricing.PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	pricing.PostalCodeValidator = pricingDescPostalCode.Validators[0].(func(string) error)
	// pricingDescPricePer is the schema descriptor for price_per field.
	pricingDescPricePer := pricingFields[5].Descriptor()
	// pricing.PricePerValidator is a validator for the "price_per" field. It is called by the builders before save.
	pricing.PricePerValidator = pricingDescPricePer.Validators[0].(func(string) error)
	// pricingDescID is the schema descriptor for id field.
	pricingDescID := pricingMixinFields0[0].Descriptor()
	// pricing.DefaultID holds the default value on creation for the id field.
	pricing.DefaultID = pricingDescID.Default.(func() string)
	// pricing.IDValidator is a validator for the "id" field. It is called by the builders before save.
	pricing.IDValidator = func() func(string) error {
		validators := pricingDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	productMixin := schema.Product{}.Mixin()
	productMixinFields0 := productMixin[0].Fields()
	_ = productMixinFields0
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescCreatedAt is the schema descriptor for created_at field.
	productDescCreatedAt := productMixinFields0[1].Descriptor()
	// product.DefaultCreatedAt holds the default value on creation for the created_at field.
	product.DefaultCreatedAt = productDescCreatedAt.Default.(func() time.Time)
	// productDescUpdatedAt is the schema descriptor for updated_at field.
	productDescUpdatedAt := productMixinFields0[2].Descriptor()
	// product.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	product.DefaultUpdatedAt = productDescUpdatedAt.Default.(func() time.Time)
	// product.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	product.UpdateDefaultUpdatedAt = productDescUpdatedAt.UpdateDefault.(func() time.Time)
	// productDescName is the schema descriptor for name field.
	productDescName := productFields[1].Descriptor()
	// product.NameValidator is a validator for the "name" field. It is called by the builders before save.
	product.NameValidator = productDescName.Validators[0].(func(string) error)
	// productDescDescription is the schema descriptor for description field.
	productDescDescription := productFields[2].Descriptor()
	// product.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	product.DescriptionValidator = productDescDescription.Validators[0].(func(string) error)
	// productDescFeatures is the schema descriptor for features field.
	productDescFeatures := productFields[3].Descriptor()
	// product.DefaultFeatures holds the default value on creation for the features field.
	product.DefaultFeatures = productDescFeatures.Default.([]string)
	// productDescSpecialNote is the schema descriptor for special_note field.
	productDescSpecialNote := productFields[4].Descriptor()
	// product.SpecialNoteValidator is a validator for the "special_note" field. It is called by the builders before save.
	product.SpecialNoteValidator = productDescSpecialNote.Validators[0].(func(string) error)
	// productDescUnitsInStock is the schema descriptor for units_in_stock field.
	productDescUnitsInStock := productFields[6].Descriptor()
	// product.DefaultUnitsInStock holds the default value on creation for the units_in_stock field.
	product.DefaultUnitsInStock = productDescUnitsInStock.Default.(int)
	// productDescUnitsOnOrder is the schema descriptor for units_on_order field.
	productDescUnitsOnOrder := productFields[7].Descriptor()
	// product.DefaultUnitsOnOrder holds the default value on creation for the units_on_order field.
	product.DefaultUnitsOnOrder = productDescUnitsOnOrder.Default.(int)
	// productDescDiscontinued is the schema descriptor for discontinued field.
	productDescDiscontinued := productFields[8].Descriptor()
	// product.DefaultDiscontinued holds the default value on creation for the discontinued field.
	product.DefaultDiscontinued = productDescDiscontinued.Default.(bool)
	// productDescID is the schema descriptor for id field.
	productDescID := productMixinFields0[0].Descriptor()
	// product.DefaultID holds the default value on creation for the id field.
	product.DefaultID = productDescID.Default.(func() string)
	// product.IDValidator is a validator for the "id" field. It is called by the builders before save.
	product.IDValidator = func() func(string) error {
		validators := productDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	productpackageMixin := schema.ProductPackage{}.Mixin()
	productpackageMixinFields0 := productpackageMixin[0].Fields()
	_ = productpackageMixinFields0
	productpackageFields := schema.ProductPackage{}.Fields()
	_ = productpackageFields
	// productpackageDescCreatedAt is the schema descriptor for created_at field.
	productpackageDescCreatedAt := productpackageMixinFields0[1].Descriptor()
	// productpackage.DefaultCreatedAt holds the default value on creation for the created_at field.
	productpackage.DefaultCreatedAt = productpackageDescCreatedAt.Default.(func() time.Time)
	// productpackageDescUpdatedAt is the schema descriptor for updated_at field.
	productpackageDescUpdatedAt := productpackageMixinFields0[2].Descriptor()
	// productpackage.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	productpackage.DefaultUpdatedAt = productpackageDescUpdatedAt.Default.(func() time.Time)
	// productpackage.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	productpackage.UpdateDefaultUpdatedAt = productpackageDescUpdatedAt.UpdateDefault.(func() time.Time)
	// productpackageDescName is the schema descriptor for name field.
	productpackageDescName := productpackageFields[2].Descriptor()
	// productpackage.NameValidator is a validator for the "name" field. It is called by the builders before save.
	productpackage.NameValidator = productpackageDescName.Validators[0].(func(string) error)
	// productpackageDescDescription is the schema descriptor for description field.
	productpackageDescDescription := productpackageFields[3].Descriptor()
	// productpackage.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	productpackage.DescriptionValidator = productpackageDescDescription.Validators[0].(func(string) error)
	// productpackageDescFeatures is the schema descriptor for features field.
	productpackageDescFeatures := productpackageFields[4].Descriptor()
	// productpackage.DefaultFeatures holds the default value on creation for the features field.
	productpackage.DefaultFeatures = productpackageDescFeatures.Default.([]string)
	// productpackageDescDiscontinued is the schema descriptor for discontinued field.
	productpackageDescDiscontinued := productpackageFields[6].Descriptor()
	// productpackage.DefaultDiscontinued holds the default value on creation for the discontinued field.
	productpackage.DefaultDiscontinued = productpackageDescDiscontinued.Default.(bool)
	// productpackageDescID is the schema descriptor for id field.
	productpackageDescID := productpackageMixinFields0[0].Descriptor()
	// productpackage.DefaultID holds the default value on creation for the id field.
	productpackage.DefaultID = productpackageDescID.Default.(func() string)
	// productpackage.IDValidator is a validator for the "id" field. It is called by the builders before save.
	productpackage.IDValidator = func() func(string) error {
		validators := productpackageDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	surveyMixin := schema.Survey{}.Mixin()
	surveyMixinFields0 := surveyMixin[0].Fields()
	_ = surveyMixinFields0
	surveyFields := schema.Survey{}.Fields()
	_ = surveyFields
	// surveyDescCreatedAt is the schema descriptor for created_at field.
	surveyDescCreatedAt := surveyMixinFields0[1].Descriptor()
	// survey.DefaultCreatedAt holds the default value on creation for the created_at field.
	survey.DefaultCreatedAt = surveyDescCreatedAt.Default.(func() time.Time)
	// surveyDescUpdatedAt is the schema descriptor for updated_at field.
	surveyDescUpdatedAt := surveyMixinFields0[2].Descriptor()
	// survey.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	survey.DefaultUpdatedAt = surveyDescUpdatedAt.Default.(func() time.Time)
	// survey.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	survey.UpdateDefaultUpdatedAt = surveyDescUpdatedAt.UpdateDefault.(func() time.Time)
	// surveyDescDate is the schema descriptor for date field.
	surveyDescDate := surveyFields[0].Descriptor()
	// survey.DateValidator is a validator for the "date" field. It is called by the builders before save.
	survey.DateValidator = surveyDescDate.Validators[0].(func(string) error)
	// surveyDescSlot is the schema descriptor for slot field.
	surveyDescSlot := surveyFields[1].Descriptor()
	// survey.SlotValidator is a validator for the "slot" field. It is called by the builders before save.
	survey.SlotValidator = surveyDescSlot.Validators[0].(func(string) error)
	// surveyDescSlotID is the schema descriptor for slot_id field.
	surveyDescSlotID := surveyFields[2].Descriptor()
	// survey.SlotIDValidator is a validator for the "slot_id" field. It is called by the builders before save.
	survey.SlotIDValidator = surveyDescSlotID.Validators[0].(func(string) error)
	// surveyDescName is the schema descriptor for name field.
	surveyDescName := surveyFields[6].Descriptor()
	// survey.NameValidator is a validator for the "name" field. It is called by the builders before save.
	survey.NameValidator = surveyDescName.Validators[0].(func(string) error)
	// surveyDescAddress is the schema descriptor for address field.
	surveyDescAddress := surveyFields[7].Descriptor()
	// survey.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	survey.AddressValidator = surveyDescAddress.Validators[0].(func(string) error)
	// surveyDescPhone is the schema descriptor for phone field.
	surveyDescPhone := surveyFields[8].Descriptor()
	// survey.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	survey.PhoneValidator = surveyDescPhone.Validators[0].(func(string) error)
	// surveyDescNotes is the schema descriptor for notes field.
	surveyDescNotes := surveyFields[9].Descriptor()
	// survey.NotesValidator is a validator for the "notes" field. It is called by the builders before save.
	survey.NotesValidator = surveyDescNotes.Validators[0].(func(string) error)
	// surveyDescID is the schema descriptor for id field.
	surveyDescID := surveyMixinFields0[0].Descriptor()
	// survey.DefaultID holds the default value on creation for the id field.
	survey.DefaultID = surveyDescID.Default.(func() string)
	// survey.IDValidator is a validator for the "id" field. It is called by the builders before save.
	survey.IDValidator = func() func(string) error {
		validators := surveyDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	surveyprogressMixin := schema.SurveyProgress{}.Mixin()
	surveyprogressMixinFields0 := surveyprogressMixin[0].Fields()
	_ = surveyprogressMixinFields0
	surveyprogressFields := schema.SurveyProgress{}.Fields()
	_ = surveyprogressFields
	// surveyprogressDescCreatedAt is the schema descriptor for created_at field.
	surveyprogressDescCreatedAt := surveyprogressMixinFields0[1].Descriptor()
	// surveyprogress.DefaultCreatedAt holds the default value on creation for the created_at field.
	surveyprogress.DefaultCreatedAt = surveyprogressDescCreatedAt.Default.(func() time.Time)
	// surveyprogressDescComplete is the schema descriptor for complete field.
	surveyprogressDescComplete := surveyprogressFields[1].Descriptor()
	// surveyprogress.DefaultComplete holds the default value on creation for the complete field.
	surveyprogress.DefaultComplete = surveyprogressDescComplete.Default.(bool)
	// surveyprogressDescID is the schema descriptor for id field.
	surveyprogressDescID := surveyprogressMixinFields0[0].Descriptor()
	// surveyprogress.DefaultID holds the default value on creation for the id field.
	surveyprogress.DefaultID = surveyprogressDescID.Default.(func() string)
	// surveyprogress.IDValidator is a validator for the "id" field. It is called by the builders before save.
	surveyprogress.IDValidator = func() func(string) error {
		validators := surveyprogressDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreatedAt is the schema descriptor for created_at field.
	tokenDescCreatedAt := tokenFields[1].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the created_at field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescAction is the schema descriptor for action field.
	tokenDescAction := tokenFields[3].Descriptor()
	// token.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	token.ActionValidator = func() func(string) error {
		validators := tokenDescAction.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(action string) error {
			for _, fn := range fns {
				if err := fn(action); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenFields[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(func() string)
	// token.IDValidator is a validator for the "id" field. It is called by the builders before save.
	token.IDValidator = func() func(string) error {
		validators := tokenDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	trainingcourseMixin := schema.TrainingCourse{}.Mixin()
	trainingcourseMixinFields0 := trainingcourseMixin[0].Fields()
	_ = trainingcourseMixinFields0
	trainingcourseFields := schema.TrainingCourse{}.Fields()
	_ = trainingcourseFields
	// trainingcourseDescCreatedAt is the schema descriptor for created_at field.
	trainingcourseDescCreatedAt := trainingcourseMixinFields0[1].Descriptor()
	// trainingcourse.DefaultCreatedAt holds the default value on creation for the created_at field.
	trainingcourse.DefaultCreatedAt = trainingcourseDescCreatedAt.Default.(func() time.Time)
	// trainingcourseDescUpdatedAt is the schema descriptor for updated_at field.
	trainingcourseDescUpdatedAt := trainingcourseMixinFields0[2].Descriptor()
	// trainingcourse.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	trainingcourse.DefaultUpdatedAt = trainingcourseDescUpdatedAt.Default.(func() time.Time)
	// trainingcourse.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	trainingcourse.UpdateDefaultUpdatedAt = trainingcourseDescUpdatedAt.UpdateDefault.(func() time.Time)
	// trainingcourseDescName is the schema descriptor for name field.
	trainingcourseDescName := trainingcourseFields[0].Descriptor()
	// trainingcourse.NameValidator is a validator for the "name" field. It is called by the builders before save.
	trainingcourse.NameValidator = trainingcourseDescName.Validators[0].(func(string) error)
	// trainingcourseDescID is the schema descriptor for id field.
	trainingcourseDescID := trainingcourseMixinFields0[0].Descriptor()
	// trainingcourse.DefaultID holds the default value on creation for the id field.
	trainingcourse.DefaultID = trainingcourseDescID.Default.(func() string)
	// trainingcourse.IDValidator is a validator for the "id" field. It is called by the builders before save.
	trainingcourse.IDValidator = func() func(string) error {
		validators := trainingcourseDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	trainingvideoMixin := schema.TrainingVideo{}.Mixin()
	trainingvideoMixinFields0 := trainingvideoMixin[0].Fields()
	_ = trainingvideoMixinFields0
	trainingvideoFields := schema.TrainingVideo{}.Fields()
	_ = trainingvideoFields
	// trainingvideoDescCreatedAt is the schema descriptor for created_at field.
	trainingvideoDescCreatedAt := trainingvideoMixinFields0[1].Descriptor()
	// trainingvideo.DefaultCreatedAt holds the default value on creation for the created_at field.
	trainingvideo.DefaultCreatedAt = trainingvideoDescCreatedAt.Default.(func() time.Time)
	// trainingvideoDescUpdatedAt is the schema descriptor for updated_at field.
	trainingvideoDescUpdatedAt := trainingvideoMixinFields0[2].Descriptor()
	// trainingvideo.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	trainingvideo.DefaultUpdatedAt = trainingvideoDescUpdatedAt.Default.(func() time.Time)
	// trainingvideo.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	trainingvideo.UpdateDefaultUpdatedAt = trainingvideoDescUpdatedAt.UpdateDefault.(func() time.Time)
	// trainingvideoDescTitle is the schema descriptor for title field.
	trainingvideoDescTitle := trainingvideoFields[1].Descriptor()
	// trainingvideo.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	trainingvideo.TitleValidator = trainingvideoDescTitle.Validators[0].(func(string) error)
	// trainingvideoDescDescription is the schema descriptor for description field.
	trainingvideoDescDescription := trainingvideoFields[2].Descriptor()
	// trainingvideo.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	trainingvideo.DescriptionValidator = trainingvideoDescDescription.Validators[0].(func(string) error)
	// trainingvideoDescID is the schema descriptor for id field.
	trainingvideoDescID := trainingvideoMixinFields0[0].Descriptor()
	// trainingvideo.DefaultID holds the default value on creation for the id field.
	trainingvideo.DefaultID = trainingvideoDescID.Default.(func() string)
	// trainingvideo.IDValidator is a validator for the "id" field. It is called by the builders before save.
	trainingvideo.IDValidator = func() func(string) error {
		validators := trainingvideoDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescExternalID is the schema descriptor for external_id field.
	userDescExternalID := userFields[0].Descriptor()
	// user.ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	user.ExternalIDValidator = userDescExternalID.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[2].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescPwd is the schema descriptor for pwd field.
	userDescPwd := userFields[3].Descriptor()
	// user.PwdValidator is a validator for the "pwd" field. It is called by the builders before save.
	user.PwdValidator = func() func(string) error {
		validators := userDescPwd.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(pwd string) error {
			for _, fn := range fns {
				if err := fn(pwd); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[4].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[5].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescEmailVerified is the schema descriptor for email_verified field.
	userDescEmailVerified := userFields[6].Descriptor()
	// user.DefaultEmailVerified holds the default value on creation for the email_verified field.
	user.DefaultEmailVerified = userDescEmailVerified.Default.(bool)
	// userDescPhoneVerified is the schema descriptor for phone_verified field.
	userDescPhoneVerified := userFields[7].Descriptor()
	// user.DefaultPhoneVerified holds the default value on creation for the phone_verified field.
	user.DefaultPhoneVerified = userDescPhoneVerified.Default.(bool)
	// userDescPicture is the schema descriptor for picture field.
	userDescPicture := userFields[8].Descriptor()
	// user.PictureValidator is a validator for the "picture" field. It is called by the builders before save.
	user.PictureValidator = userDescPicture.Validators[0].(func(string) error)
	// userDescNote is the schema descriptor for note field.
	userDescNote := userFields[11].Descriptor()
	// user.NoteValidator is a validator for the "note" field. It is called by the builders before save.
	user.NoteValidator = userDescNote.Validators[0].(func(string) error)
	// userDescWrongAttempts is the schema descriptor for wrong_attempts field.
	userDescWrongAttempts := userFields[12].Descriptor()
	// user.DefaultWrongAttempts holds the default value on creation for the wrong_attempts field.
	user.DefaultWrongAttempts = userDescWrongAttempts.Default.(uint8)
	// userDescAcceptedGeneralTerms is the schema descriptor for accepted_general_terms field.
	userDescAcceptedGeneralTerms := userFields[16].Descriptor()
	// user.DefaultAcceptedGeneralTerms holds the default value on creation for the accepted_general_terms field.
	user.DefaultAcceptedGeneralTerms = userDescAcceptedGeneralTerms.Default.(bool)
	// userDescAcceptedTermsNPrivacy is the schema descriptor for accepted_terms_n_privacy field.
	userDescAcceptedTermsNPrivacy := userFields[17].Descriptor()
	// user.DefaultAcceptedTermsNPrivacy holds the default value on creation for the accepted_terms_n_privacy field.
	user.DefaultAcceptedTermsNPrivacy = userDescAcceptedTermsNPrivacy.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() string)
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	useractivityMixin := schema.UserActivity{}.Mixin()
	useractivityMixinFields0 := useractivityMixin[0].Fields()
	_ = useractivityMixinFields0
	useractivityFields := schema.UserActivity{}.Fields()
	_ = useractivityFields
	// useractivityDescCreatedAt is the schema descriptor for created_at field.
	useractivityDescCreatedAt := useractivityMixinFields0[1].Descriptor()
	// useractivity.DefaultCreatedAt holds the default value on creation for the created_at field.
	useractivity.DefaultCreatedAt = useractivityDescCreatedAt.Default.(func() time.Time)
	// useractivityDescID is the schema descriptor for id field.
	useractivityDescID := useractivityMixinFields0[0].Descriptor()
	// useractivity.DefaultID holds the default value on creation for the id field.
	useractivity.DefaultID = useractivityDescID.Default.(func() string)
	// useractivity.IDValidator is a validator for the "id" field. It is called by the builders before save.
	useractivity.IDValidator = func() func(string) error {
		validators := useractivityDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userauthFields := schema.UserAuth{}.Fields()
	_ = userauthFields
	// userauthDescProviderID is the schema descriptor for provider_id field.
	userauthDescProviderID := userauthFields[1].Descriptor()
	// userauth.DefaultProviderID holds the default value on creation for the provider_id field.
	userauth.DefaultProviderID = userauthDescProviderID.Default.(uint8)
	// userauthDescCreatedAt is the schema descriptor for created_at field.
	userauthDescCreatedAt := userauthFields[2].Descriptor()
	// userauth.DefaultCreatedAt holds the default value on creation for the created_at field.
	userauth.DefaultCreatedAt = userauthDescCreatedAt.Default.(func() time.Time)
	// userauthDescID is the schema descriptor for id field.
	userauthDescID := userauthFields[0].Descriptor()
	// userauth.IDValidator is a validator for the "id" field. It is called by the builders before save.
	userauth.IDValidator = func() func(string) error {
		validators := userauthDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	usersessionMixin := schema.UserSession{}.Mixin()
	usersessionMixinFields0 := usersessionMixin[0].Fields()
	_ = usersessionMixinFields0
	usersessionFields := schema.UserSession{}.Fields()
	_ = usersessionFields
	// usersessionDescCreatedAt is the schema descriptor for created_at field.
	usersessionDescCreatedAt := usersessionMixinFields0[1].Descriptor()
	// usersession.DefaultCreatedAt holds the default value on creation for the created_at field.
	usersession.DefaultCreatedAt = usersessionDescCreatedAt.Default.(func() time.Time)
	// usersessionDescUpdatedAt is the schema descriptor for updated_at field.
	usersessionDescUpdatedAt := usersessionMixinFields0[2].Descriptor()
	// usersession.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	usersession.DefaultUpdatedAt = usersessionDescUpdatedAt.Default.(func() time.Time)
	// usersession.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	usersession.UpdateDefaultUpdatedAt = usersessionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// usersessionDescExpiresAt is the schema descriptor for expires_at field.
	usersessionDescExpiresAt := usersessionFields[0].Descriptor()
	// usersession.DefaultExpiresAt holds the default value on creation for the expires_at field.
	usersession.DefaultExpiresAt = usersessionDescExpiresAt.Default.(func() time.Time)
	// usersessionDescIP is the schema descriptor for ip field.
	usersessionDescIP := usersessionFields[1].Descriptor()
	// usersession.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	usersession.IPValidator = usersessionDescIP.Validators[0].(func(string) error)
	// usersessionDescID is the schema descriptor for id field.
	usersessionDescID := usersessionMixinFields0[0].Descriptor()
	// usersession.DefaultID holds the default value on creation for the id field.
	usersession.DefaultID = usersessionDescID.Default.(func() string)
	// usersession.IDValidator is a validator for the "id" field. It is called by the builders before save.
	usersession.IDValidator = func() func(string) error {
		validators := usersessionDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	usersessionsocketMixin := schema.UserSessionSocket{}.Mixin()
	usersessionsocketMixinFields0 := usersessionsocketMixin[0].Fields()
	_ = usersessionsocketMixinFields0
	usersessionsocketFields := schema.UserSessionSocket{}.Fields()
	_ = usersessionsocketFields
	// usersessionsocketDescCreatedAt is the schema descriptor for created_at field.
	usersessionsocketDescCreatedAt := usersessionsocketMixinFields0[1].Descriptor()
	// usersessionsocket.DefaultCreatedAt holds the default value on creation for the created_at field.
	usersessionsocket.DefaultCreatedAt = usersessionsocketDescCreatedAt.Default.(func() time.Time)
	// usersessionsocketDescUpdatedAt is the schema descriptor for updated_at field.
	usersessionsocketDescUpdatedAt := usersessionsocketMixinFields0[2].Descriptor()
	// usersessionsocket.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	usersessionsocket.DefaultUpdatedAt = usersessionsocketDescUpdatedAt.Default.(func() time.Time)
	// usersessionsocket.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	usersessionsocket.UpdateDefaultUpdatedAt = usersessionsocketDescUpdatedAt.UpdateDefault.(func() time.Time)
	// usersessionsocketDescID is the schema descriptor for id field.
	usersessionsocketDescID := usersessionsocketMixinFields0[0].Descriptor()
	// usersessionsocket.DefaultID holds the default value on creation for the id field.
	usersessionsocket.DefaultID = usersessionsocketDescID.Default.(func() string)
	// usersessionsocket.IDValidator is a validator for the "id" field. It is called by the builders before save.
	usersessionsocket.IDValidator = func() func(string) error {
		validators := usersessionsocketDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}

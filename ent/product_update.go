// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/document"
	"roofix/ent/predicate"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetType sets the "type" field.
func (pu *ProductUpdate) SetType(e enum.Product) *ProductUpdate {
	pu.mutation.SetType(e)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetFeatures sets the "features" field.
func (pu *ProductUpdate) SetFeatures(s []string) *ProductUpdate {
	pu.mutation.SetFeatures(s)
	return pu
}

// AppendFeatures appends s to the "features" field.
func (pu *ProductUpdate) AppendFeatures(s []string) *ProductUpdate {
	pu.mutation.AppendFeatures(s)
	return pu
}

// SetSpecialNote sets the "special_note" field.
func (pu *ProductUpdate) SetSpecialNote(s string) *ProductUpdate {
	pu.mutation.SetSpecialNote(s)
	return pu
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSpecialNote(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSpecialNote(*s)
	}
	return pu
}

// ClearSpecialNote clears the value of the "special_note" field.
func (pu *ProductUpdate) ClearSpecialNote() *ProductUpdate {
	pu.mutation.ClearSpecialNote()
	return pu
}

// SetUnitPrice sets the "unit_price" field.
func (pu *ProductUpdate) SetUnitPrice(f float64) *ProductUpdate {
	pu.mutation.ResetUnitPrice()
	pu.mutation.SetUnitPrice(f)
	return pu
}

// AddUnitPrice adds f to the "unit_price" field.
func (pu *ProductUpdate) AddUnitPrice(f float64) *ProductUpdate {
	pu.mutation.AddUnitPrice(f)
	return pu
}

// SetUnitsInStock sets the "units_in_stock" field.
func (pu *ProductUpdate) SetUnitsInStock(i int) *ProductUpdate {
	pu.mutation.ResetUnitsInStock()
	pu.mutation.SetUnitsInStock(i)
	return pu
}

// SetNillableUnitsInStock sets the "units_in_stock" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUnitsInStock(i *int) *ProductUpdate {
	if i != nil {
		pu.SetUnitsInStock(*i)
	}
	return pu
}

// AddUnitsInStock adds i to the "units_in_stock" field.
func (pu *ProductUpdate) AddUnitsInStock(i int) *ProductUpdate {
	pu.mutation.AddUnitsInStock(i)
	return pu
}

// ClearUnitsInStock clears the value of the "units_in_stock" field.
func (pu *ProductUpdate) ClearUnitsInStock() *ProductUpdate {
	pu.mutation.ClearUnitsInStock()
	return pu
}

// SetUnitsOnOrder sets the "units_on_order" field.
func (pu *ProductUpdate) SetUnitsOnOrder(i int) *ProductUpdate {
	pu.mutation.ResetUnitsOnOrder()
	pu.mutation.SetUnitsOnOrder(i)
	return pu
}

// SetNillableUnitsOnOrder sets the "units_on_order" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUnitsOnOrder(i *int) *ProductUpdate {
	if i != nil {
		pu.SetUnitsOnOrder(*i)
	}
	return pu
}

// AddUnitsOnOrder adds i to the "units_on_order" field.
func (pu *ProductUpdate) AddUnitsOnOrder(i int) *ProductUpdate {
	pu.mutation.AddUnitsOnOrder(i)
	return pu
}

// ClearUnitsOnOrder clears the value of the "units_on_order" field.
func (pu *ProductUpdate) ClearUnitsOnOrder() *ProductUpdate {
	pu.mutation.ClearUnitsOnOrder()
	return pu
}

// SetDiscontinued sets the "discontinued" field.
func (pu *ProductUpdate) SetDiscontinued(b bool) *ProductUpdate {
	pu.mutation.SetDiscontinued(b)
	return pu
}

// SetNillableDiscontinued sets the "discontinued" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDiscontinued(b *bool) *ProductUpdate {
	if b != nil {
		pu.SetDiscontinued(*b)
	}
	return pu
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (pu *ProductUpdate) ClearDiscontinued() *ProductUpdate {
	pu.mutation.ClearDiscontinued()
	return pu
}

// AddPackageIDs adds the "package" edge to the ProductPackage entity by IDs.
func (pu *ProductUpdate) AddPackageIDs(ids ...string) *ProductUpdate {
	pu.mutation.AddPackageIDs(ids...)
	return pu
}

// AddPackage adds the "package" edges to the ProductPackage entity.
func (pu *ProductUpdate) AddPackage(p ...*ProductPackage) *ProductUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPackageIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (pu *ProductUpdate) SetCreatorID(id string) *ProductUpdate {
	pu.mutation.SetCreatorID(id)
	return pu
}

// SetCreator sets the "creator" edge to the User entity.
func (pu *ProductUpdate) SetCreator(u *User) *ProductUpdate {
	return pu.SetCreatorID(u.ID)
}

// SetImageID sets the "image" edge to the Document entity by ID.
func (pu *ProductUpdate) SetImageID(id string) *ProductUpdate {
	pu.mutation.SetImageID(id)
	return pu
}

// SetNillableImageID sets the "image" edge to the Document entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableImageID(id *string) *ProductUpdate {
	if id != nil {
		pu = pu.SetImageID(*id)
	}
	return pu
}

// SetImage sets the "image" edge to the Document entity.
func (pu *ProductUpdate) SetImage(d *Document) *ProductUpdate {
	return pu.SetImageID(d.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearPackage clears all "package" edges to the ProductPackage entity.
func (pu *ProductUpdate) ClearPackage() *ProductUpdate {
	pu.mutation.ClearPackage()
	return pu
}

// RemovePackageIDs removes the "package" edge to ProductPackage entities by IDs.
func (pu *ProductUpdate) RemovePackageIDs(ids ...string) *ProductUpdate {
	pu.mutation.RemovePackageIDs(ids...)
	return pu
}

// RemovePackage removes "package" edges to ProductPackage entities.
func (pu *ProductUpdate) RemovePackage(p ...*ProductPackage) *ProductUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePackageIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (pu *ProductUpdate) ClearCreator() *ProductUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// ClearImage clears the "image" edge to the Document entity.
func (pu *ProductUpdate) ClearImage() *ProductUpdate {
	pu.mutation.ClearImage()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := product.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Product.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.SpecialNote(); ok {
		if err := product.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "Product.special_note": %w`, err)}
		}
	}
	if _, ok := pu.mutation.CreatorID(); pu.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(product.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Features(); ok {
		_spec.SetField(product.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldFeatures, value)
		})
	}
	if value, ok := pu.mutation.SpecialNote(); ok {
		_spec.SetField(product.FieldSpecialNote, field.TypeString, value)
	}
	if pu.mutation.SpecialNoteCleared() {
		_spec.ClearField(product.FieldSpecialNote, field.TypeString)
	}
	if value, ok := pu.mutation.UnitPrice(); ok {
		_spec.SetField(product.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitPrice(); ok {
		_spec.AddField(product.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.UnitsInStock(); ok {
		_spec.SetField(product.FieldUnitsInStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUnitsInStock(); ok {
		_spec.AddField(product.FieldUnitsInStock, field.TypeInt, value)
	}
	if pu.mutation.UnitsInStockCleared() {
		_spec.ClearField(product.FieldUnitsInStock, field.TypeInt)
	}
	if value, ok := pu.mutation.UnitsOnOrder(); ok {
		_spec.SetField(product.FieldUnitsOnOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUnitsOnOrder(); ok {
		_spec.AddField(product.FieldUnitsOnOrder, field.TypeInt, value)
	}
	if pu.mutation.UnitsOnOrderCleared() {
		_spec.ClearField(product.FieldUnitsOnOrder, field.TypeInt)
	}
	if value, ok := pu.mutation.Discontinued(); ok {
		_spec.SetField(product.FieldDiscontinued, field.TypeBool, value)
	}
	if pu.mutation.DiscontinuedCleared() {
		_spec.ClearField(product.FieldDiscontinued, field.TypeBool)
	}
	if pu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPackageIDs(); len(nodes) > 0 && !pu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CreatorTable,
			Columns: []string{product.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CreatorTable,
			Columns: []string{product.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.ImageTable,
			Columns: []string{product.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.ImageTable,
			Columns: []string{product.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetType sets the "type" field.
func (puo *ProductUpdateOne) SetType(e enum.Product) *ProductUpdateOne {
	puo.mutation.SetType(e)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetFeatures sets the "features" field.
func (puo *ProductUpdateOne) SetFeatures(s []string) *ProductUpdateOne {
	puo.mutation.SetFeatures(s)
	return puo
}

// AppendFeatures appends s to the "features" field.
func (puo *ProductUpdateOne) AppendFeatures(s []string) *ProductUpdateOne {
	puo.mutation.AppendFeatures(s)
	return puo
}

// SetSpecialNote sets the "special_note" field.
func (puo *ProductUpdateOne) SetSpecialNote(s string) *ProductUpdateOne {
	puo.mutation.SetSpecialNote(s)
	return puo
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSpecialNote(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSpecialNote(*s)
	}
	return puo
}

// ClearSpecialNote clears the value of the "special_note" field.
func (puo *ProductUpdateOne) ClearSpecialNote() *ProductUpdateOne {
	puo.mutation.ClearSpecialNote()
	return puo
}

// SetUnitPrice sets the "unit_price" field.
func (puo *ProductUpdateOne) SetUnitPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetUnitPrice()
	puo.mutation.SetUnitPrice(f)
	return puo
}

// AddUnitPrice adds f to the "unit_price" field.
func (puo *ProductUpdateOne) AddUnitPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddUnitPrice(f)
	return puo
}

// SetUnitsInStock sets the "units_in_stock" field.
func (puo *ProductUpdateOne) SetUnitsInStock(i int) *ProductUpdateOne {
	puo.mutation.ResetUnitsInStock()
	puo.mutation.SetUnitsInStock(i)
	return puo
}

// SetNillableUnitsInStock sets the "units_in_stock" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUnitsInStock(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetUnitsInStock(*i)
	}
	return puo
}

// AddUnitsInStock adds i to the "units_in_stock" field.
func (puo *ProductUpdateOne) AddUnitsInStock(i int) *ProductUpdateOne {
	puo.mutation.AddUnitsInStock(i)
	return puo
}

// ClearUnitsInStock clears the value of the "units_in_stock" field.
func (puo *ProductUpdateOne) ClearUnitsInStock() *ProductUpdateOne {
	puo.mutation.ClearUnitsInStock()
	return puo
}

// SetUnitsOnOrder sets the "units_on_order" field.
func (puo *ProductUpdateOne) SetUnitsOnOrder(i int) *ProductUpdateOne {
	puo.mutation.ResetUnitsOnOrder()
	puo.mutation.SetUnitsOnOrder(i)
	return puo
}

// SetNillableUnitsOnOrder sets the "units_on_order" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUnitsOnOrder(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetUnitsOnOrder(*i)
	}
	return puo
}

// AddUnitsOnOrder adds i to the "units_on_order" field.
func (puo *ProductUpdateOne) AddUnitsOnOrder(i int) *ProductUpdateOne {
	puo.mutation.AddUnitsOnOrder(i)
	return puo
}

// ClearUnitsOnOrder clears the value of the "units_on_order" field.
func (puo *ProductUpdateOne) ClearUnitsOnOrder() *ProductUpdateOne {
	puo.mutation.ClearUnitsOnOrder()
	return puo
}

// SetDiscontinued sets the "discontinued" field.
func (puo *ProductUpdateOne) SetDiscontinued(b bool) *ProductUpdateOne {
	puo.mutation.SetDiscontinued(b)
	return puo
}

// SetNillableDiscontinued sets the "discontinued" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDiscontinued(b *bool) *ProductUpdateOne {
	if b != nil {
		puo.SetDiscontinued(*b)
	}
	return puo
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (puo *ProductUpdateOne) ClearDiscontinued() *ProductUpdateOne {
	puo.mutation.ClearDiscontinued()
	return puo
}

// AddPackageIDs adds the "package" edge to the ProductPackage entity by IDs.
func (puo *ProductUpdateOne) AddPackageIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.AddPackageIDs(ids...)
	return puo
}

// AddPackage adds the "package" edges to the ProductPackage entity.
func (puo *ProductUpdateOne) AddPackage(p ...*ProductPackage) *ProductUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPackageIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (puo *ProductUpdateOne) SetCreatorID(id string) *ProductUpdateOne {
	puo.mutation.SetCreatorID(id)
	return puo
}

// SetCreator sets the "creator" edge to the User entity.
func (puo *ProductUpdateOne) SetCreator(u *User) *ProductUpdateOne {
	return puo.SetCreatorID(u.ID)
}

// SetImageID sets the "image" edge to the Document entity by ID.
func (puo *ProductUpdateOne) SetImageID(id string) *ProductUpdateOne {
	puo.mutation.SetImageID(id)
	return puo
}

// SetNillableImageID sets the "image" edge to the Document entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableImageID(id *string) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetImageID(*id)
	}
	return puo
}

// SetImage sets the "image" edge to the Document entity.
func (puo *ProductUpdateOne) SetImage(d *Document) *ProductUpdateOne {
	return puo.SetImageID(d.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearPackage clears all "package" edges to the ProductPackage entity.
func (puo *ProductUpdateOne) ClearPackage() *ProductUpdateOne {
	puo.mutation.ClearPackage()
	return puo
}

// RemovePackageIDs removes the "package" edge to ProductPackage entities by IDs.
func (puo *ProductUpdateOne) RemovePackageIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.RemovePackageIDs(ids...)
	return puo
}

// RemovePackage removes "package" edges to ProductPackage entities.
func (puo *ProductUpdateOne) RemovePackage(p ...*ProductPackage) *ProductUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePackageIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (puo *ProductUpdateOne) ClearCreator() *ProductUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// ClearImage clears the "image" edge to the Document entity.
func (puo *ProductUpdateOne) ClearImage() *ProductUpdateOne {
	puo.mutation.ClearImage()
	return puo
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := product.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Product.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.SpecialNote(); ok {
		if err := product.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "Product.special_note": %w`, err)}
		}
	}
	if _, ok := puo.mutation.CreatorID(); puo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(product.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Features(); ok {
		_spec.SetField(product.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldFeatures, value)
		})
	}
	if value, ok := puo.mutation.SpecialNote(); ok {
		_spec.SetField(product.FieldSpecialNote, field.TypeString, value)
	}
	if puo.mutation.SpecialNoteCleared() {
		_spec.ClearField(product.FieldSpecialNote, field.TypeString)
	}
	if value, ok := puo.mutation.UnitPrice(); ok {
		_spec.SetField(product.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitPrice(); ok {
		_spec.AddField(product.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.UnitsInStock(); ok {
		_spec.SetField(product.FieldUnitsInStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUnitsInStock(); ok {
		_spec.AddField(product.FieldUnitsInStock, field.TypeInt, value)
	}
	if puo.mutation.UnitsInStockCleared() {
		_spec.ClearField(product.FieldUnitsInStock, field.TypeInt)
	}
	if value, ok := puo.mutation.UnitsOnOrder(); ok {
		_spec.SetField(product.FieldUnitsOnOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUnitsOnOrder(); ok {
		_spec.AddField(product.FieldUnitsOnOrder, field.TypeInt, value)
	}
	if puo.mutation.UnitsOnOrderCleared() {
		_spec.ClearField(product.FieldUnitsOnOrder, field.TypeInt)
	}
	if value, ok := puo.mutation.Discontinued(); ok {
		_spec.SetField(product.FieldDiscontinued, field.TypeBool, value)
	}
	if puo.mutation.DiscontinuedCleared() {
		_spec.ClearField(product.FieldDiscontinued, field.TypeBool)
	}
	if puo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPackageIDs(); len(nodes) > 0 && !puo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.PackageTable,
			Columns: product.PackagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CreatorTable,
			Columns: []string{product.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CreatorTable,
			Columns: []string{product.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.ImageTable,
			Columns: []string{product.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.ImageTable,
			Columns: []string{product.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

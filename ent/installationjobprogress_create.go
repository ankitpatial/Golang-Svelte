// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobprogress"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobProgressCreate is the builder for creating a InstallationJobProgress entity.
type InstallationJobProgressCreate struct {
	config
	mutation *InstallationJobProgressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ijpc *InstallationJobProgressCreate) SetCreatedAt(t time.Time) *InstallationJobProgressCreate {
	ijpc.mutation.SetCreatedAt(t)
	return ijpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableCreatedAt(t *time.Time) *InstallationJobProgressCreate {
	if t != nil {
		ijpc.SetCreatedAt(*t)
	}
	return ijpc
}

// SetUpdatedAt sets the "updated_at" field.
func (ijpc *InstallationJobProgressCreate) SetUpdatedAt(t time.Time) *InstallationJobProgressCreate {
	ijpc.mutation.SetUpdatedAt(t)
	return ijpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableUpdatedAt(t *time.Time) *InstallationJobProgressCreate {
	if t != nil {
		ijpc.SetUpdatedAt(*t)
	}
	return ijpc
}

// SetStatus sets the "status" field.
func (ijpc *InstallationJobProgressCreate) SetStatus(es enum.InstallationStatus) *InstallationJobProgressCreate {
	ijpc.mutation.SetStatus(es)
	return ijpc
}

// SetComplete sets the "complete" field.
func (ijpc *InstallationJobProgressCreate) SetComplete(b bool) *InstallationJobProgressCreate {
	ijpc.mutation.SetComplete(b)
	return ijpc
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableComplete(b *bool) *InstallationJobProgressCreate {
	if b != nil {
		ijpc.SetComplete(*b)
	}
	return ijpc
}

// SetNote sets the "note" field.
func (ijpc *InstallationJobProgressCreate) SetNote(s string) *InstallationJobProgressCreate {
	ijpc.mutation.SetNote(s)
	return ijpc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableNote(s *string) *InstallationJobProgressCreate {
	if s != nil {
		ijpc.SetNote(*s)
	}
	return ijpc
}

// SetID sets the "id" field.
func (ijpc *InstallationJobProgressCreate) SetID(s string) *InstallationJobProgressCreate {
	ijpc.mutation.SetID(s)
	return ijpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableID(s *string) *InstallationJobProgressCreate {
	if s != nil {
		ijpc.SetID(*s)
	}
	return ijpc
}

// SetJobID sets the "job" edge to the InstallationJob entity by ID.
func (ijpc *InstallationJobProgressCreate) SetJobID(id string) *InstallationJobProgressCreate {
	ijpc.mutation.SetJobID(id)
	return ijpc
}

// SetNillableJobID sets the "job" edge to the InstallationJob entity by ID if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableJobID(id *string) *InstallationJobProgressCreate {
	if id != nil {
		ijpc = ijpc.SetJobID(*id)
	}
	return ijpc
}

// SetJob sets the "job" edge to the InstallationJob entity.
func (ijpc *InstallationJobProgressCreate) SetJob(i *InstallationJob) *InstallationJobProgressCreate {
	return ijpc.SetJobID(i.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ijpc *InstallationJobProgressCreate) SetCreatorID(id string) *InstallationJobProgressCreate {
	ijpc.mutation.SetCreatorID(id)
	return ijpc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ijpc *InstallationJobProgressCreate) SetNillableCreatorID(id *string) *InstallationJobProgressCreate {
	if id != nil {
		ijpc = ijpc.SetCreatorID(*id)
	}
	return ijpc
}

// SetCreator sets the "creator" edge to the User entity.
func (ijpc *InstallationJobProgressCreate) SetCreator(u *User) *InstallationJobProgressCreate {
	return ijpc.SetCreatorID(u.ID)
}

// Mutation returns the InstallationJobProgressMutation object of the builder.
func (ijpc *InstallationJobProgressCreate) Mutation() *InstallationJobProgressMutation {
	return ijpc.mutation
}

// Save creates the InstallationJobProgress in the database.
func (ijpc *InstallationJobProgressCreate) Save(ctx context.Context) (*InstallationJobProgress, error) {
	ijpc.defaults()
	return withHooks(ctx, ijpc.sqlSave, ijpc.mutation, ijpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ijpc *InstallationJobProgressCreate) SaveX(ctx context.Context) *InstallationJobProgress {
	v, err := ijpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ijpc *InstallationJobProgressCreate) Exec(ctx context.Context) error {
	_, err := ijpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijpc *InstallationJobProgressCreate) ExecX(ctx context.Context) {
	if err := ijpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ijpc *InstallationJobProgressCreate) defaults() {
	if _, ok := ijpc.mutation.CreatedAt(); !ok {
		v := installationjobprogress.DefaultCreatedAt()
		ijpc.mutation.SetCreatedAt(v)
	}
	if _, ok := ijpc.mutation.UpdatedAt(); !ok {
		v := installationjobprogress.DefaultUpdatedAt()
		ijpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ijpc.mutation.Complete(); !ok {
		v := installationjobprogress.DefaultComplete
		ijpc.mutation.SetComplete(v)
	}
	if _, ok := ijpc.mutation.ID(); !ok {
		v := installationjobprogress.DefaultID()
		ijpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ijpc *InstallationJobProgressCreate) check() error {
	if _, ok := ijpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InstallationJobProgress.created_at"`)}
	}
	if _, ok := ijpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InstallationJobProgress.updated_at"`)}
	}
	if _, ok := ijpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "InstallationJobProgress.status"`)}
	}
	if v, ok := ijpc.mutation.Status(); ok {
		if err := installationjobprogress.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstallationJobProgress.status": %w`, err)}
		}
	}
	if v, ok := ijpc.mutation.ID(); ok {
		if err := installationjobprogress.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InstallationJobProgress.id": %w`, err)}
		}
	}
	return nil
}

func (ijpc *InstallationJobProgressCreate) sqlSave(ctx context.Context) (*InstallationJobProgress, error) {
	if err := ijpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ijpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ijpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InstallationJobProgress.ID type: %T", _spec.ID.Value)
		}
	}
	ijpc.mutation.id = &_node.ID
	ijpc.mutation.done = true
	return _node, nil
}

func (ijpc *InstallationJobProgressCreate) createSpec() (*InstallationJobProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &InstallationJobProgress{config: ijpc.config}
		_spec = sqlgraph.NewCreateSpec(installationjobprogress.Table, sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString))
	)
	_spec.OnConflict = ijpc.conflict
	if id, ok := ijpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ijpc.mutation.CreatedAt(); ok {
		_spec.SetField(installationjobprogress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ijpc.mutation.UpdatedAt(); ok {
		_spec.SetField(installationjobprogress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ijpc.mutation.Status(); ok {
		_spec.SetField(installationjobprogress.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ijpc.mutation.Complete(); ok {
		_spec.SetField(installationjobprogress.FieldComplete, field.TypeBool, value)
		_node.Complete = value
	}
	if value, ok := ijpc.mutation.Note(); ok {
		_spec.SetField(installationjobprogress.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := ijpc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.JobTable,
			Columns: []string{installationjobprogress.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ijpc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.CreatorTable,
			Columns: []string{installationjobprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstallationJobProgress.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstallationJobProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ijpc *InstallationJobProgressCreate) OnConflict(opts ...sql.ConflictOption) *InstallationJobProgressUpsertOne {
	ijpc.conflict = opts
	return &InstallationJobProgressUpsertOne{
		create: ijpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstallationJobProgress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ijpc *InstallationJobProgressCreate) OnConflictColumns(columns ...string) *InstallationJobProgressUpsertOne {
	ijpc.conflict = append(ijpc.conflict, sql.ConflictColumns(columns...))
	return &InstallationJobProgressUpsertOne{
		create: ijpc,
	}
}

type (
	// InstallationJobProgressUpsertOne is the builder for "upsert"-ing
	//  one InstallationJobProgress node.
	InstallationJobProgressUpsertOne struct {
		create *InstallationJobProgressCreate
	}

	// InstallationJobProgressUpsert is the "OnConflict" setter.
	InstallationJobProgressUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InstallationJobProgressUpsert) SetUpdatedAt(v time.Time) *InstallationJobProgressUpsert {
	u.Set(installationjobprogress.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InstallationJobProgressUpsert) UpdateUpdatedAt() *InstallationJobProgressUpsert {
	u.SetExcluded(installationjobprogress.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InstallationJobProgress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(installationjobprogress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstallationJobProgressUpsertOne) UpdateNewValues() *InstallationJobProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(installationjobprogress.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(installationjobprogress.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Status(); exists {
			s.SetIgnore(installationjobprogress.FieldStatus)
		}
		if _, exists := u.create.mutation.Complete(); exists {
			s.SetIgnore(installationjobprogress.FieldComplete)
		}
		if _, exists := u.create.mutation.Note(); exists {
			s.SetIgnore(installationjobprogress.FieldNote)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstallationJobProgress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InstallationJobProgressUpsertOne) Ignore() *InstallationJobProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstallationJobProgressUpsertOne) DoNothing() *InstallationJobProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstallationJobProgressCreate.OnConflict
// documentation for more info.
func (u *InstallationJobProgressUpsertOne) Update(set func(*InstallationJobProgressUpsert)) *InstallationJobProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstallationJobProgressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InstallationJobProgressUpsertOne) SetUpdatedAt(v time.Time) *InstallationJobProgressUpsertOne {
	return u.Update(func(s *InstallationJobProgressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InstallationJobProgressUpsertOne) UpdateUpdatedAt() *InstallationJobProgressUpsertOne {
	return u.Update(func(s *InstallationJobProgressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *InstallationJobProgressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstallationJobProgressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstallationJobProgressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InstallationJobProgressUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InstallationJobProgressUpsertOne.ID is not supported by MySQL driver. Use InstallationJobProgressUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InstallationJobProgressUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InstallationJobProgressCreateBulk is the builder for creating many InstallationJobProgress entities in bulk.
type InstallationJobProgressCreateBulk struct {
	config
	builders []*InstallationJobProgressCreate
	conflict []sql.ConflictOption
}

// Save creates the InstallationJobProgress entities in the database.
func (ijpcb *InstallationJobProgressCreateBulk) Save(ctx context.Context) ([]*InstallationJobProgress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ijpcb.builders))
	nodes := make([]*InstallationJobProgress, len(ijpcb.builders))
	mutators := make([]Mutator, len(ijpcb.builders))
	for i := range ijpcb.builders {
		func(i int, root context.Context) {
			builder := ijpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstallationJobProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ijpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ijpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ijpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ijpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ijpcb *InstallationJobProgressCreateBulk) SaveX(ctx context.Context) []*InstallationJobProgress {
	v, err := ijpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ijpcb *InstallationJobProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := ijpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijpcb *InstallationJobProgressCreateBulk) ExecX(ctx context.Context) {
	if err := ijpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstallationJobProgress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstallationJobProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ijpcb *InstallationJobProgressCreateBulk) OnConflict(opts ...sql.ConflictOption) *InstallationJobProgressUpsertBulk {
	ijpcb.conflict = opts
	return &InstallationJobProgressUpsertBulk{
		create: ijpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstallationJobProgress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ijpcb *InstallationJobProgressCreateBulk) OnConflictColumns(columns ...string) *InstallationJobProgressUpsertBulk {
	ijpcb.conflict = append(ijpcb.conflict, sql.ConflictColumns(columns...))
	return &InstallationJobProgressUpsertBulk{
		create: ijpcb,
	}
}

// InstallationJobProgressUpsertBulk is the builder for "upsert"-ing
// a bulk of InstallationJobProgress nodes.
type InstallationJobProgressUpsertBulk struct {
	create *InstallationJobProgressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InstallationJobProgress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(installationjobprogress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstallationJobProgressUpsertBulk) UpdateNewValues() *InstallationJobProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(installationjobprogress.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(installationjobprogress.FieldCreatedAt)
			}
			if _, exists := b.mutation.Status(); exists {
				s.SetIgnore(installationjobprogress.FieldStatus)
			}
			if _, exists := b.mutation.Complete(); exists {
				s.SetIgnore(installationjobprogress.FieldComplete)
			}
			if _, exists := b.mutation.Note(); exists {
				s.SetIgnore(installationjobprogress.FieldNote)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstallationJobProgress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InstallationJobProgressUpsertBulk) Ignore() *InstallationJobProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstallationJobProgressUpsertBulk) DoNothing() *InstallationJobProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstallationJobProgressCreateBulk.OnConflict
// documentation for more info.
func (u *InstallationJobProgressUpsertBulk) Update(set func(*InstallationJobProgressUpsert)) *InstallationJobProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstallationJobProgressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InstallationJobProgressUpsertBulk) SetUpdatedAt(v time.Time) *InstallationJobProgressUpsertBulk {
	return u.Update(func(s *InstallationJobProgressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InstallationJobProgressUpsertBulk) UpdateUpdatedAt() *InstallationJobProgressUpsertBulk {
	return u.Update(func(s *InstallationJobProgressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *InstallationJobProgressUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InstallationJobProgressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstallationJobProgressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstallationJobProgressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/channel"
	"roofix/ent/channelsub"
	"roofix/ent/partner"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelSubCreate is the builder for creating a ChannelSub entity.
type ChannelSubCreate struct {
	config
	mutation *ChannelSubMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (csc *ChannelSubCreate) SetCreatedAt(t time.Time) *ChannelSubCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *ChannelSubCreate) SetNillableCreatedAt(t *time.Time) *ChannelSubCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *ChannelSubCreate) SetUpdatedAt(t time.Time) *ChannelSubCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *ChannelSubCreate) SetNillableUpdatedAt(t *time.Time) *ChannelSubCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetRole sets the "role" field.
func (csc *ChannelSubCreate) SetRole(e enum.Role) *ChannelSubCreate {
	csc.mutation.SetRole(e)
	return csc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (csc *ChannelSubCreate) SetNillableRole(e *enum.Role) *ChannelSubCreate {
	if e != nil {
		csc.SetRole(*e)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *ChannelSubCreate) SetID(s string) *ChannelSubCreate {
	csc.mutation.SetID(s)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *ChannelSubCreate) SetNillableID(s *string) *ChannelSubCreate {
	if s != nil {
		csc.SetID(*s)
	}
	return csc
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (csc *ChannelSubCreate) SetChannelID(id string) *ChannelSubCreate {
	csc.mutation.SetChannelID(id)
	return csc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (csc *ChannelSubCreate) SetChannel(c *Channel) *ChannelSubCreate {
	return csc.SetChannelID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csc *ChannelSubCreate) SetUserID(id string) *ChannelSubCreate {
	csc.mutation.SetUserID(id)
	return csc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (csc *ChannelSubCreate) SetNillableUserID(id *string) *ChannelSubCreate {
	if id != nil {
		csc = csc.SetUserID(*id)
	}
	return csc
}

// SetUser sets the "user" edge to the User entity.
func (csc *ChannelSubCreate) SetUser(u *User) *ChannelSubCreate {
	return csc.SetUserID(u.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (csc *ChannelSubCreate) SetPartnerID(id string) *ChannelSubCreate {
	csc.mutation.SetPartnerID(id)
	return csc
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (csc *ChannelSubCreate) SetNillablePartnerID(id *string) *ChannelSubCreate {
	if id != nil {
		csc = csc.SetPartnerID(*id)
	}
	return csc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (csc *ChannelSubCreate) SetPartner(p *Partner) *ChannelSubCreate {
	return csc.SetPartnerID(p.ID)
}

// Mutation returns the ChannelSubMutation object of the builder.
func (csc *ChannelSubCreate) Mutation() *ChannelSubMutation {
	return csc.mutation
}

// Save creates the ChannelSub in the database.
func (csc *ChannelSubCreate) Save(ctx context.Context) (*ChannelSub, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ChannelSubCreate) SaveX(ctx context.Context) *ChannelSub {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ChannelSubCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ChannelSubCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ChannelSubCreate) defaults() {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := channelsub.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		v := channelsub.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		v := channelsub.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ChannelSubCreate) check() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChannelSub.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChannelSub.updated_at"`)}
	}
	if v, ok := csc.mutation.Role(); ok {
		if err := channelsub.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ChannelSub.role": %w`, err)}
		}
	}
	if v, ok := csc.mutation.ID(); ok {
		if err := channelsub.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ChannelSub.id": %w`, err)}
		}
	}
	if _, ok := csc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "ChannelSub.channel"`)}
	}
	return nil
}

func (csc *ChannelSubCreate) sqlSave(ctx context.Context) (*ChannelSub, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ChannelSub.ID type: %T", _spec.ID.Value)
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ChannelSubCreate) createSpec() (*ChannelSub, *sqlgraph.CreateSpec) {
	var (
		_node = &ChannelSub{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(channelsub.Table, sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString))
	)
	_spec.OnConflict = csc.conflict
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(channelsub.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(channelsub.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.Role(); ok {
		_spec.SetField(channelsub.FieldRole, field.TypeEnum, value)
		_node.Role = &value
	}
	if nodes := csc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.ChannelTable,
			Columns: []string{channelsub.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.UserTable,
			Columns: []string{channelsub.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.PartnerTable,
			Columns: []string{channelsub.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelSub.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelSubUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (csc *ChannelSubCreate) OnConflict(opts ...sql.ConflictOption) *ChannelSubUpsertOne {
	csc.conflict = opts
	return &ChannelSubUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelSub.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *ChannelSubCreate) OnConflictColumns(columns ...string) *ChannelSubUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &ChannelSubUpsertOne{
		create: csc,
	}
}

type (
	// ChannelSubUpsertOne is the builder for "upsert"-ing
	//  one ChannelSub node.
	ChannelSubUpsertOne struct {
		create *ChannelSubCreate
	}

	// ChannelSubUpsert is the "OnConflict" setter.
	ChannelSubUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelSubUpsert) SetUpdatedAt(v time.Time) *ChannelSubUpsert {
	u.Set(channelsub.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelSubUpsert) UpdateUpdatedAt() *ChannelSubUpsert {
	u.SetExcluded(channelsub.FieldUpdatedAt)
	return u
}

// SetRole sets the "role" field.
func (u *ChannelSubUpsert) SetRole(v enum.Role) *ChannelSubUpsert {
	u.Set(channelsub.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ChannelSubUpsert) UpdateRole() *ChannelSubUpsert {
	u.SetExcluded(channelsub.FieldRole)
	return u
}

// ClearRole clears the value of the "role" field.
func (u *ChannelSubUpsert) ClearRole() *ChannelSubUpsert {
	u.SetNull(channelsub.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChannelSub.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelsub.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelSubUpsertOne) UpdateNewValues() *ChannelSubUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(channelsub.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channelsub.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelSub.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelSubUpsertOne) Ignore() *ChannelSubUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelSubUpsertOne) DoNothing() *ChannelSubUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelSubCreate.OnConflict
// documentation for more info.
func (u *ChannelSubUpsertOne) Update(set func(*ChannelSubUpsert)) *ChannelSubUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelSubUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelSubUpsertOne) SetUpdatedAt(v time.Time) *ChannelSubUpsertOne {
	return u.Update(func(s *ChannelSubUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelSubUpsertOne) UpdateUpdatedAt() *ChannelSubUpsertOne {
	return u.Update(func(s *ChannelSubUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRole sets the "role" field.
func (u *ChannelSubUpsertOne) SetRole(v enum.Role) *ChannelSubUpsertOne {
	return u.Update(func(s *ChannelSubUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ChannelSubUpsertOne) UpdateRole() *ChannelSubUpsertOne {
	return u.Update(func(s *ChannelSubUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *ChannelSubUpsertOne) ClearRole() *ChannelSubUpsertOne {
	return u.Update(func(s *ChannelSubUpsert) {
		s.ClearRole()
	})
}

// Exec executes the query.
func (u *ChannelSubUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChannelSubCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelSubUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelSubUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ChannelSubUpsertOne.ID is not supported by MySQL driver. Use ChannelSubUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelSubUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelSubCreateBulk is the builder for creating many ChannelSub entities in bulk.
type ChannelSubCreateBulk struct {
	config
	builders []*ChannelSubCreate
	conflict []sql.ConflictOption
}

// Save creates the ChannelSub entities in the database.
func (cscb *ChannelSubCreateBulk) Save(ctx context.Context) ([]*ChannelSub, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ChannelSub, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelSubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ChannelSubCreateBulk) SaveX(ctx context.Context) []*ChannelSub {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ChannelSubCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ChannelSubCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelSub.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelSubUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cscb *ChannelSubCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelSubUpsertBulk {
	cscb.conflict = opts
	return &ChannelSubUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelSub.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *ChannelSubCreateBulk) OnConflictColumns(columns ...string) *ChannelSubUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &ChannelSubUpsertBulk{
		create: cscb,
	}
}

// ChannelSubUpsertBulk is the builder for "upsert"-ing
// a bulk of ChannelSub nodes.
type ChannelSubUpsertBulk struct {
	create *ChannelSubCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChannelSub.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelsub.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelSubUpsertBulk) UpdateNewValues() *ChannelSubUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(channelsub.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channelsub.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelSub.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelSubUpsertBulk) Ignore() *ChannelSubUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelSubUpsertBulk) DoNothing() *ChannelSubUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelSubCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelSubUpsertBulk) Update(set func(*ChannelSubUpsert)) *ChannelSubUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelSubUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelSubUpsertBulk) SetUpdatedAt(v time.Time) *ChannelSubUpsertBulk {
	return u.Update(func(s *ChannelSubUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelSubUpsertBulk) UpdateUpdatedAt() *ChannelSubUpsertBulk {
	return u.Update(func(s *ChannelSubUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRole sets the "role" field.
func (u *ChannelSubUpsertBulk) SetRole(v enum.Role) *ChannelSubUpsertBulk {
	return u.Update(func(s *ChannelSubUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ChannelSubUpsertBulk) UpdateRole() *ChannelSubUpsertBulk {
	return u.Update(func(s *ChannelSubUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *ChannelSubUpsertBulk) ClearRole() *ChannelSubUpsertBulk {
	return u.Update(func(s *ChannelSubUpsert) {
		s.ClearRole()
	})
}

// Exec executes the query.
func (u *ChannelSubUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChannelSubCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChannelSubCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelSubUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HomeOwnerUpdate is the builder for updating HomeOwner entities.
type HomeOwnerUpdate struct {
	config
	hooks     []Hook
	mutation  *HomeOwnerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the HomeOwnerUpdate builder.
func (hou *HomeOwnerUpdate) Where(ps ...predicate.HomeOwner) *HomeOwnerUpdate {
	hou.mutation.Where(ps...)
	return hou
}

// SetUpdatedAt sets the "updated_at" field.
func (hou *HomeOwnerUpdate) SetUpdatedAt(t time.Time) *HomeOwnerUpdate {
	hou.mutation.SetUpdatedAt(t)
	return hou
}

// SetFirstName sets the "first_name" field.
func (hou *HomeOwnerUpdate) SetFirstName(s string) *HomeOwnerUpdate {
	hou.mutation.SetFirstName(s)
	return hou
}

// SetLastName sets the "last_name" field.
func (hou *HomeOwnerUpdate) SetLastName(s string) *HomeOwnerUpdate {
	hou.mutation.SetLastName(s)
	return hou
}

// SetEmail sets the "email" field.
func (hou *HomeOwnerUpdate) SetEmail(s string) *HomeOwnerUpdate {
	hou.mutation.SetEmail(s)
	return hou
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillableEmail(s *string) *HomeOwnerUpdate {
	if s != nil {
		hou.SetEmail(*s)
	}
	return hou
}

// ClearEmail clears the value of the "email" field.
func (hou *HomeOwnerUpdate) ClearEmail() *HomeOwnerUpdate {
	hou.mutation.ClearEmail()
	return hou
}

// SetPhone sets the "phone" field.
func (hou *HomeOwnerUpdate) SetPhone(s string) *HomeOwnerUpdate {
	hou.mutation.SetPhone(s)
	return hou
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillablePhone(s *string) *HomeOwnerUpdate {
	if s != nil {
		hou.SetPhone(*s)
	}
	return hou
}

// ClearPhone clears the value of the "phone" field.
func (hou *HomeOwnerUpdate) ClearPhone() *HomeOwnerUpdate {
	hou.mutation.ClearPhone()
	return hou
}

// SetStreetNumber sets the "street_number" field.
func (hou *HomeOwnerUpdate) SetStreetNumber(s string) *HomeOwnerUpdate {
	hou.mutation.SetStreetNumber(s)
	return hou
}

// SetStreetName sets the "street_name" field.
func (hou *HomeOwnerUpdate) SetStreetName(s string) *HomeOwnerUpdate {
	hou.mutation.SetStreetName(s)
	return hou
}

// SetCity sets the "city" field.
func (hou *HomeOwnerUpdate) SetCity(s string) *HomeOwnerUpdate {
	hou.mutation.SetCity(s)
	return hou
}

// SetState sets the "state" field.
func (hou *HomeOwnerUpdate) SetState(s string) *HomeOwnerUpdate {
	hou.mutation.SetState(s)
	return hou
}

// SetStateAbbr sets the "state_abbr" field.
func (hou *HomeOwnerUpdate) SetStateAbbr(s string) *HomeOwnerUpdate {
	hou.mutation.SetStateAbbr(s)
	return hou
}

// SetNillableStateAbbr sets the "state_abbr" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillableStateAbbr(s *string) *HomeOwnerUpdate {
	if s != nil {
		hou.SetStateAbbr(*s)
	}
	return hou
}

// ClearStateAbbr clears the value of the "state_abbr" field.
func (hou *HomeOwnerUpdate) ClearStateAbbr() *HomeOwnerUpdate {
	hou.mutation.ClearStateAbbr()
	return hou
}

// SetZip sets the "zip" field.
func (hou *HomeOwnerUpdate) SetZip(s string) *HomeOwnerUpdate {
	hou.mutation.SetZip(s)
	return hou
}

// SetFormattedAddress sets the "formatted_address" field.
func (hou *HomeOwnerUpdate) SetFormattedAddress(s string) *HomeOwnerUpdate {
	hou.mutation.SetFormattedAddress(s)
	return hou
}

// SetNillableFormattedAddress sets the "formatted_address" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillableFormattedAddress(s *string) *HomeOwnerUpdate {
	if s != nil {
		hou.SetFormattedAddress(*s)
	}
	return hou
}

// ClearFormattedAddress clears the value of the "formatted_address" field.
func (hou *HomeOwnerUpdate) ClearFormattedAddress() *HomeOwnerUpdate {
	hou.mutation.ClearFormattedAddress()
	return hou
}

// SetLatitude sets the "latitude" field.
func (hou *HomeOwnerUpdate) SetLatitude(f float64) *HomeOwnerUpdate {
	hou.mutation.ResetLatitude()
	hou.mutation.SetLatitude(f)
	return hou
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillableLatitude(f *float64) *HomeOwnerUpdate {
	if f != nil {
		hou.SetLatitude(*f)
	}
	return hou
}

// AddLatitude adds f to the "latitude" field.
func (hou *HomeOwnerUpdate) AddLatitude(f float64) *HomeOwnerUpdate {
	hou.mutation.AddLatitude(f)
	return hou
}

// ClearLatitude clears the value of the "latitude" field.
func (hou *HomeOwnerUpdate) ClearLatitude() *HomeOwnerUpdate {
	hou.mutation.ClearLatitude()
	return hou
}

// SetLongitude sets the "longitude" field.
func (hou *HomeOwnerUpdate) SetLongitude(f float64) *HomeOwnerUpdate {
	hou.mutation.ResetLongitude()
	hou.mutation.SetLongitude(f)
	return hou
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillableLongitude(f *float64) *HomeOwnerUpdate {
	if f != nil {
		hou.SetLongitude(*f)
	}
	return hou
}

// AddLongitude adds f to the "longitude" field.
func (hou *HomeOwnerUpdate) AddLongitude(f float64) *HomeOwnerUpdate {
	hou.mutation.AddLongitude(f)
	return hou
}

// ClearLongitude clears the value of the "longitude" field.
func (hou *HomeOwnerUpdate) ClearLongitude() *HomeOwnerUpdate {
	hou.mutation.ClearLongitude()
	return hou
}

// SetHash sets the "hash" field.
func (hou *HomeOwnerUpdate) SetHash(s string) *HomeOwnerUpdate {
	hou.mutation.SetHash(s)
	return hou
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillableHash(s *string) *HomeOwnerUpdate {
	if s != nil {
		hou.SetHash(*s)
	}
	return hou
}

// ClearHash clears the value of the "hash" field.
func (hou *HomeOwnerUpdate) ClearHash() *HomeOwnerUpdate {
	hou.mutation.ClearHash()
	return hou
}

// AddEstimateIDs adds the "estimates" edge to the Estimate entity by IDs.
func (hou *HomeOwnerUpdate) AddEstimateIDs(ids ...string) *HomeOwnerUpdate {
	hou.mutation.AddEstimateIDs(ids...)
	return hou
}

// AddEstimates adds the "estimates" edges to the Estimate entity.
func (hou *HomeOwnerUpdate) AddEstimates(e ...*Estimate) *HomeOwnerUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hou.AddEstimateIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (hou *HomeOwnerUpdate) AddJobIDs(ids ...string) *HomeOwnerUpdate {
	hou.mutation.AddJobIDs(ids...)
	return hou
}

// AddJobs adds the "jobs" edges to the Job entity.
func (hou *HomeOwnerUpdate) AddJobs(j ...*Job) *HomeOwnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return hou.AddJobIDs(ids...)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (hou *HomeOwnerUpdate) SetPartnerID(id string) *HomeOwnerUpdate {
	hou.mutation.SetPartnerID(id)
	return hou
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (hou *HomeOwnerUpdate) SetNillablePartnerID(id *string) *HomeOwnerUpdate {
	if id != nil {
		hou = hou.SetPartnerID(*id)
	}
	return hou
}

// SetPartner sets the "partner" edge to the Partner entity.
func (hou *HomeOwnerUpdate) SetPartner(p *Partner) *HomeOwnerUpdate {
	return hou.SetPartnerID(p.ID)
}

// Mutation returns the HomeOwnerMutation object of the builder.
func (hou *HomeOwnerUpdate) Mutation() *HomeOwnerMutation {
	return hou.mutation
}

// ClearEstimates clears all "estimates" edges to the Estimate entity.
func (hou *HomeOwnerUpdate) ClearEstimates() *HomeOwnerUpdate {
	hou.mutation.ClearEstimates()
	return hou
}

// RemoveEstimateIDs removes the "estimates" edge to Estimate entities by IDs.
func (hou *HomeOwnerUpdate) RemoveEstimateIDs(ids ...string) *HomeOwnerUpdate {
	hou.mutation.RemoveEstimateIDs(ids...)
	return hou
}

// RemoveEstimates removes "estimates" edges to Estimate entities.
func (hou *HomeOwnerUpdate) RemoveEstimates(e ...*Estimate) *HomeOwnerUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hou.RemoveEstimateIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (hou *HomeOwnerUpdate) ClearJobs() *HomeOwnerUpdate {
	hou.mutation.ClearJobs()
	return hou
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (hou *HomeOwnerUpdate) RemoveJobIDs(ids ...string) *HomeOwnerUpdate {
	hou.mutation.RemoveJobIDs(ids...)
	return hou
}

// RemoveJobs removes "jobs" edges to Job entities.
func (hou *HomeOwnerUpdate) RemoveJobs(j ...*Job) *HomeOwnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return hou.RemoveJobIDs(ids...)
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (hou *HomeOwnerUpdate) ClearPartner() *HomeOwnerUpdate {
	hou.mutation.ClearPartner()
	return hou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hou *HomeOwnerUpdate) Save(ctx context.Context) (int, error) {
	hou.defaults()
	return withHooks(ctx, hou.sqlSave, hou.mutation, hou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hou *HomeOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := hou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hou *HomeOwnerUpdate) Exec(ctx context.Context) error {
	_, err := hou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hou *HomeOwnerUpdate) ExecX(ctx context.Context) {
	if err := hou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hou *HomeOwnerUpdate) defaults() {
	if _, ok := hou.mutation.UpdatedAt(); !ok {
		v := homeowner.UpdateDefaultUpdatedAt()
		hou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hou *HomeOwnerUpdate) check() error {
	if v, ok := hou.mutation.FirstName(); ok {
		if err := homeowner.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.first_name": %w`, err)}
		}
	}
	if v, ok := hou.mutation.LastName(); ok {
		if err := homeowner.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.last_name": %w`, err)}
		}
	}
	if v, ok := hou.mutation.Phone(); ok {
		if err := homeowner.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.phone": %w`, err)}
		}
	}
	if v, ok := hou.mutation.City(); ok {
		if err := homeowner.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.city": %w`, err)}
		}
	}
	if v, ok := hou.mutation.State(); ok {
		if err := homeowner.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.state": %w`, err)}
		}
	}
	if v, ok := hou.mutation.StateAbbr(); ok {
		if err := homeowner.StateAbbrValidator(v); err != nil {
			return &ValidationError{Name: "state_abbr", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.state_abbr": %w`, err)}
		}
	}
	if v, ok := hou.mutation.Zip(); ok {
		if err := homeowner.ZipValidator(v); err != nil {
			return &ValidationError{Name: "zip", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.zip": %w`, err)}
		}
	}
	if v, ok := hou.mutation.Hash(); ok {
		if err := homeowner.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.hash": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hou *HomeOwnerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HomeOwnerUpdate {
	hou.modifiers = append(hou.modifiers, modifiers...)
	return hou
}

func (hou *HomeOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(homeowner.Table, homeowner.Columns, sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString))
	if ps := hou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hou.mutation.UpdatedAt(); ok {
		_spec.SetField(homeowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hou.mutation.FirstName(); ok {
		_spec.SetField(homeowner.FieldFirstName, field.TypeString, value)
	}
	if value, ok := hou.mutation.LastName(); ok {
		_spec.SetField(homeowner.FieldLastName, field.TypeString, value)
	}
	if value, ok := hou.mutation.Email(); ok {
		_spec.SetField(homeowner.FieldEmail, field.TypeString, value)
	}
	if hou.mutation.EmailCleared() {
		_spec.ClearField(homeowner.FieldEmail, field.TypeString)
	}
	if value, ok := hou.mutation.Phone(); ok {
		_spec.SetField(homeowner.FieldPhone, field.TypeString, value)
	}
	if hou.mutation.PhoneCleared() {
		_spec.ClearField(homeowner.FieldPhone, field.TypeString)
	}
	if value, ok := hou.mutation.StreetNumber(); ok {
		_spec.SetField(homeowner.FieldStreetNumber, field.TypeString, value)
	}
	if value, ok := hou.mutation.StreetName(); ok {
		_spec.SetField(homeowner.FieldStreetName, field.TypeString, value)
	}
	if value, ok := hou.mutation.City(); ok {
		_spec.SetField(homeowner.FieldCity, field.TypeString, value)
	}
	if value, ok := hou.mutation.State(); ok {
		_spec.SetField(homeowner.FieldState, field.TypeString, value)
	}
	if value, ok := hou.mutation.StateAbbr(); ok {
		_spec.SetField(homeowner.FieldStateAbbr, field.TypeString, value)
	}
	if hou.mutation.StateAbbrCleared() {
		_spec.ClearField(homeowner.FieldStateAbbr, field.TypeString)
	}
	if value, ok := hou.mutation.Zip(); ok {
		_spec.SetField(homeowner.FieldZip, field.TypeString, value)
	}
	if value, ok := hou.mutation.FormattedAddress(); ok {
		_spec.SetField(homeowner.FieldFormattedAddress, field.TypeString, value)
	}
	if hou.mutation.FormattedAddressCleared() {
		_spec.ClearField(homeowner.FieldFormattedAddress, field.TypeString)
	}
	if value, ok := hou.mutation.Latitude(); ok {
		_spec.SetField(homeowner.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := hou.mutation.AddedLatitude(); ok {
		_spec.AddField(homeowner.FieldLatitude, field.TypeFloat64, value)
	}
	if hou.mutation.LatitudeCleared() {
		_spec.ClearField(homeowner.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := hou.mutation.Longitude(); ok {
		_spec.SetField(homeowner.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := hou.mutation.AddedLongitude(); ok {
		_spec.AddField(homeowner.FieldLongitude, field.TypeFloat64, value)
	}
	if hou.mutation.LongitudeCleared() {
		_spec.ClearField(homeowner.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := hou.mutation.Hash(); ok {
		_spec.SetField(homeowner.FieldHash, field.TypeString, value)
	}
	if hou.mutation.HashCleared() {
		_spec.ClearField(homeowner.FieldHash, field.TypeString)
	}
	if hou.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hou.mutation.RemovedEstimatesIDs(); len(nodes) > 0 && !hou.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hou.mutation.EstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hou.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hou.mutation.RemovedJobsIDs(); len(nodes) > 0 && !hou.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hou.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hou.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   homeowner.PartnerTable,
			Columns: []string{homeowner.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hou.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   homeowner.PartnerTable,
			Columns: []string{homeowner.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(hou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, hou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{homeowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hou.mutation.done = true
	return n, nil
}

// HomeOwnerUpdateOne is the builder for updating a single HomeOwner entity.
type HomeOwnerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *HomeOwnerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (houo *HomeOwnerUpdateOne) SetUpdatedAt(t time.Time) *HomeOwnerUpdateOne {
	houo.mutation.SetUpdatedAt(t)
	return houo
}

// SetFirstName sets the "first_name" field.
func (houo *HomeOwnerUpdateOne) SetFirstName(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetFirstName(s)
	return houo
}

// SetLastName sets the "last_name" field.
func (houo *HomeOwnerUpdateOne) SetLastName(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetLastName(s)
	return houo
}

// SetEmail sets the "email" field.
func (houo *HomeOwnerUpdateOne) SetEmail(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetEmail(s)
	return houo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillableEmail(s *string) *HomeOwnerUpdateOne {
	if s != nil {
		houo.SetEmail(*s)
	}
	return houo
}

// ClearEmail clears the value of the "email" field.
func (houo *HomeOwnerUpdateOne) ClearEmail() *HomeOwnerUpdateOne {
	houo.mutation.ClearEmail()
	return houo
}

// SetPhone sets the "phone" field.
func (houo *HomeOwnerUpdateOne) SetPhone(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetPhone(s)
	return houo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillablePhone(s *string) *HomeOwnerUpdateOne {
	if s != nil {
		houo.SetPhone(*s)
	}
	return houo
}

// ClearPhone clears the value of the "phone" field.
func (houo *HomeOwnerUpdateOne) ClearPhone() *HomeOwnerUpdateOne {
	houo.mutation.ClearPhone()
	return houo
}

// SetStreetNumber sets the "street_number" field.
func (houo *HomeOwnerUpdateOne) SetStreetNumber(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetStreetNumber(s)
	return houo
}

// SetStreetName sets the "street_name" field.
func (houo *HomeOwnerUpdateOne) SetStreetName(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetStreetName(s)
	return houo
}

// SetCity sets the "city" field.
func (houo *HomeOwnerUpdateOne) SetCity(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetCity(s)
	return houo
}

// SetState sets the "state" field.
func (houo *HomeOwnerUpdateOne) SetState(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetState(s)
	return houo
}

// SetStateAbbr sets the "state_abbr" field.
func (houo *HomeOwnerUpdateOne) SetStateAbbr(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetStateAbbr(s)
	return houo
}

// SetNillableStateAbbr sets the "state_abbr" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillableStateAbbr(s *string) *HomeOwnerUpdateOne {
	if s != nil {
		houo.SetStateAbbr(*s)
	}
	return houo
}

// ClearStateAbbr clears the value of the "state_abbr" field.
func (houo *HomeOwnerUpdateOne) ClearStateAbbr() *HomeOwnerUpdateOne {
	houo.mutation.ClearStateAbbr()
	return houo
}

// SetZip sets the "zip" field.
func (houo *HomeOwnerUpdateOne) SetZip(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetZip(s)
	return houo
}

// SetFormattedAddress sets the "formatted_address" field.
func (houo *HomeOwnerUpdateOne) SetFormattedAddress(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetFormattedAddress(s)
	return houo
}

// SetNillableFormattedAddress sets the "formatted_address" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillableFormattedAddress(s *string) *HomeOwnerUpdateOne {
	if s != nil {
		houo.SetFormattedAddress(*s)
	}
	return houo
}

// ClearFormattedAddress clears the value of the "formatted_address" field.
func (houo *HomeOwnerUpdateOne) ClearFormattedAddress() *HomeOwnerUpdateOne {
	houo.mutation.ClearFormattedAddress()
	return houo
}

// SetLatitude sets the "latitude" field.
func (houo *HomeOwnerUpdateOne) SetLatitude(f float64) *HomeOwnerUpdateOne {
	houo.mutation.ResetLatitude()
	houo.mutation.SetLatitude(f)
	return houo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillableLatitude(f *float64) *HomeOwnerUpdateOne {
	if f != nil {
		houo.SetLatitude(*f)
	}
	return houo
}

// AddLatitude adds f to the "latitude" field.
func (houo *HomeOwnerUpdateOne) AddLatitude(f float64) *HomeOwnerUpdateOne {
	houo.mutation.AddLatitude(f)
	return houo
}

// ClearLatitude clears the value of the "latitude" field.
func (houo *HomeOwnerUpdateOne) ClearLatitude() *HomeOwnerUpdateOne {
	houo.mutation.ClearLatitude()
	return houo
}

// SetLongitude sets the "longitude" field.
func (houo *HomeOwnerUpdateOne) SetLongitude(f float64) *HomeOwnerUpdateOne {
	houo.mutation.ResetLongitude()
	houo.mutation.SetLongitude(f)
	return houo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillableLongitude(f *float64) *HomeOwnerUpdateOne {
	if f != nil {
		houo.SetLongitude(*f)
	}
	return houo
}

// AddLongitude adds f to the "longitude" field.
func (houo *HomeOwnerUpdateOne) AddLongitude(f float64) *HomeOwnerUpdateOne {
	houo.mutation.AddLongitude(f)
	return houo
}

// ClearLongitude clears the value of the "longitude" field.
func (houo *HomeOwnerUpdateOne) ClearLongitude() *HomeOwnerUpdateOne {
	houo.mutation.ClearLongitude()
	return houo
}

// SetHash sets the "hash" field.
func (houo *HomeOwnerUpdateOne) SetHash(s string) *HomeOwnerUpdateOne {
	houo.mutation.SetHash(s)
	return houo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillableHash(s *string) *HomeOwnerUpdateOne {
	if s != nil {
		houo.SetHash(*s)
	}
	return houo
}

// ClearHash clears the value of the "hash" field.
func (houo *HomeOwnerUpdateOne) ClearHash() *HomeOwnerUpdateOne {
	houo.mutation.ClearHash()
	return houo
}

// AddEstimateIDs adds the "estimates" edge to the Estimate entity by IDs.
func (houo *HomeOwnerUpdateOne) AddEstimateIDs(ids ...string) *HomeOwnerUpdateOne {
	houo.mutation.AddEstimateIDs(ids...)
	return houo
}

// AddEstimates adds the "estimates" edges to the Estimate entity.
func (houo *HomeOwnerUpdateOne) AddEstimates(e ...*Estimate) *HomeOwnerUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return houo.AddEstimateIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (houo *HomeOwnerUpdateOne) AddJobIDs(ids ...string) *HomeOwnerUpdateOne {
	houo.mutation.AddJobIDs(ids...)
	return houo
}

// AddJobs adds the "jobs" edges to the Job entity.
func (houo *HomeOwnerUpdateOne) AddJobs(j ...*Job) *HomeOwnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return houo.AddJobIDs(ids...)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (houo *HomeOwnerUpdateOne) SetPartnerID(id string) *HomeOwnerUpdateOne {
	houo.mutation.SetPartnerID(id)
	return houo
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (houo *HomeOwnerUpdateOne) SetNillablePartnerID(id *string) *HomeOwnerUpdateOne {
	if id != nil {
		houo = houo.SetPartnerID(*id)
	}
	return houo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (houo *HomeOwnerUpdateOne) SetPartner(p *Partner) *HomeOwnerUpdateOne {
	return houo.SetPartnerID(p.ID)
}

// Mutation returns the HomeOwnerMutation object of the builder.
func (houo *HomeOwnerUpdateOne) Mutation() *HomeOwnerMutation {
	return houo.mutation
}

// ClearEstimates clears all "estimates" edges to the Estimate entity.
func (houo *HomeOwnerUpdateOne) ClearEstimates() *HomeOwnerUpdateOne {
	houo.mutation.ClearEstimates()
	return houo
}

// RemoveEstimateIDs removes the "estimates" edge to Estimate entities by IDs.
func (houo *HomeOwnerUpdateOne) RemoveEstimateIDs(ids ...string) *HomeOwnerUpdateOne {
	houo.mutation.RemoveEstimateIDs(ids...)
	return houo
}

// RemoveEstimates removes "estimates" edges to Estimate entities.
func (houo *HomeOwnerUpdateOne) RemoveEstimates(e ...*Estimate) *HomeOwnerUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return houo.RemoveEstimateIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (houo *HomeOwnerUpdateOne) ClearJobs() *HomeOwnerUpdateOne {
	houo.mutation.ClearJobs()
	return houo
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (houo *HomeOwnerUpdateOne) RemoveJobIDs(ids ...string) *HomeOwnerUpdateOne {
	houo.mutation.RemoveJobIDs(ids...)
	return houo
}

// RemoveJobs removes "jobs" edges to Job entities.
func (houo *HomeOwnerUpdateOne) RemoveJobs(j ...*Job) *HomeOwnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return houo.RemoveJobIDs(ids...)
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (houo *HomeOwnerUpdateOne) ClearPartner() *HomeOwnerUpdateOne {
	houo.mutation.ClearPartner()
	return houo
}

// Where appends a list predicates to the HomeOwnerUpdate builder.
func (houo *HomeOwnerUpdateOne) Where(ps ...predicate.HomeOwner) *HomeOwnerUpdateOne {
	houo.mutation.Where(ps...)
	return houo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (houo *HomeOwnerUpdateOne) Select(field string, fields ...string) *HomeOwnerUpdateOne {
	houo.fields = append([]string{field}, fields...)
	return houo
}

// Save executes the query and returns the updated HomeOwner entity.
func (houo *HomeOwnerUpdateOne) Save(ctx context.Context) (*HomeOwner, error) {
	houo.defaults()
	return withHooks(ctx, houo.sqlSave, houo.mutation, houo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (houo *HomeOwnerUpdateOne) SaveX(ctx context.Context) *HomeOwner {
	node, err := houo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (houo *HomeOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := houo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (houo *HomeOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := houo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (houo *HomeOwnerUpdateOne) defaults() {
	if _, ok := houo.mutation.UpdatedAt(); !ok {
		v := homeowner.UpdateDefaultUpdatedAt()
		houo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (houo *HomeOwnerUpdateOne) check() error {
	if v, ok := houo.mutation.FirstName(); ok {
		if err := homeowner.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.first_name": %w`, err)}
		}
	}
	if v, ok := houo.mutation.LastName(); ok {
		if err := homeowner.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.last_name": %w`, err)}
		}
	}
	if v, ok := houo.mutation.Phone(); ok {
		if err := homeowner.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.phone": %w`, err)}
		}
	}
	if v, ok := houo.mutation.City(); ok {
		if err := homeowner.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.city": %w`, err)}
		}
	}
	if v, ok := houo.mutation.State(); ok {
		if err := homeowner.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.state": %w`, err)}
		}
	}
	if v, ok := houo.mutation.StateAbbr(); ok {
		if err := homeowner.StateAbbrValidator(v); err != nil {
			return &ValidationError{Name: "state_abbr", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.state_abbr": %w`, err)}
		}
	}
	if v, ok := houo.mutation.Zip(); ok {
		if err := homeowner.ZipValidator(v); err != nil {
			return &ValidationError{Name: "zip", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.zip": %w`, err)}
		}
	}
	if v, ok := houo.mutation.Hash(); ok {
		if err := homeowner.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.hash": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (houo *HomeOwnerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HomeOwnerUpdateOne {
	houo.modifiers = append(houo.modifiers, modifiers...)
	return houo
}

func (houo *HomeOwnerUpdateOne) sqlSave(ctx context.Context) (_node *HomeOwner, err error) {
	if err := houo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(homeowner.Table, homeowner.Columns, sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString))
	id, ok := houo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HomeOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := houo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, homeowner.FieldID)
		for _, f := range fields {
			if !homeowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != homeowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := houo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := houo.mutation.UpdatedAt(); ok {
		_spec.SetField(homeowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := houo.mutation.FirstName(); ok {
		_spec.SetField(homeowner.FieldFirstName, field.TypeString, value)
	}
	if value, ok := houo.mutation.LastName(); ok {
		_spec.SetField(homeowner.FieldLastName, field.TypeString, value)
	}
	if value, ok := houo.mutation.Email(); ok {
		_spec.SetField(homeowner.FieldEmail, field.TypeString, value)
	}
	if houo.mutation.EmailCleared() {
		_spec.ClearField(homeowner.FieldEmail, field.TypeString)
	}
	if value, ok := houo.mutation.Phone(); ok {
		_spec.SetField(homeowner.FieldPhone, field.TypeString, value)
	}
	if houo.mutation.PhoneCleared() {
		_spec.ClearField(homeowner.FieldPhone, field.TypeString)
	}
	if value, ok := houo.mutation.StreetNumber(); ok {
		_spec.SetField(homeowner.FieldStreetNumber, field.TypeString, value)
	}
	if value, ok := houo.mutation.StreetName(); ok {
		_spec.SetField(homeowner.FieldStreetName, field.TypeString, value)
	}
	if value, ok := houo.mutation.City(); ok {
		_spec.SetField(homeowner.FieldCity, field.TypeString, value)
	}
	if value, ok := houo.mutation.State(); ok {
		_spec.SetField(homeowner.FieldState, field.TypeString, value)
	}
	if value, ok := houo.mutation.StateAbbr(); ok {
		_spec.SetField(homeowner.FieldStateAbbr, field.TypeString, value)
	}
	if houo.mutation.StateAbbrCleared() {
		_spec.ClearField(homeowner.FieldStateAbbr, field.TypeString)
	}
	if value, ok := houo.mutation.Zip(); ok {
		_spec.SetField(homeowner.FieldZip, field.TypeString, value)
	}
	if value, ok := houo.mutation.FormattedAddress(); ok {
		_spec.SetField(homeowner.FieldFormattedAddress, field.TypeString, value)
	}
	if houo.mutation.FormattedAddressCleared() {
		_spec.ClearField(homeowner.FieldFormattedAddress, field.TypeString)
	}
	if value, ok := houo.mutation.Latitude(); ok {
		_spec.SetField(homeowner.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := houo.mutation.AddedLatitude(); ok {
		_spec.AddField(homeowner.FieldLatitude, field.TypeFloat64, value)
	}
	if houo.mutation.LatitudeCleared() {
		_spec.ClearField(homeowner.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := houo.mutation.Longitude(); ok {
		_spec.SetField(homeowner.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := houo.mutation.AddedLongitude(); ok {
		_spec.AddField(homeowner.FieldLongitude, field.TypeFloat64, value)
	}
	if houo.mutation.LongitudeCleared() {
		_spec.ClearField(homeowner.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := houo.mutation.Hash(); ok {
		_spec.SetField(homeowner.FieldHash, field.TypeString, value)
	}
	if houo.mutation.HashCleared() {
		_spec.ClearField(homeowner.FieldHash, field.TypeString)
	}
	if houo.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := houo.mutation.RemovedEstimatesIDs(); len(nodes) > 0 && !houo.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := houo.mutation.EstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if houo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := houo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !houo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := houo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if houo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   homeowner.PartnerTable,
			Columns: []string{homeowner.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := houo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   homeowner.PartnerTable,
			Columns: []string{homeowner.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(houo.modifiers...)
	_node = &HomeOwner{config: houo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, houo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{homeowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	houo.mutation.done = true
	return _node, nil
}

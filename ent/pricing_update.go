// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/postalcode"
	"roofix/ent/predicate"
	"roofix/ent/pricing"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PricingUpdate is the builder for updating Pricing entities.
type PricingUpdate struct {
	config
	hooks     []Hook
	mutation  *PricingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PricingUpdate builder.
func (pu *PricingUpdate) Where(ps ...predicate.Pricing) *PricingUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PricingUpdate) SetUpdatedAt(t time.Time) *PricingUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetPostalCountry sets the "postal_country" field.
func (pu *PricingUpdate) SetPostalCountry(s string) *PricingUpdate {
	pu.mutation.SetPostalCountry(s)
	return pu
}

// SetPostalCode sets the "postal_code" field.
func (pu *PricingUpdate) SetPostalCode(s string) *PricingUpdate {
	pu.mutation.SetPostalCode(s)
	return pu
}

// SetProductID sets the "product_id" field.
func (pu *PricingUpdate) SetProductID(u uint8) *PricingUpdate {
	pu.mutation.ResetProductID()
	pu.mutation.SetProductID(u)
	return pu
}

// AddProductID adds u to the "product_id" field.
func (pu *PricingUpdate) AddProductID(u int8) *PricingUpdate {
	pu.mutation.AddProductID(u)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PricingUpdate) SetDescription(s string) *PricingUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PricingUpdate) SetNillableDescription(s *string) *PricingUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PricingUpdate) ClearDescription() *PricingUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPrice sets the "price" field.
func (pu *PricingUpdate) SetPrice(f float64) *PricingUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *PricingUpdate) AddPrice(f float64) *PricingUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetPricePer sets the "price_per" field.
func (pu *PricingUpdate) SetPricePer(s string) *PricingUpdate {
	pu.mutation.SetPricePer(s)
	return pu
}

// SetPostalID sets the "postal" edge to the PostalCode entity by ID.
func (pu *PricingUpdate) SetPostalID(id string) *PricingUpdate {
	pu.mutation.SetPostalID(id)
	return pu
}

// SetPostal sets the "postal" edge to the PostalCode entity.
func (pu *PricingUpdate) SetPostal(p *PostalCode) *PricingUpdate {
	return pu.SetPostalID(p.ID)
}

// Mutation returns the PricingMutation object of the builder.
func (pu *PricingUpdate) Mutation() *PricingMutation {
	return pu.mutation
}

// ClearPostal clears the "postal" edge to the PostalCode entity.
func (pu *PricingUpdate) ClearPostal() *PricingUpdate {
	pu.mutation.ClearPostal()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PricingUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PricingUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PricingUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PricingUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PricingUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := pricing.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PricingUpdate) check() error {
	if v, ok := pu.mutation.PostalCountry(); ok {
		if err := pricing.PostalCountryValidator(v); err != nil {
			return &ValidationError{Name: "postal_country", err: fmt.Errorf(`ent: validator failed for field "Pricing.postal_country": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PostalCode(); ok {
		if err := pricing.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Pricing.postal_code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PricePer(); ok {
		if err := pricing.PricePerValidator(v); err != nil {
			return &ValidationError{Name: "price_per", err: fmt.Errorf(`ent: validator failed for field "Pricing.price_per": %w`, err)}
		}
	}
	if _, ok := pu.mutation.PostalID(); pu.mutation.PostalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Pricing.postal"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PricingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PricingUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PricingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pricing.Table, pricing.Columns, sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(pricing.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.PostalCountry(); ok {
		_spec.SetField(pricing.FieldPostalCountry, field.TypeString, value)
	}
	if value, ok := pu.mutation.PostalCode(); ok {
		_spec.SetField(pricing.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductID(); ok {
		_spec.SetField(pricing.FieldProductID, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedProductID(); ok {
		_spec.AddField(pricing.FieldProductID, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(pricing.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(pricing.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(pricing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(pricing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.PricePer(); ok {
		_spec.SetField(pricing.FieldPricePer, field.TypeString, value)
	}
	if pu.mutation.PostalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pricing.PostalTable,
			Columns: []string{pricing.PostalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pricing.PostalTable,
			Columns: []string{pricing.PostalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pricing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PricingUpdateOne is the builder for updating a single Pricing entity.
type PricingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PricingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PricingUpdateOne) SetUpdatedAt(t time.Time) *PricingUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetPostalCountry sets the "postal_country" field.
func (puo *PricingUpdateOne) SetPostalCountry(s string) *PricingUpdateOne {
	puo.mutation.SetPostalCountry(s)
	return puo
}

// SetPostalCode sets the "postal_code" field.
func (puo *PricingUpdateOne) SetPostalCode(s string) *PricingUpdateOne {
	puo.mutation.SetPostalCode(s)
	return puo
}

// SetProductID sets the "product_id" field.
func (puo *PricingUpdateOne) SetProductID(u uint8) *PricingUpdateOne {
	puo.mutation.ResetProductID()
	puo.mutation.SetProductID(u)
	return puo
}

// AddProductID adds u to the "product_id" field.
func (puo *PricingUpdateOne) AddProductID(u int8) *PricingUpdateOne {
	puo.mutation.AddProductID(u)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PricingUpdateOne) SetDescription(s string) *PricingUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PricingUpdateOne) SetNillableDescription(s *string) *PricingUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PricingUpdateOne) ClearDescription() *PricingUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPrice sets the "price" field.
func (puo *PricingUpdateOne) SetPrice(f float64) *PricingUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *PricingUpdateOne) AddPrice(f float64) *PricingUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetPricePer sets the "price_per" field.
func (puo *PricingUpdateOne) SetPricePer(s string) *PricingUpdateOne {
	puo.mutation.SetPricePer(s)
	return puo
}

// SetPostalID sets the "postal" edge to the PostalCode entity by ID.
func (puo *PricingUpdateOne) SetPostalID(id string) *PricingUpdateOne {
	puo.mutation.SetPostalID(id)
	return puo
}

// SetPostal sets the "postal" edge to the PostalCode entity.
func (puo *PricingUpdateOne) SetPostal(p *PostalCode) *PricingUpdateOne {
	return puo.SetPostalID(p.ID)
}

// Mutation returns the PricingMutation object of the builder.
func (puo *PricingUpdateOne) Mutation() *PricingMutation {
	return puo.mutation
}

// ClearPostal clears the "postal" edge to the PostalCode entity.
func (puo *PricingUpdateOne) ClearPostal() *PricingUpdateOne {
	puo.mutation.ClearPostal()
	return puo
}

// Where appends a list predicates to the PricingUpdate builder.
func (puo *PricingUpdateOne) Where(ps ...predicate.Pricing) *PricingUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PricingUpdateOne) Select(field string, fields ...string) *PricingUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pricing entity.
func (puo *PricingUpdateOne) Save(ctx context.Context) (*Pricing, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PricingUpdateOne) SaveX(ctx context.Context) *Pricing {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PricingUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PricingUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PricingUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := pricing.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PricingUpdateOne) check() error {
	if v, ok := puo.mutation.PostalCountry(); ok {
		if err := pricing.PostalCountryValidator(v); err != nil {
			return &ValidationError{Name: "postal_country", err: fmt.Errorf(`ent: validator failed for field "Pricing.postal_country": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PostalCode(); ok {
		if err := pricing.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Pricing.postal_code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PricePer(); ok {
		if err := pricing.PricePerValidator(v); err != nil {
			return &ValidationError{Name: "price_per", err: fmt.Errorf(`ent: validator failed for field "Pricing.price_per": %w`, err)}
		}
	}
	if _, ok := puo.mutation.PostalID(); puo.mutation.PostalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Pricing.postal"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PricingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PricingUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PricingUpdateOne) sqlSave(ctx context.Context) (_node *Pricing, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pricing.Table, pricing.Columns, sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pricing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pricing.FieldID)
		for _, f := range fields {
			if !pricing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pricing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(pricing.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.PostalCountry(); ok {
		_spec.SetField(pricing.FieldPostalCountry, field.TypeString, value)
	}
	if value, ok := puo.mutation.PostalCode(); ok {
		_spec.SetField(pricing.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductID(); ok {
		_spec.SetField(pricing.FieldProductID, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedProductID(); ok {
		_spec.AddField(pricing.FieldProductID, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(pricing.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(pricing.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(pricing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(pricing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.PricePer(); ok {
		_spec.SetField(pricing.FieldPricePer, field.TypeString, value)
	}
	if puo.mutation.PostalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pricing.PostalTable,
			Columns: []string{pricing.PostalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pricing.PostalTable,
			Columns: []string{pricing.PostalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Pricing{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pricing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

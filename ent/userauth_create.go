// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/user"
	"roofix/ent/userauth"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAuthCreate is the builder for creating a UserAuth entity.
type UserAuthCreate struct {
	config
	mutation *UserAuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProviderID sets the "provider_id" field.
func (uac *UserAuthCreate) SetProviderID(u uint8) *UserAuthCreate {
	uac.mutation.SetProviderID(u)
	return uac
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableProviderID(u *uint8) *UserAuthCreate {
	if u != nil {
		uac.SetProviderID(*u)
	}
	return uac
}

// SetCreatedAt sets the "created_at" field.
func (uac *UserAuthCreate) SetCreatedAt(t time.Time) *UserAuthCreate {
	uac.mutation.SetCreatedAt(t)
	return uac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableCreatedAt(t *time.Time) *UserAuthCreate {
	if t != nil {
		uac.SetCreatedAt(*t)
	}
	return uac
}

// SetID sets the "id" field.
func (uac *UserAuthCreate) SetID(s string) *UserAuthCreate {
	uac.mutation.SetID(s)
	return uac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uac *UserAuthCreate) SetUserID(id string) *UserAuthCreate {
	uac.mutation.SetUserID(id)
	return uac
}

// SetUser sets the "user" edge to the User entity.
func (uac *UserAuthCreate) SetUser(u *User) *UserAuthCreate {
	return uac.SetUserID(u.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (uac *UserAuthCreate) Mutation() *UserAuthMutation {
	return uac.mutation
}

// Save creates the UserAuth in the database.
func (uac *UserAuthCreate) Save(ctx context.Context) (*UserAuth, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAuthCreate) SaveX(ctx context.Context) *UserAuth {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAuthCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAuthCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAuthCreate) defaults() {
	if _, ok := uac.mutation.ProviderID(); !ok {
		v := userauth.DefaultProviderID
		uac.mutation.SetProviderID(v)
	}
	if _, ok := uac.mutation.CreatedAt(); !ok {
		v := userauth.DefaultCreatedAt()
		uac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAuthCreate) check() error {
	if _, ok := uac.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "UserAuth.provider_id"`)}
	}
	if _, ok := uac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserAuth.created_at"`)}
	}
	if v, ok := uac.mutation.ID(); ok {
		if err := userauth.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserAuth.id": %w`, err)}
		}
	}
	if _, ok := uac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserAuth.user"`)}
	}
	return nil
}

func (uac *UserAuthCreate) sqlSave(ctx context.Context) (*UserAuth, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserAuth.ID type: %T", _spec.ID.Value)
		}
	}
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAuthCreate) createSpec() (*UserAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAuth{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(userauth.Table, sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeString))
	)
	_spec.OnConflict = uac.conflict
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uac.mutation.ProviderID(); ok {
		_spec.SetField(userauth.FieldProviderID, field.TypeUint8, value)
		_node.ProviderID = value
	}
	if value, ok := uac.mutation.CreatedAt(); ok {
		_spec.SetField(userauth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := uac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAuth.Create().
//		SetProviderID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAuthUpsert) {
//			SetProviderID(v+v).
//		}).
//		Exec(ctx)
func (uac *UserAuthCreate) OnConflict(opts ...sql.ConflictOption) *UserAuthUpsertOne {
	uac.conflict = opts
	return &UserAuthUpsertOne{
		create: uac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uac *UserAuthCreate) OnConflictColumns(columns ...string) *UserAuthUpsertOne {
	uac.conflict = append(uac.conflict, sql.ConflictColumns(columns...))
	return &UserAuthUpsertOne{
		create: uac,
	}
}

type (
	// UserAuthUpsertOne is the builder for "upsert"-ing
	//  one UserAuth node.
	UserAuthUpsertOne struct {
		create *UserAuthCreate
	}

	// UserAuthUpsert is the "OnConflict" setter.
	UserAuthUpsert struct {
		*sql.UpdateSet
	}
)

// SetProviderID sets the "provider_id" field.
func (u *UserAuthUpsert) SetProviderID(v uint8) *UserAuthUpsert {
	u.Set(userauth.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *UserAuthUpsert) UpdateProviderID() *UserAuthUpsert {
	u.SetExcluded(userauth.FieldProviderID)
	return u
}

// AddProviderID adds v to the "provider_id" field.
func (u *UserAuthUpsert) AddProviderID(v uint8) *UserAuthUpsert {
	u.Add(userauth.FieldProviderID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userauth.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserAuthUpsertOne) UpdateNewValues() *UserAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userauth.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userauth.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAuth.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserAuthUpsertOne) Ignore() *UserAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAuthUpsertOne) DoNothing() *UserAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAuthCreate.OnConflict
// documentation for more info.
func (u *UserAuthUpsertOne) Update(set func(*UserAuthUpsert)) *UserAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *UserAuthUpsertOne) SetProviderID(v uint8) *UserAuthUpsertOne {
	return u.Update(func(s *UserAuthUpsert) {
		s.SetProviderID(v)
	})
}

// AddProviderID adds v to the "provider_id" field.
func (u *UserAuthUpsertOne) AddProviderID(v uint8) *UserAuthUpsertOne {
	return u.Update(func(s *UserAuthUpsert) {
		s.AddProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *UserAuthUpsertOne) UpdateProviderID() *UserAuthUpsertOne {
	return u.Update(func(s *UserAuthUpsert) {
		s.UpdateProviderID()
	})
}

// Exec executes the query.
func (u *UserAuthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAuthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserAuthUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserAuthUpsertOne.ID is not supported by MySQL driver. Use UserAuthUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserAuthUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserAuthCreateBulk is the builder for creating many UserAuth entities in bulk.
type UserAuthCreateBulk struct {
	config
	builders []*UserAuthCreate
	conflict []sql.ConflictOption
}

// Save creates the UserAuth entities in the database.
func (uacb *UserAuthCreateBulk) Save(ctx context.Context) ([]*UserAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAuth, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAuthCreateBulk) SaveX(ctx context.Context) []*UserAuth {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAuthCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAuth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAuthUpsert) {
//			SetProviderID(v+v).
//		}).
//		Exec(ctx)
func (uacb *UserAuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserAuthUpsertBulk {
	uacb.conflict = opts
	return &UserAuthUpsertBulk{
		create: uacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uacb *UserAuthCreateBulk) OnConflictColumns(columns ...string) *UserAuthUpsertBulk {
	uacb.conflict = append(uacb.conflict, sql.ConflictColumns(columns...))
	return &UserAuthUpsertBulk{
		create: uacb,
	}
}

// UserAuthUpsertBulk is the builder for "upsert"-ing
// a bulk of UserAuth nodes.
type UserAuthUpsertBulk struct {
	create *UserAuthCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userauth.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserAuthUpsertBulk) UpdateNewValues() *UserAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userauth.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userauth.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAuth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserAuthUpsertBulk) Ignore() *UserAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAuthUpsertBulk) DoNothing() *UserAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAuthCreateBulk.OnConflict
// documentation for more info.
func (u *UserAuthUpsertBulk) Update(set func(*UserAuthUpsert)) *UserAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *UserAuthUpsertBulk) SetProviderID(v uint8) *UserAuthUpsertBulk {
	return u.Update(func(s *UserAuthUpsert) {
		s.SetProviderID(v)
	})
}

// AddProviderID adds v to the "provider_id" field.
func (u *UserAuthUpsertBulk) AddProviderID(v uint8) *UserAuthUpsertBulk {
	return u.Update(func(s *UserAuthUpsert) {
		s.AddProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *UserAuthUpsertBulk) UpdateProviderID() *UserAuthUpsertBulk {
	return u.Update(func(s *UserAuthUpsert) {
		s.UpdateProviderID()
	})
}

// Exec executes the query.
func (u *UserAuthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserAuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAuthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

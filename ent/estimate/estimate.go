// Code generated by ent, DO NOT EDIT.

package estimate

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the estimate type in the database.
	Label = "estimate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRegionID holds the string denoting the region_id field in the database.
	FieldRegionID = "region_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCurrentMaterial holds the string denoting the current_material field in the database.
	FieldCurrentMaterial = "current_material"
	// FieldNewRoofingMaterial holds the string denoting the new_roofing_material field in the database.
	FieldNewRoofingMaterial = "new_roofing_material"
	// FieldLowSlope holds the string denoting the lowslope field in the database.
	FieldLowSlope = "low_slope"
	// FieldCurrentMaterialLowSlope holds the string denoting the current_material_low_slope field in the database.
	FieldCurrentMaterialLowSlope = "current_material_low_slope"
	// FieldNewRoofingMaterialLowSlope holds the string denoting the new_roofing_material_low_slope field in the database.
	FieldNewRoofingMaterialLowSlope = "new_roofing_material_low_slope"
	// FieldRedeck holds the string denoting the redeck field in the database.
	FieldRedeck = "redeck"
	// FieldLayers holds the string denoting the layers field in the database.
	FieldLayers = "layers"
	// FieldLayer2Material holds the string denoting the layer2_material field in the database.
	FieldLayer2Material = "layer2_material"
	// FieldLayer3Material holds the string denoting the layer3_material field in the database.
	FieldLayer3Material = "layer3_material"
	// FieldPartialPercentage holds the string denoting the partial_percentage field in the database.
	FieldPartialPercentage = "partial_percentage"
	// FieldMaterialMappingNote holds the string denoting the material_mapping_note field in the database.
	FieldMaterialMappingNote = "material_mapping_note"
	// FieldMeasureType holds the string denoting the measure_type field in the database.
	FieldMeasureType = "measure_type"
	// FieldExtraChargeType holds the string denoting the extra_charge_type field in the database.
	FieldExtraChargeType = "extra_charge_type"
	// FieldExtraCharges holds the string denoting the extra_charges field in the database.
	FieldExtraCharges = "extra_charges"
	// FieldExtraChargeCond holds the string denoting the extra_charge_cond field in the database.
	FieldExtraChargeCond = "extra_charge_cond"
	// FieldExtraChargeNote holds the string denoting the extra_charge_note field in the database.
	FieldExtraChargeNote = "extra_charge_note"
	// FieldEstimator holds the string denoting the estimator field in the database.
	FieldEstimator = "estimator"
	// FieldEstimatorOrderID holds the string denoting the estimator_order_id field in the database.
	FieldEstimatorOrderID = "estimator_order_id"
	// FieldEstimatorReportID holds the string denoting the estimator_report_id field in the database.
	FieldEstimatorReportID = "estimator_report_id"
	// FieldTotalSquares holds the string denoting the total_squares field in the database.
	FieldTotalSquares = "total_squares"
	// FieldPrimaryPitch holds the string denoting the primary_pitch field in the database.
	FieldPrimaryPitch = "primary_pitch"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPriceSummary holds the string denoting the price_summary field in the database.
	FieldPriceSummary = "price_summary"
	// FieldBounds holds the string denoting the bounds field in the database.
	FieldBounds = "bounds"
	// FieldEstimatorRawResponse holds the string denoting the estimator_raw_response field in the database.
	FieldEstimatorRawResponse = "estimator_raw_response"
	// FieldOverride holds the string denoting the override field in the database.
	FieldOverride = "override"
	// FieldOverrideTotalSquares holds the string denoting the override_total_squares field in the database.
	FieldOverrideTotalSquares = "override_total_squares"
	// FieldOverridePrimaryPitch holds the string denoting the override_primary_pitch field in the database.
	FieldOverridePrimaryPitch = "override_primary_pitch"
	// FieldOverridePrice holds the string denoting the override_price field in the database.
	FieldOverridePrice = "override_price"
	// FieldOverridePriceSummary holds the string denoting the override_price_summary field in the database.
	FieldOverridePriceSummary = "override_price_summary"
	// FieldCompanyRefID holds the string denoting the company_ref_id field in the database.
	FieldCompanyRefID = "company_ref_id"
	// FieldCompanyRefName holds the string denoting the company_ref_name field in the database.
	FieldCompanyRefName = "company_ref_name"
	// FieldFailureReason holds the string denoting the failure_reason field in the database.
	FieldFailureReason = "failure_reason"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeJobInfo holds the string denoting the job_info edge name in mutations.
	EdgeJobInfo = "job_info"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// EdgeHomeOwner holds the string denoting the home_owner edge name in mutations.
	EdgeHomeOwner = "home_owner"
	// EdgeSalesRep holds the string denoting the sales_rep edge name in mutations.
	EdgeSalesRep = "sales_rep"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeCreatorAPI holds the string denoting the creator_api edge name in mutations.
	EdgeCreatorAPI = "creator_api"
	// EdgePdf holds the string denoting the pdf edge name in mutations.
	EdgePdf = "pdf"
	// Table holds the table name of the estimate in the database.
	Table = "estimates"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "estimate_activities"
	// ActivitiesInverseTable is the table name for the EstimateActivity entity.
	// It exists in this package in order to avoid circular dependency with the "estimateactivity" package.
	ActivitiesInverseTable = "estimate_activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "estimate_id"
	// JobInfoTable is the table that holds the job_info relation/edge.
	JobInfoTable = "jobs"
	// JobInfoInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobInfoInverseTable = "jobs"
	// JobInfoColumn is the table column denoting the job_info relation/edge.
	JobInfoColumn = "estimate_id"
	// PartnerTable is the table that holds the partner relation/edge.
	PartnerTable = "estimates"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
	// PartnerColumn is the table column denoting the partner relation/edge.
	PartnerColumn = "partner_id"
	// HomeOwnerTable is the table that holds the home_owner relation/edge.
	HomeOwnerTable = "estimates"
	// HomeOwnerInverseTable is the table name for the HomeOwner entity.
	// It exists in this package in order to avoid circular dependency with the "homeowner" package.
	HomeOwnerInverseTable = "home_owners"
	// HomeOwnerColumn is the table column denoting the home_owner relation/edge.
	HomeOwnerColumn = "home_owner_id"
	// SalesRepTable is the table that holds the sales_rep relation/edge.
	SalesRepTable = "estimates"
	// SalesRepInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SalesRepInverseTable = "users"
	// SalesRepColumn is the table column denoting the sales_rep relation/edge.
	SalesRepColumn = "sales_rep_id"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "estimates"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// CreatorAPITable is the table that holds the creator_api relation/edge.
	CreatorAPITable = "estimates"
	// CreatorAPIInverseTable is the table name for the ApiUser entity.
	// It exists in this package in order to avoid circular dependency with the "apiuser" package.
	CreatorAPIInverseTable = "api_users"
	// CreatorAPIColumn is the table column denoting the creator_api relation/edge.
	CreatorAPIColumn = "api_user_id"
	// PdfTable is the table that holds the pdf relation/edge.
	PdfTable = "estimates"
	// PdfInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	PdfInverseTable = "documents"
	// PdfColumn is the table column denoting the pdf relation/edge.
	PdfColumn = "pdf_doc_id"
)

// Columns holds all SQL columns for estimate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRegionID,
	FieldStatus,
	FieldCurrentMaterial,
	FieldNewRoofingMaterial,
	FieldLowSlope,
	FieldCurrentMaterialLowSlope,
	FieldNewRoofingMaterialLowSlope,
	FieldRedeck,
	FieldLayers,
	FieldLayer2Material,
	FieldLayer3Material,
	FieldPartialPercentage,
	FieldMaterialMappingNote,
	FieldMeasureType,
	FieldExtraChargeType,
	FieldExtraCharges,
	FieldExtraChargeCond,
	FieldExtraChargeNote,
	FieldEstimator,
	FieldEstimatorOrderID,
	FieldEstimatorReportID,
	FieldTotalSquares,
	FieldPrimaryPitch,
	FieldPrice,
	FieldPriceSummary,
	FieldBounds,
	FieldEstimatorRawResponse,
	FieldOverride,
	FieldOverrideTotalSquares,
	FieldOverridePrimaryPitch,
	FieldOverridePrice,
	FieldOverridePriceSummary,
	FieldCompanyRefID,
	FieldCompanyRefName,
	FieldFailureReason,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "estimates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"api_user_id",
	"pdf_doc_id",
	"home_owner_id",
	"partner_id",
	"creator_id",
	"sales_rep_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRegionID holds the default value on creation for the "region_id" field.
	DefaultRegionID uint8
	// CurrentMaterialValidator is a validator for the "current_material" field. It is called by the builders before save.
	CurrentMaterialValidator func(string) error
	// NewRoofingMaterialValidator is a validator for the "new_roofing_material" field. It is called by the builders before save.
	NewRoofingMaterialValidator func(string) error
	// DefaultLowSlope holds the default value on creation for the "lowSlope" field.
	DefaultLowSlope bool
	// CurrentMaterialLowSlopeValidator is a validator for the "current_material_low_slope" field. It is called by the builders before save.
	CurrentMaterialLowSlopeValidator func(string) error
	// NewRoofingMaterialLowSlopeValidator is a validator for the "new_roofing_material_low_slope" field. It is called by the builders before save.
	NewRoofingMaterialLowSlopeValidator func(string) error
	// DefaultRedeck holds the default value on creation for the "redeck" field.
	DefaultRedeck bool
	// Layer2MaterialValidator is a validator for the "layer2_material" field. It is called by the builders before save.
	Layer2MaterialValidator func(string) error
	// Layer3MaterialValidator is a validator for the "layer3_material" field. It is called by the builders before save.
	Layer3MaterialValidator func(string) error
	// DefaultPartialPercentage holds the default value on creation for the "partial_percentage" field.
	DefaultPartialPercentage float64
	// MaterialMappingNoteValidator is a validator for the "material_mapping_note" field. It is called by the builders before save.
	MaterialMappingNoteValidator func(string) error
	// DefaultExtraCharges holds the default value on creation for the "extra_charges" field.
	DefaultExtraCharges float64
	// DefaultEstimatorOrderID holds the default value on creation for the "estimator_order_id" field.
	DefaultEstimatorOrderID uint
	// DefaultEstimatorReportID holds the default value on creation for the "estimator_report_id" field.
	DefaultEstimatorReportID uint
	// DefaultTotalSquares holds the default value on creation for the "total_squares" field.
	DefaultTotalSquares float64
	// DefaultPrimaryPitch holds the default value on creation for the "primary_pitch" field.
	DefaultPrimaryPitch float64
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// DefaultOverride holds the default value on creation for the "override" field.
	DefaultOverride bool
	// DefaultOverrideTotalSquares holds the default value on creation for the "override_total_squares" field.
	DefaultOverrideTotalSquares float64
	// DefaultOverridePrimaryPitch holds the default value on creation for the "override_primary_pitch" field.
	DefaultOverridePrimaryPitch float64
	// DefaultOverridePrice holds the default value on creation for the "override_price" field.
	DefaultOverridePrice float64
	// CompanyRefIDValidator is a validator for the "company_ref_id" field. It is called by the builders before save.
	CompanyRefIDValidator func(string) error
	// DefaultCompanyRefName holds the default value on creation for the "company_ref_name" field.
	DefaultCompanyRefName string
	// CompanyRefNameValidator is a validator for the "company_ref_name" field. It is called by the builders before save.
	CompanyRefNameValidator func(string) error
	// FailureReasonValidator is a validator for the "failure_reason" field. It is called by the builders before save.
	FailureReasonValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enum.EstimateStatus) error {
	switch s.String() {
	case "New", "Pending", "Approved", "Denied", "OnHold", "Failed":
		return nil
	default:
		return fmt.Errorf("estimate: invalid enum value for status field: %q", s)
	}
}

// MeasureTypeValidator is a validator for the "measure_type" field enum values. It is called by the builders before save.
func MeasureTypeValidator(mt enum.Measure) error {
	switch mt.String() {
	case "PrimaryStructureOnly", "PrimaryPlusDetachedGarage", "AllStructuresOnParcel":
		return nil
	default:
		return fmt.Errorf("estimate: invalid enum value for measure_type field: %q", mt)
	}
}

const DefaultExtraChargeType enum.ExtraCharge = "NONE"

// ExtraChargeTypeValidator is a validator for the "extra_charge_type" field enum values. It is called by the builders before save.
func ExtraChargeTypeValidator(ect enum.ExtraCharge) error {
	switch ect.String() {
	case "NONE", "AMOUNT", "PERCENT", "PER_SQ", "CONDITIONAL":
		return nil
	default:
		return fmt.Errorf("estimate: invalid enum value for extra_charge_type field: %q", ect)
	}
}

// OrderOption defines the ordering options for the Estimate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRegionID orders the results by the region_id field.
func ByRegionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCurrentMaterial orders the results by the current_material field.
func ByCurrentMaterial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentMaterial, opts...).ToFunc()
}

// ByNewRoofingMaterial orders the results by the new_roofing_material field.
func ByNewRoofingMaterial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewRoofingMaterial, opts...).ToFunc()
}

// ByLowSlope orders the results by the lowSlope field.
func ByLowSlope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowSlope, opts...).ToFunc()
}

// ByCurrentMaterialLowSlope orders the results by the current_material_low_slope field.
func ByCurrentMaterialLowSlope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentMaterialLowSlope, opts...).ToFunc()
}

// ByNewRoofingMaterialLowSlope orders the results by the new_roofing_material_low_slope field.
func ByNewRoofingMaterialLowSlope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewRoofingMaterialLowSlope, opts...).ToFunc()
}

// ByRedeck orders the results by the redeck field.
func ByRedeck(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedeck, opts...).ToFunc()
}

// ByLayers orders the results by the layers field.
func ByLayers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayers, opts...).ToFunc()
}

// ByLayer2Material orders the results by the layer2_material field.
func ByLayer2Material(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayer2Material, opts...).ToFunc()
}

// ByLayer3Material orders the results by the layer3_material field.
func ByLayer3Material(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayer3Material, opts...).ToFunc()
}

// ByPartialPercentage orders the results by the partial_percentage field.
func ByPartialPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartialPercentage, opts...).ToFunc()
}

// ByMaterialMappingNote orders the results by the material_mapping_note field.
func ByMaterialMappingNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaterialMappingNote, opts...).ToFunc()
}

// ByMeasureType orders the results by the measure_type field.
func ByMeasureType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeasureType, opts...).ToFunc()
}

// ByExtraChargeType orders the results by the extra_charge_type field.
func ByExtraChargeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraChargeType, opts...).ToFunc()
}

// ByExtraCharges orders the results by the extra_charges field.
func ByExtraCharges(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraCharges, opts...).ToFunc()
}

// ByExtraChargeNote orders the results by the extra_charge_note field.
func ByExtraChargeNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraChargeNote, opts...).ToFunc()
}

// ByEstimator orders the results by the estimator field.
func ByEstimator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimator, opts...).ToFunc()
}

// ByEstimatorOrderID orders the results by the estimator_order_id field.
func ByEstimatorOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatorOrderID, opts...).ToFunc()
}

// ByEstimatorReportID orders the results by the estimator_report_id field.
func ByEstimatorReportID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatorReportID, opts...).ToFunc()
}

// ByTotalSquares orders the results by the total_squares field.
func ByTotalSquares(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalSquares, opts...).ToFunc()
}

// ByPrimaryPitch orders the results by the primary_pitch field.
func ByPrimaryPitch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryPitch, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPriceSummary orders the results by the price_summary field.
func ByPriceSummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceSummary, opts...).ToFunc()
}

// ByOverride orders the results by the override field.
func ByOverride(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverride, opts...).ToFunc()
}

// ByOverrideTotalSquares orders the results by the override_total_squares field.
func ByOverrideTotalSquares(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverrideTotalSquares, opts...).ToFunc()
}

// ByOverridePrimaryPitch orders the results by the override_primary_pitch field.
func ByOverridePrimaryPitch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverridePrimaryPitch, opts...).ToFunc()
}

// ByOverridePrice orders the results by the override_price field.
func ByOverridePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverridePrice, opts...).ToFunc()
}

// ByOverridePriceSummary orders the results by the override_price_summary field.
func ByOverridePriceSummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverridePriceSummary, opts...).ToFunc()
}

// ByCompanyRefID orders the results by the company_ref_id field.
func ByCompanyRefID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyRefID, opts...).ToFunc()
}

// ByCompanyRefName orders the results by the company_ref_name field.
func ByCompanyRefName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyRefName, opts...).ToFunc()
}

// ByFailureReason orders the results by the failure_reason field.
func ByFailureReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailureReason, opts...).ToFunc()
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobInfoField orders the results by job_info field.
func ByJobInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobInfoStep(), sql.OrderByField(field, opts...))
	}
}

// ByPartnerField orders the results by partner field.
func ByPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByHomeOwnerField orders the results by home_owner field.
func ByHomeOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHomeOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// BySalesRepField orders the results by sales_rep field.
func BySalesRepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesRepStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorAPIField orders the results by creator_api field.
func ByCreatorAPIField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorAPIStep(), sql.OrderByField(field, opts...))
	}
}

// ByPdfField orders the results by pdf field.
func ByPdfField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPdfStep(), sql.OrderByField(field, opts...))
	}
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newJobInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, JobInfoTable, JobInfoColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
	)
}
func newHomeOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HomeOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HomeOwnerTable, HomeOwnerColumn),
	)
}
func newSalesRepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesRepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SalesRepTable, SalesRepColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newCreatorAPIStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorAPIInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPITable, CreatorAPIColumn),
	)
}
func newPdfStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PdfInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PdfTable, PdfColumn),
	)
}

var (
	// enum.EstimateStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.EstimateStatus)(nil)
	// enum.EstimateStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.EstimateStatus)(nil)
)

var (
	// enum.Measure must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.Measure)(nil)
	// enum.Measure must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.Measure)(nil)
)

var (
	// enum.ExtraCharge must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.ExtraCharge)(nil)
	// enum.ExtraCharge must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.ExtraCharge)(nil)
)

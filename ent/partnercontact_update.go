// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnercontact"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/ent/usersession"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerContactUpdate is the builder for updating PartnerContact entities.
type PartnerContactUpdate struct {
	config
	hooks     []Hook
	mutation  *PartnerContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartnerContactUpdate builder.
func (pcu *PartnerContactUpdate) Where(ps ...predicate.PartnerContact) *PartnerContactUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PartnerContactUpdate) SetUpdatedAt(t time.Time) *PartnerContactUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetPartnerID sets the "partner_id" field.
func (pcu *PartnerContactUpdate) SetPartnerID(s string) *PartnerContactUpdate {
	pcu.mutation.SetPartnerID(s)
	return pcu
}

// SetUserID sets the "user_id" field.
func (pcu *PartnerContactUpdate) SetUserID(s string) *PartnerContactUpdate {
	pcu.mutation.SetUserID(s)
	return pcu
}

// SetRole sets the "role" field.
func (pcu *PartnerContactUpdate) SetRole(ecr enum.PartnerContactRole) *PartnerContactUpdate {
	pcu.mutation.SetRole(ecr)
	return pcu
}

// SetType sets the "type" field.
func (pcu *PartnerContactUpdate) SetType(ec enum.PartnerContact) *PartnerContactUpdate {
	pcu.mutation.SetType(ec)
	return pcu
}

// SetTitle sets the "title" field.
func (pcu *PartnerContactUpdate) SetTitle(s string) *PartnerContactUpdate {
	pcu.mutation.SetTitle(s)
	return pcu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pcu *PartnerContactUpdate) SetNillableTitle(s *string) *PartnerContactUpdate {
	if s != nil {
		pcu.SetTitle(*s)
	}
	return pcu
}

// ClearTitle clears the value of the "title" field.
func (pcu *PartnerContactUpdate) ClearTitle() *PartnerContactUpdate {
	pcu.mutation.ClearTitle()
	return pcu
}

// SetDescription sets the "description" field.
func (pcu *PartnerContactUpdate) SetDescription(s string) *PartnerContactUpdate {
	pcu.mutation.SetDescription(s)
	return pcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcu *PartnerContactUpdate) SetNillableDescription(s *string) *PartnerContactUpdate {
	if s != nil {
		pcu.SetDescription(*s)
	}
	return pcu
}

// ClearDescription clears the value of the "description" field.
func (pcu *PartnerContactUpdate) ClearDescription() *PartnerContactUpdate {
	pcu.mutation.ClearDescription()
	return pcu
}

// SetInvoicingEmail sets the "invoicing_email" field.
func (pcu *PartnerContactUpdate) SetInvoicingEmail(s string) *PartnerContactUpdate {
	pcu.mutation.SetInvoicingEmail(s)
	return pcu
}

// SetNillableInvoicingEmail sets the "invoicing_email" field if the given value is not nil.
func (pcu *PartnerContactUpdate) SetNillableInvoicingEmail(s *string) *PartnerContactUpdate {
	if s != nil {
		pcu.SetInvoicingEmail(*s)
	}
	return pcu
}

// ClearInvoicingEmail clears the value of the "invoicing_email" field.
func (pcu *PartnerContactUpdate) ClearInvoicingEmail() *PartnerContactUpdate {
	pcu.mutation.ClearInvoicingEmail()
	return pcu
}

// SetUser sets the "user" edge to the User entity.
func (pcu *PartnerContactUpdate) SetUser(u *User) *PartnerContactUpdate {
	return pcu.SetUserID(u.ID)
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pcu *PartnerContactUpdate) SetPartner(p *Partner) *PartnerContactUpdate {
	return pcu.SetPartnerID(p.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (pcu *PartnerContactUpdate) AddSessionIDs(ids ...string) *PartnerContactUpdate {
	pcu.mutation.AddSessionIDs(ids...)
	return pcu
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (pcu *PartnerContactUpdate) AddSessions(u ...*UserSession) *PartnerContactUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pcu.AddSessionIDs(ids...)
}

// Mutation returns the PartnerContactMutation object of the builder.
func (pcu *PartnerContactUpdate) Mutation() *PartnerContactMutation {
	return pcu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pcu *PartnerContactUpdate) ClearUser() *PartnerContactUpdate {
	pcu.mutation.ClearUser()
	return pcu
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pcu *PartnerContactUpdate) ClearPartner() *PartnerContactUpdate {
	pcu.mutation.ClearPartner()
	return pcu
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (pcu *PartnerContactUpdate) ClearSessions() *PartnerContactUpdate {
	pcu.mutation.ClearSessions()
	return pcu
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (pcu *PartnerContactUpdate) RemoveSessionIDs(ids ...string) *PartnerContactUpdate {
	pcu.mutation.RemoveSessionIDs(ids...)
	return pcu
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (pcu *PartnerContactUpdate) RemoveSessions(u ...*UserSession) *PartnerContactUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pcu.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PartnerContactUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PartnerContactUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PartnerContactUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PartnerContactUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PartnerContactUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := partnercontact.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PartnerContactUpdate) check() error {
	if v, ok := pcu.mutation.Role(); ok {
		if err := partnercontact.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.role": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.GetType(); ok {
		if err := partnercontact.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.type": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.Title(); ok {
		if err := partnercontact.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.title": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.Description(); ok {
		if err := partnercontact.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.description": %w`, err)}
		}
	}
	if _, ok := pcu.mutation.UserID(); pcu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerContact.user"`)
	}
	if _, ok := pcu.mutation.PartnerID(); pcu.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerContact.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *PartnerContactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerContactUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *PartnerContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnercontact.Table, partnercontact.Columns, sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(partnercontact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.Role(); ok {
		_spec.SetField(partnercontact.FieldRole, field.TypeEnum, value)
	}
	if value, ok := pcu.mutation.GetType(); ok {
		_spec.SetField(partnercontact.FieldType, field.TypeEnum, value)
	}
	if value, ok := pcu.mutation.Title(); ok {
		_spec.SetField(partnercontact.FieldTitle, field.TypeString, value)
	}
	if pcu.mutation.TitleCleared() {
		_spec.ClearField(partnercontact.FieldTitle, field.TypeString)
	}
	if value, ok := pcu.mutation.Description(); ok {
		_spec.SetField(partnercontact.FieldDescription, field.TypeString, value)
	}
	if pcu.mutation.DescriptionCleared() {
		_spec.ClearField(partnercontact.FieldDescription, field.TypeString)
	}
	if value, ok := pcu.mutation.InvoicingEmail(); ok {
		_spec.SetField(partnercontact.FieldInvoicingEmail, field.TypeString, value)
	}
	if pcu.mutation.InvoicingEmailCleared() {
		_spec.ClearField(partnercontact.FieldInvoicingEmail, field.TypeString)
	}
	if pcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.UserTable,
			Columns: []string{partnercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.UserTable,
			Columns: []string{partnercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.PartnerTable,
			Columns: []string{partnercontact.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.PartnerTable,
			Columns: []string{partnercontact.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !pcu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PartnerContactUpdateOne is the builder for updating a single PartnerContact entity.
type PartnerContactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartnerContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PartnerContactUpdateOne) SetUpdatedAt(t time.Time) *PartnerContactUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetPartnerID sets the "partner_id" field.
func (pcuo *PartnerContactUpdateOne) SetPartnerID(s string) *PartnerContactUpdateOne {
	pcuo.mutation.SetPartnerID(s)
	return pcuo
}

// SetUserID sets the "user_id" field.
func (pcuo *PartnerContactUpdateOne) SetUserID(s string) *PartnerContactUpdateOne {
	pcuo.mutation.SetUserID(s)
	return pcuo
}

// SetRole sets the "role" field.
func (pcuo *PartnerContactUpdateOne) SetRole(ecr enum.PartnerContactRole) *PartnerContactUpdateOne {
	pcuo.mutation.SetRole(ecr)
	return pcuo
}

// SetType sets the "type" field.
func (pcuo *PartnerContactUpdateOne) SetType(ec enum.PartnerContact) *PartnerContactUpdateOne {
	pcuo.mutation.SetType(ec)
	return pcuo
}

// SetTitle sets the "title" field.
func (pcuo *PartnerContactUpdateOne) SetTitle(s string) *PartnerContactUpdateOne {
	pcuo.mutation.SetTitle(s)
	return pcuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pcuo *PartnerContactUpdateOne) SetNillableTitle(s *string) *PartnerContactUpdateOne {
	if s != nil {
		pcuo.SetTitle(*s)
	}
	return pcuo
}

// ClearTitle clears the value of the "title" field.
func (pcuo *PartnerContactUpdateOne) ClearTitle() *PartnerContactUpdateOne {
	pcuo.mutation.ClearTitle()
	return pcuo
}

// SetDescription sets the "description" field.
func (pcuo *PartnerContactUpdateOne) SetDescription(s string) *PartnerContactUpdateOne {
	pcuo.mutation.SetDescription(s)
	return pcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcuo *PartnerContactUpdateOne) SetNillableDescription(s *string) *PartnerContactUpdateOne {
	if s != nil {
		pcuo.SetDescription(*s)
	}
	return pcuo
}

// ClearDescription clears the value of the "description" field.
func (pcuo *PartnerContactUpdateOne) ClearDescription() *PartnerContactUpdateOne {
	pcuo.mutation.ClearDescription()
	return pcuo
}

// SetInvoicingEmail sets the "invoicing_email" field.
func (pcuo *PartnerContactUpdateOne) SetInvoicingEmail(s string) *PartnerContactUpdateOne {
	pcuo.mutation.SetInvoicingEmail(s)
	return pcuo
}

// SetNillableInvoicingEmail sets the "invoicing_email" field if the given value is not nil.
func (pcuo *PartnerContactUpdateOne) SetNillableInvoicingEmail(s *string) *PartnerContactUpdateOne {
	if s != nil {
		pcuo.SetInvoicingEmail(*s)
	}
	return pcuo
}

// ClearInvoicingEmail clears the value of the "invoicing_email" field.
func (pcuo *PartnerContactUpdateOne) ClearInvoicingEmail() *PartnerContactUpdateOne {
	pcuo.mutation.ClearInvoicingEmail()
	return pcuo
}

// SetUser sets the "user" edge to the User entity.
func (pcuo *PartnerContactUpdateOne) SetUser(u *User) *PartnerContactUpdateOne {
	return pcuo.SetUserID(u.ID)
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pcuo *PartnerContactUpdateOne) SetPartner(p *Partner) *PartnerContactUpdateOne {
	return pcuo.SetPartnerID(p.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (pcuo *PartnerContactUpdateOne) AddSessionIDs(ids ...string) *PartnerContactUpdateOne {
	pcuo.mutation.AddSessionIDs(ids...)
	return pcuo
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (pcuo *PartnerContactUpdateOne) AddSessions(u ...*UserSession) *PartnerContactUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pcuo.AddSessionIDs(ids...)
}

// Mutation returns the PartnerContactMutation object of the builder.
func (pcuo *PartnerContactUpdateOne) Mutation() *PartnerContactMutation {
	return pcuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pcuo *PartnerContactUpdateOne) ClearUser() *PartnerContactUpdateOne {
	pcuo.mutation.ClearUser()
	return pcuo
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pcuo *PartnerContactUpdateOne) ClearPartner() *PartnerContactUpdateOne {
	pcuo.mutation.ClearPartner()
	return pcuo
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (pcuo *PartnerContactUpdateOne) ClearSessions() *PartnerContactUpdateOne {
	pcuo.mutation.ClearSessions()
	return pcuo
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (pcuo *PartnerContactUpdateOne) RemoveSessionIDs(ids ...string) *PartnerContactUpdateOne {
	pcuo.mutation.RemoveSessionIDs(ids...)
	return pcuo
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (pcuo *PartnerContactUpdateOne) RemoveSessions(u ...*UserSession) *PartnerContactUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pcuo.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the PartnerContactUpdate builder.
func (pcuo *PartnerContactUpdateOne) Where(ps ...predicate.PartnerContact) *PartnerContactUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PartnerContactUpdateOne) Select(field string, fields ...string) *PartnerContactUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PartnerContact entity.
func (pcuo *PartnerContactUpdateOne) Save(ctx context.Context) (*PartnerContact, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PartnerContactUpdateOne) SaveX(ctx context.Context) *PartnerContact {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PartnerContactUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PartnerContactUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PartnerContactUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := partnercontact.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PartnerContactUpdateOne) check() error {
	if v, ok := pcuo.mutation.Role(); ok {
		if err := partnercontact.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.role": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.GetType(); ok {
		if err := partnercontact.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.type": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.Title(); ok {
		if err := partnercontact.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.title": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.Description(); ok {
		if err := partnercontact.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.description": %w`, err)}
		}
	}
	if _, ok := pcuo.mutation.UserID(); pcuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerContact.user"`)
	}
	if _, ok := pcuo.mutation.PartnerID(); pcuo.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerContact.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *PartnerContactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerContactUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *PartnerContactUpdateOne) sqlSave(ctx context.Context) (_node *PartnerContact, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnercontact.Table, partnercontact.Columns, sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnerContact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnercontact.FieldID)
		for _, f := range fields {
			if !partnercontact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnercontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(partnercontact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.Role(); ok {
		_spec.SetField(partnercontact.FieldRole, field.TypeEnum, value)
	}
	if value, ok := pcuo.mutation.GetType(); ok {
		_spec.SetField(partnercontact.FieldType, field.TypeEnum, value)
	}
	if value, ok := pcuo.mutation.Title(); ok {
		_spec.SetField(partnercontact.FieldTitle, field.TypeString, value)
	}
	if pcuo.mutation.TitleCleared() {
		_spec.ClearField(partnercontact.FieldTitle, field.TypeString)
	}
	if value, ok := pcuo.mutation.Description(); ok {
		_spec.SetField(partnercontact.FieldDescription, field.TypeString, value)
	}
	if pcuo.mutation.DescriptionCleared() {
		_spec.ClearField(partnercontact.FieldDescription, field.TypeString)
	}
	if value, ok := pcuo.mutation.InvoicingEmail(); ok {
		_spec.SetField(partnercontact.FieldInvoicingEmail, field.TypeString, value)
	}
	if pcuo.mutation.InvoicingEmailCleared() {
		_spec.ClearField(partnercontact.FieldInvoicingEmail, field.TypeString)
	}
	if pcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.UserTable,
			Columns: []string{partnercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.UserTable,
			Columns: []string{partnercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.PartnerTable,
			Columns: []string{partnercontact.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.PartnerTable,
			Columns: []string{partnercontact.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !pcuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &PartnerContact{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}

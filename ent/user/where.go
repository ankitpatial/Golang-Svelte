// Code generated by ent, DO NOT EDIT.

package user

import (
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExternalID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Pwd applies equality check predicate on the "pwd" field. It's identical to PwdEQ.
func Pwd(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPwd, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// PhoneVerified applies equality check predicate on the "phone_verified" field. It's identical to PhoneVerifiedEQ.
func PhoneVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneVerified, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPicture, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNote, v))
}

// WrongAttempts applies equality check predicate on the "wrong_attempts" field. It's identical to WrongAttemptsEQ.
func WrongAttempts(v uint8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWrongAttempts, v))
}

// WrongAttemptAt applies equality check predicate on the "wrong_attempt_at" field. It's identical to WrongAttemptAtEQ.
func WrongAttemptAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWrongAttemptAt, v))
}

// LockedUntil applies equality check predicate on the "locked_until" field. It's identical to LockedUntilEQ.
func LockedUntil(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockedUntil, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocation, v))
}

// AcceptedGeneralTerms applies equality check predicate on the "accepted_general_terms" field. It's identical to AcceptedGeneralTermsEQ.
func AcceptedGeneralTerms(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAcceptedGeneralTerms, v))
}

// AcceptedTermsNPrivacy applies equality check predicate on the "accepted_terms_n_privacy" field. It's identical to AcceptedTermsNPrivacyEQ.
func AcceptedTermsNPrivacy(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAcceptedTermsNPrivacy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldExternalID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// PwdEQ applies the EQ predicate on the "pwd" field.
func PwdEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPwd, v))
}

// PwdNEQ applies the NEQ predicate on the "pwd" field.
func PwdNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPwd, v))
}

// PwdIn applies the In predicate on the "pwd" field.
func PwdIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPwd, vs...))
}

// PwdNotIn applies the NotIn predicate on the "pwd" field.
func PwdNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPwd, vs...))
}

// PwdGT applies the GT predicate on the "pwd" field.
func PwdGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPwd, v))
}

// PwdGTE applies the GTE predicate on the "pwd" field.
func PwdGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPwd, v))
}

// PwdLT applies the LT predicate on the "pwd" field.
func PwdLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPwd, v))
}

// PwdLTE applies the LTE predicate on the "pwd" field.
func PwdLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPwd, v))
}

// PwdContains applies the Contains predicate on the "pwd" field.
func PwdContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPwd, v))
}

// PwdHasPrefix applies the HasPrefix predicate on the "pwd" field.
func PwdHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPwd, v))
}

// PwdHasSuffix applies the HasSuffix predicate on the "pwd" field.
func PwdHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPwd, v))
}

// PwdEqualFold applies the EqualFold predicate on the "pwd" field.
func PwdEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPwd, v))
}

// PwdContainsFold applies the ContainsFold predicate on the "pwd" field.
func PwdContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPwd, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerified, v))
}

// PhoneVerifiedEQ applies the EQ predicate on the "phone_verified" field.
func PhoneVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneVerified, v))
}

// PhoneVerifiedNEQ applies the NEQ predicate on the "phone_verified" field.
func PhoneVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneVerified, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureIsNil applies the IsNil predicate on the "picture" field.
func PictureIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPicture))
}

// PictureNotNil applies the NotNil predicate on the "picture" field.
func PictureNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPicture))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPicture, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enum.AccountStatus) predicate.User {
	vc := v
	return predicate.User(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enum.AccountStatus) predicate.User {
	vc := v
	return predicate.User(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enum.AccountStatus) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enum.AccountStatus) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldNotIn(FieldStatus, v...))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v enum.Role) predicate.User {
	vc := v
	return predicate.User(sql.FieldEQ(FieldRole, vc))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v enum.Role) predicate.User {
	vc := v
	return predicate.User(sql.FieldNEQ(FieldRole, vc))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...enum.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldIn(FieldRole, v...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...enum.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldNotIn(FieldRole, v...))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNote, v))
}

// WrongAttemptsEQ applies the EQ predicate on the "wrong_attempts" field.
func WrongAttemptsEQ(v uint8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWrongAttempts, v))
}

// WrongAttemptsNEQ applies the NEQ predicate on the "wrong_attempts" field.
func WrongAttemptsNEQ(v uint8) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWrongAttempts, v))
}

// WrongAttemptsIn applies the In predicate on the "wrong_attempts" field.
func WrongAttemptsIn(vs ...uint8) predicate.User {
	return predicate.User(sql.FieldIn(FieldWrongAttempts, vs...))
}

// WrongAttemptsNotIn applies the NotIn predicate on the "wrong_attempts" field.
func WrongAttemptsNotIn(vs ...uint8) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWrongAttempts, vs...))
}

// WrongAttemptsGT applies the GT predicate on the "wrong_attempts" field.
func WrongAttemptsGT(v uint8) predicate.User {
	return predicate.User(sql.FieldGT(FieldWrongAttempts, v))
}

// WrongAttemptsGTE applies the GTE predicate on the "wrong_attempts" field.
func WrongAttemptsGTE(v uint8) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWrongAttempts, v))
}

// WrongAttemptsLT applies the LT predicate on the "wrong_attempts" field.
func WrongAttemptsLT(v uint8) predicate.User {
	return predicate.User(sql.FieldLT(FieldWrongAttempts, v))
}

// WrongAttemptsLTE applies the LTE predicate on the "wrong_attempts" field.
func WrongAttemptsLTE(v uint8) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWrongAttempts, v))
}

// WrongAttemptsIsNil applies the IsNil predicate on the "wrong_attempts" field.
func WrongAttemptsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWrongAttempts))
}

// WrongAttemptsNotNil applies the NotNil predicate on the "wrong_attempts" field.
func WrongAttemptsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWrongAttempts))
}

// WrongAttemptAtEQ applies the EQ predicate on the "wrong_attempt_at" field.
func WrongAttemptAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWrongAttemptAt, v))
}

// WrongAttemptAtNEQ applies the NEQ predicate on the "wrong_attempt_at" field.
func WrongAttemptAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWrongAttemptAt, v))
}

// WrongAttemptAtIn applies the In predicate on the "wrong_attempt_at" field.
func WrongAttemptAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldWrongAttemptAt, vs...))
}

// WrongAttemptAtNotIn applies the NotIn predicate on the "wrong_attempt_at" field.
func WrongAttemptAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWrongAttemptAt, vs...))
}

// WrongAttemptAtGT applies the GT predicate on the "wrong_attempt_at" field.
func WrongAttemptAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldWrongAttemptAt, v))
}

// WrongAttemptAtGTE applies the GTE predicate on the "wrong_attempt_at" field.
func WrongAttemptAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWrongAttemptAt, v))
}

// WrongAttemptAtLT applies the LT predicate on the "wrong_attempt_at" field.
func WrongAttemptAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldWrongAttemptAt, v))
}

// WrongAttemptAtLTE applies the LTE predicate on the "wrong_attempt_at" field.
func WrongAttemptAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWrongAttemptAt, v))
}

// WrongAttemptAtIsNil applies the IsNil predicate on the "wrong_attempt_at" field.
func WrongAttemptAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWrongAttemptAt))
}

// WrongAttemptAtNotNil applies the NotNil predicate on the "wrong_attempt_at" field.
func WrongAttemptAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWrongAttemptAt))
}

// LockedUntilEQ applies the EQ predicate on the "locked_until" field.
func LockedUntilEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockedUntil, v))
}

// LockedUntilNEQ applies the NEQ predicate on the "locked_until" field.
func LockedUntilNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLockedUntil, v))
}

// LockedUntilIn applies the In predicate on the "locked_until" field.
func LockedUntilIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLockedUntil, vs...))
}

// LockedUntilNotIn applies the NotIn predicate on the "locked_until" field.
func LockedUntilNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLockedUntil, vs...))
}

// LockedUntilGT applies the GT predicate on the "locked_until" field.
func LockedUntilGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLockedUntil, v))
}

// LockedUntilGTE applies the GTE predicate on the "locked_until" field.
func LockedUntilGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLockedUntil, v))
}

// LockedUntilLT applies the LT predicate on the "locked_until" field.
func LockedUntilLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLockedUntil, v))
}

// LockedUntilLTE applies the LTE predicate on the "locked_until" field.
func LockedUntilLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLockedUntil, v))
}

// LockedUntilIsNil applies the IsNil predicate on the "locked_until" field.
func LockedUntilIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLockedUntil))
}

// LockedUntilNotNil applies the NotNil predicate on the "locked_until" field.
func LockedUntilNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLockedUntil))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLocation, v))
}

// AcceptedGeneralTermsEQ applies the EQ predicate on the "accepted_general_terms" field.
func AcceptedGeneralTermsEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAcceptedGeneralTerms, v))
}

// AcceptedGeneralTermsNEQ applies the NEQ predicate on the "accepted_general_terms" field.
func AcceptedGeneralTermsNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAcceptedGeneralTerms, v))
}

// AcceptedGeneralTermsIsNil applies the IsNil predicate on the "accepted_general_terms" field.
func AcceptedGeneralTermsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAcceptedGeneralTerms))
}

// AcceptedGeneralTermsNotNil applies the NotNil predicate on the "accepted_general_terms" field.
func AcceptedGeneralTermsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAcceptedGeneralTerms))
}

// AcceptedTermsNPrivacyEQ applies the EQ predicate on the "accepted_terms_n_privacy" field.
func AcceptedTermsNPrivacyEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAcceptedTermsNPrivacy, v))
}

// AcceptedTermsNPrivacyNEQ applies the NEQ predicate on the "accepted_terms_n_privacy" field.
func AcceptedTermsNPrivacyNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAcceptedTermsNPrivacy, v))
}

// AcceptedTermsNPrivacyIsNil applies the IsNil predicate on the "accepted_terms_n_privacy" field.
func AcceptedTermsNPrivacyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAcceptedTermsNPrivacy))
}

// AcceptedTermsNPrivacyNotNil applies the NotNil predicate on the "accepted_terms_n_privacy" field.
func AcceptedTermsNPrivacyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAcceptedTermsNPrivacy))
}

// HasAuths applies the HasEdge predicate on the "auths" edge.
func HasAuths() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AuthsTable, AuthsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthsWith applies the HasEdge predicate on the "auths" edge with a given conditions (other predicates).
func HasAuthsWith(preds ...predicate.UserAuth) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAuthsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.UserSession) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuditLogs applies the HasEdge predicate on the "audit_logs" edge.
func HasAuditLogs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditLogsWith applies the HasEdge predicate on the "audit_logs" edge with a given conditions (other predicates).
func HasAuditLogsWith(preds ...predicate.AuditLog) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAuditLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotify applies the HasEdge predicate on the "notify" edge.
func HasNotify() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotifyTable, NotifyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotifyWith applies the HasEdge predicate on the "notify" edge with a given conditions (other predicates).
func HasNotifyWith(preds ...predicate.NotifySetting) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newNotifyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedJobs applies the HasEdge predicate on the "created_jobs" edge.
func HasCreatedJobs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedJobsTable, CreatedJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedJobsWith applies the HasEdge predicate on the "created_jobs" edge with a given conditions (other predicates).
func HasCreatedJobsWith(preds ...predicate.Job) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedEstimates applies the HasEdge predicate on the "created_estimates" edge.
func HasCreatedEstimates() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedEstimatesTable, CreatedEstimatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedEstimatesWith applies the HasEdge predicate on the "created_estimates" edge with a given conditions (other predicates).
func HasCreatedEstimatesWith(preds ...predicate.Estimate) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedEstimatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSalesRepEstimates applies the HasEdge predicate on the "sales_rep_estimates" edge.
func HasSalesRepEstimates() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SalesRepEstimatesTable, SalesRepEstimatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesRepEstimatesWith applies the HasEdge predicate on the "sales_rep_estimates" edge with a given conditions (other predicates).
func HasSalesRepEstimatesWith(preds ...predicate.Estimate) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSalesRepEstimatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSales applies the HasEdge predicate on the "sales" edge.
func HasSales() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SalesTable, SalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesWith applies the HasEdge predicate on the "sales" edge with a given conditions (other predicates).
func HasSalesWith(preds ...predicate.Job) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSalesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedInstallationJobs applies the HasEdge predicate on the "created_installation_jobs" edge.
func HasCreatedInstallationJobs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedInstallationJobsTable, CreatedInstallationJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedInstallationJobsWith applies the HasEdge predicate on the "created_installation_jobs" edge with a given conditions (other predicates).
func HasCreatedInstallationJobsWith(preds ...predicate.InstallationJob) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedInstallationJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstallationLeads applies the HasEdge predicate on the "installation_leads" edge.
func HasInstallationLeads() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstallationLeadsTable, InstallationLeadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstallationLeadsWith applies the HasEdge predicate on the "installation_leads" edge with a given conditions (other predicates).
func HasInstallationLeadsWith(preds ...predicate.InstallationJob) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newInstallationLeadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEstimateActivities applies the HasEdge predicate on the "estimate_activities" edge.
func HasEstimateActivities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EstimateActivitiesTable, EstimateActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimateActivitiesWith applies the HasEdge predicate on the "estimate_activities" edge with a given conditions (other predicates).
func HasEstimateActivitiesWith(preds ...predicate.EstimateActivity) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEstimateActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobActivities applies the HasEdge predicate on the "job_activities" edge.
func HasJobActivities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobActivitiesTable, JobActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobActivitiesWith applies the HasEdge predicate on the "job_activities" edge with a given conditions (other predicates).
func HasJobActivitiesWith(preds ...predicate.JobActivity) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newJobActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartnerActivities applies the HasEdge predicate on the "partner_activities" edge.
func HasPartnerActivities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartnerActivitiesTable, PartnerActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerActivitiesWith applies the HasEdge predicate on the "partner_activities" edge with a given conditions (other predicates).
func HasPartnerActivitiesWith(preds ...predicate.PartnerActivity) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPartnerActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserActivities applies the HasEdge predicate on the "user_activities" edge.
func HasUserActivities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserActivitiesTable, UserActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserActivitiesWith applies the HasEdge predicate on the "user_activities" edge with a given conditions (other predicates).
func HasUserActivitiesWith(preds ...predicate.UserActivity) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivities applies the HasEdge predicate on the "activities" edge.
func HasActivities() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitiesWith applies the HasEdge predicate on the "activities" edge with a given conditions (other predicates).
func HasActivitiesWith(preds ...predicate.UserActivity) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobProgressHistory applies the HasEdge predicate on the "job_progress_history" edge.
func HasJobProgressHistory() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobProgressHistoryTable, JobProgressHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobProgressHistoryWith applies the HasEdge predicate on the "job_progress_history" edge with a given conditions (other predicates).
func HasJobProgressHistoryWith(preds ...predicate.JobProgressHistory) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newJobProgressHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstallationJobStatusChanger applies the HasEdge predicate on the "installation_job_status_changer" edge.
func HasInstallationJobStatusChanger() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstallationJobStatusChangerTable, InstallationJobStatusChangerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstallationJobStatusChangerWith applies the HasEdge predicate on the "installation_job_status_changer" edge with a given conditions (other predicates).
func HasInstallationJobStatusChangerWith(preds ...predicate.InstallationJobProgress) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newInstallationJobStatusChangerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContactUsRequests applies the HasEdge predicate on the "contact_us_requests" edge.
func HasContactUsRequests() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactUsRequestsTable, ContactUsRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactUsRequestsWith applies the HasEdge predicate on the "contact_us_requests" edge with a given conditions (other predicates).
func HasContactUsRequestsWith(preds ...predicate.ContactUs) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newContactUsRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartner applies the HasEdge predicate on the "partner" edge.
func HasPartner() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PartnerTable, PartnerPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerWith applies the HasEdge predicate on the "partner" edge with a given conditions (other predicates).
func HasPartnerWith(preds ...predicate.Partner) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurveys applies the HasEdge predicate on the "surveys" edge.
func HasSurveys() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveysTable, SurveysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveysWith applies the HasEdge predicate on the "surveys" edge with a given conditions (other predicates).
func HasSurveysWith(preds ...predicate.Survey) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSurveysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurveyProgress applies the HasEdge predicate on the "survey_progress" edge.
func HasSurveyProgress() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveyProgressTable, SurveyProgressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveyProgressWith applies the HasEdge predicate on the "survey_progress" edge with a given conditions (other predicates).
func HasSurveyProgressWith(preds ...predicate.SurveyProgress) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSurveyProgressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedTrainingVideos applies the HasEdge predicate on the "created_training_videos" edge.
func HasCreatedTrainingVideos() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedTrainingVideosTable, CreatedTrainingVideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedTrainingVideosWith applies the HasEdge predicate on the "created_training_videos" edge with a given conditions (other predicates).
func HasCreatedTrainingVideosWith(preds ...predicate.TrainingVideo) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedTrainingVideosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedTrainingCourses applies the HasEdge predicate on the "created_training_courses" edge.
func HasCreatedTrainingCourses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedTrainingCoursesTable, CreatedTrainingCoursesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedTrainingCoursesWith applies the HasEdge predicate on the "created_training_courses" edge with a given conditions (other predicates).
func HasCreatedTrainingCoursesWith(preds ...predicate.TrainingCourse) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedTrainingCoursesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobNotes applies the HasEdge predicate on the "job_notes" edge.
func HasJobNotes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobNotesTable, JobNotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobNotesWith applies the HasEdge predicate on the "job_notes" edge with a given conditions (other predicates).
func HasJobNotesWith(preds ...predicate.JobNote) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newJobNotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChatChannels applies the HasEdge predicate on the "chat_channels" edge.
func HasChatChannels() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatChannelsTable, ChatChannelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatChannelsWith applies the HasEdge predicate on the "chat_channels" edge with a given conditions (other predicates).
func HasChatChannelsWith(preds ...predicate.ChannelSub) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newChatChannelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentMessages applies the HasEdge predicate on the "sent_messages" edge.
func HasSentMessages() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SentMessagesTable, SentMessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentMessagesWith applies the HasEdge predicate on the "sent_messages" edge with a given conditions (other predicates).
func HasSentMessagesWith(preds ...predicate.ChannelMessage) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSentMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceivedMessages applies the HasEdge predicate on the "received_messages" edge.
func HasReceivedMessages() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceivedMessagesTable, ReceivedMessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceivedMessagesWith applies the HasEdge predicate on the "received_messages" edge with a given conditions (other predicates).
func HasReceivedMessagesWith(preds ...predicate.ChannelMessage) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newReceivedMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannelMessageRead applies the HasEdge predicate on the "channel_message_read" edge.
func HasChannelMessageRead() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChannelMessageReadTable, ChannelMessageReadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelMessageReadWith applies the HasEdge predicate on the "channel_message_read" edge with a given conditions (other predicates).
func HasChannelMessageReadWith(preds ...predicate.ChannelMessageRead) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newChannelMessageReadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductsCreated applies the HasEdge predicate on the "products_created" edge.
func HasProductsCreated() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsCreatedTable, ProductsCreatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsCreatedWith applies the HasEdge predicate on the "products_created" edge with a given conditions (other predicates).
func HasProductsCreatedWith(preds ...predicate.Product) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProductsCreatedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductPkgCreated applies the HasEdge predicate on the "product_pkg_created" edge.
func HasProductPkgCreated() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductPkgCreatedTable, ProductPkgCreatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductPkgCreatedWith applies the HasEdge predicate on the "product_pkg_created" edge with a given conditions (other predicates).
func HasProductPkgCreatedWith(preds ...predicate.ProductPackage) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProductPkgCreatedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobDocUrls applies the HasEdge predicate on the "job_doc_urls" edge.
func HasJobDocUrls() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobDocUrlsTable, JobDocUrlsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobDocUrlsWith applies the HasEdge predicate on the "job_doc_urls" edge with a given conditions (other predicates).
func HasJobDocUrlsWith(preds ...predicate.JobDocURL) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newJobDocUrlsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartnerContacts applies the HasEdge predicate on the "partner_contacts" edge.
func HasPartnerContacts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PartnerContactsTable, PartnerContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerContactsWith applies the HasEdge predicate on the "partner_contacts" edge with a given conditions (other predicates).
func HasPartnerContactsWith(preds ...predicate.PartnerContact) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPartnerContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}

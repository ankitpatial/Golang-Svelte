// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPwd holds the string denoting the pwd field in the database.
	FieldPwd = "pwd"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPhoneVerified holds the string denoting the phone_verified field in the database.
	FieldPhoneVerified = "phone_verified"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldWrongAttempts holds the string denoting the wrong_attempts field in the database.
	FieldWrongAttempts = "wrong_attempts"
	// FieldWrongAttemptAt holds the string denoting the wrong_attempt_at field in the database.
	FieldWrongAttemptAt = "wrong_attempt_at"
	// FieldLockedUntil holds the string denoting the locked_until field in the database.
	FieldLockedUntil = "locked_until"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldAcceptedGeneralTerms holds the string denoting the accepted_general_terms field in the database.
	FieldAcceptedGeneralTerms = "accepted_general_terms"
	// FieldAcceptedTermsNPrivacy holds the string denoting the accepted_terms_n_privacy field in the database.
	FieldAcceptedTermsNPrivacy = "accepted_terms_n_privacy"
	// EdgeAuths holds the string denoting the auths edge name in mutations.
	EdgeAuths = "auths"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeAuditLogs holds the string denoting the audit_logs edge name in mutations.
	EdgeAuditLogs = "audit_logs"
	// EdgeNotify holds the string denoting the notify edge name in mutations.
	EdgeNotify = "notify"
	// EdgeCreatedJobs holds the string denoting the created_jobs edge name in mutations.
	EdgeCreatedJobs = "created_jobs"
	// EdgeCreatedEstimates holds the string denoting the created_estimates edge name in mutations.
	EdgeCreatedEstimates = "created_estimates"
	// EdgeSalesRepEstimates holds the string denoting the sales_rep_estimates edge name in mutations.
	EdgeSalesRepEstimates = "sales_rep_estimates"
	// EdgeSales holds the string denoting the sales edge name in mutations.
	EdgeSales = "sales"
	// EdgeCreatedInstallationJobs holds the string denoting the created_installation_jobs edge name in mutations.
	EdgeCreatedInstallationJobs = "created_installation_jobs"
	// EdgeInstallationLeads holds the string denoting the installation_leads edge name in mutations.
	EdgeInstallationLeads = "installation_leads"
	// EdgeEstimateActivities holds the string denoting the estimate_activities edge name in mutations.
	EdgeEstimateActivities = "estimate_activities"
	// EdgeJobActivities holds the string denoting the job_activities edge name in mutations.
	EdgeJobActivities = "job_activities"
	// EdgePartnerActivities holds the string denoting the partner_activities edge name in mutations.
	EdgePartnerActivities = "partner_activities"
	// EdgeUserActivities holds the string denoting the user_activities edge name in mutations.
	EdgeUserActivities = "user_activities"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeJobProgressHistory holds the string denoting the job_progress_history edge name in mutations.
	EdgeJobProgressHistory = "job_progress_history"
	// EdgeInstallationJobStatusChanger holds the string denoting the installation_job_status_changer edge name in mutations.
	EdgeInstallationJobStatusChanger = "installation_job_status_changer"
	// EdgeContactUsRequests holds the string denoting the contact_us_requests edge name in mutations.
	EdgeContactUsRequests = "contact_us_requests"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// EdgeSurveys holds the string denoting the surveys edge name in mutations.
	EdgeSurveys = "surveys"
	// EdgeSurveyProgress holds the string denoting the survey_progress edge name in mutations.
	EdgeSurveyProgress = "survey_progress"
	// EdgeCreatedTrainingVideos holds the string denoting the created_training_videos edge name in mutations.
	EdgeCreatedTrainingVideos = "created_training_videos"
	// EdgeCreatedTrainingCourses holds the string denoting the created_training_courses edge name in mutations.
	EdgeCreatedTrainingCourses = "created_training_courses"
	// EdgeJobNotes holds the string denoting the job_notes edge name in mutations.
	EdgeJobNotes = "job_notes"
	// EdgeChatChannels holds the string denoting the chat_channels edge name in mutations.
	EdgeChatChannels = "chat_channels"
	// EdgeSentMessages holds the string denoting the sent_messages edge name in mutations.
	EdgeSentMessages = "sent_messages"
	// EdgeReceivedMessages holds the string denoting the received_messages edge name in mutations.
	EdgeReceivedMessages = "received_messages"
	// EdgeChannelMessageRead holds the string denoting the channel_message_read edge name in mutations.
	EdgeChannelMessageRead = "channel_message_read"
	// EdgeProductsCreated holds the string denoting the products_created edge name in mutations.
	EdgeProductsCreated = "products_created"
	// EdgeProductPkgCreated holds the string denoting the product_pkg_created edge name in mutations.
	EdgeProductPkgCreated = "product_pkg_created"
	// EdgeJobDocUrls holds the string denoting the job_doc_urls edge name in mutations.
	EdgeJobDocUrls = "job_doc_urls"
	// EdgePartnerContacts holds the string denoting the partner_contacts edge name in mutations.
	EdgePartnerContacts = "partner_contacts"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AuthsTable is the table that holds the auths relation/edge.
	AuthsTable = "user_auths"
	// AuthsInverseTable is the table name for the UserAuth entity.
	// It exists in this package in order to avoid circular dependency with the "userauth" package.
	AuthsInverseTable = "user_auths"
	// AuthsColumn is the table column denoting the auths relation/edge.
	AuthsColumn = "user_id"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "user_sessions"
	// SessionsInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	SessionsInverseTable = "user_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_id"
	// AuditLogsTable is the table that holds the audit_logs relation/edge.
	AuditLogsTable = "audit_logs"
	// AuditLogsInverseTable is the table name for the AuditLog entity.
	// It exists in this package in order to avoid circular dependency with the "auditlog" package.
	AuditLogsInverseTable = "audit_logs"
	// AuditLogsColumn is the table column denoting the audit_logs relation/edge.
	AuditLogsColumn = "user_id"
	// NotifyTable is the table that holds the notify relation/edge.
	NotifyTable = "notify_settings"
	// NotifyInverseTable is the table name for the NotifySetting entity.
	// It exists in this package in order to avoid circular dependency with the "notifysetting" package.
	NotifyInverseTable = "notify_settings"
	// NotifyColumn is the table column denoting the notify relation/edge.
	NotifyColumn = "user_id"
	// CreatedJobsTable is the table that holds the created_jobs relation/edge.
	CreatedJobsTable = "jobs"
	// CreatedJobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	CreatedJobsInverseTable = "jobs"
	// CreatedJobsColumn is the table column denoting the created_jobs relation/edge.
	CreatedJobsColumn = "creator_id"
	// CreatedEstimatesTable is the table that holds the created_estimates relation/edge.
	CreatedEstimatesTable = "estimates"
	// CreatedEstimatesInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	CreatedEstimatesInverseTable = "estimates"
	// CreatedEstimatesColumn is the table column denoting the created_estimates relation/edge.
	CreatedEstimatesColumn = "creator_id"
	// SalesRepEstimatesTable is the table that holds the sales_rep_estimates relation/edge.
	SalesRepEstimatesTable = "estimates"
	// SalesRepEstimatesInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	SalesRepEstimatesInverseTable = "estimates"
	// SalesRepEstimatesColumn is the table column denoting the sales_rep_estimates relation/edge.
	SalesRepEstimatesColumn = "sales_rep_id"
	// SalesTable is the table that holds the sales relation/edge.
	SalesTable = "jobs"
	// SalesInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	SalesInverseTable = "jobs"
	// SalesColumn is the table column denoting the sales relation/edge.
	SalesColumn = "sales_rep_id"
	// CreatedInstallationJobsTable is the table that holds the created_installation_jobs relation/edge.
	CreatedInstallationJobsTable = "installation_jobs"
	// CreatedInstallationJobsInverseTable is the table name for the InstallationJob entity.
	// It exists in this package in order to avoid circular dependency with the "installationjob" package.
	CreatedInstallationJobsInverseTable = "installation_jobs"
	// CreatedInstallationJobsColumn is the table column denoting the created_installation_jobs relation/edge.
	CreatedInstallationJobsColumn = "creator_id"
	// InstallationLeadsTable is the table that holds the installation_leads relation/edge.
	InstallationLeadsTable = "installation_jobs"
	// InstallationLeadsInverseTable is the table name for the InstallationJob entity.
	// It exists in this package in order to avoid circular dependency with the "installationjob" package.
	InstallationLeadsInverseTable = "installation_jobs"
	// InstallationLeadsColumn is the table column denoting the installation_leads relation/edge.
	InstallationLeadsColumn = "sales_rep_id"
	// EstimateActivitiesTable is the table that holds the estimate_activities relation/edge.
	EstimateActivitiesTable = "estimate_activities"
	// EstimateActivitiesInverseTable is the table name for the EstimateActivity entity.
	// It exists in this package in order to avoid circular dependency with the "estimateactivity" package.
	EstimateActivitiesInverseTable = "estimate_activities"
	// EstimateActivitiesColumn is the table column denoting the estimate_activities relation/edge.
	EstimateActivitiesColumn = "creator_id"
	// JobActivitiesTable is the table that holds the job_activities relation/edge.
	JobActivitiesTable = "job_activities"
	// JobActivitiesInverseTable is the table name for the JobActivity entity.
	// It exists in this package in order to avoid circular dependency with the "jobactivity" package.
	JobActivitiesInverseTable = "job_activities"
	// JobActivitiesColumn is the table column denoting the job_activities relation/edge.
	JobActivitiesColumn = "creator_id"
	// PartnerActivitiesTable is the table that holds the partner_activities relation/edge.
	PartnerActivitiesTable = "partner_activities"
	// PartnerActivitiesInverseTable is the table name for the PartnerActivity entity.
	// It exists in this package in order to avoid circular dependency with the "partneractivity" package.
	PartnerActivitiesInverseTable = "partner_activities"
	// PartnerActivitiesColumn is the table column denoting the partner_activities relation/edge.
	PartnerActivitiesColumn = "creator_id"
	// UserActivitiesTable is the table that holds the user_activities relation/edge.
	UserActivitiesTable = "user_activities"
	// UserActivitiesInverseTable is the table name for the UserActivity entity.
	// It exists in this package in order to avoid circular dependency with the "useractivity" package.
	UserActivitiesInverseTable = "user_activities"
	// UserActivitiesColumn is the table column denoting the user_activities relation/edge.
	UserActivitiesColumn = "creator_id"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "user_activities"
	// ActivitiesInverseTable is the table name for the UserActivity entity.
	// It exists in this package in order to avoid circular dependency with the "useractivity" package.
	ActivitiesInverseTable = "user_activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "user_id"
	// JobProgressHistoryTable is the table that holds the job_progress_history relation/edge.
	JobProgressHistoryTable = "job_progress_history"
	// JobProgressHistoryInverseTable is the table name for the JobProgressHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobprogresshistory" package.
	JobProgressHistoryInverseTable = "job_progress_history"
	// JobProgressHistoryColumn is the table column denoting the job_progress_history relation/edge.
	JobProgressHistoryColumn = "user_id"
	// InstallationJobStatusChangerTable is the table that holds the installation_job_status_changer relation/edge.
	InstallationJobStatusChangerTable = "installation_job_progress"
	// InstallationJobStatusChangerInverseTable is the table name for the InstallationJobProgress entity.
	// It exists in this package in order to avoid circular dependency with the "installationjobprogress" package.
	InstallationJobStatusChangerInverseTable = "installation_job_progress"
	// InstallationJobStatusChangerColumn is the table column denoting the installation_job_status_changer relation/edge.
	InstallationJobStatusChangerColumn = "creator_id"
	// ContactUsRequestsTable is the table that holds the contact_us_requests relation/edge.
	ContactUsRequestsTable = "contact_us"
	// ContactUsRequestsInverseTable is the table name for the ContactUs entity.
	// It exists in this package in order to avoid circular dependency with the "contactus" package.
	ContactUsRequestsInverseTable = "contact_us"
	// ContactUsRequestsColumn is the table column denoting the contact_us_requests relation/edge.
	ContactUsRequestsColumn = "creator_id"
	// PartnerTable is the table that holds the partner relation/edge. The primary key declared below.
	PartnerTable = "partner_contacts"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
	// SurveysTable is the table that holds the surveys relation/edge.
	SurveysTable = "surveys"
	// SurveysInverseTable is the table name for the Survey entity.
	// It exists in this package in order to avoid circular dependency with the "survey" package.
	SurveysInverseTable = "surveys"
	// SurveysColumn is the table column denoting the surveys relation/edge.
	SurveysColumn = "user_id"
	// SurveyProgressTable is the table that holds the survey_progress relation/edge.
	SurveyProgressTable = "survey_progress"
	// SurveyProgressInverseTable is the table name for the SurveyProgress entity.
	// It exists in this package in order to avoid circular dependency with the "surveyprogress" package.
	SurveyProgressInverseTable = "survey_progress"
	// SurveyProgressColumn is the table column denoting the survey_progress relation/edge.
	SurveyProgressColumn = "creator"
	// CreatedTrainingVideosTable is the table that holds the created_training_videos relation/edge.
	CreatedTrainingVideosTable = "training_videos"
	// CreatedTrainingVideosInverseTable is the table name for the TrainingVideo entity.
	// It exists in this package in order to avoid circular dependency with the "trainingvideo" package.
	CreatedTrainingVideosInverseTable = "training_videos"
	// CreatedTrainingVideosColumn is the table column denoting the created_training_videos relation/edge.
	CreatedTrainingVideosColumn = "creator_id"
	// CreatedTrainingCoursesTable is the table that holds the created_training_courses relation/edge.
	CreatedTrainingCoursesTable = "training_courses"
	// CreatedTrainingCoursesInverseTable is the table name for the TrainingCourse entity.
	// It exists in this package in order to avoid circular dependency with the "trainingcourse" package.
	CreatedTrainingCoursesInverseTable = "training_courses"
	// CreatedTrainingCoursesColumn is the table column denoting the created_training_courses relation/edge.
	CreatedTrainingCoursesColumn = "creator_id"
	// JobNotesTable is the table that holds the job_notes relation/edge.
	JobNotesTable = "job_notes"
	// JobNotesInverseTable is the table name for the JobNote entity.
	// It exists in this package in order to avoid circular dependency with the "jobnote" package.
	JobNotesInverseTable = "job_notes"
	// JobNotesColumn is the table column denoting the job_notes relation/edge.
	JobNotesColumn = "user_id"
	// ChatChannelsTable is the table that holds the chat_channels relation/edge.
	ChatChannelsTable = "channel_subs"
	// ChatChannelsInverseTable is the table name for the ChannelSub entity.
	// It exists in this package in order to avoid circular dependency with the "channelsub" package.
	ChatChannelsInverseTable = "channel_subs"
	// ChatChannelsColumn is the table column denoting the chat_channels relation/edge.
	ChatChannelsColumn = "user_id"
	// SentMessagesTable is the table that holds the sent_messages relation/edge.
	SentMessagesTable = "channel_messages"
	// SentMessagesInverseTable is the table name for the ChannelMessage entity.
	// It exists in this package in order to avoid circular dependency with the "channelmessage" package.
	SentMessagesInverseTable = "channel_messages"
	// SentMessagesColumn is the table column denoting the sent_messages relation/edge.
	SentMessagesColumn = "from_user_id"
	// ReceivedMessagesTable is the table that holds the received_messages relation/edge.
	ReceivedMessagesTable = "channel_messages"
	// ReceivedMessagesInverseTable is the table name for the ChannelMessage entity.
	// It exists in this package in order to avoid circular dependency with the "channelmessage" package.
	ReceivedMessagesInverseTable = "channel_messages"
	// ReceivedMessagesColumn is the table column denoting the received_messages relation/edge.
	ReceivedMessagesColumn = "to_user_id"
	// ChannelMessageReadTable is the table that holds the channel_message_read relation/edge.
	ChannelMessageReadTable = "channel_message_reads"
	// ChannelMessageReadInverseTable is the table name for the ChannelMessageRead entity.
	// It exists in this package in order to avoid circular dependency with the "channelmessageread" package.
	ChannelMessageReadInverseTable = "channel_message_reads"
	// ChannelMessageReadColumn is the table column denoting the channel_message_read relation/edge.
	ChannelMessageReadColumn = "user_id"
	// ProductsCreatedTable is the table that holds the products_created relation/edge.
	ProductsCreatedTable = "products"
	// ProductsCreatedInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsCreatedInverseTable = "products"
	// ProductsCreatedColumn is the table column denoting the products_created relation/edge.
	ProductsCreatedColumn = "creator_id"
	// ProductPkgCreatedTable is the table that holds the product_pkg_created relation/edge.
	ProductPkgCreatedTable = "product_packages"
	// ProductPkgCreatedInverseTable is the table name for the ProductPackage entity.
	// It exists in this package in order to avoid circular dependency with the "productpackage" package.
	ProductPkgCreatedInverseTable = "product_packages"
	// ProductPkgCreatedColumn is the table column denoting the product_pkg_created relation/edge.
	ProductPkgCreatedColumn = "creator_id"
	// JobDocUrlsTable is the table that holds the job_doc_urls relation/edge.
	JobDocUrlsTable = "job_doc_ur_ls"
	// JobDocUrlsInverseTable is the table name for the JobDocURL entity.
	// It exists in this package in order to avoid circular dependency with the "jobdocurl" package.
	JobDocUrlsInverseTable = "job_doc_ur_ls"
	// JobDocUrlsColumn is the table column denoting the job_doc_urls relation/edge.
	JobDocUrlsColumn = "creator_id"
	// PartnerContactsTable is the table that holds the partner_contacts relation/edge.
	PartnerContactsTable = "partner_contacts"
	// PartnerContactsInverseTable is the table name for the PartnerContact entity.
	// It exists in this package in order to avoid circular dependency with the "partnercontact" package.
	PartnerContactsInverseTable = "partner_contacts"
	// PartnerContactsColumn is the table column denoting the partner_contacts relation/edge.
	PartnerContactsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldUpdatedAt,
	FieldExternalID,
	FieldEmail,
	FieldPhone,
	FieldPwd,
	FieldFirstName,
	FieldLastName,
	FieldEmailVerified,
	FieldPhoneVerified,
	FieldPicture,
	FieldStatus,
	FieldRole,
	FieldNote,
	FieldWrongAttempts,
	FieldWrongAttemptAt,
	FieldLockedUntil,
	FieldLocation,
	FieldAcceptedGeneralTerms,
	FieldAcceptedTermsNPrivacy,
}

var (
	// PartnerPrimaryKey and PartnerColumn2 are the table columns denoting the
	// primary key for the partner relation (M2M).
	PartnerPrimaryKey = []string{"partner_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	ExternalIDValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// PwdValidator is a validator for the "pwd" field. It is called by the builders before save.
	PwdValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
	// DefaultPhoneVerified holds the default value on creation for the "phone_verified" field.
	DefaultPhoneVerified bool
	// PictureValidator is a validator for the "picture" field. It is called by the builders before save.
	PictureValidator func(string) error
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
	// DefaultWrongAttempts holds the default value on creation for the "wrong_attempts" field.
	DefaultWrongAttempts uint8
	// DefaultAcceptedGeneralTerms holds the default value on creation for the "accepted_general_terms" field.
	DefaultAcceptedGeneralTerms bool
	// DefaultAcceptedTermsNPrivacy holds the default value on creation for the "accepted_terms_n_privacy" field.
	DefaultAcceptedTermsNPrivacy bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

const DefaultStatus enum.AccountStatus = "PENDING"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enum.AccountStatus) error {
	switch s.String() {
	case "PENDING", "ACTIVE", "DISABLED":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

const DefaultRole enum.Role = "SITE_USER"

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r enum.Role) error {
	switch r.String() {
	case "ADMIN", "SUB_ADMIN", "ESTIMATOR", "REVIEWER", "SITE_USER":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPwd orders the results by the pwd field.
func ByPwd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPwd, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPhoneVerified orders the results by the phone_verified field.
func ByPhoneVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneVerified, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByWrongAttempts orders the results by the wrong_attempts field.
func ByWrongAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWrongAttempts, opts...).ToFunc()
}

// ByWrongAttemptAt orders the results by the wrong_attempt_at field.
func ByWrongAttemptAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWrongAttemptAt, opts...).ToFunc()
}

// ByLockedUntil orders the results by the locked_until field.
func ByLockedUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedUntil, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByAcceptedGeneralTerms orders the results by the accepted_general_terms field.
func ByAcceptedGeneralTerms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcceptedGeneralTerms, opts...).ToFunc()
}

// ByAcceptedTermsNPrivacy orders the results by the accepted_terms_n_privacy field.
func ByAcceptedTermsNPrivacy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcceptedTermsNPrivacy, opts...).ToFunc()
}

// ByAuthsField orders the results by auths field.
func ByAuthsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthsStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuditLogsCount orders the results by audit_logs count.
func ByAuditLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuditLogsStep(), opts...)
	}
}

// ByAuditLogs orders the results by audit_logs terms.
func ByAuditLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuditLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotifyCount orders the results by notify count.
func ByNotifyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyStep(), opts...)
	}
}

// ByNotify orders the results by notify terms.
func ByNotify(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedJobsCount orders the results by created_jobs count.
func ByCreatedJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedJobsStep(), opts...)
	}
}

// ByCreatedJobs orders the results by created_jobs terms.
func ByCreatedJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedEstimatesCount orders the results by created_estimates count.
func ByCreatedEstimatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedEstimatesStep(), opts...)
	}
}

// ByCreatedEstimates orders the results by created_estimates terms.
func ByCreatedEstimates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedEstimatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySalesRepEstimatesCount orders the results by sales_rep_estimates count.
func BySalesRepEstimatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSalesRepEstimatesStep(), opts...)
	}
}

// BySalesRepEstimates orders the results by sales_rep_estimates terms.
func BySalesRepEstimates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesRepEstimatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySalesCount orders the results by sales count.
func BySalesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSalesStep(), opts...)
	}
}

// BySales orders the results by sales terms.
func BySales(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedInstallationJobsCount orders the results by created_installation_jobs count.
func ByCreatedInstallationJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedInstallationJobsStep(), opts...)
	}
}

// ByCreatedInstallationJobs orders the results by created_installation_jobs terms.
func ByCreatedInstallationJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedInstallationJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInstallationLeadsCount orders the results by installation_leads count.
func ByInstallationLeadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInstallationLeadsStep(), opts...)
	}
}

// ByInstallationLeads orders the results by installation_leads terms.
func ByInstallationLeads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstallationLeadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEstimateActivitiesCount orders the results by estimate_activities count.
func ByEstimateActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEstimateActivitiesStep(), opts...)
	}
}

// ByEstimateActivities orders the results by estimate_activities terms.
func ByEstimateActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimateActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobActivitiesCount orders the results by job_activities count.
func ByJobActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobActivitiesStep(), opts...)
	}
}

// ByJobActivities orders the results by job_activities terms.
func ByJobActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnerActivitiesCount orders the results by partner_activities count.
func ByPartnerActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerActivitiesStep(), opts...)
	}
}

// ByPartnerActivities orders the results by partner_activities terms.
func ByPartnerActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserActivitiesCount orders the results by user_activities count.
func ByUserActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserActivitiesStep(), opts...)
	}
}

// ByUserActivities orders the results by user_activities terms.
func ByUserActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobProgressHistoryCount orders the results by job_progress_history count.
func ByJobProgressHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobProgressHistoryStep(), opts...)
	}
}

// ByJobProgressHistory orders the results by job_progress_history terms.
func ByJobProgressHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobProgressHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInstallationJobStatusChangerCount orders the results by installation_job_status_changer count.
func ByInstallationJobStatusChangerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInstallationJobStatusChangerStep(), opts...)
	}
}

// ByInstallationJobStatusChanger orders the results by installation_job_status_changer terms.
func ByInstallationJobStatusChanger(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstallationJobStatusChangerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactUsRequestsCount orders the results by contact_us_requests count.
func ByContactUsRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactUsRequestsStep(), opts...)
	}
}

// ByContactUsRequests orders the results by contact_us_requests terms.
func ByContactUsRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactUsRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnerCount orders the results by partner count.
func ByPartnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerStep(), opts...)
	}
}

// ByPartner orders the results by partner terms.
func ByPartner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveysCount orders the results by surveys count.
func BySurveysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveysStep(), opts...)
	}
}

// BySurveys orders the results by surveys terms.
func BySurveys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveyProgressCount orders the results by survey_progress count.
func BySurveyProgressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyProgressStep(), opts...)
	}
}

// BySurveyProgress orders the results by survey_progress terms.
func BySurveyProgress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyProgressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedTrainingVideosCount orders the results by created_training_videos count.
func ByCreatedTrainingVideosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedTrainingVideosStep(), opts...)
	}
}

// ByCreatedTrainingVideos orders the results by created_training_videos terms.
func ByCreatedTrainingVideos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedTrainingVideosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedTrainingCoursesCount orders the results by created_training_courses count.
func ByCreatedTrainingCoursesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedTrainingCoursesStep(), opts...)
	}
}

// ByCreatedTrainingCourses orders the results by created_training_courses terms.
func ByCreatedTrainingCourses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedTrainingCoursesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobNotesCount orders the results by job_notes count.
func ByJobNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobNotesStep(), opts...)
	}
}

// ByJobNotes orders the results by job_notes terms.
func ByJobNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChatChannelsCount orders the results by chat_channels count.
func ByChatChannelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChatChannelsStep(), opts...)
	}
}

// ByChatChannels orders the results by chat_channels terms.
func ByChatChannels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChatChannelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySentMessagesCount orders the results by sent_messages count.
func BySentMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentMessagesStep(), opts...)
	}
}

// BySentMessages orders the results by sent_messages terms.
func BySentMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceivedMessagesCount orders the results by received_messages count.
func ByReceivedMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceivedMessagesStep(), opts...)
	}
}

// ByReceivedMessages orders the results by received_messages terms.
func ByReceivedMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceivedMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChannelMessageReadCount orders the results by channel_message_read count.
func ByChannelMessageReadCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChannelMessageReadStep(), opts...)
	}
}

// ByChannelMessageRead orders the results by channel_message_read terms.
func ByChannelMessageRead(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChannelMessageReadStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductsCreatedCount orders the results by products_created count.
func ByProductsCreatedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsCreatedStep(), opts...)
	}
}

// ByProductsCreated orders the results by products_created terms.
func ByProductsCreated(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsCreatedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductPkgCreatedCount orders the results by product_pkg_created count.
func ByProductPkgCreatedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductPkgCreatedStep(), opts...)
	}
}

// ByProductPkgCreated orders the results by product_pkg_created terms.
func ByProductPkgCreated(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductPkgCreatedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobDocUrlsCount orders the results by job_doc_urls count.
func ByJobDocUrlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobDocUrlsStep(), opts...)
	}
}

// ByJobDocUrls orders the results by job_doc_urls terms.
func ByJobDocUrls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobDocUrlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnerContactsCount orders the results by partner_contacts count.
func ByPartnerContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerContactsStep(), opts...)
	}
}

// ByPartnerContacts orders the results by partner_contacts terms.
func ByPartnerContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AuthsTable, AuthsColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newAuditLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuditLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
	)
}
func newNotifyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotifyTable, NotifyColumn),
	)
}
func newCreatedJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedJobsTable, CreatedJobsColumn),
	)
}
func newCreatedEstimatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedEstimatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedEstimatesTable, CreatedEstimatesColumn),
	)
}
func newSalesRepEstimatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesRepEstimatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SalesRepEstimatesTable, SalesRepEstimatesColumn),
	)
}
func newSalesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SalesTable, SalesColumn),
	)
}
func newCreatedInstallationJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedInstallationJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedInstallationJobsTable, CreatedInstallationJobsColumn),
	)
}
func newInstallationLeadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstallationLeadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InstallationLeadsTable, InstallationLeadsColumn),
	)
}
func newEstimateActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimateActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EstimateActivitiesTable, EstimateActivitiesColumn),
	)
}
func newJobActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobActivitiesTable, JobActivitiesColumn),
	)
}
func newPartnerActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PartnerActivitiesTable, PartnerActivitiesColumn),
	)
}
func newUserActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserActivitiesTable, UserActivitiesColumn),
	)
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newJobProgressHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobProgressHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobProgressHistoryTable, JobProgressHistoryColumn),
	)
}
func newInstallationJobStatusChangerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstallationJobStatusChangerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InstallationJobStatusChangerTable, InstallationJobStatusChangerColumn),
	)
}
func newContactUsRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactUsRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContactUsRequestsTable, ContactUsRequestsColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PartnerTable, PartnerPrimaryKey...),
	)
}
func newSurveysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveysTable, SurveysColumn),
	)
}
func newSurveyProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyProgressTable, SurveyProgressColumn),
	)
}
func newCreatedTrainingVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedTrainingVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedTrainingVideosTable, CreatedTrainingVideosColumn),
	)
}
func newCreatedTrainingCoursesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedTrainingCoursesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedTrainingCoursesTable, CreatedTrainingCoursesColumn),
	)
}
func newJobNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobNotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobNotesTable, JobNotesColumn),
	)
}
func newChatChannelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChatChannelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChatChannelsTable, ChatChannelsColumn),
	)
}
func newSentMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentMessagesTable, SentMessagesColumn),
	)
}
func newReceivedMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceivedMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceivedMessagesTable, ReceivedMessagesColumn),
	)
}
func newChannelMessageReadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChannelMessageReadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChannelMessageReadTable, ChannelMessageReadColumn),
	)
}
func newProductsCreatedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsCreatedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsCreatedTable, ProductsCreatedColumn),
	)
}
func newProductPkgCreatedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductPkgCreatedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductPkgCreatedTable, ProductPkgCreatedColumn),
	)
}
func newJobDocUrlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobDocUrlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobDocUrlsTable, JobDocUrlsColumn),
	)
}
func newPartnerContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PartnerContactsTable, PartnerContactsColumn),
	)
}

var (
	// enum.AccountStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.AccountStatus)(nil)
	// enum.AccountStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.AccountStatus)(nil)
)

var (
	// enum.Role must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.Role)(nil)
	// enum.Role must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.Role)(nil)
)

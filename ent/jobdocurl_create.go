// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/job"
	"roofix/ent/jobdocurl"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobDocURLCreate is the builder for creating a JobDocURL entity.
type JobDocURLCreate struct {
	config
	mutation *JobDocURLMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (jduc *JobDocURLCreate) SetCreatedAt(t time.Time) *JobDocURLCreate {
	jduc.mutation.SetCreatedAt(t)
	return jduc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jduc *JobDocURLCreate) SetNillableCreatedAt(t *time.Time) *JobDocURLCreate {
	if t != nil {
		jduc.SetCreatedAt(*t)
	}
	return jduc
}

// SetUpdatedAt sets the "updated_at" field.
func (jduc *JobDocURLCreate) SetUpdatedAt(t time.Time) *JobDocURLCreate {
	jduc.mutation.SetUpdatedAt(t)
	return jduc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jduc *JobDocURLCreate) SetNillableUpdatedAt(t *time.Time) *JobDocURLCreate {
	if t != nil {
		jduc.SetUpdatedAt(*t)
	}
	return jduc
}

// SetType sets the "type" field.
func (jduc *JobDocURLCreate) SetType(edut enum.JobDocUrlType) *JobDocURLCreate {
	jduc.mutation.SetType(edut)
	return jduc
}

// SetURL sets the "url" field.
func (jduc *JobDocURLCreate) SetURL(s string) *JobDocURLCreate {
	jduc.mutation.SetURL(s)
	return jduc
}

// SetID sets the "id" field.
func (jduc *JobDocURLCreate) SetID(s string) *JobDocURLCreate {
	jduc.mutation.SetID(s)
	return jduc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jduc *JobDocURLCreate) SetNillableID(s *string) *JobDocURLCreate {
	if s != nil {
		jduc.SetID(*s)
	}
	return jduc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jduc *JobDocURLCreate) SetJobID(id string) *JobDocURLCreate {
	jduc.mutation.SetJobID(id)
	return jduc
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jduc *JobDocURLCreate) SetNillableJobID(id *string) *JobDocURLCreate {
	if id != nil {
		jduc = jduc.SetJobID(*id)
	}
	return jduc
}

// SetJob sets the "job" edge to the Job entity.
func (jduc *JobDocURLCreate) SetJob(j *Job) *JobDocURLCreate {
	return jduc.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jduc *JobDocURLCreate) SetCreatorID(id string) *JobDocURLCreate {
	jduc.mutation.SetCreatorID(id)
	return jduc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jduc *JobDocURLCreate) SetNillableCreatorID(id *string) *JobDocURLCreate {
	if id != nil {
		jduc = jduc.SetCreatorID(*id)
	}
	return jduc
}

// SetCreator sets the "creator" edge to the User entity.
func (jduc *JobDocURLCreate) SetCreator(u *User) *JobDocURLCreate {
	return jduc.SetCreatorID(u.ID)
}

// Mutation returns the JobDocURLMutation object of the builder.
func (jduc *JobDocURLCreate) Mutation() *JobDocURLMutation {
	return jduc.mutation
}

// Save creates the JobDocURL in the database.
func (jduc *JobDocURLCreate) Save(ctx context.Context) (*JobDocURL, error) {
	jduc.defaults()
	return withHooks(ctx, jduc.sqlSave, jduc.mutation, jduc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jduc *JobDocURLCreate) SaveX(ctx context.Context) *JobDocURL {
	v, err := jduc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jduc *JobDocURLCreate) Exec(ctx context.Context) error {
	_, err := jduc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jduc *JobDocURLCreate) ExecX(ctx context.Context) {
	if err := jduc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jduc *JobDocURLCreate) defaults() {
	if _, ok := jduc.mutation.CreatedAt(); !ok {
		v := jobdocurl.DefaultCreatedAt()
		jduc.mutation.SetCreatedAt(v)
	}
	if _, ok := jduc.mutation.UpdatedAt(); !ok {
		v := jobdocurl.DefaultUpdatedAt()
		jduc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jduc.mutation.ID(); !ok {
		v := jobdocurl.DefaultID()
		jduc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jduc *JobDocURLCreate) check() error {
	if _, ok := jduc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobDocURL.created_at"`)}
	}
	if _, ok := jduc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "JobDocURL.updated_at"`)}
	}
	if _, ok := jduc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "JobDocURL.type"`)}
	}
	if v, ok := jduc.mutation.GetType(); ok {
		if err := jobdocurl.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "JobDocURL.type": %w`, err)}
		}
	}
	if _, ok := jduc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "JobDocURL.url"`)}
	}
	if v, ok := jduc.mutation.ID(); ok {
		if err := jobdocurl.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "JobDocURL.id": %w`, err)}
		}
	}
	return nil
}

func (jduc *JobDocURLCreate) sqlSave(ctx context.Context) (*JobDocURL, error) {
	if err := jduc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jduc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jduc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobDocURL.ID type: %T", _spec.ID.Value)
		}
	}
	jduc.mutation.id = &_node.ID
	jduc.mutation.done = true
	return _node, nil
}

func (jduc *JobDocURLCreate) createSpec() (*JobDocURL, *sqlgraph.CreateSpec) {
	var (
		_node = &JobDocURL{config: jduc.config}
		_spec = sqlgraph.NewCreateSpec(jobdocurl.Table, sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString))
	)
	_spec.OnConflict = jduc.conflict
	if id, ok := jduc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jduc.mutation.CreatedAt(); ok {
		_spec.SetField(jobdocurl.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jduc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdocurl.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jduc.mutation.GetType(); ok {
		_spec.SetField(jobdocurl.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := jduc.mutation.URL(); ok {
		_spec.SetField(jobdocurl.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := jduc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.JobTable,
			Columns: []string{jobdocurl.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jduc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdocurl.CreatorTable,
			Columns: []string{jobdocurl.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobDocURL.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobDocURLUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jduc *JobDocURLCreate) OnConflict(opts ...sql.ConflictOption) *JobDocURLUpsertOne {
	jduc.conflict = opts
	return &JobDocURLUpsertOne{
		create: jduc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobDocURL.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jduc *JobDocURLCreate) OnConflictColumns(columns ...string) *JobDocURLUpsertOne {
	jduc.conflict = append(jduc.conflict, sql.ConflictColumns(columns...))
	return &JobDocURLUpsertOne{
		create: jduc,
	}
}

type (
	// JobDocURLUpsertOne is the builder for "upsert"-ing
	//  one JobDocURL node.
	JobDocURLUpsertOne struct {
		create *JobDocURLCreate
	}

	// JobDocURLUpsert is the "OnConflict" setter.
	JobDocURLUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *JobDocURLUpsert) SetUpdatedAt(v time.Time) *JobDocURLUpsert {
	u.Set(jobdocurl.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobDocURLUpsert) UpdateUpdatedAt() *JobDocURLUpsert {
	u.SetExcluded(jobdocurl.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *JobDocURLUpsert) SetType(v enum.JobDocUrlType) *JobDocURLUpsert {
	u.Set(jobdocurl.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobDocURLUpsert) UpdateType() *JobDocURLUpsert {
	u.SetExcluded(jobdocurl.FieldType)
	return u
}

// SetURL sets the "url" field.
func (u *JobDocURLUpsert) SetURL(v string) *JobDocURLUpsert {
	u.Set(jobdocurl.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *JobDocURLUpsert) UpdateURL() *JobDocURLUpsert {
	u.SetExcluded(jobdocurl.FieldURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobDocURL.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobdocurl.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobDocURLUpsertOne) UpdateNewValues() *JobDocURLUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobdocurl.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobdocurl.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobDocURL.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobDocURLUpsertOne) Ignore() *JobDocURLUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobDocURLUpsertOne) DoNothing() *JobDocURLUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobDocURLCreate.OnConflict
// documentation for more info.
func (u *JobDocURLUpsertOne) Update(set func(*JobDocURLUpsert)) *JobDocURLUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobDocURLUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobDocURLUpsertOne) SetUpdatedAt(v time.Time) *JobDocURLUpsertOne {
	return u.Update(func(s *JobDocURLUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobDocURLUpsertOne) UpdateUpdatedAt() *JobDocURLUpsertOne {
	return u.Update(func(s *JobDocURLUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *JobDocURLUpsertOne) SetType(v enum.JobDocUrlType) *JobDocURLUpsertOne {
	return u.Update(func(s *JobDocURLUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobDocURLUpsertOne) UpdateType() *JobDocURLUpsertOne {
	return u.Update(func(s *JobDocURLUpsert) {
		s.UpdateType()
	})
}

// SetURL sets the "url" field.
func (u *JobDocURLUpsertOne) SetURL(v string) *JobDocURLUpsertOne {
	return u.Update(func(s *JobDocURLUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *JobDocURLUpsertOne) UpdateURL() *JobDocURLUpsertOne {
	return u.Update(func(s *JobDocURLUpsert) {
		s.UpdateURL()
	})
}

// Exec executes the query.
func (u *JobDocURLUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobDocURLCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobDocURLUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobDocURLUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: JobDocURLUpsertOne.ID is not supported by MySQL driver. Use JobDocURLUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobDocURLUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobDocURLCreateBulk is the builder for creating many JobDocURL entities in bulk.
type JobDocURLCreateBulk struct {
	config
	builders []*JobDocURLCreate
	conflict []sql.ConflictOption
}

// Save creates the JobDocURL entities in the database.
func (jducb *JobDocURLCreateBulk) Save(ctx context.Context) ([]*JobDocURL, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jducb.builders))
	nodes := make([]*JobDocURL, len(jducb.builders))
	mutators := make([]Mutator, len(jducb.builders))
	for i := range jducb.builders {
		func(i int, root context.Context) {
			builder := jducb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobDocURLMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jducb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jducb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jducb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jducb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jducb *JobDocURLCreateBulk) SaveX(ctx context.Context) []*JobDocURL {
	v, err := jducb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jducb *JobDocURLCreateBulk) Exec(ctx context.Context) error {
	_, err := jducb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jducb *JobDocURLCreateBulk) ExecX(ctx context.Context) {
	if err := jducb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobDocURL.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobDocURLUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jducb *JobDocURLCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobDocURLUpsertBulk {
	jducb.conflict = opts
	return &JobDocURLUpsertBulk{
		create: jducb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobDocURL.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jducb *JobDocURLCreateBulk) OnConflictColumns(columns ...string) *JobDocURLUpsertBulk {
	jducb.conflict = append(jducb.conflict, sql.ConflictColumns(columns...))
	return &JobDocURLUpsertBulk{
		create: jducb,
	}
}

// JobDocURLUpsertBulk is the builder for "upsert"-ing
// a bulk of JobDocURL nodes.
type JobDocURLUpsertBulk struct {
	create *JobDocURLCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobDocURL.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobdocurl.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobDocURLUpsertBulk) UpdateNewValues() *JobDocURLUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobdocurl.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobdocurl.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobDocURL.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobDocURLUpsertBulk) Ignore() *JobDocURLUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobDocURLUpsertBulk) DoNothing() *JobDocURLUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobDocURLCreateBulk.OnConflict
// documentation for more info.
func (u *JobDocURLUpsertBulk) Update(set func(*JobDocURLUpsert)) *JobDocURLUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobDocURLUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobDocURLUpsertBulk) SetUpdatedAt(v time.Time) *JobDocURLUpsertBulk {
	return u.Update(func(s *JobDocURLUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobDocURLUpsertBulk) UpdateUpdatedAt() *JobDocURLUpsertBulk {
	return u.Update(func(s *JobDocURLUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *JobDocURLUpsertBulk) SetType(v enum.JobDocUrlType) *JobDocURLUpsertBulk {
	return u.Update(func(s *JobDocURLUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobDocURLUpsertBulk) UpdateType() *JobDocURLUpsertBulk {
	return u.Update(func(s *JobDocURLUpsert) {
		s.UpdateType()
	})
}

// SetURL sets the "url" field.
func (u *JobDocURLUpsertBulk) SetURL(v string) *JobDocURLUpsertBulk {
	return u.Update(func(s *JobDocURLUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *JobDocURLUpsertBulk) UpdateURL() *JobDocURLUpsertBulk {
	return u.Update(func(s *JobDocURLUpsert) {
		s.UpdateURL()
	})
}

// Exec executes the query.
func (u *JobDocURLUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobDocURLCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobDocURLCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobDocURLUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

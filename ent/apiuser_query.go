// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/auditlog"
	"roofix/ent/channelmessage"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/predicate"
	"roofix/ent/surveyprogress"
	"roofix/ent/useractivity"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiUserQuery is the builder for querying ApiUser entities.
type ApiUserQuery struct {
	config
	ctx                         *QueryContext
	order                       []apiuser.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.ApiUser
	withTokens                  *ApiUserTokenQuery
	withAuditLogs               *AuditLogQuery
	withCreatedEstimates        *EstimateQuery
	withCreatedJobs             *JobQuery
	withCreatedPartners         *PartnerQuery
	withSurveyProgress          *SurveyProgressQuery
	withEstimateActivities      *EstimateActivityQuery
	withUserActivities          *UserActivityQuery
	withPartnerActivities       *PartnerActivityQuery
	withJobActivities           *JobActivityQuery
	withNotifications           *ChannelMessageQuery
	withJobProgressHistory      *JobProgressHistoryQuery
	loadTotal                   []func(context.Context, []*ApiUser) error
	modifiers                   []func(*sql.Selector)
	withNamedTokens             map[string]*ApiUserTokenQuery
	withNamedAuditLogs          map[string]*AuditLogQuery
	withNamedCreatedEstimates   map[string]*EstimateQuery
	withNamedCreatedJobs        map[string]*JobQuery
	withNamedCreatedPartners    map[string]*PartnerQuery
	withNamedSurveyProgress     map[string]*SurveyProgressQuery
	withNamedEstimateActivities map[string]*EstimateActivityQuery
	withNamedUserActivities     map[string]*UserActivityQuery
	withNamedPartnerActivities  map[string]*PartnerActivityQuery
	withNamedJobActivities      map[string]*JobActivityQuery
	withNamedNotifications      map[string]*ChannelMessageQuery
	withNamedJobProgressHistory map[string]*JobProgressHistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ApiUserQuery builder.
func (auq *ApiUserQuery) Where(ps ...predicate.ApiUser) *ApiUserQuery {
	auq.predicates = append(auq.predicates, ps...)
	return auq
}

// Limit the number of records to be returned by this query.
func (auq *ApiUserQuery) Limit(limit int) *ApiUserQuery {
	auq.ctx.Limit = &limit
	return auq
}

// Offset to start from.
func (auq *ApiUserQuery) Offset(offset int) *ApiUserQuery {
	auq.ctx.Offset = &offset
	return auq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (auq *ApiUserQuery) Unique(unique bool) *ApiUserQuery {
	auq.ctx.Unique = &unique
	return auq
}

// Order specifies how the records should be ordered.
func (auq *ApiUserQuery) Order(o ...apiuser.OrderOption) *ApiUserQuery {
	auq.order = append(auq.order, o...)
	return auq
}

// QueryTokens chains the current query on the "tokens" edge.
func (auq *ApiUserQuery) QueryTokens() *ApiUserTokenQuery {
	query := (&ApiUserTokenClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(apiusertoken.Table, apiusertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.TokensTable, apiuser.TokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuditLogs chains the current query on the "audit_logs" edge.
func (auq *ApiUserQuery) QueryAuditLogs() *AuditLogQuery {
	query := (&AuditLogClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(auditlog.Table, auditlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.AuditLogsTable, apiuser.AuditLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedEstimates chains the current query on the "created_estimates" edge.
func (auq *ApiUserQuery) QueryCreatedEstimates() *EstimateQuery {
	query := (&EstimateClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.CreatedEstimatesTable, apiuser.CreatedEstimatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedJobs chains the current query on the "created_jobs" edge.
func (auq *ApiUserQuery) QueryCreatedJobs() *JobQuery {
	query := (&JobClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.CreatedJobsTable, apiuser.CreatedJobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedPartners chains the current query on the "created_partners" edge.
func (auq *ApiUserQuery) QueryCreatedPartners() *PartnerQuery {
	query := (&PartnerClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.CreatedPartnersTable, apiuser.CreatedPartnersColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySurveyProgress chains the current query on the "survey_progress" edge.
func (auq *ApiUserQuery) QuerySurveyProgress() *SurveyProgressQuery {
	query := (&SurveyProgressClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(surveyprogress.Table, surveyprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.SurveyProgressTable, apiuser.SurveyProgressColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEstimateActivities chains the current query on the "estimate_activities" edge.
func (auq *ApiUserQuery) QueryEstimateActivities() *EstimateActivityQuery {
	query := (&EstimateActivityClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(estimateactivity.Table, estimateactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.EstimateActivitiesTable, apiuser.EstimateActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserActivities chains the current query on the "user_activities" edge.
func (auq *ApiUserQuery) QueryUserActivities() *UserActivityQuery {
	query := (&UserActivityClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(useractivity.Table, useractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.UserActivitiesTable, apiuser.UserActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartnerActivities chains the current query on the "partner_activities" edge.
func (auq *ApiUserQuery) QueryPartnerActivities() *PartnerActivityQuery {
	query := (&PartnerActivityClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(partneractivity.Table, partneractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.PartnerActivitiesTable, apiuser.PartnerActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobActivities chains the current query on the "job_activities" edge.
func (auq *ApiUserQuery) QueryJobActivities() *JobActivityQuery {
	query := (&JobActivityClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(jobactivity.Table, jobactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.JobActivitiesTable, apiuser.JobActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (auq *ApiUserQuery) QueryNotifications() *ChannelMessageQuery {
	query := (&ChannelMessageClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(channelmessage.Table, channelmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.NotificationsTable, apiuser.NotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobProgressHistory chains the current query on the "job_progress_history" edge.
func (auq *ApiUserQuery) QueryJobProgressHistory() *JobProgressHistoryQuery {
	query := (&JobProgressHistoryClient{config: auq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := auq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := auq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, selector),
			sqlgraph.To(jobprogresshistory.Table, jobprogresshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.JobProgressHistoryTable, apiuser.JobProgressHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(auq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ApiUser entity from the query.
// Returns a *NotFoundError when no ApiUser was found.
func (auq *ApiUserQuery) First(ctx context.Context) (*ApiUser, error) {
	nodes, err := auq.Limit(1).All(setContextOp(ctx, auq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{apiuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (auq *ApiUserQuery) FirstX(ctx context.Context) *ApiUser {
	node, err := auq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ApiUser ID from the query.
// Returns a *NotFoundError when no ApiUser ID was found.
func (auq *ApiUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = auq.Limit(1).IDs(setContextOp(ctx, auq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{apiuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (auq *ApiUserQuery) FirstIDX(ctx context.Context) string {
	id, err := auq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ApiUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ApiUser entity is found.
// Returns a *NotFoundError when no ApiUser entities are found.
func (auq *ApiUserQuery) Only(ctx context.Context) (*ApiUser, error) {
	nodes, err := auq.Limit(2).All(setContextOp(ctx, auq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{apiuser.Label}
	default:
		return nil, &NotSingularError{apiuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (auq *ApiUserQuery) OnlyX(ctx context.Context) *ApiUser {
	node, err := auq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ApiUser ID in the query.
// Returns a *NotSingularError when more than one ApiUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (auq *ApiUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = auq.Limit(2).IDs(setContextOp(ctx, auq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{apiuser.Label}
	default:
		err = &NotSingularError{apiuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (auq *ApiUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := auq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ApiUsers.
func (auq *ApiUserQuery) All(ctx context.Context) ([]*ApiUser, error) {
	ctx = setContextOp(ctx, auq.ctx, "All")
	if err := auq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ApiUser, *ApiUserQuery]()
	return withInterceptors[[]*ApiUser](ctx, auq, qr, auq.inters)
}

// AllX is like All, but panics if an error occurs.
func (auq *ApiUserQuery) AllX(ctx context.Context) []*ApiUser {
	nodes, err := auq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ApiUser IDs.
func (auq *ApiUserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if auq.ctx.Unique == nil && auq.path != nil {
		auq.Unique(true)
	}
	ctx = setContextOp(ctx, auq.ctx, "IDs")
	if err = auq.Select(apiuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (auq *ApiUserQuery) IDsX(ctx context.Context) []string {
	ids, err := auq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (auq *ApiUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, auq.ctx, "Count")
	if err := auq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, auq, querierCount[*ApiUserQuery](), auq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (auq *ApiUserQuery) CountX(ctx context.Context) int {
	count, err := auq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (auq *ApiUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, auq.ctx, "Exist")
	switch _, err := auq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (auq *ApiUserQuery) ExistX(ctx context.Context) bool {
	exist, err := auq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ApiUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (auq *ApiUserQuery) Clone() *ApiUserQuery {
	if auq == nil {
		return nil
	}
	return &ApiUserQuery{
		config:                 auq.config,
		ctx:                    auq.ctx.Clone(),
		order:                  append([]apiuser.OrderOption{}, auq.order...),
		inters:                 append([]Interceptor{}, auq.inters...),
		predicates:             append([]predicate.ApiUser{}, auq.predicates...),
		withTokens:             auq.withTokens.Clone(),
		withAuditLogs:          auq.withAuditLogs.Clone(),
		withCreatedEstimates:   auq.withCreatedEstimates.Clone(),
		withCreatedJobs:        auq.withCreatedJobs.Clone(),
		withCreatedPartners:    auq.withCreatedPartners.Clone(),
		withSurveyProgress:     auq.withSurveyProgress.Clone(),
		withEstimateActivities: auq.withEstimateActivities.Clone(),
		withUserActivities:     auq.withUserActivities.Clone(),
		withPartnerActivities:  auq.withPartnerActivities.Clone(),
		withJobActivities:      auq.withJobActivities.Clone(),
		withNotifications:      auq.withNotifications.Clone(),
		withJobProgressHistory: auq.withJobProgressHistory.Clone(),
		// clone intermediate query.
		sql:  auq.sql.Clone(),
		path: auq.path,
	}
}

// WithTokens tells the query-builder to eager-load the nodes that are connected to
// the "tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithTokens(opts ...func(*ApiUserTokenQuery)) *ApiUserQuery {
	query := (&ApiUserTokenClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withTokens = query
	return auq
}

// WithAuditLogs tells the query-builder to eager-load the nodes that are connected to
// the "audit_logs" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithAuditLogs(opts ...func(*AuditLogQuery)) *ApiUserQuery {
	query := (&AuditLogClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withAuditLogs = query
	return auq
}

// WithCreatedEstimates tells the query-builder to eager-load the nodes that are connected to
// the "created_estimates" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithCreatedEstimates(opts ...func(*EstimateQuery)) *ApiUserQuery {
	query := (&EstimateClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withCreatedEstimates = query
	return auq
}

// WithCreatedJobs tells the query-builder to eager-load the nodes that are connected to
// the "created_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithCreatedJobs(opts ...func(*JobQuery)) *ApiUserQuery {
	query := (&JobClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withCreatedJobs = query
	return auq
}

// WithCreatedPartners tells the query-builder to eager-load the nodes that are connected to
// the "created_partners" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithCreatedPartners(opts ...func(*PartnerQuery)) *ApiUserQuery {
	query := (&PartnerClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withCreatedPartners = query
	return auq
}

// WithSurveyProgress tells the query-builder to eager-load the nodes that are connected to
// the "survey_progress" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithSurveyProgress(opts ...func(*SurveyProgressQuery)) *ApiUserQuery {
	query := (&SurveyProgressClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withSurveyProgress = query
	return auq
}

// WithEstimateActivities tells the query-builder to eager-load the nodes that are connected to
// the "estimate_activities" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithEstimateActivities(opts ...func(*EstimateActivityQuery)) *ApiUserQuery {
	query := (&EstimateActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withEstimateActivities = query
	return auq
}

// WithUserActivities tells the query-builder to eager-load the nodes that are connected to
// the "user_activities" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithUserActivities(opts ...func(*UserActivityQuery)) *ApiUserQuery {
	query := (&UserActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withUserActivities = query
	return auq
}

// WithPartnerActivities tells the query-builder to eager-load the nodes that are connected to
// the "partner_activities" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithPartnerActivities(opts ...func(*PartnerActivityQuery)) *ApiUserQuery {
	query := (&PartnerActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withPartnerActivities = query
	return auq
}

// WithJobActivities tells the query-builder to eager-load the nodes that are connected to
// the "job_activities" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithJobActivities(opts ...func(*JobActivityQuery)) *ApiUserQuery {
	query := (&JobActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withJobActivities = query
	return auq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNotifications(opts ...func(*ChannelMessageQuery)) *ApiUserQuery {
	query := (&ChannelMessageClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withNotifications = query
	return auq
}

// WithJobProgressHistory tells the query-builder to eager-load the nodes that are connected to
// the "job_progress_history" edge. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithJobProgressHistory(opts ...func(*JobProgressHistoryQuery)) *ApiUserQuery {
	query := (&JobProgressHistoryClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	auq.withJobProgressHistory = query
	return auq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ApiUser.Query().
//		GroupBy(apiuser.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (auq *ApiUserQuery) GroupBy(field string, fields ...string) *ApiUserGroupBy {
	auq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ApiUserGroupBy{build: auq}
	grbuild.flds = &auq.ctx.Fields
	grbuild.label = apiuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.ApiUser.Query().
//		Select(apiuser.FieldCreatedAt).
//		Scan(ctx, &v)
func (auq *ApiUserQuery) Select(fields ...string) *ApiUserSelect {
	auq.ctx.Fields = append(auq.ctx.Fields, fields...)
	sbuild := &ApiUserSelect{ApiUserQuery: auq}
	sbuild.label = apiuser.Label
	sbuild.flds, sbuild.scan = &auq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ApiUserSelect configured with the given aggregations.
func (auq *ApiUserQuery) Aggregate(fns ...AggregateFunc) *ApiUserSelect {
	return auq.Select().Aggregate(fns...)
}

func (auq *ApiUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range auq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, auq); err != nil {
				return err
			}
		}
	}
	for _, f := range auq.ctx.Fields {
		if !apiuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if auq.path != nil {
		prev, err := auq.path(ctx)
		if err != nil {
			return err
		}
		auq.sql = prev
	}
	return nil
}

func (auq *ApiUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ApiUser, error) {
	var (
		nodes       = []*ApiUser{}
		_spec       = auq.querySpec()
		loadedTypes = [12]bool{
			auq.withTokens != nil,
			auq.withAuditLogs != nil,
			auq.withCreatedEstimates != nil,
			auq.withCreatedJobs != nil,
			auq.withCreatedPartners != nil,
			auq.withSurveyProgress != nil,
			auq.withEstimateActivities != nil,
			auq.withUserActivities != nil,
			auq.withPartnerActivities != nil,
			auq.withJobActivities != nil,
			auq.withNotifications != nil,
			auq.withJobProgressHistory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ApiUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ApiUser{config: auq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(auq.modifiers) > 0 {
		_spec.Modifiers = auq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, auq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := auq.withTokens; query != nil {
		if err := auq.loadTokens(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.Tokens = []*ApiUserToken{} },
			func(n *ApiUser, e *ApiUserToken) { n.Edges.Tokens = append(n.Edges.Tokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withAuditLogs; query != nil {
		if err := auq.loadAuditLogs(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.AuditLogs = []*AuditLog{} },
			func(n *ApiUser, e *AuditLog) { n.Edges.AuditLogs = append(n.Edges.AuditLogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withCreatedEstimates; query != nil {
		if err := auq.loadCreatedEstimates(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.CreatedEstimates = []*Estimate{} },
			func(n *ApiUser, e *Estimate) { n.Edges.CreatedEstimates = append(n.Edges.CreatedEstimates, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withCreatedJobs; query != nil {
		if err := auq.loadCreatedJobs(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.CreatedJobs = []*Job{} },
			func(n *ApiUser, e *Job) { n.Edges.CreatedJobs = append(n.Edges.CreatedJobs, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withCreatedPartners; query != nil {
		if err := auq.loadCreatedPartners(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.CreatedPartners = []*Partner{} },
			func(n *ApiUser, e *Partner) { n.Edges.CreatedPartners = append(n.Edges.CreatedPartners, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withSurveyProgress; query != nil {
		if err := auq.loadSurveyProgress(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.SurveyProgress = []*SurveyProgress{} },
			func(n *ApiUser, e *SurveyProgress) { n.Edges.SurveyProgress = append(n.Edges.SurveyProgress, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withEstimateActivities; query != nil {
		if err := auq.loadEstimateActivities(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.EstimateActivities = []*EstimateActivity{} },
			func(n *ApiUser, e *EstimateActivity) {
				n.Edges.EstimateActivities = append(n.Edges.EstimateActivities, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := auq.withUserActivities; query != nil {
		if err := auq.loadUserActivities(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.UserActivities = []*UserActivity{} },
			func(n *ApiUser, e *UserActivity) { n.Edges.UserActivities = append(n.Edges.UserActivities, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withPartnerActivities; query != nil {
		if err := auq.loadPartnerActivities(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.PartnerActivities = []*PartnerActivity{} },
			func(n *ApiUser, e *PartnerActivity) { n.Edges.PartnerActivities = append(n.Edges.PartnerActivities, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withJobActivities; query != nil {
		if err := auq.loadJobActivities(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.JobActivities = []*JobActivity{} },
			func(n *ApiUser, e *JobActivity) { n.Edges.JobActivities = append(n.Edges.JobActivities, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withNotifications; query != nil {
		if err := auq.loadNotifications(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.Notifications = []*ChannelMessage{} },
			func(n *ApiUser, e *ChannelMessage) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := auq.withJobProgressHistory; query != nil {
		if err := auq.loadJobProgressHistory(ctx, query, nodes,
			func(n *ApiUser) { n.Edges.JobProgressHistory = []*JobProgressHistory{} },
			func(n *ApiUser, e *JobProgressHistory) {
				n.Edges.JobProgressHistory = append(n.Edges.JobProgressHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedTokens {
		if err := auq.loadTokens(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedTokens(name) },
			func(n *ApiUser, e *ApiUserToken) { n.appendNamedTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedAuditLogs {
		if err := auq.loadAuditLogs(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedAuditLogs(name) },
			func(n *ApiUser, e *AuditLog) { n.appendNamedAuditLogs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedCreatedEstimates {
		if err := auq.loadCreatedEstimates(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedCreatedEstimates(name) },
			func(n *ApiUser, e *Estimate) { n.appendNamedCreatedEstimates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedCreatedJobs {
		if err := auq.loadCreatedJobs(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedCreatedJobs(name) },
			func(n *ApiUser, e *Job) { n.appendNamedCreatedJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedCreatedPartners {
		if err := auq.loadCreatedPartners(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedCreatedPartners(name) },
			func(n *ApiUser, e *Partner) { n.appendNamedCreatedPartners(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedSurveyProgress {
		if err := auq.loadSurveyProgress(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedSurveyProgress(name) },
			func(n *ApiUser, e *SurveyProgress) { n.appendNamedSurveyProgress(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedEstimateActivities {
		if err := auq.loadEstimateActivities(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedEstimateActivities(name) },
			func(n *ApiUser, e *EstimateActivity) { n.appendNamedEstimateActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedUserActivities {
		if err := auq.loadUserActivities(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedUserActivities(name) },
			func(n *ApiUser, e *UserActivity) { n.appendNamedUserActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedPartnerActivities {
		if err := auq.loadPartnerActivities(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedPartnerActivities(name) },
			func(n *ApiUser, e *PartnerActivity) { n.appendNamedPartnerActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedJobActivities {
		if err := auq.loadJobActivities(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedJobActivities(name) },
			func(n *ApiUser, e *JobActivity) { n.appendNamedJobActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedNotifications {
		if err := auq.loadNotifications(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedNotifications(name) },
			func(n *ApiUser, e *ChannelMessage) { n.appendNamedNotifications(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range auq.withNamedJobProgressHistory {
		if err := auq.loadJobProgressHistory(ctx, query, nodes,
			func(n *ApiUser) { n.appendNamedJobProgressHistory(name) },
			func(n *ApiUser, e *JobProgressHistory) { n.appendNamedJobProgressHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range auq.loadTotal {
		if err := auq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (auq *ApiUserQuery) loadTokens(ctx context.Context, query *ApiUserTokenQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *ApiUserToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ApiUserToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.TokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadAuditLogs(ctx context.Context, query *AuditLogQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *AuditLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AuditLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.AuditLogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadCreatedEstimates(ctx context.Context, query *EstimateQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *Estimate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Estimate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.CreatedEstimatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadCreatedJobs(ctx context.Context, query *JobQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.CreatedJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadCreatedPartners(ctx context.Context, query *PartnerQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *Partner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Partner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.CreatedPartnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadSurveyProgress(ctx context.Context, query *SurveyProgressQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *SurveyProgress)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SurveyProgress(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.SurveyProgressColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadEstimateActivities(ctx context.Context, query *EstimateActivityQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *EstimateActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EstimateActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.EstimateActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadUserActivities(ctx context.Context, query *UserActivityQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *UserActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.UserActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadPartnerActivities(ctx context.Context, query *PartnerActivityQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *PartnerActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.PartnerActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadJobActivities(ctx context.Context, query *JobActivityQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *JobActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.JobActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadNotifications(ctx context.Context, query *ChannelMessageQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *ChannelMessage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ChannelMessage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.NotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.from_api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "from_api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "from_api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (auq *ApiUserQuery) loadJobProgressHistory(ctx context.Context, query *JobProgressHistoryQuery, nodes []*ApiUser, init func(*ApiUser), assign func(*ApiUser, *JobProgressHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ApiUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobProgressHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(apiuser.JobProgressHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.api_user_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "api_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "api_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (auq *ApiUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := auq.querySpec()
	if len(auq.modifiers) > 0 {
		_spec.Modifiers = auq.modifiers
	}
	_spec.Node.Columns = auq.ctx.Fields
	if len(auq.ctx.Fields) > 0 {
		_spec.Unique = auq.ctx.Unique != nil && *auq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, auq.driver, _spec)
}

func (auq *ApiUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(apiuser.Table, apiuser.Columns, sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString))
	_spec.From = auq.sql
	if unique := auq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if auq.path != nil {
		_spec.Unique = true
	}
	if fields := auq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiuser.FieldID)
		for i := range fields {
			if fields[i] != apiuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := auq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := auq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := auq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := auq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (auq *ApiUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(auq.driver.Dialect())
	t1 := builder.Table(apiuser.Table)
	columns := auq.ctx.Fields
	if len(columns) == 0 {
		columns = apiuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if auq.sql != nil {
		selector = auq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if auq.ctx.Unique != nil && *auq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range auq.modifiers {
		m(selector)
	}
	for _, p := range auq.predicates {
		p(selector)
	}
	for _, p := range auq.order {
		p(selector)
	}
	if offset := auq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := auq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (auq *ApiUserQuery) Modify(modifiers ...func(s *sql.Selector)) *ApiUserSelect {
	auq.modifiers = append(auq.modifiers, modifiers...)
	return auq.Select()
}

// WithNamedTokens tells the query-builder to eager-load the nodes that are connected to the "tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedTokens(name string, opts ...func(*ApiUserTokenQuery)) *ApiUserQuery {
	query := (&ApiUserTokenClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedTokens == nil {
		auq.withNamedTokens = make(map[string]*ApiUserTokenQuery)
	}
	auq.withNamedTokens[name] = query
	return auq
}

// WithNamedAuditLogs tells the query-builder to eager-load the nodes that are connected to the "audit_logs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedAuditLogs(name string, opts ...func(*AuditLogQuery)) *ApiUserQuery {
	query := (&AuditLogClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedAuditLogs == nil {
		auq.withNamedAuditLogs = make(map[string]*AuditLogQuery)
	}
	auq.withNamedAuditLogs[name] = query
	return auq
}

// WithNamedCreatedEstimates tells the query-builder to eager-load the nodes that are connected to the "created_estimates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedCreatedEstimates(name string, opts ...func(*EstimateQuery)) *ApiUserQuery {
	query := (&EstimateClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedCreatedEstimates == nil {
		auq.withNamedCreatedEstimates = make(map[string]*EstimateQuery)
	}
	auq.withNamedCreatedEstimates[name] = query
	return auq
}

// WithNamedCreatedJobs tells the query-builder to eager-load the nodes that are connected to the "created_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedCreatedJobs(name string, opts ...func(*JobQuery)) *ApiUserQuery {
	query := (&JobClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedCreatedJobs == nil {
		auq.withNamedCreatedJobs = make(map[string]*JobQuery)
	}
	auq.withNamedCreatedJobs[name] = query
	return auq
}

// WithNamedCreatedPartners tells the query-builder to eager-load the nodes that are connected to the "created_partners"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedCreatedPartners(name string, opts ...func(*PartnerQuery)) *ApiUserQuery {
	query := (&PartnerClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedCreatedPartners == nil {
		auq.withNamedCreatedPartners = make(map[string]*PartnerQuery)
	}
	auq.withNamedCreatedPartners[name] = query
	return auq
}

// WithNamedSurveyProgress tells the query-builder to eager-load the nodes that are connected to the "survey_progress"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedSurveyProgress(name string, opts ...func(*SurveyProgressQuery)) *ApiUserQuery {
	query := (&SurveyProgressClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedSurveyProgress == nil {
		auq.withNamedSurveyProgress = make(map[string]*SurveyProgressQuery)
	}
	auq.withNamedSurveyProgress[name] = query
	return auq
}

// WithNamedEstimateActivities tells the query-builder to eager-load the nodes that are connected to the "estimate_activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedEstimateActivities(name string, opts ...func(*EstimateActivityQuery)) *ApiUserQuery {
	query := (&EstimateActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedEstimateActivities == nil {
		auq.withNamedEstimateActivities = make(map[string]*EstimateActivityQuery)
	}
	auq.withNamedEstimateActivities[name] = query
	return auq
}

// WithNamedUserActivities tells the query-builder to eager-load the nodes that are connected to the "user_activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedUserActivities(name string, opts ...func(*UserActivityQuery)) *ApiUserQuery {
	query := (&UserActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedUserActivities == nil {
		auq.withNamedUserActivities = make(map[string]*UserActivityQuery)
	}
	auq.withNamedUserActivities[name] = query
	return auq
}

// WithNamedPartnerActivities tells the query-builder to eager-load the nodes that are connected to the "partner_activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedPartnerActivities(name string, opts ...func(*PartnerActivityQuery)) *ApiUserQuery {
	query := (&PartnerActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedPartnerActivities == nil {
		auq.withNamedPartnerActivities = make(map[string]*PartnerActivityQuery)
	}
	auq.withNamedPartnerActivities[name] = query
	return auq
}

// WithNamedJobActivities tells the query-builder to eager-load the nodes that are connected to the "job_activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedJobActivities(name string, opts ...func(*JobActivityQuery)) *ApiUserQuery {
	query := (&JobActivityClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedJobActivities == nil {
		auq.withNamedJobActivities = make(map[string]*JobActivityQuery)
	}
	auq.withNamedJobActivities[name] = query
	return auq
}

// WithNamedNotifications tells the query-builder to eager-load the nodes that are connected to the "notifications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedNotifications(name string, opts ...func(*ChannelMessageQuery)) *ApiUserQuery {
	query := (&ChannelMessageClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedNotifications == nil {
		auq.withNamedNotifications = make(map[string]*ChannelMessageQuery)
	}
	auq.withNamedNotifications[name] = query
	return auq
}

// WithNamedJobProgressHistory tells the query-builder to eager-load the nodes that are connected to the "job_progress_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (auq *ApiUserQuery) WithNamedJobProgressHistory(name string, opts ...func(*JobProgressHistoryQuery)) *ApiUserQuery {
	query := (&JobProgressHistoryClient{config: auq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if auq.withNamedJobProgressHistory == nil {
		auq.withNamedJobProgressHistory = make(map[string]*JobProgressHistoryQuery)
	}
	auq.withNamedJobProgressHistory[name] = query
	return auq
}

// ApiUserGroupBy is the group-by builder for ApiUser entities.
type ApiUserGroupBy struct {
	selector
	build *ApiUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (augb *ApiUserGroupBy) Aggregate(fns ...AggregateFunc) *ApiUserGroupBy {
	augb.fns = append(augb.fns, fns...)
	return augb
}

// Scan applies the selector query and scans the result into the given value.
func (augb *ApiUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, augb.build.ctx, "GroupBy")
	if err := augb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApiUserQuery, *ApiUserGroupBy](ctx, augb.build, augb, augb.build.inters, v)
}

func (augb *ApiUserGroupBy) sqlScan(ctx context.Context, root *ApiUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(augb.fns))
	for _, fn := range augb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*augb.flds)+len(augb.fns))
		for _, f := range *augb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*augb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := augb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ApiUserSelect is the builder for selecting fields of ApiUser entities.
type ApiUserSelect struct {
	*ApiUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aus *ApiUserSelect) Aggregate(fns ...AggregateFunc) *ApiUserSelect {
	aus.fns = append(aus.fns, fns...)
	return aus
}

// Scan applies the selector query and scans the result into the given value.
func (aus *ApiUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aus.ctx, "Select")
	if err := aus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApiUserQuery, *ApiUserSelect](ctx, aus.ApiUserQuery, aus, aus.inters, v)
}

func (aus *ApiUserSelect) sqlScan(ctx context.Context, root *ApiUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aus.fns))
	for _, fn := range aus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (aus *ApiUserSelect) Modify(modifiers ...func(s *sql.Selector)) *ApiUserSelect {
	aus.modifiers = append(aus.modifiers, modifiers...)
	return aus
}

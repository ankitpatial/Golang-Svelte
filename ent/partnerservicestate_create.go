// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnerservicestate"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerServiceStateCreate is the builder for creating a PartnerServiceState entity.
type PartnerServiceStateCreate struct {
	config
	mutation *PartnerServiceStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pssc *PartnerServiceStateCreate) SetCreatedAt(t time.Time) *PartnerServiceStateCreate {
	pssc.mutation.SetCreatedAt(t)
	return pssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pssc *PartnerServiceStateCreate) SetNillableCreatedAt(t *time.Time) *PartnerServiceStateCreate {
	if t != nil {
		pssc.SetCreatedAt(*t)
	}
	return pssc
}

// SetUpdatedAt sets the "updated_at" field.
func (pssc *PartnerServiceStateCreate) SetUpdatedAt(t time.Time) *PartnerServiceStateCreate {
	pssc.mutation.SetUpdatedAt(t)
	return pssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pssc *PartnerServiceStateCreate) SetNillableUpdatedAt(t *time.Time) *PartnerServiceStateCreate {
	if t != nil {
		pssc.SetUpdatedAt(*t)
	}
	return pssc
}

// SetCountry sets the "country" field.
func (pssc *PartnerServiceStateCreate) SetCountry(s string) *PartnerServiceStateCreate {
	pssc.mutation.SetCountry(s)
	return pssc
}

// SetState sets the "state" field.
func (pssc *PartnerServiceStateCreate) SetState(s string) *PartnerServiceStateCreate {
	pssc.mutation.SetState(s)
	return pssc
}

// SetLicenseNo sets the "license_no" field.
func (pssc *PartnerServiceStateCreate) SetLicenseNo(s string) *PartnerServiceStateCreate {
	pssc.mutation.SetLicenseNo(s)
	return pssc
}

// SetNillableLicenseNo sets the "license_no" field if the given value is not nil.
func (pssc *PartnerServiceStateCreate) SetNillableLicenseNo(s *string) *PartnerServiceStateCreate {
	if s != nil {
		pssc.SetLicenseNo(*s)
	}
	return pssc
}

// SetLicenseExpDate sets the "license_exp_date" field.
func (pssc *PartnerServiceStateCreate) SetLicenseExpDate(t time.Time) *PartnerServiceStateCreate {
	pssc.mutation.SetLicenseExpDate(t)
	return pssc
}

// SetNillableLicenseExpDate sets the "license_exp_date" field if the given value is not nil.
func (pssc *PartnerServiceStateCreate) SetNillableLicenseExpDate(t *time.Time) *PartnerServiceStateCreate {
	if t != nil {
		pssc.SetLicenseExpDate(*t)
	}
	return pssc
}

// SetProofDocID sets the "proof_doc_id" field.
func (pssc *PartnerServiceStateCreate) SetProofDocID(s string) *PartnerServiceStateCreate {
	pssc.mutation.SetProofDocID(s)
	return pssc
}

// SetNillableProofDocID sets the "proof_doc_id" field if the given value is not nil.
func (pssc *PartnerServiceStateCreate) SetNillableProofDocID(s *string) *PartnerServiceStateCreate {
	if s != nil {
		pssc.SetProofDocID(*s)
	}
	return pssc
}

// SetID sets the "id" field.
func (pssc *PartnerServiceStateCreate) SetID(s string) *PartnerServiceStateCreate {
	pssc.mutation.SetID(s)
	return pssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pssc *PartnerServiceStateCreate) SetNillableID(s *string) *PartnerServiceStateCreate {
	if s != nil {
		pssc.SetID(*s)
	}
	return pssc
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pssc *PartnerServiceStateCreate) SetPartnerID(id string) *PartnerServiceStateCreate {
	pssc.mutation.SetPartnerID(id)
	return pssc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pssc *PartnerServiceStateCreate) SetPartner(p *Partner) *PartnerServiceStateCreate {
	return pssc.SetPartnerID(p.ID)
}

// Mutation returns the PartnerServiceStateMutation object of the builder.
func (pssc *PartnerServiceStateCreate) Mutation() *PartnerServiceStateMutation {
	return pssc.mutation
}

// Save creates the PartnerServiceState in the database.
func (pssc *PartnerServiceStateCreate) Save(ctx context.Context) (*PartnerServiceState, error) {
	pssc.defaults()
	return withHooks(ctx, pssc.sqlSave, pssc.mutation, pssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pssc *PartnerServiceStateCreate) SaveX(ctx context.Context) *PartnerServiceState {
	v, err := pssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pssc *PartnerServiceStateCreate) Exec(ctx context.Context) error {
	_, err := pssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssc *PartnerServiceStateCreate) ExecX(ctx context.Context) {
	if err := pssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pssc *PartnerServiceStateCreate) defaults() {
	if _, ok := pssc.mutation.CreatedAt(); !ok {
		v := partnerservicestate.DefaultCreatedAt()
		pssc.mutation.SetCreatedAt(v)
	}
	if _, ok := pssc.mutation.UpdatedAt(); !ok {
		v := partnerservicestate.DefaultUpdatedAt()
		pssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pssc.mutation.ID(); !ok {
		v := partnerservicestate.DefaultID()
		pssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssc *PartnerServiceStateCreate) check() error {
	if _, ok := pssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnerServiceState.created_at"`)}
	}
	if _, ok := pssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PartnerServiceState.updated_at"`)}
	}
	if _, ok := pssc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "PartnerServiceState.country"`)}
	}
	if v, ok := pssc.mutation.Country(); ok {
		if err := partnerservicestate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.country": %w`, err)}
		}
	}
	if _, ok := pssc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "PartnerServiceState.state"`)}
	}
	if v, ok := pssc.mutation.State(); ok {
		if err := partnerservicestate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.state": %w`, err)}
		}
	}
	if v, ok := pssc.mutation.LicenseNo(); ok {
		if err := partnerservicestate.LicenseNoValidator(v); err != nil {
			return &ValidationError{Name: "license_no", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.license_no": %w`, err)}
		}
	}
	if v, ok := pssc.mutation.ProofDocID(); ok {
		if err := partnerservicestate.ProofDocIDValidator(v); err != nil {
			return &ValidationError{Name: "proof_doc_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.proof_doc_id": %w`, err)}
		}
	}
	if v, ok := pssc.mutation.ID(); ok {
		if err := partnerservicestate.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.id": %w`, err)}
		}
	}
	if _, ok := pssc.mutation.PartnerID(); !ok {
		return &ValidationError{Name: "partner", err: errors.New(`ent: missing required edge "PartnerServiceState.partner"`)}
	}
	return nil
}

func (pssc *PartnerServiceStateCreate) sqlSave(ctx context.Context) (*PartnerServiceState, error) {
	if err := pssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PartnerServiceState.ID type: %T", _spec.ID.Value)
		}
	}
	pssc.mutation.id = &_node.ID
	pssc.mutation.done = true
	return _node, nil
}

func (pssc *PartnerServiceStateCreate) createSpec() (*PartnerServiceState, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnerServiceState{config: pssc.config}
		_spec = sqlgraph.NewCreateSpec(partnerservicestate.Table, sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString))
	)
	_spec.OnConflict = pssc.conflict
	if id, ok := pssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pssc.mutation.CreatedAt(); ok {
		_spec.SetField(partnerservicestate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pssc.mutation.UpdatedAt(); ok {
		_spec.SetField(partnerservicestate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pssc.mutation.Country(); ok {
		_spec.SetField(partnerservicestate.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := pssc.mutation.State(); ok {
		_spec.SetField(partnerservicestate.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := pssc.mutation.LicenseNo(); ok {
		_spec.SetField(partnerservicestate.FieldLicenseNo, field.TypeString, value)
		_node.LicenseNo = &value
	}
	if value, ok := pssc.mutation.LicenseExpDate(); ok {
		_spec.SetField(partnerservicestate.FieldLicenseExpDate, field.TypeTime, value)
		_node.LicenseExpDate = &value
	}
	if value, ok := pssc.mutation.ProofDocID(); ok {
		_spec.SetField(partnerservicestate.FieldProofDocID, field.TypeString, value)
		_node.ProofDocID = &value
	}
	if nodes := pssc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicestate.PartnerTable,
			Columns: []string{partnerservicestate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerServiceState.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerServiceStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pssc *PartnerServiceStateCreate) OnConflict(opts ...sql.ConflictOption) *PartnerServiceStateUpsertOne {
	pssc.conflict = opts
	return &PartnerServiceStateUpsertOne{
		create: pssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerServiceState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pssc *PartnerServiceStateCreate) OnConflictColumns(columns ...string) *PartnerServiceStateUpsertOne {
	pssc.conflict = append(pssc.conflict, sql.ConflictColumns(columns...))
	return &PartnerServiceStateUpsertOne{
		create: pssc,
	}
}

type (
	// PartnerServiceStateUpsertOne is the builder for "upsert"-ing
	//  one PartnerServiceState node.
	PartnerServiceStateUpsertOne struct {
		create *PartnerServiceStateCreate
	}

	// PartnerServiceStateUpsert is the "OnConflict" setter.
	PartnerServiceStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerServiceStateUpsert) SetUpdatedAt(v time.Time) *PartnerServiceStateUpsert {
	u.Set(partnerservicestate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerServiceStateUpsert) UpdateUpdatedAt() *PartnerServiceStateUpsert {
	u.SetExcluded(partnerservicestate.FieldUpdatedAt)
	return u
}

// SetCountry sets the "country" field.
func (u *PartnerServiceStateUpsert) SetCountry(v string) *PartnerServiceStateUpsert {
	u.Set(partnerservicestate.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *PartnerServiceStateUpsert) UpdateCountry() *PartnerServiceStateUpsert {
	u.SetExcluded(partnerservicestate.FieldCountry)
	return u
}

// SetState sets the "state" field.
func (u *PartnerServiceStateUpsert) SetState(v string) *PartnerServiceStateUpsert {
	u.Set(partnerservicestate.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PartnerServiceStateUpsert) UpdateState() *PartnerServiceStateUpsert {
	u.SetExcluded(partnerservicestate.FieldState)
	return u
}

// SetLicenseNo sets the "license_no" field.
func (u *PartnerServiceStateUpsert) SetLicenseNo(v string) *PartnerServiceStateUpsert {
	u.Set(partnerservicestate.FieldLicenseNo, v)
	return u
}

// UpdateLicenseNo sets the "license_no" field to the value that was provided on create.
func (u *PartnerServiceStateUpsert) UpdateLicenseNo() *PartnerServiceStateUpsert {
	u.SetExcluded(partnerservicestate.FieldLicenseNo)
	return u
}

// ClearLicenseNo clears the value of the "license_no" field.
func (u *PartnerServiceStateUpsert) ClearLicenseNo() *PartnerServiceStateUpsert {
	u.SetNull(partnerservicestate.FieldLicenseNo)
	return u
}

// SetLicenseExpDate sets the "license_exp_date" field.
func (u *PartnerServiceStateUpsert) SetLicenseExpDate(v time.Time) *PartnerServiceStateUpsert {
	u.Set(partnerservicestate.FieldLicenseExpDate, v)
	return u
}

// UpdateLicenseExpDate sets the "license_exp_date" field to the value that was provided on create.
func (u *PartnerServiceStateUpsert) UpdateLicenseExpDate() *PartnerServiceStateUpsert {
	u.SetExcluded(partnerservicestate.FieldLicenseExpDate)
	return u
}

// ClearLicenseExpDate clears the value of the "license_exp_date" field.
func (u *PartnerServiceStateUpsert) ClearLicenseExpDate() *PartnerServiceStateUpsert {
	u.SetNull(partnerservicestate.FieldLicenseExpDate)
	return u
}

// SetProofDocID sets the "proof_doc_id" field.
func (u *PartnerServiceStateUpsert) SetProofDocID(v string) *PartnerServiceStateUpsert {
	u.Set(partnerservicestate.FieldProofDocID, v)
	return u
}

// UpdateProofDocID sets the "proof_doc_id" field to the value that was provided on create.
func (u *PartnerServiceStateUpsert) UpdateProofDocID() *PartnerServiceStateUpsert {
	u.SetExcluded(partnerservicestate.FieldProofDocID)
	return u
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (u *PartnerServiceStateUpsert) ClearProofDocID() *PartnerServiceStateUpsert {
	u.SetNull(partnerservicestate.FieldProofDocID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PartnerServiceState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partnerservicestate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerServiceStateUpsertOne) UpdateNewValues() *PartnerServiceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(partnerservicestate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnerservicestate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerServiceState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnerServiceStateUpsertOne) Ignore() *PartnerServiceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerServiceStateUpsertOne) DoNothing() *PartnerServiceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerServiceStateCreate.OnConflict
// documentation for more info.
func (u *PartnerServiceStateUpsertOne) Update(set func(*PartnerServiceStateUpsert)) *PartnerServiceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerServiceStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerServiceStateUpsertOne) SetUpdatedAt(v time.Time) *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertOne) UpdateUpdatedAt() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCountry sets the "country" field.
func (u *PartnerServiceStateUpsertOne) SetCountry(v string) *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertOne) UpdateCountry() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateCountry()
	})
}

// SetState sets the "state" field.
func (u *PartnerServiceStateUpsertOne) SetState(v string) *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertOne) UpdateState() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateState()
	})
}

// SetLicenseNo sets the "license_no" field.
func (u *PartnerServiceStateUpsertOne) SetLicenseNo(v string) *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetLicenseNo(v)
	})
}

// UpdateLicenseNo sets the "license_no" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertOne) UpdateLicenseNo() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateLicenseNo()
	})
}

// ClearLicenseNo clears the value of the "license_no" field.
func (u *PartnerServiceStateUpsertOne) ClearLicenseNo() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.ClearLicenseNo()
	})
}

// SetLicenseExpDate sets the "license_exp_date" field.
func (u *PartnerServiceStateUpsertOne) SetLicenseExpDate(v time.Time) *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetLicenseExpDate(v)
	})
}

// UpdateLicenseExpDate sets the "license_exp_date" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertOne) UpdateLicenseExpDate() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateLicenseExpDate()
	})
}

// ClearLicenseExpDate clears the value of the "license_exp_date" field.
func (u *PartnerServiceStateUpsertOne) ClearLicenseExpDate() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.ClearLicenseExpDate()
	})
}

// SetProofDocID sets the "proof_doc_id" field.
func (u *PartnerServiceStateUpsertOne) SetProofDocID(v string) *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetProofDocID(v)
	})
}

// UpdateProofDocID sets the "proof_doc_id" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertOne) UpdateProofDocID() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateProofDocID()
	})
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (u *PartnerServiceStateUpsertOne) ClearProofDocID() *PartnerServiceStateUpsertOne {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.ClearProofDocID()
	})
}

// Exec executes the query.
func (u *PartnerServiceStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerServiceStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerServiceStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnerServiceStateUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PartnerServiceStateUpsertOne.ID is not supported by MySQL driver. Use PartnerServiceStateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnerServiceStateUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnerServiceStateCreateBulk is the builder for creating many PartnerServiceState entities in bulk.
type PartnerServiceStateCreateBulk struct {
	config
	builders []*PartnerServiceStateCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnerServiceState entities in the database.
func (psscb *PartnerServiceStateCreateBulk) Save(ctx context.Context) ([]*PartnerServiceState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(psscb.builders))
	nodes := make([]*PartnerServiceState, len(psscb.builders))
	mutators := make([]Mutator, len(psscb.builders))
	for i := range psscb.builders {
		func(i int, root context.Context) {
			builder := psscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerServiceStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = psscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psscb *PartnerServiceStateCreateBulk) SaveX(ctx context.Context) []*PartnerServiceState {
	v, err := psscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psscb *PartnerServiceStateCreateBulk) Exec(ctx context.Context) error {
	_, err := psscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psscb *PartnerServiceStateCreateBulk) ExecX(ctx context.Context) {
	if err := psscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerServiceState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerServiceStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (psscb *PartnerServiceStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnerServiceStateUpsertBulk {
	psscb.conflict = opts
	return &PartnerServiceStateUpsertBulk{
		create: psscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerServiceState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psscb *PartnerServiceStateCreateBulk) OnConflictColumns(columns ...string) *PartnerServiceStateUpsertBulk {
	psscb.conflict = append(psscb.conflict, sql.ConflictColumns(columns...))
	return &PartnerServiceStateUpsertBulk{
		create: psscb,
	}
}

// PartnerServiceStateUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnerServiceState nodes.
type PartnerServiceStateUpsertBulk struct {
	create *PartnerServiceStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnerServiceState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partnerservicestate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerServiceStateUpsertBulk) UpdateNewValues() *PartnerServiceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(partnerservicestate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnerservicestate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerServiceState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnerServiceStateUpsertBulk) Ignore() *PartnerServiceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerServiceStateUpsertBulk) DoNothing() *PartnerServiceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerServiceStateCreateBulk.OnConflict
// documentation for more info.
func (u *PartnerServiceStateUpsertBulk) Update(set func(*PartnerServiceStateUpsert)) *PartnerServiceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerServiceStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerServiceStateUpsertBulk) SetUpdatedAt(v time.Time) *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertBulk) UpdateUpdatedAt() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCountry sets the "country" field.
func (u *PartnerServiceStateUpsertBulk) SetCountry(v string) *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertBulk) UpdateCountry() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateCountry()
	})
}

// SetState sets the "state" field.
func (u *PartnerServiceStateUpsertBulk) SetState(v string) *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertBulk) UpdateState() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateState()
	})
}

// SetLicenseNo sets the "license_no" field.
func (u *PartnerServiceStateUpsertBulk) SetLicenseNo(v string) *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetLicenseNo(v)
	})
}

// UpdateLicenseNo sets the "license_no" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertBulk) UpdateLicenseNo() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateLicenseNo()
	})
}

// ClearLicenseNo clears the value of the "license_no" field.
func (u *PartnerServiceStateUpsertBulk) ClearLicenseNo() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.ClearLicenseNo()
	})
}

// SetLicenseExpDate sets the "license_exp_date" field.
func (u *PartnerServiceStateUpsertBulk) SetLicenseExpDate(v time.Time) *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetLicenseExpDate(v)
	})
}

// UpdateLicenseExpDate sets the "license_exp_date" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertBulk) UpdateLicenseExpDate() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateLicenseExpDate()
	})
}

// ClearLicenseExpDate clears the value of the "license_exp_date" field.
func (u *PartnerServiceStateUpsertBulk) ClearLicenseExpDate() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.ClearLicenseExpDate()
	})
}

// SetProofDocID sets the "proof_doc_id" field.
func (u *PartnerServiceStateUpsertBulk) SetProofDocID(v string) *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.SetProofDocID(v)
	})
}

// UpdateProofDocID sets the "proof_doc_id" field to the value that was provided on create.
func (u *PartnerServiceStateUpsertBulk) UpdateProofDocID() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.UpdateProofDocID()
	})
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (u *PartnerServiceStateUpsertBulk) ClearProofDocID() *PartnerServiceStateUpsertBulk {
	return u.Update(func(s *PartnerServiceStateUpsert) {
		s.ClearProofDocID()
	})
}

// Exec executes the query.
func (u *PartnerServiceStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnerServiceStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerServiceStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerServiceStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/contactus"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactUsUpdate is the builder for updating ContactUs entities.
type ContactUsUpdate struct {
	config
	hooks     []Hook
	mutation  *ContactUsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContactUsUpdate builder.
func (cuu *ContactUsUpdate) Where(ps ...predicate.ContactUs) *ContactUsUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetUpdatedAt sets the "updated_at" field.
func (cuu *ContactUsUpdate) SetUpdatedAt(t time.Time) *ContactUsUpdate {
	cuu.mutation.SetUpdatedAt(t)
	return cuu
}

// SetReason sets the "reason" field.
func (cuu *ContactUsUpdate) SetReason(s string) *ContactUsUpdate {
	cuu.mutation.SetReason(s)
	return cuu
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (cuu *ContactUsUpdate) SetPartnerID(id string) *ContactUsUpdate {
	cuu.mutation.SetPartnerID(id)
	return cuu
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (cuu *ContactUsUpdate) SetNillablePartnerID(id *string) *ContactUsUpdate {
	if id != nil {
		cuu = cuu.SetPartnerID(*id)
	}
	return cuu
}

// SetPartner sets the "partner" edge to the Partner entity.
func (cuu *ContactUsUpdate) SetPartner(p *Partner) *ContactUsUpdate {
	return cuu.SetPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (cuu *ContactUsUpdate) SetCreatorID(id string) *ContactUsUpdate {
	cuu.mutation.SetCreatorID(id)
	return cuu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (cuu *ContactUsUpdate) SetNillableCreatorID(id *string) *ContactUsUpdate {
	if id != nil {
		cuu = cuu.SetCreatorID(*id)
	}
	return cuu
}

// SetCreator sets the "creator" edge to the User entity.
func (cuu *ContactUsUpdate) SetCreator(u *User) *ContactUsUpdate {
	return cuu.SetCreatorID(u.ID)
}

// Mutation returns the ContactUsMutation object of the builder.
func (cuu *ContactUsUpdate) Mutation() *ContactUsMutation {
	return cuu.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (cuu *ContactUsUpdate) ClearPartner() *ContactUsUpdate {
	cuu.mutation.ClearPartner()
	return cuu
}

// ClearCreator clears the "creator" edge to the User entity.
func (cuu *ContactUsUpdate) ClearCreator() *ContactUsUpdate {
	cuu.mutation.ClearCreator()
	return cuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *ContactUsUpdate) Save(ctx context.Context) (int, error) {
	cuu.defaults()
	return withHooks(ctx, cuu.sqlSave, cuu.mutation, cuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *ContactUsUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *ContactUsUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *ContactUsUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuu *ContactUsUpdate) defaults() {
	if _, ok := cuu.mutation.UpdatedAt(); !ok {
		v := contactus.UpdateDefaultUpdatedAt()
		cuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *ContactUsUpdate) check() error {
	if v, ok := cuu.mutation.Reason(); ok {
		if err := contactus.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "ContactUs.reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuu *ContactUsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUsUpdate {
	cuu.modifiers = append(cuu.modifiers, modifiers...)
	return cuu
}

func (cuu *ContactUsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactus.Table, contactus.Columns, sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString))
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.UpdatedAt(); ok {
		_spec.SetField(contactus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuu.mutation.Reason(); ok {
		_spec.SetField(contactus.FieldReason, field.TypeString, value)
	}
	if cuu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.PartnerTable,
			Columns: []string{contactus.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.PartnerTable,
			Columns: []string{contactus.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.CreatorTable,
			Columns: []string{contactus.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.CreatorTable,
			Columns: []string{contactus.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cuu.mutation.done = true
	return n, nil
}

// ContactUsUpdateOne is the builder for updating a single ContactUs entity.
type ContactUsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContactUsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuuo *ContactUsUpdateOne) SetUpdatedAt(t time.Time) *ContactUsUpdateOne {
	cuuo.mutation.SetUpdatedAt(t)
	return cuuo
}

// SetReason sets the "reason" field.
func (cuuo *ContactUsUpdateOne) SetReason(s string) *ContactUsUpdateOne {
	cuuo.mutation.SetReason(s)
	return cuuo
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (cuuo *ContactUsUpdateOne) SetPartnerID(id string) *ContactUsUpdateOne {
	cuuo.mutation.SetPartnerID(id)
	return cuuo
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (cuuo *ContactUsUpdateOne) SetNillablePartnerID(id *string) *ContactUsUpdateOne {
	if id != nil {
		cuuo = cuuo.SetPartnerID(*id)
	}
	return cuuo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (cuuo *ContactUsUpdateOne) SetPartner(p *Partner) *ContactUsUpdateOne {
	return cuuo.SetPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (cuuo *ContactUsUpdateOne) SetCreatorID(id string) *ContactUsUpdateOne {
	cuuo.mutation.SetCreatorID(id)
	return cuuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (cuuo *ContactUsUpdateOne) SetNillableCreatorID(id *string) *ContactUsUpdateOne {
	if id != nil {
		cuuo = cuuo.SetCreatorID(*id)
	}
	return cuuo
}

// SetCreator sets the "creator" edge to the User entity.
func (cuuo *ContactUsUpdateOne) SetCreator(u *User) *ContactUsUpdateOne {
	return cuuo.SetCreatorID(u.ID)
}

// Mutation returns the ContactUsMutation object of the builder.
func (cuuo *ContactUsUpdateOne) Mutation() *ContactUsMutation {
	return cuuo.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (cuuo *ContactUsUpdateOne) ClearPartner() *ContactUsUpdateOne {
	cuuo.mutation.ClearPartner()
	return cuuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (cuuo *ContactUsUpdateOne) ClearCreator() *ContactUsUpdateOne {
	cuuo.mutation.ClearCreator()
	return cuuo
}

// Where appends a list predicates to the ContactUsUpdate builder.
func (cuuo *ContactUsUpdateOne) Where(ps ...predicate.ContactUs) *ContactUsUpdateOne {
	cuuo.mutation.Where(ps...)
	return cuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *ContactUsUpdateOne) Select(field string, fields ...string) *ContactUsUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated ContactUs entity.
func (cuuo *ContactUsUpdateOne) Save(ctx context.Context) (*ContactUs, error) {
	cuuo.defaults()
	return withHooks(ctx, cuuo.sqlSave, cuuo.mutation, cuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *ContactUsUpdateOne) SaveX(ctx context.Context) *ContactUs {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *ContactUsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *ContactUsUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuuo *ContactUsUpdateOne) defaults() {
	if _, ok := cuuo.mutation.UpdatedAt(); !ok {
		v := contactus.UpdateDefaultUpdatedAt()
		cuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *ContactUsUpdateOne) check() error {
	if v, ok := cuuo.mutation.Reason(); ok {
		if err := contactus.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "ContactUs.reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuuo *ContactUsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUsUpdateOne {
	cuuo.modifiers = append(cuuo.modifiers, modifiers...)
	return cuuo
}

func (cuuo *ContactUsUpdateOne) sqlSave(ctx context.Context) (_node *ContactUs, err error) {
	if err := cuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactus.Table, contactus.Columns, sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString))
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContactUs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactus.FieldID)
		for _, f := range fields {
			if !contactus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contactus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuuo.mutation.Reason(); ok {
		_spec.SetField(contactus.FieldReason, field.TypeString, value)
	}
	if cuuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.PartnerTable,
			Columns: []string{contactus.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.PartnerTable,
			Columns: []string{contactus.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.CreatorTable,
			Columns: []string{contactus.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactus.CreatorTable,
			Columns: []string{contactus.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuuo.modifiers...)
	_node = &ContactUs{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuuo.mutation.done = true
	return _node, nil
}

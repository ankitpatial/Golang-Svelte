// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/optionlist"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OptionList is the model entity for the OptionList schema.
type OptionList struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Type holds the value of the "type" field.
	Type enum.OptionList `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OptionListQuery when eager-loading is set.
	Edges        OptionListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OptionListEdges holds the relations/edges for other nodes in the graph.
type OptionListEdges struct {
	// FinanceOptions holds the value of the finance_options edge.
	FinanceOptions []*Partner `json:"finance_options,omitempty"`
	// EpcOptions holds the value of the epc_options edge.
	EpcOptions []*Partner `json:"epc_options,omitempty"`
	// Epc holds the value of the epc edge.
	Epc []*Job `json:"epc,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedFinanceOptions map[string][]*Partner
	namedEpcOptions     map[string][]*Partner
	namedEpc            map[string][]*Job
}

// FinanceOptionsOrErr returns the FinanceOptions value or an error if the edge
// was not loaded in eager-loading.
func (e OptionListEdges) FinanceOptionsOrErr() ([]*Partner, error) {
	if e.loadedTypes[0] {
		return e.FinanceOptions, nil
	}
	return nil, &NotLoadedError{edge: "finance_options"}
}

// EpcOptionsOrErr returns the EpcOptions value or an error if the edge
// was not loaded in eager-loading.
func (e OptionListEdges) EpcOptionsOrErr() ([]*Partner, error) {
	if e.loadedTypes[1] {
		return e.EpcOptions, nil
	}
	return nil, &NotLoadedError{edge: "epc_options"}
}

// EpcOrErr returns the Epc value or an error if the edge
// was not loaded in eager-loading.
func (e OptionListEdges) EpcOrErr() ([]*Job, error) {
	if e.loadedTypes[2] {
		return e.Epc, nil
	}
	return nil, &NotLoadedError{edge: "epc"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OptionList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case optionlist.FieldActive:
			values[i] = new(sql.NullBool)
		case optionlist.FieldOrder:
			values[i] = new(sql.NullInt64)
		case optionlist.FieldID, optionlist.FieldType, optionlist.FieldName, optionlist.FieldDisplayName:
			values[i] = new(sql.NullString)
		case optionlist.FieldCreatedAt, optionlist.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OptionList fields.
func (ol *OptionList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case optionlist.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ol.ID = value.String
			}
		case optionlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ol.CreatedAt = value.Time
			}
		case optionlist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ol.UpdatedAt = value.Time
			}
		case optionlist.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ol.Type = enum.OptionList(value.String)
			}
		case optionlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ol.Name = value.String
			}
		case optionlist.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				ol.DisplayName = value.String
			}
		case optionlist.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				ol.Active = value.Bool
			}
		case optionlist.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ol.Order = int(value.Int64)
			}
		default:
			ol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OptionList.
// This includes values selected through modifiers, order, etc.
func (ol *OptionList) Value(name string) (ent.Value, error) {
	return ol.selectValues.Get(name)
}

// QueryFinanceOptions queries the "finance_options" edge of the OptionList entity.
func (ol *OptionList) QueryFinanceOptions() *PartnerQuery {
	return NewOptionListClient(ol.config).QueryFinanceOptions(ol)
}

// QueryEpcOptions queries the "epc_options" edge of the OptionList entity.
func (ol *OptionList) QueryEpcOptions() *PartnerQuery {
	return NewOptionListClient(ol.config).QueryEpcOptions(ol)
}

// QueryEpc queries the "epc" edge of the OptionList entity.
func (ol *OptionList) QueryEpc() *JobQuery {
	return NewOptionListClient(ol.config).QueryEpc(ol)
}

// Update returns a builder for updating this OptionList.
// Note that you need to call OptionList.Unwrap() before calling this method if this OptionList
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OptionList) Update() *OptionListUpdateOne {
	return NewOptionListClient(ol.config).UpdateOne(ol)
}

// Unwrap unwraps the OptionList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OptionList) Unwrap() *OptionList {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OptionList is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OptionList) String() string {
	var builder strings.Builder
	builder.WriteString("OptionList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ol.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ol.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ol.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ol.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(ol.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", ol.Active))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", ol.Order))
	builder.WriteByte(')')
	return builder.String()
}

// NamedFinanceOptions returns the FinanceOptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ol *OptionList) NamedFinanceOptions(name string) ([]*Partner, error) {
	if ol.Edges.namedFinanceOptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ol.Edges.namedFinanceOptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ol *OptionList) appendNamedFinanceOptions(name string, edges ...*Partner) {
	if ol.Edges.namedFinanceOptions == nil {
		ol.Edges.namedFinanceOptions = make(map[string][]*Partner)
	}
	if len(edges) == 0 {
		ol.Edges.namedFinanceOptions[name] = []*Partner{}
	} else {
		ol.Edges.namedFinanceOptions[name] = append(ol.Edges.namedFinanceOptions[name], edges...)
	}
}

// NamedEpcOptions returns the EpcOptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ol *OptionList) NamedEpcOptions(name string) ([]*Partner, error) {
	if ol.Edges.namedEpcOptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ol.Edges.namedEpcOptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ol *OptionList) appendNamedEpcOptions(name string, edges ...*Partner) {
	if ol.Edges.namedEpcOptions == nil {
		ol.Edges.namedEpcOptions = make(map[string][]*Partner)
	}
	if len(edges) == 0 {
		ol.Edges.namedEpcOptions[name] = []*Partner{}
	} else {
		ol.Edges.namedEpcOptions[name] = append(ol.Edges.namedEpcOptions[name], edges...)
	}
}

// NamedEpc returns the Epc named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ol *OptionList) NamedEpc(name string) ([]*Job, error) {
	if ol.Edges.namedEpc == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ol.Edges.namedEpc[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ol *OptionList) appendNamedEpc(name string, edges ...*Job) {
	if ol.Edges.namedEpc == nil {
		ol.Edges.namedEpc = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		ol.Edges.namedEpc[name] = []*Job{}
	} else {
		ol.Edges.namedEpc[name] = append(ol.Edges.namedEpc[name], edges...)
	}
}

// OptionLists is a parsable slice of OptionList.
type OptionLists []*OptionList

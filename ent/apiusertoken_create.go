// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiUserTokenCreate is the builder for creating a ApiUserToken entity.
type ApiUserTokenCreate struct {
	config
	mutation *ApiUserTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (autc *ApiUserTokenCreate) SetCreatedAt(t time.Time) *ApiUserTokenCreate {
	autc.mutation.SetCreatedAt(t)
	return autc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (autc *ApiUserTokenCreate) SetNillableCreatedAt(t *time.Time) *ApiUserTokenCreate {
	if t != nil {
		autc.SetCreatedAt(*t)
	}
	return autc
}

// SetTokenType sets the "token_type" field.
func (autc *ApiUserTokenCreate) SetTokenType(s string) *ApiUserTokenCreate {
	autc.mutation.SetTokenType(s)
	return autc
}

// SetTokenID sets the "token_id" field.
func (autc *ApiUserTokenCreate) SetTokenID(s string) *ApiUserTokenCreate {
	autc.mutation.SetTokenID(s)
	return autc
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (autc *ApiUserTokenCreate) SetRefreshTokenID(s string) *ApiUserTokenCreate {
	autc.mutation.SetRefreshTokenID(s)
	return autc
}

// SetID sets the "id" field.
func (autc *ApiUserTokenCreate) SetID(s string) *ApiUserTokenCreate {
	autc.mutation.SetID(s)
	return autc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (autc *ApiUserTokenCreate) SetNillableID(s *string) *ApiUserTokenCreate {
	if s != nil {
		autc.SetID(*s)
	}
	return autc
}

// SetAPIUserID sets the "api_user" edge to the ApiUser entity by ID.
func (autc *ApiUserTokenCreate) SetAPIUserID(id string) *ApiUserTokenCreate {
	autc.mutation.SetAPIUserID(id)
	return autc
}

// SetNillableAPIUserID sets the "api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (autc *ApiUserTokenCreate) SetNillableAPIUserID(id *string) *ApiUserTokenCreate {
	if id != nil {
		autc = autc.SetAPIUserID(*id)
	}
	return autc
}

// SetAPIUser sets the "api_user" edge to the ApiUser entity.
func (autc *ApiUserTokenCreate) SetAPIUser(a *ApiUser) *ApiUserTokenCreate {
	return autc.SetAPIUserID(a.ID)
}

// Mutation returns the ApiUserTokenMutation object of the builder.
func (autc *ApiUserTokenCreate) Mutation() *ApiUserTokenMutation {
	return autc.mutation
}

// Save creates the ApiUserToken in the database.
func (autc *ApiUserTokenCreate) Save(ctx context.Context) (*ApiUserToken, error) {
	autc.defaults()
	return withHooks(ctx, autc.sqlSave, autc.mutation, autc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (autc *ApiUserTokenCreate) SaveX(ctx context.Context) *ApiUserToken {
	v, err := autc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (autc *ApiUserTokenCreate) Exec(ctx context.Context) error {
	_, err := autc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autc *ApiUserTokenCreate) ExecX(ctx context.Context) {
	if err := autc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autc *ApiUserTokenCreate) defaults() {
	if _, ok := autc.mutation.CreatedAt(); !ok {
		v := apiusertoken.DefaultCreatedAt()
		autc.mutation.SetCreatedAt(v)
	}
	if _, ok := autc.mutation.ID(); !ok {
		v := apiusertoken.DefaultID()
		autc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autc *ApiUserTokenCreate) check() error {
	if _, ok := autc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ApiUserToken.created_at"`)}
	}
	if _, ok := autc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "ApiUserToken.token_type"`)}
	}
	if v, ok := autc.mutation.TokenType(); ok {
		if err := apiusertoken.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.token_type": %w`, err)}
		}
	}
	if _, ok := autc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "ApiUserToken.token_id"`)}
	}
	if v, ok := autc.mutation.TokenID(); ok {
		if err := apiusertoken.TokenIDValidator(v); err != nil {
			return &ValidationError{Name: "token_id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.token_id": %w`, err)}
		}
	}
	if _, ok := autc.mutation.RefreshTokenID(); !ok {
		return &ValidationError{Name: "refresh_token_id", err: errors.New(`ent: missing required field "ApiUserToken.refresh_token_id"`)}
	}
	if v, ok := autc.mutation.RefreshTokenID(); ok {
		if err := apiusertoken.RefreshTokenIDValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token_id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.refresh_token_id": %w`, err)}
		}
	}
	if v, ok := autc.mutation.ID(); ok {
		if err := apiusertoken.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.id": %w`, err)}
		}
	}
	return nil
}

func (autc *ApiUserTokenCreate) sqlSave(ctx context.Context) (*ApiUserToken, error) {
	if err := autc.check(); err != nil {
		return nil, err
	}
	_node, _spec := autc.createSpec()
	if err := sqlgraph.CreateNode(ctx, autc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApiUserToken.ID type: %T", _spec.ID.Value)
		}
	}
	autc.mutation.id = &_node.ID
	autc.mutation.done = true
	return _node, nil
}

func (autc *ApiUserTokenCreate) createSpec() (*ApiUserToken, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiUserToken{config: autc.config}
		_spec = sqlgraph.NewCreateSpec(apiusertoken.Table, sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString))
	)
	_spec.OnConflict = autc.conflict
	if id, ok := autc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := autc.mutation.CreatedAt(); ok {
		_spec.SetField(apiusertoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := autc.mutation.TokenType(); ok {
		_spec.SetField(apiusertoken.FieldTokenType, field.TypeString, value)
		_node.TokenType = value
	}
	if value, ok := autc.mutation.TokenID(); ok {
		_spec.SetField(apiusertoken.FieldTokenID, field.TypeString, value)
		_node.TokenID = value
	}
	if value, ok := autc.mutation.RefreshTokenID(); ok {
		_spec.SetField(apiusertoken.FieldRefreshTokenID, field.TypeString, value)
		_node.RefreshTokenID = value
	}
	if nodes := autc.mutation.APIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apiusertoken.APIUserTable,
			Columns: []string{apiusertoken.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiUserToken.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiUserTokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (autc *ApiUserTokenCreate) OnConflict(opts ...sql.ConflictOption) *ApiUserTokenUpsertOne {
	autc.conflict = opts
	return &ApiUserTokenUpsertOne{
		create: autc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiUserToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (autc *ApiUserTokenCreate) OnConflictColumns(columns ...string) *ApiUserTokenUpsertOne {
	autc.conflict = append(autc.conflict, sql.ConflictColumns(columns...))
	return &ApiUserTokenUpsertOne{
		create: autc,
	}
}

type (
	// ApiUserTokenUpsertOne is the builder for "upsert"-ing
	//  one ApiUserToken node.
	ApiUserTokenUpsertOne struct {
		create *ApiUserTokenCreate
	}

	// ApiUserTokenUpsert is the "OnConflict" setter.
	ApiUserTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetTokenType sets the "token_type" field.
func (u *ApiUserTokenUpsert) SetTokenType(v string) *ApiUserTokenUpsert {
	u.Set(apiusertoken.FieldTokenType, v)
	return u
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *ApiUserTokenUpsert) UpdateTokenType() *ApiUserTokenUpsert {
	u.SetExcluded(apiusertoken.FieldTokenType)
	return u
}

// SetTokenID sets the "token_id" field.
func (u *ApiUserTokenUpsert) SetTokenID(v string) *ApiUserTokenUpsert {
	u.Set(apiusertoken.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *ApiUserTokenUpsert) UpdateTokenID() *ApiUserTokenUpsert {
	u.SetExcluded(apiusertoken.FieldTokenID)
	return u
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (u *ApiUserTokenUpsert) SetRefreshTokenID(v string) *ApiUserTokenUpsert {
	u.Set(apiusertoken.FieldRefreshTokenID, v)
	return u
}

// UpdateRefreshTokenID sets the "refresh_token_id" field to the value that was provided on create.
func (u *ApiUserTokenUpsert) UpdateRefreshTokenID() *ApiUserTokenUpsert {
	u.SetExcluded(apiusertoken.FieldRefreshTokenID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApiUserToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiusertoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiUserTokenUpsertOne) UpdateNewValues() *ApiUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apiusertoken.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apiusertoken.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiUserToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApiUserTokenUpsertOne) Ignore() *ApiUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiUserTokenUpsertOne) DoNothing() *ApiUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiUserTokenCreate.OnConflict
// documentation for more info.
func (u *ApiUserTokenUpsertOne) Update(set func(*ApiUserTokenUpsert)) *ApiUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiUserTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetTokenType sets the "token_type" field.
func (u *ApiUserTokenUpsertOne) SetTokenType(v string) *ApiUserTokenUpsertOne {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *ApiUserTokenUpsertOne) UpdateTokenType() *ApiUserTokenUpsertOne {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.UpdateTokenType()
	})
}

// SetTokenID sets the "token_id" field.
func (u *ApiUserTokenUpsertOne) SetTokenID(v string) *ApiUserTokenUpsertOne {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *ApiUserTokenUpsertOne) UpdateTokenID() *ApiUserTokenUpsertOne {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.UpdateTokenID()
	})
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (u *ApiUserTokenUpsertOne) SetRefreshTokenID(v string) *ApiUserTokenUpsertOne {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.SetRefreshTokenID(v)
	})
}

// UpdateRefreshTokenID sets the "refresh_token_id" field to the value that was provided on create.
func (u *ApiUserTokenUpsertOne) UpdateRefreshTokenID() *ApiUserTokenUpsertOne {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.UpdateRefreshTokenID()
	})
}

// Exec executes the query.
func (u *ApiUserTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiUserTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiUserTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiUserTokenUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ApiUserTokenUpsertOne.ID is not supported by MySQL driver. Use ApiUserTokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiUserTokenUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApiUserTokenCreateBulk is the builder for creating many ApiUserToken entities in bulk.
type ApiUserTokenCreateBulk struct {
	config
	builders []*ApiUserTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the ApiUserToken entities in the database.
func (autcb *ApiUserTokenCreateBulk) Save(ctx context.Context) ([]*ApiUserToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(autcb.builders))
	nodes := make([]*ApiUserToken, len(autcb.builders))
	mutators := make([]Mutator, len(autcb.builders))
	for i := range autcb.builders {
		func(i int, root context.Context) {
			builder := autcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiUserTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, autcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = autcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, autcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, autcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (autcb *ApiUserTokenCreateBulk) SaveX(ctx context.Context) []*ApiUserToken {
	v, err := autcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (autcb *ApiUserTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := autcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autcb *ApiUserTokenCreateBulk) ExecX(ctx context.Context) {
	if err := autcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiUserToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiUserTokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (autcb *ApiUserTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiUserTokenUpsertBulk {
	autcb.conflict = opts
	return &ApiUserTokenUpsertBulk{
		create: autcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiUserToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (autcb *ApiUserTokenCreateBulk) OnConflictColumns(columns ...string) *ApiUserTokenUpsertBulk {
	autcb.conflict = append(autcb.conflict, sql.ConflictColumns(columns...))
	return &ApiUserTokenUpsertBulk{
		create: autcb,
	}
}

// ApiUserTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of ApiUserToken nodes.
type ApiUserTokenUpsertBulk struct {
	create *ApiUserTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApiUserToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiusertoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiUserTokenUpsertBulk) UpdateNewValues() *ApiUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apiusertoken.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apiusertoken.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiUserToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApiUserTokenUpsertBulk) Ignore() *ApiUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiUserTokenUpsertBulk) DoNothing() *ApiUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiUserTokenCreateBulk.OnConflict
// documentation for more info.
func (u *ApiUserTokenUpsertBulk) Update(set func(*ApiUserTokenUpsert)) *ApiUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiUserTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetTokenType sets the "token_type" field.
func (u *ApiUserTokenUpsertBulk) SetTokenType(v string) *ApiUserTokenUpsertBulk {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *ApiUserTokenUpsertBulk) UpdateTokenType() *ApiUserTokenUpsertBulk {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.UpdateTokenType()
	})
}

// SetTokenID sets the "token_id" field.
func (u *ApiUserTokenUpsertBulk) SetTokenID(v string) *ApiUserTokenUpsertBulk {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *ApiUserTokenUpsertBulk) UpdateTokenID() *ApiUserTokenUpsertBulk {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.UpdateTokenID()
	})
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (u *ApiUserTokenUpsertBulk) SetRefreshTokenID(v string) *ApiUserTokenUpsertBulk {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.SetRefreshTokenID(v)
	})
}

// UpdateRefreshTokenID sets the "refresh_token_id" field to the value that was provided on create.
func (u *ApiUserTokenUpsertBulk) UpdateRefreshTokenID() *ApiUserTokenUpsertBulk {
	return u.Update(func(s *ApiUserTokenUpsert) {
		s.UpdateRefreshTokenID()
	})
}

// Exec executes the query.
func (u *ApiUserTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ApiUserTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiUserTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiUserTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

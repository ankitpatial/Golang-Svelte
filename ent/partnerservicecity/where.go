// Code generated by ent, DO NOT EDIT.

package partnerservicecity

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldUpdatedAt, v))
}

// PostalID applies equality check predicate on the "postal_id" field. It's identical to PostalIDEQ.
func PostalID(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldPostalID, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldActive, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldName, v))
}

// NaicsCode applies equality check predicate on the "naics_code" field. It's identical to NaicsCodeEQ.
func NaicsCode(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldNaicsCode, v))
}

// LicenseNo applies equality check predicate on the "license_no" field. It's identical to LicenseNoEQ.
func LicenseNo(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldLicenseNo, v))
}

// ProofDocID applies equality check predicate on the "proof_doc_id" field. It's identical to ProofDocIDEQ.
func ProofDocID(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldProofDocID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldUpdatedAt, v))
}

// PostalIDEQ applies the EQ predicate on the "postal_id" field.
func PostalIDEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldPostalID, v))
}

// PostalIDNEQ applies the NEQ predicate on the "postal_id" field.
func PostalIDNEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldPostalID, v))
}

// PostalIDIn applies the In predicate on the "postal_id" field.
func PostalIDIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldPostalID, vs...))
}

// PostalIDNotIn applies the NotIn predicate on the "postal_id" field.
func PostalIDNotIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldPostalID, vs...))
}

// PostalIDGT applies the GT predicate on the "postal_id" field.
func PostalIDGT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldPostalID, v))
}

// PostalIDGTE applies the GTE predicate on the "postal_id" field.
func PostalIDGTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldPostalID, v))
}

// PostalIDLT applies the LT predicate on the "postal_id" field.
func PostalIDLT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldPostalID, v))
}

// PostalIDLTE applies the LTE predicate on the "postal_id" field.
func PostalIDLTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldPostalID, v))
}

// PostalIDContains applies the Contains predicate on the "postal_id" field.
func PostalIDContains(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContains(FieldPostalID, v))
}

// PostalIDHasPrefix applies the HasPrefix predicate on the "postal_id" field.
func PostalIDHasPrefix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasPrefix(FieldPostalID, v))
}

// PostalIDHasSuffix applies the HasSuffix predicate on the "postal_id" field.
func PostalIDHasSuffix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasSuffix(FieldPostalID, v))
}

// PostalIDEqualFold applies the EqualFold predicate on the "postal_id" field.
func PostalIDEqualFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEqualFold(FieldPostalID, v))
}

// PostalIDContainsFold applies the ContainsFold predicate on the "postal_id" field.
func PostalIDContainsFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContainsFold(FieldPostalID, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldActive, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContainsFold(FieldName, v))
}

// NaicsCodeEQ applies the EQ predicate on the "naics_code" field.
func NaicsCodeEQ(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldNaicsCode, v))
}

// NaicsCodeNEQ applies the NEQ predicate on the "naics_code" field.
func NaicsCodeNEQ(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldNaicsCode, v))
}

// NaicsCodeIn applies the In predicate on the "naics_code" field.
func NaicsCodeIn(vs ...uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldNaicsCode, vs...))
}

// NaicsCodeNotIn applies the NotIn predicate on the "naics_code" field.
func NaicsCodeNotIn(vs ...uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldNaicsCode, vs...))
}

// NaicsCodeGT applies the GT predicate on the "naics_code" field.
func NaicsCodeGT(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldNaicsCode, v))
}

// NaicsCodeGTE applies the GTE predicate on the "naics_code" field.
func NaicsCodeGTE(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldNaicsCode, v))
}

// NaicsCodeLT applies the LT predicate on the "naics_code" field.
func NaicsCodeLT(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldNaicsCode, v))
}

// NaicsCodeLTE applies the LTE predicate on the "naics_code" field.
func NaicsCodeLTE(v uint) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldNaicsCode, v))
}

// LicenseNoEQ applies the EQ predicate on the "license_no" field.
func LicenseNoEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldLicenseNo, v))
}

// LicenseNoNEQ applies the NEQ predicate on the "license_no" field.
func LicenseNoNEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldLicenseNo, v))
}

// LicenseNoIn applies the In predicate on the "license_no" field.
func LicenseNoIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldLicenseNo, vs...))
}

// LicenseNoNotIn applies the NotIn predicate on the "license_no" field.
func LicenseNoNotIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldLicenseNo, vs...))
}

// LicenseNoGT applies the GT predicate on the "license_no" field.
func LicenseNoGT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldLicenseNo, v))
}

// LicenseNoGTE applies the GTE predicate on the "license_no" field.
func LicenseNoGTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldLicenseNo, v))
}

// LicenseNoLT applies the LT predicate on the "license_no" field.
func LicenseNoLT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldLicenseNo, v))
}

// LicenseNoLTE applies the LTE predicate on the "license_no" field.
func LicenseNoLTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldLicenseNo, v))
}

// LicenseNoContains applies the Contains predicate on the "license_no" field.
func LicenseNoContains(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContains(FieldLicenseNo, v))
}

// LicenseNoHasPrefix applies the HasPrefix predicate on the "license_no" field.
func LicenseNoHasPrefix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasPrefix(FieldLicenseNo, v))
}

// LicenseNoHasSuffix applies the HasSuffix predicate on the "license_no" field.
func LicenseNoHasSuffix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasSuffix(FieldLicenseNo, v))
}

// LicenseNoIsNil applies the IsNil predicate on the "license_no" field.
func LicenseNoIsNil() predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIsNull(FieldLicenseNo))
}

// LicenseNoNotNil applies the NotNil predicate on the "license_no" field.
func LicenseNoNotNil() predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotNull(FieldLicenseNo))
}

// LicenseNoEqualFold applies the EqualFold predicate on the "license_no" field.
func LicenseNoEqualFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEqualFold(FieldLicenseNo, v))
}

// LicenseNoContainsFold applies the ContainsFold predicate on the "license_no" field.
func LicenseNoContainsFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContainsFold(FieldLicenseNo, v))
}

// ProofDocIDEQ applies the EQ predicate on the "proof_doc_id" field.
func ProofDocIDEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEQ(FieldProofDocID, v))
}

// ProofDocIDNEQ applies the NEQ predicate on the "proof_doc_id" field.
func ProofDocIDNEQ(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNEQ(FieldProofDocID, v))
}

// ProofDocIDIn applies the In predicate on the "proof_doc_id" field.
func ProofDocIDIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIn(FieldProofDocID, vs...))
}

// ProofDocIDNotIn applies the NotIn predicate on the "proof_doc_id" field.
func ProofDocIDNotIn(vs ...string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotIn(FieldProofDocID, vs...))
}

// ProofDocIDGT applies the GT predicate on the "proof_doc_id" field.
func ProofDocIDGT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGT(FieldProofDocID, v))
}

// ProofDocIDGTE applies the GTE predicate on the "proof_doc_id" field.
func ProofDocIDGTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldGTE(FieldProofDocID, v))
}

// ProofDocIDLT applies the LT predicate on the "proof_doc_id" field.
func ProofDocIDLT(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLT(FieldProofDocID, v))
}

// ProofDocIDLTE applies the LTE predicate on the "proof_doc_id" field.
func ProofDocIDLTE(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldLTE(FieldProofDocID, v))
}

// ProofDocIDContains applies the Contains predicate on the "proof_doc_id" field.
func ProofDocIDContains(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContains(FieldProofDocID, v))
}

// ProofDocIDHasPrefix applies the HasPrefix predicate on the "proof_doc_id" field.
func ProofDocIDHasPrefix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasPrefix(FieldProofDocID, v))
}

// ProofDocIDHasSuffix applies the HasSuffix predicate on the "proof_doc_id" field.
func ProofDocIDHasSuffix(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldHasSuffix(FieldProofDocID, v))
}

// ProofDocIDIsNil applies the IsNil predicate on the "proof_doc_id" field.
func ProofDocIDIsNil() predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldIsNull(FieldProofDocID))
}

// ProofDocIDNotNil applies the NotNil predicate on the "proof_doc_id" field.
func ProofDocIDNotNil() predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldNotNull(FieldProofDocID))
}

// ProofDocIDEqualFold applies the EqualFold predicate on the "proof_doc_id" field.
func ProofDocIDEqualFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldEqualFold(FieldProofDocID, v))
}

// ProofDocIDContainsFold applies the ContainsFold predicate on the "proof_doc_id" field.
func ProofDocIDContainsFold(v string) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(sql.FieldContainsFold(FieldProofDocID, v))
}

// HasPartner applies the HasEdge predicate on the "partner" edge.
func HasPartner() predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerWith applies the HasEdge predicate on the "partner" edge with a given conditions (other predicates).
func HasPartnerWith(preds ...predicate.Partner) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(func(s *sql.Selector) {
		step := newPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartnerServiceCity) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartnerServiceCity) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartnerServiceCity) predicate.PartnerServiceCity {
	return predicate.PartnerServiceCity(func(s *sql.Selector) {
		p(s.Not())
	})
}

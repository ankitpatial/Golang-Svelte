// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/usersession"
	"roofix/ent/usersessionsocket"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSessionSocket is the model entity for the UserSessionSocket schema.
type UserSessionSocket struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSessionSocketQuery when eager-loading is set.
	Edges        UserSessionSocketEdges `json:"edges"`
	sessions_id  *string
	selectValues sql.SelectValues
}

// UserSessionSocketEdges holds the relations/edges for other nodes in the graph.
type UserSessionSocketEdges struct {
	// Session holds the value of the session edge.
	Session *UserSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSessionSocketEdges) SessionOrErr() (*UserSession, error) {
	if e.loadedTypes[0] {
		if e.Session == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usersession.Label}
		}
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSessionSocket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersessionsocket.FieldID:
			values[i] = new(sql.NullString)
		case usersessionsocket.FieldCreatedAt, usersessionsocket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case usersessionsocket.ForeignKeys[0]: // sessions_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSessionSocket fields.
func (uss *UserSessionSocket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersessionsocket.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uss.ID = value.String
			}
		case usersessionsocket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uss.CreatedAt = value.Time
			}
		case usersessionsocket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uss.UpdatedAt = value.Time
			}
		case usersessionsocket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sessions_id", values[i])
			} else if value.Valid {
				uss.sessions_id = new(string)
				*uss.sessions_id = value.String
			}
		default:
			uss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSessionSocket.
// This includes values selected through modifiers, order, etc.
func (uss *UserSessionSocket) Value(name string) (ent.Value, error) {
	return uss.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the UserSessionSocket entity.
func (uss *UserSessionSocket) QuerySession() *UserSessionQuery {
	return NewUserSessionSocketClient(uss.config).QuerySession(uss)
}

// Update returns a builder for updating this UserSessionSocket.
// Note that you need to call UserSessionSocket.Unwrap() before calling this method if this UserSessionSocket
// was returned from a transaction, and the transaction was committed or rolled back.
func (uss *UserSessionSocket) Update() *UserSessionSocketUpdateOne {
	return NewUserSessionSocketClient(uss.config).UpdateOne(uss)
}

// Unwrap unwraps the UserSessionSocket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uss *UserSessionSocket) Unwrap() *UserSessionSocket {
	_tx, ok := uss.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSessionSocket is not a transactional entity")
	}
	uss.config.driver = _tx.drv
	return uss
}

// String implements the fmt.Stringer.
func (uss *UserSessionSocket) String() string {
	var builder strings.Builder
	builder.WriteString("UserSessionSocket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uss.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uss.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uss.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserSessionSockets is a parsable slice of UserSessionSocket.
type UserSessionSockets []*UserSessionSocket

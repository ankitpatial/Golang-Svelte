// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/trainingvideo"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerTrainingVideoCreate is the builder for creating a PartnerTrainingVideo entity.
type PartnerTrainingVideoCreate struct {
	config
	mutation *PartnerTrainingVideoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptvc *PartnerTrainingVideoCreate) SetCreatedAt(t time.Time) *PartnerTrainingVideoCreate {
	ptvc.mutation.SetCreatedAt(t)
	return ptvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptvc *PartnerTrainingVideoCreate) SetNillableCreatedAt(t *time.Time) *PartnerTrainingVideoCreate {
	if t != nil {
		ptvc.SetCreatedAt(*t)
	}
	return ptvc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptvc *PartnerTrainingVideoCreate) SetUpdatedAt(t time.Time) *PartnerTrainingVideoCreate {
	ptvc.mutation.SetUpdatedAt(t)
	return ptvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptvc *PartnerTrainingVideoCreate) SetNillableUpdatedAt(t *time.Time) *PartnerTrainingVideoCreate {
	if t != nil {
		ptvc.SetUpdatedAt(*t)
	}
	return ptvc
}

// SetEnabled sets the "enabled" field.
func (ptvc *PartnerTrainingVideoCreate) SetEnabled(b bool) *PartnerTrainingVideoCreate {
	ptvc.mutation.SetEnabled(b)
	return ptvc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ptvc *PartnerTrainingVideoCreate) SetNillableEnabled(b *bool) *PartnerTrainingVideoCreate {
	if b != nil {
		ptvc.SetEnabled(*b)
	}
	return ptvc
}

// SetID sets the "id" field.
func (ptvc *PartnerTrainingVideoCreate) SetID(s string) *PartnerTrainingVideoCreate {
	ptvc.mutation.SetID(s)
	return ptvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptvc *PartnerTrainingVideoCreate) SetNillableID(s *string) *PartnerTrainingVideoCreate {
	if s != nil {
		ptvc.SetID(*s)
	}
	return ptvc
}

// SetVideoID sets the "video" edge to the TrainingVideo entity by ID.
func (ptvc *PartnerTrainingVideoCreate) SetVideoID(id string) *PartnerTrainingVideoCreate {
	ptvc.mutation.SetVideoID(id)
	return ptvc
}

// SetVideo sets the "video" edge to the TrainingVideo entity.
func (ptvc *PartnerTrainingVideoCreate) SetVideo(t *TrainingVideo) *PartnerTrainingVideoCreate {
	return ptvc.SetVideoID(t.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (ptvc *PartnerTrainingVideoCreate) SetPartnerID(id string) *PartnerTrainingVideoCreate {
	ptvc.mutation.SetPartnerID(id)
	return ptvc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (ptvc *PartnerTrainingVideoCreate) SetPartner(p *Partner) *PartnerTrainingVideoCreate {
	return ptvc.SetPartnerID(p.ID)
}

// Mutation returns the PartnerTrainingVideoMutation object of the builder.
func (ptvc *PartnerTrainingVideoCreate) Mutation() *PartnerTrainingVideoMutation {
	return ptvc.mutation
}

// Save creates the PartnerTrainingVideo in the database.
func (ptvc *PartnerTrainingVideoCreate) Save(ctx context.Context) (*PartnerTrainingVideo, error) {
	ptvc.defaults()
	return withHooks(ctx, ptvc.sqlSave, ptvc.mutation, ptvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptvc *PartnerTrainingVideoCreate) SaveX(ctx context.Context) *PartnerTrainingVideo {
	v, err := ptvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptvc *PartnerTrainingVideoCreate) Exec(ctx context.Context) error {
	_, err := ptvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptvc *PartnerTrainingVideoCreate) ExecX(ctx context.Context) {
	if err := ptvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptvc *PartnerTrainingVideoCreate) defaults() {
	if _, ok := ptvc.mutation.CreatedAt(); !ok {
		v := partnertrainingvideo.DefaultCreatedAt()
		ptvc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptvc.mutation.UpdatedAt(); !ok {
		v := partnertrainingvideo.DefaultUpdatedAt()
		ptvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptvc.mutation.Enabled(); !ok {
		v := partnertrainingvideo.DefaultEnabled
		ptvc.mutation.SetEnabled(v)
	}
	if _, ok := ptvc.mutation.ID(); !ok {
		v := partnertrainingvideo.DefaultID()
		ptvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptvc *PartnerTrainingVideoCreate) check() error {
	if _, ok := ptvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnerTrainingVideo.created_at"`)}
	}
	if _, ok := ptvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PartnerTrainingVideo.updated_at"`)}
	}
	if _, ok := ptvc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "PartnerTrainingVideo.enabled"`)}
	}
	if v, ok := ptvc.mutation.ID(); ok {
		if err := partnertrainingvideo.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PartnerTrainingVideo.id": %w`, err)}
		}
	}
	if _, ok := ptvc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required edge "PartnerTrainingVideo.video"`)}
	}
	if _, ok := ptvc.mutation.PartnerID(); !ok {
		return &ValidationError{Name: "partner", err: errors.New(`ent: missing required edge "PartnerTrainingVideo.partner"`)}
	}
	return nil
}

func (ptvc *PartnerTrainingVideoCreate) sqlSave(ctx context.Context) (*PartnerTrainingVideo, error) {
	if err := ptvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PartnerTrainingVideo.ID type: %T", _spec.ID.Value)
		}
	}
	ptvc.mutation.id = &_node.ID
	ptvc.mutation.done = true
	return _node, nil
}

func (ptvc *PartnerTrainingVideoCreate) createSpec() (*PartnerTrainingVideo, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnerTrainingVideo{config: ptvc.config}
		_spec = sqlgraph.NewCreateSpec(partnertrainingvideo.Table, sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString))
	)
	_spec.OnConflict = ptvc.conflict
	if id, ok := ptvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptvc.mutation.CreatedAt(); ok {
		_spec.SetField(partnertrainingvideo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ptvc.mutation.UpdatedAt(); ok {
		_spec.SetField(partnertrainingvideo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ptvc.mutation.Enabled(); ok {
		_spec.SetField(partnertrainingvideo.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if nodes := ptvc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.VideoTable,
			Columns: []string{partnertrainingvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.video_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptvc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.PartnerTable,
			Columns: []string{partnertrainingvideo.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerTrainingVideo.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerTrainingVideoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptvc *PartnerTrainingVideoCreate) OnConflict(opts ...sql.ConflictOption) *PartnerTrainingVideoUpsertOne {
	ptvc.conflict = opts
	return &PartnerTrainingVideoUpsertOne{
		create: ptvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerTrainingVideo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptvc *PartnerTrainingVideoCreate) OnConflictColumns(columns ...string) *PartnerTrainingVideoUpsertOne {
	ptvc.conflict = append(ptvc.conflict, sql.ConflictColumns(columns...))
	return &PartnerTrainingVideoUpsertOne{
		create: ptvc,
	}
}

type (
	// PartnerTrainingVideoUpsertOne is the builder for "upsert"-ing
	//  one PartnerTrainingVideo node.
	PartnerTrainingVideoUpsertOne struct {
		create *PartnerTrainingVideoCreate
	}

	// PartnerTrainingVideoUpsert is the "OnConflict" setter.
	PartnerTrainingVideoUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerTrainingVideoUpsert) SetUpdatedAt(v time.Time) *PartnerTrainingVideoUpsert {
	u.Set(partnertrainingvideo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerTrainingVideoUpsert) UpdateUpdatedAt() *PartnerTrainingVideoUpsert {
	u.SetExcluded(partnertrainingvideo.FieldUpdatedAt)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *PartnerTrainingVideoUpsert) SetEnabled(v bool) *PartnerTrainingVideoUpsert {
	u.Set(partnertrainingvideo.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *PartnerTrainingVideoUpsert) UpdateEnabled() *PartnerTrainingVideoUpsert {
	u.SetExcluded(partnertrainingvideo.FieldEnabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PartnerTrainingVideo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partnertrainingvideo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerTrainingVideoUpsertOne) UpdateNewValues() *PartnerTrainingVideoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(partnertrainingvideo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnertrainingvideo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerTrainingVideo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnerTrainingVideoUpsertOne) Ignore() *PartnerTrainingVideoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerTrainingVideoUpsertOne) DoNothing() *PartnerTrainingVideoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerTrainingVideoCreate.OnConflict
// documentation for more info.
func (u *PartnerTrainingVideoUpsertOne) Update(set func(*PartnerTrainingVideoUpsert)) *PartnerTrainingVideoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerTrainingVideoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerTrainingVideoUpsertOne) SetUpdatedAt(v time.Time) *PartnerTrainingVideoUpsertOne {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerTrainingVideoUpsertOne) UpdateUpdatedAt() *PartnerTrainingVideoUpsertOne {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEnabled sets the "enabled" field.
func (u *PartnerTrainingVideoUpsertOne) SetEnabled(v bool) *PartnerTrainingVideoUpsertOne {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *PartnerTrainingVideoUpsertOne) UpdateEnabled() *PartnerTrainingVideoUpsertOne {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.UpdateEnabled()
	})
}

// Exec executes the query.
func (u *PartnerTrainingVideoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerTrainingVideoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerTrainingVideoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnerTrainingVideoUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PartnerTrainingVideoUpsertOne.ID is not supported by MySQL driver. Use PartnerTrainingVideoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnerTrainingVideoUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnerTrainingVideoCreateBulk is the builder for creating many PartnerTrainingVideo entities in bulk.
type PartnerTrainingVideoCreateBulk struct {
	config
	builders []*PartnerTrainingVideoCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnerTrainingVideo entities in the database.
func (ptvcb *PartnerTrainingVideoCreateBulk) Save(ctx context.Context) ([]*PartnerTrainingVideo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptvcb.builders))
	nodes := make([]*PartnerTrainingVideo, len(ptvcb.builders))
	mutators := make([]Mutator, len(ptvcb.builders))
	for i := range ptvcb.builders {
		func(i int, root context.Context) {
			builder := ptvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerTrainingVideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptvcb *PartnerTrainingVideoCreateBulk) SaveX(ctx context.Context) []*PartnerTrainingVideo {
	v, err := ptvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptvcb *PartnerTrainingVideoCreateBulk) Exec(ctx context.Context) error {
	_, err := ptvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptvcb *PartnerTrainingVideoCreateBulk) ExecX(ctx context.Context) {
	if err := ptvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerTrainingVideo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerTrainingVideoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptvcb *PartnerTrainingVideoCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnerTrainingVideoUpsertBulk {
	ptvcb.conflict = opts
	return &PartnerTrainingVideoUpsertBulk{
		create: ptvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerTrainingVideo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptvcb *PartnerTrainingVideoCreateBulk) OnConflictColumns(columns ...string) *PartnerTrainingVideoUpsertBulk {
	ptvcb.conflict = append(ptvcb.conflict, sql.ConflictColumns(columns...))
	return &PartnerTrainingVideoUpsertBulk{
		create: ptvcb,
	}
}

// PartnerTrainingVideoUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnerTrainingVideo nodes.
type PartnerTrainingVideoUpsertBulk struct {
	create *PartnerTrainingVideoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnerTrainingVideo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partnertrainingvideo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerTrainingVideoUpsertBulk) UpdateNewValues() *PartnerTrainingVideoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(partnertrainingvideo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnertrainingvideo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerTrainingVideo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnerTrainingVideoUpsertBulk) Ignore() *PartnerTrainingVideoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerTrainingVideoUpsertBulk) DoNothing() *PartnerTrainingVideoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerTrainingVideoCreateBulk.OnConflict
// documentation for more info.
func (u *PartnerTrainingVideoUpsertBulk) Update(set func(*PartnerTrainingVideoUpsert)) *PartnerTrainingVideoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerTrainingVideoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerTrainingVideoUpsertBulk) SetUpdatedAt(v time.Time) *PartnerTrainingVideoUpsertBulk {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerTrainingVideoUpsertBulk) UpdateUpdatedAt() *PartnerTrainingVideoUpsertBulk {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEnabled sets the "enabled" field.
func (u *PartnerTrainingVideoUpsertBulk) SetEnabled(v bool) *PartnerTrainingVideoUpsertBulk {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *PartnerTrainingVideoUpsertBulk) UpdateEnabled() *PartnerTrainingVideoUpsertBulk {
	return u.Update(func(s *PartnerTrainingVideoUpsert) {
		s.UpdateEnabled()
	})
}

// Exec executes the query.
func (u *PartnerTrainingVideoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnerTrainingVideoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerTrainingVideoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerTrainingVideoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

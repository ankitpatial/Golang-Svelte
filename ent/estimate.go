// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/partner"
	"roofix/ent/schema"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"roofix/pkg/model"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Estimate is the model entity for the Estimate schema.
type Estimate struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// RegionID holds the value of the "region_id" field.
	RegionID uint8 `json:"region_id,omitempty"`
	// Status holds the value of the "status" field.
	Status enum.EstimateStatus `json:"status,omitempty"`
	// CurrentMaterial holds the value of the "current_material" field.
	CurrentMaterial string `json:"current_material,omitempty"`
	// NewRoofingMaterial holds the value of the "new_roofing_material" field.
	NewRoofingMaterial string `json:"new_roofing_material,omitempty"`
	// LowSlope holds the value of the "lowSlope" field.
	LowSlope bool `json:"lowSlope,omitempty"`
	// CurrentMaterialLowSlope holds the value of the "current_material_low_slope" field.
	CurrentMaterialLowSlope string `json:"current_material_low_slope,omitempty"`
	// NewRoofingMaterialLowSlope holds the value of the "new_roofing_material_low_slope" field.
	NewRoofingMaterialLowSlope string `json:"new_roofing_material_low_slope,omitempty"`
	// Redeck holds the value of the "redeck" field.
	Redeck bool `json:"redeck,omitempty"`
	// Layers holds the value of the "layers" field.
	Layers uint8 `json:"layers,omitempty"`
	// Layer2Material holds the value of the "layer2_material" field.
	Layer2Material string `json:"layer2_material,omitempty"`
	// Layer3Material holds the value of the "layer3_material" field.
	Layer3Material string `json:"layer3_material,omitempty"`
	// PartialPercentage holds the value of the "partial_percentage" field.
	PartialPercentage float64 `json:"partial_percentage,omitempty"`
	// MaterialMappingNote holds the value of the "material_mapping_note" field.
	MaterialMappingNote string `json:"material_mapping_note,omitempty"`
	// MeasureType holds the value of the "measure_type" field.
	MeasureType enum.Measure `json:"measure_type,omitempty"`
	// ExtraChargeType holds the value of the "extra_charge_type" field.
	ExtraChargeType enum.ExtraCharge `json:"extra_charge_type,omitempty"`
	// ExtraCharges holds the value of the "extra_charges" field.
	ExtraCharges float64 `json:"extra_charges,omitempty"`
	// ExtraChargeCond holds the value of the "extra_charge_cond" field.
	ExtraChargeCond []*model.ExtraChargeCondition `json:"extra_charge_cond,omitempty"`
	// ExtraChargeNote holds the value of the "extra_charge_note" field.
	ExtraChargeNote *string `json:"extra_charge_note,omitempty"`
	// estimate provider name
	Estimator string `json:"estimator,omitempty"`
	// EstimatorOrderID holds the value of the "estimator_order_id" field.
	EstimatorOrderID uint `json:"estimator_order_id,omitempty"`
	// EstimatorReportID holds the value of the "estimator_report_id" field.
	EstimatorReportID uint `json:"estimator_report_id,omitempty"`
	// TotalSquares holds the value of the "total_squares" field.
	TotalSquares float64 `json:"total_squares,omitempty"`
	// PrimaryPitch holds the value of the "primary_pitch" field.
	PrimaryPitch float64 `json:"primary_pitch,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// PriceSummary holds the value of the "price_summary" field.
	PriceSummary string `json:"price_summary,omitempty"`
	// geo boundary of property
	Bounds []schema.Point `json:"bounds,omitempty"`
	// data received from estimate provider
	EstimatorRawResponse map[string]interface{} `json:"estimator_raw_response,omitempty"`
	// Override holds the value of the "override" field.
	Override bool `json:"override,omitempty"`
	// OverrideTotalSquares holds the value of the "override_total_squares" field.
	OverrideTotalSquares float64 `json:"override_total_squares,omitempty"`
	// OverridePrimaryPitch holds the value of the "override_primary_pitch" field.
	OverridePrimaryPitch float64 `json:"override_primary_pitch,omitempty"`
	// OverridePrice holds the value of the "override_price" field.
	OverridePrice float64 `json:"override_price,omitempty"`
	// OverridePriceSummary holds the value of the "override_price_summary" field.
	OverridePriceSummary string `json:"override_price_summary,omitempty"`
	// CompanyRefID holds the value of the "company_ref_id" field.
	CompanyRefID string `json:"company_ref_id,omitempty"`
	// CompanyRefName holds the value of the "company_ref_name" field.
	CompanyRefName string `json:"company_ref_name,omitempty"`
	// reason for estimate Failed status
	FailureReason string `json:"failure_reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EstimateQuery when eager-loading is set.
	Edges         EstimateEdges `json:"edges"`
	api_user_id   *string
	pdf_doc_id    *string
	home_owner_id *string
	partner_id    *string
	creator_id    *string
	sales_rep_id  *string
	selectValues  sql.SelectValues
}

// EstimateEdges holds the relations/edges for other nodes in the graph.
type EstimateEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*EstimateActivity `json:"activities,omitempty"`
	// JobInfo holds the value of the job_info edge.
	JobInfo *Job `json:"job_info,omitempty"`
	// Partner holds the value of the partner edge.
	Partner *Partner `json:"partner,omitempty"`
	// HomeOwner holds the value of the home_owner edge.
	HomeOwner *HomeOwner `json:"home_owner,omitempty"`
	// SalesRep holds the value of the sales_rep edge.
	SalesRep *User `json:"sales_rep,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// CreatorAPI holds the value of the creator_api edge.
	CreatorAPI *ApiUser `json:"creator_api,omitempty"`
	// Pdf holds the value of the pdf edge.
	Pdf *Document `json:"pdf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedActivities map[string][]*EstimateActivity
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e EstimateEdges) ActivitiesOrErr() ([]*EstimateActivity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// JobInfoOrErr returns the JobInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) JobInfoOrErr() (*Job, error) {
	if e.loadedTypes[1] {
		if e.JobInfo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: job.Label}
		}
		return e.JobInfo, nil
	}
	return nil, &NotLoadedError{edge: "job_info"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) PartnerOrErr() (*Partner, error) {
	if e.loadedTypes[2] {
		if e.Partner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// HomeOwnerOrErr returns the HomeOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) HomeOwnerOrErr() (*HomeOwner, error) {
	if e.loadedTypes[3] {
		if e.HomeOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: homeowner.Label}
		}
		return e.HomeOwner, nil
	}
	return nil, &NotLoadedError{edge: "home_owner"}
}

// SalesRepOrErr returns the SalesRep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) SalesRepOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.SalesRep == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.SalesRep, nil
	}
	return nil, &NotLoadedError{edge: "sales_rep"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[5] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CreatorAPIOrErr returns the CreatorAPI value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) CreatorAPIOrErr() (*ApiUser, error) {
	if e.loadedTypes[6] {
		if e.CreatorAPI == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.CreatorAPI, nil
	}
	return nil, &NotLoadedError{edge: "creator_api"}
}

// PdfOrErr returns the Pdf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateEdges) PdfOrErr() (*Document, error) {
	if e.loadedTypes[7] {
		if e.Pdf == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: document.Label}
		}
		return e.Pdf, nil
	}
	return nil, &NotLoadedError{edge: "pdf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Estimate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case estimate.FieldExtraChargeCond, estimate.FieldBounds, estimate.FieldEstimatorRawResponse:
			values[i] = new([]byte)
		case estimate.FieldLowSlope, estimate.FieldRedeck, estimate.FieldOverride:
			values[i] = new(sql.NullBool)
		case estimate.FieldPartialPercentage, estimate.FieldExtraCharges, estimate.FieldTotalSquares, estimate.FieldPrimaryPitch, estimate.FieldPrice, estimate.FieldOverrideTotalSquares, estimate.FieldOverridePrimaryPitch, estimate.FieldOverridePrice:
			values[i] = new(sql.NullFloat64)
		case estimate.FieldRegionID, estimate.FieldLayers, estimate.FieldEstimatorOrderID, estimate.FieldEstimatorReportID:
			values[i] = new(sql.NullInt64)
		case estimate.FieldID, estimate.FieldStatus, estimate.FieldCurrentMaterial, estimate.FieldNewRoofingMaterial, estimate.FieldCurrentMaterialLowSlope, estimate.FieldNewRoofingMaterialLowSlope, estimate.FieldLayer2Material, estimate.FieldLayer3Material, estimate.FieldMaterialMappingNote, estimate.FieldMeasureType, estimate.FieldExtraChargeType, estimate.FieldExtraChargeNote, estimate.FieldEstimator, estimate.FieldPriceSummary, estimate.FieldOverridePriceSummary, estimate.FieldCompanyRefID, estimate.FieldCompanyRefName, estimate.FieldFailureReason:
			values[i] = new(sql.NullString)
		case estimate.FieldCreatedAt, estimate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case estimate.ForeignKeys[0]: // api_user_id
			values[i] = new(sql.NullString)
		case estimate.ForeignKeys[1]: // pdf_doc_id
			values[i] = new(sql.NullString)
		case estimate.ForeignKeys[2]: // home_owner_id
			values[i] = new(sql.NullString)
		case estimate.ForeignKeys[3]: // partner_id
			values[i] = new(sql.NullString)
		case estimate.ForeignKeys[4]: // creator_id
			values[i] = new(sql.NullString)
		case estimate.ForeignKeys[5]: // sales_rep_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Estimate fields.
func (e *Estimate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case estimate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case estimate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case estimate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case estimate.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field region_id", values[i])
			} else if value.Valid {
				e.RegionID = uint8(value.Int64)
			}
		case estimate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = enum.EstimateStatus(value.String)
			}
		case estimate.FieldCurrentMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_material", values[i])
			} else if value.Valid {
				e.CurrentMaterial = value.String
			}
		case estimate.FieldNewRoofingMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field new_roofing_material", values[i])
			} else if value.Valid {
				e.NewRoofingMaterial = value.String
			}
		case estimate.FieldLowSlope:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field lowSlope", values[i])
			} else if value.Valid {
				e.LowSlope = value.Bool
			}
		case estimate.FieldCurrentMaterialLowSlope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_material_low_slope", values[i])
			} else if value.Valid {
				e.CurrentMaterialLowSlope = value.String
			}
		case estimate.FieldNewRoofingMaterialLowSlope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field new_roofing_material_low_slope", values[i])
			} else if value.Valid {
				e.NewRoofingMaterialLowSlope = value.String
			}
		case estimate.FieldRedeck:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field redeck", values[i])
			} else if value.Valid {
				e.Redeck = value.Bool
			}
		case estimate.FieldLayers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field layers", values[i])
			} else if value.Valid {
				e.Layers = uint8(value.Int64)
			}
		case estimate.FieldLayer2Material:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field layer2_material", values[i])
			} else if value.Valid {
				e.Layer2Material = value.String
			}
		case estimate.FieldLayer3Material:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field layer3_material", values[i])
			} else if value.Valid {
				e.Layer3Material = value.String
			}
		case estimate.FieldPartialPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field partial_percentage", values[i])
			} else if value.Valid {
				e.PartialPercentage = value.Float64
			}
		case estimate.FieldMaterialMappingNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material_mapping_note", values[i])
			} else if value.Valid {
				e.MaterialMappingNote = value.String
			}
		case estimate.FieldMeasureType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field measure_type", values[i])
			} else if value.Valid {
				e.MeasureType = enum.Measure(value.String)
			}
		case estimate.FieldExtraChargeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_charge_type", values[i])
			} else if value.Valid {
				e.ExtraChargeType = enum.ExtraCharge(value.String)
			}
		case estimate.FieldExtraCharges:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field extra_charges", values[i])
			} else if value.Valid {
				e.ExtraCharges = value.Float64
			}
		case estimate.FieldExtraChargeCond:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_charge_cond", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.ExtraChargeCond); err != nil {
					return fmt.Errorf("unmarshal field extra_charge_cond: %w", err)
				}
			}
		case estimate.FieldExtraChargeNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_charge_note", values[i])
			} else if value.Valid {
				e.ExtraChargeNote = new(string)
				*e.ExtraChargeNote = value.String
			}
		case estimate.FieldEstimator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estimator", values[i])
			} else if value.Valid {
				e.Estimator = value.String
			}
		case estimate.FieldEstimatorOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimator_order_id", values[i])
			} else if value.Valid {
				e.EstimatorOrderID = uint(value.Int64)
			}
		case estimate.FieldEstimatorReportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimator_report_id", values[i])
			} else if value.Valid {
				e.EstimatorReportID = uint(value.Int64)
			}
		case estimate.FieldTotalSquares:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_squares", values[i])
			} else if value.Valid {
				e.TotalSquares = value.Float64
			}
		case estimate.FieldPrimaryPitch:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field primary_pitch", values[i])
			} else if value.Valid {
				e.PrimaryPitch = value.Float64
			}
		case estimate.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				e.Price = value.Float64
			}
		case estimate.FieldPriceSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_summary", values[i])
			} else if value.Valid {
				e.PriceSummary = value.String
			}
		case estimate.FieldBounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Bounds); err != nil {
					return fmt.Errorf("unmarshal field bounds: %w", err)
				}
			}
		case estimate.FieldEstimatorRawResponse:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field estimator_raw_response", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.EstimatorRawResponse); err != nil {
					return fmt.Errorf("unmarshal field estimator_raw_response: %w", err)
				}
			}
		case estimate.FieldOverride:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field override", values[i])
			} else if value.Valid {
				e.Override = value.Bool
			}
		case estimate.FieldOverrideTotalSquares:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field override_total_squares", values[i])
			} else if value.Valid {
				e.OverrideTotalSquares = value.Float64
			}
		case estimate.FieldOverridePrimaryPitch:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field override_primary_pitch", values[i])
			} else if value.Valid {
				e.OverridePrimaryPitch = value.Float64
			}
		case estimate.FieldOverridePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field override_price", values[i])
			} else if value.Valid {
				e.OverridePrice = value.Float64
			}
		case estimate.FieldOverridePriceSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field override_price_summary", values[i])
			} else if value.Valid {
				e.OverridePriceSummary = value.String
			}
		case estimate.FieldCompanyRefID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_ref_id", values[i])
			} else if value.Valid {
				e.CompanyRefID = value.String
			}
		case estimate.FieldCompanyRefName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_ref_name", values[i])
			} else if value.Valid {
				e.CompanyRefName = value.String
			}
		case estimate.FieldFailureReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failure_reason", values[i])
			} else if value.Valid {
				e.FailureReason = value.String
			}
		case estimate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_user_id", values[i])
			} else if value.Valid {
				e.api_user_id = new(string)
				*e.api_user_id = value.String
			}
		case estimate.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pdf_doc_id", values[i])
			} else if value.Valid {
				e.pdf_doc_id = new(string)
				*e.pdf_doc_id = value.String
			}
		case estimate.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_owner_id", values[i])
			} else if value.Valid {
				e.home_owner_id = new(string)
				*e.home_owner_id = value.String
			}
		case estimate.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				e.partner_id = new(string)
				*e.partner_id = value.String
			}
		case estimate.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				e.creator_id = new(string)
				*e.creator_id = value.String
			}
		case estimate.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales_rep_id", values[i])
			} else if value.Valid {
				e.sales_rep_id = new(string)
				*e.sales_rep_id = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Estimate.
// This includes values selected through modifiers, order, etc.
func (e *Estimate) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryActivities queries the "activities" edge of the Estimate entity.
func (e *Estimate) QueryActivities() *EstimateActivityQuery {
	return NewEstimateClient(e.config).QueryActivities(e)
}

// QueryJobInfo queries the "job_info" edge of the Estimate entity.
func (e *Estimate) QueryJobInfo() *JobQuery {
	return NewEstimateClient(e.config).QueryJobInfo(e)
}

// QueryPartner queries the "partner" edge of the Estimate entity.
func (e *Estimate) QueryPartner() *PartnerQuery {
	return NewEstimateClient(e.config).QueryPartner(e)
}

// QueryHomeOwner queries the "home_owner" edge of the Estimate entity.
func (e *Estimate) QueryHomeOwner() *HomeOwnerQuery {
	return NewEstimateClient(e.config).QueryHomeOwner(e)
}

// QuerySalesRep queries the "sales_rep" edge of the Estimate entity.
func (e *Estimate) QuerySalesRep() *UserQuery {
	return NewEstimateClient(e.config).QuerySalesRep(e)
}

// QueryCreator queries the "creator" edge of the Estimate entity.
func (e *Estimate) QueryCreator() *UserQuery {
	return NewEstimateClient(e.config).QueryCreator(e)
}

// QueryCreatorAPI queries the "creator_api" edge of the Estimate entity.
func (e *Estimate) QueryCreatorAPI() *ApiUserQuery {
	return NewEstimateClient(e.config).QueryCreatorAPI(e)
}

// QueryPdf queries the "pdf" edge of the Estimate entity.
func (e *Estimate) QueryPdf() *DocumentQuery {
	return NewEstimateClient(e.config).QueryPdf(e)
}

// Update returns a builder for updating this Estimate.
// Note that you need to call Estimate.Unwrap() before calling this method if this Estimate
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Estimate) Update() *EstimateUpdateOne {
	return NewEstimateClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Estimate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Estimate) Unwrap() *Estimate {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Estimate is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Estimate) String() string {
	var builder strings.Builder
	builder.WriteString("Estimate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("region_id=")
	builder.WriteString(fmt.Sprintf("%v", e.RegionID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("current_material=")
	builder.WriteString(e.CurrentMaterial)
	builder.WriteString(", ")
	builder.WriteString("new_roofing_material=")
	builder.WriteString(e.NewRoofingMaterial)
	builder.WriteString(", ")
	builder.WriteString("lowSlope=")
	builder.WriteString(fmt.Sprintf("%v", e.LowSlope))
	builder.WriteString(", ")
	builder.WriteString("current_material_low_slope=")
	builder.WriteString(e.CurrentMaterialLowSlope)
	builder.WriteString(", ")
	builder.WriteString("new_roofing_material_low_slope=")
	builder.WriteString(e.NewRoofingMaterialLowSlope)
	builder.WriteString(", ")
	builder.WriteString("redeck=")
	builder.WriteString(fmt.Sprintf("%v", e.Redeck))
	builder.WriteString(", ")
	builder.WriteString("layers=")
	builder.WriteString(fmt.Sprintf("%v", e.Layers))
	builder.WriteString(", ")
	builder.WriteString("layer2_material=")
	builder.WriteString(e.Layer2Material)
	builder.WriteString(", ")
	builder.WriteString("layer3_material=")
	builder.WriteString(e.Layer3Material)
	builder.WriteString(", ")
	builder.WriteString("partial_percentage=")
	builder.WriteString(fmt.Sprintf("%v", e.PartialPercentage))
	builder.WriteString(", ")
	builder.WriteString("material_mapping_note=")
	builder.WriteString(e.MaterialMappingNote)
	builder.WriteString(", ")
	builder.WriteString("measure_type=")
	builder.WriteString(fmt.Sprintf("%v", e.MeasureType))
	builder.WriteString(", ")
	builder.WriteString("extra_charge_type=")
	builder.WriteString(fmt.Sprintf("%v", e.ExtraChargeType))
	builder.WriteString(", ")
	builder.WriteString("extra_charges=")
	builder.WriteString(fmt.Sprintf("%v", e.ExtraCharges))
	builder.WriteString(", ")
	builder.WriteString("extra_charge_cond=")
	builder.WriteString(fmt.Sprintf("%v", e.ExtraChargeCond))
	builder.WriteString(", ")
	if v := e.ExtraChargeNote; v != nil {
		builder.WriteString("extra_charge_note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("estimator=")
	builder.WriteString(e.Estimator)
	builder.WriteString(", ")
	builder.WriteString("estimator_order_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EstimatorOrderID))
	builder.WriteString(", ")
	builder.WriteString("estimator_report_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EstimatorReportID))
	builder.WriteString(", ")
	builder.WriteString("total_squares=")
	builder.WriteString(fmt.Sprintf("%v", e.TotalSquares))
	builder.WriteString(", ")
	builder.WriteString("primary_pitch=")
	builder.WriteString(fmt.Sprintf("%v", e.PrimaryPitch))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", e.Price))
	builder.WriteString(", ")
	builder.WriteString("price_summary=")
	builder.WriteString(e.PriceSummary)
	builder.WriteString(", ")
	builder.WriteString("bounds=")
	builder.WriteString(fmt.Sprintf("%v", e.Bounds))
	builder.WriteString(", ")
	builder.WriteString("estimator_raw_response=")
	builder.WriteString(fmt.Sprintf("%v", e.EstimatorRawResponse))
	builder.WriteString(", ")
	builder.WriteString("override=")
	builder.WriteString(fmt.Sprintf("%v", e.Override))
	builder.WriteString(", ")
	builder.WriteString("override_total_squares=")
	builder.WriteString(fmt.Sprintf("%v", e.OverrideTotalSquares))
	builder.WriteString(", ")
	builder.WriteString("override_primary_pitch=")
	builder.WriteString(fmt.Sprintf("%v", e.OverridePrimaryPitch))
	builder.WriteString(", ")
	builder.WriteString("override_price=")
	builder.WriteString(fmt.Sprintf("%v", e.OverridePrice))
	builder.WriteString(", ")
	builder.WriteString("override_price_summary=")
	builder.WriteString(e.OverridePriceSummary)
	builder.WriteString(", ")
	builder.WriteString("company_ref_id=")
	builder.WriteString(e.CompanyRefID)
	builder.WriteString(", ")
	builder.WriteString("company_ref_name=")
	builder.WriteString(e.CompanyRefName)
	builder.WriteString(", ")
	builder.WriteString("failure_reason=")
	builder.WriteString(e.FailureReason)
	builder.WriteByte(')')
	return builder.String()
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Estimate) NamedActivities(name string) ([]*EstimateActivity, error) {
	if e.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Estimate) appendNamedActivities(name string, edges ...*EstimateActivity) {
	if e.Edges.namedActivities == nil {
		e.Edges.namedActivities = make(map[string][]*EstimateActivity)
	}
	if len(edges) == 0 {
		e.Edges.namedActivities[name] = []*EstimateActivity{}
	} else {
		e.Edges.namedActivities[name] = append(e.Edges.namedActivities[name], edges...)
	}
}

// Estimates is a parsable slice of Estimate.
type Estimates []*Estimate

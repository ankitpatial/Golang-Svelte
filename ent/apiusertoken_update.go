// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiUserTokenUpdate is the builder for updating ApiUserToken entities.
type ApiUserTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiUserTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiUserTokenUpdate builder.
func (autu *ApiUserTokenUpdate) Where(ps ...predicate.ApiUserToken) *ApiUserTokenUpdate {
	autu.mutation.Where(ps...)
	return autu
}

// SetTokenType sets the "token_type" field.
func (autu *ApiUserTokenUpdate) SetTokenType(s string) *ApiUserTokenUpdate {
	autu.mutation.SetTokenType(s)
	return autu
}

// SetTokenID sets the "token_id" field.
func (autu *ApiUserTokenUpdate) SetTokenID(s string) *ApiUserTokenUpdate {
	autu.mutation.SetTokenID(s)
	return autu
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (autu *ApiUserTokenUpdate) SetRefreshTokenID(s string) *ApiUserTokenUpdate {
	autu.mutation.SetRefreshTokenID(s)
	return autu
}

// SetAPIUserID sets the "api_user" edge to the ApiUser entity by ID.
func (autu *ApiUserTokenUpdate) SetAPIUserID(id string) *ApiUserTokenUpdate {
	autu.mutation.SetAPIUserID(id)
	return autu
}

// SetNillableAPIUserID sets the "api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (autu *ApiUserTokenUpdate) SetNillableAPIUserID(id *string) *ApiUserTokenUpdate {
	if id != nil {
		autu = autu.SetAPIUserID(*id)
	}
	return autu
}

// SetAPIUser sets the "api_user" edge to the ApiUser entity.
func (autu *ApiUserTokenUpdate) SetAPIUser(a *ApiUser) *ApiUserTokenUpdate {
	return autu.SetAPIUserID(a.ID)
}

// Mutation returns the ApiUserTokenMutation object of the builder.
func (autu *ApiUserTokenUpdate) Mutation() *ApiUserTokenMutation {
	return autu.mutation
}

// ClearAPIUser clears the "api_user" edge to the ApiUser entity.
func (autu *ApiUserTokenUpdate) ClearAPIUser() *ApiUserTokenUpdate {
	autu.mutation.ClearAPIUser()
	return autu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (autu *ApiUserTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, autu.sqlSave, autu.mutation, autu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (autu *ApiUserTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := autu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (autu *ApiUserTokenUpdate) Exec(ctx context.Context) error {
	_, err := autu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autu *ApiUserTokenUpdate) ExecX(ctx context.Context) {
	if err := autu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autu *ApiUserTokenUpdate) check() error {
	if v, ok := autu.mutation.TokenType(); ok {
		if err := apiusertoken.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.token_type": %w`, err)}
		}
	}
	if v, ok := autu.mutation.TokenID(); ok {
		if err := apiusertoken.TokenIDValidator(v); err != nil {
			return &ValidationError{Name: "token_id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.token_id": %w`, err)}
		}
	}
	if v, ok := autu.mutation.RefreshTokenID(); ok {
		if err := apiusertoken.RefreshTokenIDValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token_id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.refresh_token_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (autu *ApiUserTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiUserTokenUpdate {
	autu.modifiers = append(autu.modifiers, modifiers...)
	return autu
}

func (autu *ApiUserTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := autu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiusertoken.Table, apiusertoken.Columns, sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString))
	if ps := autu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autu.mutation.TokenType(); ok {
		_spec.SetField(apiusertoken.FieldTokenType, field.TypeString, value)
	}
	if value, ok := autu.mutation.TokenID(); ok {
		_spec.SetField(apiusertoken.FieldTokenID, field.TypeString, value)
	}
	if value, ok := autu.mutation.RefreshTokenID(); ok {
		_spec.SetField(apiusertoken.FieldRefreshTokenID, field.TypeString, value)
	}
	if autu.mutation.APIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apiusertoken.APIUserTable,
			Columns: []string{apiusertoken.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autu.mutation.APIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apiusertoken.APIUserTable,
			Columns: []string{apiusertoken.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(autu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, autu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiusertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	autu.mutation.done = true
	return n, nil
}

// ApiUserTokenUpdateOne is the builder for updating a single ApiUserToken entity.
type ApiUserTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiUserTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTokenType sets the "token_type" field.
func (autuo *ApiUserTokenUpdateOne) SetTokenType(s string) *ApiUserTokenUpdateOne {
	autuo.mutation.SetTokenType(s)
	return autuo
}

// SetTokenID sets the "token_id" field.
func (autuo *ApiUserTokenUpdateOne) SetTokenID(s string) *ApiUserTokenUpdateOne {
	autuo.mutation.SetTokenID(s)
	return autuo
}

// SetRefreshTokenID sets the "refresh_token_id" field.
func (autuo *ApiUserTokenUpdateOne) SetRefreshTokenID(s string) *ApiUserTokenUpdateOne {
	autuo.mutation.SetRefreshTokenID(s)
	return autuo
}

// SetAPIUserID sets the "api_user" edge to the ApiUser entity by ID.
func (autuo *ApiUserTokenUpdateOne) SetAPIUserID(id string) *ApiUserTokenUpdateOne {
	autuo.mutation.SetAPIUserID(id)
	return autuo
}

// SetNillableAPIUserID sets the "api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (autuo *ApiUserTokenUpdateOne) SetNillableAPIUserID(id *string) *ApiUserTokenUpdateOne {
	if id != nil {
		autuo = autuo.SetAPIUserID(*id)
	}
	return autuo
}

// SetAPIUser sets the "api_user" edge to the ApiUser entity.
func (autuo *ApiUserTokenUpdateOne) SetAPIUser(a *ApiUser) *ApiUserTokenUpdateOne {
	return autuo.SetAPIUserID(a.ID)
}

// Mutation returns the ApiUserTokenMutation object of the builder.
func (autuo *ApiUserTokenUpdateOne) Mutation() *ApiUserTokenMutation {
	return autuo.mutation
}

// ClearAPIUser clears the "api_user" edge to the ApiUser entity.
func (autuo *ApiUserTokenUpdateOne) ClearAPIUser() *ApiUserTokenUpdateOne {
	autuo.mutation.ClearAPIUser()
	return autuo
}

// Where appends a list predicates to the ApiUserTokenUpdate builder.
func (autuo *ApiUserTokenUpdateOne) Where(ps ...predicate.ApiUserToken) *ApiUserTokenUpdateOne {
	autuo.mutation.Where(ps...)
	return autuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (autuo *ApiUserTokenUpdateOne) Select(field string, fields ...string) *ApiUserTokenUpdateOne {
	autuo.fields = append([]string{field}, fields...)
	return autuo
}

// Save executes the query and returns the updated ApiUserToken entity.
func (autuo *ApiUserTokenUpdateOne) Save(ctx context.Context) (*ApiUserToken, error) {
	return withHooks(ctx, autuo.sqlSave, autuo.mutation, autuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (autuo *ApiUserTokenUpdateOne) SaveX(ctx context.Context) *ApiUserToken {
	node, err := autuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (autuo *ApiUserTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := autuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autuo *ApiUserTokenUpdateOne) ExecX(ctx context.Context) {
	if err := autuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autuo *ApiUserTokenUpdateOne) check() error {
	if v, ok := autuo.mutation.TokenType(); ok {
		if err := apiusertoken.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.token_type": %w`, err)}
		}
	}
	if v, ok := autuo.mutation.TokenID(); ok {
		if err := apiusertoken.TokenIDValidator(v); err != nil {
			return &ValidationError{Name: "token_id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.token_id": %w`, err)}
		}
	}
	if v, ok := autuo.mutation.RefreshTokenID(); ok {
		if err := apiusertoken.RefreshTokenIDValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token_id", err: fmt.Errorf(`ent: validator failed for field "ApiUserToken.refresh_token_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (autuo *ApiUserTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiUserTokenUpdateOne {
	autuo.modifiers = append(autuo.modifiers, modifiers...)
	return autuo
}

func (autuo *ApiUserTokenUpdateOne) sqlSave(ctx context.Context) (_node *ApiUserToken, err error) {
	if err := autuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiusertoken.Table, apiusertoken.Columns, sqlgraph.NewFieldSpec(apiusertoken.FieldID, field.TypeString))
	id, ok := autuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiUserToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := autuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiusertoken.FieldID)
		for _, f := range fields {
			if !apiusertoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apiusertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := autuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autuo.mutation.TokenType(); ok {
		_spec.SetField(apiusertoken.FieldTokenType, field.TypeString, value)
	}
	if value, ok := autuo.mutation.TokenID(); ok {
		_spec.SetField(apiusertoken.FieldTokenID, field.TypeString, value)
	}
	if value, ok := autuo.mutation.RefreshTokenID(); ok {
		_spec.SetField(apiusertoken.FieldRefreshTokenID, field.TypeString, value)
	}
	if autuo.mutation.APIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apiusertoken.APIUserTable,
			Columns: []string{apiusertoken.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autuo.mutation.APIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apiusertoken.APIUserTable,
			Columns: []string{apiusertoken.APIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(autuo.modifiers...)
	_node = &ApiUserToken{config: autuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, autuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiusertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	autuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package notifysetting

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldCreatedAt, v))
}

// TopicID applies equality check predicate on the "topic_id" field. It's identical to TopicIDEQ.
func TopicID(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldTopicID, v))
}

// ReceiveEmail applies equality check predicate on the "receive_email" field. It's identical to ReceiveEmailEQ.
func ReceiveEmail(v bool) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldReceiveEmail, v))
}

// ReceiveSms applies equality check predicate on the "receive_sms" field. It's identical to ReceiveSmsEQ.
func ReceiveSms(v bool) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldReceiveSms, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldLTE(FieldCreatedAt, v))
}

// TopicIDEQ applies the EQ predicate on the "topic_id" field.
func TopicIDEQ(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldTopicID, v))
}

// TopicIDNEQ applies the NEQ predicate on the "topic_id" field.
func TopicIDNEQ(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNEQ(FieldTopicID, v))
}

// TopicIDIn applies the In predicate on the "topic_id" field.
func TopicIDIn(vs ...string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldIn(FieldTopicID, vs...))
}

// TopicIDNotIn applies the NotIn predicate on the "topic_id" field.
func TopicIDNotIn(vs ...string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNotIn(FieldTopicID, vs...))
}

// TopicIDGT applies the GT predicate on the "topic_id" field.
func TopicIDGT(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldGT(FieldTopicID, v))
}

// TopicIDGTE applies the GTE predicate on the "topic_id" field.
func TopicIDGTE(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldGTE(FieldTopicID, v))
}

// TopicIDLT applies the LT predicate on the "topic_id" field.
func TopicIDLT(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldLT(FieldTopicID, v))
}

// TopicIDLTE applies the LTE predicate on the "topic_id" field.
func TopicIDLTE(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldLTE(FieldTopicID, v))
}

// TopicIDContains applies the Contains predicate on the "topic_id" field.
func TopicIDContains(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldContains(FieldTopicID, v))
}

// TopicIDHasPrefix applies the HasPrefix predicate on the "topic_id" field.
func TopicIDHasPrefix(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldHasPrefix(FieldTopicID, v))
}

// TopicIDHasSuffix applies the HasSuffix predicate on the "topic_id" field.
func TopicIDHasSuffix(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldHasSuffix(FieldTopicID, v))
}

// TopicIDEqualFold applies the EqualFold predicate on the "topic_id" field.
func TopicIDEqualFold(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEqualFold(FieldTopicID, v))
}

// TopicIDContainsFold applies the ContainsFold predicate on the "topic_id" field.
func TopicIDContainsFold(v string) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldContainsFold(FieldTopicID, v))
}

// ReceiveEmailEQ applies the EQ predicate on the "receive_email" field.
func ReceiveEmailEQ(v bool) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldReceiveEmail, v))
}

// ReceiveEmailNEQ applies the NEQ predicate on the "receive_email" field.
func ReceiveEmailNEQ(v bool) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNEQ(FieldReceiveEmail, v))
}

// ReceiveEmailIsNil applies the IsNil predicate on the "receive_email" field.
func ReceiveEmailIsNil() predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldIsNull(FieldReceiveEmail))
}

// ReceiveEmailNotNil applies the NotNil predicate on the "receive_email" field.
func ReceiveEmailNotNil() predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNotNull(FieldReceiveEmail))
}

// ReceiveSmsEQ applies the EQ predicate on the "receive_sms" field.
func ReceiveSmsEQ(v bool) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldEQ(FieldReceiveSms, v))
}

// ReceiveSmsNEQ applies the NEQ predicate on the "receive_sms" field.
func ReceiveSmsNEQ(v bool) predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNEQ(FieldReceiveSms, v))
}

// ReceiveSmsIsNil applies the IsNil predicate on the "receive_sms" field.
func ReceiveSmsIsNil() predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldIsNull(FieldReceiveSms))
}

// ReceiveSmsNotNil applies the NotNil predicate on the "receive_sms" field.
func ReceiveSmsNotNil() predicate.NotifySetting {
	return predicate.NotifySetting(sql.FieldNotNull(FieldReceiveSms))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.NotifySetting {
	return predicate.NotifySetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.NotifySetting {
	return predicate.NotifySetting(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotifySetting) predicate.NotifySetting {
	return predicate.NotifySetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotifySetting) predicate.NotifySetting {
	return predicate.NotifySetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotifySetting) predicate.NotifySetting {
	return predicate.NotifySetting(func(s *sql.Selector) {
		p(s.Not())
	})
}

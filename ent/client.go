// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"roofix/ent/migrate"

	"roofix/ent/apiaccess"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/auditlog"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/homeowner"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/installationjobprogress"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/notifysetting"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/partnerservice"
	"roofix/ent/partnerservicecity"
	"roofix/ent/partnerservicestate"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/payment"
	"roofix/ent/postalcode"
	"roofix/ent/pricing"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/token"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"roofix/ent/useractivity"
	"roofix/ent/userauth"
	"roofix/ent/usersession"
	"roofix/ent/usersessionsocket"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApiAccess is the client for interacting with the ApiAccess builders.
	ApiAccess *ApiAccessClient
	// ApiUser is the client for interacting with the ApiUser builders.
	ApiUser *ApiUserClient
	// ApiUserToken is the client for interacting with the ApiUserToken builders.
	ApiUserToken *ApiUserTokenClient
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// ChannelMessage is the client for interacting with the ChannelMessage builders.
	ChannelMessage *ChannelMessageClient
	// ChannelMessageRead is the client for interacting with the ChannelMessageRead builders.
	ChannelMessageRead *ChannelMessageReadClient
	// ChannelSub is the client for interacting with the ChannelSub builders.
	ChannelSub *ChannelSubClient
	// ContactUs is the client for interacting with the ContactUs builders.
	ContactUs *ContactUsClient
	// Document is the client for interacting with the Document builders.
	Document *DocumentClient
	// Estimate is the client for interacting with the Estimate builders.
	Estimate *EstimateClient
	// EstimateActivity is the client for interacting with the EstimateActivity builders.
	EstimateActivity *EstimateActivityClient
	// HomeOwner is the client for interacting with the HomeOwner builders.
	HomeOwner *HomeOwnerClient
	// InstallationJob is the client for interacting with the InstallationJob builders.
	InstallationJob *InstallationJobClient
	// InstallationJobItem is the client for interacting with the InstallationJobItem builders.
	InstallationJobItem *InstallationJobItemClient
	// InstallationJobProgress is the client for interacting with the InstallationJobProgress builders.
	InstallationJobProgress *InstallationJobProgressClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// JobActivity is the client for interacting with the JobActivity builders.
	JobActivity *JobActivityClient
	// JobAssignmentHistory is the client for interacting with the JobAssignmentHistory builders.
	JobAssignmentHistory *JobAssignmentHistoryClient
	// JobDocURL is the client for interacting with the JobDocURL builders.
	JobDocURL *JobDocURLClient
	// JobNote is the client for interacting with the JobNote builders.
	JobNote *JobNoteClient
	// JobProgressHistory is the client for interacting with the JobProgressHistory builders.
	JobProgressHistory *JobProgressHistoryClient
	// NotifySetting is the client for interacting with the NotifySetting builders.
	NotifySetting *NotifySettingClient
	// OptionList is the client for interacting with the OptionList builders.
	OptionList *OptionListClient
	// Partner is the client for interacting with the Partner builders.
	Partner *PartnerClient
	// PartnerActivity is the client for interacting with the PartnerActivity builders.
	PartnerActivity *PartnerActivityClient
	// PartnerContact is the client for interacting with the PartnerContact builders.
	PartnerContact *PartnerContactClient
	// PartnerService is the client for interacting with the PartnerService builders.
	PartnerService *PartnerServiceClient
	// PartnerServiceCity is the client for interacting with the PartnerServiceCity builders.
	PartnerServiceCity *PartnerServiceCityClient
	// PartnerServiceState is the client for interacting with the PartnerServiceState builders.
	PartnerServiceState *PartnerServiceStateClient
	// PartnerTrainingVideo is the client for interacting with the PartnerTrainingVideo builders.
	PartnerTrainingVideo *PartnerTrainingVideoClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PostalCode is the client for interacting with the PostalCode builders.
	PostalCode *PostalCodeClient
	// Pricing is the client for interacting with the Pricing builders.
	Pricing *PricingClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductPackage is the client for interacting with the ProductPackage builders.
	ProductPackage *ProductPackageClient
	// Survey is the client for interacting with the Survey builders.
	Survey *SurveyClient
	// SurveyProgress is the client for interacting with the SurveyProgress builders.
	SurveyProgress *SurveyProgressClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// TrainingCourse is the client for interacting with the TrainingCourse builders.
	TrainingCourse *TrainingCourseClient
	// TrainingVideo is the client for interacting with the TrainingVideo builders.
	TrainingVideo *TrainingVideoClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserActivity is the client for interacting with the UserActivity builders.
	UserActivity *UserActivityClient
	// UserAuth is the client for interacting with the UserAuth builders.
	UserAuth *UserAuthClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
	// UserSessionSocket is the client for interacting with the UserSessionSocket builders.
	UserSessionSocket *UserSessionSocketClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApiAccess = NewApiAccessClient(c.config)
	c.ApiUser = NewApiUserClient(c.config)
	c.ApiUserToken = NewApiUserTokenClient(c.config)
	c.AuditLog = NewAuditLogClient(c.config)
	c.Channel = NewChannelClient(c.config)
	c.ChannelMessage = NewChannelMessageClient(c.config)
	c.ChannelMessageRead = NewChannelMessageReadClient(c.config)
	c.ChannelSub = NewChannelSubClient(c.config)
	c.ContactUs = NewContactUsClient(c.config)
	c.Document = NewDocumentClient(c.config)
	c.Estimate = NewEstimateClient(c.config)
	c.EstimateActivity = NewEstimateActivityClient(c.config)
	c.HomeOwner = NewHomeOwnerClient(c.config)
	c.InstallationJob = NewInstallationJobClient(c.config)
	c.InstallationJobItem = NewInstallationJobItemClient(c.config)
	c.InstallationJobProgress = NewInstallationJobProgressClient(c.config)
	c.Job = NewJobClient(c.config)
	c.JobActivity = NewJobActivityClient(c.config)
	c.JobAssignmentHistory = NewJobAssignmentHistoryClient(c.config)
	c.JobDocURL = NewJobDocURLClient(c.config)
	c.JobNote = NewJobNoteClient(c.config)
	c.JobProgressHistory = NewJobProgressHistoryClient(c.config)
	c.NotifySetting = NewNotifySettingClient(c.config)
	c.OptionList = NewOptionListClient(c.config)
	c.Partner = NewPartnerClient(c.config)
	c.PartnerActivity = NewPartnerActivityClient(c.config)
	c.PartnerContact = NewPartnerContactClient(c.config)
	c.PartnerService = NewPartnerServiceClient(c.config)
	c.PartnerServiceCity = NewPartnerServiceCityClient(c.config)
	c.PartnerServiceState = NewPartnerServiceStateClient(c.config)
	c.PartnerTrainingVideo = NewPartnerTrainingVideoClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PostalCode = NewPostalCodeClient(c.config)
	c.Pricing = NewPricingClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductPackage = NewProductPackageClient(c.config)
	c.Survey = NewSurveyClient(c.config)
	c.SurveyProgress = NewSurveyProgressClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.TrainingCourse = NewTrainingCourseClient(c.config)
	c.TrainingVideo = NewTrainingVideoClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserActivity = NewUserActivityClient(c.config)
	c.UserAuth = NewUserAuthClient(c.config)
	c.UserSession = NewUserSessionClient(c.config)
	c.UserSessionSocket = NewUserSessionSocketClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		ApiAccess:               NewApiAccessClient(cfg),
		ApiUser:                 NewApiUserClient(cfg),
		ApiUserToken:            NewApiUserTokenClient(cfg),
		AuditLog:                NewAuditLogClient(cfg),
		Channel:                 NewChannelClient(cfg),
		ChannelMessage:          NewChannelMessageClient(cfg),
		ChannelMessageRead:      NewChannelMessageReadClient(cfg),
		ChannelSub:              NewChannelSubClient(cfg),
		ContactUs:               NewContactUsClient(cfg),
		Document:                NewDocumentClient(cfg),
		Estimate:                NewEstimateClient(cfg),
		EstimateActivity:        NewEstimateActivityClient(cfg),
		HomeOwner:               NewHomeOwnerClient(cfg),
		InstallationJob:         NewInstallationJobClient(cfg),
		InstallationJobItem:     NewInstallationJobItemClient(cfg),
		InstallationJobProgress: NewInstallationJobProgressClient(cfg),
		Job:                     NewJobClient(cfg),
		JobActivity:             NewJobActivityClient(cfg),
		JobAssignmentHistory:    NewJobAssignmentHistoryClient(cfg),
		JobDocURL:               NewJobDocURLClient(cfg),
		JobNote:                 NewJobNoteClient(cfg),
		JobProgressHistory:      NewJobProgressHistoryClient(cfg),
		NotifySetting:           NewNotifySettingClient(cfg),
		OptionList:              NewOptionListClient(cfg),
		Partner:                 NewPartnerClient(cfg),
		PartnerActivity:         NewPartnerActivityClient(cfg),
		PartnerContact:          NewPartnerContactClient(cfg),
		PartnerService:          NewPartnerServiceClient(cfg),
		PartnerServiceCity:      NewPartnerServiceCityClient(cfg),
		PartnerServiceState:     NewPartnerServiceStateClient(cfg),
		PartnerTrainingVideo:    NewPartnerTrainingVideoClient(cfg),
		Payment:                 NewPaymentClient(cfg),
		PostalCode:              NewPostalCodeClient(cfg),
		Pricing:                 NewPricingClient(cfg),
		Product:                 NewProductClient(cfg),
		ProductPackage:          NewProductPackageClient(cfg),
		Survey:                  NewSurveyClient(cfg),
		SurveyProgress:          NewSurveyProgressClient(cfg),
		Token:                   NewTokenClient(cfg),
		TrainingCourse:          NewTrainingCourseClient(cfg),
		TrainingVideo:           NewTrainingVideoClient(cfg),
		User:                    NewUserClient(cfg),
		UserActivity:            NewUserActivityClient(cfg),
		UserAuth:                NewUserAuthClient(cfg),
		UserSession:             NewUserSessionClient(cfg),
		UserSessionSocket:       NewUserSessionSocketClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		ApiAccess:               NewApiAccessClient(cfg),
		ApiUser:                 NewApiUserClient(cfg),
		ApiUserToken:            NewApiUserTokenClient(cfg),
		AuditLog:                NewAuditLogClient(cfg),
		Channel:                 NewChannelClient(cfg),
		ChannelMessage:          NewChannelMessageClient(cfg),
		ChannelMessageRead:      NewChannelMessageReadClient(cfg),
		ChannelSub:              NewChannelSubClient(cfg),
		ContactUs:               NewContactUsClient(cfg),
		Document:                NewDocumentClient(cfg),
		Estimate:                NewEstimateClient(cfg),
		EstimateActivity:        NewEstimateActivityClient(cfg),
		HomeOwner:               NewHomeOwnerClient(cfg),
		InstallationJob:         NewInstallationJobClient(cfg),
		InstallationJobItem:     NewInstallationJobItemClient(cfg),
		InstallationJobProgress: NewInstallationJobProgressClient(cfg),
		Job:                     NewJobClient(cfg),
		JobActivity:             NewJobActivityClient(cfg),
		JobAssignmentHistory:    NewJobAssignmentHistoryClient(cfg),
		JobDocURL:               NewJobDocURLClient(cfg),
		JobNote:                 NewJobNoteClient(cfg),
		JobProgressHistory:      NewJobProgressHistoryClient(cfg),
		NotifySetting:           NewNotifySettingClient(cfg),
		OptionList:              NewOptionListClient(cfg),
		Partner:                 NewPartnerClient(cfg),
		PartnerActivity:         NewPartnerActivityClient(cfg),
		PartnerContact:          NewPartnerContactClient(cfg),
		PartnerService:          NewPartnerServiceClient(cfg),
		PartnerServiceCity:      NewPartnerServiceCityClient(cfg),
		PartnerServiceState:     NewPartnerServiceStateClient(cfg),
		PartnerTrainingVideo:    NewPartnerTrainingVideoClient(cfg),
		Payment:                 NewPaymentClient(cfg),
		PostalCode:              NewPostalCodeClient(cfg),
		Pricing:                 NewPricingClient(cfg),
		Product:                 NewProductClient(cfg),
		ProductPackage:          NewProductPackageClient(cfg),
		Survey:                  NewSurveyClient(cfg),
		SurveyProgress:          NewSurveyProgressClient(cfg),
		Token:                   NewTokenClient(cfg),
		TrainingCourse:          NewTrainingCourseClient(cfg),
		TrainingVideo:           NewTrainingVideoClient(cfg),
		User:                    NewUserClient(cfg),
		UserActivity:            NewUserActivityClient(cfg),
		UserAuth:                NewUserAuthClient(cfg),
		UserSession:             NewUserSessionClient(cfg),
		UserSessionSocket:       NewUserSessionSocketClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApiAccess.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ApiAccess, c.ApiUser, c.ApiUserToken, c.AuditLog, c.Channel, c.ChannelMessage,
		c.ChannelMessageRead, c.ChannelSub, c.ContactUs, c.Document, c.Estimate,
		c.EstimateActivity, c.HomeOwner, c.InstallationJob, c.InstallationJobItem,
		c.InstallationJobProgress, c.Job, c.JobActivity, c.JobAssignmentHistory,
		c.JobDocURL, c.JobNote, c.JobProgressHistory, c.NotifySetting, c.OptionList,
		c.Partner, c.PartnerActivity, c.PartnerContact, c.PartnerService,
		c.PartnerServiceCity, c.PartnerServiceState, c.PartnerTrainingVideo, c.Payment,
		c.PostalCode, c.Pricing, c.Product, c.ProductPackage, c.Survey,
		c.SurveyProgress, c.Token, c.TrainingCourse, c.TrainingVideo, c.User,
		c.UserActivity, c.UserAuth, c.UserSession, c.UserSessionSocket,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ApiAccess, c.ApiUser, c.ApiUserToken, c.AuditLog, c.Channel, c.ChannelMessage,
		c.ChannelMessageRead, c.ChannelSub, c.ContactUs, c.Document, c.Estimate,
		c.EstimateActivity, c.HomeOwner, c.InstallationJob, c.InstallationJobItem,
		c.InstallationJobProgress, c.Job, c.JobActivity, c.JobAssignmentHistory,
		c.JobDocURL, c.JobNote, c.JobProgressHistory, c.NotifySetting, c.OptionList,
		c.Partner, c.PartnerActivity, c.PartnerContact, c.PartnerService,
		c.PartnerServiceCity, c.PartnerServiceState, c.PartnerTrainingVideo, c.Payment,
		c.PostalCode, c.Pricing, c.Product, c.ProductPackage, c.Survey,
		c.SurveyProgress, c.Token, c.TrainingCourse, c.TrainingVideo, c.User,
		c.UserActivity, c.UserAuth, c.UserSession, c.UserSessionSocket,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApiAccessMutation:
		return c.ApiAccess.mutate(ctx, m)
	case *ApiUserMutation:
		return c.ApiUser.mutate(ctx, m)
	case *ApiUserTokenMutation:
		return c.ApiUserToken.mutate(ctx, m)
	case *AuditLogMutation:
		return c.AuditLog.mutate(ctx, m)
	case *ChannelMutation:
		return c.Channel.mutate(ctx, m)
	case *ChannelMessageMutation:
		return c.ChannelMessage.mutate(ctx, m)
	case *ChannelMessageReadMutation:
		return c.ChannelMessageRead.mutate(ctx, m)
	case *ChannelSubMutation:
		return c.ChannelSub.mutate(ctx, m)
	case *ContactUsMutation:
		return c.ContactUs.mutate(ctx, m)
	case *DocumentMutation:
		return c.Document.mutate(ctx, m)
	case *EstimateMutation:
		return c.Estimate.mutate(ctx, m)
	case *EstimateActivityMutation:
		return c.EstimateActivity.mutate(ctx, m)
	case *HomeOwnerMutation:
		return c.HomeOwner.mutate(ctx, m)
	case *InstallationJobMutation:
		return c.InstallationJob.mutate(ctx, m)
	case *InstallationJobItemMutation:
		return c.InstallationJobItem.mutate(ctx, m)
	case *InstallationJobProgressMutation:
		return c.InstallationJobProgress.mutate(ctx, m)
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *JobActivityMutation:
		return c.JobActivity.mutate(ctx, m)
	case *JobAssignmentHistoryMutation:
		return c.JobAssignmentHistory.mutate(ctx, m)
	case *JobDocURLMutation:
		return c.JobDocURL.mutate(ctx, m)
	case *JobNoteMutation:
		return c.JobNote.mutate(ctx, m)
	case *JobProgressHistoryMutation:
		return c.JobProgressHistory.mutate(ctx, m)
	case *NotifySettingMutation:
		return c.NotifySetting.mutate(ctx, m)
	case *OptionListMutation:
		return c.OptionList.mutate(ctx, m)
	case *PartnerMutation:
		return c.Partner.mutate(ctx, m)
	case *PartnerActivityMutation:
		return c.PartnerActivity.mutate(ctx, m)
	case *PartnerContactMutation:
		return c.PartnerContact.mutate(ctx, m)
	case *PartnerServiceMutation:
		return c.PartnerService.mutate(ctx, m)
	case *PartnerServiceCityMutation:
		return c.PartnerServiceCity.mutate(ctx, m)
	case *PartnerServiceStateMutation:
		return c.PartnerServiceState.mutate(ctx, m)
	case *PartnerTrainingVideoMutation:
		return c.PartnerTrainingVideo.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PostalCodeMutation:
		return c.PostalCode.mutate(ctx, m)
	case *PricingMutation:
		return c.Pricing.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *ProductPackageMutation:
		return c.ProductPackage.mutate(ctx, m)
	case *SurveyMutation:
		return c.Survey.mutate(ctx, m)
	case *SurveyProgressMutation:
		return c.SurveyProgress.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	case *TrainingCourseMutation:
		return c.TrainingCourse.mutate(ctx, m)
	case *TrainingVideoMutation:
		return c.TrainingVideo.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserActivityMutation:
		return c.UserActivity.mutate(ctx, m)
	case *UserAuthMutation:
		return c.UserAuth.mutate(ctx, m)
	case *UserSessionMutation:
		return c.UserSession.mutate(ctx, m)
	case *UserSessionSocketMutation:
		return c.UserSessionSocket.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApiAccessClient is a client for the ApiAccess schema.
type ApiAccessClient struct {
	config
}

// NewApiAccessClient returns a client for the ApiAccess from the given config.
func NewApiAccessClient(c config) *ApiAccessClient {
	return &ApiAccessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apiaccess.Hooks(f(g(h())))`.
func (c *ApiAccessClient) Use(hooks ...Hook) {
	c.hooks.ApiAccess = append(c.hooks.ApiAccess, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apiaccess.Intercept(f(g(h())))`.
func (c *ApiAccessClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiAccess = append(c.inters.ApiAccess, interceptors...)
}

// Create returns a builder for creating a ApiAccess entity.
func (c *ApiAccessClient) Create() *ApiAccessCreate {
	mutation := newApiAccessMutation(c.config, OpCreate)
	return &ApiAccessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiAccess entities.
func (c *ApiAccessClient) CreateBulk(builders ...*ApiAccessCreate) *ApiAccessCreateBulk {
	return &ApiAccessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiAccess.
func (c *ApiAccessClient) Update() *ApiAccessUpdate {
	mutation := newApiAccessMutation(c.config, OpUpdate)
	return &ApiAccessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiAccessClient) UpdateOne(aa *ApiAccess) *ApiAccessUpdateOne {
	mutation := newApiAccessMutation(c.config, OpUpdateOne, withApiAccess(aa))
	return &ApiAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiAccessClient) UpdateOneID(id string) *ApiAccessUpdateOne {
	mutation := newApiAccessMutation(c.config, OpUpdateOne, withApiAccessID(id))
	return &ApiAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiAccess.
func (c *ApiAccessClient) Delete() *ApiAccessDelete {
	mutation := newApiAccessMutation(c.config, OpDelete)
	return &ApiAccessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiAccessClient) DeleteOne(aa *ApiAccess) *ApiAccessDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiAccessClient) DeleteOneID(id string) *ApiAccessDeleteOne {
	builder := c.Delete().Where(apiaccess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiAccessDeleteOne{builder}
}

// Query returns a query builder for ApiAccess.
func (c *ApiAccessClient) Query() *ApiAccessQuery {
	return &ApiAccessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiAccess},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiAccess entity by its id.
func (c *ApiAccessClient) Get(ctx context.Context, id string) (*ApiAccess, error) {
	return c.Query().Where(apiaccess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiAccessClient) GetX(ctx context.Context, id string) *ApiAccess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApiAccessClient) Hooks() []Hook {
	return c.hooks.ApiAccess
}

// Interceptors returns the client interceptors.
func (c *ApiAccessClient) Interceptors() []Interceptor {
	return c.inters.ApiAccess
}

func (c *ApiAccessClient) mutate(ctx context.Context, m *ApiAccessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiAccessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiAccessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiAccessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiAccess mutation op: %q", m.Op())
	}
}

// ApiUserClient is a client for the ApiUser schema.
type ApiUserClient struct {
	config
}

// NewApiUserClient returns a client for the ApiUser from the given config.
func NewApiUserClient(c config) *ApiUserClient {
	return &ApiUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apiuser.Hooks(f(g(h())))`.
func (c *ApiUserClient) Use(hooks ...Hook) {
	c.hooks.ApiUser = append(c.hooks.ApiUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apiuser.Intercept(f(g(h())))`.
func (c *ApiUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiUser = append(c.inters.ApiUser, interceptors...)
}

// Create returns a builder for creating a ApiUser entity.
func (c *ApiUserClient) Create() *ApiUserCreate {
	mutation := newApiUserMutation(c.config, OpCreate)
	return &ApiUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiUser entities.
func (c *ApiUserClient) CreateBulk(builders ...*ApiUserCreate) *ApiUserCreateBulk {
	return &ApiUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiUser.
func (c *ApiUserClient) Update() *ApiUserUpdate {
	mutation := newApiUserMutation(c.config, OpUpdate)
	return &ApiUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiUserClient) UpdateOne(au *ApiUser) *ApiUserUpdateOne {
	mutation := newApiUserMutation(c.config, OpUpdateOne, withApiUser(au))
	return &ApiUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiUserClient) UpdateOneID(id string) *ApiUserUpdateOne {
	mutation := newApiUserMutation(c.config, OpUpdateOne, withApiUserID(id))
	return &ApiUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiUser.
func (c *ApiUserClient) Delete() *ApiUserDelete {
	mutation := newApiUserMutation(c.config, OpDelete)
	return &ApiUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiUserClient) DeleteOne(au *ApiUser) *ApiUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiUserClient) DeleteOneID(id string) *ApiUserDeleteOne {
	builder := c.Delete().Where(apiuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiUserDeleteOne{builder}
}

// Query returns a query builder for ApiUser.
func (c *ApiUserClient) Query() *ApiUserQuery {
	return &ApiUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiUser},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiUser entity by its id.
func (c *ApiUserClient) Get(ctx context.Context, id string) (*ApiUser, error) {
	return c.Query().Where(apiuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiUserClient) GetX(ctx context.Context, id string) *ApiUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTokens queries the tokens edge of a ApiUser.
func (c *ApiUserClient) QueryTokens(au *ApiUser) *ApiUserTokenQuery {
	query := (&ApiUserTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(apiusertoken.Table, apiusertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.TokensTable, apiuser.TokensColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a ApiUser.
func (c *ApiUserClient) QueryAuditLogs(au *ApiUser) *AuditLogQuery {
	query := (&AuditLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(auditlog.Table, auditlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.AuditLogsTable, apiuser.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedEstimates queries the created_estimates edge of a ApiUser.
func (c *ApiUserClient) QueryCreatedEstimates(au *ApiUser) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.CreatedEstimatesTable, apiuser.CreatedEstimatesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedJobs queries the created_jobs edge of a ApiUser.
func (c *ApiUserClient) QueryCreatedJobs(au *ApiUser) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.CreatedJobsTable, apiuser.CreatedJobsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedPartners queries the created_partners edge of a ApiUser.
func (c *ApiUserClient) QueryCreatedPartners(au *ApiUser) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.CreatedPartnersTable, apiuser.CreatedPartnersColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyProgress queries the survey_progress edge of a ApiUser.
func (c *ApiUserClient) QuerySurveyProgress(au *ApiUser) *SurveyProgressQuery {
	query := (&SurveyProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(surveyprogress.Table, surveyprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.SurveyProgressTable, apiuser.SurveyProgressColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEstimateActivities queries the estimate_activities edge of a ApiUser.
func (c *ApiUserClient) QueryEstimateActivities(au *ApiUser) *EstimateActivityQuery {
	query := (&EstimateActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(estimateactivity.Table, estimateactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.EstimateActivitiesTable, apiuser.EstimateActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserActivities queries the user_activities edge of a ApiUser.
func (c *ApiUserClient) QueryUserActivities(au *ApiUser) *UserActivityQuery {
	query := (&UserActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(useractivity.Table, useractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.UserActivitiesTable, apiuser.UserActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartnerActivities queries the partner_activities edge of a ApiUser.
func (c *ApiUserClient) QueryPartnerActivities(au *ApiUser) *PartnerActivityQuery {
	query := (&PartnerActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(partneractivity.Table, partneractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.PartnerActivitiesTable, apiuser.PartnerActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobActivities queries the job_activities edge of a ApiUser.
func (c *ApiUserClient) QueryJobActivities(au *ApiUser) *JobActivityQuery {
	query := (&JobActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(jobactivity.Table, jobactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.JobActivitiesTable, apiuser.JobActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a ApiUser.
func (c *ApiUserClient) QueryNotifications(au *ApiUser) *ChannelMessageQuery {
	query := (&ChannelMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(channelmessage.Table, channelmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.NotificationsTable, apiuser.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobProgressHistory queries the job_progress_history edge of a ApiUser.
func (c *ApiUserClient) QueryJobProgressHistory(au *ApiUser) *JobProgressHistoryQuery {
	query := (&JobProgressHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiuser.Table, apiuser.FieldID, id),
			sqlgraph.To(jobprogresshistory.Table, jobprogresshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apiuser.JobProgressHistoryTable, apiuser.JobProgressHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApiUserClient) Hooks() []Hook {
	return c.hooks.ApiUser
}

// Interceptors returns the client interceptors.
func (c *ApiUserClient) Interceptors() []Interceptor {
	return c.inters.ApiUser
}

func (c *ApiUserClient) mutate(ctx context.Context, m *ApiUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiUser mutation op: %q", m.Op())
	}
}

// ApiUserTokenClient is a client for the ApiUserToken schema.
type ApiUserTokenClient struct {
	config
}

// NewApiUserTokenClient returns a client for the ApiUserToken from the given config.
func NewApiUserTokenClient(c config) *ApiUserTokenClient {
	return &ApiUserTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apiusertoken.Hooks(f(g(h())))`.
func (c *ApiUserTokenClient) Use(hooks ...Hook) {
	c.hooks.ApiUserToken = append(c.hooks.ApiUserToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apiusertoken.Intercept(f(g(h())))`.
func (c *ApiUserTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiUserToken = append(c.inters.ApiUserToken, interceptors...)
}

// Create returns a builder for creating a ApiUserToken entity.
func (c *ApiUserTokenClient) Create() *ApiUserTokenCreate {
	mutation := newApiUserTokenMutation(c.config, OpCreate)
	return &ApiUserTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiUserToken entities.
func (c *ApiUserTokenClient) CreateBulk(builders ...*ApiUserTokenCreate) *ApiUserTokenCreateBulk {
	return &ApiUserTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiUserToken.
func (c *ApiUserTokenClient) Update() *ApiUserTokenUpdate {
	mutation := newApiUserTokenMutation(c.config, OpUpdate)
	return &ApiUserTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiUserTokenClient) UpdateOne(aut *ApiUserToken) *ApiUserTokenUpdateOne {
	mutation := newApiUserTokenMutation(c.config, OpUpdateOne, withApiUserToken(aut))
	return &ApiUserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiUserTokenClient) UpdateOneID(id string) *ApiUserTokenUpdateOne {
	mutation := newApiUserTokenMutation(c.config, OpUpdateOne, withApiUserTokenID(id))
	return &ApiUserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiUserToken.
func (c *ApiUserTokenClient) Delete() *ApiUserTokenDelete {
	mutation := newApiUserTokenMutation(c.config, OpDelete)
	return &ApiUserTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiUserTokenClient) DeleteOne(aut *ApiUserToken) *ApiUserTokenDeleteOne {
	return c.DeleteOneID(aut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiUserTokenClient) DeleteOneID(id string) *ApiUserTokenDeleteOne {
	builder := c.Delete().Where(apiusertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiUserTokenDeleteOne{builder}
}

// Query returns a query builder for ApiUserToken.
func (c *ApiUserTokenClient) Query() *ApiUserTokenQuery {
	return &ApiUserTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiUserToken},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiUserToken entity by its id.
func (c *ApiUserTokenClient) Get(ctx context.Context, id string) (*ApiUserToken, error) {
	return c.Query().Where(apiusertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiUserTokenClient) GetX(ctx context.Context, id string) *ApiUserToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAPIUser queries the api_user edge of a ApiUserToken.
func (c *ApiUserTokenClient) QueryAPIUser(aut *ApiUserToken) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apiusertoken.Table, apiusertoken.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apiusertoken.APIUserTable, apiusertoken.APIUserColumn),
		)
		fromV = sqlgraph.Neighbors(aut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApiUserTokenClient) Hooks() []Hook {
	return c.hooks.ApiUserToken
}

// Interceptors returns the client interceptors.
func (c *ApiUserTokenClient) Interceptors() []Interceptor {
	return c.inters.ApiUserToken
}

func (c *ApiUserTokenClient) mutate(ctx context.Context, m *ApiUserTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiUserTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiUserTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiUserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiUserTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiUserToken mutation op: %q", m.Op())
	}
}

// AuditLogClient is a client for the AuditLog schema.
type AuditLogClient struct {
	config
}

// NewAuditLogClient returns a client for the AuditLog from the given config.
func NewAuditLogClient(c config) *AuditLogClient {
	return &AuditLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auditlog.Hooks(f(g(h())))`.
func (c *AuditLogClient) Use(hooks ...Hook) {
	c.hooks.AuditLog = append(c.hooks.AuditLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auditlog.Intercept(f(g(h())))`.
func (c *AuditLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuditLog = append(c.inters.AuditLog, interceptors...)
}

// Create returns a builder for creating a AuditLog entity.
func (c *AuditLogClient) Create() *AuditLogCreate {
	mutation := newAuditLogMutation(c.config, OpCreate)
	return &AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditLog entities.
func (c *AuditLogClient) CreateBulk(builders ...*AuditLogCreate) *AuditLogCreateBulk {
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditLog.
func (c *AuditLogClient) Update() *AuditLogUpdate {
	mutation := newAuditLogMutation(c.config, OpUpdate)
	return &AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditLogClient) UpdateOne(al *AuditLog) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLog(al))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditLogClient) UpdateOneID(id string) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLogID(id))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditLog.
func (c *AuditLogClient) Delete() *AuditLogDelete {
	mutation := newAuditLogMutation(c.config, OpDelete)
	return &AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditLogClient) DeleteOne(al *AuditLog) *AuditLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditLogClient) DeleteOneID(id string) *AuditLogDeleteOne {
	builder := c.Delete().Where(auditlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditLogDeleteOne{builder}
}

// Query returns a query builder for AuditLog.
func (c *AuditLogClient) Query() *AuditLogQuery {
	return &AuditLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuditLog},
		inters: c.Interceptors(),
	}
}

// Get returns a AuditLog entity by its id.
func (c *AuditLogClient) Get(ctx context.Context, id string) (*AuditLog, error) {
	return c.Query().Where(auditlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditLogClient) GetX(ctx context.Context, id string) *AuditLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AuditLog.
func (c *AuditLogClient) QueryUser(al *AuditLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auditlog.Table, auditlog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auditlog.UserTable, auditlog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIUser queries the api_user edge of a AuditLog.
func (c *AuditLogClient) QueryAPIUser(al *AuditLog) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auditlog.Table, auditlog.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auditlog.APIUserTable, auditlog.APIUserColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuditLogClient) Hooks() []Hook {
	return c.hooks.AuditLog
}

// Interceptors returns the client interceptors.
func (c *AuditLogClient) Interceptors() []Interceptor {
	return c.inters.AuditLog
}

func (c *AuditLogClient) mutate(ctx context.Context, m *AuditLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuditLog mutation op: %q", m.Op())
	}
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channel.Intercept(f(g(h())))`.
func (c *ChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Channel = append(c.inters.Channel, interceptors...)
}

// Create returns a builder for creating a Channel entity.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id string) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelClient) DeleteOneID(id string) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id string) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id string) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscriptions queries the subscriptions edge of a Channel.
func (c *ChannelClient) QuerySubscriptions(ch *Channel) *ChannelSubQuery {
	query := (&ChannelSubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(channelsub.Table, channelsub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.SubscriptionsTable, channel.SubscriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a Channel.
func (c *ChannelClient) QueryMessages(ch *Channel) *ChannelMessageQuery {
	query := (&ChannelMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(channelmessage.Table, channelmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.MessagesTable, channel.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// Interceptors returns the client interceptors.
func (c *ChannelClient) Interceptors() []Interceptor {
	return c.inters.Channel
}

func (c *ChannelClient) mutate(ctx context.Context, m *ChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Channel mutation op: %q", m.Op())
	}
}

// ChannelMessageClient is a client for the ChannelMessage schema.
type ChannelMessageClient struct {
	config
}

// NewChannelMessageClient returns a client for the ChannelMessage from the given config.
func NewChannelMessageClient(c config) *ChannelMessageClient {
	return &ChannelMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelmessage.Hooks(f(g(h())))`.
func (c *ChannelMessageClient) Use(hooks ...Hook) {
	c.hooks.ChannelMessage = append(c.hooks.ChannelMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channelmessage.Intercept(f(g(h())))`.
func (c *ChannelMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChannelMessage = append(c.inters.ChannelMessage, interceptors...)
}

// Create returns a builder for creating a ChannelMessage entity.
func (c *ChannelMessageClient) Create() *ChannelMessageCreate {
	mutation := newChannelMessageMutation(c.config, OpCreate)
	return &ChannelMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelMessage entities.
func (c *ChannelMessageClient) CreateBulk(builders ...*ChannelMessageCreate) *ChannelMessageCreateBulk {
	return &ChannelMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelMessage.
func (c *ChannelMessageClient) Update() *ChannelMessageUpdate {
	mutation := newChannelMessageMutation(c.config, OpUpdate)
	return &ChannelMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelMessageClient) UpdateOne(cm *ChannelMessage) *ChannelMessageUpdateOne {
	mutation := newChannelMessageMutation(c.config, OpUpdateOne, withChannelMessage(cm))
	return &ChannelMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelMessageClient) UpdateOneID(id string) *ChannelMessageUpdateOne {
	mutation := newChannelMessageMutation(c.config, OpUpdateOne, withChannelMessageID(id))
	return &ChannelMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelMessage.
func (c *ChannelMessageClient) Delete() *ChannelMessageDelete {
	mutation := newChannelMessageMutation(c.config, OpDelete)
	return &ChannelMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelMessageClient) DeleteOne(cm *ChannelMessage) *ChannelMessageDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelMessageClient) DeleteOneID(id string) *ChannelMessageDeleteOne {
	builder := c.Delete().Where(channelmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelMessageDeleteOne{builder}
}

// Query returns a query builder for ChannelMessage.
func (c *ChannelMessageClient) Query() *ChannelMessageQuery {
	return &ChannelMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannelMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a ChannelMessage entity by its id.
func (c *ChannelMessageClient) Get(ctx context.Context, id string) (*ChannelMessage, error) {
	return c.Query().Where(channelmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelMessageClient) GetX(ctx context.Context, id string) *ChannelMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReads queries the reads edge of a ChannelMessage.
func (c *ChannelMessageClient) QueryReads(cm *ChannelMessage) *ChannelMessageReadQuery {
	query := (&ChannelMessageReadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, id),
			sqlgraph.To(channelmessageread.Table, channelmessageread.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channelmessage.ReadsTable, channelmessage.ReadsColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a ChannelMessage.
func (c *ChannelMessageClient) QueryChannel(cm *ChannelMessage) *ChannelQuery {
	query := (&ChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.ChannelTable, channelmessage.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFrom queries the from edge of a ChannelMessage.
func (c *ChannelMessageClient) QueryFrom(cm *ChannelMessage) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.FromTable, channelmessage.FromColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromAPIUser queries the from_api_user edge of a ChannelMessage.
func (c *ChannelMessageClient) QueryFromAPIUser(cm *ChannelMessage) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.FromAPIUserTable, channelmessage.FromAPIUserColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTo queries the to edge of a ChannelMessage.
func (c *ChannelMessageClient) QueryTo(cm *ChannelMessage) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.ToTable, channelmessage.ToColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelMessageClient) Hooks() []Hook {
	return c.hooks.ChannelMessage
}

// Interceptors returns the client interceptors.
func (c *ChannelMessageClient) Interceptors() []Interceptor {
	return c.inters.ChannelMessage
}

func (c *ChannelMessageClient) mutate(ctx context.Context, m *ChannelMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChannelMessage mutation op: %q", m.Op())
	}
}

// ChannelMessageReadClient is a client for the ChannelMessageRead schema.
type ChannelMessageReadClient struct {
	config
}

// NewChannelMessageReadClient returns a client for the ChannelMessageRead from the given config.
func NewChannelMessageReadClient(c config) *ChannelMessageReadClient {
	return &ChannelMessageReadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelmessageread.Hooks(f(g(h())))`.
func (c *ChannelMessageReadClient) Use(hooks ...Hook) {
	c.hooks.ChannelMessageRead = append(c.hooks.ChannelMessageRead, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channelmessageread.Intercept(f(g(h())))`.
func (c *ChannelMessageReadClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChannelMessageRead = append(c.inters.ChannelMessageRead, interceptors...)
}

// Create returns a builder for creating a ChannelMessageRead entity.
func (c *ChannelMessageReadClient) Create() *ChannelMessageReadCreate {
	mutation := newChannelMessageReadMutation(c.config, OpCreate)
	return &ChannelMessageReadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelMessageRead entities.
func (c *ChannelMessageReadClient) CreateBulk(builders ...*ChannelMessageReadCreate) *ChannelMessageReadCreateBulk {
	return &ChannelMessageReadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelMessageRead.
func (c *ChannelMessageReadClient) Update() *ChannelMessageReadUpdate {
	mutation := newChannelMessageReadMutation(c.config, OpUpdate)
	return &ChannelMessageReadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelMessageReadClient) UpdateOne(cmr *ChannelMessageRead) *ChannelMessageReadUpdateOne {
	mutation := newChannelMessageReadMutation(c.config, OpUpdateOne, withChannelMessageRead(cmr))
	return &ChannelMessageReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelMessageReadClient) UpdateOneID(id string) *ChannelMessageReadUpdateOne {
	mutation := newChannelMessageReadMutation(c.config, OpUpdateOne, withChannelMessageReadID(id))
	return &ChannelMessageReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelMessageRead.
func (c *ChannelMessageReadClient) Delete() *ChannelMessageReadDelete {
	mutation := newChannelMessageReadMutation(c.config, OpDelete)
	return &ChannelMessageReadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelMessageReadClient) DeleteOne(cmr *ChannelMessageRead) *ChannelMessageReadDeleteOne {
	return c.DeleteOneID(cmr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelMessageReadClient) DeleteOneID(id string) *ChannelMessageReadDeleteOne {
	builder := c.Delete().Where(channelmessageread.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelMessageReadDeleteOne{builder}
}

// Query returns a query builder for ChannelMessageRead.
func (c *ChannelMessageReadClient) Query() *ChannelMessageReadQuery {
	return &ChannelMessageReadQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannelMessageRead},
		inters: c.Interceptors(),
	}
}

// Get returns a ChannelMessageRead entity by its id.
func (c *ChannelMessageReadClient) Get(ctx context.Context, id string) (*ChannelMessageRead, error) {
	return c.Query().Where(channelmessageread.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelMessageReadClient) GetX(ctx context.Context, id string) *ChannelMessageRead {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannelMessage queries the channel_message edge of a ChannelMessageRead.
func (c *ChannelMessageReadClient) QueryChannelMessage(cmr *ChannelMessageRead) *ChannelMessageQuery {
	query := (&ChannelMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cmr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessageread.Table, channelmessageread.FieldID, id),
			sqlgraph.To(channelmessage.Table, channelmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessageread.ChannelMessageTable, channelmessageread.ChannelMessageColumn),
		)
		fromV = sqlgraph.Neighbors(cmr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ChannelMessageRead.
func (c *ChannelMessageReadClient) QueryUser(cmr *ChannelMessageRead) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cmr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessageread.Table, channelmessageread.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessageread.UserTable, channelmessageread.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cmr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelMessageReadClient) Hooks() []Hook {
	return c.hooks.ChannelMessageRead
}

// Interceptors returns the client interceptors.
func (c *ChannelMessageReadClient) Interceptors() []Interceptor {
	return c.inters.ChannelMessageRead
}

func (c *ChannelMessageReadClient) mutate(ctx context.Context, m *ChannelMessageReadMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelMessageReadCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelMessageReadUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelMessageReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelMessageReadDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChannelMessageRead mutation op: %q", m.Op())
	}
}

// ChannelSubClient is a client for the ChannelSub schema.
type ChannelSubClient struct {
	config
}

// NewChannelSubClient returns a client for the ChannelSub from the given config.
func NewChannelSubClient(c config) *ChannelSubClient {
	return &ChannelSubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelsub.Hooks(f(g(h())))`.
func (c *ChannelSubClient) Use(hooks ...Hook) {
	c.hooks.ChannelSub = append(c.hooks.ChannelSub, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channelsub.Intercept(f(g(h())))`.
func (c *ChannelSubClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChannelSub = append(c.inters.ChannelSub, interceptors...)
}

// Create returns a builder for creating a ChannelSub entity.
func (c *ChannelSubClient) Create() *ChannelSubCreate {
	mutation := newChannelSubMutation(c.config, OpCreate)
	return &ChannelSubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelSub entities.
func (c *ChannelSubClient) CreateBulk(builders ...*ChannelSubCreate) *ChannelSubCreateBulk {
	return &ChannelSubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelSub.
func (c *ChannelSubClient) Update() *ChannelSubUpdate {
	mutation := newChannelSubMutation(c.config, OpUpdate)
	return &ChannelSubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelSubClient) UpdateOne(cs *ChannelSub) *ChannelSubUpdateOne {
	mutation := newChannelSubMutation(c.config, OpUpdateOne, withChannelSub(cs))
	return &ChannelSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelSubClient) UpdateOneID(id string) *ChannelSubUpdateOne {
	mutation := newChannelSubMutation(c.config, OpUpdateOne, withChannelSubID(id))
	return &ChannelSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelSub.
func (c *ChannelSubClient) Delete() *ChannelSubDelete {
	mutation := newChannelSubMutation(c.config, OpDelete)
	return &ChannelSubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelSubClient) DeleteOne(cs *ChannelSub) *ChannelSubDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelSubClient) DeleteOneID(id string) *ChannelSubDeleteOne {
	builder := c.Delete().Where(channelsub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelSubDeleteOne{builder}
}

// Query returns a query builder for ChannelSub.
func (c *ChannelSubClient) Query() *ChannelSubQuery {
	return &ChannelSubQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannelSub},
		inters: c.Interceptors(),
	}
}

// Get returns a ChannelSub entity by its id.
func (c *ChannelSubClient) Get(ctx context.Context, id string) (*ChannelSub, error) {
	return c.Query().Where(channelsub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelSubClient) GetX(ctx context.Context, id string) *ChannelSub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannel queries the channel edge of a ChannelSub.
func (c *ChannelSubClient) QueryChannel(cs *ChannelSub) *ChannelQuery {
	query := (&ChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelsub.Table, channelsub.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelsub.ChannelTable, channelsub.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ChannelSub.
func (c *ChannelSubClient) QueryUser(cs *ChannelSub) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelsub.Table, channelsub.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelsub.UserTable, channelsub.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a ChannelSub.
func (c *ChannelSubClient) QueryPartner(cs *ChannelSub) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelsub.Table, channelsub.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelsub.PartnerTable, channelsub.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelSubClient) Hooks() []Hook {
	return c.hooks.ChannelSub
}

// Interceptors returns the client interceptors.
func (c *ChannelSubClient) Interceptors() []Interceptor {
	return c.inters.ChannelSub
}

func (c *ChannelSubClient) mutate(ctx context.Context, m *ChannelSubMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelSubCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelSubUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelSubDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChannelSub mutation op: %q", m.Op())
	}
}

// ContactUsClient is a client for the ContactUs schema.
type ContactUsClient struct {
	config
}

// NewContactUsClient returns a client for the ContactUs from the given config.
func NewContactUsClient(c config) *ContactUsClient {
	return &ContactUsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contactus.Hooks(f(g(h())))`.
func (c *ContactUsClient) Use(hooks ...Hook) {
	c.hooks.ContactUs = append(c.hooks.ContactUs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contactus.Intercept(f(g(h())))`.
func (c *ContactUsClient) Intercept(interceptors ...Interceptor) {
	c.inters.ContactUs = append(c.inters.ContactUs, interceptors...)
}

// Create returns a builder for creating a ContactUs entity.
func (c *ContactUsClient) Create() *ContactUsCreate {
	mutation := newContactUsMutation(c.config, OpCreate)
	return &ContactUsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContactUs entities.
func (c *ContactUsClient) CreateBulk(builders ...*ContactUsCreate) *ContactUsCreateBulk {
	return &ContactUsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContactUs.
func (c *ContactUsClient) Update() *ContactUsUpdate {
	mutation := newContactUsMutation(c.config, OpUpdate)
	return &ContactUsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactUsClient) UpdateOne(cu *ContactUs) *ContactUsUpdateOne {
	mutation := newContactUsMutation(c.config, OpUpdateOne, withContactUs(cu))
	return &ContactUsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactUsClient) UpdateOneID(id string) *ContactUsUpdateOne {
	mutation := newContactUsMutation(c.config, OpUpdateOne, withContactUsID(id))
	return &ContactUsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContactUs.
func (c *ContactUsClient) Delete() *ContactUsDelete {
	mutation := newContactUsMutation(c.config, OpDelete)
	return &ContactUsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactUsClient) DeleteOne(cu *ContactUs) *ContactUsDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContactUsClient) DeleteOneID(id string) *ContactUsDeleteOne {
	builder := c.Delete().Where(contactus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactUsDeleteOne{builder}
}

// Query returns a query builder for ContactUs.
func (c *ContactUsClient) Query() *ContactUsQuery {
	return &ContactUsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContactUs},
		inters: c.Interceptors(),
	}
}

// Get returns a ContactUs entity by its id.
func (c *ContactUsClient) Get(ctx context.Context, id string) (*ContactUs, error) {
	return c.Query().Where(contactus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactUsClient) GetX(ctx context.Context, id string) *ContactUs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartner queries the partner edge of a ContactUs.
func (c *ContactUsClient) QueryPartner(cu *ContactUs) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactus.Table, contactus.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactus.PartnerTable, contactus.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a ContactUs.
func (c *ContactUsClient) QueryCreator(cu *ContactUs) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactus.Table, contactus.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactus.CreatorTable, contactus.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactUsClient) Hooks() []Hook {
	return c.hooks.ContactUs
}

// Interceptors returns the client interceptors.
func (c *ContactUsClient) Interceptors() []Interceptor {
	return c.inters.ContactUs
}

func (c *ContactUsClient) mutate(ctx context.Context, m *ContactUsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContactUsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContactUsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContactUsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContactUsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ContactUs mutation op: %q", m.Op())
	}
}

// DocumentClient is a client for the Document schema.
type DocumentClient struct {
	config
}

// NewDocumentClient returns a client for the Document from the given config.
func NewDocumentClient(c config) *DocumentClient {
	return &DocumentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `document.Hooks(f(g(h())))`.
func (c *DocumentClient) Use(hooks ...Hook) {
	c.hooks.Document = append(c.hooks.Document, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `document.Intercept(f(g(h())))`.
func (c *DocumentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Document = append(c.inters.Document, interceptors...)
}

// Create returns a builder for creating a Document entity.
func (c *DocumentClient) Create() *DocumentCreate {
	mutation := newDocumentMutation(c.config, OpCreate)
	return &DocumentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Document entities.
func (c *DocumentClient) CreateBulk(builders ...*DocumentCreate) *DocumentCreateBulk {
	return &DocumentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Document.
func (c *DocumentClient) Update() *DocumentUpdate {
	mutation := newDocumentMutation(c.config, OpUpdate)
	return &DocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DocumentClient) UpdateOne(d *Document) *DocumentUpdateOne {
	mutation := newDocumentMutation(c.config, OpUpdateOne, withDocument(d))
	return &DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DocumentClient) UpdateOneID(id string) *DocumentUpdateOne {
	mutation := newDocumentMutation(c.config, OpUpdateOne, withDocumentID(id))
	return &DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Document.
func (c *DocumentClient) Delete() *DocumentDelete {
	mutation := newDocumentMutation(c.config, OpDelete)
	return &DocumentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DocumentClient) DeleteOne(d *Document) *DocumentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DocumentClient) DeleteOneID(id string) *DocumentDeleteOne {
	builder := c.Delete().Where(document.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DocumentDeleteOne{builder}
}

// Query returns a query builder for Document.
func (c *DocumentClient) Query() *DocumentQuery {
	return &DocumentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDocument},
		inters: c.Interceptors(),
	}
}

// Get returns a Document entity by its id.
func (c *DocumentClient) Get(ctx context.Context, id string) (*Document, error) {
	return c.Query().Where(document.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DocumentClient) GetX(ctx context.Context, id string) *Document {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrainingVideo queries the training_video edge of a Document.
func (c *DocumentClient) QueryTrainingVideo(d *Document) *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.TrainingVideoTable, document.TrainingVideoColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrainingVideoPoster queries the training_video_poster edge of a Document.
func (c *DocumentClient) QueryTrainingVideoPoster(d *Document) *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.TrainingVideoPosterTable, document.TrainingVideoPosterColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductsImage queries the products_image edge of a Document.
func (c *DocumentClient) QueryProductsImage(d *Document) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.ProductsImageTable, document.ProductsImageColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstallationJobItemImage queries the installation_job_item_image edge of a Document.
func (c *DocumentClient) QueryInstallationJobItemImage(d *Document) *InstallationJobItemQuery {
	query := (&InstallationJobItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(installationjobitem.Table, installationjobitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, document.InstallationJobItemImageTable, document.InstallationJobItemImageColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEstimatePdf queries the estimate_pdf edge of a Document.
func (c *DocumentClient) QueryEstimatePdf(d *Document) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.EstimatePdfTable, document.EstimatePdfColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobEstimatePdf queries the job_estimate_pdf edge of a Document.
func (c *DocumentClient) QueryJobEstimatePdf(d *Document) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, document.JobEstimatePdfTable, document.JobEstimatePdfColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DocumentClient) Hooks() []Hook {
	return c.hooks.Document
}

// Interceptors returns the client interceptors.
func (c *DocumentClient) Interceptors() []Interceptor {
	return c.inters.Document
}

func (c *DocumentClient) mutate(ctx context.Context, m *DocumentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DocumentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DocumentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Document mutation op: %q", m.Op())
	}
}

// EstimateClient is a client for the Estimate schema.
type EstimateClient struct {
	config
}

// NewEstimateClient returns a client for the Estimate from the given config.
func NewEstimateClient(c config) *EstimateClient {
	return &EstimateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `estimate.Hooks(f(g(h())))`.
func (c *EstimateClient) Use(hooks ...Hook) {
	c.hooks.Estimate = append(c.hooks.Estimate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `estimate.Intercept(f(g(h())))`.
func (c *EstimateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Estimate = append(c.inters.Estimate, interceptors...)
}

// Create returns a builder for creating a Estimate entity.
func (c *EstimateClient) Create() *EstimateCreate {
	mutation := newEstimateMutation(c.config, OpCreate)
	return &EstimateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Estimate entities.
func (c *EstimateClient) CreateBulk(builders ...*EstimateCreate) *EstimateCreateBulk {
	return &EstimateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Estimate.
func (c *EstimateClient) Update() *EstimateUpdate {
	mutation := newEstimateMutation(c.config, OpUpdate)
	return &EstimateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EstimateClient) UpdateOne(e *Estimate) *EstimateUpdateOne {
	mutation := newEstimateMutation(c.config, OpUpdateOne, withEstimate(e))
	return &EstimateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EstimateClient) UpdateOneID(id string) *EstimateUpdateOne {
	mutation := newEstimateMutation(c.config, OpUpdateOne, withEstimateID(id))
	return &EstimateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Estimate.
func (c *EstimateClient) Delete() *EstimateDelete {
	mutation := newEstimateMutation(c.config, OpDelete)
	return &EstimateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EstimateClient) DeleteOne(e *Estimate) *EstimateDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EstimateClient) DeleteOneID(id string) *EstimateDeleteOne {
	builder := c.Delete().Where(estimate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EstimateDeleteOne{builder}
}

// Query returns a query builder for Estimate.
func (c *EstimateClient) Query() *EstimateQuery {
	return &EstimateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEstimate},
		inters: c.Interceptors(),
	}
}

// Get returns a Estimate entity by its id.
func (c *EstimateClient) Get(ctx context.Context, id string) (*Estimate, error) {
	return c.Query().Where(estimate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EstimateClient) GetX(ctx context.Context, id string) *Estimate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivities queries the activities edge of a Estimate.
func (c *EstimateClient) QueryActivities(e *Estimate) *EstimateActivityQuery {
	query := (&EstimateActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(estimateactivity.Table, estimateactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, estimate.ActivitiesTable, estimate.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobInfo queries the job_info edge of a Estimate.
func (c *EstimateClient) QueryJobInfo(e *Estimate) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, estimate.JobInfoTable, estimate.JobInfoColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a Estimate.
func (c *EstimateClient) QueryPartner(e *Estimate) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.PartnerTable, estimate.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHomeOwner queries the home_owner edge of a Estimate.
func (c *EstimateClient) QueryHomeOwner(e *Estimate) *HomeOwnerQuery {
	query := (&HomeOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(homeowner.Table, homeowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.HomeOwnerTable, estimate.HomeOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalesRep queries the sales_rep edge of a Estimate.
func (c *EstimateClient) QuerySalesRep(e *Estimate) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.SalesRepTable, estimate.SalesRepColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Estimate.
func (c *EstimateClient) QueryCreator(e *Estimate) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.CreatorTable, estimate.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a Estimate.
func (c *EstimateClient) QueryCreatorAPI(e *Estimate) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.CreatorAPITable, estimate.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPdf queries the pdf edge of a Estimate.
func (c *EstimateClient) QueryPdf(e *Estimate) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, estimate.PdfTable, estimate.PdfColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EstimateClient) Hooks() []Hook {
	return c.hooks.Estimate
}

// Interceptors returns the client interceptors.
func (c *EstimateClient) Interceptors() []Interceptor {
	return c.inters.Estimate
}

func (c *EstimateClient) mutate(ctx context.Context, m *EstimateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EstimateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EstimateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EstimateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EstimateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Estimate mutation op: %q", m.Op())
	}
}

// EstimateActivityClient is a client for the EstimateActivity schema.
type EstimateActivityClient struct {
	config
}

// NewEstimateActivityClient returns a client for the EstimateActivity from the given config.
func NewEstimateActivityClient(c config) *EstimateActivityClient {
	return &EstimateActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `estimateactivity.Hooks(f(g(h())))`.
func (c *EstimateActivityClient) Use(hooks ...Hook) {
	c.hooks.EstimateActivity = append(c.hooks.EstimateActivity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `estimateactivity.Intercept(f(g(h())))`.
func (c *EstimateActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.EstimateActivity = append(c.inters.EstimateActivity, interceptors...)
}

// Create returns a builder for creating a EstimateActivity entity.
func (c *EstimateActivityClient) Create() *EstimateActivityCreate {
	mutation := newEstimateActivityMutation(c.config, OpCreate)
	return &EstimateActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EstimateActivity entities.
func (c *EstimateActivityClient) CreateBulk(builders ...*EstimateActivityCreate) *EstimateActivityCreateBulk {
	return &EstimateActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EstimateActivity.
func (c *EstimateActivityClient) Update() *EstimateActivityUpdate {
	mutation := newEstimateActivityMutation(c.config, OpUpdate)
	return &EstimateActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EstimateActivityClient) UpdateOne(ea *EstimateActivity) *EstimateActivityUpdateOne {
	mutation := newEstimateActivityMutation(c.config, OpUpdateOne, withEstimateActivity(ea))
	return &EstimateActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EstimateActivityClient) UpdateOneID(id string) *EstimateActivityUpdateOne {
	mutation := newEstimateActivityMutation(c.config, OpUpdateOne, withEstimateActivityID(id))
	return &EstimateActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EstimateActivity.
func (c *EstimateActivityClient) Delete() *EstimateActivityDelete {
	mutation := newEstimateActivityMutation(c.config, OpDelete)
	return &EstimateActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EstimateActivityClient) DeleteOne(ea *EstimateActivity) *EstimateActivityDeleteOne {
	return c.DeleteOneID(ea.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EstimateActivityClient) DeleteOneID(id string) *EstimateActivityDeleteOne {
	builder := c.Delete().Where(estimateactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EstimateActivityDeleteOne{builder}
}

// Query returns a query builder for EstimateActivity.
func (c *EstimateActivityClient) Query() *EstimateActivityQuery {
	return &EstimateActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEstimateActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a EstimateActivity entity by its id.
func (c *EstimateActivityClient) Get(ctx context.Context, id string) (*EstimateActivity, error) {
	return c.Query().Where(estimateactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EstimateActivityClient) GetX(ctx context.Context, id string) *EstimateActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEstimate queries the estimate edge of a EstimateActivity.
func (c *EstimateActivityClient) QueryEstimate(ea *EstimateActivity) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimateactivity.Table, estimateactivity.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimateactivity.EstimateTable, estimateactivity.EstimateColumn),
		)
		fromV = sqlgraph.Neighbors(ea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a EstimateActivity.
func (c *EstimateActivityClient) QueryCreator(ea *EstimateActivity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimateactivity.Table, estimateactivity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimateactivity.CreatorTable, estimateactivity.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(ea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a EstimateActivity.
func (c *EstimateActivityClient) QueryCreatorAPI(ea *EstimateActivity) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimateactivity.Table, estimateactivity.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimateactivity.CreatorAPITable, estimateactivity.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(ea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EstimateActivityClient) Hooks() []Hook {
	return c.hooks.EstimateActivity
}

// Interceptors returns the client interceptors.
func (c *EstimateActivityClient) Interceptors() []Interceptor {
	return c.inters.EstimateActivity
}

func (c *EstimateActivityClient) mutate(ctx context.Context, m *EstimateActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EstimateActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EstimateActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EstimateActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EstimateActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EstimateActivity mutation op: %q", m.Op())
	}
}

// HomeOwnerClient is a client for the HomeOwner schema.
type HomeOwnerClient struct {
	config
}

// NewHomeOwnerClient returns a client for the HomeOwner from the given config.
func NewHomeOwnerClient(c config) *HomeOwnerClient {
	return &HomeOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `homeowner.Hooks(f(g(h())))`.
func (c *HomeOwnerClient) Use(hooks ...Hook) {
	c.hooks.HomeOwner = append(c.hooks.HomeOwner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `homeowner.Intercept(f(g(h())))`.
func (c *HomeOwnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.HomeOwner = append(c.inters.HomeOwner, interceptors...)
}

// Create returns a builder for creating a HomeOwner entity.
func (c *HomeOwnerClient) Create() *HomeOwnerCreate {
	mutation := newHomeOwnerMutation(c.config, OpCreate)
	return &HomeOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HomeOwner entities.
func (c *HomeOwnerClient) CreateBulk(builders ...*HomeOwnerCreate) *HomeOwnerCreateBulk {
	return &HomeOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HomeOwner.
func (c *HomeOwnerClient) Update() *HomeOwnerUpdate {
	mutation := newHomeOwnerMutation(c.config, OpUpdate)
	return &HomeOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HomeOwnerClient) UpdateOne(ho *HomeOwner) *HomeOwnerUpdateOne {
	mutation := newHomeOwnerMutation(c.config, OpUpdateOne, withHomeOwner(ho))
	return &HomeOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HomeOwnerClient) UpdateOneID(id string) *HomeOwnerUpdateOne {
	mutation := newHomeOwnerMutation(c.config, OpUpdateOne, withHomeOwnerID(id))
	return &HomeOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HomeOwner.
func (c *HomeOwnerClient) Delete() *HomeOwnerDelete {
	mutation := newHomeOwnerMutation(c.config, OpDelete)
	return &HomeOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HomeOwnerClient) DeleteOne(ho *HomeOwner) *HomeOwnerDeleteOne {
	return c.DeleteOneID(ho.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HomeOwnerClient) DeleteOneID(id string) *HomeOwnerDeleteOne {
	builder := c.Delete().Where(homeowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HomeOwnerDeleteOne{builder}
}

// Query returns a query builder for HomeOwner.
func (c *HomeOwnerClient) Query() *HomeOwnerQuery {
	return &HomeOwnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHomeOwner},
		inters: c.Interceptors(),
	}
}

// Get returns a HomeOwner entity by its id.
func (c *HomeOwnerClient) Get(ctx context.Context, id string) (*HomeOwner, error) {
	return c.Query().Where(homeowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HomeOwnerClient) GetX(ctx context.Context, id string) *HomeOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEstimates queries the estimates edge of a HomeOwner.
func (c *HomeOwnerClient) QueryEstimates(ho *HomeOwner) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ho.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(homeowner.Table, homeowner.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, homeowner.EstimatesTable, homeowner.EstimatesColumn),
		)
		fromV = sqlgraph.Neighbors(ho.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a HomeOwner.
func (c *HomeOwnerClient) QueryJobs(ho *HomeOwner) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ho.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(homeowner.Table, homeowner.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, homeowner.JobsTable, homeowner.JobsColumn),
		)
		fromV = sqlgraph.Neighbors(ho.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a HomeOwner.
func (c *HomeOwnerClient) QueryPartner(ho *HomeOwner) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ho.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(homeowner.Table, homeowner.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, homeowner.PartnerTable, homeowner.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(ho.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HomeOwnerClient) Hooks() []Hook {
	return c.hooks.HomeOwner
}

// Interceptors returns the client interceptors.
func (c *HomeOwnerClient) Interceptors() []Interceptor {
	return c.inters.HomeOwner
}

func (c *HomeOwnerClient) mutate(ctx context.Context, m *HomeOwnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HomeOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HomeOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HomeOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HomeOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HomeOwner mutation op: %q", m.Op())
	}
}

// InstallationJobClient is a client for the InstallationJob schema.
type InstallationJobClient struct {
	config
}

// NewInstallationJobClient returns a client for the InstallationJob from the given config.
func NewInstallationJobClient(c config) *InstallationJobClient {
	return &InstallationJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `installationjob.Hooks(f(g(h())))`.
func (c *InstallationJobClient) Use(hooks ...Hook) {
	c.hooks.InstallationJob = append(c.hooks.InstallationJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `installationjob.Intercept(f(g(h())))`.
func (c *InstallationJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstallationJob = append(c.inters.InstallationJob, interceptors...)
}

// Create returns a builder for creating a InstallationJob entity.
func (c *InstallationJobClient) Create() *InstallationJobCreate {
	mutation := newInstallationJobMutation(c.config, OpCreate)
	return &InstallationJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstallationJob entities.
func (c *InstallationJobClient) CreateBulk(builders ...*InstallationJobCreate) *InstallationJobCreateBulk {
	return &InstallationJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstallationJob.
func (c *InstallationJobClient) Update() *InstallationJobUpdate {
	mutation := newInstallationJobMutation(c.config, OpUpdate)
	return &InstallationJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstallationJobClient) UpdateOne(ij *InstallationJob) *InstallationJobUpdateOne {
	mutation := newInstallationJobMutation(c.config, OpUpdateOne, withInstallationJob(ij))
	return &InstallationJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstallationJobClient) UpdateOneID(id string) *InstallationJobUpdateOne {
	mutation := newInstallationJobMutation(c.config, OpUpdateOne, withInstallationJobID(id))
	return &InstallationJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstallationJob.
func (c *InstallationJobClient) Delete() *InstallationJobDelete {
	mutation := newInstallationJobMutation(c.config, OpDelete)
	return &InstallationJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstallationJobClient) DeleteOne(ij *InstallationJob) *InstallationJobDeleteOne {
	return c.DeleteOneID(ij.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstallationJobClient) DeleteOneID(id string) *InstallationJobDeleteOne {
	builder := c.Delete().Where(installationjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstallationJobDeleteOne{builder}
}

// Query returns a query builder for InstallationJob.
func (c *InstallationJobClient) Query() *InstallationJobQuery {
	return &InstallationJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstallationJob},
		inters: c.Interceptors(),
	}
}

// Get returns a InstallationJob entity by its id.
func (c *InstallationJobClient) Get(ctx context.Context, id string) (*InstallationJob, error) {
	return c.Query().Where(installationjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstallationJobClient) GetX(ctx context.Context, id string) *InstallationJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItems queries the items edge of a InstallationJob.
func (c *InstallationJobClient) QueryItems(ij *InstallationJob) *InstallationJobItemQuery {
	query := (&InstallationJobItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ij.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, id),
			sqlgraph.To(installationjobitem.Table, installationjobitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, installationjob.ItemsTable, installationjob.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(ij.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgressHistory queries the progress_history edge of a InstallationJob.
func (c *InstallationJobClient) QueryProgressHistory(ij *InstallationJob) *InstallationJobProgressQuery {
	query := (&InstallationJobProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ij.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, id),
			sqlgraph.To(installationjobprogress.Table, installationjobprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, installationjob.ProgressHistoryTable, installationjob.ProgressHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(ij.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequestingPartner queries the requesting_partner edge of a InstallationJob.
func (c *InstallationJobClient) QueryRequestingPartner(ij *InstallationJob) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ij.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.RequestingPartnerTable, installationjob.RequestingPartnerColumn),
		)
		fromV = sqlgraph.Neighbors(ij.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedPartner queries the assigned_partner edge of a InstallationJob.
func (c *InstallationJobClient) QueryAssignedPartner(ij *InstallationJob) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ij.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.AssignedPartnerTable, installationjob.AssignedPartnerColumn),
		)
		fromV = sqlgraph.Neighbors(ij.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a InstallationJob.
func (c *InstallationJobClient) QueryCreator(ij *InstallationJob) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ij.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.CreatorTable, installationjob.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(ij.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalesRep queries the sales_rep edge of a InstallationJob.
func (c *InstallationJobClient) QuerySalesRep(ij *InstallationJob) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ij.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.SalesRepTable, installationjob.SalesRepColumn),
		)
		fromV = sqlgraph.Neighbors(ij.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstallationJobClient) Hooks() []Hook {
	return c.hooks.InstallationJob
}

// Interceptors returns the client interceptors.
func (c *InstallationJobClient) Interceptors() []Interceptor {
	return c.inters.InstallationJob
}

func (c *InstallationJobClient) mutate(ctx context.Context, m *InstallationJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstallationJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstallationJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstallationJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstallationJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InstallationJob mutation op: %q", m.Op())
	}
}

// InstallationJobItemClient is a client for the InstallationJobItem schema.
type InstallationJobItemClient struct {
	config
}

// NewInstallationJobItemClient returns a client for the InstallationJobItem from the given config.
func NewInstallationJobItemClient(c config) *InstallationJobItemClient {
	return &InstallationJobItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `installationjobitem.Hooks(f(g(h())))`.
func (c *InstallationJobItemClient) Use(hooks ...Hook) {
	c.hooks.InstallationJobItem = append(c.hooks.InstallationJobItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `installationjobitem.Intercept(f(g(h())))`.
func (c *InstallationJobItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstallationJobItem = append(c.inters.InstallationJobItem, interceptors...)
}

// Create returns a builder for creating a InstallationJobItem entity.
func (c *InstallationJobItemClient) Create() *InstallationJobItemCreate {
	mutation := newInstallationJobItemMutation(c.config, OpCreate)
	return &InstallationJobItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstallationJobItem entities.
func (c *InstallationJobItemClient) CreateBulk(builders ...*InstallationJobItemCreate) *InstallationJobItemCreateBulk {
	return &InstallationJobItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstallationJobItem.
func (c *InstallationJobItemClient) Update() *InstallationJobItemUpdate {
	mutation := newInstallationJobItemMutation(c.config, OpUpdate)
	return &InstallationJobItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstallationJobItemClient) UpdateOne(iji *InstallationJobItem) *InstallationJobItemUpdateOne {
	mutation := newInstallationJobItemMutation(c.config, OpUpdateOne, withInstallationJobItem(iji))
	return &InstallationJobItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstallationJobItemClient) UpdateOneID(id string) *InstallationJobItemUpdateOne {
	mutation := newInstallationJobItemMutation(c.config, OpUpdateOne, withInstallationJobItemID(id))
	return &InstallationJobItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstallationJobItem.
func (c *InstallationJobItemClient) Delete() *InstallationJobItemDelete {
	mutation := newInstallationJobItemMutation(c.config, OpDelete)
	return &InstallationJobItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstallationJobItemClient) DeleteOne(iji *InstallationJobItem) *InstallationJobItemDeleteOne {
	return c.DeleteOneID(iji.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstallationJobItemClient) DeleteOneID(id string) *InstallationJobItemDeleteOne {
	builder := c.Delete().Where(installationjobitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstallationJobItemDeleteOne{builder}
}

// Query returns a query builder for InstallationJobItem.
func (c *InstallationJobItemClient) Query() *InstallationJobItemQuery {
	return &InstallationJobItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstallationJobItem},
		inters: c.Interceptors(),
	}
}

// Get returns a InstallationJobItem entity by its id.
func (c *InstallationJobItemClient) Get(ctx context.Context, id string) (*InstallationJobItem, error) {
	return c.Query().Where(installationjobitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstallationJobItemClient) GetX(ctx context.Context, id string) *InstallationJobItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a InstallationJobItem.
func (c *InstallationJobItemClient) QueryJob(iji *InstallationJobItem) *InstallationJobQuery {
	query := (&InstallationJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iji.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjobitem.Table, installationjobitem.FieldID, id),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjobitem.JobTable, installationjobitem.JobColumn),
		)
		fromV = sqlgraph.Neighbors(iji.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstallationJobItemClient) Hooks() []Hook {
	return c.hooks.InstallationJobItem
}

// Interceptors returns the client interceptors.
func (c *InstallationJobItemClient) Interceptors() []Interceptor {
	return c.inters.InstallationJobItem
}

func (c *InstallationJobItemClient) mutate(ctx context.Context, m *InstallationJobItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstallationJobItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstallationJobItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstallationJobItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstallationJobItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InstallationJobItem mutation op: %q", m.Op())
	}
}

// InstallationJobProgressClient is a client for the InstallationJobProgress schema.
type InstallationJobProgressClient struct {
	config
}

// NewInstallationJobProgressClient returns a client for the InstallationJobProgress from the given config.
func NewInstallationJobProgressClient(c config) *InstallationJobProgressClient {
	return &InstallationJobProgressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `installationjobprogress.Hooks(f(g(h())))`.
func (c *InstallationJobProgressClient) Use(hooks ...Hook) {
	c.hooks.InstallationJobProgress = append(c.hooks.InstallationJobProgress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `installationjobprogress.Intercept(f(g(h())))`.
func (c *InstallationJobProgressClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstallationJobProgress = append(c.inters.InstallationJobProgress, interceptors...)
}

// Create returns a builder for creating a InstallationJobProgress entity.
func (c *InstallationJobProgressClient) Create() *InstallationJobProgressCreate {
	mutation := newInstallationJobProgressMutation(c.config, OpCreate)
	return &InstallationJobProgressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstallationJobProgress entities.
func (c *InstallationJobProgressClient) CreateBulk(builders ...*InstallationJobProgressCreate) *InstallationJobProgressCreateBulk {
	return &InstallationJobProgressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstallationJobProgress.
func (c *InstallationJobProgressClient) Update() *InstallationJobProgressUpdate {
	mutation := newInstallationJobProgressMutation(c.config, OpUpdate)
	return &InstallationJobProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstallationJobProgressClient) UpdateOne(ijp *InstallationJobProgress) *InstallationJobProgressUpdateOne {
	mutation := newInstallationJobProgressMutation(c.config, OpUpdateOne, withInstallationJobProgress(ijp))
	return &InstallationJobProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstallationJobProgressClient) UpdateOneID(id string) *InstallationJobProgressUpdateOne {
	mutation := newInstallationJobProgressMutation(c.config, OpUpdateOne, withInstallationJobProgressID(id))
	return &InstallationJobProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstallationJobProgress.
func (c *InstallationJobProgressClient) Delete() *InstallationJobProgressDelete {
	mutation := newInstallationJobProgressMutation(c.config, OpDelete)
	return &InstallationJobProgressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstallationJobProgressClient) DeleteOne(ijp *InstallationJobProgress) *InstallationJobProgressDeleteOne {
	return c.DeleteOneID(ijp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstallationJobProgressClient) DeleteOneID(id string) *InstallationJobProgressDeleteOne {
	builder := c.Delete().Where(installationjobprogress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstallationJobProgressDeleteOne{builder}
}

// Query returns a query builder for InstallationJobProgress.
func (c *InstallationJobProgressClient) Query() *InstallationJobProgressQuery {
	return &InstallationJobProgressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstallationJobProgress},
		inters: c.Interceptors(),
	}
}

// Get returns a InstallationJobProgress entity by its id.
func (c *InstallationJobProgressClient) Get(ctx context.Context, id string) (*InstallationJobProgress, error) {
	return c.Query().Where(installationjobprogress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstallationJobProgressClient) GetX(ctx context.Context, id string) *InstallationJobProgress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a InstallationJobProgress.
func (c *InstallationJobProgressClient) QueryJob(ijp *InstallationJobProgress) *InstallationJobQuery {
	query := (&InstallationJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ijp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjobprogress.Table, installationjobprogress.FieldID, id),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjobprogress.JobTable, installationjobprogress.JobColumn),
		)
		fromV = sqlgraph.Neighbors(ijp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a InstallationJobProgress.
func (c *InstallationJobProgressClient) QueryCreator(ijp *InstallationJobProgress) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ijp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjobprogress.Table, installationjobprogress.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjobprogress.CreatorTable, installationjobprogress.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(ijp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstallationJobProgressClient) Hooks() []Hook {
	return c.hooks.InstallationJobProgress
}

// Interceptors returns the client interceptors.
func (c *InstallationJobProgressClient) Interceptors() []Interceptor {
	return c.inters.InstallationJobProgress
}

func (c *InstallationJobProgressClient) mutate(ctx context.Context, m *InstallationJobProgressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstallationJobProgressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstallationJobProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstallationJobProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstallationJobProgressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InstallationJobProgress mutation op: %q", m.Op())
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(j))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id string) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id string) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id string) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id string) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayments queries the payments edge of a Job.
func (c *JobClient) QueryPayments(j *Job) *PaymentQuery {
	query := (&PaymentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.PaymentsTable, job.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a Job.
func (c *JobClient) QueryActivities(j *Job) *JobActivityQuery {
	query := (&JobActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobactivity.Table, jobactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.ActivitiesTable, job.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignmentHistory queries the assignment_history edge of a Job.
func (c *JobClient) QueryAssignmentHistory(j *Job) *JobAssignmentHistoryQuery {
	query := (&JobAssignmentHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobassignmenthistory.Table, jobassignmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.AssignmentHistoryTable, job.AssignmentHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgressHistory queries the progress_history edge of a Job.
func (c *JobClient) QueryProgressHistory(j *Job) *JobProgressHistoryQuery {
	query := (&JobProgressHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobprogresshistory.Table, jobprogresshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.ProgressHistoryTable, job.ProgressHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotes queries the notes edge of a Job.
func (c *JobClient) QueryNotes(j *Job) *JobNoteQuery {
	query := (&JobNoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobnote.Table, jobnote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.NotesTable, job.NotesColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocUrls queries the doc_urls edge of a Job.
func (c *JobClient) QueryDocUrls(j *Job) *JobDocURLQuery {
	query := (&JobDocURLClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobdocurl.Table, jobdocurl.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.DocUrlsTable, job.DocUrlsColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEstimate queries the estimate edge of a Job.
func (c *JobClient) QueryEstimate(j *Job) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, job.EstimateTable, job.EstimateColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a Job.
func (c *JobClient) QueryCreatorAPI(j *Job) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.CreatorAPITable, job.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Job.
func (c *JobClient) QueryCreator(j *Job) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.CreatorTable, job.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHomeOwner queries the home_owner edge of a Job.
func (c *JobClient) QueryHomeOwner(j *Job) *HomeOwnerQuery {
	query := (&HomeOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(homeowner.Table, homeowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.HomeOwnerTable, job.HomeOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalesRep queries the sales_rep edge of a Job.
func (c *JobClient) QuerySalesRep(j *Job) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.SalesRepTable, job.SalesRepColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequester queries the requester edge of a Job.
func (c *JobClient) QueryRequester(j *Job) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.RequesterTable, job.RequesterColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoofingPartner queries the roofing_partner edge of a Job.
func (c *JobClient) QueryRoofingPartner(j *Job) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.RoofingPartnerTable, job.RoofingPartnerColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIntegrationPartner queries the integration_partner edge of a Job.
func (c *JobClient) QueryIntegrationPartner(j *Job) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.IntegrationPartnerTable, job.IntegrationPartnerColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEpcPartner queries the epc_partner edge of a Job.
func (c *JobClient) QueryEpcPartner(j *Job) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.EpcPartnerTable, job.EpcPartnerColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEpc queries the epc edge of a Job.
func (c *JobClient) QueryEpc(j *Job) *OptionListQuery {
	query := (&OptionListClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(optionlist.Table, optionlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.EpcTable, job.EpcColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEstimatePdf queries the estimate_pdf edge of a Job.
func (c *JobClient) QueryEstimatePdf(j *Job) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, job.EstimatePdfTable, job.EstimatePdfColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// JobActivityClient is a client for the JobActivity schema.
type JobActivityClient struct {
	config
}

// NewJobActivityClient returns a client for the JobActivity from the given config.
func NewJobActivityClient(c config) *JobActivityClient {
	return &JobActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobactivity.Hooks(f(g(h())))`.
func (c *JobActivityClient) Use(hooks ...Hook) {
	c.hooks.JobActivity = append(c.hooks.JobActivity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobactivity.Intercept(f(g(h())))`.
func (c *JobActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobActivity = append(c.inters.JobActivity, interceptors...)
}

// Create returns a builder for creating a JobActivity entity.
func (c *JobActivityClient) Create() *JobActivityCreate {
	mutation := newJobActivityMutation(c.config, OpCreate)
	return &JobActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobActivity entities.
func (c *JobActivityClient) CreateBulk(builders ...*JobActivityCreate) *JobActivityCreateBulk {
	return &JobActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobActivity.
func (c *JobActivityClient) Update() *JobActivityUpdate {
	mutation := newJobActivityMutation(c.config, OpUpdate)
	return &JobActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobActivityClient) UpdateOne(ja *JobActivity) *JobActivityUpdateOne {
	mutation := newJobActivityMutation(c.config, OpUpdateOne, withJobActivity(ja))
	return &JobActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobActivityClient) UpdateOneID(id string) *JobActivityUpdateOne {
	mutation := newJobActivityMutation(c.config, OpUpdateOne, withJobActivityID(id))
	return &JobActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobActivity.
func (c *JobActivityClient) Delete() *JobActivityDelete {
	mutation := newJobActivityMutation(c.config, OpDelete)
	return &JobActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobActivityClient) DeleteOne(ja *JobActivity) *JobActivityDeleteOne {
	return c.DeleteOneID(ja.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobActivityClient) DeleteOneID(id string) *JobActivityDeleteOne {
	builder := c.Delete().Where(jobactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobActivityDeleteOne{builder}
}

// Query returns a query builder for JobActivity.
func (c *JobActivityClient) Query() *JobActivityQuery {
	return &JobActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a JobActivity entity by its id.
func (c *JobActivityClient) Get(ctx context.Context, id string) (*JobActivity, error) {
	return c.Query().Where(jobactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobActivityClient) GetX(ctx context.Context, id string) *JobActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobActivity.
func (c *JobActivityClient) QueryJob(ja *JobActivity) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ja.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobactivity.Table, jobactivity.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobactivity.JobTable, jobactivity.JobColumn),
		)
		fromV = sqlgraph.Neighbors(ja.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a JobActivity.
func (c *JobActivityClient) QueryCreator(ja *JobActivity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ja.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobactivity.Table, jobactivity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobactivity.CreatorTable, jobactivity.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(ja.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a JobActivity.
func (c *JobActivityClient) QueryCreatorAPI(ja *JobActivity) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ja.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobactivity.Table, jobactivity.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobactivity.CreatorAPITable, jobactivity.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(ja.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobActivityClient) Hooks() []Hook {
	return c.hooks.JobActivity
}

// Interceptors returns the client interceptors.
func (c *JobActivityClient) Interceptors() []Interceptor {
	return c.inters.JobActivity
}

func (c *JobActivityClient) mutate(ctx context.Context, m *JobActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobActivity mutation op: %q", m.Op())
	}
}

// JobAssignmentHistoryClient is a client for the JobAssignmentHistory schema.
type JobAssignmentHistoryClient struct {
	config
}

// NewJobAssignmentHistoryClient returns a client for the JobAssignmentHistory from the given config.
func NewJobAssignmentHistoryClient(c config) *JobAssignmentHistoryClient {
	return &JobAssignmentHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobassignmenthistory.Hooks(f(g(h())))`.
func (c *JobAssignmentHistoryClient) Use(hooks ...Hook) {
	c.hooks.JobAssignmentHistory = append(c.hooks.JobAssignmentHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobassignmenthistory.Intercept(f(g(h())))`.
func (c *JobAssignmentHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobAssignmentHistory = append(c.inters.JobAssignmentHistory, interceptors...)
}

// Create returns a builder for creating a JobAssignmentHistory entity.
func (c *JobAssignmentHistoryClient) Create() *JobAssignmentHistoryCreate {
	mutation := newJobAssignmentHistoryMutation(c.config, OpCreate)
	return &JobAssignmentHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobAssignmentHistory entities.
func (c *JobAssignmentHistoryClient) CreateBulk(builders ...*JobAssignmentHistoryCreate) *JobAssignmentHistoryCreateBulk {
	return &JobAssignmentHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobAssignmentHistory.
func (c *JobAssignmentHistoryClient) Update() *JobAssignmentHistoryUpdate {
	mutation := newJobAssignmentHistoryMutation(c.config, OpUpdate)
	return &JobAssignmentHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobAssignmentHistoryClient) UpdateOne(jah *JobAssignmentHistory) *JobAssignmentHistoryUpdateOne {
	mutation := newJobAssignmentHistoryMutation(c.config, OpUpdateOne, withJobAssignmentHistory(jah))
	return &JobAssignmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobAssignmentHistoryClient) UpdateOneID(id string) *JobAssignmentHistoryUpdateOne {
	mutation := newJobAssignmentHistoryMutation(c.config, OpUpdateOne, withJobAssignmentHistoryID(id))
	return &JobAssignmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobAssignmentHistory.
func (c *JobAssignmentHistoryClient) Delete() *JobAssignmentHistoryDelete {
	mutation := newJobAssignmentHistoryMutation(c.config, OpDelete)
	return &JobAssignmentHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobAssignmentHistoryClient) DeleteOne(jah *JobAssignmentHistory) *JobAssignmentHistoryDeleteOne {
	return c.DeleteOneID(jah.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobAssignmentHistoryClient) DeleteOneID(id string) *JobAssignmentHistoryDeleteOne {
	builder := c.Delete().Where(jobassignmenthistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobAssignmentHistoryDeleteOne{builder}
}

// Query returns a query builder for JobAssignmentHistory.
func (c *JobAssignmentHistoryClient) Query() *JobAssignmentHistoryQuery {
	return &JobAssignmentHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobAssignmentHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a JobAssignmentHistory entity by its id.
func (c *JobAssignmentHistoryClient) Get(ctx context.Context, id string) (*JobAssignmentHistory, error) {
	return c.Query().Where(jobassignmenthistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobAssignmentHistoryClient) GetX(ctx context.Context, id string) *JobAssignmentHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobAssignmentHistory.
func (c *JobAssignmentHistoryClient) QueryJob(jah *JobAssignmentHistory) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jah.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobassignmenthistory.Table, jobassignmenthistory.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobassignmenthistory.JobTable, jobassignmenthistory.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jah.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a JobAssignmentHistory.
func (c *JobAssignmentHistoryClient) QueryPartner(jah *JobAssignmentHistory) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jah.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobassignmenthistory.Table, jobassignmenthistory.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobassignmenthistory.PartnerTable, jobassignmenthistory.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(jah.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobAssignmentHistoryClient) Hooks() []Hook {
	return c.hooks.JobAssignmentHistory
}

// Interceptors returns the client interceptors.
func (c *JobAssignmentHistoryClient) Interceptors() []Interceptor {
	return c.inters.JobAssignmentHistory
}

func (c *JobAssignmentHistoryClient) mutate(ctx context.Context, m *JobAssignmentHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobAssignmentHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobAssignmentHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobAssignmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobAssignmentHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobAssignmentHistory mutation op: %q", m.Op())
	}
}

// JobDocURLClient is a client for the JobDocURL schema.
type JobDocURLClient struct {
	config
}

// NewJobDocURLClient returns a client for the JobDocURL from the given config.
func NewJobDocURLClient(c config) *JobDocURLClient {
	return &JobDocURLClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobdocurl.Hooks(f(g(h())))`.
func (c *JobDocURLClient) Use(hooks ...Hook) {
	c.hooks.JobDocURL = append(c.hooks.JobDocURL, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobdocurl.Intercept(f(g(h())))`.
func (c *JobDocURLClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobDocURL = append(c.inters.JobDocURL, interceptors...)
}

// Create returns a builder for creating a JobDocURL entity.
func (c *JobDocURLClient) Create() *JobDocURLCreate {
	mutation := newJobDocURLMutation(c.config, OpCreate)
	return &JobDocURLCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobDocURL entities.
func (c *JobDocURLClient) CreateBulk(builders ...*JobDocURLCreate) *JobDocURLCreateBulk {
	return &JobDocURLCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobDocURL.
func (c *JobDocURLClient) Update() *JobDocURLUpdate {
	mutation := newJobDocURLMutation(c.config, OpUpdate)
	return &JobDocURLUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobDocURLClient) UpdateOne(jdu *JobDocURL) *JobDocURLUpdateOne {
	mutation := newJobDocURLMutation(c.config, OpUpdateOne, withJobDocURL(jdu))
	return &JobDocURLUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobDocURLClient) UpdateOneID(id string) *JobDocURLUpdateOne {
	mutation := newJobDocURLMutation(c.config, OpUpdateOne, withJobDocURLID(id))
	return &JobDocURLUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobDocURL.
func (c *JobDocURLClient) Delete() *JobDocURLDelete {
	mutation := newJobDocURLMutation(c.config, OpDelete)
	return &JobDocURLDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobDocURLClient) DeleteOne(jdu *JobDocURL) *JobDocURLDeleteOne {
	return c.DeleteOneID(jdu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobDocURLClient) DeleteOneID(id string) *JobDocURLDeleteOne {
	builder := c.Delete().Where(jobdocurl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDocURLDeleteOne{builder}
}

// Query returns a query builder for JobDocURL.
func (c *JobDocURLClient) Query() *JobDocURLQuery {
	return &JobDocURLQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobDocURL},
		inters: c.Interceptors(),
	}
}

// Get returns a JobDocURL entity by its id.
func (c *JobDocURLClient) Get(ctx context.Context, id string) (*JobDocURL, error) {
	return c.Query().Where(jobdocurl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobDocURLClient) GetX(ctx context.Context, id string) *JobDocURL {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobDocURL.
func (c *JobDocURLClient) QueryJob(jdu *JobDocURL) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jdu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdocurl.Table, jobdocurl.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdocurl.JobTable, jobdocurl.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jdu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a JobDocURL.
func (c *JobDocURLClient) QueryCreator(jdu *JobDocURL) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jdu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdocurl.Table, jobdocurl.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdocurl.CreatorTable, jobdocurl.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(jdu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobDocURLClient) Hooks() []Hook {
	return c.hooks.JobDocURL
}

// Interceptors returns the client interceptors.
func (c *JobDocURLClient) Interceptors() []Interceptor {
	return c.inters.JobDocURL
}

func (c *JobDocURLClient) mutate(ctx context.Context, m *JobDocURLMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobDocURLCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobDocURLUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobDocURLUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDocURLDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobDocURL mutation op: %q", m.Op())
	}
}

// JobNoteClient is a client for the JobNote schema.
type JobNoteClient struct {
	config
}

// NewJobNoteClient returns a client for the JobNote from the given config.
func NewJobNoteClient(c config) *JobNoteClient {
	return &JobNoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobnote.Hooks(f(g(h())))`.
func (c *JobNoteClient) Use(hooks ...Hook) {
	c.hooks.JobNote = append(c.hooks.JobNote, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobnote.Intercept(f(g(h())))`.
func (c *JobNoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobNote = append(c.inters.JobNote, interceptors...)
}

// Create returns a builder for creating a JobNote entity.
func (c *JobNoteClient) Create() *JobNoteCreate {
	mutation := newJobNoteMutation(c.config, OpCreate)
	return &JobNoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobNote entities.
func (c *JobNoteClient) CreateBulk(builders ...*JobNoteCreate) *JobNoteCreateBulk {
	return &JobNoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobNote.
func (c *JobNoteClient) Update() *JobNoteUpdate {
	mutation := newJobNoteMutation(c.config, OpUpdate)
	return &JobNoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobNoteClient) UpdateOne(jn *JobNote) *JobNoteUpdateOne {
	mutation := newJobNoteMutation(c.config, OpUpdateOne, withJobNote(jn))
	return &JobNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobNoteClient) UpdateOneID(id string) *JobNoteUpdateOne {
	mutation := newJobNoteMutation(c.config, OpUpdateOne, withJobNoteID(id))
	return &JobNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobNote.
func (c *JobNoteClient) Delete() *JobNoteDelete {
	mutation := newJobNoteMutation(c.config, OpDelete)
	return &JobNoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobNoteClient) DeleteOne(jn *JobNote) *JobNoteDeleteOne {
	return c.DeleteOneID(jn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobNoteClient) DeleteOneID(id string) *JobNoteDeleteOne {
	builder := c.Delete().Where(jobnote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobNoteDeleteOne{builder}
}

// Query returns a query builder for JobNote.
func (c *JobNoteClient) Query() *JobNoteQuery {
	return &JobNoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobNote},
		inters: c.Interceptors(),
	}
}

// Get returns a JobNote entity by its id.
func (c *JobNoteClient) Get(ctx context.Context, id string) (*JobNote, error) {
	return c.Query().Where(jobnote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobNoteClient) GetX(ctx context.Context, id string) *JobNote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobNote.
func (c *JobNoteClient) QueryJob(jn *JobNote) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobnote.Table, jobnote.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobnote.JobTable, jobnote.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a JobNote.
func (c *JobNoteClient) QueryUser(jn *JobNote) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobnote.Table, jobnote.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobnote.UserTable, jobnote.UserColumn),
		)
		fromV = sqlgraph.Neighbors(jn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a JobNote.
func (c *JobNoteClient) QueryPartner(jn *JobNote) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobnote.Table, jobnote.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobnote.PartnerTable, jobnote.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(jn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobNoteClient) Hooks() []Hook {
	return c.hooks.JobNote
}

// Interceptors returns the client interceptors.
func (c *JobNoteClient) Interceptors() []Interceptor {
	return c.inters.JobNote
}

func (c *JobNoteClient) mutate(ctx context.Context, m *JobNoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobNoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobNoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobNoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobNote mutation op: %q", m.Op())
	}
}

// JobProgressHistoryClient is a client for the JobProgressHistory schema.
type JobProgressHistoryClient struct {
	config
}

// NewJobProgressHistoryClient returns a client for the JobProgressHistory from the given config.
func NewJobProgressHistoryClient(c config) *JobProgressHistoryClient {
	return &JobProgressHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobprogresshistory.Hooks(f(g(h())))`.
func (c *JobProgressHistoryClient) Use(hooks ...Hook) {
	c.hooks.JobProgressHistory = append(c.hooks.JobProgressHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobprogresshistory.Intercept(f(g(h())))`.
func (c *JobProgressHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobProgressHistory = append(c.inters.JobProgressHistory, interceptors...)
}

// Create returns a builder for creating a JobProgressHistory entity.
func (c *JobProgressHistoryClient) Create() *JobProgressHistoryCreate {
	mutation := newJobProgressHistoryMutation(c.config, OpCreate)
	return &JobProgressHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobProgressHistory entities.
func (c *JobProgressHistoryClient) CreateBulk(builders ...*JobProgressHistoryCreate) *JobProgressHistoryCreateBulk {
	return &JobProgressHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobProgressHistory.
func (c *JobProgressHistoryClient) Update() *JobProgressHistoryUpdate {
	mutation := newJobProgressHistoryMutation(c.config, OpUpdate)
	return &JobProgressHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobProgressHistoryClient) UpdateOne(jph *JobProgressHistory) *JobProgressHistoryUpdateOne {
	mutation := newJobProgressHistoryMutation(c.config, OpUpdateOne, withJobProgressHistory(jph))
	return &JobProgressHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobProgressHistoryClient) UpdateOneID(id string) *JobProgressHistoryUpdateOne {
	mutation := newJobProgressHistoryMutation(c.config, OpUpdateOne, withJobProgressHistoryID(id))
	return &JobProgressHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobProgressHistory.
func (c *JobProgressHistoryClient) Delete() *JobProgressHistoryDelete {
	mutation := newJobProgressHistoryMutation(c.config, OpDelete)
	return &JobProgressHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobProgressHistoryClient) DeleteOne(jph *JobProgressHistory) *JobProgressHistoryDeleteOne {
	return c.DeleteOneID(jph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobProgressHistoryClient) DeleteOneID(id string) *JobProgressHistoryDeleteOne {
	builder := c.Delete().Where(jobprogresshistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobProgressHistoryDeleteOne{builder}
}

// Query returns a query builder for JobProgressHistory.
func (c *JobProgressHistoryClient) Query() *JobProgressHistoryQuery {
	return &JobProgressHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobProgressHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a JobProgressHistory entity by its id.
func (c *JobProgressHistoryClient) Get(ctx context.Context, id string) (*JobProgressHistory, error) {
	return c.Query().Where(jobprogresshistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobProgressHistoryClient) GetX(ctx context.Context, id string) *JobProgressHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobProgressHistory.
func (c *JobProgressHistoryClient) QueryJob(jph *JobProgressHistory) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogresshistory.Table, jobprogresshistory.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobprogresshistory.JobTable, jobprogresshistory.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a JobProgressHistory.
func (c *JobProgressHistoryClient) QueryCreator(jph *JobProgressHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogresshistory.Table, jobprogresshistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobprogresshistory.CreatorTable, jobprogresshistory.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(jph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPIUser queries the creator_api_user edge of a JobProgressHistory.
func (c *JobProgressHistoryClient) QueryCreatorAPIUser(jph *JobProgressHistory) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogresshistory.Table, jobprogresshistory.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobprogresshistory.CreatorAPIUserTable, jobprogresshistory.CreatorAPIUserColumn),
		)
		fromV = sqlgraph.Neighbors(jph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobProgressHistoryClient) Hooks() []Hook {
	return c.hooks.JobProgressHistory
}

// Interceptors returns the client interceptors.
func (c *JobProgressHistoryClient) Interceptors() []Interceptor {
	return c.inters.JobProgressHistory
}

func (c *JobProgressHistoryClient) mutate(ctx context.Context, m *JobProgressHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobProgressHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobProgressHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobProgressHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobProgressHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobProgressHistory mutation op: %q", m.Op())
	}
}

// NotifySettingClient is a client for the NotifySetting schema.
type NotifySettingClient struct {
	config
}

// NewNotifySettingClient returns a client for the NotifySetting from the given config.
func NewNotifySettingClient(c config) *NotifySettingClient {
	return &NotifySettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifysetting.Hooks(f(g(h())))`.
func (c *NotifySettingClient) Use(hooks ...Hook) {
	c.hooks.NotifySetting = append(c.hooks.NotifySetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifysetting.Intercept(f(g(h())))`.
func (c *NotifySettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifySetting = append(c.inters.NotifySetting, interceptors...)
}

// Create returns a builder for creating a NotifySetting entity.
func (c *NotifySettingClient) Create() *NotifySettingCreate {
	mutation := newNotifySettingMutation(c.config, OpCreate)
	return &NotifySettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifySetting entities.
func (c *NotifySettingClient) CreateBulk(builders ...*NotifySettingCreate) *NotifySettingCreateBulk {
	return &NotifySettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifySetting.
func (c *NotifySettingClient) Update() *NotifySettingUpdate {
	mutation := newNotifySettingMutation(c.config, OpUpdate)
	return &NotifySettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifySettingClient) UpdateOne(ns *NotifySetting) *NotifySettingUpdateOne {
	mutation := newNotifySettingMutation(c.config, OpUpdateOne, withNotifySetting(ns))
	return &NotifySettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifySettingClient) UpdateOneID(id string) *NotifySettingUpdateOne {
	mutation := newNotifySettingMutation(c.config, OpUpdateOne, withNotifySettingID(id))
	return &NotifySettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifySetting.
func (c *NotifySettingClient) Delete() *NotifySettingDelete {
	mutation := newNotifySettingMutation(c.config, OpDelete)
	return &NotifySettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifySettingClient) DeleteOne(ns *NotifySetting) *NotifySettingDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifySettingClient) DeleteOneID(id string) *NotifySettingDeleteOne {
	builder := c.Delete().Where(notifysetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifySettingDeleteOne{builder}
}

// Query returns a query builder for NotifySetting.
func (c *NotifySettingClient) Query() *NotifySettingQuery {
	return &NotifySettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifySetting},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifySetting entity by its id.
func (c *NotifySettingClient) Get(ctx context.Context, id string) (*NotifySetting, error) {
	return c.Query().Where(notifysetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifySettingClient) GetX(ctx context.Context, id string) *NotifySetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NotifySetting.
func (c *NotifySettingClient) QueryUser(ns *NotifySetting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysetting.Table, notifysetting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysetting.UserTable, notifysetting.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifySettingClient) Hooks() []Hook {
	return c.hooks.NotifySetting
}

// Interceptors returns the client interceptors.
func (c *NotifySettingClient) Interceptors() []Interceptor {
	return c.inters.NotifySetting
}

func (c *NotifySettingClient) mutate(ctx context.Context, m *NotifySettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifySettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifySettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifySettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifySettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifySetting mutation op: %q", m.Op())
	}
}

// OptionListClient is a client for the OptionList schema.
type OptionListClient struct {
	config
}

// NewOptionListClient returns a client for the OptionList from the given config.
func NewOptionListClient(c config) *OptionListClient {
	return &OptionListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `optionlist.Hooks(f(g(h())))`.
func (c *OptionListClient) Use(hooks ...Hook) {
	c.hooks.OptionList = append(c.hooks.OptionList, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `optionlist.Intercept(f(g(h())))`.
func (c *OptionListClient) Intercept(interceptors ...Interceptor) {
	c.inters.OptionList = append(c.inters.OptionList, interceptors...)
}

// Create returns a builder for creating a OptionList entity.
func (c *OptionListClient) Create() *OptionListCreate {
	mutation := newOptionListMutation(c.config, OpCreate)
	return &OptionListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OptionList entities.
func (c *OptionListClient) CreateBulk(builders ...*OptionListCreate) *OptionListCreateBulk {
	return &OptionListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OptionList.
func (c *OptionListClient) Update() *OptionListUpdate {
	mutation := newOptionListMutation(c.config, OpUpdate)
	return &OptionListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OptionListClient) UpdateOne(ol *OptionList) *OptionListUpdateOne {
	mutation := newOptionListMutation(c.config, OpUpdateOne, withOptionList(ol))
	return &OptionListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OptionListClient) UpdateOneID(id string) *OptionListUpdateOne {
	mutation := newOptionListMutation(c.config, OpUpdateOne, withOptionListID(id))
	return &OptionListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OptionList.
func (c *OptionListClient) Delete() *OptionListDelete {
	mutation := newOptionListMutation(c.config, OpDelete)
	return &OptionListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OptionListClient) DeleteOne(ol *OptionList) *OptionListDeleteOne {
	return c.DeleteOneID(ol.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OptionListClient) DeleteOneID(id string) *OptionListDeleteOne {
	builder := c.Delete().Where(optionlist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OptionListDeleteOne{builder}
}

// Query returns a query builder for OptionList.
func (c *OptionListClient) Query() *OptionListQuery {
	return &OptionListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOptionList},
		inters: c.Interceptors(),
	}
}

// Get returns a OptionList entity by its id.
func (c *OptionListClient) Get(ctx context.Context, id string) (*OptionList, error) {
	return c.Query().Where(optionlist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OptionListClient) GetX(ctx context.Context, id string) *OptionList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFinanceOptions queries the finance_options edge of a OptionList.
func (c *OptionListClient) QueryFinanceOptions(ol *OptionList) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(optionlist.Table, optionlist.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, optionlist.FinanceOptionsTable, optionlist.FinanceOptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEpcOptions queries the epc_options edge of a OptionList.
func (c *OptionListClient) QueryEpcOptions(ol *OptionList) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(optionlist.Table, optionlist.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, optionlist.EpcOptionsTable, optionlist.EpcOptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEpc queries the epc edge of a OptionList.
func (c *OptionListClient) QueryEpc(ol *OptionList) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(optionlist.Table, optionlist.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, optionlist.EpcTable, optionlist.EpcColumn),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OptionListClient) Hooks() []Hook {
	return c.hooks.OptionList
}

// Interceptors returns the client interceptors.
func (c *OptionListClient) Interceptors() []Interceptor {
	return c.inters.OptionList
}

func (c *OptionListClient) mutate(ctx context.Context, m *OptionListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OptionListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OptionListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OptionListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OptionListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OptionList mutation op: %q", m.Op())
	}
}

// PartnerClient is a client for the Partner schema.
type PartnerClient struct {
	config
}

// NewPartnerClient returns a client for the Partner from the given config.
func NewPartnerClient(c config) *PartnerClient {
	return &PartnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partner.Hooks(f(g(h())))`.
func (c *PartnerClient) Use(hooks ...Hook) {
	c.hooks.Partner = append(c.hooks.Partner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partner.Intercept(f(g(h())))`.
func (c *PartnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Partner = append(c.inters.Partner, interceptors...)
}

// Create returns a builder for creating a Partner entity.
func (c *PartnerClient) Create() *PartnerCreate {
	mutation := newPartnerMutation(c.config, OpCreate)
	return &PartnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Partner entities.
func (c *PartnerClient) CreateBulk(builders ...*PartnerCreate) *PartnerCreateBulk {
	return &PartnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Partner.
func (c *PartnerClient) Update() *PartnerUpdate {
	mutation := newPartnerMutation(c.config, OpUpdate)
	return &PartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerClient) UpdateOne(pa *Partner) *PartnerUpdateOne {
	mutation := newPartnerMutation(c.config, OpUpdateOne, withPartner(pa))
	return &PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerClient) UpdateOneID(id string) *PartnerUpdateOne {
	mutation := newPartnerMutation(c.config, OpUpdateOne, withPartnerID(id))
	return &PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Partner.
func (c *PartnerClient) Delete() *PartnerDelete {
	mutation := newPartnerMutation(c.config, OpDelete)
	return &PartnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerClient) DeleteOne(pa *Partner) *PartnerDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerClient) DeleteOneID(id string) *PartnerDeleteOne {
	builder := c.Delete().Where(partner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerDeleteOne{builder}
}

// Query returns a query builder for Partner.
func (c *PartnerClient) Query() *PartnerQuery {
	return &PartnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartner},
		inters: c.Interceptors(),
	}
}

// Get returns a Partner entity by its id.
func (c *PartnerClient) Get(ctx context.Context, id string) (*Partner, error) {
	return c.Query().Where(partner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerClient) GetX(ctx context.Context, id string) *Partner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequestedEstimates queries the requested_estimates edge of a Partner.
func (c *PartnerClient) QueryRequestedEstimates(pa *Partner) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.RequestedEstimatesTable, partner.RequestedEstimatesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEstimateHomeOwners queries the estimate_home_owners edge of a Partner.
func (c *PartnerClient) QueryEstimateHomeOwners(pa *Partner) *HomeOwnerQuery {
	query := (&HomeOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(homeowner.Table, homeowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.EstimateHomeOwnersTable, partner.EstimateHomeOwnersColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoofingJobs queries the roofing_jobs edge of a Partner.
func (c *PartnerClient) QueryRoofingJobs(pa *Partner) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.RoofingJobsTable, partner.RoofingJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIntegrationJobs queries the integration_jobs edge of a Partner.
func (c *PartnerClient) QueryIntegrationJobs(pa *Partner) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.IntegrationJobsTable, partner.IntegrationJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEpcJobs queries the epc_jobs edge of a Partner.
func (c *PartnerClient) QueryEpcJobs(pa *Partner) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.EpcJobsTable, partner.EpcJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobRequests queries the job_requests edge of a Partner.
func (c *PartnerClient) QueryJobRequests(pa *Partner) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.JobRequestsTable, partner.JobRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a Partner.
func (c *PartnerClient) QueryActivities(pa *Partner) *PartnerActivityQuery {
	query := (&PartnerActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(partneractivity.Table, partneractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ActivitiesTable, partner.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobAssignmentHistory queries the job_assignment_history edge of a Partner.
func (c *PartnerClient) QueryJobAssignmentHistory(pa *Partner) *JobAssignmentHistoryQuery {
	query := (&JobAssignmentHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(jobassignmenthistory.Table, jobassignmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.JobAssignmentHistoryTable, partner.JobAssignmentHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequestedInstallationJobs queries the requested_installation_jobs edge of a Partner.
func (c *PartnerClient) QueryRequestedInstallationJobs(pa *Partner) *InstallationJobQuery {
	query := (&InstallationJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.RequestedInstallationJobsTable, partner.RequestedInstallationJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedInstallationJobs queries the assigned_installation_jobs edge of a Partner.
func (c *PartnerClient) QueryAssignedInstallationJobs(pa *Partner) *InstallationJobQuery {
	query := (&InstallationJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.AssignedInstallationJobsTable, partner.AssignedInstallationJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContacts queries the contacts edge of a Partner.
func (c *PartnerClient) QueryContacts(pa *Partner) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partner.ContactsTable, partner.ContactsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Partner.
func (c *PartnerClient) QueryCreator(pa *Partner) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partner.CreatorTable, partner.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a Partner.
func (c *PartnerClient) QueryCreatorAPI(pa *Partner) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partner.CreatorAPITable, partner.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServices queries the services edge of a Partner.
func (c *PartnerClient) QueryServices(pa *Partner) *PartnerServiceQuery {
	query := (&PartnerServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(partnerservice.Table, partnerservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ServicesTable, partner.ServicesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceStates queries the service_states edge of a Partner.
func (c *PartnerClient) QueryServiceStates(pa *Partner) *PartnerServiceStateQuery {
	query := (&PartnerServiceStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(partnerservicestate.Table, partnerservicestate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ServiceStatesTable, partner.ServiceStatesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceCities queries the service_cities edge of a Partner.
func (c *PartnerClient) QueryServiceCities(pa *Partner) *PartnerServiceCityQuery {
	query := (&PartnerServiceCityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(partnerservicecity.Table, partnerservicecity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ServiceCitiesTable, partner.ServiceCitiesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrainingVideos queries the training_videos edge of a Partner.
func (c *PartnerClient) QueryTrainingVideos(pa *Partner) *PartnerTrainingVideoQuery {
	query := (&PartnerTrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(partnertrainingvideo.Table, partnertrainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.TrainingVideosTable, partner.TrainingVideosColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContactUsRequests queries the contact_us_requests edge of a Partner.
func (c *PartnerClient) QueryContactUsRequests(pa *Partner) *ContactUsQuery {
	query := (&ContactUsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(contactus.Table, contactus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ContactUsRequestsTable, partner.ContactUsRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveys queries the surveys edge of a Partner.
func (c *PartnerClient) QuerySurveys(pa *Partner) *SurveyQuery {
	query := (&SurveyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.SurveysTable, partner.SurveysColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a Partner.
func (c *PartnerClient) QuerySessions(pa *Partner) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.SessionsTable, partner.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobNotes queries the job_notes edge of a Partner.
func (c *PartnerClient) QueryJobNotes(pa *Partner) *JobNoteQuery {
	query := (&JobNoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(jobnote.Table, jobnote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.JobNotesTable, partner.JobNotesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannels queries the channels edge of a Partner.
func (c *PartnerClient) QueryChannels(pa *Partner) *ChannelSubQuery {
	query := (&ChannelSubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(channelsub.Table, channelsub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ChannelsTable, partner.ChannelsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFinanceOptions queries the finance_options edge of a Partner.
func (c *PartnerClient) QueryFinanceOptions(pa *Partner) *OptionListQuery {
	query := (&OptionListClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(optionlist.Table, optionlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, partner.FinanceOptionsTable, partner.FinanceOptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEpcOptions queries the epc_options edge of a Partner.
func (c *PartnerClient) QueryEpcOptions(pa *Partner) *OptionListQuery {
	query := (&OptionListClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(optionlist.Table, optionlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, partner.EpcOptionsTable, partner.EpcOptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartnerContacts queries the partner_contacts edge of a Partner.
func (c *PartnerClient) QueryPartnerContacts(pa *Partner) *PartnerContactQuery {
	query := (&PartnerContactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(partnercontact.Table, partnercontact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, partner.PartnerContactsTable, partner.PartnerContactsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerClient) Hooks() []Hook {
	return c.hooks.Partner
}

// Interceptors returns the client interceptors.
func (c *PartnerClient) Interceptors() []Interceptor {
	return c.inters.Partner
}

func (c *PartnerClient) mutate(ctx context.Context, m *PartnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Partner mutation op: %q", m.Op())
	}
}

// PartnerActivityClient is a client for the PartnerActivity schema.
type PartnerActivityClient struct {
	config
}

// NewPartnerActivityClient returns a client for the PartnerActivity from the given config.
func NewPartnerActivityClient(c config) *PartnerActivityClient {
	return &PartnerActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partneractivity.Hooks(f(g(h())))`.
func (c *PartnerActivityClient) Use(hooks ...Hook) {
	c.hooks.PartnerActivity = append(c.hooks.PartnerActivity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partneractivity.Intercept(f(g(h())))`.
func (c *PartnerActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerActivity = append(c.inters.PartnerActivity, interceptors...)
}

// Create returns a builder for creating a PartnerActivity entity.
func (c *PartnerActivityClient) Create() *PartnerActivityCreate {
	mutation := newPartnerActivityMutation(c.config, OpCreate)
	return &PartnerActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerActivity entities.
func (c *PartnerActivityClient) CreateBulk(builders ...*PartnerActivityCreate) *PartnerActivityCreateBulk {
	return &PartnerActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerActivity.
func (c *PartnerActivityClient) Update() *PartnerActivityUpdate {
	mutation := newPartnerActivityMutation(c.config, OpUpdate)
	return &PartnerActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerActivityClient) UpdateOne(pa *PartnerActivity) *PartnerActivityUpdateOne {
	mutation := newPartnerActivityMutation(c.config, OpUpdateOne, withPartnerActivity(pa))
	return &PartnerActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerActivityClient) UpdateOneID(id string) *PartnerActivityUpdateOne {
	mutation := newPartnerActivityMutation(c.config, OpUpdateOne, withPartnerActivityID(id))
	return &PartnerActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerActivity.
func (c *PartnerActivityClient) Delete() *PartnerActivityDelete {
	mutation := newPartnerActivityMutation(c.config, OpDelete)
	return &PartnerActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerActivityClient) DeleteOne(pa *PartnerActivity) *PartnerActivityDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerActivityClient) DeleteOneID(id string) *PartnerActivityDeleteOne {
	builder := c.Delete().Where(partneractivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerActivityDeleteOne{builder}
}

// Query returns a query builder for PartnerActivity.
func (c *PartnerActivityClient) Query() *PartnerActivityQuery {
	return &PartnerActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerActivity entity by its id.
func (c *PartnerActivityClient) Get(ctx context.Context, id string) (*PartnerActivity, error) {
	return c.Query().Where(partneractivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerActivityClient) GetX(ctx context.Context, id string) *PartnerActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartner queries the partner edge of a PartnerActivity.
func (c *PartnerActivityClient) QueryPartner(pa *PartnerActivity) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partneractivity.Table, partneractivity.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partneractivity.PartnerTable, partneractivity.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a PartnerActivity.
func (c *PartnerActivityClient) QueryCreator(pa *PartnerActivity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partneractivity.Table, partneractivity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partneractivity.CreatorTable, partneractivity.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a PartnerActivity.
func (c *PartnerActivityClient) QueryCreatorAPI(pa *PartnerActivity) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partneractivity.Table, partneractivity.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partneractivity.CreatorAPITable, partneractivity.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerActivityClient) Hooks() []Hook {
	return c.hooks.PartnerActivity
}

// Interceptors returns the client interceptors.
func (c *PartnerActivityClient) Interceptors() []Interceptor {
	return c.inters.PartnerActivity
}

func (c *PartnerActivityClient) mutate(ctx context.Context, m *PartnerActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerActivity mutation op: %q", m.Op())
	}
}

// PartnerContactClient is a client for the PartnerContact schema.
type PartnerContactClient struct {
	config
}

// NewPartnerContactClient returns a client for the PartnerContact from the given config.
func NewPartnerContactClient(c config) *PartnerContactClient {
	return &PartnerContactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partnercontact.Hooks(f(g(h())))`.
func (c *PartnerContactClient) Use(hooks ...Hook) {
	c.hooks.PartnerContact = append(c.hooks.PartnerContact, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partnercontact.Intercept(f(g(h())))`.
func (c *PartnerContactClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerContact = append(c.inters.PartnerContact, interceptors...)
}

// Create returns a builder for creating a PartnerContact entity.
func (c *PartnerContactClient) Create() *PartnerContactCreate {
	mutation := newPartnerContactMutation(c.config, OpCreate)
	return &PartnerContactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerContact entities.
func (c *PartnerContactClient) CreateBulk(builders ...*PartnerContactCreate) *PartnerContactCreateBulk {
	return &PartnerContactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerContact.
func (c *PartnerContactClient) Update() *PartnerContactUpdate {
	mutation := newPartnerContactMutation(c.config, OpUpdate)
	return &PartnerContactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerContactClient) UpdateOne(pc *PartnerContact) *PartnerContactUpdateOne {
	mutation := newPartnerContactMutation(c.config, OpUpdateOne, withPartnerContact(pc))
	return &PartnerContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerContactClient) UpdateOneID(id string) *PartnerContactUpdateOne {
	mutation := newPartnerContactMutation(c.config, OpUpdateOne, withPartnerContactID(id))
	return &PartnerContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerContact.
func (c *PartnerContactClient) Delete() *PartnerContactDelete {
	mutation := newPartnerContactMutation(c.config, OpDelete)
	return &PartnerContactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerContactClient) DeleteOne(pc *PartnerContact) *PartnerContactDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerContactClient) DeleteOneID(id string) *PartnerContactDeleteOne {
	builder := c.Delete().Where(partnercontact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerContactDeleteOne{builder}
}

// Query returns a query builder for PartnerContact.
func (c *PartnerContactClient) Query() *PartnerContactQuery {
	return &PartnerContactQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerContact},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerContact entity by its id.
func (c *PartnerContactClient) Get(ctx context.Context, id string) (*PartnerContact, error) {
	return c.Query().Where(partnercontact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerContactClient) GetX(ctx context.Context, id string) *PartnerContact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PartnerContact.
func (c *PartnerContactClient) QueryUser(pc *PartnerContact) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnercontact.Table, partnercontact.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partnercontact.UserTable, partnercontact.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a PartnerContact.
func (c *PartnerContactClient) QueryPartner(pc *PartnerContact) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnercontact.Table, partnercontact.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partnercontact.PartnerTable, partnercontact.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a PartnerContact.
func (c *PartnerContactClient) QuerySessions(pc *PartnerContact) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnercontact.Table, partnercontact.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partnercontact.SessionsTable, partnercontact.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerContactClient) Hooks() []Hook {
	return c.hooks.PartnerContact
}

// Interceptors returns the client interceptors.
func (c *PartnerContactClient) Interceptors() []Interceptor {
	return c.inters.PartnerContact
}

func (c *PartnerContactClient) mutate(ctx context.Context, m *PartnerContactMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerContactCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerContactUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerContactDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerContact mutation op: %q", m.Op())
	}
}

// PartnerServiceClient is a client for the PartnerService schema.
type PartnerServiceClient struct {
	config
}

// NewPartnerServiceClient returns a client for the PartnerService from the given config.
func NewPartnerServiceClient(c config) *PartnerServiceClient {
	return &PartnerServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partnerservice.Hooks(f(g(h())))`.
func (c *PartnerServiceClient) Use(hooks ...Hook) {
	c.hooks.PartnerService = append(c.hooks.PartnerService, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partnerservice.Intercept(f(g(h())))`.
func (c *PartnerServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerService = append(c.inters.PartnerService, interceptors...)
}

// Create returns a builder for creating a PartnerService entity.
func (c *PartnerServiceClient) Create() *PartnerServiceCreate {
	mutation := newPartnerServiceMutation(c.config, OpCreate)
	return &PartnerServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerService entities.
func (c *PartnerServiceClient) CreateBulk(builders ...*PartnerServiceCreate) *PartnerServiceCreateBulk {
	return &PartnerServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerService.
func (c *PartnerServiceClient) Update() *PartnerServiceUpdate {
	mutation := newPartnerServiceMutation(c.config, OpUpdate)
	return &PartnerServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerServiceClient) UpdateOne(ps *PartnerService) *PartnerServiceUpdateOne {
	mutation := newPartnerServiceMutation(c.config, OpUpdateOne, withPartnerService(ps))
	return &PartnerServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerServiceClient) UpdateOneID(id string) *PartnerServiceUpdateOne {
	mutation := newPartnerServiceMutation(c.config, OpUpdateOne, withPartnerServiceID(id))
	return &PartnerServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerService.
func (c *PartnerServiceClient) Delete() *PartnerServiceDelete {
	mutation := newPartnerServiceMutation(c.config, OpDelete)
	return &PartnerServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerServiceClient) DeleteOne(ps *PartnerService) *PartnerServiceDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerServiceClient) DeleteOneID(id string) *PartnerServiceDeleteOne {
	builder := c.Delete().Where(partnerservice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerServiceDeleteOne{builder}
}

// Query returns a query builder for PartnerService.
func (c *PartnerServiceClient) Query() *PartnerServiceQuery {
	return &PartnerServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerService},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerService entity by its id.
func (c *PartnerServiceClient) Get(ctx context.Context, id string) (*PartnerService, error) {
	return c.Query().Where(partnerservice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerServiceClient) GetX(ctx context.Context, id string) *PartnerService {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartner queries the partner edge of a PartnerService.
func (c *PartnerServiceClient) QueryPartner(ps *PartnerService) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnerservice.Table, partnerservice.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partnerservice.PartnerTable, partnerservice.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerServiceClient) Hooks() []Hook {
	return c.hooks.PartnerService
}

// Interceptors returns the client interceptors.
func (c *PartnerServiceClient) Interceptors() []Interceptor {
	return c.inters.PartnerService
}

func (c *PartnerServiceClient) mutate(ctx context.Context, m *PartnerServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerService mutation op: %q", m.Op())
	}
}

// PartnerServiceCityClient is a client for the PartnerServiceCity schema.
type PartnerServiceCityClient struct {
	config
}

// NewPartnerServiceCityClient returns a client for the PartnerServiceCity from the given config.
func NewPartnerServiceCityClient(c config) *PartnerServiceCityClient {
	return &PartnerServiceCityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partnerservicecity.Hooks(f(g(h())))`.
func (c *PartnerServiceCityClient) Use(hooks ...Hook) {
	c.hooks.PartnerServiceCity = append(c.hooks.PartnerServiceCity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partnerservicecity.Intercept(f(g(h())))`.
func (c *PartnerServiceCityClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerServiceCity = append(c.inters.PartnerServiceCity, interceptors...)
}

// Create returns a builder for creating a PartnerServiceCity entity.
func (c *PartnerServiceCityClient) Create() *PartnerServiceCityCreate {
	mutation := newPartnerServiceCityMutation(c.config, OpCreate)
	return &PartnerServiceCityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerServiceCity entities.
func (c *PartnerServiceCityClient) CreateBulk(builders ...*PartnerServiceCityCreate) *PartnerServiceCityCreateBulk {
	return &PartnerServiceCityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerServiceCity.
func (c *PartnerServiceCityClient) Update() *PartnerServiceCityUpdate {
	mutation := newPartnerServiceCityMutation(c.config, OpUpdate)
	return &PartnerServiceCityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerServiceCityClient) UpdateOne(psc *PartnerServiceCity) *PartnerServiceCityUpdateOne {
	mutation := newPartnerServiceCityMutation(c.config, OpUpdateOne, withPartnerServiceCity(psc))
	return &PartnerServiceCityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerServiceCityClient) UpdateOneID(id string) *PartnerServiceCityUpdateOne {
	mutation := newPartnerServiceCityMutation(c.config, OpUpdateOne, withPartnerServiceCityID(id))
	return &PartnerServiceCityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerServiceCity.
func (c *PartnerServiceCityClient) Delete() *PartnerServiceCityDelete {
	mutation := newPartnerServiceCityMutation(c.config, OpDelete)
	return &PartnerServiceCityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerServiceCityClient) DeleteOne(psc *PartnerServiceCity) *PartnerServiceCityDeleteOne {
	return c.DeleteOneID(psc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerServiceCityClient) DeleteOneID(id string) *PartnerServiceCityDeleteOne {
	builder := c.Delete().Where(partnerservicecity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerServiceCityDeleteOne{builder}
}

// Query returns a query builder for PartnerServiceCity.
func (c *PartnerServiceCityClient) Query() *PartnerServiceCityQuery {
	return &PartnerServiceCityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerServiceCity},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerServiceCity entity by its id.
func (c *PartnerServiceCityClient) Get(ctx context.Context, id string) (*PartnerServiceCity, error) {
	return c.Query().Where(partnerservicecity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerServiceCityClient) GetX(ctx context.Context, id string) *PartnerServiceCity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartner queries the partner edge of a PartnerServiceCity.
func (c *PartnerServiceCityClient) QueryPartner(psc *PartnerServiceCity) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnerservicecity.Table, partnerservicecity.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partnerservicecity.PartnerTable, partnerservicecity.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(psc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerServiceCityClient) Hooks() []Hook {
	return c.hooks.PartnerServiceCity
}

// Interceptors returns the client interceptors.
func (c *PartnerServiceCityClient) Interceptors() []Interceptor {
	return c.inters.PartnerServiceCity
}

func (c *PartnerServiceCityClient) mutate(ctx context.Context, m *PartnerServiceCityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerServiceCityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerServiceCityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerServiceCityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerServiceCityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerServiceCity mutation op: %q", m.Op())
	}
}

// PartnerServiceStateClient is a client for the PartnerServiceState schema.
type PartnerServiceStateClient struct {
	config
}

// NewPartnerServiceStateClient returns a client for the PartnerServiceState from the given config.
func NewPartnerServiceStateClient(c config) *PartnerServiceStateClient {
	return &PartnerServiceStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partnerservicestate.Hooks(f(g(h())))`.
func (c *PartnerServiceStateClient) Use(hooks ...Hook) {
	c.hooks.PartnerServiceState = append(c.hooks.PartnerServiceState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partnerservicestate.Intercept(f(g(h())))`.
func (c *PartnerServiceStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerServiceState = append(c.inters.PartnerServiceState, interceptors...)
}

// Create returns a builder for creating a PartnerServiceState entity.
func (c *PartnerServiceStateClient) Create() *PartnerServiceStateCreate {
	mutation := newPartnerServiceStateMutation(c.config, OpCreate)
	return &PartnerServiceStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerServiceState entities.
func (c *PartnerServiceStateClient) CreateBulk(builders ...*PartnerServiceStateCreate) *PartnerServiceStateCreateBulk {
	return &PartnerServiceStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerServiceState.
func (c *PartnerServiceStateClient) Update() *PartnerServiceStateUpdate {
	mutation := newPartnerServiceStateMutation(c.config, OpUpdate)
	return &PartnerServiceStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerServiceStateClient) UpdateOne(pss *PartnerServiceState) *PartnerServiceStateUpdateOne {
	mutation := newPartnerServiceStateMutation(c.config, OpUpdateOne, withPartnerServiceState(pss))
	return &PartnerServiceStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerServiceStateClient) UpdateOneID(id string) *PartnerServiceStateUpdateOne {
	mutation := newPartnerServiceStateMutation(c.config, OpUpdateOne, withPartnerServiceStateID(id))
	return &PartnerServiceStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerServiceState.
func (c *PartnerServiceStateClient) Delete() *PartnerServiceStateDelete {
	mutation := newPartnerServiceStateMutation(c.config, OpDelete)
	return &PartnerServiceStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerServiceStateClient) DeleteOne(pss *PartnerServiceState) *PartnerServiceStateDeleteOne {
	return c.DeleteOneID(pss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerServiceStateClient) DeleteOneID(id string) *PartnerServiceStateDeleteOne {
	builder := c.Delete().Where(partnerservicestate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerServiceStateDeleteOne{builder}
}

// Query returns a query builder for PartnerServiceState.
func (c *PartnerServiceStateClient) Query() *PartnerServiceStateQuery {
	return &PartnerServiceStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerServiceState},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerServiceState entity by its id.
func (c *PartnerServiceStateClient) Get(ctx context.Context, id string) (*PartnerServiceState, error) {
	return c.Query().Where(partnerservicestate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerServiceStateClient) GetX(ctx context.Context, id string) *PartnerServiceState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartner queries the partner edge of a PartnerServiceState.
func (c *PartnerServiceStateClient) QueryPartner(pss *PartnerServiceState) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnerservicestate.Table, partnerservicestate.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partnerservicestate.PartnerTable, partnerservicestate.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(pss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerServiceStateClient) Hooks() []Hook {
	return c.hooks.PartnerServiceState
}

// Interceptors returns the client interceptors.
func (c *PartnerServiceStateClient) Interceptors() []Interceptor {
	return c.inters.PartnerServiceState
}

func (c *PartnerServiceStateClient) mutate(ctx context.Context, m *PartnerServiceStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerServiceStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerServiceStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerServiceStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerServiceStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerServiceState mutation op: %q", m.Op())
	}
}

// PartnerTrainingVideoClient is a client for the PartnerTrainingVideo schema.
type PartnerTrainingVideoClient struct {
	config
}

// NewPartnerTrainingVideoClient returns a client for the PartnerTrainingVideo from the given config.
func NewPartnerTrainingVideoClient(c config) *PartnerTrainingVideoClient {
	return &PartnerTrainingVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partnertrainingvideo.Hooks(f(g(h())))`.
func (c *PartnerTrainingVideoClient) Use(hooks ...Hook) {
	c.hooks.PartnerTrainingVideo = append(c.hooks.PartnerTrainingVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partnertrainingvideo.Intercept(f(g(h())))`.
func (c *PartnerTrainingVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerTrainingVideo = append(c.inters.PartnerTrainingVideo, interceptors...)
}

// Create returns a builder for creating a PartnerTrainingVideo entity.
func (c *PartnerTrainingVideoClient) Create() *PartnerTrainingVideoCreate {
	mutation := newPartnerTrainingVideoMutation(c.config, OpCreate)
	return &PartnerTrainingVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerTrainingVideo entities.
func (c *PartnerTrainingVideoClient) CreateBulk(builders ...*PartnerTrainingVideoCreate) *PartnerTrainingVideoCreateBulk {
	return &PartnerTrainingVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerTrainingVideo.
func (c *PartnerTrainingVideoClient) Update() *PartnerTrainingVideoUpdate {
	mutation := newPartnerTrainingVideoMutation(c.config, OpUpdate)
	return &PartnerTrainingVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerTrainingVideoClient) UpdateOne(ptv *PartnerTrainingVideo) *PartnerTrainingVideoUpdateOne {
	mutation := newPartnerTrainingVideoMutation(c.config, OpUpdateOne, withPartnerTrainingVideo(ptv))
	return &PartnerTrainingVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerTrainingVideoClient) UpdateOneID(id string) *PartnerTrainingVideoUpdateOne {
	mutation := newPartnerTrainingVideoMutation(c.config, OpUpdateOne, withPartnerTrainingVideoID(id))
	return &PartnerTrainingVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerTrainingVideo.
func (c *PartnerTrainingVideoClient) Delete() *PartnerTrainingVideoDelete {
	mutation := newPartnerTrainingVideoMutation(c.config, OpDelete)
	return &PartnerTrainingVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerTrainingVideoClient) DeleteOne(ptv *PartnerTrainingVideo) *PartnerTrainingVideoDeleteOne {
	return c.DeleteOneID(ptv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerTrainingVideoClient) DeleteOneID(id string) *PartnerTrainingVideoDeleteOne {
	builder := c.Delete().Where(partnertrainingvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerTrainingVideoDeleteOne{builder}
}

// Query returns a query builder for PartnerTrainingVideo.
func (c *PartnerTrainingVideoClient) Query() *PartnerTrainingVideoQuery {
	return &PartnerTrainingVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerTrainingVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerTrainingVideo entity by its id.
func (c *PartnerTrainingVideoClient) Get(ctx context.Context, id string) (*PartnerTrainingVideo, error) {
	return c.Query().Where(partnertrainingvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerTrainingVideoClient) GetX(ctx context.Context, id string) *PartnerTrainingVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideo queries the video edge of a PartnerTrainingVideo.
func (c *PartnerTrainingVideoClient) QueryVideo(ptv *PartnerTrainingVideo) *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ptv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnertrainingvideo.Table, partnertrainingvideo.FieldID, id),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partnertrainingvideo.VideoTable, partnertrainingvideo.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(ptv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a PartnerTrainingVideo.
func (c *PartnerTrainingVideoClient) QueryPartner(ptv *PartnerTrainingVideo) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ptv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partnertrainingvideo.Table, partnertrainingvideo.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partnertrainingvideo.PartnerTable, partnertrainingvideo.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(ptv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerTrainingVideoClient) Hooks() []Hook {
	return c.hooks.PartnerTrainingVideo
}

// Interceptors returns the client interceptors.
func (c *PartnerTrainingVideoClient) Interceptors() []Interceptor {
	return c.inters.PartnerTrainingVideo
}

func (c *PartnerTrainingVideoClient) mutate(ctx context.Context, m *PartnerTrainingVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerTrainingVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerTrainingVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerTrainingVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerTrainingVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerTrainingVideo mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id string) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id string) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id string) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id string) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a Payment.
func (c *PaymentClient) QueryJob(pa *Payment) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.JobTable, payment.JobColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// PostalCodeClient is a client for the PostalCode schema.
type PostalCodeClient struct {
	config
}

// NewPostalCodeClient returns a client for the PostalCode from the given config.
func NewPostalCodeClient(c config) *PostalCodeClient {
	return &PostalCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postalcode.Hooks(f(g(h())))`.
func (c *PostalCodeClient) Use(hooks ...Hook) {
	c.hooks.PostalCode = append(c.hooks.PostalCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `postalcode.Intercept(f(g(h())))`.
func (c *PostalCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.PostalCode = append(c.inters.PostalCode, interceptors...)
}

// Create returns a builder for creating a PostalCode entity.
func (c *PostalCodeClient) Create() *PostalCodeCreate {
	mutation := newPostalCodeMutation(c.config, OpCreate)
	return &PostalCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostalCode entities.
func (c *PostalCodeClient) CreateBulk(builders ...*PostalCodeCreate) *PostalCodeCreateBulk {
	return &PostalCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostalCode.
func (c *PostalCodeClient) Update() *PostalCodeUpdate {
	mutation := newPostalCodeMutation(c.config, OpUpdate)
	return &PostalCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostalCodeClient) UpdateOne(pc *PostalCode) *PostalCodeUpdateOne {
	mutation := newPostalCodeMutation(c.config, OpUpdateOne, withPostalCode(pc))
	return &PostalCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostalCodeClient) UpdateOneID(id string) *PostalCodeUpdateOne {
	mutation := newPostalCodeMutation(c.config, OpUpdateOne, withPostalCodeID(id))
	return &PostalCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostalCode.
func (c *PostalCodeClient) Delete() *PostalCodeDelete {
	mutation := newPostalCodeMutation(c.config, OpDelete)
	return &PostalCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostalCodeClient) DeleteOne(pc *PostalCode) *PostalCodeDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostalCodeClient) DeleteOneID(id string) *PostalCodeDeleteOne {
	builder := c.Delete().Where(postalcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostalCodeDeleteOne{builder}
}

// Query returns a query builder for PostalCode.
func (c *PostalCodeClient) Query() *PostalCodeQuery {
	return &PostalCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePostalCode},
		inters: c.Interceptors(),
	}
}

// Get returns a PostalCode entity by its id.
func (c *PostalCodeClient) Get(ctx context.Context, id string) (*PostalCode, error) {
	return c.Query().Where(postalcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostalCodeClient) GetX(ctx context.Context, id string) *PostalCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPricing queries the pricing edge of a PostalCode.
func (c *PostalCodeClient) QueryPricing(pc *PostalCode) *PricingQuery {
	query := (&PricingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postalcode.Table, postalcode.FieldID, id),
			sqlgraph.To(pricing.Table, pricing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, postalcode.PricingTable, postalcode.PricingColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostalCodeClient) Hooks() []Hook {
	return c.hooks.PostalCode
}

// Interceptors returns the client interceptors.
func (c *PostalCodeClient) Interceptors() []Interceptor {
	return c.inters.PostalCode
}

func (c *PostalCodeClient) mutate(ctx context.Context, m *PostalCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostalCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostalCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostalCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostalCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PostalCode mutation op: %q", m.Op())
	}
}

// PricingClient is a client for the Pricing schema.
type PricingClient struct {
	config
}

// NewPricingClient returns a client for the Pricing from the given config.
func NewPricingClient(c config) *PricingClient {
	return &PricingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pricing.Hooks(f(g(h())))`.
func (c *PricingClient) Use(hooks ...Hook) {
	c.hooks.Pricing = append(c.hooks.Pricing, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pricing.Intercept(f(g(h())))`.
func (c *PricingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pricing = append(c.inters.Pricing, interceptors...)
}

// Create returns a builder for creating a Pricing entity.
func (c *PricingClient) Create() *PricingCreate {
	mutation := newPricingMutation(c.config, OpCreate)
	return &PricingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pricing entities.
func (c *PricingClient) CreateBulk(builders ...*PricingCreate) *PricingCreateBulk {
	return &PricingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pricing.
func (c *PricingClient) Update() *PricingUpdate {
	mutation := newPricingMutation(c.config, OpUpdate)
	return &PricingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PricingClient) UpdateOne(pr *Pricing) *PricingUpdateOne {
	mutation := newPricingMutation(c.config, OpUpdateOne, withPricing(pr))
	return &PricingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PricingClient) UpdateOneID(id string) *PricingUpdateOne {
	mutation := newPricingMutation(c.config, OpUpdateOne, withPricingID(id))
	return &PricingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pricing.
func (c *PricingClient) Delete() *PricingDelete {
	mutation := newPricingMutation(c.config, OpDelete)
	return &PricingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PricingClient) DeleteOne(pr *Pricing) *PricingDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PricingClient) DeleteOneID(id string) *PricingDeleteOne {
	builder := c.Delete().Where(pricing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PricingDeleteOne{builder}
}

// Query returns a query builder for Pricing.
func (c *PricingClient) Query() *PricingQuery {
	return &PricingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePricing},
		inters: c.Interceptors(),
	}
}

// Get returns a Pricing entity by its id.
func (c *PricingClient) Get(ctx context.Context, id string) (*Pricing, error) {
	return c.Query().Where(pricing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PricingClient) GetX(ctx context.Context, id string) *Pricing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPostal queries the postal edge of a Pricing.
func (c *PricingClient) QueryPostal(pr *Pricing) *PostalCodeQuery {
	query := (&PostalCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pricing.Table, pricing.FieldID, id),
			sqlgraph.To(postalcode.Table, postalcode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pricing.PostalTable, pricing.PostalColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PricingClient) Hooks() []Hook {
	return c.hooks.Pricing
}

// Interceptors returns the client interceptors.
func (c *PricingClient) Interceptors() []Interceptor {
	return c.inters.Pricing
}

func (c *PricingClient) mutate(ctx context.Context, m *PricingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PricingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PricingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PricingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PricingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pricing mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id string) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id string) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id string) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id string) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPackage queries the package edge of a Product.
func (c *ProductClient) QueryPackage(pr *Product) *ProductPackageQuery {
	query := (&ProductPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productpackage.Table, productpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.PackageTable, product.PackagePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Product.
func (c *ProductClient) QueryCreator(pr *Product) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.CreatorTable, product.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a Product.
func (c *ProductClient) QueryImage(pr *Product) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, product.ImageTable, product.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// ProductPackageClient is a client for the ProductPackage schema.
type ProductPackageClient struct {
	config
}

// NewProductPackageClient returns a client for the ProductPackage from the given config.
func NewProductPackageClient(c config) *ProductPackageClient {
	return &ProductPackageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productpackage.Hooks(f(g(h())))`.
func (c *ProductPackageClient) Use(hooks ...Hook) {
	c.hooks.ProductPackage = append(c.hooks.ProductPackage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productpackage.Intercept(f(g(h())))`.
func (c *ProductPackageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductPackage = append(c.inters.ProductPackage, interceptors...)
}

// Create returns a builder for creating a ProductPackage entity.
func (c *ProductPackageClient) Create() *ProductPackageCreate {
	mutation := newProductPackageMutation(c.config, OpCreate)
	return &ProductPackageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductPackage entities.
func (c *ProductPackageClient) CreateBulk(builders ...*ProductPackageCreate) *ProductPackageCreateBulk {
	return &ProductPackageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductPackage.
func (c *ProductPackageClient) Update() *ProductPackageUpdate {
	mutation := newProductPackageMutation(c.config, OpUpdate)
	return &ProductPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductPackageClient) UpdateOne(pp *ProductPackage) *ProductPackageUpdateOne {
	mutation := newProductPackageMutation(c.config, OpUpdateOne, withProductPackage(pp))
	return &ProductPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductPackageClient) UpdateOneID(id string) *ProductPackageUpdateOne {
	mutation := newProductPackageMutation(c.config, OpUpdateOne, withProductPackageID(id))
	return &ProductPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductPackage.
func (c *ProductPackageClient) Delete() *ProductPackageDelete {
	mutation := newProductPackageMutation(c.config, OpDelete)
	return &ProductPackageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductPackageClient) DeleteOne(pp *ProductPackage) *ProductPackageDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductPackageClient) DeleteOneID(id string) *ProductPackageDeleteOne {
	builder := c.Delete().Where(productpackage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductPackageDeleteOne{builder}
}

// Query returns a query builder for ProductPackage.
func (c *ProductPackageClient) Query() *ProductPackageQuery {
	return &ProductPackageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductPackage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductPackage entity by its id.
func (c *ProductPackageClient) Get(ctx context.Context, id string) (*ProductPackage, error) {
	return c.Query().Where(productpackage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductPackageClient) GetX(ctx context.Context, id string) *ProductPackage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItems queries the items edge of a ProductPackage.
func (c *ProductPackageClient) QueryItems(pp *ProductPackage) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productpackage.Table, productpackage.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productpackage.ItemsTable, productpackage.ItemsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a ProductPackage.
func (c *ProductPackageClient) QueryCreator(pp *ProductPackage) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productpackage.Table, productpackage.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productpackage.CreatorTable, productpackage.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductPackageClient) Hooks() []Hook {
	return c.hooks.ProductPackage
}

// Interceptors returns the client interceptors.
func (c *ProductPackageClient) Interceptors() []Interceptor {
	return c.inters.ProductPackage
}

func (c *ProductPackageClient) mutate(ctx context.Context, m *ProductPackageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductPackageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductPackageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductPackage mutation op: %q", m.Op())
	}
}

// SurveyClient is a client for the Survey schema.
type SurveyClient struct {
	config
}

// NewSurveyClient returns a client for the Survey from the given config.
func NewSurveyClient(c config) *SurveyClient {
	return &SurveyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `survey.Hooks(f(g(h())))`.
func (c *SurveyClient) Use(hooks ...Hook) {
	c.hooks.Survey = append(c.hooks.Survey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `survey.Intercept(f(g(h())))`.
func (c *SurveyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Survey = append(c.inters.Survey, interceptors...)
}

// Create returns a builder for creating a Survey entity.
func (c *SurveyClient) Create() *SurveyCreate {
	mutation := newSurveyMutation(c.config, OpCreate)
	return &SurveyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Survey entities.
func (c *SurveyClient) CreateBulk(builders ...*SurveyCreate) *SurveyCreateBulk {
	return &SurveyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Survey.
func (c *SurveyClient) Update() *SurveyUpdate {
	mutation := newSurveyMutation(c.config, OpUpdate)
	return &SurveyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyClient) UpdateOne(s *Survey) *SurveyUpdateOne {
	mutation := newSurveyMutation(c.config, OpUpdateOne, withSurvey(s))
	return &SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyClient) UpdateOneID(id string) *SurveyUpdateOne {
	mutation := newSurveyMutation(c.config, OpUpdateOne, withSurveyID(id))
	return &SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Survey.
func (c *SurveyClient) Delete() *SurveyDelete {
	mutation := newSurveyMutation(c.config, OpDelete)
	return &SurveyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SurveyClient) DeleteOne(s *Survey) *SurveyDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SurveyClient) DeleteOneID(id string) *SurveyDeleteOne {
	builder := c.Delete().Where(survey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyDeleteOne{builder}
}

// Query returns a query builder for Survey.
func (c *SurveyClient) Query() *SurveyQuery {
	return &SurveyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSurvey},
		inters: c.Interceptors(),
	}
}

// Get returns a Survey entity by its id.
func (c *SurveyClient) Get(ctx context.Context, id string) (*Survey, error) {
	return c.Query().Where(survey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyClient) GetX(ctx context.Context, id string) *Survey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgressHistory queries the progress_history edge of a Survey.
func (c *SurveyClient) QueryProgressHistory(s *Survey) *SurveyProgressQuery {
	query := (&SurveyProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(surveyprogress.Table, surveyprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, survey.ProgressHistoryTable, survey.ProgressHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedBy queries the created_by edge of a Survey.
func (c *SurveyClient) QueryCreatedBy(s *Survey) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, survey.CreatedByTable, survey.CreatedByColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a Survey.
func (c *SurveyClient) QueryPartner(s *Survey) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, survey.PartnerTable, survey.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyClient) Hooks() []Hook {
	return c.hooks.Survey
}

// Interceptors returns the client interceptors.
func (c *SurveyClient) Interceptors() []Interceptor {
	return c.inters.Survey
}

func (c *SurveyClient) mutate(ctx context.Context, m *SurveyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SurveyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SurveyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SurveyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Survey mutation op: %q", m.Op())
	}
}

// SurveyProgressClient is a client for the SurveyProgress schema.
type SurveyProgressClient struct {
	config
}

// NewSurveyProgressClient returns a client for the SurveyProgress from the given config.
func NewSurveyProgressClient(c config) *SurveyProgressClient {
	return &SurveyProgressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveyprogress.Hooks(f(g(h())))`.
func (c *SurveyProgressClient) Use(hooks ...Hook) {
	c.hooks.SurveyProgress = append(c.hooks.SurveyProgress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `surveyprogress.Intercept(f(g(h())))`.
func (c *SurveyProgressClient) Intercept(interceptors ...Interceptor) {
	c.inters.SurveyProgress = append(c.inters.SurveyProgress, interceptors...)
}

// Create returns a builder for creating a SurveyProgress entity.
func (c *SurveyProgressClient) Create() *SurveyProgressCreate {
	mutation := newSurveyProgressMutation(c.config, OpCreate)
	return &SurveyProgressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyProgress entities.
func (c *SurveyProgressClient) CreateBulk(builders ...*SurveyProgressCreate) *SurveyProgressCreateBulk {
	return &SurveyProgressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyProgress.
func (c *SurveyProgressClient) Update() *SurveyProgressUpdate {
	mutation := newSurveyProgressMutation(c.config, OpUpdate)
	return &SurveyProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyProgressClient) UpdateOne(sp *SurveyProgress) *SurveyProgressUpdateOne {
	mutation := newSurveyProgressMutation(c.config, OpUpdateOne, withSurveyProgress(sp))
	return &SurveyProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyProgressClient) UpdateOneID(id string) *SurveyProgressUpdateOne {
	mutation := newSurveyProgressMutation(c.config, OpUpdateOne, withSurveyProgressID(id))
	return &SurveyProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyProgress.
func (c *SurveyProgressClient) Delete() *SurveyProgressDelete {
	mutation := newSurveyProgressMutation(c.config, OpDelete)
	return &SurveyProgressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SurveyProgressClient) DeleteOne(sp *SurveyProgress) *SurveyProgressDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SurveyProgressClient) DeleteOneID(id string) *SurveyProgressDeleteOne {
	builder := c.Delete().Where(surveyprogress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyProgressDeleteOne{builder}
}

// Query returns a query builder for SurveyProgress.
func (c *SurveyProgressClient) Query() *SurveyProgressQuery {
	return &SurveyProgressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSurveyProgress},
		inters: c.Interceptors(),
	}
}

// Get returns a SurveyProgress entity by its id.
func (c *SurveyProgressClient) Get(ctx context.Context, id string) (*SurveyProgress, error) {
	return c.Query().Where(surveyprogress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyProgressClient) GetX(ctx context.Context, id string) *SurveyProgress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurvey queries the survey edge of a SurveyProgress.
func (c *SurveyProgressClient) QuerySurvey(sp *SurveyProgress) *SurveyQuery {
	query := (&SurveyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyprogress.Table, surveyprogress.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyprogress.SurveyTable, surveyprogress.SurveyColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a SurveyProgress.
func (c *SurveyProgressClient) QueryCreator(sp *SurveyProgress) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyprogress.Table, surveyprogress.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyprogress.CreatorTable, surveyprogress.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a SurveyProgress.
func (c *SurveyProgressClient) QueryCreatorAPI(sp *SurveyProgress) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyprogress.Table, surveyprogress.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyprogress.CreatorAPITable, surveyprogress.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyProgressClient) Hooks() []Hook {
	return c.hooks.SurveyProgress
}

// Interceptors returns the client interceptors.
func (c *SurveyProgressClient) Interceptors() []Interceptor {
	return c.inters.SurveyProgress
}

func (c *SurveyProgressClient) mutate(ctx context.Context, m *SurveyProgressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SurveyProgressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SurveyProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SurveyProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SurveyProgressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SurveyProgress mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id string) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id string) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id string) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id string) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	return c.inters.Token
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Token mutation op: %q", m.Op())
	}
}

// TrainingCourseClient is a client for the TrainingCourse schema.
type TrainingCourseClient struct {
	config
}

// NewTrainingCourseClient returns a client for the TrainingCourse from the given config.
func NewTrainingCourseClient(c config) *TrainingCourseClient {
	return &TrainingCourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trainingcourse.Hooks(f(g(h())))`.
func (c *TrainingCourseClient) Use(hooks ...Hook) {
	c.hooks.TrainingCourse = append(c.hooks.TrainingCourse, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trainingcourse.Intercept(f(g(h())))`.
func (c *TrainingCourseClient) Intercept(interceptors ...Interceptor) {
	c.inters.TrainingCourse = append(c.inters.TrainingCourse, interceptors...)
}

// Create returns a builder for creating a TrainingCourse entity.
func (c *TrainingCourseClient) Create() *TrainingCourseCreate {
	mutation := newTrainingCourseMutation(c.config, OpCreate)
	return &TrainingCourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrainingCourse entities.
func (c *TrainingCourseClient) CreateBulk(builders ...*TrainingCourseCreate) *TrainingCourseCreateBulk {
	return &TrainingCourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrainingCourse.
func (c *TrainingCourseClient) Update() *TrainingCourseUpdate {
	mutation := newTrainingCourseMutation(c.config, OpUpdate)
	return &TrainingCourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrainingCourseClient) UpdateOne(tc *TrainingCourse) *TrainingCourseUpdateOne {
	mutation := newTrainingCourseMutation(c.config, OpUpdateOne, withTrainingCourse(tc))
	return &TrainingCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrainingCourseClient) UpdateOneID(id string) *TrainingCourseUpdateOne {
	mutation := newTrainingCourseMutation(c.config, OpUpdateOne, withTrainingCourseID(id))
	return &TrainingCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrainingCourse.
func (c *TrainingCourseClient) Delete() *TrainingCourseDelete {
	mutation := newTrainingCourseMutation(c.config, OpDelete)
	return &TrainingCourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrainingCourseClient) DeleteOne(tc *TrainingCourse) *TrainingCourseDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrainingCourseClient) DeleteOneID(id string) *TrainingCourseDeleteOne {
	builder := c.Delete().Where(trainingcourse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrainingCourseDeleteOne{builder}
}

// Query returns a query builder for TrainingCourse.
func (c *TrainingCourseClient) Query() *TrainingCourseQuery {
	return &TrainingCourseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrainingCourse},
		inters: c.Interceptors(),
	}
}

// Get returns a TrainingCourse entity by its id.
func (c *TrainingCourseClient) Get(ctx context.Context, id string) (*TrainingCourse, error) {
	return c.Query().Where(trainingcourse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrainingCourseClient) GetX(ctx context.Context, id string) *TrainingCourse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrainingVideos queries the training_videos edge of a TrainingCourse.
func (c *TrainingCourseClient) QueryTrainingVideos(tc *TrainingCourse) *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingcourse.Table, trainingcourse.FieldID, id),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trainingcourse.TrainingVideosTable, trainingcourse.TrainingVideosColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a TrainingCourse.
func (c *TrainingCourseClient) QueryCreator(tc *TrainingCourse) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingcourse.Table, trainingcourse.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trainingcourse.CreatorTable, trainingcourse.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrainingCourseClient) Hooks() []Hook {
	return c.hooks.TrainingCourse
}

// Interceptors returns the client interceptors.
func (c *TrainingCourseClient) Interceptors() []Interceptor {
	return c.inters.TrainingCourse
}

func (c *TrainingCourseClient) mutate(ctx context.Context, m *TrainingCourseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrainingCourseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrainingCourseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrainingCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrainingCourseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TrainingCourse mutation op: %q", m.Op())
	}
}

// TrainingVideoClient is a client for the TrainingVideo schema.
type TrainingVideoClient struct {
	config
}

// NewTrainingVideoClient returns a client for the TrainingVideo from the given config.
func NewTrainingVideoClient(c config) *TrainingVideoClient {
	return &TrainingVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trainingvideo.Hooks(f(g(h())))`.
func (c *TrainingVideoClient) Use(hooks ...Hook) {
	c.hooks.TrainingVideo = append(c.hooks.TrainingVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trainingvideo.Intercept(f(g(h())))`.
func (c *TrainingVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.TrainingVideo = append(c.inters.TrainingVideo, interceptors...)
}

// Create returns a builder for creating a TrainingVideo entity.
func (c *TrainingVideoClient) Create() *TrainingVideoCreate {
	mutation := newTrainingVideoMutation(c.config, OpCreate)
	return &TrainingVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrainingVideo entities.
func (c *TrainingVideoClient) CreateBulk(builders ...*TrainingVideoCreate) *TrainingVideoCreateBulk {
	return &TrainingVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrainingVideo.
func (c *TrainingVideoClient) Update() *TrainingVideoUpdate {
	mutation := newTrainingVideoMutation(c.config, OpUpdate)
	return &TrainingVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrainingVideoClient) UpdateOne(tv *TrainingVideo) *TrainingVideoUpdateOne {
	mutation := newTrainingVideoMutation(c.config, OpUpdateOne, withTrainingVideo(tv))
	return &TrainingVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrainingVideoClient) UpdateOneID(id string) *TrainingVideoUpdateOne {
	mutation := newTrainingVideoMutation(c.config, OpUpdateOne, withTrainingVideoID(id))
	return &TrainingVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrainingVideo.
func (c *TrainingVideoClient) Delete() *TrainingVideoDelete {
	mutation := newTrainingVideoMutation(c.config, OpDelete)
	return &TrainingVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrainingVideoClient) DeleteOne(tv *TrainingVideo) *TrainingVideoDeleteOne {
	return c.DeleteOneID(tv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrainingVideoClient) DeleteOneID(id string) *TrainingVideoDeleteOne {
	builder := c.Delete().Where(trainingvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrainingVideoDeleteOne{builder}
}

// Query returns a query builder for TrainingVideo.
func (c *TrainingVideoClient) Query() *TrainingVideoQuery {
	return &TrainingVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrainingVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a TrainingVideo entity by its id.
func (c *TrainingVideoClient) Get(ctx context.Context, id string) (*TrainingVideo, error) {
	return c.Query().Where(trainingvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrainingVideoClient) GetX(ctx context.Context, id string) *TrainingVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrainingVideos queries the training_videos edge of a TrainingVideo.
func (c *TrainingVideoClient) QueryTrainingVideos(tv *TrainingVideo) *PartnerTrainingVideoQuery {
	query := (&PartnerTrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, id),
			sqlgraph.To(partnertrainingvideo.Table, partnertrainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trainingvideo.TrainingVideosTable, trainingvideo.TrainingVideosColumn),
		)
		fromV = sqlgraph.Neighbors(tv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a TrainingVideo.
func (c *TrainingVideoClient) QueryCreator(tv *TrainingVideo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trainingvideo.CreatorTable, trainingvideo.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(tv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a TrainingVideo.
func (c *TrainingVideoClient) QueryCourse(tv *TrainingVideo) *TrainingCourseQuery {
	query := (&TrainingCourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, id),
			sqlgraph.To(trainingcourse.Table, trainingcourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trainingvideo.CourseTable, trainingvideo.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(tv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoster queries the poster edge of a TrainingVideo.
func (c *TrainingVideoClient) QueryPoster(tv *TrainingVideo) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, trainingvideo.PosterTable, trainingvideo.PosterColumn),
		)
		fromV = sqlgraph.Neighbors(tv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideo queries the video edge of a TrainingVideo.
func (c *TrainingVideoClient) QueryVideo(tv *TrainingVideo) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, trainingvideo.VideoTable, trainingvideo.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(tv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrainingVideoClient) Hooks() []Hook {
	return c.hooks.TrainingVideo
}

// Interceptors returns the client interceptors.
func (c *TrainingVideoClient) Interceptors() []Interceptor {
	return c.inters.TrainingVideo
}

func (c *TrainingVideoClient) mutate(ctx context.Context, m *TrainingVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrainingVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrainingVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrainingVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrainingVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TrainingVideo mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuths queries the auths edge of a User.
func (c *UserClient) QueryAuths(u *User) *UserAuthQuery {
	query := (&UserAuthClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userauth.Table, userauth.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.AuthsTable, user.AuthsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a User.
func (c *UserClient) QueryAuditLogs(u *User) *AuditLogQuery {
	query := (&AuditLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(auditlog.Table, auditlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditLogsTable, user.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotify queries the notify edge of a User.
func (c *UserClient) QueryNotify(u *User) *NotifySettingQuery {
	query := (&NotifySettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifysetting.Table, notifysetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyTable, user.NotifyColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedJobs queries the created_jobs edge of a User.
func (c *UserClient) QueryCreatedJobs(u *User) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedJobsTable, user.CreatedJobsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedEstimates queries the created_estimates edge of a User.
func (c *UserClient) QueryCreatedEstimates(u *User) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedEstimatesTable, user.CreatedEstimatesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalesRepEstimates queries the sales_rep_estimates edge of a User.
func (c *UserClient) QuerySalesRepEstimates(u *User) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SalesRepEstimatesTable, user.SalesRepEstimatesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySales queries the sales edge of a User.
func (c *UserClient) QuerySales(u *User) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SalesTable, user.SalesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedInstallationJobs queries the created_installation_jobs edge of a User.
func (c *UserClient) QueryCreatedInstallationJobs(u *User) *InstallationJobQuery {
	query := (&InstallationJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedInstallationJobsTable, user.CreatedInstallationJobsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstallationLeads queries the installation_leads edge of a User.
func (c *UserClient) QueryInstallationLeads(u *User) *InstallationJobQuery {
	query := (&InstallationJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InstallationLeadsTable, user.InstallationLeadsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEstimateActivities queries the estimate_activities edge of a User.
func (c *UserClient) QueryEstimateActivities(u *User) *EstimateActivityQuery {
	query := (&EstimateActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(estimateactivity.Table, estimateactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EstimateActivitiesTable, user.EstimateActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobActivities queries the job_activities edge of a User.
func (c *UserClient) QueryJobActivities(u *User) *JobActivityQuery {
	query := (&JobActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobactivity.Table, jobactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobActivitiesTable, user.JobActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartnerActivities queries the partner_activities edge of a User.
func (c *UserClient) QueryPartnerActivities(u *User) *PartnerActivityQuery {
	query := (&PartnerActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(partneractivity.Table, partneractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PartnerActivitiesTable, user.PartnerActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserActivities queries the user_activities edge of a User.
func (c *UserClient) QueryUserActivities(u *User) *UserActivityQuery {
	query := (&UserActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useractivity.Table, useractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserActivitiesTable, user.UserActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a User.
func (c *UserClient) QueryActivities(u *User) *UserActivityQuery {
	query := (&UserActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useractivity.Table, useractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActivitiesTable, user.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobProgressHistory queries the job_progress_history edge of a User.
func (c *UserClient) QueryJobProgressHistory(u *User) *JobProgressHistoryQuery {
	query := (&JobProgressHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobprogresshistory.Table, jobprogresshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobProgressHistoryTable, user.JobProgressHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstallationJobStatusChanger queries the installation_job_status_changer edge of a User.
func (c *UserClient) QueryInstallationJobStatusChanger(u *User) *InstallationJobProgressQuery {
	query := (&InstallationJobProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(installationjobprogress.Table, installationjobprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InstallationJobStatusChangerTable, user.InstallationJobStatusChangerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContactUsRequests queries the contact_us_requests edge of a User.
func (c *UserClient) QueryContactUsRequests(u *User) *ContactUsQuery {
	query := (&ContactUsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(contactus.Table, contactus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ContactUsRequestsTable, user.ContactUsRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a User.
func (c *UserClient) QueryPartner(u *User) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.PartnerTable, user.PartnerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveys queries the surveys edge of a User.
func (c *UserClient) QuerySurveys(u *User) *SurveyQuery {
	query := (&SurveyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SurveysTable, user.SurveysColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyProgress queries the survey_progress edge of a User.
func (c *UserClient) QuerySurveyProgress(u *User) *SurveyProgressQuery {
	query := (&SurveyProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(surveyprogress.Table, surveyprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SurveyProgressTable, user.SurveyProgressColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedTrainingVideos queries the created_training_videos edge of a User.
func (c *UserClient) QueryCreatedTrainingVideos(u *User) *TrainingVideoQuery {
	query := (&TrainingVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(trainingvideo.Table, trainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedTrainingVideosTable, user.CreatedTrainingVideosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedTrainingCourses queries the created_training_courses edge of a User.
func (c *UserClient) QueryCreatedTrainingCourses(u *User) *TrainingCourseQuery {
	query := (&TrainingCourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(trainingcourse.Table, trainingcourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedTrainingCoursesTable, user.CreatedTrainingCoursesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobNotes queries the job_notes edge of a User.
func (c *UserClient) QueryJobNotes(u *User) *JobNoteQuery {
	query := (&JobNoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobnote.Table, jobnote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobNotesTable, user.JobNotesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChatChannels queries the chat_channels edge of a User.
func (c *UserClient) QueryChatChannels(u *User) *ChannelSubQuery {
	query := (&ChannelSubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(channelsub.Table, channelsub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ChatChannelsTable, user.ChatChannelsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentMessages queries the sent_messages edge of a User.
func (c *UserClient) QuerySentMessages(u *User) *ChannelMessageQuery {
	query := (&ChannelMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(channelmessage.Table, channelmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentMessagesTable, user.SentMessagesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceivedMessages queries the received_messages edge of a User.
func (c *UserClient) QueryReceivedMessages(u *User) *ChannelMessageQuery {
	query := (&ChannelMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(channelmessage.Table, channelmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReceivedMessagesTable, user.ReceivedMessagesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannelMessageRead queries the channel_message_read edge of a User.
func (c *UserClient) QueryChannelMessageRead(u *User) *ChannelMessageReadQuery {
	query := (&ChannelMessageReadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(channelmessageread.Table, channelmessageread.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ChannelMessageReadTable, user.ChannelMessageReadColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductsCreated queries the products_created edge of a User.
func (c *UserClient) QueryProductsCreated(u *User) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProductsCreatedTable, user.ProductsCreatedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPkgCreated queries the product_pkg_created edge of a User.
func (c *UserClient) QueryProductPkgCreated(u *User) *ProductPackageQuery {
	query := (&ProductPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(productpackage.Table, productpackage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProductPkgCreatedTable, user.ProductPkgCreatedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobDocUrls queries the job_doc_urls edge of a User.
func (c *UserClient) QueryJobDocUrls(u *User) *JobDocURLQuery {
	query := (&JobDocURLClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobdocurl.Table, jobdocurl.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobDocUrlsTable, user.JobDocUrlsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartnerContacts queries the partner_contacts edge of a User.
func (c *UserClient) QueryPartnerContacts(u *User) *PartnerContactQuery {
	query := (&PartnerContactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(partnercontact.Table, partnercontact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.PartnerContactsTable, user.PartnerContactsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserActivityClient is a client for the UserActivity schema.
type UserActivityClient struct {
	config
}

// NewUserActivityClient returns a client for the UserActivity from the given config.
func NewUserActivityClient(c config) *UserActivityClient {
	return &UserActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useractivity.Hooks(f(g(h())))`.
func (c *UserActivityClient) Use(hooks ...Hook) {
	c.hooks.UserActivity = append(c.hooks.UserActivity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useractivity.Intercept(f(g(h())))`.
func (c *UserActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserActivity = append(c.inters.UserActivity, interceptors...)
}

// Create returns a builder for creating a UserActivity entity.
func (c *UserActivityClient) Create() *UserActivityCreate {
	mutation := newUserActivityMutation(c.config, OpCreate)
	return &UserActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserActivity entities.
func (c *UserActivityClient) CreateBulk(builders ...*UserActivityCreate) *UserActivityCreateBulk {
	return &UserActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserActivity.
func (c *UserActivityClient) Update() *UserActivityUpdate {
	mutation := newUserActivityMutation(c.config, OpUpdate)
	return &UserActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserActivityClient) UpdateOne(ua *UserActivity) *UserActivityUpdateOne {
	mutation := newUserActivityMutation(c.config, OpUpdateOne, withUserActivity(ua))
	return &UserActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserActivityClient) UpdateOneID(id string) *UserActivityUpdateOne {
	mutation := newUserActivityMutation(c.config, OpUpdateOne, withUserActivityID(id))
	return &UserActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserActivity.
func (c *UserActivityClient) Delete() *UserActivityDelete {
	mutation := newUserActivityMutation(c.config, OpDelete)
	return &UserActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserActivityClient) DeleteOne(ua *UserActivity) *UserActivityDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserActivityClient) DeleteOneID(id string) *UserActivityDeleteOne {
	builder := c.Delete().Where(useractivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserActivityDeleteOne{builder}
}

// Query returns a query builder for UserActivity.
func (c *UserActivityClient) Query() *UserActivityQuery {
	return &UserActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a UserActivity entity by its id.
func (c *UserActivityClient) Get(ctx context.Context, id string) (*UserActivity, error) {
	return c.Query().Where(useractivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserActivityClient) GetX(ctx context.Context, id string) *UserActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserActivity.
func (c *UserActivityClient) QueryUser(ua *UserActivity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useractivity.Table, useractivity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useractivity.UserTable, useractivity.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a UserActivity.
func (c *UserActivityClient) QueryCreator(ua *UserActivity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useractivity.Table, useractivity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useractivity.CreatorTable, useractivity.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatorAPI queries the creator_api edge of a UserActivity.
func (c *UserActivityClient) QueryCreatorAPI(ua *UserActivity) *ApiUserQuery {
	query := (&ApiUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useractivity.Table, useractivity.FieldID, id),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useractivity.CreatorAPITable, useractivity.CreatorAPIColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserActivityClient) Hooks() []Hook {
	return c.hooks.UserActivity
}

// Interceptors returns the client interceptors.
func (c *UserActivityClient) Interceptors() []Interceptor {
	return c.inters.UserActivity
}

func (c *UserActivityClient) mutate(ctx context.Context, m *UserActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserActivity mutation op: %q", m.Op())
	}
}

// UserAuthClient is a client for the UserAuth schema.
type UserAuthClient struct {
	config
}

// NewUserAuthClient returns a client for the UserAuth from the given config.
func NewUserAuthClient(c config) *UserAuthClient {
	return &UserAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userauth.Hooks(f(g(h())))`.
func (c *UserAuthClient) Use(hooks ...Hook) {
	c.hooks.UserAuth = append(c.hooks.UserAuth, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userauth.Intercept(f(g(h())))`.
func (c *UserAuthClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserAuth = append(c.inters.UserAuth, interceptors...)
}

// Create returns a builder for creating a UserAuth entity.
func (c *UserAuthClient) Create() *UserAuthCreate {
	mutation := newUserAuthMutation(c.config, OpCreate)
	return &UserAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAuth entities.
func (c *UserAuthClient) CreateBulk(builders ...*UserAuthCreate) *UserAuthCreateBulk {
	return &UserAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAuth.
func (c *UserAuthClient) Update() *UserAuthUpdate {
	mutation := newUserAuthMutation(c.config, OpUpdate)
	return &UserAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAuthClient) UpdateOne(ua *UserAuth) *UserAuthUpdateOne {
	mutation := newUserAuthMutation(c.config, OpUpdateOne, withUserAuth(ua))
	return &UserAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAuthClient) UpdateOneID(id string) *UserAuthUpdateOne {
	mutation := newUserAuthMutation(c.config, OpUpdateOne, withUserAuthID(id))
	return &UserAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAuth.
func (c *UserAuthClient) Delete() *UserAuthDelete {
	mutation := newUserAuthMutation(c.config, OpDelete)
	return &UserAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserAuthClient) DeleteOne(ua *UserAuth) *UserAuthDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserAuthClient) DeleteOneID(id string) *UserAuthDeleteOne {
	builder := c.Delete().Where(userauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAuthDeleteOne{builder}
}

// Query returns a query builder for UserAuth.
func (c *UserAuthClient) Query() *UserAuthQuery {
	return &UserAuthQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserAuth},
		inters: c.Interceptors(),
	}
}

// Get returns a UserAuth entity by its id.
func (c *UserAuthClient) Get(ctx context.Context, id string) (*UserAuth, error) {
	return c.Query().Where(userauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAuthClient) GetX(ctx context.Context, id string) *UserAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserAuth.
func (c *UserAuthClient) QueryUser(ua *UserAuth) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userauth.Table, userauth.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userauth.UserTable, userauth.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserAuthClient) Hooks() []Hook {
	return c.hooks.UserAuth
}

// Interceptors returns the client interceptors.
func (c *UserAuthClient) Interceptors() []Interceptor {
	return c.inters.UserAuth
}

func (c *UserAuthClient) mutate(ctx context.Context, m *UserAuthMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserAuthCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserAuthDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserAuth mutation op: %q", m.Op())
	}
}

// UserSessionClient is a client for the UserSession schema.
type UserSessionClient struct {
	config
}

// NewUserSessionClient returns a client for the UserSession from the given config.
func NewUserSessionClient(c config) *UserSessionClient {
	return &UserSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersession.Hooks(f(g(h())))`.
func (c *UserSessionClient) Use(hooks ...Hook) {
	c.hooks.UserSession = append(c.hooks.UserSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersession.Intercept(f(g(h())))`.
func (c *UserSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSession = append(c.inters.UserSession, interceptors...)
}

// Create returns a builder for creating a UserSession entity.
func (c *UserSessionClient) Create() *UserSessionCreate {
	mutation := newUserSessionMutation(c.config, OpCreate)
	return &UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSession entities.
func (c *UserSessionClient) CreateBulk(builders ...*UserSessionCreate) *UserSessionCreateBulk {
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSession.
func (c *UserSessionClient) Update() *UserSessionUpdate {
	mutation := newUserSessionMutation(c.config, OpUpdate)
	return &UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSessionClient) UpdateOne(us *UserSession) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSession(us))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSessionClient) UpdateOneID(id string) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSessionID(id))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSession.
func (c *UserSessionClient) Delete() *UserSessionDelete {
	mutation := newUserSessionMutation(c.config, OpDelete)
	return &UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSessionClient) DeleteOne(us *UserSession) *UserSessionDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSessionClient) DeleteOneID(id string) *UserSessionDeleteOne {
	builder := c.Delete().Where(usersession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSessionDeleteOne{builder}
}

// Query returns a query builder for UserSession.
func (c *UserSessionClient) Query() *UserSessionQuery {
	return &UserSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSession},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSession entity by its id.
func (c *UserSessionClient) Get(ctx context.Context, id string) (*UserSession, error) {
	return c.Query().Where(usersession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSessionClient) GetX(ctx context.Context, id string) *UserSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySockets queries the sockets edge of a UserSession.
func (c *UserSessionClient) QuerySockets(us *UserSession) *UserSessionSocketQuery {
	query := (&UserSessionSocketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(usersessionsocket.Table, usersessionsocket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usersession.SocketsTable, usersession.SocketsColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserSession.
func (c *UserSessionClient) QueryUser(us *UserSession) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.UserTable, usersession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a UserSession.
func (c *UserSessionClient) QueryPartner(us *UserSession) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.PartnerTable, usersession.PartnerColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartnerContact queries the partner_contact edge of a UserSession.
func (c *UserSessionClient) QueryPartnerContact(us *UserSession) *PartnerContactQuery {
	query := (&PartnerContactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(partnercontact.Table, partnercontact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.PartnerContactTable, usersession.PartnerContactColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSessionClient) Hooks() []Hook {
	return c.hooks.UserSession
}

// Interceptors returns the client interceptors.
func (c *UserSessionClient) Interceptors() []Interceptor {
	return c.inters.UserSession
}

func (c *UserSessionClient) mutate(ctx context.Context, m *UserSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSession mutation op: %q", m.Op())
	}
}

// UserSessionSocketClient is a client for the UserSessionSocket schema.
type UserSessionSocketClient struct {
	config
}

// NewUserSessionSocketClient returns a client for the UserSessionSocket from the given config.
func NewUserSessionSocketClient(c config) *UserSessionSocketClient {
	return &UserSessionSocketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersessionsocket.Hooks(f(g(h())))`.
func (c *UserSessionSocketClient) Use(hooks ...Hook) {
	c.hooks.UserSessionSocket = append(c.hooks.UserSessionSocket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersessionsocket.Intercept(f(g(h())))`.
func (c *UserSessionSocketClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSessionSocket = append(c.inters.UserSessionSocket, interceptors...)
}

// Create returns a builder for creating a UserSessionSocket entity.
func (c *UserSessionSocketClient) Create() *UserSessionSocketCreate {
	mutation := newUserSessionSocketMutation(c.config, OpCreate)
	return &UserSessionSocketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSessionSocket entities.
func (c *UserSessionSocketClient) CreateBulk(builders ...*UserSessionSocketCreate) *UserSessionSocketCreateBulk {
	return &UserSessionSocketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSessionSocket.
func (c *UserSessionSocketClient) Update() *UserSessionSocketUpdate {
	mutation := newUserSessionSocketMutation(c.config, OpUpdate)
	return &UserSessionSocketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSessionSocketClient) UpdateOne(uss *UserSessionSocket) *UserSessionSocketUpdateOne {
	mutation := newUserSessionSocketMutation(c.config, OpUpdateOne, withUserSessionSocket(uss))
	return &UserSessionSocketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSessionSocketClient) UpdateOneID(id string) *UserSessionSocketUpdateOne {
	mutation := newUserSessionSocketMutation(c.config, OpUpdateOne, withUserSessionSocketID(id))
	return &UserSessionSocketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSessionSocket.
func (c *UserSessionSocketClient) Delete() *UserSessionSocketDelete {
	mutation := newUserSessionSocketMutation(c.config, OpDelete)
	return &UserSessionSocketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSessionSocketClient) DeleteOne(uss *UserSessionSocket) *UserSessionSocketDeleteOne {
	return c.DeleteOneID(uss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSessionSocketClient) DeleteOneID(id string) *UserSessionSocketDeleteOne {
	builder := c.Delete().Where(usersessionsocket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSessionSocketDeleteOne{builder}
}

// Query returns a query builder for UserSessionSocket.
func (c *UserSessionSocketClient) Query() *UserSessionSocketQuery {
	return &UserSessionSocketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSessionSocket},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSessionSocket entity by its id.
func (c *UserSessionSocketClient) Get(ctx context.Context, id string) (*UserSessionSocket, error) {
	return c.Query().Where(usersessionsocket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSessionSocketClient) GetX(ctx context.Context, id string) *UserSessionSocket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a UserSessionSocket.
func (c *UserSessionSocketClient) QuerySession(uss *UserSessionSocket) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersessionsocket.Table, usersessionsocket.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersessionsocket.SessionTable, usersessionsocket.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(uss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSessionSocketClient) Hooks() []Hook {
	return c.hooks.UserSessionSocket
}

// Interceptors returns the client interceptors.
func (c *UserSessionSocketClient) Interceptors() []Interceptor {
	return c.inters.UserSessionSocket
}

func (c *UserSessionSocketClient) mutate(ctx context.Context, m *UserSessionSocketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSessionSocketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSessionSocketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSessionSocketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSessionSocketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSessionSocket mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApiAccess, ApiUser, ApiUserToken, AuditLog, Channel, ChannelMessage,
		ChannelMessageRead, ChannelSub, ContactUs, Document, Estimate,
		EstimateActivity, HomeOwner, InstallationJob, InstallationJobItem,
		InstallationJobProgress, Job, JobActivity, JobAssignmentHistory, JobDocURL,
		JobNote, JobProgressHistory, NotifySetting, OptionList, Partner,
		PartnerActivity, PartnerContact, PartnerService, PartnerServiceCity,
		PartnerServiceState, PartnerTrainingVideo, Payment, PostalCode, Pricing,
		Product, ProductPackage, Survey, SurveyProgress, Token, TrainingCourse,
		TrainingVideo, User, UserActivity, UserAuth, UserSession,
		UserSessionSocket []ent.Hook
	}
	inters struct {
		ApiAccess, ApiUser, ApiUserToken, AuditLog, Channel, ChannelMessage,
		ChannelMessageRead, ChannelSub, ContactUs, Document, Estimate,
		EstimateActivity, HomeOwner, InstallationJob, InstallationJobItem,
		InstallationJobProgress, Job, JobActivity, JobAssignmentHistory, JobDocURL,
		JobNote, JobProgressHistory, NotifySetting, OptionList, Partner,
		PartnerActivity, PartnerContact, PartnerService, PartnerServiceCity,
		PartnerServiceState, PartnerTrainingVideo, Payment, PostalCode, Pricing,
		Product, ProductPackage, Survey, SurveyProgress, Token, TrainingCourse,
		TrainingVideo, User, UserActivity, UserAuth, UserSession,
		UserSessionSocket []ent.Interceptor
	}
)

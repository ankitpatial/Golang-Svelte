// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnercontact"
	"roofix/ent/user"
	"roofix/ent/usersession"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerContactCreate is the builder for creating a PartnerContact entity.
type PartnerContactCreate struct {
	config
	mutation *PartnerContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PartnerContactCreate) SetCreatedAt(t time.Time) *PartnerContactCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PartnerContactCreate) SetNillableCreatedAt(t *time.Time) *PartnerContactCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PartnerContactCreate) SetUpdatedAt(t time.Time) *PartnerContactCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PartnerContactCreate) SetNillableUpdatedAt(t *time.Time) *PartnerContactCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetPartnerID sets the "partner_id" field.
func (pcc *PartnerContactCreate) SetPartnerID(s string) *PartnerContactCreate {
	pcc.mutation.SetPartnerID(s)
	return pcc
}

// SetUserID sets the "user_id" field.
func (pcc *PartnerContactCreate) SetUserID(s string) *PartnerContactCreate {
	pcc.mutation.SetUserID(s)
	return pcc
}

// SetRole sets the "role" field.
func (pcc *PartnerContactCreate) SetRole(ecr enum.PartnerContactRole) *PartnerContactCreate {
	pcc.mutation.SetRole(ecr)
	return pcc
}

// SetType sets the "type" field.
func (pcc *PartnerContactCreate) SetType(ec enum.PartnerContact) *PartnerContactCreate {
	pcc.mutation.SetType(ec)
	return pcc
}

// SetTitle sets the "title" field.
func (pcc *PartnerContactCreate) SetTitle(s string) *PartnerContactCreate {
	pcc.mutation.SetTitle(s)
	return pcc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pcc *PartnerContactCreate) SetNillableTitle(s *string) *PartnerContactCreate {
	if s != nil {
		pcc.SetTitle(*s)
	}
	return pcc
}

// SetDescription sets the "description" field.
func (pcc *PartnerContactCreate) SetDescription(s string) *PartnerContactCreate {
	pcc.mutation.SetDescription(s)
	return pcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcc *PartnerContactCreate) SetNillableDescription(s *string) *PartnerContactCreate {
	if s != nil {
		pcc.SetDescription(*s)
	}
	return pcc
}

// SetInvoicingEmail sets the "invoicing_email" field.
func (pcc *PartnerContactCreate) SetInvoicingEmail(s string) *PartnerContactCreate {
	pcc.mutation.SetInvoicingEmail(s)
	return pcc
}

// SetNillableInvoicingEmail sets the "invoicing_email" field if the given value is not nil.
func (pcc *PartnerContactCreate) SetNillableInvoicingEmail(s *string) *PartnerContactCreate {
	if s != nil {
		pcc.SetInvoicingEmail(*s)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PartnerContactCreate) SetID(s string) *PartnerContactCreate {
	pcc.mutation.SetID(s)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PartnerContactCreate) SetNillableID(s *string) *PartnerContactCreate {
	if s != nil {
		pcc.SetID(*s)
	}
	return pcc
}

// SetUser sets the "user" edge to the User entity.
func (pcc *PartnerContactCreate) SetUser(u *User) *PartnerContactCreate {
	return pcc.SetUserID(u.ID)
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pcc *PartnerContactCreate) SetPartner(p *Partner) *PartnerContactCreate {
	return pcc.SetPartnerID(p.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (pcc *PartnerContactCreate) AddSessionIDs(ids ...string) *PartnerContactCreate {
	pcc.mutation.AddSessionIDs(ids...)
	return pcc
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (pcc *PartnerContactCreate) AddSessions(u ...*UserSession) *PartnerContactCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pcc.AddSessionIDs(ids...)
}

// Mutation returns the PartnerContactMutation object of the builder.
func (pcc *PartnerContactCreate) Mutation() *PartnerContactMutation {
	return pcc.mutation
}

// Save creates the PartnerContact in the database.
func (pcc *PartnerContactCreate) Save(ctx context.Context) (*PartnerContact, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PartnerContactCreate) SaveX(ctx context.Context) *PartnerContact {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PartnerContactCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PartnerContactCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PartnerContactCreate) defaults() {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := partnercontact.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := partnercontact.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := partnercontact.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PartnerContactCreate) check() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnerContact.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PartnerContact.updated_at"`)}
	}
	if _, ok := pcc.mutation.PartnerID(); !ok {
		return &ValidationError{Name: "partner_id", err: errors.New(`ent: missing required field "PartnerContact.partner_id"`)}
	}
	if _, ok := pcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PartnerContact.user_id"`)}
	}
	if _, ok := pcc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "PartnerContact.role"`)}
	}
	if v, ok := pcc.mutation.Role(); ok {
		if err := partnercontact.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.role": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PartnerContact.type"`)}
	}
	if v, ok := pcc.mutation.GetType(); ok {
		if err := partnercontact.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.type": %w`, err)}
		}
	}
	if v, ok := pcc.mutation.Title(); ok {
		if err := partnercontact.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.title": %w`, err)}
		}
	}
	if v, ok := pcc.mutation.Description(); ok {
		if err := partnercontact.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.description": %w`, err)}
		}
	}
	if v, ok := pcc.mutation.ID(); ok {
		if err := partnercontact.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PartnerContact.id": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PartnerContact.user"`)}
	}
	if _, ok := pcc.mutation.PartnerID(); !ok {
		return &ValidationError{Name: "partner", err: errors.New(`ent: missing required edge "PartnerContact.partner"`)}
	}
	return nil
}

func (pcc *PartnerContactCreate) sqlSave(ctx context.Context) (*PartnerContact, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PartnerContact.ID type: %T", _spec.ID.Value)
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PartnerContactCreate) createSpec() (*PartnerContact, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnerContact{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(partnercontact.Table, sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString))
	)
	_spec.OnConflict = pcc.conflict
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(partnercontact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(partnercontact.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.Role(); ok {
		_spec.SetField(partnercontact.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := pcc.mutation.GetType(); ok {
		_spec.SetField(partnercontact.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pcc.mutation.Title(); ok {
		_spec.SetField(partnercontact.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if value, ok := pcc.mutation.Description(); ok {
		_spec.SetField(partnercontact.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := pcc.mutation.InvoicingEmail(); ok {
		_spec.SetField(partnercontact.FieldInvoicingEmail, field.TypeString, value)
		_node.InvoicingEmail = &value
	}
	if nodes := pcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.UserTable,
			Columns: []string{partnercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partnercontact.PartnerTable,
			Columns: []string{partnercontact.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PartnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnercontact.SessionsTable,
			Columns: []string{partnercontact.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerContact.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerContactUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcc *PartnerContactCreate) OnConflict(opts ...sql.ConflictOption) *PartnerContactUpsertOne {
	pcc.conflict = opts
	return &PartnerContactUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PartnerContactCreate) OnConflictColumns(columns ...string) *PartnerContactUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PartnerContactUpsertOne{
		create: pcc,
	}
}

type (
	// PartnerContactUpsertOne is the builder for "upsert"-ing
	//  one PartnerContact node.
	PartnerContactUpsertOne struct {
		create *PartnerContactCreate
	}

	// PartnerContactUpsert is the "OnConflict" setter.
	PartnerContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerContactUpsert) SetUpdatedAt(v time.Time) *PartnerContactUpsert {
	u.Set(partnercontact.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateUpdatedAt() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldUpdatedAt)
	return u
}

// SetPartnerID sets the "partner_id" field.
func (u *PartnerContactUpsert) SetPartnerID(v string) *PartnerContactUpsert {
	u.Set(partnercontact.FieldPartnerID, v)
	return u
}

// UpdatePartnerID sets the "partner_id" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdatePartnerID() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldPartnerID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *PartnerContactUpsert) SetUserID(v string) *PartnerContactUpsert {
	u.Set(partnercontact.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateUserID() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldUserID)
	return u
}

// SetRole sets the "role" field.
func (u *PartnerContactUpsert) SetRole(v enum.PartnerContactRole) *PartnerContactUpsert {
	u.Set(partnercontact.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateRole() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldRole)
	return u
}

// SetType sets the "type" field.
func (u *PartnerContactUpsert) SetType(v enum.PartnerContact) *PartnerContactUpsert {
	u.Set(partnercontact.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateType() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldType)
	return u
}

// SetTitle sets the "title" field.
func (u *PartnerContactUpsert) SetTitle(v string) *PartnerContactUpsert {
	u.Set(partnercontact.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateTitle() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *PartnerContactUpsert) ClearTitle() *PartnerContactUpsert {
	u.SetNull(partnercontact.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *PartnerContactUpsert) SetDescription(v string) *PartnerContactUpsert {
	u.Set(partnercontact.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateDescription() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PartnerContactUpsert) ClearDescription() *PartnerContactUpsert {
	u.SetNull(partnercontact.FieldDescription)
	return u
}

// SetInvoicingEmail sets the "invoicing_email" field.
func (u *PartnerContactUpsert) SetInvoicingEmail(v string) *PartnerContactUpsert {
	u.Set(partnercontact.FieldInvoicingEmail, v)
	return u
}

// UpdateInvoicingEmail sets the "invoicing_email" field to the value that was provided on create.
func (u *PartnerContactUpsert) UpdateInvoicingEmail() *PartnerContactUpsert {
	u.SetExcluded(partnercontact.FieldInvoicingEmail)
	return u
}

// ClearInvoicingEmail clears the value of the "invoicing_email" field.
func (u *PartnerContactUpsert) ClearInvoicingEmail() *PartnerContactUpsert {
	u.SetNull(partnercontact.FieldInvoicingEmail)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PartnerContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partnercontact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerContactUpsertOne) UpdateNewValues() *PartnerContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(partnercontact.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnercontact.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerContact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnerContactUpsertOne) Ignore() *PartnerContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerContactUpsertOne) DoNothing() *PartnerContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerContactCreate.OnConflict
// documentation for more info.
func (u *PartnerContactUpsertOne) Update(set func(*PartnerContactUpsert)) *PartnerContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerContactUpsertOne) SetUpdatedAt(v time.Time) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateUpdatedAt() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPartnerID sets the "partner_id" field.
func (u *PartnerContactUpsertOne) SetPartnerID(v string) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetPartnerID(v)
	})
}

// UpdatePartnerID sets the "partner_id" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdatePartnerID() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdatePartnerID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PartnerContactUpsertOne) SetUserID(v string) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateUserID() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateUserID()
	})
}

// SetRole sets the "role" field.
func (u *PartnerContactUpsertOne) SetRole(v enum.PartnerContactRole) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateRole() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateRole()
	})
}

// SetType sets the "type" field.
func (u *PartnerContactUpsertOne) SetType(v enum.PartnerContact) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateType() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *PartnerContactUpsertOne) SetTitle(v string) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateTitle() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PartnerContactUpsertOne) ClearTitle() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *PartnerContactUpsertOne) SetDescription(v string) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateDescription() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PartnerContactUpsertOne) ClearDescription() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.ClearDescription()
	})
}

// SetInvoicingEmail sets the "invoicing_email" field.
func (u *PartnerContactUpsertOne) SetInvoicingEmail(v string) *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetInvoicingEmail(v)
	})
}

// UpdateInvoicingEmail sets the "invoicing_email" field to the value that was provided on create.
func (u *PartnerContactUpsertOne) UpdateInvoicingEmail() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateInvoicingEmail()
	})
}

// ClearInvoicingEmail clears the value of the "invoicing_email" field.
func (u *PartnerContactUpsertOne) ClearInvoicingEmail() *PartnerContactUpsertOne {
	return u.Update(func(s *PartnerContactUpsert) {
		s.ClearInvoicingEmail()
	})
}

// Exec executes the query.
func (u *PartnerContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnerContactUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PartnerContactUpsertOne.ID is not supported by MySQL driver. Use PartnerContactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnerContactUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnerContactCreateBulk is the builder for creating many PartnerContact entities in bulk.
type PartnerContactCreateBulk struct {
	config
	builders []*PartnerContactCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnerContact entities in the database.
func (pccb *PartnerContactCreateBulk) Save(ctx context.Context) ([]*PartnerContact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PartnerContact, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PartnerContactCreateBulk) SaveX(ctx context.Context) []*PartnerContact {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PartnerContactCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PartnerContactCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerContact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerContactUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pccb *PartnerContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnerContactUpsertBulk {
	pccb.conflict = opts
	return &PartnerContactUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PartnerContactCreateBulk) OnConflictColumns(columns ...string) *PartnerContactUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PartnerContactUpsertBulk{
		create: pccb,
	}
}

// PartnerContactUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnerContact nodes.
type PartnerContactUpsertBulk struct {
	create *PartnerContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnerContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partnercontact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerContactUpsertBulk) UpdateNewValues() *PartnerContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(partnercontact.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnercontact.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerContact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnerContactUpsertBulk) Ignore() *PartnerContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerContactUpsertBulk) DoNothing() *PartnerContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerContactCreateBulk.OnConflict
// documentation for more info.
func (u *PartnerContactUpsertBulk) Update(set func(*PartnerContactUpsert)) *PartnerContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnerContactUpsertBulk) SetUpdatedAt(v time.Time) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateUpdatedAt() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPartnerID sets the "partner_id" field.
func (u *PartnerContactUpsertBulk) SetPartnerID(v string) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetPartnerID(v)
	})
}

// UpdatePartnerID sets the "partner_id" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdatePartnerID() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdatePartnerID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PartnerContactUpsertBulk) SetUserID(v string) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateUserID() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateUserID()
	})
}

// SetRole sets the "role" field.
func (u *PartnerContactUpsertBulk) SetRole(v enum.PartnerContactRole) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateRole() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateRole()
	})
}

// SetType sets the "type" field.
func (u *PartnerContactUpsertBulk) SetType(v enum.PartnerContact) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateType() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *PartnerContactUpsertBulk) SetTitle(v string) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateTitle() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PartnerContactUpsertBulk) ClearTitle() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *PartnerContactUpsertBulk) SetDescription(v string) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateDescription() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PartnerContactUpsertBulk) ClearDescription() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.ClearDescription()
	})
}

// SetInvoicingEmail sets the "invoicing_email" field.
func (u *PartnerContactUpsertBulk) SetInvoicingEmail(v string) *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.SetInvoicingEmail(v)
	})
}

// UpdateInvoicingEmail sets the "invoicing_email" field to the value that was provided on create.
func (u *PartnerContactUpsertBulk) UpdateInvoicingEmail() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.UpdateInvoicingEmail()
	})
}

// ClearInvoicingEmail clears the value of the "invoicing_email" field.
func (u *PartnerContactUpsertBulk) ClearInvoicingEmail() *PartnerContactUpsertBulk {
	return u.Update(func(s *PartnerContactUpsert) {
		s.ClearInvoicingEmail()
	})
}

// Exec executes the query.
func (u *PartnerContactUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnerContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package channelmessage

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldTitle, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldMessage, v))
}

// FromName applies equality check predicate on the "from_name" field. It's identical to FromNameEQ.
func FromName(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldFromName, v))
}

// ToName applies equality check predicate on the "to_name" field. It's identical to ToNameEQ.
func ToName(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldToName, v))
}

// Private applies equality check predicate on the "private" field. It's identical to PrivateEQ.
func Private(v bool) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldPrivate, v))
}

// Unread applies equality check predicate on the "unread" field. It's identical to UnreadEQ.
func Unread(v bool) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldUnread, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContainsFold(FieldTitle, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContainsFold(FieldMessage, v))
}

// FromNameEQ applies the EQ predicate on the "from_name" field.
func FromNameEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldFromName, v))
}

// FromNameNEQ applies the NEQ predicate on the "from_name" field.
func FromNameNEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldFromName, v))
}

// FromNameIn applies the In predicate on the "from_name" field.
func FromNameIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldFromName, vs...))
}

// FromNameNotIn applies the NotIn predicate on the "from_name" field.
func FromNameNotIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldFromName, vs...))
}

// FromNameGT applies the GT predicate on the "from_name" field.
func FromNameGT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldFromName, v))
}

// FromNameGTE applies the GTE predicate on the "from_name" field.
func FromNameGTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldFromName, v))
}

// FromNameLT applies the LT predicate on the "from_name" field.
func FromNameLT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldFromName, v))
}

// FromNameLTE applies the LTE predicate on the "from_name" field.
func FromNameLTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldFromName, v))
}

// FromNameContains applies the Contains predicate on the "from_name" field.
func FromNameContains(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContains(FieldFromName, v))
}

// FromNameHasPrefix applies the HasPrefix predicate on the "from_name" field.
func FromNameHasPrefix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasPrefix(FieldFromName, v))
}

// FromNameHasSuffix applies the HasSuffix predicate on the "from_name" field.
func FromNameHasSuffix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasSuffix(FieldFromName, v))
}

// FromNameEqualFold applies the EqualFold predicate on the "from_name" field.
func FromNameEqualFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEqualFold(FieldFromName, v))
}

// FromNameContainsFold applies the ContainsFold predicate on the "from_name" field.
func FromNameContainsFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContainsFold(FieldFromName, v))
}

// ToNameEQ applies the EQ predicate on the "to_name" field.
func ToNameEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldToName, v))
}

// ToNameNEQ applies the NEQ predicate on the "to_name" field.
func ToNameNEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldToName, v))
}

// ToNameIn applies the In predicate on the "to_name" field.
func ToNameIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldToName, vs...))
}

// ToNameNotIn applies the NotIn predicate on the "to_name" field.
func ToNameNotIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldToName, vs...))
}

// ToNameGT applies the GT predicate on the "to_name" field.
func ToNameGT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldToName, v))
}

// ToNameGTE applies the GTE predicate on the "to_name" field.
func ToNameGTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldToName, v))
}

// ToNameLT applies the LT predicate on the "to_name" field.
func ToNameLT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldToName, v))
}

// ToNameLTE applies the LTE predicate on the "to_name" field.
func ToNameLTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldToName, v))
}

// ToNameContains applies the Contains predicate on the "to_name" field.
func ToNameContains(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContains(FieldToName, v))
}

// ToNameHasPrefix applies the HasPrefix predicate on the "to_name" field.
func ToNameHasPrefix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasPrefix(FieldToName, v))
}

// ToNameHasSuffix applies the HasSuffix predicate on the "to_name" field.
func ToNameHasSuffix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasSuffix(FieldToName, v))
}

// ToNameIsNil applies the IsNil predicate on the "to_name" field.
func ToNameIsNil() predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIsNull(FieldToName))
}

// ToNameNotNil applies the NotNil predicate on the "to_name" field.
func ToNameNotNil() predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotNull(FieldToName))
}

// ToNameEqualFold applies the EqualFold predicate on the "to_name" field.
func ToNameEqualFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEqualFold(FieldToName, v))
}

// ToNameContainsFold applies the ContainsFold predicate on the "to_name" field.
func ToNameContainsFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContainsFold(FieldToName, v))
}

// PrivateEQ applies the EQ predicate on the "private" field.
func PrivateEQ(v bool) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldPrivate, v))
}

// PrivateNEQ applies the NEQ predicate on the "private" field.
func PrivateNEQ(v bool) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldPrivate, v))
}

// UnreadEQ applies the EQ predicate on the "unread" field.
func UnreadEQ(v bool) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldUnread, v))
}

// UnreadNEQ applies the NEQ predicate on the "unread" field.
func UnreadNEQ(v bool) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldUnread, v))
}

// UnreadIsNil applies the IsNil predicate on the "unread" field.
func UnreadIsNil() predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIsNull(FieldUnread))
}

// UnreadNotNil applies the NotNil predicate on the "unread" field.
func UnreadNotNil() predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotNull(FieldUnread))
}

// HasReads applies the HasEdge predicate on the "reads" edge.
func HasReads() predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReadsTable, ReadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReadsWith applies the HasEdge predicate on the "reads" edge with a given conditions (other predicates).
func HasReadsWith(preds ...predicate.ChannelMessageRead) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := newReadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.Channel) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := newChannelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFrom applies the HasEdge predicate on the "from" edge.
func HasFrom() predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromTable, FromColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromWith applies the HasEdge predicate on the "from" edge with a given conditions (other predicates).
func HasFromWith(preds ...predicate.User) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := newFromStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromAPIUser applies the HasEdge predicate on the "from_api_user" edge.
func HasFromAPIUser() predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromAPIUserTable, FromAPIUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromAPIUserWith applies the HasEdge predicate on the "from_api_user" edge with a given conditions (other predicates).
func HasFromAPIUserWith(preds ...predicate.ApiUser) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := newFromAPIUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTo applies the HasEdge predicate on the "to" edge.
func HasTo() predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToTable, ToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToWith applies the HasEdge predicate on the "to" edge with a given conditions (other predicates).
func HasToWith(preds ...predicate.User) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		step := newToStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}

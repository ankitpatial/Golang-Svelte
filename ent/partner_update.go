// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/installationjob"
	"roofix/ent/job"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobnote"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/partnerservice"
	"roofix/ent/partnerservicecity"
	"roofix/ent/partnerservicestate"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/predicate"
	"roofix/ent/survey"
	"roofix/ent/user"
	"roofix/ent/usersession"
	"roofix/pkg/enum"
	"roofix/pkg/model"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerUpdate is the builder for updating Partner entities.
type PartnerUpdate struct {
	config
	hooks     []Hook
	mutation  *PartnerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartnerUpdate builder.
func (pu *PartnerUpdate) Where(ps ...predicate.Partner) *PartnerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PartnerUpdate) SetUpdatedAt(t time.Time) *PartnerUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetExternalID sets the "external_id" field.
func (pu *PartnerUpdate) SetExternalID(s string) *PartnerUpdate {
	pu.mutation.SetExternalID(s)
	return pu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableExternalID(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetExternalID(*s)
	}
	return pu
}

// ClearExternalID clears the value of the "external_id" field.
func (pu *PartnerUpdate) ClearExternalID() *PartnerUpdate {
	pu.mutation.ClearExternalID()
	return pu
}

// SetCreatorID sets the "creator_id" field.
func (pu *PartnerUpdate) SetCreatorID(s string) *PartnerUpdate {
	pu.mutation.SetCreatorID(s)
	return pu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableCreatorID(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetCreatorID(*s)
	}
	return pu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (pu *PartnerUpdate) ClearCreatorID() *PartnerUpdate {
	pu.mutation.ClearCreatorID()
	return pu
}

// SetType sets the "type" field.
func (pu *PartnerUpdate) SetType(e enum.Partner) *PartnerUpdate {
	pu.mutation.SetType(e)
	return pu
}

// SetName sets the "name" field.
func (pu *PartnerUpdate) SetName(s string) *PartnerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetAddress sets the "address" field.
func (pu *PartnerUpdate) SetAddress(s string) *PartnerUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableAddress(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetAddress(*s)
	}
	return pu
}

// ClearAddress clears the value of the "address" field.
func (pu *PartnerUpdate) ClearAddress() *PartnerUpdate {
	pu.mutation.ClearAddress()
	return pu
}

// SetWebsite sets the "website" field.
func (pu *PartnerUpdate) SetWebsite(s string) *PartnerUpdate {
	pu.mutation.SetWebsite(s)
	return pu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableWebsite(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetWebsite(*s)
	}
	return pu
}

// ClearWebsite clears the value of the "website" field.
func (pu *PartnerUpdate) ClearWebsite() *PartnerUpdate {
	pu.mutation.ClearWebsite()
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PartnerUpdate) SetPhone(s string) *PartnerUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillablePhone(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// ClearPhone clears the value of the "phone" field.
func (pu *PartnerUpdate) ClearPhone() *PartnerUpdate {
	pu.mutation.ClearPhone()
	return pu
}

// SetLatitude sets the "latitude" field.
func (pu *PartnerUpdate) SetLatitude(f float64) *PartnerUpdate {
	pu.mutation.ResetLatitude()
	pu.mutation.SetLatitude(f)
	return pu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableLatitude(f *float64) *PartnerUpdate {
	if f != nil {
		pu.SetLatitude(*f)
	}
	return pu
}

// AddLatitude adds f to the "latitude" field.
func (pu *PartnerUpdate) AddLatitude(f float64) *PartnerUpdate {
	pu.mutation.AddLatitude(f)
	return pu
}

// ClearLatitude clears the value of the "latitude" field.
func (pu *PartnerUpdate) ClearLatitude() *PartnerUpdate {
	pu.mutation.ClearLatitude()
	return pu
}

// SetLongitude sets the "longitude" field.
func (pu *PartnerUpdate) SetLongitude(f float64) *PartnerUpdate {
	pu.mutation.ResetLongitude()
	pu.mutation.SetLongitude(f)
	return pu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableLongitude(f *float64) *PartnerUpdate {
	if f != nil {
		pu.SetLongitude(*f)
	}
	return pu
}

// AddLongitude adds f to the "longitude" field.
func (pu *PartnerUpdate) AddLongitude(f float64) *PartnerUpdate {
	pu.mutation.AddLongitude(f)
	return pu
}

// ClearLongitude clears the value of the "longitude" field.
func (pu *PartnerUpdate) ClearLongitude() *PartnerUpdate {
	pu.mutation.ClearLongitude()
	return pu
}

// SetIsNationWide sets the "is_nation_wide" field.
func (pu *PartnerUpdate) SetIsNationWide(b bool) *PartnerUpdate {
	pu.mutation.SetIsNationWide(b)
	return pu
}

// SetNillableIsNationWide sets the "is_nation_wide" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableIsNationWide(b *bool) *PartnerUpdate {
	if b != nil {
		pu.SetIsNationWide(*b)
	}
	return pu
}

// SetCrewCount sets the "crew_count" field.
func (pu *PartnerUpdate) SetCrewCount(u uint16) *PartnerUpdate {
	pu.mutation.ResetCrewCount()
	pu.mutation.SetCrewCount(u)
	return pu
}

// SetNillableCrewCount sets the "crew_count" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableCrewCount(u *uint16) *PartnerUpdate {
	if u != nil {
		pu.SetCrewCount(*u)
	}
	return pu
}

// AddCrewCount adds u to the "crew_count" field.
func (pu *PartnerUpdate) AddCrewCount(u int16) *PartnerUpdate {
	pu.mutation.AddCrewCount(u)
	return pu
}

// SetYearsInBusiness sets the "years_in_business" field.
func (pu *PartnerUpdate) SetYearsInBusiness(i int) *PartnerUpdate {
	pu.mutation.ResetYearsInBusiness()
	pu.mutation.SetYearsInBusiness(i)
	return pu
}

// SetNillableYearsInBusiness sets the "years_in_business" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableYearsInBusiness(i *int) *PartnerUpdate {
	if i != nil {
		pu.SetYearsInBusiness(*i)
	}
	return pu
}

// AddYearsInBusiness adds i to the "years_in_business" field.
func (pu *PartnerUpdate) AddYearsInBusiness(i int) *PartnerUpdate {
	pu.mutation.AddYearsInBusiness(i)
	return pu
}

// ClearYearsInBusiness clears the value of the "years_in_business" field.
func (pu *PartnerUpdate) ClearYearsInBusiness() *PartnerUpdate {
	pu.mutation.ClearYearsInBusiness()
	return pu
}

// SetJobCapacity sets the "job_capacity" field.
func (pu *PartnerUpdate) SetJobCapacity(u uint16) *PartnerUpdate {
	pu.mutation.ResetJobCapacity()
	pu.mutation.SetJobCapacity(u)
	return pu
}

// SetNillableJobCapacity sets the "job_capacity" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableJobCapacity(u *uint16) *PartnerUpdate {
	if u != nil {
		pu.SetJobCapacity(*u)
	}
	return pu
}

// AddJobCapacity adds u to the "job_capacity" field.
func (pu *PartnerUpdate) AddJobCapacity(u int16) *PartnerUpdate {
	pu.mutation.AddJobCapacity(u)
	return pu
}

// SetAsphaltLeadT sets the "asphalt_lead_t" field.
func (pu *PartnerUpdate) SetAsphaltLeadT(s string) *PartnerUpdate {
	pu.mutation.SetAsphaltLeadT(s)
	return pu
}

// SetNillableAsphaltLeadT sets the "asphalt_lead_t" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableAsphaltLeadT(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetAsphaltLeadT(*s)
	}
	return pu
}

// ClearAsphaltLeadT clears the value of the "asphalt_lead_t" field.
func (pu *PartnerUpdate) ClearAsphaltLeadT() *PartnerUpdate {
	pu.mutation.ClearAsphaltLeadT()
	return pu
}

// SetMetalLeadT sets the "metal_lead_t" field.
func (pu *PartnerUpdate) SetMetalLeadT(s string) *PartnerUpdate {
	pu.mutation.SetMetalLeadT(s)
	return pu
}

// SetNillableMetalLeadT sets the "metal_lead_t" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableMetalLeadT(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetMetalLeadT(*s)
	}
	return pu
}

// ClearMetalLeadT clears the value of the "metal_lead_t" field.
func (pu *PartnerUpdate) ClearMetalLeadT() *PartnerUpdate {
	pu.mutation.ClearMetalLeadT()
	return pu
}

// SetTileLeadT sets the "tile_lead_t" field.
func (pu *PartnerUpdate) SetTileLeadT(s string) *PartnerUpdate {
	pu.mutation.SetTileLeadT(s)
	return pu
}

// SetNillableTileLeadT sets the "tile_lead_t" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableTileLeadT(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetTileLeadT(*s)
	}
	return pu
}

// ClearTileLeadT clears the value of the "tile_lead_t" field.
func (pu *PartnerUpdate) ClearTileLeadT() *PartnerUpdate {
	pu.mutation.ClearTileLeadT()
	return pu
}

// SetSetupStepsCompleted sets the "setup_steps_completed" field.
func (pu *PartnerUpdate) SetSetupStepsCompleted(u uint8) *PartnerUpdate {
	pu.mutation.ResetSetupStepsCompleted()
	pu.mutation.SetSetupStepsCompleted(u)
	return pu
}

// SetNillableSetupStepsCompleted sets the "setup_steps_completed" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableSetupStepsCompleted(u *uint8) *PartnerUpdate {
	if u != nil {
		pu.SetSetupStepsCompleted(*u)
	}
	return pu
}

// AddSetupStepsCompleted adds u to the "setup_steps_completed" field.
func (pu *PartnerUpdate) AddSetupStepsCompleted(u int8) *PartnerUpdate {
	pu.mutation.AddSetupStepsCompleted(u)
	return pu
}

// SetSalesVolume sets the "sales_volume" field.
func (pu *PartnerUpdate) SetSalesVolume(i int) *PartnerUpdate {
	pu.mutation.ResetSalesVolume()
	pu.mutation.SetSalesVolume(i)
	return pu
}

// SetNillableSalesVolume sets the "sales_volume" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableSalesVolume(i *int) *PartnerUpdate {
	if i != nil {
		pu.SetSalesVolume(*i)
	}
	return pu
}

// AddSalesVolume adds i to the "sales_volume" field.
func (pu *PartnerUpdate) AddSalesVolume(i int) *PartnerUpdate {
	pu.mutation.AddSalesVolume(i)
	return pu
}

// ClearSalesVolume clears the value of the "sales_volume" field.
func (pu *PartnerUpdate) ClearSalesVolume() *PartnerUpdate {
	pu.mutation.ClearSalesVolume()
	return pu
}

// SetDownPayment sets the "down_payment" field.
func (pu *PartnerUpdate) SetDownPayment(i int) *PartnerUpdate {
	pu.mutation.ResetDownPayment()
	pu.mutation.SetDownPayment(i)
	return pu
}

// SetNillableDownPayment sets the "down_payment" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableDownPayment(i *int) *PartnerUpdate {
	if i != nil {
		pu.SetDownPayment(*i)
	}
	return pu
}

// AddDownPayment adds i to the "down_payment" field.
func (pu *PartnerUpdate) AddDownPayment(i int) *PartnerUpdate {
	pu.mutation.AddDownPayment(i)
	return pu
}

// ClearDownPayment clears the value of the "down_payment" field.
func (pu *PartnerUpdate) ClearDownPayment() *PartnerUpdate {
	pu.mutation.ClearDownPayment()
	return pu
}

// SetPif sets the "pif" field.
func (pu *PartnerUpdate) SetPif(i int) *PartnerUpdate {
	pu.mutation.ResetPif()
	pu.mutation.SetPif(i)
	return pu
}

// SetNillablePif sets the "pif" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillablePif(i *int) *PartnerUpdate {
	if i != nil {
		pu.SetPif(*i)
	}
	return pu
}

// AddPif adds i to the "pif" field.
func (pu *PartnerUpdate) AddPif(i int) *PartnerUpdate {
	pu.mutation.AddPif(i)
	return pu
}

// ClearPif clears the value of the "pif" field.
func (pu *PartnerUpdate) ClearPif() *PartnerUpdate {
	pu.mutation.ClearPif()
	return pu
}

// SetInstallInHouse sets the "install_in_house" field.
func (pu *PartnerUpdate) SetInstallInHouse(b bool) *PartnerUpdate {
	pu.mutation.SetInstallInHouse(b)
	return pu
}

// SetNillableInstallInHouse sets the "install_in_house" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableInstallInHouse(b *bool) *PartnerUpdate {
	if b != nil {
		pu.SetInstallInHouse(*b)
	}
	return pu
}

// ClearInstallInHouse clears the value of the "install_in_house" field.
func (pu *PartnerUpdate) ClearInstallInHouse() *PartnerUpdate {
	pu.mutation.ClearInstallInHouse()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PartnerUpdate) SetStatus(es enum.PartnerStatus) *PartnerUpdate {
	pu.mutation.SetStatus(es)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableStatus(es *enum.PartnerStatus) *PartnerUpdate {
	if es != nil {
		pu.SetStatus(*es)
	}
	return pu
}

// SetEpcStatus sets the "epc_status" field.
func (pu *PartnerUpdate) SetEpcStatus(es enum.EPCStatus) *PartnerUpdate {
	pu.mutation.SetEpcStatus(es)
	return pu
}

// SetNillableEpcStatus sets the "epc_status" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableEpcStatus(es *enum.EPCStatus) *PartnerUpdate {
	if es != nil {
		pu.SetEpcStatus(*es)
	}
	return pu
}

// ClearEpcStatus clears the value of the "epc_status" field.
func (pu *PartnerUpdate) ClearEpcStatus() *PartnerUpdate {
	pu.mutation.ClearEpcStatus()
	return pu
}

// SetMobileAppSettings sets the "mobile_app_settings" field.
func (pu *PartnerUpdate) SetMobileAppSettings(mas model.MobileAppSettings) *PartnerUpdate {
	pu.mutation.SetMobileAppSettings(mas)
	return pu
}

// SetNillableMobileAppSettings sets the "mobile_app_settings" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableMobileAppSettings(mas *model.MobileAppSettings) *PartnerUpdate {
	if mas != nil {
		pu.SetMobileAppSettings(*mas)
	}
	return pu
}

// ClearMobileAppSettings clears the value of the "mobile_app_settings" field.
func (pu *PartnerUpdate) ClearMobileAppSettings() *PartnerUpdate {
	pu.mutation.ClearMobileAppSettings()
	return pu
}

// AddRequestedEstimateIDs adds the "requested_estimates" edge to the Estimate entity by IDs.
func (pu *PartnerUpdate) AddRequestedEstimateIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddRequestedEstimateIDs(ids...)
	return pu
}

// AddRequestedEstimates adds the "requested_estimates" edges to the Estimate entity.
func (pu *PartnerUpdate) AddRequestedEstimates(e ...*Estimate) *PartnerUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddRequestedEstimateIDs(ids...)
}

// AddEstimateHomeOwnerIDs adds the "estimate_home_owners" edge to the HomeOwner entity by IDs.
func (pu *PartnerUpdate) AddEstimateHomeOwnerIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddEstimateHomeOwnerIDs(ids...)
	return pu
}

// AddEstimateHomeOwners adds the "estimate_home_owners" edges to the HomeOwner entity.
func (pu *PartnerUpdate) AddEstimateHomeOwners(h ...*HomeOwner) *PartnerUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pu.AddEstimateHomeOwnerIDs(ids...)
}

// AddRoofingJobIDs adds the "roofing_jobs" edge to the Job entity by IDs.
func (pu *PartnerUpdate) AddRoofingJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddRoofingJobIDs(ids...)
	return pu
}

// AddRoofingJobs adds the "roofing_jobs" edges to the Job entity.
func (pu *PartnerUpdate) AddRoofingJobs(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.AddRoofingJobIDs(ids...)
}

// AddIntegrationJobIDs adds the "integration_jobs" edge to the Job entity by IDs.
func (pu *PartnerUpdate) AddIntegrationJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddIntegrationJobIDs(ids...)
	return pu
}

// AddIntegrationJobs adds the "integration_jobs" edges to the Job entity.
func (pu *PartnerUpdate) AddIntegrationJobs(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.AddIntegrationJobIDs(ids...)
}

// AddEpcJobIDs adds the "epc_jobs" edge to the Job entity by IDs.
func (pu *PartnerUpdate) AddEpcJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddEpcJobIDs(ids...)
	return pu
}

// AddEpcJobs adds the "epc_jobs" edges to the Job entity.
func (pu *PartnerUpdate) AddEpcJobs(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.AddEpcJobIDs(ids...)
}

// AddJobRequestIDs adds the "job_requests" edge to the Job entity by IDs.
func (pu *PartnerUpdate) AddJobRequestIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddJobRequestIDs(ids...)
	return pu
}

// AddJobRequests adds the "job_requests" edges to the Job entity.
func (pu *PartnerUpdate) AddJobRequests(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.AddJobRequestIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the PartnerActivity entity by IDs.
func (pu *PartnerUpdate) AddActivityIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddActivityIDs(ids...)
	return pu
}

// AddActivities adds the "activities" edges to the PartnerActivity entity.
func (pu *PartnerUpdate) AddActivities(p ...*PartnerActivity) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddActivityIDs(ids...)
}

// AddJobAssignmentHistoryIDs adds the "job_assignment_history" edge to the JobAssignmentHistory entity by IDs.
func (pu *PartnerUpdate) AddJobAssignmentHistoryIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddJobAssignmentHistoryIDs(ids...)
	return pu
}

// AddJobAssignmentHistory adds the "job_assignment_history" edges to the JobAssignmentHistory entity.
func (pu *PartnerUpdate) AddJobAssignmentHistory(j ...*JobAssignmentHistory) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.AddJobAssignmentHistoryIDs(ids...)
}

// AddRequestedInstallationJobIDs adds the "requested_installation_jobs" edge to the InstallationJob entity by IDs.
func (pu *PartnerUpdate) AddRequestedInstallationJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddRequestedInstallationJobIDs(ids...)
	return pu
}

// AddRequestedInstallationJobs adds the "requested_installation_jobs" edges to the InstallationJob entity.
func (pu *PartnerUpdate) AddRequestedInstallationJobs(i ...*InstallationJob) *PartnerUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddRequestedInstallationJobIDs(ids...)
}

// AddAssignedInstallationJobIDs adds the "assigned_installation_jobs" edge to the InstallationJob entity by IDs.
func (pu *PartnerUpdate) AddAssignedInstallationJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddAssignedInstallationJobIDs(ids...)
	return pu
}

// AddAssignedInstallationJobs adds the "assigned_installation_jobs" edges to the InstallationJob entity.
func (pu *PartnerUpdate) AddAssignedInstallationJobs(i ...*InstallationJob) *PartnerUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddAssignedInstallationJobIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the User entity by IDs.
func (pu *PartnerUpdate) AddContactIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddContactIDs(ids...)
	return pu
}

// AddContacts adds the "contacts" edges to the User entity.
func (pu *PartnerUpdate) AddContacts(u ...*User) *PartnerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddContactIDs(ids...)
}

// SetCreator sets the "creator" edge to the User entity.
func (pu *PartnerUpdate) SetCreator(u *User) *PartnerUpdate {
	return pu.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (pu *PartnerUpdate) SetCreatorAPIID(id string) *PartnerUpdate {
	pu.mutation.SetCreatorAPIID(id)
	return pu
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (pu *PartnerUpdate) SetNillableCreatorAPIID(id *string) *PartnerUpdate {
	if id != nil {
		pu = pu.SetCreatorAPIID(*id)
	}
	return pu
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (pu *PartnerUpdate) SetCreatorAPI(a *ApiUser) *PartnerUpdate {
	return pu.SetCreatorAPIID(a.ID)
}

// AddServiceIDs adds the "services" edge to the PartnerService entity by IDs.
func (pu *PartnerUpdate) AddServiceIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddServiceIDs(ids...)
	return pu
}

// AddServices adds the "services" edges to the PartnerService entity.
func (pu *PartnerUpdate) AddServices(p ...*PartnerService) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddServiceIDs(ids...)
}

// AddServiceStateIDs adds the "service_states" edge to the PartnerServiceState entity by IDs.
func (pu *PartnerUpdate) AddServiceStateIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddServiceStateIDs(ids...)
	return pu
}

// AddServiceStates adds the "service_states" edges to the PartnerServiceState entity.
func (pu *PartnerUpdate) AddServiceStates(p ...*PartnerServiceState) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddServiceStateIDs(ids...)
}

// AddServiceCityIDs adds the "service_cities" edge to the PartnerServiceCity entity by IDs.
func (pu *PartnerUpdate) AddServiceCityIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddServiceCityIDs(ids...)
	return pu
}

// AddServiceCities adds the "service_cities" edges to the PartnerServiceCity entity.
func (pu *PartnerUpdate) AddServiceCities(p ...*PartnerServiceCity) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddServiceCityIDs(ids...)
}

// AddTrainingVideoIDs adds the "training_videos" edge to the PartnerTrainingVideo entity by IDs.
func (pu *PartnerUpdate) AddTrainingVideoIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddTrainingVideoIDs(ids...)
	return pu
}

// AddTrainingVideos adds the "training_videos" edges to the PartnerTrainingVideo entity.
func (pu *PartnerUpdate) AddTrainingVideos(p ...*PartnerTrainingVideo) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddTrainingVideoIDs(ids...)
}

// AddContactUsRequestIDs adds the "contact_us_requests" edge to the ContactUs entity by IDs.
func (pu *PartnerUpdate) AddContactUsRequestIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddContactUsRequestIDs(ids...)
	return pu
}

// AddContactUsRequests adds the "contact_us_requests" edges to the ContactUs entity.
func (pu *PartnerUpdate) AddContactUsRequests(c ...*ContactUs) *PartnerUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddContactUsRequestIDs(ids...)
}

// AddSurveyIDs adds the "surveys" edge to the Survey entity by IDs.
func (pu *PartnerUpdate) AddSurveyIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddSurveyIDs(ids...)
	return pu
}

// AddSurveys adds the "surveys" edges to the Survey entity.
func (pu *PartnerUpdate) AddSurveys(s ...*Survey) *PartnerUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSurveyIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (pu *PartnerUpdate) AddSessionIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddSessionIDs(ids...)
	return pu
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (pu *PartnerUpdate) AddSessions(u ...*UserSession) *PartnerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddSessionIDs(ids...)
}

// AddJobNoteIDs adds the "job_notes" edge to the JobNote entity by IDs.
func (pu *PartnerUpdate) AddJobNoteIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddJobNoteIDs(ids...)
	return pu
}

// AddJobNotes adds the "job_notes" edges to the JobNote entity.
func (pu *PartnerUpdate) AddJobNotes(j ...*JobNote) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.AddJobNoteIDs(ids...)
}

// AddChannelIDs adds the "channels" edge to the ChannelSub entity by IDs.
func (pu *PartnerUpdate) AddChannelIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddChannelIDs(ids...)
	return pu
}

// AddChannels adds the "channels" edges to the ChannelSub entity.
func (pu *PartnerUpdate) AddChannels(c ...*ChannelSub) *PartnerUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddChannelIDs(ids...)
}

// AddFinanceOptionIDs adds the "finance_options" edge to the OptionList entity by IDs.
func (pu *PartnerUpdate) AddFinanceOptionIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddFinanceOptionIDs(ids...)
	return pu
}

// AddFinanceOptions adds the "finance_options" edges to the OptionList entity.
func (pu *PartnerUpdate) AddFinanceOptions(o ...*OptionList) *PartnerUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddFinanceOptionIDs(ids...)
}

// AddEpcOptionIDs adds the "epc_options" edge to the OptionList entity by IDs.
func (pu *PartnerUpdate) AddEpcOptionIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddEpcOptionIDs(ids...)
	return pu
}

// AddEpcOptions adds the "epc_options" edges to the OptionList entity.
func (pu *PartnerUpdate) AddEpcOptions(o ...*OptionList) *PartnerUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddEpcOptionIDs(ids...)
}

// AddPartnerContactIDs adds the "partner_contacts" edge to the PartnerContact entity by IDs.
func (pu *PartnerUpdate) AddPartnerContactIDs(ids ...string) *PartnerUpdate {
	pu.mutation.AddPartnerContactIDs(ids...)
	return pu
}

// AddPartnerContacts adds the "partner_contacts" edges to the PartnerContact entity.
func (pu *PartnerUpdate) AddPartnerContacts(p ...*PartnerContact) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPartnerContactIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (pu *PartnerUpdate) Mutation() *PartnerMutation {
	return pu.mutation
}

// ClearRequestedEstimates clears all "requested_estimates" edges to the Estimate entity.
func (pu *PartnerUpdate) ClearRequestedEstimates() *PartnerUpdate {
	pu.mutation.ClearRequestedEstimates()
	return pu
}

// RemoveRequestedEstimateIDs removes the "requested_estimates" edge to Estimate entities by IDs.
func (pu *PartnerUpdate) RemoveRequestedEstimateIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveRequestedEstimateIDs(ids...)
	return pu
}

// RemoveRequestedEstimates removes "requested_estimates" edges to Estimate entities.
func (pu *PartnerUpdate) RemoveRequestedEstimates(e ...*Estimate) *PartnerUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveRequestedEstimateIDs(ids...)
}

// ClearEstimateHomeOwners clears all "estimate_home_owners" edges to the HomeOwner entity.
func (pu *PartnerUpdate) ClearEstimateHomeOwners() *PartnerUpdate {
	pu.mutation.ClearEstimateHomeOwners()
	return pu
}

// RemoveEstimateHomeOwnerIDs removes the "estimate_home_owners" edge to HomeOwner entities by IDs.
func (pu *PartnerUpdate) RemoveEstimateHomeOwnerIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveEstimateHomeOwnerIDs(ids...)
	return pu
}

// RemoveEstimateHomeOwners removes "estimate_home_owners" edges to HomeOwner entities.
func (pu *PartnerUpdate) RemoveEstimateHomeOwners(h ...*HomeOwner) *PartnerUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pu.RemoveEstimateHomeOwnerIDs(ids...)
}

// ClearRoofingJobs clears all "roofing_jobs" edges to the Job entity.
func (pu *PartnerUpdate) ClearRoofingJobs() *PartnerUpdate {
	pu.mutation.ClearRoofingJobs()
	return pu
}

// RemoveRoofingJobIDs removes the "roofing_jobs" edge to Job entities by IDs.
func (pu *PartnerUpdate) RemoveRoofingJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveRoofingJobIDs(ids...)
	return pu
}

// RemoveRoofingJobs removes "roofing_jobs" edges to Job entities.
func (pu *PartnerUpdate) RemoveRoofingJobs(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.RemoveRoofingJobIDs(ids...)
}

// ClearIntegrationJobs clears all "integration_jobs" edges to the Job entity.
func (pu *PartnerUpdate) ClearIntegrationJobs() *PartnerUpdate {
	pu.mutation.ClearIntegrationJobs()
	return pu
}

// RemoveIntegrationJobIDs removes the "integration_jobs" edge to Job entities by IDs.
func (pu *PartnerUpdate) RemoveIntegrationJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveIntegrationJobIDs(ids...)
	return pu
}

// RemoveIntegrationJobs removes "integration_jobs" edges to Job entities.
func (pu *PartnerUpdate) RemoveIntegrationJobs(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.RemoveIntegrationJobIDs(ids...)
}

// ClearEpcJobs clears all "epc_jobs" edges to the Job entity.
func (pu *PartnerUpdate) ClearEpcJobs() *PartnerUpdate {
	pu.mutation.ClearEpcJobs()
	return pu
}

// RemoveEpcJobIDs removes the "epc_jobs" edge to Job entities by IDs.
func (pu *PartnerUpdate) RemoveEpcJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveEpcJobIDs(ids...)
	return pu
}

// RemoveEpcJobs removes "epc_jobs" edges to Job entities.
func (pu *PartnerUpdate) RemoveEpcJobs(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.RemoveEpcJobIDs(ids...)
}

// ClearJobRequests clears all "job_requests" edges to the Job entity.
func (pu *PartnerUpdate) ClearJobRequests() *PartnerUpdate {
	pu.mutation.ClearJobRequests()
	return pu
}

// RemoveJobRequestIDs removes the "job_requests" edge to Job entities by IDs.
func (pu *PartnerUpdate) RemoveJobRequestIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveJobRequestIDs(ids...)
	return pu
}

// RemoveJobRequests removes "job_requests" edges to Job entities.
func (pu *PartnerUpdate) RemoveJobRequests(j ...*Job) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.RemoveJobRequestIDs(ids...)
}

// ClearActivities clears all "activities" edges to the PartnerActivity entity.
func (pu *PartnerUpdate) ClearActivities() *PartnerUpdate {
	pu.mutation.ClearActivities()
	return pu
}

// RemoveActivityIDs removes the "activities" edge to PartnerActivity entities by IDs.
func (pu *PartnerUpdate) RemoveActivityIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveActivityIDs(ids...)
	return pu
}

// RemoveActivities removes "activities" edges to PartnerActivity entities.
func (pu *PartnerUpdate) RemoveActivities(p ...*PartnerActivity) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveActivityIDs(ids...)
}

// ClearJobAssignmentHistory clears all "job_assignment_history" edges to the JobAssignmentHistory entity.
func (pu *PartnerUpdate) ClearJobAssignmentHistory() *PartnerUpdate {
	pu.mutation.ClearJobAssignmentHistory()
	return pu
}

// RemoveJobAssignmentHistoryIDs removes the "job_assignment_history" edge to JobAssignmentHistory entities by IDs.
func (pu *PartnerUpdate) RemoveJobAssignmentHistoryIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveJobAssignmentHistoryIDs(ids...)
	return pu
}

// RemoveJobAssignmentHistory removes "job_assignment_history" edges to JobAssignmentHistory entities.
func (pu *PartnerUpdate) RemoveJobAssignmentHistory(j ...*JobAssignmentHistory) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.RemoveJobAssignmentHistoryIDs(ids...)
}

// ClearRequestedInstallationJobs clears all "requested_installation_jobs" edges to the InstallationJob entity.
func (pu *PartnerUpdate) ClearRequestedInstallationJobs() *PartnerUpdate {
	pu.mutation.ClearRequestedInstallationJobs()
	return pu
}

// RemoveRequestedInstallationJobIDs removes the "requested_installation_jobs" edge to InstallationJob entities by IDs.
func (pu *PartnerUpdate) RemoveRequestedInstallationJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveRequestedInstallationJobIDs(ids...)
	return pu
}

// RemoveRequestedInstallationJobs removes "requested_installation_jobs" edges to InstallationJob entities.
func (pu *PartnerUpdate) RemoveRequestedInstallationJobs(i ...*InstallationJob) *PartnerUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveRequestedInstallationJobIDs(ids...)
}

// ClearAssignedInstallationJobs clears all "assigned_installation_jobs" edges to the InstallationJob entity.
func (pu *PartnerUpdate) ClearAssignedInstallationJobs() *PartnerUpdate {
	pu.mutation.ClearAssignedInstallationJobs()
	return pu
}

// RemoveAssignedInstallationJobIDs removes the "assigned_installation_jobs" edge to InstallationJob entities by IDs.
func (pu *PartnerUpdate) RemoveAssignedInstallationJobIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveAssignedInstallationJobIDs(ids...)
	return pu
}

// RemoveAssignedInstallationJobs removes "assigned_installation_jobs" edges to InstallationJob entities.
func (pu *PartnerUpdate) RemoveAssignedInstallationJobs(i ...*InstallationJob) *PartnerUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveAssignedInstallationJobIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the User entity.
func (pu *PartnerUpdate) ClearContacts() *PartnerUpdate {
	pu.mutation.ClearContacts()
	return pu
}

// RemoveContactIDs removes the "contacts" edge to User entities by IDs.
func (pu *PartnerUpdate) RemoveContactIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveContactIDs(ids...)
	return pu
}

// RemoveContacts removes "contacts" edges to User entities.
func (pu *PartnerUpdate) RemoveContacts(u ...*User) *PartnerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveContactIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (pu *PartnerUpdate) ClearCreator() *PartnerUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (pu *PartnerUpdate) ClearCreatorAPI() *PartnerUpdate {
	pu.mutation.ClearCreatorAPI()
	return pu
}

// ClearServices clears all "services" edges to the PartnerService entity.
func (pu *PartnerUpdate) ClearServices() *PartnerUpdate {
	pu.mutation.ClearServices()
	return pu
}

// RemoveServiceIDs removes the "services" edge to PartnerService entities by IDs.
func (pu *PartnerUpdate) RemoveServiceIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveServiceIDs(ids...)
	return pu
}

// RemoveServices removes "services" edges to PartnerService entities.
func (pu *PartnerUpdate) RemoveServices(p ...*PartnerService) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveServiceIDs(ids...)
}

// ClearServiceStates clears all "service_states" edges to the PartnerServiceState entity.
func (pu *PartnerUpdate) ClearServiceStates() *PartnerUpdate {
	pu.mutation.ClearServiceStates()
	return pu
}

// RemoveServiceStateIDs removes the "service_states" edge to PartnerServiceState entities by IDs.
func (pu *PartnerUpdate) RemoveServiceStateIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveServiceStateIDs(ids...)
	return pu
}

// RemoveServiceStates removes "service_states" edges to PartnerServiceState entities.
func (pu *PartnerUpdate) RemoveServiceStates(p ...*PartnerServiceState) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveServiceStateIDs(ids...)
}

// ClearServiceCities clears all "service_cities" edges to the PartnerServiceCity entity.
func (pu *PartnerUpdate) ClearServiceCities() *PartnerUpdate {
	pu.mutation.ClearServiceCities()
	return pu
}

// RemoveServiceCityIDs removes the "service_cities" edge to PartnerServiceCity entities by IDs.
func (pu *PartnerUpdate) RemoveServiceCityIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveServiceCityIDs(ids...)
	return pu
}

// RemoveServiceCities removes "service_cities" edges to PartnerServiceCity entities.
func (pu *PartnerUpdate) RemoveServiceCities(p ...*PartnerServiceCity) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveServiceCityIDs(ids...)
}

// ClearTrainingVideos clears all "training_videos" edges to the PartnerTrainingVideo entity.
func (pu *PartnerUpdate) ClearTrainingVideos() *PartnerUpdate {
	pu.mutation.ClearTrainingVideos()
	return pu
}

// RemoveTrainingVideoIDs removes the "training_videos" edge to PartnerTrainingVideo entities by IDs.
func (pu *PartnerUpdate) RemoveTrainingVideoIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveTrainingVideoIDs(ids...)
	return pu
}

// RemoveTrainingVideos removes "training_videos" edges to PartnerTrainingVideo entities.
func (pu *PartnerUpdate) RemoveTrainingVideos(p ...*PartnerTrainingVideo) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveTrainingVideoIDs(ids...)
}

// ClearContactUsRequests clears all "contact_us_requests" edges to the ContactUs entity.
func (pu *PartnerUpdate) ClearContactUsRequests() *PartnerUpdate {
	pu.mutation.ClearContactUsRequests()
	return pu
}

// RemoveContactUsRequestIDs removes the "contact_us_requests" edge to ContactUs entities by IDs.
func (pu *PartnerUpdate) RemoveContactUsRequestIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveContactUsRequestIDs(ids...)
	return pu
}

// RemoveContactUsRequests removes "contact_us_requests" edges to ContactUs entities.
func (pu *PartnerUpdate) RemoveContactUsRequests(c ...*ContactUs) *PartnerUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveContactUsRequestIDs(ids...)
}

// ClearSurveys clears all "surveys" edges to the Survey entity.
func (pu *PartnerUpdate) ClearSurveys() *PartnerUpdate {
	pu.mutation.ClearSurveys()
	return pu
}

// RemoveSurveyIDs removes the "surveys" edge to Survey entities by IDs.
func (pu *PartnerUpdate) RemoveSurveyIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveSurveyIDs(ids...)
	return pu
}

// RemoveSurveys removes "surveys" edges to Survey entities.
func (pu *PartnerUpdate) RemoveSurveys(s ...*Survey) *PartnerUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSurveyIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (pu *PartnerUpdate) ClearSessions() *PartnerUpdate {
	pu.mutation.ClearSessions()
	return pu
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (pu *PartnerUpdate) RemoveSessionIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveSessionIDs(ids...)
	return pu
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (pu *PartnerUpdate) RemoveSessions(u ...*UserSession) *PartnerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveSessionIDs(ids...)
}

// ClearJobNotes clears all "job_notes" edges to the JobNote entity.
func (pu *PartnerUpdate) ClearJobNotes() *PartnerUpdate {
	pu.mutation.ClearJobNotes()
	return pu
}

// RemoveJobNoteIDs removes the "job_notes" edge to JobNote entities by IDs.
func (pu *PartnerUpdate) RemoveJobNoteIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveJobNoteIDs(ids...)
	return pu
}

// RemoveJobNotes removes "job_notes" edges to JobNote entities.
func (pu *PartnerUpdate) RemoveJobNotes(j ...*JobNote) *PartnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return pu.RemoveJobNoteIDs(ids...)
}

// ClearChannels clears all "channels" edges to the ChannelSub entity.
func (pu *PartnerUpdate) ClearChannels() *PartnerUpdate {
	pu.mutation.ClearChannels()
	return pu
}

// RemoveChannelIDs removes the "channels" edge to ChannelSub entities by IDs.
func (pu *PartnerUpdate) RemoveChannelIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveChannelIDs(ids...)
	return pu
}

// RemoveChannels removes "channels" edges to ChannelSub entities.
func (pu *PartnerUpdate) RemoveChannels(c ...*ChannelSub) *PartnerUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveChannelIDs(ids...)
}

// ClearFinanceOptions clears all "finance_options" edges to the OptionList entity.
func (pu *PartnerUpdate) ClearFinanceOptions() *PartnerUpdate {
	pu.mutation.ClearFinanceOptions()
	return pu
}

// RemoveFinanceOptionIDs removes the "finance_options" edge to OptionList entities by IDs.
func (pu *PartnerUpdate) RemoveFinanceOptionIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveFinanceOptionIDs(ids...)
	return pu
}

// RemoveFinanceOptions removes "finance_options" edges to OptionList entities.
func (pu *PartnerUpdate) RemoveFinanceOptions(o ...*OptionList) *PartnerUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveFinanceOptionIDs(ids...)
}

// ClearEpcOptions clears all "epc_options" edges to the OptionList entity.
func (pu *PartnerUpdate) ClearEpcOptions() *PartnerUpdate {
	pu.mutation.ClearEpcOptions()
	return pu
}

// RemoveEpcOptionIDs removes the "epc_options" edge to OptionList entities by IDs.
func (pu *PartnerUpdate) RemoveEpcOptionIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemoveEpcOptionIDs(ids...)
	return pu
}

// RemoveEpcOptions removes "epc_options" edges to OptionList entities.
func (pu *PartnerUpdate) RemoveEpcOptions(o ...*OptionList) *PartnerUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveEpcOptionIDs(ids...)
}

// ClearPartnerContacts clears all "partner_contacts" edges to the PartnerContact entity.
func (pu *PartnerUpdate) ClearPartnerContacts() *PartnerUpdate {
	pu.mutation.ClearPartnerContacts()
	return pu
}

// RemovePartnerContactIDs removes the "partner_contacts" edge to PartnerContact entities by IDs.
func (pu *PartnerUpdate) RemovePartnerContactIDs(ids ...string) *PartnerUpdate {
	pu.mutation.RemovePartnerContactIDs(ids...)
	return pu
}

// RemovePartnerContacts removes "partner_contacts" edges to PartnerContact entities.
func (pu *PartnerUpdate) RemovePartnerContacts(p ...*PartnerContact) *PartnerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePartnerContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartnerUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartnerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartnerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PartnerUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := partner.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartnerUpdate) check() error {
	if v, ok := pu.mutation.ExternalID(); ok {
		if err := partner.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Partner.external_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.CreatorID(); ok {
		if err := partner.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Partner.creator_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := partner.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Partner.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := partner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Partner.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Phone(); ok {
		if err := partner.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Partner.phone": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := partner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Partner.status": %w`, err)}
		}
	}
	if v, ok := pu.mutation.EpcStatus(); ok {
		if err := partner.EpcStatusValidator(v); err != nil {
			return &ValidationError{Name: "epc_status", err: fmt.Errorf(`ent: validator failed for field "Partner.epc_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PartnerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PartnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(partner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ExternalID(); ok {
		_spec.SetField(partner.FieldExternalID, field.TypeString, value)
	}
	if pu.mutation.ExternalIDCleared() {
		_spec.ClearField(partner.FieldExternalID, field.TypeString)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(partner.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.SetField(partner.FieldAddress, field.TypeString, value)
	}
	if pu.mutation.AddressCleared() {
		_spec.ClearField(partner.FieldAddress, field.TypeString)
	}
	if value, ok := pu.mutation.Website(); ok {
		_spec.SetField(partner.FieldWebsite, field.TypeString, value)
	}
	if pu.mutation.WebsiteCleared() {
		_spec.ClearField(partner.FieldWebsite, field.TypeString)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(partner.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.PhoneCleared() {
		_spec.ClearField(partner.FieldPhone, field.TypeString)
	}
	if value, ok := pu.mutation.Latitude(); ok {
		_spec.SetField(partner.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedLatitude(); ok {
		_spec.AddField(partner.FieldLatitude, field.TypeFloat64, value)
	}
	if pu.mutation.LatitudeCleared() {
		_spec.ClearField(partner.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Longitude(); ok {
		_spec.SetField(partner.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedLongitude(); ok {
		_spec.AddField(partner.FieldLongitude, field.TypeFloat64, value)
	}
	if pu.mutation.LongitudeCleared() {
		_spec.ClearField(partner.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := pu.mutation.IsNationWide(); ok {
		_spec.SetField(partner.FieldIsNationWide, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CrewCount(); ok {
		_spec.SetField(partner.FieldCrewCount, field.TypeUint16, value)
	}
	if value, ok := pu.mutation.AddedCrewCount(); ok {
		_spec.AddField(partner.FieldCrewCount, field.TypeUint16, value)
	}
	if value, ok := pu.mutation.YearsInBusiness(); ok {
		_spec.SetField(partner.FieldYearsInBusiness, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedYearsInBusiness(); ok {
		_spec.AddField(partner.FieldYearsInBusiness, field.TypeInt, value)
	}
	if pu.mutation.YearsInBusinessCleared() {
		_spec.ClearField(partner.FieldYearsInBusiness, field.TypeInt)
	}
	if value, ok := pu.mutation.JobCapacity(); ok {
		_spec.SetField(partner.FieldJobCapacity, field.TypeUint16, value)
	}
	if value, ok := pu.mutation.AddedJobCapacity(); ok {
		_spec.AddField(partner.FieldJobCapacity, field.TypeUint16, value)
	}
	if value, ok := pu.mutation.AsphaltLeadT(); ok {
		_spec.SetField(partner.FieldAsphaltLeadT, field.TypeString, value)
	}
	if pu.mutation.AsphaltLeadTCleared() {
		_spec.ClearField(partner.FieldAsphaltLeadT, field.TypeString)
	}
	if value, ok := pu.mutation.MetalLeadT(); ok {
		_spec.SetField(partner.FieldMetalLeadT, field.TypeString, value)
	}
	if pu.mutation.MetalLeadTCleared() {
		_spec.ClearField(partner.FieldMetalLeadT, field.TypeString)
	}
	if value, ok := pu.mutation.TileLeadT(); ok {
		_spec.SetField(partner.FieldTileLeadT, field.TypeString, value)
	}
	if pu.mutation.TileLeadTCleared() {
		_spec.ClearField(partner.FieldTileLeadT, field.TypeString)
	}
	if value, ok := pu.mutation.SetupStepsCompleted(); ok {
		_spec.SetField(partner.FieldSetupStepsCompleted, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedSetupStepsCompleted(); ok {
		_spec.AddField(partner.FieldSetupStepsCompleted, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.SalesVolume(); ok {
		_spec.SetField(partner.FieldSalesVolume, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSalesVolume(); ok {
		_spec.AddField(partner.FieldSalesVolume, field.TypeInt, value)
	}
	if pu.mutation.SalesVolumeCleared() {
		_spec.ClearField(partner.FieldSalesVolume, field.TypeInt)
	}
	if value, ok := pu.mutation.DownPayment(); ok {
		_spec.SetField(partner.FieldDownPayment, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDownPayment(); ok {
		_spec.AddField(partner.FieldDownPayment, field.TypeInt, value)
	}
	if pu.mutation.DownPaymentCleared() {
		_spec.ClearField(partner.FieldDownPayment, field.TypeInt)
	}
	if value, ok := pu.mutation.Pif(); ok {
		_spec.SetField(partner.FieldPif, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPif(); ok {
		_spec.AddField(partner.FieldPif, field.TypeInt, value)
	}
	if pu.mutation.PifCleared() {
		_spec.ClearField(partner.FieldPif, field.TypeInt)
	}
	if value, ok := pu.mutation.InstallInHouse(); ok {
		_spec.SetField(partner.FieldInstallInHouse, field.TypeBool, value)
	}
	if pu.mutation.InstallInHouseCleared() {
		_spec.ClearField(partner.FieldInstallInHouse, field.TypeBool)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(partner.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.EpcStatus(); ok {
		_spec.SetField(partner.FieldEpcStatus, field.TypeEnum, value)
	}
	if pu.mutation.EpcStatusCleared() {
		_spec.ClearField(partner.FieldEpcStatus, field.TypeEnum)
	}
	if value, ok := pu.mutation.MobileAppSettings(); ok {
		_spec.SetField(partner.FieldMobileAppSettings, field.TypeJSON, value)
	}
	if pu.mutation.MobileAppSettingsCleared() {
		_spec.ClearField(partner.FieldMobileAppSettings, field.TypeJSON)
	}
	if pu.mutation.RequestedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRequestedEstimatesIDs(); len(nodes) > 0 && !pu.mutation.RequestedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RequestedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EstimateHomeOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEstimateHomeOwnersIDs(); len(nodes) > 0 && !pu.mutation.EstimateHomeOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EstimateHomeOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RoofingJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRoofingJobsIDs(); len(nodes) > 0 && !pu.mutation.RoofingJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoofingJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.IntegrationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedIntegrationJobsIDs(); len(nodes) > 0 && !pu.mutation.IntegrationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.IntegrationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EpcJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEpcJobsIDs(); len(nodes) > 0 && !pu.mutation.EpcJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EpcJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.JobRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedJobRequestsIDs(); len(nodes) > 0 && !pu.mutation.JobRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.JobRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !pu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.JobAssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedJobAssignmentHistoryIDs(); len(nodes) > 0 && !pu.mutation.JobAssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.JobAssignmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RequestedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRequestedInstallationJobsIDs(); len(nodes) > 0 && !pu.mutation.RequestedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RequestedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AssignedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAssignedInstallationJobsIDs(); len(nodes) > 0 && !pu.mutation.AssignedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AssignedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &PartnerContactCreate{config: pu.config, mutation: newPartnerContactMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !pu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: pu.config, mutation: newPartnerContactMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: pu.config, mutation: newPartnerContactMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partner.CreatorTable,
			Columns: []string{partner.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partner.CreatorTable,
			Columns: []string{partner.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partner.CreatorAPITable,
			Columns: []string{partner.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partner.CreatorAPITable,
			Columns: []string{partner.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !pu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ServiceStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServiceStatesIDs(); len(nodes) > 0 && !pu.mutation.ServiceStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServiceStatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ServiceCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServiceCitiesIDs(); len(nodes) > 0 && !pu.mutation.ServiceCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServiceCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTrainingVideosIDs(); len(nodes) > 0 && !pu.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedContactUsRequestsIDs(); len(nodes) > 0 && !pu.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContactUsRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSurveysIDs(); len(nodes) > 0 && !pu.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !pu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedJobNotesIDs(); len(nodes) > 0 && !pu.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.JobNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !pu.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFinanceOptionsIDs(); len(nodes) > 0 && !pu.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FinanceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEpcOptionsIDs(); len(nodes) > 0 && !pu.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EpcOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartnerContactsIDs(); len(nodes) > 0 && !pu.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartnerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PartnerUpdateOne is the builder for updating a single Partner entity.
type PartnerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartnerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PartnerUpdateOne) SetUpdatedAt(t time.Time) *PartnerUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetExternalID sets the "external_id" field.
func (puo *PartnerUpdateOne) SetExternalID(s string) *PartnerUpdateOne {
	puo.mutation.SetExternalID(s)
	return puo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableExternalID(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetExternalID(*s)
	}
	return puo
}

// ClearExternalID clears the value of the "external_id" field.
func (puo *PartnerUpdateOne) ClearExternalID() *PartnerUpdateOne {
	puo.mutation.ClearExternalID()
	return puo
}

// SetCreatorID sets the "creator_id" field.
func (puo *PartnerUpdateOne) SetCreatorID(s string) *PartnerUpdateOne {
	puo.mutation.SetCreatorID(s)
	return puo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableCreatorID(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetCreatorID(*s)
	}
	return puo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (puo *PartnerUpdateOne) ClearCreatorID() *PartnerUpdateOne {
	puo.mutation.ClearCreatorID()
	return puo
}

// SetType sets the "type" field.
func (puo *PartnerUpdateOne) SetType(e enum.Partner) *PartnerUpdateOne {
	puo.mutation.SetType(e)
	return puo
}

// SetName sets the "name" field.
func (puo *PartnerUpdateOne) SetName(s string) *PartnerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetAddress sets the "address" field.
func (puo *PartnerUpdateOne) SetAddress(s string) *PartnerUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableAddress(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetAddress(*s)
	}
	return puo
}

// ClearAddress clears the value of the "address" field.
func (puo *PartnerUpdateOne) ClearAddress() *PartnerUpdateOne {
	puo.mutation.ClearAddress()
	return puo
}

// SetWebsite sets the "website" field.
func (puo *PartnerUpdateOne) SetWebsite(s string) *PartnerUpdateOne {
	puo.mutation.SetWebsite(s)
	return puo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableWebsite(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetWebsite(*s)
	}
	return puo
}

// ClearWebsite clears the value of the "website" field.
func (puo *PartnerUpdateOne) ClearWebsite() *PartnerUpdateOne {
	puo.mutation.ClearWebsite()
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PartnerUpdateOne) SetPhone(s string) *PartnerUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillablePhone(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// ClearPhone clears the value of the "phone" field.
func (puo *PartnerUpdateOne) ClearPhone() *PartnerUpdateOne {
	puo.mutation.ClearPhone()
	return puo
}

// SetLatitude sets the "latitude" field.
func (puo *PartnerUpdateOne) SetLatitude(f float64) *PartnerUpdateOne {
	puo.mutation.ResetLatitude()
	puo.mutation.SetLatitude(f)
	return puo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableLatitude(f *float64) *PartnerUpdateOne {
	if f != nil {
		puo.SetLatitude(*f)
	}
	return puo
}

// AddLatitude adds f to the "latitude" field.
func (puo *PartnerUpdateOne) AddLatitude(f float64) *PartnerUpdateOne {
	puo.mutation.AddLatitude(f)
	return puo
}

// ClearLatitude clears the value of the "latitude" field.
func (puo *PartnerUpdateOne) ClearLatitude() *PartnerUpdateOne {
	puo.mutation.ClearLatitude()
	return puo
}

// SetLongitude sets the "longitude" field.
func (puo *PartnerUpdateOne) SetLongitude(f float64) *PartnerUpdateOne {
	puo.mutation.ResetLongitude()
	puo.mutation.SetLongitude(f)
	return puo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableLongitude(f *float64) *PartnerUpdateOne {
	if f != nil {
		puo.SetLongitude(*f)
	}
	return puo
}

// AddLongitude adds f to the "longitude" field.
func (puo *PartnerUpdateOne) AddLongitude(f float64) *PartnerUpdateOne {
	puo.mutation.AddLongitude(f)
	return puo
}

// ClearLongitude clears the value of the "longitude" field.
func (puo *PartnerUpdateOne) ClearLongitude() *PartnerUpdateOne {
	puo.mutation.ClearLongitude()
	return puo
}

// SetIsNationWide sets the "is_nation_wide" field.
func (puo *PartnerUpdateOne) SetIsNationWide(b bool) *PartnerUpdateOne {
	puo.mutation.SetIsNationWide(b)
	return puo
}

// SetNillableIsNationWide sets the "is_nation_wide" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableIsNationWide(b *bool) *PartnerUpdateOne {
	if b != nil {
		puo.SetIsNationWide(*b)
	}
	return puo
}

// SetCrewCount sets the "crew_count" field.
func (puo *PartnerUpdateOne) SetCrewCount(u uint16) *PartnerUpdateOne {
	puo.mutation.ResetCrewCount()
	puo.mutation.SetCrewCount(u)
	return puo
}

// SetNillableCrewCount sets the "crew_count" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableCrewCount(u *uint16) *PartnerUpdateOne {
	if u != nil {
		puo.SetCrewCount(*u)
	}
	return puo
}

// AddCrewCount adds u to the "crew_count" field.
func (puo *PartnerUpdateOne) AddCrewCount(u int16) *PartnerUpdateOne {
	puo.mutation.AddCrewCount(u)
	return puo
}

// SetYearsInBusiness sets the "years_in_business" field.
func (puo *PartnerUpdateOne) SetYearsInBusiness(i int) *PartnerUpdateOne {
	puo.mutation.ResetYearsInBusiness()
	puo.mutation.SetYearsInBusiness(i)
	return puo
}

// SetNillableYearsInBusiness sets the "years_in_business" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableYearsInBusiness(i *int) *PartnerUpdateOne {
	if i != nil {
		puo.SetYearsInBusiness(*i)
	}
	return puo
}

// AddYearsInBusiness adds i to the "years_in_business" field.
func (puo *PartnerUpdateOne) AddYearsInBusiness(i int) *PartnerUpdateOne {
	puo.mutation.AddYearsInBusiness(i)
	return puo
}

// ClearYearsInBusiness clears the value of the "years_in_business" field.
func (puo *PartnerUpdateOne) ClearYearsInBusiness() *PartnerUpdateOne {
	puo.mutation.ClearYearsInBusiness()
	return puo
}

// SetJobCapacity sets the "job_capacity" field.
func (puo *PartnerUpdateOne) SetJobCapacity(u uint16) *PartnerUpdateOne {
	puo.mutation.ResetJobCapacity()
	puo.mutation.SetJobCapacity(u)
	return puo
}

// SetNillableJobCapacity sets the "job_capacity" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableJobCapacity(u *uint16) *PartnerUpdateOne {
	if u != nil {
		puo.SetJobCapacity(*u)
	}
	return puo
}

// AddJobCapacity adds u to the "job_capacity" field.
func (puo *PartnerUpdateOne) AddJobCapacity(u int16) *PartnerUpdateOne {
	puo.mutation.AddJobCapacity(u)
	return puo
}

// SetAsphaltLeadT sets the "asphalt_lead_t" field.
func (puo *PartnerUpdateOne) SetAsphaltLeadT(s string) *PartnerUpdateOne {
	puo.mutation.SetAsphaltLeadT(s)
	return puo
}

// SetNillableAsphaltLeadT sets the "asphalt_lead_t" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableAsphaltLeadT(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetAsphaltLeadT(*s)
	}
	return puo
}

// ClearAsphaltLeadT clears the value of the "asphalt_lead_t" field.
func (puo *PartnerUpdateOne) ClearAsphaltLeadT() *PartnerUpdateOne {
	puo.mutation.ClearAsphaltLeadT()
	return puo
}

// SetMetalLeadT sets the "metal_lead_t" field.
func (puo *PartnerUpdateOne) SetMetalLeadT(s string) *PartnerUpdateOne {
	puo.mutation.SetMetalLeadT(s)
	return puo
}

// SetNillableMetalLeadT sets the "metal_lead_t" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableMetalLeadT(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetMetalLeadT(*s)
	}
	return puo
}

// ClearMetalLeadT clears the value of the "metal_lead_t" field.
func (puo *PartnerUpdateOne) ClearMetalLeadT() *PartnerUpdateOne {
	puo.mutation.ClearMetalLeadT()
	return puo
}

// SetTileLeadT sets the "tile_lead_t" field.
func (puo *PartnerUpdateOne) SetTileLeadT(s string) *PartnerUpdateOne {
	puo.mutation.SetTileLeadT(s)
	return puo
}

// SetNillableTileLeadT sets the "tile_lead_t" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableTileLeadT(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetTileLeadT(*s)
	}
	return puo
}

// ClearTileLeadT clears the value of the "tile_lead_t" field.
func (puo *PartnerUpdateOne) ClearTileLeadT() *PartnerUpdateOne {
	puo.mutation.ClearTileLeadT()
	return puo
}

// SetSetupStepsCompleted sets the "setup_steps_completed" field.
func (puo *PartnerUpdateOne) SetSetupStepsCompleted(u uint8) *PartnerUpdateOne {
	puo.mutation.ResetSetupStepsCompleted()
	puo.mutation.SetSetupStepsCompleted(u)
	return puo
}

// SetNillableSetupStepsCompleted sets the "setup_steps_completed" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableSetupStepsCompleted(u *uint8) *PartnerUpdateOne {
	if u != nil {
		puo.SetSetupStepsCompleted(*u)
	}
	return puo
}

// AddSetupStepsCompleted adds u to the "setup_steps_completed" field.
func (puo *PartnerUpdateOne) AddSetupStepsCompleted(u int8) *PartnerUpdateOne {
	puo.mutation.AddSetupStepsCompleted(u)
	return puo
}

// SetSalesVolume sets the "sales_volume" field.
func (puo *PartnerUpdateOne) SetSalesVolume(i int) *PartnerUpdateOne {
	puo.mutation.ResetSalesVolume()
	puo.mutation.SetSalesVolume(i)
	return puo
}

// SetNillableSalesVolume sets the "sales_volume" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableSalesVolume(i *int) *PartnerUpdateOne {
	if i != nil {
		puo.SetSalesVolume(*i)
	}
	return puo
}

// AddSalesVolume adds i to the "sales_volume" field.
func (puo *PartnerUpdateOne) AddSalesVolume(i int) *PartnerUpdateOne {
	puo.mutation.AddSalesVolume(i)
	return puo
}

// ClearSalesVolume clears the value of the "sales_volume" field.
func (puo *PartnerUpdateOne) ClearSalesVolume() *PartnerUpdateOne {
	puo.mutation.ClearSalesVolume()
	return puo
}

// SetDownPayment sets the "down_payment" field.
func (puo *PartnerUpdateOne) SetDownPayment(i int) *PartnerUpdateOne {
	puo.mutation.ResetDownPayment()
	puo.mutation.SetDownPayment(i)
	return puo
}

// SetNillableDownPayment sets the "down_payment" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableDownPayment(i *int) *PartnerUpdateOne {
	if i != nil {
		puo.SetDownPayment(*i)
	}
	return puo
}

// AddDownPayment adds i to the "down_payment" field.
func (puo *PartnerUpdateOne) AddDownPayment(i int) *PartnerUpdateOne {
	puo.mutation.AddDownPayment(i)
	return puo
}

// ClearDownPayment clears the value of the "down_payment" field.
func (puo *PartnerUpdateOne) ClearDownPayment() *PartnerUpdateOne {
	puo.mutation.ClearDownPayment()
	return puo
}

// SetPif sets the "pif" field.
func (puo *PartnerUpdateOne) SetPif(i int) *PartnerUpdateOne {
	puo.mutation.ResetPif()
	puo.mutation.SetPif(i)
	return puo
}

// SetNillablePif sets the "pif" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillablePif(i *int) *PartnerUpdateOne {
	if i != nil {
		puo.SetPif(*i)
	}
	return puo
}

// AddPif adds i to the "pif" field.
func (puo *PartnerUpdateOne) AddPif(i int) *PartnerUpdateOne {
	puo.mutation.AddPif(i)
	return puo
}

// ClearPif clears the value of the "pif" field.
func (puo *PartnerUpdateOne) ClearPif() *PartnerUpdateOne {
	puo.mutation.ClearPif()
	return puo
}

// SetInstallInHouse sets the "install_in_house" field.
func (puo *PartnerUpdateOne) SetInstallInHouse(b bool) *PartnerUpdateOne {
	puo.mutation.SetInstallInHouse(b)
	return puo
}

// SetNillableInstallInHouse sets the "install_in_house" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableInstallInHouse(b *bool) *PartnerUpdateOne {
	if b != nil {
		puo.SetInstallInHouse(*b)
	}
	return puo
}

// ClearInstallInHouse clears the value of the "install_in_house" field.
func (puo *PartnerUpdateOne) ClearInstallInHouse() *PartnerUpdateOne {
	puo.mutation.ClearInstallInHouse()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PartnerUpdateOne) SetStatus(es enum.PartnerStatus) *PartnerUpdateOne {
	puo.mutation.SetStatus(es)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableStatus(es *enum.PartnerStatus) *PartnerUpdateOne {
	if es != nil {
		puo.SetStatus(*es)
	}
	return puo
}

// SetEpcStatus sets the "epc_status" field.
func (puo *PartnerUpdateOne) SetEpcStatus(es enum.EPCStatus) *PartnerUpdateOne {
	puo.mutation.SetEpcStatus(es)
	return puo
}

// SetNillableEpcStatus sets the "epc_status" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableEpcStatus(es *enum.EPCStatus) *PartnerUpdateOne {
	if es != nil {
		puo.SetEpcStatus(*es)
	}
	return puo
}

// ClearEpcStatus clears the value of the "epc_status" field.
func (puo *PartnerUpdateOne) ClearEpcStatus() *PartnerUpdateOne {
	puo.mutation.ClearEpcStatus()
	return puo
}

// SetMobileAppSettings sets the "mobile_app_settings" field.
func (puo *PartnerUpdateOne) SetMobileAppSettings(mas model.MobileAppSettings) *PartnerUpdateOne {
	puo.mutation.SetMobileAppSettings(mas)
	return puo
}

// SetNillableMobileAppSettings sets the "mobile_app_settings" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableMobileAppSettings(mas *model.MobileAppSettings) *PartnerUpdateOne {
	if mas != nil {
		puo.SetMobileAppSettings(*mas)
	}
	return puo
}

// ClearMobileAppSettings clears the value of the "mobile_app_settings" field.
func (puo *PartnerUpdateOne) ClearMobileAppSettings() *PartnerUpdateOne {
	puo.mutation.ClearMobileAppSettings()
	return puo
}

// AddRequestedEstimateIDs adds the "requested_estimates" edge to the Estimate entity by IDs.
func (puo *PartnerUpdateOne) AddRequestedEstimateIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddRequestedEstimateIDs(ids...)
	return puo
}

// AddRequestedEstimates adds the "requested_estimates" edges to the Estimate entity.
func (puo *PartnerUpdateOne) AddRequestedEstimates(e ...*Estimate) *PartnerUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddRequestedEstimateIDs(ids...)
}

// AddEstimateHomeOwnerIDs adds the "estimate_home_owners" edge to the HomeOwner entity by IDs.
func (puo *PartnerUpdateOne) AddEstimateHomeOwnerIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddEstimateHomeOwnerIDs(ids...)
	return puo
}

// AddEstimateHomeOwners adds the "estimate_home_owners" edges to the HomeOwner entity.
func (puo *PartnerUpdateOne) AddEstimateHomeOwners(h ...*HomeOwner) *PartnerUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return puo.AddEstimateHomeOwnerIDs(ids...)
}

// AddRoofingJobIDs adds the "roofing_jobs" edge to the Job entity by IDs.
func (puo *PartnerUpdateOne) AddRoofingJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddRoofingJobIDs(ids...)
	return puo
}

// AddRoofingJobs adds the "roofing_jobs" edges to the Job entity.
func (puo *PartnerUpdateOne) AddRoofingJobs(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.AddRoofingJobIDs(ids...)
}

// AddIntegrationJobIDs adds the "integration_jobs" edge to the Job entity by IDs.
func (puo *PartnerUpdateOne) AddIntegrationJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddIntegrationJobIDs(ids...)
	return puo
}

// AddIntegrationJobs adds the "integration_jobs" edges to the Job entity.
func (puo *PartnerUpdateOne) AddIntegrationJobs(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.AddIntegrationJobIDs(ids...)
}

// AddEpcJobIDs adds the "epc_jobs" edge to the Job entity by IDs.
func (puo *PartnerUpdateOne) AddEpcJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddEpcJobIDs(ids...)
	return puo
}

// AddEpcJobs adds the "epc_jobs" edges to the Job entity.
func (puo *PartnerUpdateOne) AddEpcJobs(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.AddEpcJobIDs(ids...)
}

// AddJobRequestIDs adds the "job_requests" edge to the Job entity by IDs.
func (puo *PartnerUpdateOne) AddJobRequestIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddJobRequestIDs(ids...)
	return puo
}

// AddJobRequests adds the "job_requests" edges to the Job entity.
func (puo *PartnerUpdateOne) AddJobRequests(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.AddJobRequestIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the PartnerActivity entity by IDs.
func (puo *PartnerUpdateOne) AddActivityIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddActivityIDs(ids...)
	return puo
}

// AddActivities adds the "activities" edges to the PartnerActivity entity.
func (puo *PartnerUpdateOne) AddActivities(p ...*PartnerActivity) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddActivityIDs(ids...)
}

// AddJobAssignmentHistoryIDs adds the "job_assignment_history" edge to the JobAssignmentHistory entity by IDs.
func (puo *PartnerUpdateOne) AddJobAssignmentHistoryIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddJobAssignmentHistoryIDs(ids...)
	return puo
}

// AddJobAssignmentHistory adds the "job_assignment_history" edges to the JobAssignmentHistory entity.
func (puo *PartnerUpdateOne) AddJobAssignmentHistory(j ...*JobAssignmentHistory) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.AddJobAssignmentHistoryIDs(ids...)
}

// AddRequestedInstallationJobIDs adds the "requested_installation_jobs" edge to the InstallationJob entity by IDs.
func (puo *PartnerUpdateOne) AddRequestedInstallationJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddRequestedInstallationJobIDs(ids...)
	return puo
}

// AddRequestedInstallationJobs adds the "requested_installation_jobs" edges to the InstallationJob entity.
func (puo *PartnerUpdateOne) AddRequestedInstallationJobs(i ...*InstallationJob) *PartnerUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddRequestedInstallationJobIDs(ids...)
}

// AddAssignedInstallationJobIDs adds the "assigned_installation_jobs" edge to the InstallationJob entity by IDs.
func (puo *PartnerUpdateOne) AddAssignedInstallationJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddAssignedInstallationJobIDs(ids...)
	return puo
}

// AddAssignedInstallationJobs adds the "assigned_installation_jobs" edges to the InstallationJob entity.
func (puo *PartnerUpdateOne) AddAssignedInstallationJobs(i ...*InstallationJob) *PartnerUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddAssignedInstallationJobIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the User entity by IDs.
func (puo *PartnerUpdateOne) AddContactIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddContactIDs(ids...)
	return puo
}

// AddContacts adds the "contacts" edges to the User entity.
func (puo *PartnerUpdateOne) AddContacts(u ...*User) *PartnerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddContactIDs(ids...)
}

// SetCreator sets the "creator" edge to the User entity.
func (puo *PartnerUpdateOne) SetCreator(u *User) *PartnerUpdateOne {
	return puo.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (puo *PartnerUpdateOne) SetCreatorAPIID(id string) *PartnerUpdateOne {
	puo.mutation.SetCreatorAPIID(id)
	return puo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableCreatorAPIID(id *string) *PartnerUpdateOne {
	if id != nil {
		puo = puo.SetCreatorAPIID(*id)
	}
	return puo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (puo *PartnerUpdateOne) SetCreatorAPI(a *ApiUser) *PartnerUpdateOne {
	return puo.SetCreatorAPIID(a.ID)
}

// AddServiceIDs adds the "services" edge to the PartnerService entity by IDs.
func (puo *PartnerUpdateOne) AddServiceIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddServiceIDs(ids...)
	return puo
}

// AddServices adds the "services" edges to the PartnerService entity.
func (puo *PartnerUpdateOne) AddServices(p ...*PartnerService) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddServiceIDs(ids...)
}

// AddServiceStateIDs adds the "service_states" edge to the PartnerServiceState entity by IDs.
func (puo *PartnerUpdateOne) AddServiceStateIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddServiceStateIDs(ids...)
	return puo
}

// AddServiceStates adds the "service_states" edges to the PartnerServiceState entity.
func (puo *PartnerUpdateOne) AddServiceStates(p ...*PartnerServiceState) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddServiceStateIDs(ids...)
}

// AddServiceCityIDs adds the "service_cities" edge to the PartnerServiceCity entity by IDs.
func (puo *PartnerUpdateOne) AddServiceCityIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddServiceCityIDs(ids...)
	return puo
}

// AddServiceCities adds the "service_cities" edges to the PartnerServiceCity entity.
func (puo *PartnerUpdateOne) AddServiceCities(p ...*PartnerServiceCity) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddServiceCityIDs(ids...)
}

// AddTrainingVideoIDs adds the "training_videos" edge to the PartnerTrainingVideo entity by IDs.
func (puo *PartnerUpdateOne) AddTrainingVideoIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddTrainingVideoIDs(ids...)
	return puo
}

// AddTrainingVideos adds the "training_videos" edges to the PartnerTrainingVideo entity.
func (puo *PartnerUpdateOne) AddTrainingVideos(p ...*PartnerTrainingVideo) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddTrainingVideoIDs(ids...)
}

// AddContactUsRequestIDs adds the "contact_us_requests" edge to the ContactUs entity by IDs.
func (puo *PartnerUpdateOne) AddContactUsRequestIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddContactUsRequestIDs(ids...)
	return puo
}

// AddContactUsRequests adds the "contact_us_requests" edges to the ContactUs entity.
func (puo *PartnerUpdateOne) AddContactUsRequests(c ...*ContactUs) *PartnerUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddContactUsRequestIDs(ids...)
}

// AddSurveyIDs adds the "surveys" edge to the Survey entity by IDs.
func (puo *PartnerUpdateOne) AddSurveyIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddSurveyIDs(ids...)
	return puo
}

// AddSurveys adds the "surveys" edges to the Survey entity.
func (puo *PartnerUpdateOne) AddSurveys(s ...*Survey) *PartnerUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSurveyIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (puo *PartnerUpdateOne) AddSessionIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddSessionIDs(ids...)
	return puo
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (puo *PartnerUpdateOne) AddSessions(u ...*UserSession) *PartnerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddSessionIDs(ids...)
}

// AddJobNoteIDs adds the "job_notes" edge to the JobNote entity by IDs.
func (puo *PartnerUpdateOne) AddJobNoteIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddJobNoteIDs(ids...)
	return puo
}

// AddJobNotes adds the "job_notes" edges to the JobNote entity.
func (puo *PartnerUpdateOne) AddJobNotes(j ...*JobNote) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.AddJobNoteIDs(ids...)
}

// AddChannelIDs adds the "channels" edge to the ChannelSub entity by IDs.
func (puo *PartnerUpdateOne) AddChannelIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddChannelIDs(ids...)
	return puo
}

// AddChannels adds the "channels" edges to the ChannelSub entity.
func (puo *PartnerUpdateOne) AddChannels(c ...*ChannelSub) *PartnerUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddChannelIDs(ids...)
}

// AddFinanceOptionIDs adds the "finance_options" edge to the OptionList entity by IDs.
func (puo *PartnerUpdateOne) AddFinanceOptionIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddFinanceOptionIDs(ids...)
	return puo
}

// AddFinanceOptions adds the "finance_options" edges to the OptionList entity.
func (puo *PartnerUpdateOne) AddFinanceOptions(o ...*OptionList) *PartnerUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddFinanceOptionIDs(ids...)
}

// AddEpcOptionIDs adds the "epc_options" edge to the OptionList entity by IDs.
func (puo *PartnerUpdateOne) AddEpcOptionIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddEpcOptionIDs(ids...)
	return puo
}

// AddEpcOptions adds the "epc_options" edges to the OptionList entity.
func (puo *PartnerUpdateOne) AddEpcOptions(o ...*OptionList) *PartnerUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddEpcOptionIDs(ids...)
}

// AddPartnerContactIDs adds the "partner_contacts" edge to the PartnerContact entity by IDs.
func (puo *PartnerUpdateOne) AddPartnerContactIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.AddPartnerContactIDs(ids...)
	return puo
}

// AddPartnerContacts adds the "partner_contacts" edges to the PartnerContact entity.
func (puo *PartnerUpdateOne) AddPartnerContacts(p ...*PartnerContact) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPartnerContactIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (puo *PartnerUpdateOne) Mutation() *PartnerMutation {
	return puo.mutation
}

// ClearRequestedEstimates clears all "requested_estimates" edges to the Estimate entity.
func (puo *PartnerUpdateOne) ClearRequestedEstimates() *PartnerUpdateOne {
	puo.mutation.ClearRequestedEstimates()
	return puo
}

// RemoveRequestedEstimateIDs removes the "requested_estimates" edge to Estimate entities by IDs.
func (puo *PartnerUpdateOne) RemoveRequestedEstimateIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveRequestedEstimateIDs(ids...)
	return puo
}

// RemoveRequestedEstimates removes "requested_estimates" edges to Estimate entities.
func (puo *PartnerUpdateOne) RemoveRequestedEstimates(e ...*Estimate) *PartnerUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveRequestedEstimateIDs(ids...)
}

// ClearEstimateHomeOwners clears all "estimate_home_owners" edges to the HomeOwner entity.
func (puo *PartnerUpdateOne) ClearEstimateHomeOwners() *PartnerUpdateOne {
	puo.mutation.ClearEstimateHomeOwners()
	return puo
}

// RemoveEstimateHomeOwnerIDs removes the "estimate_home_owners" edge to HomeOwner entities by IDs.
func (puo *PartnerUpdateOne) RemoveEstimateHomeOwnerIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveEstimateHomeOwnerIDs(ids...)
	return puo
}

// RemoveEstimateHomeOwners removes "estimate_home_owners" edges to HomeOwner entities.
func (puo *PartnerUpdateOne) RemoveEstimateHomeOwners(h ...*HomeOwner) *PartnerUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return puo.RemoveEstimateHomeOwnerIDs(ids...)
}

// ClearRoofingJobs clears all "roofing_jobs" edges to the Job entity.
func (puo *PartnerUpdateOne) ClearRoofingJobs() *PartnerUpdateOne {
	puo.mutation.ClearRoofingJobs()
	return puo
}

// RemoveRoofingJobIDs removes the "roofing_jobs" edge to Job entities by IDs.
func (puo *PartnerUpdateOne) RemoveRoofingJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveRoofingJobIDs(ids...)
	return puo
}

// RemoveRoofingJobs removes "roofing_jobs" edges to Job entities.
func (puo *PartnerUpdateOne) RemoveRoofingJobs(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.RemoveRoofingJobIDs(ids...)
}

// ClearIntegrationJobs clears all "integration_jobs" edges to the Job entity.
func (puo *PartnerUpdateOne) ClearIntegrationJobs() *PartnerUpdateOne {
	puo.mutation.ClearIntegrationJobs()
	return puo
}

// RemoveIntegrationJobIDs removes the "integration_jobs" edge to Job entities by IDs.
func (puo *PartnerUpdateOne) RemoveIntegrationJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveIntegrationJobIDs(ids...)
	return puo
}

// RemoveIntegrationJobs removes "integration_jobs" edges to Job entities.
func (puo *PartnerUpdateOne) RemoveIntegrationJobs(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.RemoveIntegrationJobIDs(ids...)
}

// ClearEpcJobs clears all "epc_jobs" edges to the Job entity.
func (puo *PartnerUpdateOne) ClearEpcJobs() *PartnerUpdateOne {
	puo.mutation.ClearEpcJobs()
	return puo
}

// RemoveEpcJobIDs removes the "epc_jobs" edge to Job entities by IDs.
func (puo *PartnerUpdateOne) RemoveEpcJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveEpcJobIDs(ids...)
	return puo
}

// RemoveEpcJobs removes "epc_jobs" edges to Job entities.
func (puo *PartnerUpdateOne) RemoveEpcJobs(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.RemoveEpcJobIDs(ids...)
}

// ClearJobRequests clears all "job_requests" edges to the Job entity.
func (puo *PartnerUpdateOne) ClearJobRequests() *PartnerUpdateOne {
	puo.mutation.ClearJobRequests()
	return puo
}

// RemoveJobRequestIDs removes the "job_requests" edge to Job entities by IDs.
func (puo *PartnerUpdateOne) RemoveJobRequestIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveJobRequestIDs(ids...)
	return puo
}

// RemoveJobRequests removes "job_requests" edges to Job entities.
func (puo *PartnerUpdateOne) RemoveJobRequests(j ...*Job) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.RemoveJobRequestIDs(ids...)
}

// ClearActivities clears all "activities" edges to the PartnerActivity entity.
func (puo *PartnerUpdateOne) ClearActivities() *PartnerUpdateOne {
	puo.mutation.ClearActivities()
	return puo
}

// RemoveActivityIDs removes the "activities" edge to PartnerActivity entities by IDs.
func (puo *PartnerUpdateOne) RemoveActivityIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveActivityIDs(ids...)
	return puo
}

// RemoveActivities removes "activities" edges to PartnerActivity entities.
func (puo *PartnerUpdateOne) RemoveActivities(p ...*PartnerActivity) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveActivityIDs(ids...)
}

// ClearJobAssignmentHistory clears all "job_assignment_history" edges to the JobAssignmentHistory entity.
func (puo *PartnerUpdateOne) ClearJobAssignmentHistory() *PartnerUpdateOne {
	puo.mutation.ClearJobAssignmentHistory()
	return puo
}

// RemoveJobAssignmentHistoryIDs removes the "job_assignment_history" edge to JobAssignmentHistory entities by IDs.
func (puo *PartnerUpdateOne) RemoveJobAssignmentHistoryIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveJobAssignmentHistoryIDs(ids...)
	return puo
}

// RemoveJobAssignmentHistory removes "job_assignment_history" edges to JobAssignmentHistory entities.
func (puo *PartnerUpdateOne) RemoveJobAssignmentHistory(j ...*JobAssignmentHistory) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.RemoveJobAssignmentHistoryIDs(ids...)
}

// ClearRequestedInstallationJobs clears all "requested_installation_jobs" edges to the InstallationJob entity.
func (puo *PartnerUpdateOne) ClearRequestedInstallationJobs() *PartnerUpdateOne {
	puo.mutation.ClearRequestedInstallationJobs()
	return puo
}

// RemoveRequestedInstallationJobIDs removes the "requested_installation_jobs" edge to InstallationJob entities by IDs.
func (puo *PartnerUpdateOne) RemoveRequestedInstallationJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveRequestedInstallationJobIDs(ids...)
	return puo
}

// RemoveRequestedInstallationJobs removes "requested_installation_jobs" edges to InstallationJob entities.
func (puo *PartnerUpdateOne) RemoveRequestedInstallationJobs(i ...*InstallationJob) *PartnerUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveRequestedInstallationJobIDs(ids...)
}

// ClearAssignedInstallationJobs clears all "assigned_installation_jobs" edges to the InstallationJob entity.
func (puo *PartnerUpdateOne) ClearAssignedInstallationJobs() *PartnerUpdateOne {
	puo.mutation.ClearAssignedInstallationJobs()
	return puo
}

// RemoveAssignedInstallationJobIDs removes the "assigned_installation_jobs" edge to InstallationJob entities by IDs.
func (puo *PartnerUpdateOne) RemoveAssignedInstallationJobIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveAssignedInstallationJobIDs(ids...)
	return puo
}

// RemoveAssignedInstallationJobs removes "assigned_installation_jobs" edges to InstallationJob entities.
func (puo *PartnerUpdateOne) RemoveAssignedInstallationJobs(i ...*InstallationJob) *PartnerUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveAssignedInstallationJobIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the User entity.
func (puo *PartnerUpdateOne) ClearContacts() *PartnerUpdateOne {
	puo.mutation.ClearContacts()
	return puo
}

// RemoveContactIDs removes the "contacts" edge to User entities by IDs.
func (puo *PartnerUpdateOne) RemoveContactIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveContactIDs(ids...)
	return puo
}

// RemoveContacts removes "contacts" edges to User entities.
func (puo *PartnerUpdateOne) RemoveContacts(u ...*User) *PartnerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveContactIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (puo *PartnerUpdateOne) ClearCreator() *PartnerUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (puo *PartnerUpdateOne) ClearCreatorAPI() *PartnerUpdateOne {
	puo.mutation.ClearCreatorAPI()
	return puo
}

// ClearServices clears all "services" edges to the PartnerService entity.
func (puo *PartnerUpdateOne) ClearServices() *PartnerUpdateOne {
	puo.mutation.ClearServices()
	return puo
}

// RemoveServiceIDs removes the "services" edge to PartnerService entities by IDs.
func (puo *PartnerUpdateOne) RemoveServiceIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveServiceIDs(ids...)
	return puo
}

// RemoveServices removes "services" edges to PartnerService entities.
func (puo *PartnerUpdateOne) RemoveServices(p ...*PartnerService) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveServiceIDs(ids...)
}

// ClearServiceStates clears all "service_states" edges to the PartnerServiceState entity.
func (puo *PartnerUpdateOne) ClearServiceStates() *PartnerUpdateOne {
	puo.mutation.ClearServiceStates()
	return puo
}

// RemoveServiceStateIDs removes the "service_states" edge to PartnerServiceState entities by IDs.
func (puo *PartnerUpdateOne) RemoveServiceStateIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveServiceStateIDs(ids...)
	return puo
}

// RemoveServiceStates removes "service_states" edges to PartnerServiceState entities.
func (puo *PartnerUpdateOne) RemoveServiceStates(p ...*PartnerServiceState) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveServiceStateIDs(ids...)
}

// ClearServiceCities clears all "service_cities" edges to the PartnerServiceCity entity.
func (puo *PartnerUpdateOne) ClearServiceCities() *PartnerUpdateOne {
	puo.mutation.ClearServiceCities()
	return puo
}

// RemoveServiceCityIDs removes the "service_cities" edge to PartnerServiceCity entities by IDs.
func (puo *PartnerUpdateOne) RemoveServiceCityIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveServiceCityIDs(ids...)
	return puo
}

// RemoveServiceCities removes "service_cities" edges to PartnerServiceCity entities.
func (puo *PartnerUpdateOne) RemoveServiceCities(p ...*PartnerServiceCity) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveServiceCityIDs(ids...)
}

// ClearTrainingVideos clears all "training_videos" edges to the PartnerTrainingVideo entity.
func (puo *PartnerUpdateOne) ClearTrainingVideos() *PartnerUpdateOne {
	puo.mutation.ClearTrainingVideos()
	return puo
}

// RemoveTrainingVideoIDs removes the "training_videos" edge to PartnerTrainingVideo entities by IDs.
func (puo *PartnerUpdateOne) RemoveTrainingVideoIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveTrainingVideoIDs(ids...)
	return puo
}

// RemoveTrainingVideos removes "training_videos" edges to PartnerTrainingVideo entities.
func (puo *PartnerUpdateOne) RemoveTrainingVideos(p ...*PartnerTrainingVideo) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveTrainingVideoIDs(ids...)
}

// ClearContactUsRequests clears all "contact_us_requests" edges to the ContactUs entity.
func (puo *PartnerUpdateOne) ClearContactUsRequests() *PartnerUpdateOne {
	puo.mutation.ClearContactUsRequests()
	return puo
}

// RemoveContactUsRequestIDs removes the "contact_us_requests" edge to ContactUs entities by IDs.
func (puo *PartnerUpdateOne) RemoveContactUsRequestIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveContactUsRequestIDs(ids...)
	return puo
}

// RemoveContactUsRequests removes "contact_us_requests" edges to ContactUs entities.
func (puo *PartnerUpdateOne) RemoveContactUsRequests(c ...*ContactUs) *PartnerUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveContactUsRequestIDs(ids...)
}

// ClearSurveys clears all "surveys" edges to the Survey entity.
func (puo *PartnerUpdateOne) ClearSurveys() *PartnerUpdateOne {
	puo.mutation.ClearSurveys()
	return puo
}

// RemoveSurveyIDs removes the "surveys" edge to Survey entities by IDs.
func (puo *PartnerUpdateOne) RemoveSurveyIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveSurveyIDs(ids...)
	return puo
}

// RemoveSurveys removes "surveys" edges to Survey entities.
func (puo *PartnerUpdateOne) RemoveSurveys(s ...*Survey) *PartnerUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSurveyIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (puo *PartnerUpdateOne) ClearSessions() *PartnerUpdateOne {
	puo.mutation.ClearSessions()
	return puo
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (puo *PartnerUpdateOne) RemoveSessionIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveSessionIDs(ids...)
	return puo
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (puo *PartnerUpdateOne) RemoveSessions(u ...*UserSession) *PartnerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveSessionIDs(ids...)
}

// ClearJobNotes clears all "job_notes" edges to the JobNote entity.
func (puo *PartnerUpdateOne) ClearJobNotes() *PartnerUpdateOne {
	puo.mutation.ClearJobNotes()
	return puo
}

// RemoveJobNoteIDs removes the "job_notes" edge to JobNote entities by IDs.
func (puo *PartnerUpdateOne) RemoveJobNoteIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveJobNoteIDs(ids...)
	return puo
}

// RemoveJobNotes removes "job_notes" edges to JobNote entities.
func (puo *PartnerUpdateOne) RemoveJobNotes(j ...*JobNote) *PartnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return puo.RemoveJobNoteIDs(ids...)
}

// ClearChannels clears all "channels" edges to the ChannelSub entity.
func (puo *PartnerUpdateOne) ClearChannels() *PartnerUpdateOne {
	puo.mutation.ClearChannels()
	return puo
}

// RemoveChannelIDs removes the "channels" edge to ChannelSub entities by IDs.
func (puo *PartnerUpdateOne) RemoveChannelIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveChannelIDs(ids...)
	return puo
}

// RemoveChannels removes "channels" edges to ChannelSub entities.
func (puo *PartnerUpdateOne) RemoveChannels(c ...*ChannelSub) *PartnerUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveChannelIDs(ids...)
}

// ClearFinanceOptions clears all "finance_options" edges to the OptionList entity.
func (puo *PartnerUpdateOne) ClearFinanceOptions() *PartnerUpdateOne {
	puo.mutation.ClearFinanceOptions()
	return puo
}

// RemoveFinanceOptionIDs removes the "finance_options" edge to OptionList entities by IDs.
func (puo *PartnerUpdateOne) RemoveFinanceOptionIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveFinanceOptionIDs(ids...)
	return puo
}

// RemoveFinanceOptions removes "finance_options" edges to OptionList entities.
func (puo *PartnerUpdateOne) RemoveFinanceOptions(o ...*OptionList) *PartnerUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveFinanceOptionIDs(ids...)
}

// ClearEpcOptions clears all "epc_options" edges to the OptionList entity.
func (puo *PartnerUpdateOne) ClearEpcOptions() *PartnerUpdateOne {
	puo.mutation.ClearEpcOptions()
	return puo
}

// RemoveEpcOptionIDs removes the "epc_options" edge to OptionList entities by IDs.
func (puo *PartnerUpdateOne) RemoveEpcOptionIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemoveEpcOptionIDs(ids...)
	return puo
}

// RemoveEpcOptions removes "epc_options" edges to OptionList entities.
func (puo *PartnerUpdateOne) RemoveEpcOptions(o ...*OptionList) *PartnerUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveEpcOptionIDs(ids...)
}

// ClearPartnerContacts clears all "partner_contacts" edges to the PartnerContact entity.
func (puo *PartnerUpdateOne) ClearPartnerContacts() *PartnerUpdateOne {
	puo.mutation.ClearPartnerContacts()
	return puo
}

// RemovePartnerContactIDs removes the "partner_contacts" edge to PartnerContact entities by IDs.
func (puo *PartnerUpdateOne) RemovePartnerContactIDs(ids ...string) *PartnerUpdateOne {
	puo.mutation.RemovePartnerContactIDs(ids...)
	return puo
}

// RemovePartnerContacts removes "partner_contacts" edges to PartnerContact entities.
func (puo *PartnerUpdateOne) RemovePartnerContacts(p ...*PartnerContact) *PartnerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePartnerContactIDs(ids...)
}

// Where appends a list predicates to the PartnerUpdate builder.
func (puo *PartnerUpdateOne) Where(ps ...predicate.Partner) *PartnerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartnerUpdateOne) Select(field string, fields ...string) *PartnerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Partner entity.
func (puo *PartnerUpdateOne) Save(ctx context.Context) (*Partner, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartnerUpdateOne) SaveX(ctx context.Context) *Partner {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartnerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PartnerUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := partner.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartnerUpdateOne) check() error {
	if v, ok := puo.mutation.ExternalID(); ok {
		if err := partner.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "Partner.external_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.CreatorID(); ok {
		if err := partner.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Partner.creator_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := partner.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Partner.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := partner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Partner.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Phone(); ok {
		if err := partner.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Partner.phone": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := partner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Partner.status": %w`, err)}
		}
	}
	if v, ok := puo.mutation.EpcStatus(); ok {
		if err := partner.EpcStatusValidator(v); err != nil {
			return &ValidationError{Name: "epc_status", err: fmt.Errorf(`ent: validator failed for field "Partner.epc_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PartnerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PartnerUpdateOne) sqlSave(ctx context.Context) (_node *Partner, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for _, f := range fields {
			if !partner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(partner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ExternalID(); ok {
		_spec.SetField(partner.FieldExternalID, field.TypeString, value)
	}
	if puo.mutation.ExternalIDCleared() {
		_spec.ClearField(partner.FieldExternalID, field.TypeString)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(partner.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.SetField(partner.FieldAddress, field.TypeString, value)
	}
	if puo.mutation.AddressCleared() {
		_spec.ClearField(partner.FieldAddress, field.TypeString)
	}
	if value, ok := puo.mutation.Website(); ok {
		_spec.SetField(partner.FieldWebsite, field.TypeString, value)
	}
	if puo.mutation.WebsiteCleared() {
		_spec.ClearField(partner.FieldWebsite, field.TypeString)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(partner.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.PhoneCleared() {
		_spec.ClearField(partner.FieldPhone, field.TypeString)
	}
	if value, ok := puo.mutation.Latitude(); ok {
		_spec.SetField(partner.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedLatitude(); ok {
		_spec.AddField(partner.FieldLatitude, field.TypeFloat64, value)
	}
	if puo.mutation.LatitudeCleared() {
		_spec.ClearField(partner.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Longitude(); ok {
		_spec.SetField(partner.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedLongitude(); ok {
		_spec.AddField(partner.FieldLongitude, field.TypeFloat64, value)
	}
	if puo.mutation.LongitudeCleared() {
		_spec.ClearField(partner.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := puo.mutation.IsNationWide(); ok {
		_spec.SetField(partner.FieldIsNationWide, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CrewCount(); ok {
		_spec.SetField(partner.FieldCrewCount, field.TypeUint16, value)
	}
	if value, ok := puo.mutation.AddedCrewCount(); ok {
		_spec.AddField(partner.FieldCrewCount, field.TypeUint16, value)
	}
	if value, ok := puo.mutation.YearsInBusiness(); ok {
		_spec.SetField(partner.FieldYearsInBusiness, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedYearsInBusiness(); ok {
		_spec.AddField(partner.FieldYearsInBusiness, field.TypeInt, value)
	}
	if puo.mutation.YearsInBusinessCleared() {
		_spec.ClearField(partner.FieldYearsInBusiness, field.TypeInt)
	}
	if value, ok := puo.mutation.JobCapacity(); ok {
		_spec.SetField(partner.FieldJobCapacity, field.TypeUint16, value)
	}
	if value, ok := puo.mutation.AddedJobCapacity(); ok {
		_spec.AddField(partner.FieldJobCapacity, field.TypeUint16, value)
	}
	if value, ok := puo.mutation.AsphaltLeadT(); ok {
		_spec.SetField(partner.FieldAsphaltLeadT, field.TypeString, value)
	}
	if puo.mutation.AsphaltLeadTCleared() {
		_spec.ClearField(partner.FieldAsphaltLeadT, field.TypeString)
	}
	if value, ok := puo.mutation.MetalLeadT(); ok {
		_spec.SetField(partner.FieldMetalLeadT, field.TypeString, value)
	}
	if puo.mutation.MetalLeadTCleared() {
		_spec.ClearField(partner.FieldMetalLeadT, field.TypeString)
	}
	if value, ok := puo.mutation.TileLeadT(); ok {
		_spec.SetField(partner.FieldTileLeadT, field.TypeString, value)
	}
	if puo.mutation.TileLeadTCleared() {
		_spec.ClearField(partner.FieldTileLeadT, field.TypeString)
	}
	if value, ok := puo.mutation.SetupStepsCompleted(); ok {
		_spec.SetField(partner.FieldSetupStepsCompleted, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedSetupStepsCompleted(); ok {
		_spec.AddField(partner.FieldSetupStepsCompleted, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.SalesVolume(); ok {
		_spec.SetField(partner.FieldSalesVolume, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSalesVolume(); ok {
		_spec.AddField(partner.FieldSalesVolume, field.TypeInt, value)
	}
	if puo.mutation.SalesVolumeCleared() {
		_spec.ClearField(partner.FieldSalesVolume, field.TypeInt)
	}
	if value, ok := puo.mutation.DownPayment(); ok {
		_spec.SetField(partner.FieldDownPayment, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDownPayment(); ok {
		_spec.AddField(partner.FieldDownPayment, field.TypeInt, value)
	}
	if puo.mutation.DownPaymentCleared() {
		_spec.ClearField(partner.FieldDownPayment, field.TypeInt)
	}
	if value, ok := puo.mutation.Pif(); ok {
		_spec.SetField(partner.FieldPif, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPif(); ok {
		_spec.AddField(partner.FieldPif, field.TypeInt, value)
	}
	if puo.mutation.PifCleared() {
		_spec.ClearField(partner.FieldPif, field.TypeInt)
	}
	if value, ok := puo.mutation.InstallInHouse(); ok {
		_spec.SetField(partner.FieldInstallInHouse, field.TypeBool, value)
	}
	if puo.mutation.InstallInHouseCleared() {
		_spec.ClearField(partner.FieldInstallInHouse, field.TypeBool)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(partner.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.EpcStatus(); ok {
		_spec.SetField(partner.FieldEpcStatus, field.TypeEnum, value)
	}
	if puo.mutation.EpcStatusCleared() {
		_spec.ClearField(partner.FieldEpcStatus, field.TypeEnum)
	}
	if value, ok := puo.mutation.MobileAppSettings(); ok {
		_spec.SetField(partner.FieldMobileAppSettings, field.TypeJSON, value)
	}
	if puo.mutation.MobileAppSettingsCleared() {
		_spec.ClearField(partner.FieldMobileAppSettings, field.TypeJSON)
	}
	if puo.mutation.RequestedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRequestedEstimatesIDs(); len(nodes) > 0 && !puo.mutation.RequestedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RequestedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedEstimatesTable,
			Columns: []string{partner.RequestedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EstimateHomeOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEstimateHomeOwnersIDs(); len(nodes) > 0 && !puo.mutation.EstimateHomeOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EstimateHomeOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EstimateHomeOwnersTable,
			Columns: []string{partner.EstimateHomeOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RoofingJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRoofingJobsIDs(); len(nodes) > 0 && !puo.mutation.RoofingJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoofingJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RoofingJobsTable,
			Columns: []string{partner.RoofingJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.IntegrationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedIntegrationJobsIDs(); len(nodes) > 0 && !puo.mutation.IntegrationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.IntegrationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.IntegrationJobsTable,
			Columns: []string{partner.IntegrationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EpcJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEpcJobsIDs(); len(nodes) > 0 && !puo.mutation.EpcJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EpcJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.EpcJobsTable,
			Columns: []string{partner.EpcJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.JobRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedJobRequestsIDs(); len(nodes) > 0 && !puo.mutation.JobRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.JobRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobRequestsTable,
			Columns: []string{partner.JobRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !puo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ActivitiesTable,
			Columns: []string{partner.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.JobAssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedJobAssignmentHistoryIDs(); len(nodes) > 0 && !puo.mutation.JobAssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.JobAssignmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobAssignmentHistoryTable,
			Columns: []string{partner.JobAssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RequestedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRequestedInstallationJobsIDs(); len(nodes) > 0 && !puo.mutation.RequestedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RequestedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.RequestedInstallationJobsTable,
			Columns: []string{partner.RequestedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AssignedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAssignedInstallationJobsIDs(); len(nodes) > 0 && !puo.mutation.AssignedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AssignedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.AssignedInstallationJobsTable,
			Columns: []string{partner.AssignedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &PartnerContactCreate{config: puo.config, mutation: newPartnerContactMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !puo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: puo.config, mutation: newPartnerContactMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.ContactsTable,
			Columns: partner.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: puo.config, mutation: newPartnerContactMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partner.CreatorTable,
			Columns: []string{partner.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partner.CreatorTable,
			Columns: []string{partner.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partner.CreatorAPITable,
			Columns: []string{partner.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partner.CreatorAPITable,
			Columns: []string{partner.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !puo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServicesTable,
			Columns: []string{partner.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ServiceStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServiceStatesIDs(); len(nodes) > 0 && !puo.mutation.ServiceStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServiceStatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceStatesTable,
			Columns: []string{partner.ServiceStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ServiceCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServiceCitiesIDs(); len(nodes) > 0 && !puo.mutation.ServiceCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServiceCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ServiceCitiesTable,
			Columns: []string{partner.ServiceCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTrainingVideosIDs(); len(nodes) > 0 && !puo.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.TrainingVideosTable,
			Columns: []string{partner.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedContactUsRequestsIDs(); len(nodes) > 0 && !puo.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContactUsRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ContactUsRequestsTable,
			Columns: []string{partner.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSurveysIDs(); len(nodes) > 0 && !puo.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SurveysTable,
			Columns: []string{partner.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !puo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.SessionsTable,
			Columns: []string{partner.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedJobNotesIDs(); len(nodes) > 0 && !puo.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.JobNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.JobNotesTable,
			Columns: []string{partner.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !puo.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.ChannelsTable,
			Columns: []string{partner.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFinanceOptionsIDs(); len(nodes) > 0 && !puo.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FinanceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.FinanceOptionsTable,
			Columns: partner.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEpcOptionsIDs(); len(nodes) > 0 && !puo.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EpcOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.EpcOptionsTable,
			Columns: partner.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartnerContactsIDs(); len(nodes) > 0 && !puo.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartnerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   partner.PartnerContactsTable,
			Columns: []string{partner.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Partner{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

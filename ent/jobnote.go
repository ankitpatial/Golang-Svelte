// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/job"
	"roofix/ent/jobnote"
	"roofix/ent/partner"
	"roofix/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// JobNote is the model entity for the JobNote schema.
type JobNote struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobNoteQuery when eager-loading is set.
	Edges        JobNoteEdges `json:"edges"`
	job_id       *string
	partner_id   *string
	user_id      *string
	selectValues sql.SelectValues
}

// JobNoteEdges holds the relations/edges for other nodes in the graph.
type JobNoteEdges struct {
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Partner holds the value of the partner edge.
	Partner *Partner `json:"partner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobNoteEdges) JobOrErr() (*Job, error) {
	if e.loadedTypes[0] {
		if e.Job == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: job.Label}
		}
		return e.Job, nil
	}
	return nil, &NotLoadedError{edge: "job"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobNoteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobNoteEdges) PartnerOrErr() (*Partner, error) {
	if e.loadedTypes[2] {
		if e.Partner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobNote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobnote.FieldID, jobnote.FieldNote:
			values[i] = new(sql.NullString)
		case jobnote.FieldCreatedAt, jobnote.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jobnote.ForeignKeys[0]: // job_id
			values[i] = new(sql.NullString)
		case jobnote.ForeignKeys[1]: // partner_id
			values[i] = new(sql.NullString)
		case jobnote.ForeignKeys[2]: // user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobNote fields.
func (jn *JobNote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobnote.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				jn.ID = value.String
			}
		case jobnote.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jn.CreatedAt = value.Time
			}
		case jobnote.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jn.UpdatedAt = value.Time
			}
		case jobnote.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				jn.Note = value.String
			}
		case jobnote.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				jn.job_id = new(string)
				*jn.job_id = value.String
			}
		case jobnote.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				jn.partner_id = new(string)
				*jn.partner_id = value.String
			}
		case jobnote.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				jn.user_id = new(string)
				*jn.user_id = value.String
			}
		default:
			jn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobNote.
// This includes values selected through modifiers, order, etc.
func (jn *JobNote) Value(name string) (ent.Value, error) {
	return jn.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the JobNote entity.
func (jn *JobNote) QueryJob() *JobQuery {
	return NewJobNoteClient(jn.config).QueryJob(jn)
}

// QueryUser queries the "user" edge of the JobNote entity.
func (jn *JobNote) QueryUser() *UserQuery {
	return NewJobNoteClient(jn.config).QueryUser(jn)
}

// QueryPartner queries the "partner" edge of the JobNote entity.
func (jn *JobNote) QueryPartner() *PartnerQuery {
	return NewJobNoteClient(jn.config).QueryPartner(jn)
}

// Update returns a builder for updating this JobNote.
// Note that you need to call JobNote.Unwrap() before calling this method if this JobNote
// was returned from a transaction, and the transaction was committed or rolled back.
func (jn *JobNote) Update() *JobNoteUpdateOne {
	return NewJobNoteClient(jn.config).UpdateOne(jn)
}

// Unwrap unwraps the JobNote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jn *JobNote) Unwrap() *JobNote {
	_tx, ok := jn.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobNote is not a transactional entity")
	}
	jn.config.driver = _tx.drv
	return jn
}

// String implements the fmt.Stringer.
func (jn *JobNote) String() string {
	var builder strings.Builder
	builder.WriteString("JobNote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(jn.Note)
	builder.WriteByte(')')
	return builder.String()
}

// JobNotes is a parsable slice of JobNote.
type JobNotes []*JobNote

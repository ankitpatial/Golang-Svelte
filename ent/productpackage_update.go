// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/predicate"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProductPackageUpdate is the builder for updating ProductPackage entities.
type ProductPackageUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductPackageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductPackageUpdate builder.
func (ppu *ProductPackageUpdate) Where(ps ...predicate.ProductPackage) *ProductPackageUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *ProductPackageUpdate) SetUpdatedAt(t time.Time) *ProductPackageUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetType sets the "type" field.
func (ppu *ProductPackageUpdate) SetType(e enum.Product) *ProductPackageUpdate {
	ppu.mutation.SetType(e)
	return ppu
}

// SetSoldAs sets the "sold_as" field.
func (ppu *ProductPackageUpdate) SetSoldAs(ea enum.SoldAs) *ProductPackageUpdate {
	ppu.mutation.SetSoldAs(ea)
	return ppu
}

// SetName sets the "name" field.
func (ppu *ProductPackageUpdate) SetName(s string) *ProductPackageUpdate {
	ppu.mutation.SetName(s)
	return ppu
}

// SetDescription sets the "description" field.
func (ppu *ProductPackageUpdate) SetDescription(s string) *ProductPackageUpdate {
	ppu.mutation.SetDescription(s)
	return ppu
}

// SetFeatures sets the "features" field.
func (ppu *ProductPackageUpdate) SetFeatures(s []string) *ProductPackageUpdate {
	ppu.mutation.SetFeatures(s)
	return ppu
}

// AppendFeatures appends s to the "features" field.
func (ppu *ProductPackageUpdate) AppendFeatures(s []string) *ProductPackageUpdate {
	ppu.mutation.AppendFeatures(s)
	return ppu
}

// SetPrice sets the "price" field.
func (ppu *ProductPackageUpdate) SetPrice(f float64) *ProductPackageUpdate {
	ppu.mutation.ResetPrice()
	ppu.mutation.SetPrice(f)
	return ppu
}

// AddPrice adds f to the "price" field.
func (ppu *ProductPackageUpdate) AddPrice(f float64) *ProductPackageUpdate {
	ppu.mutation.AddPrice(f)
	return ppu
}

// SetDiscontinued sets the "discontinued" field.
func (ppu *ProductPackageUpdate) SetDiscontinued(b bool) *ProductPackageUpdate {
	ppu.mutation.SetDiscontinued(b)
	return ppu
}

// SetNillableDiscontinued sets the "discontinued" field if the given value is not nil.
func (ppu *ProductPackageUpdate) SetNillableDiscontinued(b *bool) *ProductPackageUpdate {
	if b != nil {
		ppu.SetDiscontinued(*b)
	}
	return ppu
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (ppu *ProductPackageUpdate) ClearDiscontinued() *ProductPackageUpdate {
	ppu.mutation.ClearDiscontinued()
	return ppu
}

// AddItemIDs adds the "items" edge to the Product entity by IDs.
func (ppu *ProductPackageUpdate) AddItemIDs(ids ...string) *ProductPackageUpdate {
	ppu.mutation.AddItemIDs(ids...)
	return ppu
}

// AddItems adds the "items" edges to the Product entity.
func (ppu *ProductPackageUpdate) AddItems(p ...*Product) *ProductPackageUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddItemIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ppu *ProductPackageUpdate) SetCreatorID(id string) *ProductPackageUpdate {
	ppu.mutation.SetCreatorID(id)
	return ppu
}

// SetCreator sets the "creator" edge to the User entity.
func (ppu *ProductPackageUpdate) SetCreator(u *User) *ProductPackageUpdate {
	return ppu.SetCreatorID(u.ID)
}

// Mutation returns the ProductPackageMutation object of the builder.
func (ppu *ProductPackageUpdate) Mutation() *ProductPackageMutation {
	return ppu.mutation
}

// ClearItems clears all "items" edges to the Product entity.
func (ppu *ProductPackageUpdate) ClearItems() *ProductPackageUpdate {
	ppu.mutation.ClearItems()
	return ppu
}

// RemoveItemIDs removes the "items" edge to Product entities by IDs.
func (ppu *ProductPackageUpdate) RemoveItemIDs(ids ...string) *ProductPackageUpdate {
	ppu.mutation.RemoveItemIDs(ids...)
	return ppu
}

// RemoveItems removes "items" edges to Product entities.
func (ppu *ProductPackageUpdate) RemoveItems(p ...*Product) *ProductPackageUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveItemIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (ppu *ProductPackageUpdate) ClearCreator() *ProductPackageUpdate {
	ppu.mutation.ClearCreator()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *ProductPackageUpdate) Save(ctx context.Context) (int, error) {
	ppu.defaults()
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *ProductPackageUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *ProductPackageUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *ProductPackageUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *ProductPackageUpdate) defaults() {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		v := productpackage.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *ProductPackageUpdate) check() error {
	if v, ok := ppu.mutation.GetType(); ok {
		if err := productpackage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.type": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.SoldAs(); ok {
		if err := productpackage.SoldAsValidator(v); err != nil {
			return &ValidationError{Name: "sold_as", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.sold_as": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.Name(); ok {
		if err := productpackage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.name": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.Description(); ok {
		if err := productpackage.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.description": %w`, err)}
		}
	}
	if _, ok := ppu.mutation.CreatorID(); ppu.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductPackage.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppu *ProductPackageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductPackageUpdate {
	ppu.modifiers = append(ppu.modifiers, modifiers...)
	return ppu
}

func (ppu *ProductPackageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productpackage.Table, productpackage.Columns, sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(productpackage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.GetType(); ok {
		_spec.SetField(productpackage.FieldType, field.TypeEnum, value)
	}
	if value, ok := ppu.mutation.SoldAs(); ok {
		_spec.SetField(productpackage.FieldSoldAs, field.TypeEnum, value)
	}
	if value, ok := ppu.mutation.Name(); ok {
		_spec.SetField(productpackage.FieldName, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Description(); ok {
		_spec.SetField(productpackage.FieldDescription, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Features(); ok {
		_spec.SetField(productpackage.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := ppu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, productpackage.FieldFeatures, value)
		})
	}
	if value, ok := ppu.mutation.Price(); ok {
		_spec.SetField(productpackage.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedPrice(); ok {
		_spec.AddField(productpackage.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.Discontinued(); ok {
		_spec.SetField(productpackage.FieldDiscontinued, field.TypeBool, value)
	}
	if ppu.mutation.DiscontinuedCleared() {
		_spec.ClearField(productpackage.FieldDiscontinued, field.TypeBool)
	}
	if ppu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productpackage.ItemsTable,
			Columns: productpackage.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ppu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productpackage.ItemsTable,
			Columns: productpackage.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productpackage.ItemsTable,
			Columns: productpackage.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productpackage.CreatorTable,
			Columns: []string{productpackage.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productpackage.CreatorTable,
			Columns: []string{productpackage.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ppu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// ProductPackageUpdateOne is the builder for updating a single ProductPackage entity.
type ProductPackageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductPackageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *ProductPackageUpdateOne) SetUpdatedAt(t time.Time) *ProductPackageUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetType sets the "type" field.
func (ppuo *ProductPackageUpdateOne) SetType(e enum.Product) *ProductPackageUpdateOne {
	ppuo.mutation.SetType(e)
	return ppuo
}

// SetSoldAs sets the "sold_as" field.
func (ppuo *ProductPackageUpdateOne) SetSoldAs(ea enum.SoldAs) *ProductPackageUpdateOne {
	ppuo.mutation.SetSoldAs(ea)
	return ppuo
}

// SetName sets the "name" field.
func (ppuo *ProductPackageUpdateOne) SetName(s string) *ProductPackageUpdateOne {
	ppuo.mutation.SetName(s)
	return ppuo
}

// SetDescription sets the "description" field.
func (ppuo *ProductPackageUpdateOne) SetDescription(s string) *ProductPackageUpdateOne {
	ppuo.mutation.SetDescription(s)
	return ppuo
}

// SetFeatures sets the "features" field.
func (ppuo *ProductPackageUpdateOne) SetFeatures(s []string) *ProductPackageUpdateOne {
	ppuo.mutation.SetFeatures(s)
	return ppuo
}

// AppendFeatures appends s to the "features" field.
func (ppuo *ProductPackageUpdateOne) AppendFeatures(s []string) *ProductPackageUpdateOne {
	ppuo.mutation.AppendFeatures(s)
	return ppuo
}

// SetPrice sets the "price" field.
func (ppuo *ProductPackageUpdateOne) SetPrice(f float64) *ProductPackageUpdateOne {
	ppuo.mutation.ResetPrice()
	ppuo.mutation.SetPrice(f)
	return ppuo
}

// AddPrice adds f to the "price" field.
func (ppuo *ProductPackageUpdateOne) AddPrice(f float64) *ProductPackageUpdateOne {
	ppuo.mutation.AddPrice(f)
	return ppuo
}

// SetDiscontinued sets the "discontinued" field.
func (ppuo *ProductPackageUpdateOne) SetDiscontinued(b bool) *ProductPackageUpdateOne {
	ppuo.mutation.SetDiscontinued(b)
	return ppuo
}

// SetNillableDiscontinued sets the "discontinued" field if the given value is not nil.
func (ppuo *ProductPackageUpdateOne) SetNillableDiscontinued(b *bool) *ProductPackageUpdateOne {
	if b != nil {
		ppuo.SetDiscontinued(*b)
	}
	return ppuo
}

// ClearDiscontinued clears the value of the "discontinued" field.
func (ppuo *ProductPackageUpdateOne) ClearDiscontinued() *ProductPackageUpdateOne {
	ppuo.mutation.ClearDiscontinued()
	return ppuo
}

// AddItemIDs adds the "items" edge to the Product entity by IDs.
func (ppuo *ProductPackageUpdateOne) AddItemIDs(ids ...string) *ProductPackageUpdateOne {
	ppuo.mutation.AddItemIDs(ids...)
	return ppuo
}

// AddItems adds the "items" edges to the Product entity.
func (ppuo *ProductPackageUpdateOne) AddItems(p ...*Product) *ProductPackageUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddItemIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ppuo *ProductPackageUpdateOne) SetCreatorID(id string) *ProductPackageUpdateOne {
	ppuo.mutation.SetCreatorID(id)
	return ppuo
}

// SetCreator sets the "creator" edge to the User entity.
func (ppuo *ProductPackageUpdateOne) SetCreator(u *User) *ProductPackageUpdateOne {
	return ppuo.SetCreatorID(u.ID)
}

// Mutation returns the ProductPackageMutation object of the builder.
func (ppuo *ProductPackageUpdateOne) Mutation() *ProductPackageMutation {
	return ppuo.mutation
}

// ClearItems clears all "items" edges to the Product entity.
func (ppuo *ProductPackageUpdateOne) ClearItems() *ProductPackageUpdateOne {
	ppuo.mutation.ClearItems()
	return ppuo
}

// RemoveItemIDs removes the "items" edge to Product entities by IDs.
func (ppuo *ProductPackageUpdateOne) RemoveItemIDs(ids ...string) *ProductPackageUpdateOne {
	ppuo.mutation.RemoveItemIDs(ids...)
	return ppuo
}

// RemoveItems removes "items" edges to Product entities.
func (ppuo *ProductPackageUpdateOne) RemoveItems(p ...*Product) *ProductPackageUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveItemIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (ppuo *ProductPackageUpdateOne) ClearCreator() *ProductPackageUpdateOne {
	ppuo.mutation.ClearCreator()
	return ppuo
}

// Where appends a list predicates to the ProductPackageUpdate builder.
func (ppuo *ProductPackageUpdateOne) Where(ps ...predicate.ProductPackage) *ProductPackageUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *ProductPackageUpdateOne) Select(field string, fields ...string) *ProductPackageUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated ProductPackage entity.
func (ppuo *ProductPackageUpdateOne) Save(ctx context.Context) (*ProductPackage, error) {
	ppuo.defaults()
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *ProductPackageUpdateOne) SaveX(ctx context.Context) *ProductPackage {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *ProductPackageUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *ProductPackageUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *ProductPackageUpdateOne) defaults() {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		v := productpackage.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *ProductPackageUpdateOne) check() error {
	if v, ok := ppuo.mutation.GetType(); ok {
		if err := productpackage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.type": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.SoldAs(); ok {
		if err := productpackage.SoldAsValidator(v); err != nil {
			return &ValidationError{Name: "sold_as", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.sold_as": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.Name(); ok {
		if err := productpackage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.name": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.Description(); ok {
		if err := productpackage.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ProductPackage.description": %w`, err)}
		}
	}
	if _, ok := ppuo.mutation.CreatorID(); ppuo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductPackage.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppuo *ProductPackageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductPackageUpdateOne {
	ppuo.modifiers = append(ppuo.modifiers, modifiers...)
	return ppuo
}

func (ppuo *ProductPackageUpdateOne) sqlSave(ctx context.Context) (_node *ProductPackage, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productpackage.Table, productpackage.Columns, sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductPackage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpackage.FieldID)
		for _, f := range fields {
			if !productpackage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productpackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productpackage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.GetType(); ok {
		_spec.SetField(productpackage.FieldType, field.TypeEnum, value)
	}
	if value, ok := ppuo.mutation.SoldAs(); ok {
		_spec.SetField(productpackage.FieldSoldAs, field.TypeEnum, value)
	}
	if value, ok := ppuo.mutation.Name(); ok {
		_spec.SetField(productpackage.FieldName, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Description(); ok {
		_spec.SetField(productpackage.FieldDescription, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Features(); ok {
		_spec.SetField(productpackage.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := ppuo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, productpackage.FieldFeatures, value)
		})
	}
	if value, ok := ppuo.mutation.Price(); ok {
		_spec.SetField(productpackage.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedPrice(); ok {
		_spec.AddField(productpackage.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.Discontinued(); ok {
		_spec.SetField(productpackage.FieldDiscontinued, field.TypeBool, value)
	}
	if ppuo.mutation.DiscontinuedCleared() {
		_spec.ClearField(productpackage.FieldDiscontinued, field.TypeBool)
	}
	if ppuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productpackage.ItemsTable,
			Columns: productpackage.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ppuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productpackage.ItemsTable,
			Columns: productpackage.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productpackage.ItemsTable,
			Columns: productpackage.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productpackage.CreatorTable,
			Columns: []string{productpackage.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productpackage.CreatorTable,
			Columns: []string{productpackage.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ppuo.modifiers...)
	_node = &ProductPackage{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}

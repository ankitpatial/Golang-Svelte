// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/contactus"
	"roofix/ent/partner"
	"roofix/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ContactUs is the model entity for the ContactUs schema.
type ContactUs struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactUsQuery when eager-loading is set.
	Edges        ContactUsEdges `json:"edges"`
	partner_id   *string
	creator_id   *string
	selectValues sql.SelectValues
}

// ContactUsEdges holds the relations/edges for other nodes in the graph.
type ContactUsEdges struct {
	// Partner holds the value of the partner edge.
	Partner *Partner `json:"partner,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactUsEdges) PartnerOrErr() (*Partner, error) {
	if e.loadedTypes[0] {
		if e.Partner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactUsEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactUs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactus.FieldID, contactus.FieldReason:
			values[i] = new(sql.NullString)
		case contactus.FieldCreatedAt, contactus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case contactus.ForeignKeys[0]: // partner_id
			values[i] = new(sql.NullString)
		case contactus.ForeignKeys[1]: // creator_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactUs fields.
func (cu *ContactUs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactus.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cu.ID = value.String
			}
		case contactus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cu.CreatedAt = value.Time
			}
		case contactus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cu.UpdatedAt = value.Time
			}
		case contactus.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				cu.Reason = value.String
			}
		case contactus.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				cu.partner_id = new(string)
				*cu.partner_id = value.String
			}
		case contactus.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				cu.creator_id = new(string)
				*cu.creator_id = value.String
			}
		default:
			cu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContactUs.
// This includes values selected through modifiers, order, etc.
func (cu *ContactUs) Value(name string) (ent.Value, error) {
	return cu.selectValues.Get(name)
}

// QueryPartner queries the "partner" edge of the ContactUs entity.
func (cu *ContactUs) QueryPartner() *PartnerQuery {
	return NewContactUsClient(cu.config).QueryPartner(cu)
}

// QueryCreator queries the "creator" edge of the ContactUs entity.
func (cu *ContactUs) QueryCreator() *UserQuery {
	return NewContactUsClient(cu.config).QueryCreator(cu)
}

// Update returns a builder for updating this ContactUs.
// Note that you need to call ContactUs.Unwrap() before calling this method if this ContactUs
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *ContactUs) Update() *ContactUsUpdateOne {
	return NewContactUsClient(cu.config).UpdateOne(cu)
}

// Unwrap unwraps the ContactUs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *ContactUs) Unwrap() *ContactUs {
	_tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactUs is not a transactional entity")
	}
	cu.config.driver = _tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *ContactUs) String() string {
	var builder strings.Builder
	builder.WriteString("ContactUs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(cu.Reason)
	builder.WriteByte(')')
	return builder.String()
}

// ContactUsSlice is a parsable slice of ContactUs.
type ContactUsSlice []*ContactUs

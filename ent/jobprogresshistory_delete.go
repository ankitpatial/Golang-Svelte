// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobProgressHistoryDelete is the builder for deleting a JobProgressHistory entity.
type JobProgressHistoryDelete struct {
	config
	hooks    []Hook
	mutation *JobProgressHistoryMutation
}

// Where appends a list predicates to the JobProgressHistoryDelete builder.
func (jphd *JobProgressHistoryDelete) Where(ps ...predicate.JobProgressHistory) *JobProgressHistoryDelete {
	jphd.mutation.Where(ps...)
	return jphd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jphd *JobProgressHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jphd.sqlExec, jphd.mutation, jphd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jphd *JobProgressHistoryDelete) ExecX(ctx context.Context) int {
	n, err := jphd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jphd *JobProgressHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobprogresshistory.Table, sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString))
	if ps := jphd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jphd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jphd.mutation.done = true
	return affected, err
}

// JobProgressHistoryDeleteOne is the builder for deleting a single JobProgressHistory entity.
type JobProgressHistoryDeleteOne struct {
	jphd *JobProgressHistoryDelete
}

// Where appends a list predicates to the JobProgressHistoryDelete builder.
func (jphdo *JobProgressHistoryDeleteOne) Where(ps ...predicate.JobProgressHistory) *JobProgressHistoryDeleteOne {
	jphdo.jphd.mutation.Where(ps...)
	return jphdo
}

// Exec executes the deletion query.
func (jphdo *JobProgressHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := jphdo.jphd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobprogresshistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jphdo *JobProgressHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := jphdo.Exec(ctx); err != nil {
		panic(err)
	}
}

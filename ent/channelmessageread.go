// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChannelMessageRead is the model entity for the ChannelMessageRead schema.
type ChannelMessageRead struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// Read holds the value of the "read" field.
	Read bool `json:"read,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelMessageReadQuery when eager-loading is set.
	Edges              ChannelMessageReadEdges `json:"edges"`
	channel_message_id *string
	user_id            *string
	selectValues       sql.SelectValues
}

// ChannelMessageReadEdges holds the relations/edges for other nodes in the graph.
type ChannelMessageReadEdges struct {
	// ChannelMessage holds the value of the channel_message edge.
	ChannelMessage *ChannelMessage `json:"channel_message,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ChannelMessageOrErr returns the ChannelMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelMessageReadEdges) ChannelMessageOrErr() (*ChannelMessage, error) {
	if e.loadedTypes[0] {
		if e.ChannelMessage == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channelmessage.Label}
		}
		return e.ChannelMessage, nil
	}
	return nil, &NotLoadedError{edge: "channel_message"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelMessageReadEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChannelMessageRead) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channelmessageread.FieldRead:
			values[i] = new(sql.NullBool)
		case channelmessageread.FieldID:
			values[i] = new(sql.NullString)
		case channelmessageread.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case channelmessageread.ForeignKeys[0]: // channel_message_id
			values[i] = new(sql.NullString)
		case channelmessageread.ForeignKeys[1]: // user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChannelMessageRead fields.
func (cmr *ChannelMessageRead) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channelmessageread.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cmr.ID = value.String
			}
		case channelmessageread.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cmr.CreatedAt = value.Time
			}
		case channelmessageread.FieldRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field read", values[i])
			} else if value.Valid {
				cmr.Read = value.Bool
			}
		case channelmessageread.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_message_id", values[i])
			} else if value.Valid {
				cmr.channel_message_id = new(string)
				*cmr.channel_message_id = value.String
			}
		case channelmessageread.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cmr.user_id = new(string)
				*cmr.user_id = value.String
			}
		default:
			cmr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChannelMessageRead.
// This includes values selected through modifiers, order, etc.
func (cmr *ChannelMessageRead) Value(name string) (ent.Value, error) {
	return cmr.selectValues.Get(name)
}

// QueryChannelMessage queries the "channel_message" edge of the ChannelMessageRead entity.
func (cmr *ChannelMessageRead) QueryChannelMessage() *ChannelMessageQuery {
	return NewChannelMessageReadClient(cmr.config).QueryChannelMessage(cmr)
}

// QueryUser queries the "user" edge of the ChannelMessageRead entity.
func (cmr *ChannelMessageRead) QueryUser() *UserQuery {
	return NewChannelMessageReadClient(cmr.config).QueryUser(cmr)
}

// Update returns a builder for updating this ChannelMessageRead.
// Note that you need to call ChannelMessageRead.Unwrap() before calling this method if this ChannelMessageRead
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmr *ChannelMessageRead) Update() *ChannelMessageReadUpdateOne {
	return NewChannelMessageReadClient(cmr.config).UpdateOne(cmr)
}

// Unwrap unwraps the ChannelMessageRead entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmr *ChannelMessageRead) Unwrap() *ChannelMessageRead {
	_tx, ok := cmr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChannelMessageRead is not a transactional entity")
	}
	cmr.config.driver = _tx.drv
	return cmr
}

// String implements the fmt.Stringer.
func (cmr *ChannelMessageRead) String() string {
	var builder strings.Builder
	builder.WriteString("ChannelMessageRead(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cmr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cmr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("read=")
	builder.WriteString(fmt.Sprintf("%v", cmr.Read))
	builder.WriteByte(')')
	return builder.String()
}

// ChannelMessageReads is a parsable slice of ChannelMessageRead.
type ChannelMessageReads []*ChannelMessageRead

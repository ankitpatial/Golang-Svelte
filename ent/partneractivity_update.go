// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerActivityUpdate is the builder for updating PartnerActivity entities.
type PartnerActivityUpdate struct {
	config
	hooks     []Hook
	mutation  *PartnerActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartnerActivityUpdate builder.
func (pau *PartnerActivityUpdate) Where(ps ...predicate.PartnerActivity) *PartnerActivityUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetDescription sets the "description" field.
func (pau *PartnerActivityUpdate) SetDescription(s string) *PartnerActivityUpdate {
	pau.mutation.SetDescription(s)
	return pau
}

// SetRaw sets the "raw" field.
func (pau *PartnerActivityUpdate) SetRaw(m map[string]interface{}) *PartnerActivityUpdate {
	pau.mutation.SetRaw(m)
	return pau
}

// ClearRaw clears the value of the "raw" field.
func (pau *PartnerActivityUpdate) ClearRaw() *PartnerActivityUpdate {
	pau.mutation.ClearRaw()
	return pau
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pau *PartnerActivityUpdate) SetPartnerID(id string) *PartnerActivityUpdate {
	pau.mutation.SetPartnerID(id)
	return pau
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (pau *PartnerActivityUpdate) SetNillablePartnerID(id *string) *PartnerActivityUpdate {
	if id != nil {
		pau = pau.SetPartnerID(*id)
	}
	return pau
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pau *PartnerActivityUpdate) SetPartner(p *Partner) *PartnerActivityUpdate {
	return pau.SetPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (pau *PartnerActivityUpdate) SetCreatorID(id string) *PartnerActivityUpdate {
	pau.mutation.SetCreatorID(id)
	return pau
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (pau *PartnerActivityUpdate) SetNillableCreatorID(id *string) *PartnerActivityUpdate {
	if id != nil {
		pau = pau.SetCreatorID(*id)
	}
	return pau
}

// SetCreator sets the "creator" edge to the User entity.
func (pau *PartnerActivityUpdate) SetCreator(u *User) *PartnerActivityUpdate {
	return pau.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (pau *PartnerActivityUpdate) SetCreatorAPIID(id string) *PartnerActivityUpdate {
	pau.mutation.SetCreatorAPIID(id)
	return pau
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (pau *PartnerActivityUpdate) SetNillableCreatorAPIID(id *string) *PartnerActivityUpdate {
	if id != nil {
		pau = pau.SetCreatorAPIID(*id)
	}
	return pau
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (pau *PartnerActivityUpdate) SetCreatorAPI(a *ApiUser) *PartnerActivityUpdate {
	return pau.SetCreatorAPIID(a.ID)
}

// Mutation returns the PartnerActivityMutation object of the builder.
func (pau *PartnerActivityUpdate) Mutation() *PartnerActivityMutation {
	return pau.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pau *PartnerActivityUpdate) ClearPartner() *PartnerActivityUpdate {
	pau.mutation.ClearPartner()
	return pau
}

// ClearCreator clears the "creator" edge to the User entity.
func (pau *PartnerActivityUpdate) ClearCreator() *PartnerActivityUpdate {
	pau.mutation.ClearCreator()
	return pau
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (pau *PartnerActivityUpdate) ClearCreatorAPI() *PartnerActivityUpdate {
	pau.mutation.ClearCreatorAPI()
	return pau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PartnerActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PartnerActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PartnerActivityUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PartnerActivityUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pau *PartnerActivityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerActivityUpdate {
	pau.modifiers = append(pau.modifiers, modifiers...)
	return pau
}

func (pau *PartnerActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(partneractivity.Table, partneractivity.Columns, sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.Description(); ok {
		_spec.SetField(partneractivity.FieldDescription, field.TypeString, value)
	}
	if value, ok := pau.mutation.Raw(); ok {
		_spec.SetField(partneractivity.FieldRaw, field.TypeJSON, value)
	}
	if pau.mutation.RawCleared() {
		_spec.ClearField(partneractivity.FieldRaw, field.TypeJSON)
	}
	if pau.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.PartnerTable,
			Columns: []string{partneractivity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.PartnerTable,
			Columns: []string{partneractivity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorTable,
			Columns: []string{partneractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorTable,
			Columns: []string{partneractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorAPITable,
			Columns: []string{partneractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorAPITable,
			Columns: []string{partneractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partneractivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PartnerActivityUpdateOne is the builder for updating a single PartnerActivity entity.
type PartnerActivityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartnerActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDescription sets the "description" field.
func (pauo *PartnerActivityUpdateOne) SetDescription(s string) *PartnerActivityUpdateOne {
	pauo.mutation.SetDescription(s)
	return pauo
}

// SetRaw sets the "raw" field.
func (pauo *PartnerActivityUpdateOne) SetRaw(m map[string]interface{}) *PartnerActivityUpdateOne {
	pauo.mutation.SetRaw(m)
	return pauo
}

// ClearRaw clears the value of the "raw" field.
func (pauo *PartnerActivityUpdateOne) ClearRaw() *PartnerActivityUpdateOne {
	pauo.mutation.ClearRaw()
	return pauo
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pauo *PartnerActivityUpdateOne) SetPartnerID(id string) *PartnerActivityUpdateOne {
	pauo.mutation.SetPartnerID(id)
	return pauo
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (pauo *PartnerActivityUpdateOne) SetNillablePartnerID(id *string) *PartnerActivityUpdateOne {
	if id != nil {
		pauo = pauo.SetPartnerID(*id)
	}
	return pauo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pauo *PartnerActivityUpdateOne) SetPartner(p *Partner) *PartnerActivityUpdateOne {
	return pauo.SetPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (pauo *PartnerActivityUpdateOne) SetCreatorID(id string) *PartnerActivityUpdateOne {
	pauo.mutation.SetCreatorID(id)
	return pauo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (pauo *PartnerActivityUpdateOne) SetNillableCreatorID(id *string) *PartnerActivityUpdateOne {
	if id != nil {
		pauo = pauo.SetCreatorID(*id)
	}
	return pauo
}

// SetCreator sets the "creator" edge to the User entity.
func (pauo *PartnerActivityUpdateOne) SetCreator(u *User) *PartnerActivityUpdateOne {
	return pauo.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (pauo *PartnerActivityUpdateOne) SetCreatorAPIID(id string) *PartnerActivityUpdateOne {
	pauo.mutation.SetCreatorAPIID(id)
	return pauo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (pauo *PartnerActivityUpdateOne) SetNillableCreatorAPIID(id *string) *PartnerActivityUpdateOne {
	if id != nil {
		pauo = pauo.SetCreatorAPIID(*id)
	}
	return pauo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (pauo *PartnerActivityUpdateOne) SetCreatorAPI(a *ApiUser) *PartnerActivityUpdateOne {
	return pauo.SetCreatorAPIID(a.ID)
}

// Mutation returns the PartnerActivityMutation object of the builder.
func (pauo *PartnerActivityUpdateOne) Mutation() *PartnerActivityMutation {
	return pauo.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pauo *PartnerActivityUpdateOne) ClearPartner() *PartnerActivityUpdateOne {
	pauo.mutation.ClearPartner()
	return pauo
}

// ClearCreator clears the "creator" edge to the User entity.
func (pauo *PartnerActivityUpdateOne) ClearCreator() *PartnerActivityUpdateOne {
	pauo.mutation.ClearCreator()
	return pauo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (pauo *PartnerActivityUpdateOne) ClearCreatorAPI() *PartnerActivityUpdateOne {
	pauo.mutation.ClearCreatorAPI()
	return pauo
}

// Where appends a list predicates to the PartnerActivityUpdate builder.
func (pauo *PartnerActivityUpdateOne) Where(ps ...predicate.PartnerActivity) *PartnerActivityUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PartnerActivityUpdateOne) Select(field string, fields ...string) *PartnerActivityUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PartnerActivity entity.
func (pauo *PartnerActivityUpdateOne) Save(ctx context.Context) (*PartnerActivity, error) {
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PartnerActivityUpdateOne) SaveX(ctx context.Context) *PartnerActivity {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PartnerActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PartnerActivityUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pauo *PartnerActivityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerActivityUpdateOne {
	pauo.modifiers = append(pauo.modifiers, modifiers...)
	return pauo
}

func (pauo *PartnerActivityUpdateOne) sqlSave(ctx context.Context) (_node *PartnerActivity, err error) {
	_spec := sqlgraph.NewUpdateSpec(partneractivity.Table, partneractivity.Columns, sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnerActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partneractivity.FieldID)
		for _, f := range fields {
			if !partneractivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partneractivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.Description(); ok {
		_spec.SetField(partneractivity.FieldDescription, field.TypeString, value)
	}
	if value, ok := pauo.mutation.Raw(); ok {
		_spec.SetField(partneractivity.FieldRaw, field.TypeJSON, value)
	}
	if pauo.mutation.RawCleared() {
		_spec.ClearField(partneractivity.FieldRaw, field.TypeJSON)
	}
	if pauo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.PartnerTable,
			Columns: []string{partneractivity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.PartnerTable,
			Columns: []string{partneractivity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorTable,
			Columns: []string{partneractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorTable,
			Columns: []string{partneractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorAPITable,
			Columns: []string{partneractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorAPITable,
			Columns: []string{partneractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pauo.modifiers...)
	_node = &PartnerActivity{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partneractivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}

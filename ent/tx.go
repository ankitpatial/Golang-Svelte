// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// ApiAccess is the client for interacting with the ApiAccess builders.
	ApiAccess *ApiAccessClient
	// ApiUser is the client for interacting with the ApiUser builders.
	ApiUser *ApiUserClient
	// ApiUserToken is the client for interacting with the ApiUserToken builders.
	ApiUserToken *ApiUserTokenClient
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// ChannelMessage is the client for interacting with the ChannelMessage builders.
	ChannelMessage *ChannelMessageClient
	// ChannelMessageRead is the client for interacting with the ChannelMessageRead builders.
	ChannelMessageRead *ChannelMessageReadClient
	// ChannelSub is the client for interacting with the ChannelSub builders.
	ChannelSub *ChannelSubClient
	// ContactUs is the client for interacting with the ContactUs builders.
	ContactUs *ContactUsClient
	// Document is the client for interacting with the Document builders.
	Document *DocumentClient
	// Estimate is the client for interacting with the Estimate builders.
	Estimate *EstimateClient
	// EstimateActivity is the client for interacting with the EstimateActivity builders.
	EstimateActivity *EstimateActivityClient
	// HomeOwner is the client for interacting with the HomeOwner builders.
	HomeOwner *HomeOwnerClient
	// InstallationJob is the client for interacting with the InstallationJob builders.
	InstallationJob *InstallationJobClient
	// InstallationJobItem is the client for interacting with the InstallationJobItem builders.
	InstallationJobItem *InstallationJobItemClient
	// InstallationJobProgress is the client for interacting with the InstallationJobProgress builders.
	InstallationJobProgress *InstallationJobProgressClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// JobActivity is the client for interacting with the JobActivity builders.
	JobActivity *JobActivityClient
	// JobAssignmentHistory is the client for interacting with the JobAssignmentHistory builders.
	JobAssignmentHistory *JobAssignmentHistoryClient
	// JobDocURL is the client for interacting with the JobDocURL builders.
	JobDocURL *JobDocURLClient
	// JobNote is the client for interacting with the JobNote builders.
	JobNote *JobNoteClient
	// JobProgressHistory is the client for interacting with the JobProgressHistory builders.
	JobProgressHistory *JobProgressHistoryClient
	// NotifySetting is the client for interacting with the NotifySetting builders.
	NotifySetting *NotifySettingClient
	// OptionList is the client for interacting with the OptionList builders.
	OptionList *OptionListClient
	// Partner is the client for interacting with the Partner builders.
	Partner *PartnerClient
	// PartnerActivity is the client for interacting with the PartnerActivity builders.
	PartnerActivity *PartnerActivityClient
	// PartnerContact is the client for interacting with the PartnerContact builders.
	PartnerContact *PartnerContactClient
	// PartnerService is the client for interacting with the PartnerService builders.
	PartnerService *PartnerServiceClient
	// PartnerServiceCity is the client for interacting with the PartnerServiceCity builders.
	PartnerServiceCity *PartnerServiceCityClient
	// PartnerServiceState is the client for interacting with the PartnerServiceState builders.
	PartnerServiceState *PartnerServiceStateClient
	// PartnerTrainingVideo is the client for interacting with the PartnerTrainingVideo builders.
	PartnerTrainingVideo *PartnerTrainingVideoClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PostalCode is the client for interacting with the PostalCode builders.
	PostalCode *PostalCodeClient
	// Pricing is the client for interacting with the Pricing builders.
	Pricing *PricingClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductPackage is the client for interacting with the ProductPackage builders.
	ProductPackage *ProductPackageClient
	// Survey is the client for interacting with the Survey builders.
	Survey *SurveyClient
	// SurveyProgress is the client for interacting with the SurveyProgress builders.
	SurveyProgress *SurveyProgressClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// TrainingCourse is the client for interacting with the TrainingCourse builders.
	TrainingCourse *TrainingCourseClient
	// TrainingVideo is the client for interacting with the TrainingVideo builders.
	TrainingVideo *TrainingVideoClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserActivity is the client for interacting with the UserActivity builders.
	UserActivity *UserActivityClient
	// UserAuth is the client for interacting with the UserAuth builders.
	UserAuth *UserAuthClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
	// UserSessionSocket is the client for interacting with the UserSessionSocket builders.
	UserSessionSocket *UserSessionSocketClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.ApiAccess = NewApiAccessClient(tx.config)
	tx.ApiUser = NewApiUserClient(tx.config)
	tx.ApiUserToken = NewApiUserTokenClient(tx.config)
	tx.AuditLog = NewAuditLogClient(tx.config)
	tx.Channel = NewChannelClient(tx.config)
	tx.ChannelMessage = NewChannelMessageClient(tx.config)
	tx.ChannelMessageRead = NewChannelMessageReadClient(tx.config)
	tx.ChannelSub = NewChannelSubClient(tx.config)
	tx.ContactUs = NewContactUsClient(tx.config)
	tx.Document = NewDocumentClient(tx.config)
	tx.Estimate = NewEstimateClient(tx.config)
	tx.EstimateActivity = NewEstimateActivityClient(tx.config)
	tx.HomeOwner = NewHomeOwnerClient(tx.config)
	tx.InstallationJob = NewInstallationJobClient(tx.config)
	tx.InstallationJobItem = NewInstallationJobItemClient(tx.config)
	tx.InstallationJobProgress = NewInstallationJobProgressClient(tx.config)
	tx.Job = NewJobClient(tx.config)
	tx.JobActivity = NewJobActivityClient(tx.config)
	tx.JobAssignmentHistory = NewJobAssignmentHistoryClient(tx.config)
	tx.JobDocURL = NewJobDocURLClient(tx.config)
	tx.JobNote = NewJobNoteClient(tx.config)
	tx.JobProgressHistory = NewJobProgressHistoryClient(tx.config)
	tx.NotifySetting = NewNotifySettingClient(tx.config)
	tx.OptionList = NewOptionListClient(tx.config)
	tx.Partner = NewPartnerClient(tx.config)
	tx.PartnerActivity = NewPartnerActivityClient(tx.config)
	tx.PartnerContact = NewPartnerContactClient(tx.config)
	tx.PartnerService = NewPartnerServiceClient(tx.config)
	tx.PartnerServiceCity = NewPartnerServiceCityClient(tx.config)
	tx.PartnerServiceState = NewPartnerServiceStateClient(tx.config)
	tx.PartnerTrainingVideo = NewPartnerTrainingVideoClient(tx.config)
	tx.Payment = NewPaymentClient(tx.config)
	tx.PostalCode = NewPostalCodeClient(tx.config)
	tx.Pricing = NewPricingClient(tx.config)
	tx.Product = NewProductClient(tx.config)
	tx.ProductPackage = NewProductPackageClient(tx.config)
	tx.Survey = NewSurveyClient(tx.config)
	tx.SurveyProgress = NewSurveyProgressClient(tx.config)
	tx.Token = NewTokenClient(tx.config)
	tx.TrainingCourse = NewTrainingCourseClient(tx.config)
	tx.TrainingVideo = NewTrainingVideoClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.UserActivity = NewUserActivityClient(tx.config)
	tx.UserAuth = NewUserAuthClient(tx.config)
	tx.UserSession = NewUserSessionClient(tx.config)
	tx.UserSessionSocket = NewUserSessionSocketClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: ApiAccess.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

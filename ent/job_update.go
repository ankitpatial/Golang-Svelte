// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/payment"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks     []Hook
	mutation  *JobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetProgress sets the "progress" field.
func (ju *JobUpdate) SetProgress(ep enum.JobProgress) *JobUpdate {
	ju.mutation.SetProgress(ep)
	return ju
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (ju *JobUpdate) SetNillableProgress(ep *enum.JobProgress) *JobUpdate {
	if ep != nil {
		ju.SetProgress(*ep)
	}
	return ju
}

// ClearProgress clears the value of the "progress" field.
func (ju *JobUpdate) ClearProgress() *JobUpdate {
	ju.mutation.ClearProgress()
	return ju
}

// SetProgressAt sets the "progress_at" field.
func (ju *JobUpdate) SetProgressAt(t time.Time) *JobUpdate {
	ju.mutation.SetProgressAt(t)
	return ju
}

// SetNillableProgressAt sets the "progress_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableProgressAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetProgressAt(*t)
	}
	return ju
}

// ClearProgressAt clears the value of the "progress_at" field.
func (ju *JobUpdate) ClearProgressAt() *JobUpdate {
	ju.mutation.ClearProgressAt()
	return ju
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (ju *JobUpdate) SetProgressFlagAt(t time.Time) *JobUpdate {
	ju.mutation.SetProgressFlagAt(t)
	return ju
}

// SetNillableProgressFlagAt sets the "progress_flag_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableProgressFlagAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetProgressFlagAt(*t)
	}
	return ju
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (ju *JobUpdate) ClearProgressFlagAt() *JobUpdate {
	ju.mutation.ClearProgressFlagAt()
	return ju
}

// SetRegionID sets the "region_id" field.
func (ju *JobUpdate) SetRegionID(u uint8) *JobUpdate {
	ju.mutation.ResetRegionID()
	ju.mutation.SetRegionID(u)
	return ju
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRegionID(u *uint8) *JobUpdate {
	if u != nil {
		ju.SetRegionID(*u)
	}
	return ju
}

// AddRegionID adds u to the "region_id" field.
func (ju *JobUpdate) AddRegionID(u int8) *JobUpdate {
	ju.mutation.AddRegionID(u)
	return ju
}

// ClearRegionID clears the value of the "region_id" field.
func (ju *JobUpdate) ClearRegionID() *JobUpdate {
	ju.mutation.ClearRegionID()
	return ju
}

// SetCompanyRefID sets the "company_ref_id" field.
func (ju *JobUpdate) SetCompanyRefID(s string) *JobUpdate {
	ju.mutation.SetCompanyRefID(s)
	return ju
}

// SetNillableCompanyRefID sets the "company_ref_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCompanyRefID(s *string) *JobUpdate {
	if s != nil {
		ju.SetCompanyRefID(*s)
	}
	return ju
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (ju *JobUpdate) ClearCompanyRefID() *JobUpdate {
	ju.mutation.ClearCompanyRefID()
	return ju
}

// SetCompanyName sets the "company_name" field.
func (ju *JobUpdate) SetCompanyName(s string) *JobUpdate {
	ju.mutation.SetCompanyName(s)
	return ju
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCompanyName(s *string) *JobUpdate {
	if s != nil {
		ju.SetCompanyName(*s)
	}
	return ju
}

// ClearCompanyName clears the value of the "company_name" field.
func (ju *JobUpdate) ClearCompanyName() *JobUpdate {
	ju.mutation.ClearCompanyName()
	return ju
}

// SetPrice sets the "price" field.
func (ju *JobUpdate) SetPrice(f float64) *JobUpdate {
	ju.mutation.ResetPrice()
	ju.mutation.SetPrice(f)
	return ju
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ju *JobUpdate) SetNillablePrice(f *float64) *JobUpdate {
	if f != nil {
		ju.SetPrice(*f)
	}
	return ju
}

// AddPrice adds f to the "price" field.
func (ju *JobUpdate) AddPrice(f float64) *JobUpdate {
	ju.mutation.AddPrice(f)
	return ju
}

// SetWorkOrderPrice sets the "work_order_price" field.
func (ju *JobUpdate) SetWorkOrderPrice(f float64) *JobUpdate {
	ju.mutation.ResetWorkOrderPrice()
	ju.mutation.SetWorkOrderPrice(f)
	return ju
}

// SetNillableWorkOrderPrice sets the "work_order_price" field if the given value is not nil.
func (ju *JobUpdate) SetNillableWorkOrderPrice(f *float64) *JobUpdate {
	if f != nil {
		ju.SetWorkOrderPrice(*f)
	}
	return ju
}

// AddWorkOrderPrice adds f to the "work_order_price" field.
func (ju *JobUpdate) AddWorkOrderPrice(f float64) *JobUpdate {
	ju.mutation.AddWorkOrderPrice(f)
	return ju
}

// SetContractPrice sets the "contract_price" field.
func (ju *JobUpdate) SetContractPrice(f float64) *JobUpdate {
	ju.mutation.ResetContractPrice()
	ju.mutation.SetContractPrice(f)
	return ju
}

// SetNillableContractPrice sets the "contract_price" field if the given value is not nil.
func (ju *JobUpdate) SetNillableContractPrice(f *float64) *JobUpdate {
	if f != nil {
		ju.SetContractPrice(*f)
	}
	return ju
}

// AddContractPrice adds f to the "contract_price" field.
func (ju *JobUpdate) AddContractPrice(f float64) *JobUpdate {
	ju.mutation.AddContractPrice(f)
	return ju
}

// ClearContractPrice clears the value of the "contract_price" field.
func (ju *JobUpdate) ClearContractPrice() *JobUpdate {
	ju.mutation.ClearContractPrice()
	return ju
}

// SetChangeOrderPrice sets the "change_order_price" field.
func (ju *JobUpdate) SetChangeOrderPrice(f float64) *JobUpdate {
	ju.mutation.ResetChangeOrderPrice()
	ju.mutation.SetChangeOrderPrice(f)
	return ju
}

// SetNillableChangeOrderPrice sets the "change_order_price" field if the given value is not nil.
func (ju *JobUpdate) SetNillableChangeOrderPrice(f *float64) *JobUpdate {
	if f != nil {
		ju.SetChangeOrderPrice(*f)
	}
	return ju
}

// AddChangeOrderPrice adds f to the "change_order_price" field.
func (ju *JobUpdate) AddChangeOrderPrice(f float64) *JobUpdate {
	ju.mutation.AddChangeOrderPrice(f)
	return ju
}

// ClearChangeOrderPrice clears the value of the "change_order_price" field.
func (ju *JobUpdate) ClearChangeOrderPrice() *JobUpdate {
	ju.mutation.ClearChangeOrderPrice()
	return ju
}

// SetNote sets the "note" field.
func (ju *JobUpdate) SetNote(s string) *JobUpdate {
	ju.mutation.SetNote(s)
	return ju
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ju *JobUpdate) SetNillableNote(s *string) *JobUpdate {
	if s != nil {
		ju.SetNote(*s)
	}
	return ju
}

// ClearNote clears the value of the "note" field.
func (ju *JobUpdate) ClearNote() *JobUpdate {
	ju.mutation.ClearNote()
	return ju
}

// SetShingleColor sets the "shingle_color" field.
func (ju *JobUpdate) SetShingleColor(s string) *JobUpdate {
	ju.mutation.SetShingleColor(s)
	return ju
}

// SetNillableShingleColor sets the "shingle_color" field if the given value is not nil.
func (ju *JobUpdate) SetNillableShingleColor(s *string) *JobUpdate {
	if s != nil {
		ju.SetShingleColor(*s)
	}
	return ju
}

// ClearShingleColor clears the value of the "shingle_color" field.
func (ju *JobUpdate) ClearShingleColor() *JobUpdate {
	ju.mutation.ClearShingleColor()
	return ju
}

// SetPermitRequired sets the "permit_required" field.
func (ju *JobUpdate) SetPermitRequired(b bool) *JobUpdate {
	ju.mutation.SetPermitRequired(b)
	return ju
}

// SetNillablePermitRequired sets the "permit_required" field if the given value is not nil.
func (ju *JobUpdate) SetNillablePermitRequired(b *bool) *JobUpdate {
	if b != nil {
		ju.SetPermitRequired(*b)
	}
	return ju
}

// ClearPermitRequired clears the value of the "permit_required" field.
func (ju *JobUpdate) ClearPermitRequired() *JobUpdate {
	ju.mutation.ClearPermitRequired()
	return ju
}

// SetInspectionRequired sets the "inspection_required" field.
func (ju *JobUpdate) SetInspectionRequired(b bool) *JobUpdate {
	ju.mutation.SetInspectionRequired(b)
	return ju
}

// SetNillableInspectionRequired sets the "inspection_required" field if the given value is not nil.
func (ju *JobUpdate) SetNillableInspectionRequired(b *bool) *JobUpdate {
	if b != nil {
		ju.SetInspectionRequired(*b)
	}
	return ju
}

// ClearInspectionRequired clears the value of the "inspection_required" field.
func (ju *JobUpdate) ClearInspectionRequired() *JobUpdate {
	ju.mutation.ClearInspectionRequired()
	return ju
}

// SetInspectionDate sets the "inspection_date" field.
func (ju *JobUpdate) SetInspectionDate(t time.Time) *JobUpdate {
	ju.mutation.SetInspectionDate(t)
	return ju
}

// SetNillableInspectionDate sets the "inspection_date" field if the given value is not nil.
func (ju *JobUpdate) SetNillableInspectionDate(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetInspectionDate(*t)
	}
	return ju
}

// ClearInspectionDate clears the value of the "inspection_date" field.
func (ju *JobUpdate) ClearInspectionDate() *JobUpdate {
	ju.mutation.ClearInspectionDate()
	return ju
}

// SetProgressInspectionDate sets the "progress_inspection_date" field.
func (ju *JobUpdate) SetProgressInspectionDate(t time.Time) *JobUpdate {
	ju.mutation.SetProgressInspectionDate(t)
	return ju
}

// SetNillableProgressInspectionDate sets the "progress_inspection_date" field if the given value is not nil.
func (ju *JobUpdate) SetNillableProgressInspectionDate(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetProgressInspectionDate(*t)
	}
	return ju
}

// ClearProgressInspectionDate clears the value of the "progress_inspection_date" field.
func (ju *JobUpdate) ClearProgressInspectionDate() *JobUpdate {
	ju.mutation.ClearProgressInspectionDate()
	return ju
}

// SetInstallDate sets the "install_date" field.
func (ju *JobUpdate) SetInstallDate(t time.Time) *JobUpdate {
	ju.mutation.SetInstallDate(t)
	return ju
}

// SetNillableInstallDate sets the "install_date" field if the given value is not nil.
func (ju *JobUpdate) SetNillableInstallDate(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetInstallDate(*t)
	}
	return ju
}

// ClearInstallDate clears the value of the "install_date" field.
func (ju *JobUpdate) ClearInstallDate() *JobUpdate {
	ju.mutation.ClearInstallDate()
	return ju
}

// SetCompletionDate sets the "completion_date" field.
func (ju *JobUpdate) SetCompletionDate(t time.Time) *JobUpdate {
	ju.mutation.SetCompletionDate(t)
	return ju
}

// SetNillableCompletionDate sets the "completion_date" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCompletionDate(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetCompletionDate(*t)
	}
	return ju
}

// ClearCompletionDate clears the value of the "completion_date" field.
func (ju *JobUpdate) ClearCompletionDate() *JobUpdate {
	ju.mutation.ClearCompletionDate()
	return ju
}

// SetMaterialDeliveryDate sets the "material_delivery_date" field.
func (ju *JobUpdate) SetMaterialDeliveryDate(t time.Time) *JobUpdate {
	ju.mutation.SetMaterialDeliveryDate(t)
	return ju
}

// SetNillableMaterialDeliveryDate sets the "material_delivery_date" field if the given value is not nil.
func (ju *JobUpdate) SetNillableMaterialDeliveryDate(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetMaterialDeliveryDate(*t)
	}
	return ju
}

// ClearMaterialDeliveryDate clears the value of the "material_delivery_date" field.
func (ju *JobUpdate) ClearMaterialDeliveryDate() *JobUpdate {
	ju.mutation.ClearMaterialDeliveryDate()
	return ju
}

// SetAgree sets the "agree" field.
func (ju *JobUpdate) SetAgree(b bool) *JobUpdate {
	ju.mutation.SetAgree(b)
	return ju
}

// SetNillableAgree sets the "agree" field if the given value is not nil.
func (ju *JobUpdate) SetNillableAgree(b *bool) *JobUpdate {
	if b != nil {
		ju.SetAgree(*b)
	}
	return ju
}

// ClearAgree clears the value of the "agree" field.
func (ju *JobUpdate) ClearAgree() *JobUpdate {
	ju.mutation.ClearAgree()
	return ju
}

// SetAgreeAt sets the "agree_at" field.
func (ju *JobUpdate) SetAgreeAt(t time.Time) *JobUpdate {
	ju.mutation.SetAgreeAt(t)
	return ju
}

// SetNillableAgreeAt sets the "agree_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableAgreeAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetAgreeAt(*t)
	}
	return ju
}

// ClearAgreeAt clears the value of the "agree_at" field.
func (ju *JobUpdate) ClearAgreeAt() *JobUpdate {
	ju.mutation.ClearAgreeAt()
	return ju
}

// SetPoNumber sets the "po_number" field.
func (ju *JobUpdate) SetPoNumber(s string) *JobUpdate {
	ju.mutation.SetPoNumber(s)
	return ju
}

// SetNillablePoNumber sets the "po_number" field if the given value is not nil.
func (ju *JobUpdate) SetNillablePoNumber(s *string) *JobUpdate {
	if s != nil {
		ju.SetPoNumber(*s)
	}
	return ju
}

// ClearPoNumber clears the value of the "po_number" field.
func (ju *JobUpdate) ClearPoNumber() *JobUpdate {
	ju.mutation.ClearPoNumber()
	return ju
}

// SetRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field.
func (ju *JobUpdate) SetRoofingPartnerAssignedAt(t time.Time) *JobUpdate {
	ju.mutation.SetRoofingPartnerAssignedAt(t)
	return ju
}

// SetNillableRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRoofingPartnerAssignedAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetRoofingPartnerAssignedAt(*t)
	}
	return ju
}

// ClearRoofingPartnerAssignedAt clears the value of the "roofing_partner_assigned_at" field.
func (ju *JobUpdate) ClearRoofingPartnerAssignedAt() *JobUpdate {
	ju.mutation.ClearRoofingPartnerAssignedAt()
	return ju
}

// SetRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field.
func (ju *JobUpdate) SetRoofingPartnerFlagAt(t time.Time) *JobUpdate {
	ju.mutation.SetRoofingPartnerFlagAt(t)
	return ju
}

// SetNillableRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRoofingPartnerFlagAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetRoofingPartnerFlagAt(*t)
	}
	return ju
}

// ClearRoofingPartnerFlagAt clears the value of the "roofing_partner_flag_at" field.
func (ju *JobUpdate) ClearRoofingPartnerFlagAt() *JobUpdate {
	ju.mutation.ClearRoofingPartnerFlagAt()
	return ju
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (ju *JobUpdate) AddPaymentIDs(ids ...string) *JobUpdate {
	ju.mutation.AddPaymentIDs(ids...)
	return ju
}

// AddPayments adds the "payments" edges to the Payment entity.
func (ju *JobUpdate) AddPayments(p ...*Payment) *JobUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ju.AddPaymentIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the JobActivity entity by IDs.
func (ju *JobUpdate) AddActivityIDs(ids ...string) *JobUpdate {
	ju.mutation.AddActivityIDs(ids...)
	return ju
}

// AddActivities adds the "activities" edges to the JobActivity entity.
func (ju *JobUpdate) AddActivities(j ...*JobActivity) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddActivityIDs(ids...)
}

// AddAssignmentHistoryIDs adds the "assignment_history" edge to the JobAssignmentHistory entity by IDs.
func (ju *JobUpdate) AddAssignmentHistoryIDs(ids ...string) *JobUpdate {
	ju.mutation.AddAssignmentHistoryIDs(ids...)
	return ju
}

// AddAssignmentHistory adds the "assignment_history" edges to the JobAssignmentHistory entity.
func (ju *JobUpdate) AddAssignmentHistory(j ...*JobAssignmentHistory) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddAssignmentHistoryIDs(ids...)
}

// AddProgressHistoryIDs adds the "progress_history" edge to the JobProgressHistory entity by IDs.
func (ju *JobUpdate) AddProgressHistoryIDs(ids ...string) *JobUpdate {
	ju.mutation.AddProgressHistoryIDs(ids...)
	return ju
}

// AddProgressHistory adds the "progress_history" edges to the JobProgressHistory entity.
func (ju *JobUpdate) AddProgressHistory(j ...*JobProgressHistory) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddProgressHistoryIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the JobNote entity by IDs.
func (ju *JobUpdate) AddNoteIDs(ids ...string) *JobUpdate {
	ju.mutation.AddNoteIDs(ids...)
	return ju
}

// AddNotes adds the "notes" edges to the JobNote entity.
func (ju *JobUpdate) AddNotes(j ...*JobNote) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddNoteIDs(ids...)
}

// AddDocURLIDs adds the "doc_urls" edge to the JobDocURL entity by IDs.
func (ju *JobUpdate) AddDocURLIDs(ids ...string) *JobUpdate {
	ju.mutation.AddDocURLIDs(ids...)
	return ju
}

// AddDocUrls adds the "doc_urls" edges to the JobDocURL entity.
func (ju *JobUpdate) AddDocUrls(j ...*JobDocURL) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddDocURLIDs(ids...)
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (ju *JobUpdate) SetEstimateID(id string) *JobUpdate {
	ju.mutation.SetEstimateID(id)
	return ju
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableEstimateID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetEstimateID(*id)
	}
	return ju
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (ju *JobUpdate) SetEstimate(e *Estimate) *JobUpdate {
	return ju.SetEstimateID(e.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (ju *JobUpdate) SetCreatorAPIID(id string) *JobUpdate {
	ju.mutation.SetCreatorAPIID(id)
	return ju
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatorAPIID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetCreatorAPIID(*id)
	}
	return ju
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (ju *JobUpdate) SetCreatorAPI(a *ApiUser) *JobUpdate {
	return ju.SetCreatorAPIID(a.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ju *JobUpdate) SetCreatorID(id string) *JobUpdate {
	ju.mutation.SetCreatorID(id)
	return ju
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatorID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetCreatorID(*id)
	}
	return ju
}

// SetCreator sets the "creator" edge to the User entity.
func (ju *JobUpdate) SetCreator(u *User) *JobUpdate {
	return ju.SetCreatorID(u.ID)
}

// SetHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID.
func (ju *JobUpdate) SetHomeOwnerID(id string) *JobUpdate {
	ju.mutation.SetHomeOwnerID(id)
	return ju
}

// SetNillableHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableHomeOwnerID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetHomeOwnerID(*id)
	}
	return ju
}

// SetHomeOwner sets the "home_owner" edge to the HomeOwner entity.
func (ju *JobUpdate) SetHomeOwner(h *HomeOwner) *JobUpdate {
	return ju.SetHomeOwnerID(h.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (ju *JobUpdate) SetSalesRepID(id string) *JobUpdate {
	ju.mutation.SetSalesRepID(id)
	return ju
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableSalesRepID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetSalesRepID(*id)
	}
	return ju
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (ju *JobUpdate) SetSalesRep(u *User) *JobUpdate {
	return ju.SetSalesRepID(u.ID)
}

// SetRequesterID sets the "requester" edge to the Partner entity by ID.
func (ju *JobUpdate) SetRequesterID(id string) *JobUpdate {
	ju.mutation.SetRequesterID(id)
	return ju
}

// SetNillableRequesterID sets the "requester" edge to the Partner entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableRequesterID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetRequesterID(*id)
	}
	return ju
}

// SetRequester sets the "requester" edge to the Partner entity.
func (ju *JobUpdate) SetRequester(p *Partner) *JobUpdate {
	return ju.SetRequesterID(p.ID)
}

// SetRoofingPartnerID sets the "roofing_partner" edge to the Partner entity by ID.
func (ju *JobUpdate) SetRoofingPartnerID(id string) *JobUpdate {
	ju.mutation.SetRoofingPartnerID(id)
	return ju
}

// SetNillableRoofingPartnerID sets the "roofing_partner" edge to the Partner entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableRoofingPartnerID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetRoofingPartnerID(*id)
	}
	return ju
}

// SetRoofingPartner sets the "roofing_partner" edge to the Partner entity.
func (ju *JobUpdate) SetRoofingPartner(p *Partner) *JobUpdate {
	return ju.SetRoofingPartnerID(p.ID)
}

// SetIntegrationPartnerID sets the "integration_partner" edge to the Partner entity by ID.
func (ju *JobUpdate) SetIntegrationPartnerID(id string) *JobUpdate {
	ju.mutation.SetIntegrationPartnerID(id)
	return ju
}

// SetNillableIntegrationPartnerID sets the "integration_partner" edge to the Partner entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableIntegrationPartnerID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetIntegrationPartnerID(*id)
	}
	return ju
}

// SetIntegrationPartner sets the "integration_partner" edge to the Partner entity.
func (ju *JobUpdate) SetIntegrationPartner(p *Partner) *JobUpdate {
	return ju.SetIntegrationPartnerID(p.ID)
}

// SetEpcPartnerID sets the "epc_partner" edge to the Partner entity by ID.
func (ju *JobUpdate) SetEpcPartnerID(id string) *JobUpdate {
	ju.mutation.SetEpcPartnerID(id)
	return ju
}

// SetNillableEpcPartnerID sets the "epc_partner" edge to the Partner entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableEpcPartnerID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetEpcPartnerID(*id)
	}
	return ju
}

// SetEpcPartner sets the "epc_partner" edge to the Partner entity.
func (ju *JobUpdate) SetEpcPartner(p *Partner) *JobUpdate {
	return ju.SetEpcPartnerID(p.ID)
}

// SetEpcID sets the "epc" edge to the OptionList entity by ID.
func (ju *JobUpdate) SetEpcID(id string) *JobUpdate {
	ju.mutation.SetEpcID(id)
	return ju
}

// SetNillableEpcID sets the "epc" edge to the OptionList entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableEpcID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetEpcID(*id)
	}
	return ju
}

// SetEpc sets the "epc" edge to the OptionList entity.
func (ju *JobUpdate) SetEpc(o *OptionList) *JobUpdate {
	return ju.SetEpcID(o.ID)
}

// SetEstimatePdfID sets the "estimate_pdf" edge to the Document entity by ID.
func (ju *JobUpdate) SetEstimatePdfID(id string) *JobUpdate {
	ju.mutation.SetEstimatePdfID(id)
	return ju
}

// SetNillableEstimatePdfID sets the "estimate_pdf" edge to the Document entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableEstimatePdfID(id *string) *JobUpdate {
	if id != nil {
		ju = ju.SetEstimatePdfID(*id)
	}
	return ju
}

// SetEstimatePdf sets the "estimate_pdf" edge to the Document entity.
func (ju *JobUpdate) SetEstimatePdf(d *Document) *JobUpdate {
	return ju.SetEstimatePdfID(d.ID)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (ju *JobUpdate) ClearPayments() *JobUpdate {
	ju.mutation.ClearPayments()
	return ju
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (ju *JobUpdate) RemovePaymentIDs(ids ...string) *JobUpdate {
	ju.mutation.RemovePaymentIDs(ids...)
	return ju
}

// RemovePayments removes "payments" edges to Payment entities.
func (ju *JobUpdate) RemovePayments(p ...*Payment) *JobUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ju.RemovePaymentIDs(ids...)
}

// ClearActivities clears all "activities" edges to the JobActivity entity.
func (ju *JobUpdate) ClearActivities() *JobUpdate {
	ju.mutation.ClearActivities()
	return ju
}

// RemoveActivityIDs removes the "activities" edge to JobActivity entities by IDs.
func (ju *JobUpdate) RemoveActivityIDs(ids ...string) *JobUpdate {
	ju.mutation.RemoveActivityIDs(ids...)
	return ju
}

// RemoveActivities removes "activities" edges to JobActivity entities.
func (ju *JobUpdate) RemoveActivities(j ...*JobActivity) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveActivityIDs(ids...)
}

// ClearAssignmentHistory clears all "assignment_history" edges to the JobAssignmentHistory entity.
func (ju *JobUpdate) ClearAssignmentHistory() *JobUpdate {
	ju.mutation.ClearAssignmentHistory()
	return ju
}

// RemoveAssignmentHistoryIDs removes the "assignment_history" edge to JobAssignmentHistory entities by IDs.
func (ju *JobUpdate) RemoveAssignmentHistoryIDs(ids ...string) *JobUpdate {
	ju.mutation.RemoveAssignmentHistoryIDs(ids...)
	return ju
}

// RemoveAssignmentHistory removes "assignment_history" edges to JobAssignmentHistory entities.
func (ju *JobUpdate) RemoveAssignmentHistory(j ...*JobAssignmentHistory) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveAssignmentHistoryIDs(ids...)
}

// ClearProgressHistory clears all "progress_history" edges to the JobProgressHistory entity.
func (ju *JobUpdate) ClearProgressHistory() *JobUpdate {
	ju.mutation.ClearProgressHistory()
	return ju
}

// RemoveProgressHistoryIDs removes the "progress_history" edge to JobProgressHistory entities by IDs.
func (ju *JobUpdate) RemoveProgressHistoryIDs(ids ...string) *JobUpdate {
	ju.mutation.RemoveProgressHistoryIDs(ids...)
	return ju
}

// RemoveProgressHistory removes "progress_history" edges to JobProgressHistory entities.
func (ju *JobUpdate) RemoveProgressHistory(j ...*JobProgressHistory) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveProgressHistoryIDs(ids...)
}

// ClearNotes clears all "notes" edges to the JobNote entity.
func (ju *JobUpdate) ClearNotes() *JobUpdate {
	ju.mutation.ClearNotes()
	return ju
}

// RemoveNoteIDs removes the "notes" edge to JobNote entities by IDs.
func (ju *JobUpdate) RemoveNoteIDs(ids ...string) *JobUpdate {
	ju.mutation.RemoveNoteIDs(ids...)
	return ju
}

// RemoveNotes removes "notes" edges to JobNote entities.
func (ju *JobUpdate) RemoveNotes(j ...*JobNote) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveNoteIDs(ids...)
}

// ClearDocUrls clears all "doc_urls" edges to the JobDocURL entity.
func (ju *JobUpdate) ClearDocUrls() *JobUpdate {
	ju.mutation.ClearDocUrls()
	return ju
}

// RemoveDocURLIDs removes the "doc_urls" edge to JobDocURL entities by IDs.
func (ju *JobUpdate) RemoveDocURLIDs(ids ...string) *JobUpdate {
	ju.mutation.RemoveDocURLIDs(ids...)
	return ju
}

// RemoveDocUrls removes "doc_urls" edges to JobDocURL entities.
func (ju *JobUpdate) RemoveDocUrls(j ...*JobDocURL) *JobUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveDocURLIDs(ids...)
}

// ClearEstimate clears the "estimate" edge to the Estimate entity.
func (ju *JobUpdate) ClearEstimate() *JobUpdate {
	ju.mutation.ClearEstimate()
	return ju
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (ju *JobUpdate) ClearCreatorAPI() *JobUpdate {
	ju.mutation.ClearCreatorAPI()
	return ju
}

// ClearCreator clears the "creator" edge to the User entity.
func (ju *JobUpdate) ClearCreator() *JobUpdate {
	ju.mutation.ClearCreator()
	return ju
}

// ClearHomeOwner clears the "home_owner" edge to the HomeOwner entity.
func (ju *JobUpdate) ClearHomeOwner() *JobUpdate {
	ju.mutation.ClearHomeOwner()
	return ju
}

// ClearSalesRep clears the "sales_rep" edge to the User entity.
func (ju *JobUpdate) ClearSalesRep() *JobUpdate {
	ju.mutation.ClearSalesRep()
	return ju
}

// ClearRequester clears the "requester" edge to the Partner entity.
func (ju *JobUpdate) ClearRequester() *JobUpdate {
	ju.mutation.ClearRequester()
	return ju
}

// ClearRoofingPartner clears the "roofing_partner" edge to the Partner entity.
func (ju *JobUpdate) ClearRoofingPartner() *JobUpdate {
	ju.mutation.ClearRoofingPartner()
	return ju
}

// ClearIntegrationPartner clears the "integration_partner" edge to the Partner entity.
func (ju *JobUpdate) ClearIntegrationPartner() *JobUpdate {
	ju.mutation.ClearIntegrationPartner()
	return ju
}

// ClearEpcPartner clears the "epc_partner" edge to the Partner entity.
func (ju *JobUpdate) ClearEpcPartner() *JobUpdate {
	ju.mutation.ClearEpcPartner()
	return ju
}

// ClearEpc clears the "epc" edge to the OptionList entity.
func (ju *JobUpdate) ClearEpc() *JobUpdate {
	ju.mutation.ClearEpc()
	return ju
}

// ClearEstimatePdf clears the "estimate_pdf" edge to the Document entity.
func (ju *JobUpdate) ClearEstimatePdf() *JobUpdate {
	ju.mutation.ClearEstimatePdf()
	return ju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Progress(); ok {
		if err := job.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "Job.progress": %w`, err)}
		}
	}
	if v, ok := ju.mutation.CompanyRefID(); ok {
		if err := job.CompanyRefIDValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_id", err: fmt.Errorf(`ent: validator failed for field "Job.company_ref_id": %w`, err)}
		}
	}
	if v, ok := ju.mutation.CompanyName(); ok {
		if err := job.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Job.company_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ju *JobUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobUpdate {
	ju.modifiers = append(ju.modifiers, modifiers...)
	return ju
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Progress(); ok {
		_spec.SetField(job.FieldProgress, field.TypeEnum, value)
	}
	if ju.mutation.ProgressCleared() {
		_spec.ClearField(job.FieldProgress, field.TypeEnum)
	}
	if value, ok := ju.mutation.ProgressAt(); ok {
		_spec.SetField(job.FieldProgressAt, field.TypeTime, value)
	}
	if ju.mutation.ProgressAtCleared() {
		_spec.ClearField(job.FieldProgressAt, field.TypeTime)
	}
	if value, ok := ju.mutation.ProgressFlagAt(); ok {
		_spec.SetField(job.FieldProgressFlagAt, field.TypeTime, value)
	}
	if ju.mutation.ProgressFlagAtCleared() {
		_spec.ClearField(job.FieldProgressFlagAt, field.TypeTime)
	}
	if value, ok := ju.mutation.RegionID(); ok {
		_spec.SetField(job.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := ju.mutation.AddedRegionID(); ok {
		_spec.AddField(job.FieldRegionID, field.TypeUint8, value)
	}
	if ju.mutation.RegionIDCleared() {
		_spec.ClearField(job.FieldRegionID, field.TypeUint8)
	}
	if value, ok := ju.mutation.CompanyRefID(); ok {
		_spec.SetField(job.FieldCompanyRefID, field.TypeString, value)
	}
	if ju.mutation.CompanyRefIDCleared() {
		_spec.ClearField(job.FieldCompanyRefID, field.TypeString)
	}
	if value, ok := ju.mutation.CompanyName(); ok {
		_spec.SetField(job.FieldCompanyName, field.TypeString, value)
	}
	if ju.mutation.CompanyNameCleared() {
		_spec.ClearField(job.FieldCompanyName, field.TypeString)
	}
	if value, ok := ju.mutation.Price(); ok {
		_spec.SetField(job.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.AddedPrice(); ok {
		_spec.AddField(job.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.WorkOrderPrice(); ok {
		_spec.SetField(job.FieldWorkOrderPrice, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.AddedWorkOrderPrice(); ok {
		_spec.AddField(job.FieldWorkOrderPrice, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.ContractPrice(); ok {
		_spec.SetField(job.FieldContractPrice, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.AddedContractPrice(); ok {
		_spec.AddField(job.FieldContractPrice, field.TypeFloat64, value)
	}
	if ju.mutation.ContractPriceCleared() {
		_spec.ClearField(job.FieldContractPrice, field.TypeFloat64)
	}
	if value, ok := ju.mutation.ChangeOrderPrice(); ok {
		_spec.SetField(job.FieldChangeOrderPrice, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.AddedChangeOrderPrice(); ok {
		_spec.AddField(job.FieldChangeOrderPrice, field.TypeFloat64, value)
	}
	if ju.mutation.ChangeOrderPriceCleared() {
		_spec.ClearField(job.FieldChangeOrderPrice, field.TypeFloat64)
	}
	if value, ok := ju.mutation.Note(); ok {
		_spec.SetField(job.FieldNote, field.TypeString, value)
	}
	if ju.mutation.NoteCleared() {
		_spec.ClearField(job.FieldNote, field.TypeString)
	}
	if value, ok := ju.mutation.ShingleColor(); ok {
		_spec.SetField(job.FieldShingleColor, field.TypeString, value)
	}
	if ju.mutation.ShingleColorCleared() {
		_spec.ClearField(job.FieldShingleColor, field.TypeString)
	}
	if value, ok := ju.mutation.PermitRequired(); ok {
		_spec.SetField(job.FieldPermitRequired, field.TypeBool, value)
	}
	if ju.mutation.PermitRequiredCleared() {
		_spec.ClearField(job.FieldPermitRequired, field.TypeBool)
	}
	if value, ok := ju.mutation.InspectionRequired(); ok {
		_spec.SetField(job.FieldInspectionRequired, field.TypeBool, value)
	}
	if ju.mutation.InspectionRequiredCleared() {
		_spec.ClearField(job.FieldInspectionRequired, field.TypeBool)
	}
	if value, ok := ju.mutation.InspectionDate(); ok {
		_spec.SetField(job.FieldInspectionDate, field.TypeTime, value)
	}
	if ju.mutation.InspectionDateCleared() {
		_spec.ClearField(job.FieldInspectionDate, field.TypeTime)
	}
	if value, ok := ju.mutation.ProgressInspectionDate(); ok {
		_spec.SetField(job.FieldProgressInspectionDate, field.TypeTime, value)
	}
	if ju.mutation.ProgressInspectionDateCleared() {
		_spec.ClearField(job.FieldProgressInspectionDate, field.TypeTime)
	}
	if value, ok := ju.mutation.InstallDate(); ok {
		_spec.SetField(job.FieldInstallDate, field.TypeTime, value)
	}
	if ju.mutation.InstallDateCleared() {
		_spec.ClearField(job.FieldInstallDate, field.TypeTime)
	}
	if value, ok := ju.mutation.CompletionDate(); ok {
		_spec.SetField(job.FieldCompletionDate, field.TypeTime, value)
	}
	if ju.mutation.CompletionDateCleared() {
		_spec.ClearField(job.FieldCompletionDate, field.TypeTime)
	}
	if value, ok := ju.mutation.MaterialDeliveryDate(); ok {
		_spec.SetField(job.FieldMaterialDeliveryDate, field.TypeTime, value)
	}
	if ju.mutation.MaterialDeliveryDateCleared() {
		_spec.ClearField(job.FieldMaterialDeliveryDate, field.TypeTime)
	}
	if value, ok := ju.mutation.Agree(); ok {
		_spec.SetField(job.FieldAgree, field.TypeBool, value)
	}
	if ju.mutation.AgreeCleared() {
		_spec.ClearField(job.FieldAgree, field.TypeBool)
	}
	if value, ok := ju.mutation.AgreeAt(); ok {
		_spec.SetField(job.FieldAgreeAt, field.TypeTime, value)
	}
	if ju.mutation.AgreeAtCleared() {
		_spec.ClearField(job.FieldAgreeAt, field.TypeTime)
	}
	if value, ok := ju.mutation.PoNumber(); ok {
		_spec.SetField(job.FieldPoNumber, field.TypeString, value)
	}
	if ju.mutation.PoNumberCleared() {
		_spec.ClearField(job.FieldPoNumber, field.TypeString)
	}
	if value, ok := ju.mutation.RoofingPartnerAssignedAt(); ok {
		_spec.SetField(job.FieldRoofingPartnerAssignedAt, field.TypeTime, value)
	}
	if ju.mutation.RoofingPartnerAssignedAtCleared() {
		_spec.ClearField(job.FieldRoofingPartnerAssignedAt, field.TypeTime)
	}
	if value, ok := ju.mutation.RoofingPartnerFlagAt(); ok {
		_spec.SetField(job.FieldRoofingPartnerFlagAt, field.TypeTime, value)
	}
	if ju.mutation.RoofingPartnerFlagAtCleared() {
		_spec.ClearField(job.FieldRoofingPartnerFlagAt, field.TypeTime)
	}
	if ju.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !ju.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !ju.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.AssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedAssignmentHistoryIDs(); len(nodes) > 0 && !ju.mutation.AssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.AssignmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedProgressHistoryIDs(); len(nodes) > 0 && !ju.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedNotesIDs(); len(nodes) > 0 && !ju.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.DocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedDocUrlsIDs(); len(nodes) > 0 && !ju.mutation.DocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.DocUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.EstimateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimateTable,
			Columns: []string{job.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimateTable,
			Columns: []string{job.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorAPITable,
			Columns: []string{job.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorAPITable,
			Columns: []string{job.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.HomeOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.HomeOwnerTable,
			Columns: []string{job.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.HomeOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.HomeOwnerTable,
			Columns: []string{job.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.SalesRepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.SalesRepTable,
			Columns: []string{job.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.SalesRepTable,
			Columns: []string{job.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RequesterTable,
			Columns: []string{job.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RequesterTable,
			Columns: []string{job.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.RoofingPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RoofingPartnerTable,
			Columns: []string{job.RoofingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RoofingPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RoofingPartnerTable,
			Columns: []string{job.RoofingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.IntegrationPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.IntegrationPartnerTable,
			Columns: []string{job.IntegrationPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.IntegrationPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.IntegrationPartnerTable,
			Columns: []string{job.IntegrationPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.EpcPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcPartnerTable,
			Columns: []string{job.EpcPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.EpcPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcPartnerTable,
			Columns: []string{job.EpcPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.EpcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcTable,
			Columns: []string{job.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.EpcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcTable,
			Columns: []string{job.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.EstimatePdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimatePdfTable,
			Columns: []string{job.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.EstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimatePdfTable,
			Columns: []string{job.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ju.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetProgress sets the "progress" field.
func (juo *JobUpdateOne) SetProgress(ep enum.JobProgress) *JobUpdateOne {
	juo.mutation.SetProgress(ep)
	return juo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableProgress(ep *enum.JobProgress) *JobUpdateOne {
	if ep != nil {
		juo.SetProgress(*ep)
	}
	return juo
}

// ClearProgress clears the value of the "progress" field.
func (juo *JobUpdateOne) ClearProgress() *JobUpdateOne {
	juo.mutation.ClearProgress()
	return juo
}

// SetProgressAt sets the "progress_at" field.
func (juo *JobUpdateOne) SetProgressAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetProgressAt(t)
	return juo
}

// SetNillableProgressAt sets the "progress_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableProgressAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetProgressAt(*t)
	}
	return juo
}

// ClearProgressAt clears the value of the "progress_at" field.
func (juo *JobUpdateOne) ClearProgressAt() *JobUpdateOne {
	juo.mutation.ClearProgressAt()
	return juo
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (juo *JobUpdateOne) SetProgressFlagAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetProgressFlagAt(t)
	return juo
}

// SetNillableProgressFlagAt sets the "progress_flag_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableProgressFlagAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetProgressFlagAt(*t)
	}
	return juo
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (juo *JobUpdateOne) ClearProgressFlagAt() *JobUpdateOne {
	juo.mutation.ClearProgressFlagAt()
	return juo
}

// SetRegionID sets the "region_id" field.
func (juo *JobUpdateOne) SetRegionID(u uint8) *JobUpdateOne {
	juo.mutation.ResetRegionID()
	juo.mutation.SetRegionID(u)
	return juo
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRegionID(u *uint8) *JobUpdateOne {
	if u != nil {
		juo.SetRegionID(*u)
	}
	return juo
}

// AddRegionID adds u to the "region_id" field.
func (juo *JobUpdateOne) AddRegionID(u int8) *JobUpdateOne {
	juo.mutation.AddRegionID(u)
	return juo
}

// ClearRegionID clears the value of the "region_id" field.
func (juo *JobUpdateOne) ClearRegionID() *JobUpdateOne {
	juo.mutation.ClearRegionID()
	return juo
}

// SetCompanyRefID sets the "company_ref_id" field.
func (juo *JobUpdateOne) SetCompanyRefID(s string) *JobUpdateOne {
	juo.mutation.SetCompanyRefID(s)
	return juo
}

// SetNillableCompanyRefID sets the "company_ref_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCompanyRefID(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCompanyRefID(*s)
	}
	return juo
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (juo *JobUpdateOne) ClearCompanyRefID() *JobUpdateOne {
	juo.mutation.ClearCompanyRefID()
	return juo
}

// SetCompanyName sets the "company_name" field.
func (juo *JobUpdateOne) SetCompanyName(s string) *JobUpdateOne {
	juo.mutation.SetCompanyName(s)
	return juo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCompanyName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCompanyName(*s)
	}
	return juo
}

// ClearCompanyName clears the value of the "company_name" field.
func (juo *JobUpdateOne) ClearCompanyName() *JobUpdateOne {
	juo.mutation.ClearCompanyName()
	return juo
}

// SetPrice sets the "price" field.
func (juo *JobUpdateOne) SetPrice(f float64) *JobUpdateOne {
	juo.mutation.ResetPrice()
	juo.mutation.SetPrice(f)
	return juo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillablePrice(f *float64) *JobUpdateOne {
	if f != nil {
		juo.SetPrice(*f)
	}
	return juo
}

// AddPrice adds f to the "price" field.
func (juo *JobUpdateOne) AddPrice(f float64) *JobUpdateOne {
	juo.mutation.AddPrice(f)
	return juo
}

// SetWorkOrderPrice sets the "work_order_price" field.
func (juo *JobUpdateOne) SetWorkOrderPrice(f float64) *JobUpdateOne {
	juo.mutation.ResetWorkOrderPrice()
	juo.mutation.SetWorkOrderPrice(f)
	return juo
}

// SetNillableWorkOrderPrice sets the "work_order_price" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableWorkOrderPrice(f *float64) *JobUpdateOne {
	if f != nil {
		juo.SetWorkOrderPrice(*f)
	}
	return juo
}

// AddWorkOrderPrice adds f to the "work_order_price" field.
func (juo *JobUpdateOne) AddWorkOrderPrice(f float64) *JobUpdateOne {
	juo.mutation.AddWorkOrderPrice(f)
	return juo
}

// SetContractPrice sets the "contract_price" field.
func (juo *JobUpdateOne) SetContractPrice(f float64) *JobUpdateOne {
	juo.mutation.ResetContractPrice()
	juo.mutation.SetContractPrice(f)
	return juo
}

// SetNillableContractPrice sets the "contract_price" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableContractPrice(f *float64) *JobUpdateOne {
	if f != nil {
		juo.SetContractPrice(*f)
	}
	return juo
}

// AddContractPrice adds f to the "contract_price" field.
func (juo *JobUpdateOne) AddContractPrice(f float64) *JobUpdateOne {
	juo.mutation.AddContractPrice(f)
	return juo
}

// ClearContractPrice clears the value of the "contract_price" field.
func (juo *JobUpdateOne) ClearContractPrice() *JobUpdateOne {
	juo.mutation.ClearContractPrice()
	return juo
}

// SetChangeOrderPrice sets the "change_order_price" field.
func (juo *JobUpdateOne) SetChangeOrderPrice(f float64) *JobUpdateOne {
	juo.mutation.ResetChangeOrderPrice()
	juo.mutation.SetChangeOrderPrice(f)
	return juo
}

// SetNillableChangeOrderPrice sets the "change_order_price" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableChangeOrderPrice(f *float64) *JobUpdateOne {
	if f != nil {
		juo.SetChangeOrderPrice(*f)
	}
	return juo
}

// AddChangeOrderPrice adds f to the "change_order_price" field.
func (juo *JobUpdateOne) AddChangeOrderPrice(f float64) *JobUpdateOne {
	juo.mutation.AddChangeOrderPrice(f)
	return juo
}

// ClearChangeOrderPrice clears the value of the "change_order_price" field.
func (juo *JobUpdateOne) ClearChangeOrderPrice() *JobUpdateOne {
	juo.mutation.ClearChangeOrderPrice()
	return juo
}

// SetNote sets the "note" field.
func (juo *JobUpdateOne) SetNote(s string) *JobUpdateOne {
	juo.mutation.SetNote(s)
	return juo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableNote(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetNote(*s)
	}
	return juo
}

// ClearNote clears the value of the "note" field.
func (juo *JobUpdateOne) ClearNote() *JobUpdateOne {
	juo.mutation.ClearNote()
	return juo
}

// SetShingleColor sets the "shingle_color" field.
func (juo *JobUpdateOne) SetShingleColor(s string) *JobUpdateOne {
	juo.mutation.SetShingleColor(s)
	return juo
}

// SetNillableShingleColor sets the "shingle_color" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableShingleColor(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetShingleColor(*s)
	}
	return juo
}

// ClearShingleColor clears the value of the "shingle_color" field.
func (juo *JobUpdateOne) ClearShingleColor() *JobUpdateOne {
	juo.mutation.ClearShingleColor()
	return juo
}

// SetPermitRequired sets the "permit_required" field.
func (juo *JobUpdateOne) SetPermitRequired(b bool) *JobUpdateOne {
	juo.mutation.SetPermitRequired(b)
	return juo
}

// SetNillablePermitRequired sets the "permit_required" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillablePermitRequired(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetPermitRequired(*b)
	}
	return juo
}

// ClearPermitRequired clears the value of the "permit_required" field.
func (juo *JobUpdateOne) ClearPermitRequired() *JobUpdateOne {
	juo.mutation.ClearPermitRequired()
	return juo
}

// SetInspectionRequired sets the "inspection_required" field.
func (juo *JobUpdateOne) SetInspectionRequired(b bool) *JobUpdateOne {
	juo.mutation.SetInspectionRequired(b)
	return juo
}

// SetNillableInspectionRequired sets the "inspection_required" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableInspectionRequired(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetInspectionRequired(*b)
	}
	return juo
}

// ClearInspectionRequired clears the value of the "inspection_required" field.
func (juo *JobUpdateOne) ClearInspectionRequired() *JobUpdateOne {
	juo.mutation.ClearInspectionRequired()
	return juo
}

// SetInspectionDate sets the "inspection_date" field.
func (juo *JobUpdateOne) SetInspectionDate(t time.Time) *JobUpdateOne {
	juo.mutation.SetInspectionDate(t)
	return juo
}

// SetNillableInspectionDate sets the "inspection_date" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableInspectionDate(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetInspectionDate(*t)
	}
	return juo
}

// ClearInspectionDate clears the value of the "inspection_date" field.
func (juo *JobUpdateOne) ClearInspectionDate() *JobUpdateOne {
	juo.mutation.ClearInspectionDate()
	return juo
}

// SetProgressInspectionDate sets the "progress_inspection_date" field.
func (juo *JobUpdateOne) SetProgressInspectionDate(t time.Time) *JobUpdateOne {
	juo.mutation.SetProgressInspectionDate(t)
	return juo
}

// SetNillableProgressInspectionDate sets the "progress_inspection_date" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableProgressInspectionDate(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetProgressInspectionDate(*t)
	}
	return juo
}

// ClearProgressInspectionDate clears the value of the "progress_inspection_date" field.
func (juo *JobUpdateOne) ClearProgressInspectionDate() *JobUpdateOne {
	juo.mutation.ClearProgressInspectionDate()
	return juo
}

// SetInstallDate sets the "install_date" field.
func (juo *JobUpdateOne) SetInstallDate(t time.Time) *JobUpdateOne {
	juo.mutation.SetInstallDate(t)
	return juo
}

// SetNillableInstallDate sets the "install_date" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableInstallDate(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetInstallDate(*t)
	}
	return juo
}

// ClearInstallDate clears the value of the "install_date" field.
func (juo *JobUpdateOne) ClearInstallDate() *JobUpdateOne {
	juo.mutation.ClearInstallDate()
	return juo
}

// SetCompletionDate sets the "completion_date" field.
func (juo *JobUpdateOne) SetCompletionDate(t time.Time) *JobUpdateOne {
	juo.mutation.SetCompletionDate(t)
	return juo
}

// SetNillableCompletionDate sets the "completion_date" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCompletionDate(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetCompletionDate(*t)
	}
	return juo
}

// ClearCompletionDate clears the value of the "completion_date" field.
func (juo *JobUpdateOne) ClearCompletionDate() *JobUpdateOne {
	juo.mutation.ClearCompletionDate()
	return juo
}

// SetMaterialDeliveryDate sets the "material_delivery_date" field.
func (juo *JobUpdateOne) SetMaterialDeliveryDate(t time.Time) *JobUpdateOne {
	juo.mutation.SetMaterialDeliveryDate(t)
	return juo
}

// SetNillableMaterialDeliveryDate sets the "material_delivery_date" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableMaterialDeliveryDate(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetMaterialDeliveryDate(*t)
	}
	return juo
}

// ClearMaterialDeliveryDate clears the value of the "material_delivery_date" field.
func (juo *JobUpdateOne) ClearMaterialDeliveryDate() *JobUpdateOne {
	juo.mutation.ClearMaterialDeliveryDate()
	return juo
}

// SetAgree sets the "agree" field.
func (juo *JobUpdateOne) SetAgree(b bool) *JobUpdateOne {
	juo.mutation.SetAgree(b)
	return juo
}

// SetNillableAgree sets the "agree" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableAgree(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetAgree(*b)
	}
	return juo
}

// ClearAgree clears the value of the "agree" field.
func (juo *JobUpdateOne) ClearAgree() *JobUpdateOne {
	juo.mutation.ClearAgree()
	return juo
}

// SetAgreeAt sets the "agree_at" field.
func (juo *JobUpdateOne) SetAgreeAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetAgreeAt(t)
	return juo
}

// SetNillableAgreeAt sets the "agree_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableAgreeAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetAgreeAt(*t)
	}
	return juo
}

// ClearAgreeAt clears the value of the "agree_at" field.
func (juo *JobUpdateOne) ClearAgreeAt() *JobUpdateOne {
	juo.mutation.ClearAgreeAt()
	return juo
}

// SetPoNumber sets the "po_number" field.
func (juo *JobUpdateOne) SetPoNumber(s string) *JobUpdateOne {
	juo.mutation.SetPoNumber(s)
	return juo
}

// SetNillablePoNumber sets the "po_number" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillablePoNumber(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetPoNumber(*s)
	}
	return juo
}

// ClearPoNumber clears the value of the "po_number" field.
func (juo *JobUpdateOne) ClearPoNumber() *JobUpdateOne {
	juo.mutation.ClearPoNumber()
	return juo
}

// SetRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field.
func (juo *JobUpdateOne) SetRoofingPartnerAssignedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetRoofingPartnerAssignedAt(t)
	return juo
}

// SetNillableRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRoofingPartnerAssignedAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetRoofingPartnerAssignedAt(*t)
	}
	return juo
}

// ClearRoofingPartnerAssignedAt clears the value of the "roofing_partner_assigned_at" field.
func (juo *JobUpdateOne) ClearRoofingPartnerAssignedAt() *JobUpdateOne {
	juo.mutation.ClearRoofingPartnerAssignedAt()
	return juo
}

// SetRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field.
func (juo *JobUpdateOne) SetRoofingPartnerFlagAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetRoofingPartnerFlagAt(t)
	return juo
}

// SetNillableRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRoofingPartnerFlagAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetRoofingPartnerFlagAt(*t)
	}
	return juo
}

// ClearRoofingPartnerFlagAt clears the value of the "roofing_partner_flag_at" field.
func (juo *JobUpdateOne) ClearRoofingPartnerFlagAt() *JobUpdateOne {
	juo.mutation.ClearRoofingPartnerFlagAt()
	return juo
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (juo *JobUpdateOne) AddPaymentIDs(ids ...string) *JobUpdateOne {
	juo.mutation.AddPaymentIDs(ids...)
	return juo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (juo *JobUpdateOne) AddPayments(p ...*Payment) *JobUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return juo.AddPaymentIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the JobActivity entity by IDs.
func (juo *JobUpdateOne) AddActivityIDs(ids ...string) *JobUpdateOne {
	juo.mutation.AddActivityIDs(ids...)
	return juo
}

// AddActivities adds the "activities" edges to the JobActivity entity.
func (juo *JobUpdateOne) AddActivities(j ...*JobActivity) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddActivityIDs(ids...)
}

// AddAssignmentHistoryIDs adds the "assignment_history" edge to the JobAssignmentHistory entity by IDs.
func (juo *JobUpdateOne) AddAssignmentHistoryIDs(ids ...string) *JobUpdateOne {
	juo.mutation.AddAssignmentHistoryIDs(ids...)
	return juo
}

// AddAssignmentHistory adds the "assignment_history" edges to the JobAssignmentHistory entity.
func (juo *JobUpdateOne) AddAssignmentHistory(j ...*JobAssignmentHistory) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddAssignmentHistoryIDs(ids...)
}

// AddProgressHistoryIDs adds the "progress_history" edge to the JobProgressHistory entity by IDs.
func (juo *JobUpdateOne) AddProgressHistoryIDs(ids ...string) *JobUpdateOne {
	juo.mutation.AddProgressHistoryIDs(ids...)
	return juo
}

// AddProgressHistory adds the "progress_history" edges to the JobProgressHistory entity.
func (juo *JobUpdateOne) AddProgressHistory(j ...*JobProgressHistory) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddProgressHistoryIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the JobNote entity by IDs.
func (juo *JobUpdateOne) AddNoteIDs(ids ...string) *JobUpdateOne {
	juo.mutation.AddNoteIDs(ids...)
	return juo
}

// AddNotes adds the "notes" edges to the JobNote entity.
func (juo *JobUpdateOne) AddNotes(j ...*JobNote) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddNoteIDs(ids...)
}

// AddDocURLIDs adds the "doc_urls" edge to the JobDocURL entity by IDs.
func (juo *JobUpdateOne) AddDocURLIDs(ids ...string) *JobUpdateOne {
	juo.mutation.AddDocURLIDs(ids...)
	return juo
}

// AddDocUrls adds the "doc_urls" edges to the JobDocURL entity.
func (juo *JobUpdateOne) AddDocUrls(j ...*JobDocURL) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddDocURLIDs(ids...)
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (juo *JobUpdateOne) SetEstimateID(id string) *JobUpdateOne {
	juo.mutation.SetEstimateID(id)
	return juo
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableEstimateID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetEstimateID(*id)
	}
	return juo
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (juo *JobUpdateOne) SetEstimate(e *Estimate) *JobUpdateOne {
	return juo.SetEstimateID(e.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (juo *JobUpdateOne) SetCreatorAPIID(id string) *JobUpdateOne {
	juo.mutation.SetCreatorAPIID(id)
	return juo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatorAPIID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetCreatorAPIID(*id)
	}
	return juo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (juo *JobUpdateOne) SetCreatorAPI(a *ApiUser) *JobUpdateOne {
	return juo.SetCreatorAPIID(a.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (juo *JobUpdateOne) SetCreatorID(id string) *JobUpdateOne {
	juo.mutation.SetCreatorID(id)
	return juo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatorID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetCreatorID(*id)
	}
	return juo
}

// SetCreator sets the "creator" edge to the User entity.
func (juo *JobUpdateOne) SetCreator(u *User) *JobUpdateOne {
	return juo.SetCreatorID(u.ID)
}

// SetHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID.
func (juo *JobUpdateOne) SetHomeOwnerID(id string) *JobUpdateOne {
	juo.mutation.SetHomeOwnerID(id)
	return juo
}

// SetNillableHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableHomeOwnerID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetHomeOwnerID(*id)
	}
	return juo
}

// SetHomeOwner sets the "home_owner" edge to the HomeOwner entity.
func (juo *JobUpdateOne) SetHomeOwner(h *HomeOwner) *JobUpdateOne {
	return juo.SetHomeOwnerID(h.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (juo *JobUpdateOne) SetSalesRepID(id string) *JobUpdateOne {
	juo.mutation.SetSalesRepID(id)
	return juo
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableSalesRepID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetSalesRepID(*id)
	}
	return juo
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (juo *JobUpdateOne) SetSalesRep(u *User) *JobUpdateOne {
	return juo.SetSalesRepID(u.ID)
}

// SetRequesterID sets the "requester" edge to the Partner entity by ID.
func (juo *JobUpdateOne) SetRequesterID(id string) *JobUpdateOne {
	juo.mutation.SetRequesterID(id)
	return juo
}

// SetNillableRequesterID sets the "requester" edge to the Partner entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRequesterID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetRequesterID(*id)
	}
	return juo
}

// SetRequester sets the "requester" edge to the Partner entity.
func (juo *JobUpdateOne) SetRequester(p *Partner) *JobUpdateOne {
	return juo.SetRequesterID(p.ID)
}

// SetRoofingPartnerID sets the "roofing_partner" edge to the Partner entity by ID.
func (juo *JobUpdateOne) SetRoofingPartnerID(id string) *JobUpdateOne {
	juo.mutation.SetRoofingPartnerID(id)
	return juo
}

// SetNillableRoofingPartnerID sets the "roofing_partner" edge to the Partner entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRoofingPartnerID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetRoofingPartnerID(*id)
	}
	return juo
}

// SetRoofingPartner sets the "roofing_partner" edge to the Partner entity.
func (juo *JobUpdateOne) SetRoofingPartner(p *Partner) *JobUpdateOne {
	return juo.SetRoofingPartnerID(p.ID)
}

// SetIntegrationPartnerID sets the "integration_partner" edge to the Partner entity by ID.
func (juo *JobUpdateOne) SetIntegrationPartnerID(id string) *JobUpdateOne {
	juo.mutation.SetIntegrationPartnerID(id)
	return juo
}

// SetNillableIntegrationPartnerID sets the "integration_partner" edge to the Partner entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableIntegrationPartnerID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetIntegrationPartnerID(*id)
	}
	return juo
}

// SetIntegrationPartner sets the "integration_partner" edge to the Partner entity.
func (juo *JobUpdateOne) SetIntegrationPartner(p *Partner) *JobUpdateOne {
	return juo.SetIntegrationPartnerID(p.ID)
}

// SetEpcPartnerID sets the "epc_partner" edge to the Partner entity by ID.
func (juo *JobUpdateOne) SetEpcPartnerID(id string) *JobUpdateOne {
	juo.mutation.SetEpcPartnerID(id)
	return juo
}

// SetNillableEpcPartnerID sets the "epc_partner" edge to the Partner entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableEpcPartnerID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetEpcPartnerID(*id)
	}
	return juo
}

// SetEpcPartner sets the "epc_partner" edge to the Partner entity.
func (juo *JobUpdateOne) SetEpcPartner(p *Partner) *JobUpdateOne {
	return juo.SetEpcPartnerID(p.ID)
}

// SetEpcID sets the "epc" edge to the OptionList entity by ID.
func (juo *JobUpdateOne) SetEpcID(id string) *JobUpdateOne {
	juo.mutation.SetEpcID(id)
	return juo
}

// SetNillableEpcID sets the "epc" edge to the OptionList entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableEpcID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetEpcID(*id)
	}
	return juo
}

// SetEpc sets the "epc" edge to the OptionList entity.
func (juo *JobUpdateOne) SetEpc(o *OptionList) *JobUpdateOne {
	return juo.SetEpcID(o.ID)
}

// SetEstimatePdfID sets the "estimate_pdf" edge to the Document entity by ID.
func (juo *JobUpdateOne) SetEstimatePdfID(id string) *JobUpdateOne {
	juo.mutation.SetEstimatePdfID(id)
	return juo
}

// SetNillableEstimatePdfID sets the "estimate_pdf" edge to the Document entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableEstimatePdfID(id *string) *JobUpdateOne {
	if id != nil {
		juo = juo.SetEstimatePdfID(*id)
	}
	return juo
}

// SetEstimatePdf sets the "estimate_pdf" edge to the Document entity.
func (juo *JobUpdateOne) SetEstimatePdf(d *Document) *JobUpdateOne {
	return juo.SetEstimatePdfID(d.ID)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (juo *JobUpdateOne) ClearPayments() *JobUpdateOne {
	juo.mutation.ClearPayments()
	return juo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (juo *JobUpdateOne) RemovePaymentIDs(ids ...string) *JobUpdateOne {
	juo.mutation.RemovePaymentIDs(ids...)
	return juo
}

// RemovePayments removes "payments" edges to Payment entities.
func (juo *JobUpdateOne) RemovePayments(p ...*Payment) *JobUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return juo.RemovePaymentIDs(ids...)
}

// ClearActivities clears all "activities" edges to the JobActivity entity.
func (juo *JobUpdateOne) ClearActivities() *JobUpdateOne {
	juo.mutation.ClearActivities()
	return juo
}

// RemoveActivityIDs removes the "activities" edge to JobActivity entities by IDs.
func (juo *JobUpdateOne) RemoveActivityIDs(ids ...string) *JobUpdateOne {
	juo.mutation.RemoveActivityIDs(ids...)
	return juo
}

// RemoveActivities removes "activities" edges to JobActivity entities.
func (juo *JobUpdateOne) RemoveActivities(j ...*JobActivity) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveActivityIDs(ids...)
}

// ClearAssignmentHistory clears all "assignment_history" edges to the JobAssignmentHistory entity.
func (juo *JobUpdateOne) ClearAssignmentHistory() *JobUpdateOne {
	juo.mutation.ClearAssignmentHistory()
	return juo
}

// RemoveAssignmentHistoryIDs removes the "assignment_history" edge to JobAssignmentHistory entities by IDs.
func (juo *JobUpdateOne) RemoveAssignmentHistoryIDs(ids ...string) *JobUpdateOne {
	juo.mutation.RemoveAssignmentHistoryIDs(ids...)
	return juo
}

// RemoveAssignmentHistory removes "assignment_history" edges to JobAssignmentHistory entities.
func (juo *JobUpdateOne) RemoveAssignmentHistory(j ...*JobAssignmentHistory) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveAssignmentHistoryIDs(ids...)
}

// ClearProgressHistory clears all "progress_history" edges to the JobProgressHistory entity.
func (juo *JobUpdateOne) ClearProgressHistory() *JobUpdateOne {
	juo.mutation.ClearProgressHistory()
	return juo
}

// RemoveProgressHistoryIDs removes the "progress_history" edge to JobProgressHistory entities by IDs.
func (juo *JobUpdateOne) RemoveProgressHistoryIDs(ids ...string) *JobUpdateOne {
	juo.mutation.RemoveProgressHistoryIDs(ids...)
	return juo
}

// RemoveProgressHistory removes "progress_history" edges to JobProgressHistory entities.
func (juo *JobUpdateOne) RemoveProgressHistory(j ...*JobProgressHistory) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveProgressHistoryIDs(ids...)
}

// ClearNotes clears all "notes" edges to the JobNote entity.
func (juo *JobUpdateOne) ClearNotes() *JobUpdateOne {
	juo.mutation.ClearNotes()
	return juo
}

// RemoveNoteIDs removes the "notes" edge to JobNote entities by IDs.
func (juo *JobUpdateOne) RemoveNoteIDs(ids ...string) *JobUpdateOne {
	juo.mutation.RemoveNoteIDs(ids...)
	return juo
}

// RemoveNotes removes "notes" edges to JobNote entities.
func (juo *JobUpdateOne) RemoveNotes(j ...*JobNote) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveNoteIDs(ids...)
}

// ClearDocUrls clears all "doc_urls" edges to the JobDocURL entity.
func (juo *JobUpdateOne) ClearDocUrls() *JobUpdateOne {
	juo.mutation.ClearDocUrls()
	return juo
}

// RemoveDocURLIDs removes the "doc_urls" edge to JobDocURL entities by IDs.
func (juo *JobUpdateOne) RemoveDocURLIDs(ids ...string) *JobUpdateOne {
	juo.mutation.RemoveDocURLIDs(ids...)
	return juo
}

// RemoveDocUrls removes "doc_urls" edges to JobDocURL entities.
func (juo *JobUpdateOne) RemoveDocUrls(j ...*JobDocURL) *JobUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveDocURLIDs(ids...)
}

// ClearEstimate clears the "estimate" edge to the Estimate entity.
func (juo *JobUpdateOne) ClearEstimate() *JobUpdateOne {
	juo.mutation.ClearEstimate()
	return juo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (juo *JobUpdateOne) ClearCreatorAPI() *JobUpdateOne {
	juo.mutation.ClearCreatorAPI()
	return juo
}

// ClearCreator clears the "creator" edge to the User entity.
func (juo *JobUpdateOne) ClearCreator() *JobUpdateOne {
	juo.mutation.ClearCreator()
	return juo
}

// ClearHomeOwner clears the "home_owner" edge to the HomeOwner entity.
func (juo *JobUpdateOne) ClearHomeOwner() *JobUpdateOne {
	juo.mutation.ClearHomeOwner()
	return juo
}

// ClearSalesRep clears the "sales_rep" edge to the User entity.
func (juo *JobUpdateOne) ClearSalesRep() *JobUpdateOne {
	juo.mutation.ClearSalesRep()
	return juo
}

// ClearRequester clears the "requester" edge to the Partner entity.
func (juo *JobUpdateOne) ClearRequester() *JobUpdateOne {
	juo.mutation.ClearRequester()
	return juo
}

// ClearRoofingPartner clears the "roofing_partner" edge to the Partner entity.
func (juo *JobUpdateOne) ClearRoofingPartner() *JobUpdateOne {
	juo.mutation.ClearRoofingPartner()
	return juo
}

// ClearIntegrationPartner clears the "integration_partner" edge to the Partner entity.
func (juo *JobUpdateOne) ClearIntegrationPartner() *JobUpdateOne {
	juo.mutation.ClearIntegrationPartner()
	return juo
}

// ClearEpcPartner clears the "epc_partner" edge to the Partner entity.
func (juo *JobUpdateOne) ClearEpcPartner() *JobUpdateOne {
	juo.mutation.ClearEpcPartner()
	return juo
}

// ClearEpc clears the "epc" edge to the OptionList entity.
func (juo *JobUpdateOne) ClearEpc() *JobUpdateOne {
	juo.mutation.ClearEpc()
	return juo
}

// ClearEstimatePdf clears the "estimate_pdf" edge to the Document entity.
func (juo *JobUpdateOne) ClearEstimatePdf() *JobUpdateOne {
	juo.mutation.ClearEstimatePdf()
	return juo
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Progress(); ok {
		if err := job.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "Job.progress": %w`, err)}
		}
	}
	if v, ok := juo.mutation.CompanyRefID(); ok {
		if err := job.CompanyRefIDValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_id", err: fmt.Errorf(`ent: validator failed for field "Job.company_ref_id": %w`, err)}
		}
	}
	if v, ok := juo.mutation.CompanyName(); ok {
		if err := job.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Job.company_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (juo *JobUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobUpdateOne {
	juo.modifiers = append(juo.modifiers, modifiers...)
	return juo
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Progress(); ok {
		_spec.SetField(job.FieldProgress, field.TypeEnum, value)
	}
	if juo.mutation.ProgressCleared() {
		_spec.ClearField(job.FieldProgress, field.TypeEnum)
	}
	if value, ok := juo.mutation.ProgressAt(); ok {
		_spec.SetField(job.FieldProgressAt, field.TypeTime, value)
	}
	if juo.mutation.ProgressAtCleared() {
		_spec.ClearField(job.FieldProgressAt, field.TypeTime)
	}
	if value, ok := juo.mutation.ProgressFlagAt(); ok {
		_spec.SetField(job.FieldProgressFlagAt, field.TypeTime, value)
	}
	if juo.mutation.ProgressFlagAtCleared() {
		_spec.ClearField(job.FieldProgressFlagAt, field.TypeTime)
	}
	if value, ok := juo.mutation.RegionID(); ok {
		_spec.SetField(job.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := juo.mutation.AddedRegionID(); ok {
		_spec.AddField(job.FieldRegionID, field.TypeUint8, value)
	}
	if juo.mutation.RegionIDCleared() {
		_spec.ClearField(job.FieldRegionID, field.TypeUint8)
	}
	if value, ok := juo.mutation.CompanyRefID(); ok {
		_spec.SetField(job.FieldCompanyRefID, field.TypeString, value)
	}
	if juo.mutation.CompanyRefIDCleared() {
		_spec.ClearField(job.FieldCompanyRefID, field.TypeString)
	}
	if value, ok := juo.mutation.CompanyName(); ok {
		_spec.SetField(job.FieldCompanyName, field.TypeString, value)
	}
	if juo.mutation.CompanyNameCleared() {
		_spec.ClearField(job.FieldCompanyName, field.TypeString)
	}
	if value, ok := juo.mutation.Price(); ok {
		_spec.SetField(job.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.AddedPrice(); ok {
		_spec.AddField(job.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.WorkOrderPrice(); ok {
		_spec.SetField(job.FieldWorkOrderPrice, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.AddedWorkOrderPrice(); ok {
		_spec.AddField(job.FieldWorkOrderPrice, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.ContractPrice(); ok {
		_spec.SetField(job.FieldContractPrice, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.AddedContractPrice(); ok {
		_spec.AddField(job.FieldContractPrice, field.TypeFloat64, value)
	}
	if juo.mutation.ContractPriceCleared() {
		_spec.ClearField(job.FieldContractPrice, field.TypeFloat64)
	}
	if value, ok := juo.mutation.ChangeOrderPrice(); ok {
		_spec.SetField(job.FieldChangeOrderPrice, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.AddedChangeOrderPrice(); ok {
		_spec.AddField(job.FieldChangeOrderPrice, field.TypeFloat64, value)
	}
	if juo.mutation.ChangeOrderPriceCleared() {
		_spec.ClearField(job.FieldChangeOrderPrice, field.TypeFloat64)
	}
	if value, ok := juo.mutation.Note(); ok {
		_spec.SetField(job.FieldNote, field.TypeString, value)
	}
	if juo.mutation.NoteCleared() {
		_spec.ClearField(job.FieldNote, field.TypeString)
	}
	if value, ok := juo.mutation.ShingleColor(); ok {
		_spec.SetField(job.FieldShingleColor, field.TypeString, value)
	}
	if juo.mutation.ShingleColorCleared() {
		_spec.ClearField(job.FieldShingleColor, field.TypeString)
	}
	if value, ok := juo.mutation.PermitRequired(); ok {
		_spec.SetField(job.FieldPermitRequired, field.TypeBool, value)
	}
	if juo.mutation.PermitRequiredCleared() {
		_spec.ClearField(job.FieldPermitRequired, field.TypeBool)
	}
	if value, ok := juo.mutation.InspectionRequired(); ok {
		_spec.SetField(job.FieldInspectionRequired, field.TypeBool, value)
	}
	if juo.mutation.InspectionRequiredCleared() {
		_spec.ClearField(job.FieldInspectionRequired, field.TypeBool)
	}
	if value, ok := juo.mutation.InspectionDate(); ok {
		_spec.SetField(job.FieldInspectionDate, field.TypeTime, value)
	}
	if juo.mutation.InspectionDateCleared() {
		_spec.ClearField(job.FieldInspectionDate, field.TypeTime)
	}
	if value, ok := juo.mutation.ProgressInspectionDate(); ok {
		_spec.SetField(job.FieldProgressInspectionDate, field.TypeTime, value)
	}
	if juo.mutation.ProgressInspectionDateCleared() {
		_spec.ClearField(job.FieldProgressInspectionDate, field.TypeTime)
	}
	if value, ok := juo.mutation.InstallDate(); ok {
		_spec.SetField(job.FieldInstallDate, field.TypeTime, value)
	}
	if juo.mutation.InstallDateCleared() {
		_spec.ClearField(job.FieldInstallDate, field.TypeTime)
	}
	if value, ok := juo.mutation.CompletionDate(); ok {
		_spec.SetField(job.FieldCompletionDate, field.TypeTime, value)
	}
	if juo.mutation.CompletionDateCleared() {
		_spec.ClearField(job.FieldCompletionDate, field.TypeTime)
	}
	if value, ok := juo.mutation.MaterialDeliveryDate(); ok {
		_spec.SetField(job.FieldMaterialDeliveryDate, field.TypeTime, value)
	}
	if juo.mutation.MaterialDeliveryDateCleared() {
		_spec.ClearField(job.FieldMaterialDeliveryDate, field.TypeTime)
	}
	if value, ok := juo.mutation.Agree(); ok {
		_spec.SetField(job.FieldAgree, field.TypeBool, value)
	}
	if juo.mutation.AgreeCleared() {
		_spec.ClearField(job.FieldAgree, field.TypeBool)
	}
	if value, ok := juo.mutation.AgreeAt(); ok {
		_spec.SetField(job.FieldAgreeAt, field.TypeTime, value)
	}
	if juo.mutation.AgreeAtCleared() {
		_spec.ClearField(job.FieldAgreeAt, field.TypeTime)
	}
	if value, ok := juo.mutation.PoNumber(); ok {
		_spec.SetField(job.FieldPoNumber, field.TypeString, value)
	}
	if juo.mutation.PoNumberCleared() {
		_spec.ClearField(job.FieldPoNumber, field.TypeString)
	}
	if value, ok := juo.mutation.RoofingPartnerAssignedAt(); ok {
		_spec.SetField(job.FieldRoofingPartnerAssignedAt, field.TypeTime, value)
	}
	if juo.mutation.RoofingPartnerAssignedAtCleared() {
		_spec.ClearField(job.FieldRoofingPartnerAssignedAt, field.TypeTime)
	}
	if value, ok := juo.mutation.RoofingPartnerFlagAt(); ok {
		_spec.SetField(job.FieldRoofingPartnerFlagAt, field.TypeTime, value)
	}
	if juo.mutation.RoofingPartnerFlagAtCleared() {
		_spec.ClearField(job.FieldRoofingPartnerFlagAt, field.TypeTime)
	}
	if juo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !juo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !juo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.AssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedAssignmentHistoryIDs(); len(nodes) > 0 && !juo.mutation.AssignmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.AssignmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedProgressHistoryIDs(); len(nodes) > 0 && !juo.mutation.ProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !juo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.DocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedDocUrlsIDs(); len(nodes) > 0 && !juo.mutation.DocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.DocUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.EstimateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimateTable,
			Columns: []string{job.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimateTable,
			Columns: []string{job.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorAPITable,
			Columns: []string{job.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorAPITable,
			Columns: []string{job.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.HomeOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.HomeOwnerTable,
			Columns: []string{job.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.HomeOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.HomeOwnerTable,
			Columns: []string{job.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.SalesRepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.SalesRepTable,
			Columns: []string{job.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.SalesRepTable,
			Columns: []string{job.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RequesterTable,
			Columns: []string{job.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RequesterTable,
			Columns: []string{job.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.RoofingPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RoofingPartnerTable,
			Columns: []string{job.RoofingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RoofingPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RoofingPartnerTable,
			Columns: []string{job.RoofingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.IntegrationPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.IntegrationPartnerTable,
			Columns: []string{job.IntegrationPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.IntegrationPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.IntegrationPartnerTable,
			Columns: []string{job.IntegrationPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.EpcPartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcPartnerTable,
			Columns: []string{job.EpcPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.EpcPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcPartnerTable,
			Columns: []string{job.EpcPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.EpcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcTable,
			Columns: []string{job.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.EpcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcTable,
			Columns: []string{job.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.EstimatePdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimatePdfTable,
			Columns: []string{job.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.EstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimatePdfTable,
			Columns: []string{job.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(juo.modifiers...)
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}

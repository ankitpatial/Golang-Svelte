// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/document"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TrainingVideo is the model entity for the TrainingVideo schema.
type TrainingVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Kind holds the value of the "kind" field.
	Kind enum.TrainingType `json:"kind,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrainingVideoQuery when eager-loading is set.
	Edges        TrainingVideoEdges `json:"edges"`
	video_id     *string
	poster_id    *string
	course_id    *string
	creator_id   *string
	selectValues sql.SelectValues
}

// TrainingVideoEdges holds the relations/edges for other nodes in the graph.
type TrainingVideoEdges struct {
	// TrainingVideos holds the value of the training_videos edge.
	TrainingVideos []*PartnerTrainingVideo `json:"training_videos,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Course holds the value of the course edge.
	Course *TrainingCourse `json:"course,omitempty"`
	// Poster holds the value of the poster edge.
	Poster *Document `json:"poster,omitempty"`
	// Video holds the value of the video edge.
	Video *Document `json:"video,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedTrainingVideos map[string][]*PartnerTrainingVideo
}

// TrainingVideosOrErr returns the TrainingVideos value or an error if the edge
// was not loaded in eager-loading.
func (e TrainingVideoEdges) TrainingVideosOrErr() ([]*PartnerTrainingVideo, error) {
	if e.loadedTypes[0] {
		return e.TrainingVideos, nil
	}
	return nil, &NotLoadedError{edge: "training_videos"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingVideoEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingVideoEdges) CourseOrErr() (*TrainingCourse, error) {
	if e.loadedTypes[2] {
		if e.Course == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: trainingcourse.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// PosterOrErr returns the Poster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingVideoEdges) PosterOrErr() (*Document, error) {
	if e.loadedTypes[3] {
		if e.Poster == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: document.Label}
		}
		return e.Poster, nil
	}
	return nil, &NotLoadedError{edge: "poster"}
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingVideoEdges) VideoOrErr() (*Document, error) {
	if e.loadedTypes[4] {
		if e.Video == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: document.Label}
		}
		return e.Video, nil
	}
	return nil, &NotLoadedError{edge: "video"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrainingVideo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trainingvideo.FieldID, trainingvideo.FieldKind, trainingvideo.FieldTitle, trainingvideo.FieldDescription:
			values[i] = new(sql.NullString)
		case trainingvideo.FieldCreatedAt, trainingvideo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case trainingvideo.ForeignKeys[0]: // video_id
			values[i] = new(sql.NullString)
		case trainingvideo.ForeignKeys[1]: // poster_id
			values[i] = new(sql.NullString)
		case trainingvideo.ForeignKeys[2]: // course_id
			values[i] = new(sql.NullString)
		case trainingvideo.ForeignKeys[3]: // creator_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrainingVideo fields.
func (tv *TrainingVideo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trainingvideo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tv.ID = value.String
			}
		case trainingvideo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tv.CreatedAt = value.Time
			}
		case trainingvideo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tv.UpdatedAt = value.Time
			}
		case trainingvideo.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				tv.Kind = enum.TrainingType(value.String)
			}
		case trainingvideo.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tv.Title = value.String
			}
		case trainingvideo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tv.Description = value.String
			}
		case trainingvideo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				tv.video_id = new(string)
				*tv.video_id = value.String
			}
		case trainingvideo.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poster_id", values[i])
			} else if value.Valid {
				tv.poster_id = new(string)
				*tv.poster_id = value.String
			}
		case trainingvideo.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				tv.course_id = new(string)
				*tv.course_id = value.String
			}
		case trainingvideo.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				tv.creator_id = new(string)
				*tv.creator_id = value.String
			}
		default:
			tv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrainingVideo.
// This includes values selected through modifiers, order, etc.
func (tv *TrainingVideo) Value(name string) (ent.Value, error) {
	return tv.selectValues.Get(name)
}

// QueryTrainingVideos queries the "training_videos" edge of the TrainingVideo entity.
func (tv *TrainingVideo) QueryTrainingVideos() *PartnerTrainingVideoQuery {
	return NewTrainingVideoClient(tv.config).QueryTrainingVideos(tv)
}

// QueryCreator queries the "creator" edge of the TrainingVideo entity.
func (tv *TrainingVideo) QueryCreator() *UserQuery {
	return NewTrainingVideoClient(tv.config).QueryCreator(tv)
}

// QueryCourse queries the "course" edge of the TrainingVideo entity.
func (tv *TrainingVideo) QueryCourse() *TrainingCourseQuery {
	return NewTrainingVideoClient(tv.config).QueryCourse(tv)
}

// QueryPoster queries the "poster" edge of the TrainingVideo entity.
func (tv *TrainingVideo) QueryPoster() *DocumentQuery {
	return NewTrainingVideoClient(tv.config).QueryPoster(tv)
}

// QueryVideo queries the "video" edge of the TrainingVideo entity.
func (tv *TrainingVideo) QueryVideo() *DocumentQuery {
	return NewTrainingVideoClient(tv.config).QueryVideo(tv)
}

// Update returns a builder for updating this TrainingVideo.
// Note that you need to call TrainingVideo.Unwrap() before calling this method if this TrainingVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (tv *TrainingVideo) Update() *TrainingVideoUpdateOne {
	return NewTrainingVideoClient(tv.config).UpdateOne(tv)
}

// Unwrap unwraps the TrainingVideo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tv *TrainingVideo) Unwrap() *TrainingVideo {
	_tx, ok := tv.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrainingVideo is not a transactional entity")
	}
	tv.config.driver = _tx.drv
	return tv
}

// String implements the fmt.Stringer.
func (tv *TrainingVideo) String() string {
	var builder strings.Builder
	builder.WriteString("TrainingVideo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tv.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", tv.Kind))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(tv.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tv.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTrainingVideos returns the TrainingVideos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tv *TrainingVideo) NamedTrainingVideos(name string) ([]*PartnerTrainingVideo, error) {
	if tv.Edges.namedTrainingVideos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tv.Edges.namedTrainingVideos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tv *TrainingVideo) appendNamedTrainingVideos(name string, edges ...*PartnerTrainingVideo) {
	if tv.Edges.namedTrainingVideos == nil {
		tv.Edges.namedTrainingVideos = make(map[string][]*PartnerTrainingVideo)
	}
	if len(edges) == 0 {
		tv.Edges.namedTrainingVideos[name] = []*PartnerTrainingVideo{}
	} else {
		tv.Edges.namedTrainingVideos[name] = append(tv.Edges.namedTrainingVideos[name], edges...)
	}
}

// TrainingVideos is a parsable slice of TrainingVideo.
type TrainingVideos []*TrainingVideo

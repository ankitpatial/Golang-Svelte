// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/installationjobprogress"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobQuery is the builder for querying InstallationJob entities.
type InstallationJobQuery struct {
	config
	ctx                      *QueryContext
	order                    []installationjob.OrderOption
	inters                   []Interceptor
	predicates               []predicate.InstallationJob
	withItems                *InstallationJobItemQuery
	withProgressHistory      *InstallationJobProgressQuery
	withRequestingPartner    *PartnerQuery
	withAssignedPartner      *PartnerQuery
	withCreator              *UserQuery
	withSalesRep             *UserQuery
	withFKs                  bool
	loadTotal                []func(context.Context, []*InstallationJob) error
	modifiers                []func(*sql.Selector)
	withNamedItems           map[string]*InstallationJobItemQuery
	withNamedProgressHistory map[string]*InstallationJobProgressQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InstallationJobQuery builder.
func (ijq *InstallationJobQuery) Where(ps ...predicate.InstallationJob) *InstallationJobQuery {
	ijq.predicates = append(ijq.predicates, ps...)
	return ijq
}

// Limit the number of records to be returned by this query.
func (ijq *InstallationJobQuery) Limit(limit int) *InstallationJobQuery {
	ijq.ctx.Limit = &limit
	return ijq
}

// Offset to start from.
func (ijq *InstallationJobQuery) Offset(offset int) *InstallationJobQuery {
	ijq.ctx.Offset = &offset
	return ijq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ijq *InstallationJobQuery) Unique(unique bool) *InstallationJobQuery {
	ijq.ctx.Unique = &unique
	return ijq
}

// Order specifies how the records should be ordered.
func (ijq *InstallationJobQuery) Order(o ...installationjob.OrderOption) *InstallationJobQuery {
	ijq.order = append(ijq.order, o...)
	return ijq
}

// QueryItems chains the current query on the "items" edge.
func (ijq *InstallationJobQuery) QueryItems() *InstallationJobItemQuery {
	query := (&InstallationJobItemClient{config: ijq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, selector),
			sqlgraph.To(installationjobitem.Table, installationjobitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, installationjob.ItemsTable, installationjob.ItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgressHistory chains the current query on the "progress_history" edge.
func (ijq *InstallationJobQuery) QueryProgressHistory() *InstallationJobProgressQuery {
	query := (&InstallationJobProgressClient{config: ijq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, selector),
			sqlgraph.To(installationjobprogress.Table, installationjobprogress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, installationjob.ProgressHistoryTable, installationjob.ProgressHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequestingPartner chains the current query on the "requesting_partner" edge.
func (ijq *InstallationJobQuery) QueryRequestingPartner() *PartnerQuery {
	query := (&PartnerClient{config: ijq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.RequestingPartnerTable, installationjob.RequestingPartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedPartner chains the current query on the "assigned_partner" edge.
func (ijq *InstallationJobQuery) QueryAssignedPartner() *PartnerQuery {
	query := (&PartnerClient{config: ijq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.AssignedPartnerTable, installationjob.AssignedPartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (ijq *InstallationJobQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: ijq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.CreatorTable, installationjob.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySalesRep chains the current query on the "sales_rep" edge.
func (ijq *InstallationJobQuery) QuerySalesRep() *UserQuery {
	query := (&UserClient{config: ijq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjob.Table, installationjob.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjob.SalesRepTable, installationjob.SalesRepColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InstallationJob entity from the query.
// Returns a *NotFoundError when no InstallationJob was found.
func (ijq *InstallationJobQuery) First(ctx context.Context) (*InstallationJob, error) {
	nodes, err := ijq.Limit(1).All(setContextOp(ctx, ijq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{installationjob.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ijq *InstallationJobQuery) FirstX(ctx context.Context) *InstallationJob {
	node, err := ijq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InstallationJob ID from the query.
// Returns a *NotFoundError when no InstallationJob ID was found.
func (ijq *InstallationJobQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ijq.Limit(1).IDs(setContextOp(ctx, ijq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{installationjob.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ijq *InstallationJobQuery) FirstIDX(ctx context.Context) string {
	id, err := ijq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InstallationJob entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InstallationJob entity is found.
// Returns a *NotFoundError when no InstallationJob entities are found.
func (ijq *InstallationJobQuery) Only(ctx context.Context) (*InstallationJob, error) {
	nodes, err := ijq.Limit(2).All(setContextOp(ctx, ijq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{installationjob.Label}
	default:
		return nil, &NotSingularError{installationjob.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ijq *InstallationJobQuery) OnlyX(ctx context.Context) *InstallationJob {
	node, err := ijq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InstallationJob ID in the query.
// Returns a *NotSingularError when more than one InstallationJob ID is found.
// Returns a *NotFoundError when no entities are found.
func (ijq *InstallationJobQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ijq.Limit(2).IDs(setContextOp(ctx, ijq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{installationjob.Label}
	default:
		err = &NotSingularError{installationjob.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ijq *InstallationJobQuery) OnlyIDX(ctx context.Context) string {
	id, err := ijq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InstallationJobs.
func (ijq *InstallationJobQuery) All(ctx context.Context) ([]*InstallationJob, error) {
	ctx = setContextOp(ctx, ijq.ctx, "All")
	if err := ijq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InstallationJob, *InstallationJobQuery]()
	return withInterceptors[[]*InstallationJob](ctx, ijq, qr, ijq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ijq *InstallationJobQuery) AllX(ctx context.Context) []*InstallationJob {
	nodes, err := ijq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InstallationJob IDs.
func (ijq *InstallationJobQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ijq.ctx.Unique == nil && ijq.path != nil {
		ijq.Unique(true)
	}
	ctx = setContextOp(ctx, ijq.ctx, "IDs")
	if err = ijq.Select(installationjob.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ijq *InstallationJobQuery) IDsX(ctx context.Context) []string {
	ids, err := ijq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ijq *InstallationJobQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ijq.ctx, "Count")
	if err := ijq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ijq, querierCount[*InstallationJobQuery](), ijq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ijq *InstallationJobQuery) CountX(ctx context.Context) int {
	count, err := ijq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ijq *InstallationJobQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ijq.ctx, "Exist")
	switch _, err := ijq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ijq *InstallationJobQuery) ExistX(ctx context.Context) bool {
	exist, err := ijq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InstallationJobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ijq *InstallationJobQuery) Clone() *InstallationJobQuery {
	if ijq == nil {
		return nil
	}
	return &InstallationJobQuery{
		config:                ijq.config,
		ctx:                   ijq.ctx.Clone(),
		order:                 append([]installationjob.OrderOption{}, ijq.order...),
		inters:                append([]Interceptor{}, ijq.inters...),
		predicates:            append([]predicate.InstallationJob{}, ijq.predicates...),
		withItems:             ijq.withItems.Clone(),
		withProgressHistory:   ijq.withProgressHistory.Clone(),
		withRequestingPartner: ijq.withRequestingPartner.Clone(),
		withAssignedPartner:   ijq.withAssignedPartner.Clone(),
		withCreator:           ijq.withCreator.Clone(),
		withSalesRep:          ijq.withSalesRep.Clone(),
		// clone intermediate query.
		sql:  ijq.sql.Clone(),
		path: ijq.path,
	}
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithItems(opts ...func(*InstallationJobItemQuery)) *InstallationJobQuery {
	query := (&InstallationJobItemClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijq.withItems = query
	return ijq
}

// WithProgressHistory tells the query-builder to eager-load the nodes that are connected to
// the "progress_history" edge. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithProgressHistory(opts ...func(*InstallationJobProgressQuery)) *InstallationJobQuery {
	query := (&InstallationJobProgressClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijq.withProgressHistory = query
	return ijq
}

// WithRequestingPartner tells the query-builder to eager-load the nodes that are connected to
// the "requesting_partner" edge. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithRequestingPartner(opts ...func(*PartnerQuery)) *InstallationJobQuery {
	query := (&PartnerClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijq.withRequestingPartner = query
	return ijq
}

// WithAssignedPartner tells the query-builder to eager-load the nodes that are connected to
// the "assigned_partner" edge. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithAssignedPartner(opts ...func(*PartnerQuery)) *InstallationJobQuery {
	query := (&PartnerClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijq.withAssignedPartner = query
	return ijq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithCreator(opts ...func(*UserQuery)) *InstallationJobQuery {
	query := (&UserClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijq.withCreator = query
	return ijq
}

// WithSalesRep tells the query-builder to eager-load the nodes that are connected to
// the "sales_rep" edge. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithSalesRep(opts ...func(*UserQuery)) *InstallationJobQuery {
	query := (&UserClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijq.withSalesRep = query
	return ijq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InstallationJob.Query().
//		GroupBy(installationjob.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ijq *InstallationJobQuery) GroupBy(field string, fields ...string) *InstallationJobGroupBy {
	ijq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InstallationJobGroupBy{build: ijq}
	grbuild.flds = &ijq.ctx.Fields
	grbuild.label = installationjob.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.InstallationJob.Query().
//		Select(installationjob.FieldCreatedAt).
//		Scan(ctx, &v)
func (ijq *InstallationJobQuery) Select(fields ...string) *InstallationJobSelect {
	ijq.ctx.Fields = append(ijq.ctx.Fields, fields...)
	sbuild := &InstallationJobSelect{InstallationJobQuery: ijq}
	sbuild.label = installationjob.Label
	sbuild.flds, sbuild.scan = &ijq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InstallationJobSelect configured with the given aggregations.
func (ijq *InstallationJobQuery) Aggregate(fns ...AggregateFunc) *InstallationJobSelect {
	return ijq.Select().Aggregate(fns...)
}

func (ijq *InstallationJobQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ijq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ijq); err != nil {
				return err
			}
		}
	}
	for _, f := range ijq.ctx.Fields {
		if !installationjob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ijq.path != nil {
		prev, err := ijq.path(ctx)
		if err != nil {
			return err
		}
		ijq.sql = prev
	}
	return nil
}

func (ijq *InstallationJobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InstallationJob, error) {
	var (
		nodes       = []*InstallationJob{}
		withFKs     = ijq.withFKs
		_spec       = ijq.querySpec()
		loadedTypes = [6]bool{
			ijq.withItems != nil,
			ijq.withProgressHistory != nil,
			ijq.withRequestingPartner != nil,
			ijq.withAssignedPartner != nil,
			ijq.withCreator != nil,
			ijq.withSalesRep != nil,
		}
	)
	if ijq.withRequestingPartner != nil || ijq.withAssignedPartner != nil || ijq.withCreator != nil || ijq.withSalesRep != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, installationjob.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InstallationJob).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InstallationJob{config: ijq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ijq.modifiers) > 0 {
		_spec.Modifiers = ijq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ijq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ijq.withItems; query != nil {
		if err := ijq.loadItems(ctx, query, nodes,
			func(n *InstallationJob) { n.Edges.Items = []*InstallationJobItem{} },
			func(n *InstallationJob, e *InstallationJobItem) { n.Edges.Items = append(n.Edges.Items, e) }); err != nil {
			return nil, err
		}
	}
	if query := ijq.withProgressHistory; query != nil {
		if err := ijq.loadProgressHistory(ctx, query, nodes,
			func(n *InstallationJob) { n.Edges.ProgressHistory = []*InstallationJobProgress{} },
			func(n *InstallationJob, e *InstallationJobProgress) {
				n.Edges.ProgressHistory = append(n.Edges.ProgressHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ijq.withRequestingPartner; query != nil {
		if err := ijq.loadRequestingPartner(ctx, query, nodes, nil,
			func(n *InstallationJob, e *Partner) { n.Edges.RequestingPartner = e }); err != nil {
			return nil, err
		}
	}
	if query := ijq.withAssignedPartner; query != nil {
		if err := ijq.loadAssignedPartner(ctx, query, nodes, nil,
			func(n *InstallationJob, e *Partner) { n.Edges.AssignedPartner = e }); err != nil {
			return nil, err
		}
	}
	if query := ijq.withCreator; query != nil {
		if err := ijq.loadCreator(ctx, query, nodes, nil,
			func(n *InstallationJob, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := ijq.withSalesRep; query != nil {
		if err := ijq.loadSalesRep(ctx, query, nodes, nil,
			func(n *InstallationJob, e *User) { n.Edges.SalesRep = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range ijq.withNamedItems {
		if err := ijq.loadItems(ctx, query, nodes,
			func(n *InstallationJob) { n.appendNamedItems(name) },
			func(n *InstallationJob, e *InstallationJobItem) { n.appendNamedItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ijq.withNamedProgressHistory {
		if err := ijq.loadProgressHistory(ctx, query, nodes,
			func(n *InstallationJob) { n.appendNamedProgressHistory(name) },
			func(n *InstallationJob, e *InstallationJobProgress) { n.appendNamedProgressHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ijq.loadTotal {
		if err := ijq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ijq *InstallationJobQuery) loadItems(ctx context.Context, query *InstallationJobItemQuery, nodes []*InstallationJob, init func(*InstallationJob), assign func(*InstallationJob, *InstallationJobItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*InstallationJob)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InstallationJobItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(installationjob.ItemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ijq *InstallationJobQuery) loadProgressHistory(ctx context.Context, query *InstallationJobProgressQuery, nodes []*InstallationJob, init func(*InstallationJob), assign func(*InstallationJob, *InstallationJobProgress)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*InstallationJob)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InstallationJobProgress(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(installationjob.ProgressHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ijq *InstallationJobQuery) loadRequestingPartner(ctx context.Context, query *PartnerQuery, nodes []*InstallationJob, init func(*InstallationJob), assign func(*InstallationJob, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InstallationJob)
	for i := range nodes {
		if nodes[i].requesting_partner_id == nil {
			continue
		}
		fk := *nodes[i].requesting_partner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "requesting_partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ijq *InstallationJobQuery) loadAssignedPartner(ctx context.Context, query *PartnerQuery, nodes []*InstallationJob, init func(*InstallationJob), assign func(*InstallationJob, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InstallationJob)
	for i := range nodes {
		if nodes[i].assigned_partner_id == nil {
			continue
		}
		fk := *nodes[i].assigned_partner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "assigned_partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ijq *InstallationJobQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*InstallationJob, init func(*InstallationJob), assign func(*InstallationJob, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InstallationJob)
	for i := range nodes {
		if nodes[i].creator_id == nil {
			continue
		}
		fk := *nodes[i].creator_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ijq *InstallationJobQuery) loadSalesRep(ctx context.Context, query *UserQuery, nodes []*InstallationJob, init func(*InstallationJob), assign func(*InstallationJob, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InstallationJob)
	for i := range nodes {
		if nodes[i].sales_rep_id == nil {
			continue
		}
		fk := *nodes[i].sales_rep_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sales_rep_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ijq *InstallationJobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ijq.querySpec()
	if len(ijq.modifiers) > 0 {
		_spec.Modifiers = ijq.modifiers
	}
	_spec.Node.Columns = ijq.ctx.Fields
	if len(ijq.ctx.Fields) > 0 {
		_spec.Unique = ijq.ctx.Unique != nil && *ijq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ijq.driver, _spec)
}

func (ijq *InstallationJobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(installationjob.Table, installationjob.Columns, sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString))
	_spec.From = ijq.sql
	if unique := ijq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ijq.path != nil {
		_spec.Unique = true
	}
	if fields := ijq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installationjob.FieldID)
		for i := range fields {
			if fields[i] != installationjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ijq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ijq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ijq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ijq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ijq *InstallationJobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ijq.driver.Dialect())
	t1 := builder.Table(installationjob.Table)
	columns := ijq.ctx.Fields
	if len(columns) == 0 {
		columns = installationjob.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ijq.sql != nil {
		selector = ijq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ijq.ctx.Unique != nil && *ijq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ijq.modifiers {
		m(selector)
	}
	for _, p := range ijq.predicates {
		p(selector)
	}
	for _, p := range ijq.order {
		p(selector)
	}
	if offset := ijq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ijq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ijq *InstallationJobQuery) Modify(modifiers ...func(s *sql.Selector)) *InstallationJobSelect {
	ijq.modifiers = append(ijq.modifiers, modifiers...)
	return ijq.Select()
}

// WithNamedItems tells the query-builder to eager-load the nodes that are connected to the "items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithNamedItems(name string, opts ...func(*InstallationJobItemQuery)) *InstallationJobQuery {
	query := (&InstallationJobItemClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ijq.withNamedItems == nil {
		ijq.withNamedItems = make(map[string]*InstallationJobItemQuery)
	}
	ijq.withNamedItems[name] = query
	return ijq
}

// WithNamedProgressHistory tells the query-builder to eager-load the nodes that are connected to the "progress_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ijq *InstallationJobQuery) WithNamedProgressHistory(name string, opts ...func(*InstallationJobProgressQuery)) *InstallationJobQuery {
	query := (&InstallationJobProgressClient{config: ijq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ijq.withNamedProgressHistory == nil {
		ijq.withNamedProgressHistory = make(map[string]*InstallationJobProgressQuery)
	}
	ijq.withNamedProgressHistory[name] = query
	return ijq
}

// InstallationJobGroupBy is the group-by builder for InstallationJob entities.
type InstallationJobGroupBy struct {
	selector
	build *InstallationJobQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ijgb *InstallationJobGroupBy) Aggregate(fns ...AggregateFunc) *InstallationJobGroupBy {
	ijgb.fns = append(ijgb.fns, fns...)
	return ijgb
}

// Scan applies the selector query and scans the result into the given value.
func (ijgb *InstallationJobGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ijgb.build.ctx, "GroupBy")
	if err := ijgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstallationJobQuery, *InstallationJobGroupBy](ctx, ijgb.build, ijgb, ijgb.build.inters, v)
}

func (ijgb *InstallationJobGroupBy) sqlScan(ctx context.Context, root *InstallationJobQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ijgb.fns))
	for _, fn := range ijgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ijgb.flds)+len(ijgb.fns))
		for _, f := range *ijgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ijgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ijgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InstallationJobSelect is the builder for selecting fields of InstallationJob entities.
type InstallationJobSelect struct {
	*InstallationJobQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ijs *InstallationJobSelect) Aggregate(fns ...AggregateFunc) *InstallationJobSelect {
	ijs.fns = append(ijs.fns, fns...)
	return ijs
}

// Scan applies the selector query and scans the result into the given value.
func (ijs *InstallationJobSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ijs.ctx, "Select")
	if err := ijs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstallationJobQuery, *InstallationJobSelect](ctx, ijs.InstallationJobQuery, ijs, ijs.inters, v)
}

func (ijs *InstallationJobSelect) sqlScan(ctx context.Context, root *InstallationJobQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ijs.fns))
	for _, fn := range ijs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ijs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ijs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ijs *InstallationJobSelect) Modify(modifiers ...func(s *sql.Selector)) *InstallationJobSelect {
	ijs.modifiers = append(ijs.modifiers, modifiers...)
	return ijs
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/job"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OptionListQuery is the builder for querying OptionList entities.
type OptionListQuery struct {
	config
	ctx                     *QueryContext
	order                   []optionlist.OrderOption
	inters                  []Interceptor
	predicates              []predicate.OptionList
	withFinanceOptions      *PartnerQuery
	withEpcOptions          *PartnerQuery
	withEpc                 *JobQuery
	loadTotal               []func(context.Context, []*OptionList) error
	modifiers               []func(*sql.Selector)
	withNamedFinanceOptions map[string]*PartnerQuery
	withNamedEpcOptions     map[string]*PartnerQuery
	withNamedEpc            map[string]*JobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OptionListQuery builder.
func (olq *OptionListQuery) Where(ps ...predicate.OptionList) *OptionListQuery {
	olq.predicates = append(olq.predicates, ps...)
	return olq
}

// Limit the number of records to be returned by this query.
func (olq *OptionListQuery) Limit(limit int) *OptionListQuery {
	olq.ctx.Limit = &limit
	return olq
}

// Offset to start from.
func (olq *OptionListQuery) Offset(offset int) *OptionListQuery {
	olq.ctx.Offset = &offset
	return olq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (olq *OptionListQuery) Unique(unique bool) *OptionListQuery {
	olq.ctx.Unique = &unique
	return olq
}

// Order specifies how the records should be ordered.
func (olq *OptionListQuery) Order(o ...optionlist.OrderOption) *OptionListQuery {
	olq.order = append(olq.order, o...)
	return olq
}

// QueryFinanceOptions chains the current query on the "finance_options" edge.
func (olq *OptionListQuery) QueryFinanceOptions() *PartnerQuery {
	query := (&PartnerClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(optionlist.Table, optionlist.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, optionlist.FinanceOptionsTable, optionlist.FinanceOptionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpcOptions chains the current query on the "epc_options" edge.
func (olq *OptionListQuery) QueryEpcOptions() *PartnerQuery {
	query := (&PartnerClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(optionlist.Table, optionlist.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, optionlist.EpcOptionsTable, optionlist.EpcOptionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpc chains the current query on the "epc" edge.
func (olq *OptionListQuery) QueryEpc() *JobQuery {
	query := (&JobClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(optionlist.Table, optionlist.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, optionlist.EpcTable, optionlist.EpcColumn),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OptionList entity from the query.
// Returns a *NotFoundError when no OptionList was found.
func (olq *OptionListQuery) First(ctx context.Context) (*OptionList, error) {
	nodes, err := olq.Limit(1).All(setContextOp(ctx, olq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{optionlist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (olq *OptionListQuery) FirstX(ctx context.Context) *OptionList {
	node, err := olq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OptionList ID from the query.
// Returns a *NotFoundError when no OptionList ID was found.
func (olq *OptionListQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = olq.Limit(1).IDs(setContextOp(ctx, olq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{optionlist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (olq *OptionListQuery) FirstIDX(ctx context.Context) string {
	id, err := olq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OptionList entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OptionList entity is found.
// Returns a *NotFoundError when no OptionList entities are found.
func (olq *OptionListQuery) Only(ctx context.Context) (*OptionList, error) {
	nodes, err := olq.Limit(2).All(setContextOp(ctx, olq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{optionlist.Label}
	default:
		return nil, &NotSingularError{optionlist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (olq *OptionListQuery) OnlyX(ctx context.Context) *OptionList {
	node, err := olq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OptionList ID in the query.
// Returns a *NotSingularError when more than one OptionList ID is found.
// Returns a *NotFoundError when no entities are found.
func (olq *OptionListQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = olq.Limit(2).IDs(setContextOp(ctx, olq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{optionlist.Label}
	default:
		err = &NotSingularError{optionlist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (olq *OptionListQuery) OnlyIDX(ctx context.Context) string {
	id, err := olq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OptionLists.
func (olq *OptionListQuery) All(ctx context.Context) ([]*OptionList, error) {
	ctx = setContextOp(ctx, olq.ctx, "All")
	if err := olq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OptionList, *OptionListQuery]()
	return withInterceptors[[]*OptionList](ctx, olq, qr, olq.inters)
}

// AllX is like All, but panics if an error occurs.
func (olq *OptionListQuery) AllX(ctx context.Context) []*OptionList {
	nodes, err := olq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OptionList IDs.
func (olq *OptionListQuery) IDs(ctx context.Context) (ids []string, err error) {
	if olq.ctx.Unique == nil && olq.path != nil {
		olq.Unique(true)
	}
	ctx = setContextOp(ctx, olq.ctx, "IDs")
	if err = olq.Select(optionlist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (olq *OptionListQuery) IDsX(ctx context.Context) []string {
	ids, err := olq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (olq *OptionListQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, olq.ctx, "Count")
	if err := olq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, olq, querierCount[*OptionListQuery](), olq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (olq *OptionListQuery) CountX(ctx context.Context) int {
	count, err := olq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (olq *OptionListQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, olq.ctx, "Exist")
	switch _, err := olq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (olq *OptionListQuery) ExistX(ctx context.Context) bool {
	exist, err := olq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OptionListQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (olq *OptionListQuery) Clone() *OptionListQuery {
	if olq == nil {
		return nil
	}
	return &OptionListQuery{
		config:             olq.config,
		ctx:                olq.ctx.Clone(),
		order:              append([]optionlist.OrderOption{}, olq.order...),
		inters:             append([]Interceptor{}, olq.inters...),
		predicates:         append([]predicate.OptionList{}, olq.predicates...),
		withFinanceOptions: olq.withFinanceOptions.Clone(),
		withEpcOptions:     olq.withEpcOptions.Clone(),
		withEpc:            olq.withEpc.Clone(),
		// clone intermediate query.
		sql:  olq.sql.Clone(),
		path: olq.path,
	}
}

// WithFinanceOptions tells the query-builder to eager-load the nodes that are connected to
// the "finance_options" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OptionListQuery) WithFinanceOptions(opts ...func(*PartnerQuery)) *OptionListQuery {
	query := (&PartnerClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withFinanceOptions = query
	return olq
}

// WithEpcOptions tells the query-builder to eager-load the nodes that are connected to
// the "epc_options" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OptionListQuery) WithEpcOptions(opts ...func(*PartnerQuery)) *OptionListQuery {
	query := (&PartnerClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withEpcOptions = query
	return olq
}

// WithEpc tells the query-builder to eager-load the nodes that are connected to
// the "epc" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OptionListQuery) WithEpc(opts ...func(*JobQuery)) *OptionListQuery {
	query := (&JobClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withEpc = query
	return olq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OptionList.Query().
//		GroupBy(optionlist.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (olq *OptionListQuery) GroupBy(field string, fields ...string) *OptionListGroupBy {
	olq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OptionListGroupBy{build: olq}
	grbuild.flds = &olq.ctx.Fields
	grbuild.label = optionlist.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.OptionList.Query().
//		Select(optionlist.FieldCreatedAt).
//		Scan(ctx, &v)
func (olq *OptionListQuery) Select(fields ...string) *OptionListSelect {
	olq.ctx.Fields = append(olq.ctx.Fields, fields...)
	sbuild := &OptionListSelect{OptionListQuery: olq}
	sbuild.label = optionlist.Label
	sbuild.flds, sbuild.scan = &olq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OptionListSelect configured with the given aggregations.
func (olq *OptionListQuery) Aggregate(fns ...AggregateFunc) *OptionListSelect {
	return olq.Select().Aggregate(fns...)
}

func (olq *OptionListQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range olq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, olq); err != nil {
				return err
			}
		}
	}
	for _, f := range olq.ctx.Fields {
		if !optionlist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if olq.path != nil {
		prev, err := olq.path(ctx)
		if err != nil {
			return err
		}
		olq.sql = prev
	}
	return nil
}

func (olq *OptionListQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OptionList, error) {
	var (
		nodes       = []*OptionList{}
		_spec       = olq.querySpec()
		loadedTypes = [3]bool{
			olq.withFinanceOptions != nil,
			olq.withEpcOptions != nil,
			olq.withEpc != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OptionList).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OptionList{config: olq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(olq.modifiers) > 0 {
		_spec.Modifiers = olq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, olq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := olq.withFinanceOptions; query != nil {
		if err := olq.loadFinanceOptions(ctx, query, nodes,
			func(n *OptionList) { n.Edges.FinanceOptions = []*Partner{} },
			func(n *OptionList, e *Partner) { n.Edges.FinanceOptions = append(n.Edges.FinanceOptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := olq.withEpcOptions; query != nil {
		if err := olq.loadEpcOptions(ctx, query, nodes,
			func(n *OptionList) { n.Edges.EpcOptions = []*Partner{} },
			func(n *OptionList, e *Partner) { n.Edges.EpcOptions = append(n.Edges.EpcOptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := olq.withEpc; query != nil {
		if err := olq.loadEpc(ctx, query, nodes,
			func(n *OptionList) { n.Edges.Epc = []*Job{} },
			func(n *OptionList, e *Job) { n.Edges.Epc = append(n.Edges.Epc, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range olq.withNamedFinanceOptions {
		if err := olq.loadFinanceOptions(ctx, query, nodes,
			func(n *OptionList) { n.appendNamedFinanceOptions(name) },
			func(n *OptionList, e *Partner) { n.appendNamedFinanceOptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range olq.withNamedEpcOptions {
		if err := olq.loadEpcOptions(ctx, query, nodes,
			func(n *OptionList) { n.appendNamedEpcOptions(name) },
			func(n *OptionList, e *Partner) { n.appendNamedEpcOptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range olq.withNamedEpc {
		if err := olq.loadEpc(ctx, query, nodes,
			func(n *OptionList) { n.appendNamedEpc(name) },
			func(n *OptionList, e *Job) { n.appendNamedEpc(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range olq.loadTotal {
		if err := olq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (olq *OptionListQuery) loadFinanceOptions(ctx context.Context, query *PartnerQuery, nodes []*OptionList, init func(*OptionList), assign func(*OptionList, *Partner)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*OptionList)
	nids := make(map[string]map[*OptionList]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(optionlist.FinanceOptionsTable)
		s.Join(joinT).On(s.C(partner.FieldID), joinT.C(optionlist.FinanceOptionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(optionlist.FinanceOptionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(optionlist.FinanceOptionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*OptionList]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Partner](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "finance_options" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (olq *OptionListQuery) loadEpcOptions(ctx context.Context, query *PartnerQuery, nodes []*OptionList, init func(*OptionList), assign func(*OptionList, *Partner)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*OptionList)
	nids := make(map[string]map[*OptionList]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(optionlist.EpcOptionsTable)
		s.Join(joinT).On(s.C(partner.FieldID), joinT.C(optionlist.EpcOptionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(optionlist.EpcOptionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(optionlist.EpcOptionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*OptionList]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Partner](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "epc_options" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (olq *OptionListQuery) loadEpc(ctx context.Context, query *JobQuery, nodes []*OptionList, init func(*OptionList), assign func(*OptionList, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*OptionList)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(optionlist.EpcColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.epc_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "epc_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "epc_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (olq *OptionListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := olq.querySpec()
	if len(olq.modifiers) > 0 {
		_spec.Modifiers = olq.modifiers
	}
	_spec.Node.Columns = olq.ctx.Fields
	if len(olq.ctx.Fields) > 0 {
		_spec.Unique = olq.ctx.Unique != nil && *olq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, olq.driver, _spec)
}

func (olq *OptionListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(optionlist.Table, optionlist.Columns, sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString))
	_spec.From = olq.sql
	if unique := olq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if olq.path != nil {
		_spec.Unique = true
	}
	if fields := olq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, optionlist.FieldID)
		for i := range fields {
			if fields[i] != optionlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := olq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := olq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := olq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := olq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (olq *OptionListQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(olq.driver.Dialect())
	t1 := builder.Table(optionlist.Table)
	columns := olq.ctx.Fields
	if len(columns) == 0 {
		columns = optionlist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if olq.sql != nil {
		selector = olq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if olq.ctx.Unique != nil && *olq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range olq.modifiers {
		m(selector)
	}
	for _, p := range olq.predicates {
		p(selector)
	}
	for _, p := range olq.order {
		p(selector)
	}
	if offset := olq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := olq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (olq *OptionListQuery) Modify(modifiers ...func(s *sql.Selector)) *OptionListSelect {
	olq.modifiers = append(olq.modifiers, modifiers...)
	return olq.Select()
}

// WithNamedFinanceOptions tells the query-builder to eager-load the nodes that are connected to the "finance_options"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (olq *OptionListQuery) WithNamedFinanceOptions(name string, opts ...func(*PartnerQuery)) *OptionListQuery {
	query := (&PartnerClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if olq.withNamedFinanceOptions == nil {
		olq.withNamedFinanceOptions = make(map[string]*PartnerQuery)
	}
	olq.withNamedFinanceOptions[name] = query
	return olq
}

// WithNamedEpcOptions tells the query-builder to eager-load the nodes that are connected to the "epc_options"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (olq *OptionListQuery) WithNamedEpcOptions(name string, opts ...func(*PartnerQuery)) *OptionListQuery {
	query := (&PartnerClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if olq.withNamedEpcOptions == nil {
		olq.withNamedEpcOptions = make(map[string]*PartnerQuery)
	}
	olq.withNamedEpcOptions[name] = query
	return olq
}

// WithNamedEpc tells the query-builder to eager-load the nodes that are connected to the "epc"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (olq *OptionListQuery) WithNamedEpc(name string, opts ...func(*JobQuery)) *OptionListQuery {
	query := (&JobClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if olq.withNamedEpc == nil {
		olq.withNamedEpc = make(map[string]*JobQuery)
	}
	olq.withNamedEpc[name] = query
	return olq
}

// OptionListGroupBy is the group-by builder for OptionList entities.
type OptionListGroupBy struct {
	selector
	build *OptionListQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (olgb *OptionListGroupBy) Aggregate(fns ...AggregateFunc) *OptionListGroupBy {
	olgb.fns = append(olgb.fns, fns...)
	return olgb
}

// Scan applies the selector query and scans the result into the given value.
func (olgb *OptionListGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, olgb.build.ctx, "GroupBy")
	if err := olgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OptionListQuery, *OptionListGroupBy](ctx, olgb.build, olgb, olgb.build.inters, v)
}

func (olgb *OptionListGroupBy) sqlScan(ctx context.Context, root *OptionListQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(olgb.fns))
	for _, fn := range olgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*olgb.flds)+len(olgb.fns))
		for _, f := range *olgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*olgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := olgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OptionListSelect is the builder for selecting fields of OptionList entities.
type OptionListSelect struct {
	*OptionListQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ols *OptionListSelect) Aggregate(fns ...AggregateFunc) *OptionListSelect {
	ols.fns = append(ols.fns, fns...)
	return ols
}

// Scan applies the selector query and scans the result into the given value.
func (ols *OptionListSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ols.ctx, "Select")
	if err := ols.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OptionListQuery, *OptionListSelect](ctx, ols.OptionListQuery, ols, ols.inters, v)
}

func (ols *OptionListSelect) sqlScan(ctx context.Context, root *OptionListQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ols.fns))
	for _, fn := range ols.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ols.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ols.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ols *OptionListSelect) Modify(modifiers ...func(s *sql.Selector)) *OptionListSelect {
	ols.modifiers = append(ols.modifiers, modifiers...)
	return ols
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/job"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OptionListUpdate is the builder for updating OptionList entities.
type OptionListUpdate struct {
	config
	hooks     []Hook
	mutation  *OptionListMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OptionListUpdate builder.
func (olu *OptionListUpdate) Where(ps ...predicate.OptionList) *OptionListUpdate {
	olu.mutation.Where(ps...)
	return olu
}

// SetUpdatedAt sets the "updated_at" field.
func (olu *OptionListUpdate) SetUpdatedAt(t time.Time) *OptionListUpdate {
	olu.mutation.SetUpdatedAt(t)
	return olu
}

// SetType sets the "type" field.
func (olu *OptionListUpdate) SetType(el enum.OptionList) *OptionListUpdate {
	olu.mutation.SetType(el)
	return olu
}

// SetName sets the "name" field.
func (olu *OptionListUpdate) SetName(s string) *OptionListUpdate {
	olu.mutation.SetName(s)
	return olu
}

// SetDisplayName sets the "display_name" field.
func (olu *OptionListUpdate) SetDisplayName(s string) *OptionListUpdate {
	olu.mutation.SetDisplayName(s)
	return olu
}

// SetActive sets the "active" field.
func (olu *OptionListUpdate) SetActive(b bool) *OptionListUpdate {
	olu.mutation.SetActive(b)
	return olu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (olu *OptionListUpdate) SetNillableActive(b *bool) *OptionListUpdate {
	if b != nil {
		olu.SetActive(*b)
	}
	return olu
}

// SetOrder sets the "order" field.
func (olu *OptionListUpdate) SetOrder(i int) *OptionListUpdate {
	olu.mutation.ResetOrder()
	olu.mutation.SetOrder(i)
	return olu
}

// AddOrder adds i to the "order" field.
func (olu *OptionListUpdate) AddOrder(i int) *OptionListUpdate {
	olu.mutation.AddOrder(i)
	return olu
}

// AddFinanceOptionIDs adds the "finance_options" edge to the Partner entity by IDs.
func (olu *OptionListUpdate) AddFinanceOptionIDs(ids ...string) *OptionListUpdate {
	olu.mutation.AddFinanceOptionIDs(ids...)
	return olu
}

// AddFinanceOptions adds the "finance_options" edges to the Partner entity.
func (olu *OptionListUpdate) AddFinanceOptions(p ...*Partner) *OptionListUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return olu.AddFinanceOptionIDs(ids...)
}

// AddEpcOptionIDs adds the "epc_options" edge to the Partner entity by IDs.
func (olu *OptionListUpdate) AddEpcOptionIDs(ids ...string) *OptionListUpdate {
	olu.mutation.AddEpcOptionIDs(ids...)
	return olu
}

// AddEpcOptions adds the "epc_options" edges to the Partner entity.
func (olu *OptionListUpdate) AddEpcOptions(p ...*Partner) *OptionListUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return olu.AddEpcOptionIDs(ids...)
}

// AddEpcIDs adds the "epc" edge to the Job entity by IDs.
func (olu *OptionListUpdate) AddEpcIDs(ids ...string) *OptionListUpdate {
	olu.mutation.AddEpcIDs(ids...)
	return olu
}

// AddEpc adds the "epc" edges to the Job entity.
func (olu *OptionListUpdate) AddEpc(j ...*Job) *OptionListUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return olu.AddEpcIDs(ids...)
}

// Mutation returns the OptionListMutation object of the builder.
func (olu *OptionListUpdate) Mutation() *OptionListMutation {
	return olu.mutation
}

// ClearFinanceOptions clears all "finance_options" edges to the Partner entity.
func (olu *OptionListUpdate) ClearFinanceOptions() *OptionListUpdate {
	olu.mutation.ClearFinanceOptions()
	return olu
}

// RemoveFinanceOptionIDs removes the "finance_options" edge to Partner entities by IDs.
func (olu *OptionListUpdate) RemoveFinanceOptionIDs(ids ...string) *OptionListUpdate {
	olu.mutation.RemoveFinanceOptionIDs(ids...)
	return olu
}

// RemoveFinanceOptions removes "finance_options" edges to Partner entities.
func (olu *OptionListUpdate) RemoveFinanceOptions(p ...*Partner) *OptionListUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return olu.RemoveFinanceOptionIDs(ids...)
}

// ClearEpcOptions clears all "epc_options" edges to the Partner entity.
func (olu *OptionListUpdate) ClearEpcOptions() *OptionListUpdate {
	olu.mutation.ClearEpcOptions()
	return olu
}

// RemoveEpcOptionIDs removes the "epc_options" edge to Partner entities by IDs.
func (olu *OptionListUpdate) RemoveEpcOptionIDs(ids ...string) *OptionListUpdate {
	olu.mutation.RemoveEpcOptionIDs(ids...)
	return olu
}

// RemoveEpcOptions removes "epc_options" edges to Partner entities.
func (olu *OptionListUpdate) RemoveEpcOptions(p ...*Partner) *OptionListUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return olu.RemoveEpcOptionIDs(ids...)
}

// ClearEpc clears all "epc" edges to the Job entity.
func (olu *OptionListUpdate) ClearEpc() *OptionListUpdate {
	olu.mutation.ClearEpc()
	return olu
}

// RemoveEpcIDs removes the "epc" edge to Job entities by IDs.
func (olu *OptionListUpdate) RemoveEpcIDs(ids ...string) *OptionListUpdate {
	olu.mutation.RemoveEpcIDs(ids...)
	return olu
}

// RemoveEpc removes "epc" edges to Job entities.
func (olu *OptionListUpdate) RemoveEpc(j ...*Job) *OptionListUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return olu.RemoveEpcIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (olu *OptionListUpdate) Save(ctx context.Context) (int, error) {
	olu.defaults()
	return withHooks(ctx, olu.sqlSave, olu.mutation, olu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (olu *OptionListUpdate) SaveX(ctx context.Context) int {
	affected, err := olu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (olu *OptionListUpdate) Exec(ctx context.Context) error {
	_, err := olu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olu *OptionListUpdate) ExecX(ctx context.Context) {
	if err := olu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olu *OptionListUpdate) defaults() {
	if _, ok := olu.mutation.UpdatedAt(); !ok {
		v := optionlist.UpdateDefaultUpdatedAt()
		olu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (olu *OptionListUpdate) check() error {
	if v, ok := olu.mutation.GetType(); ok {
		if err := optionlist.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OptionList.type": %w`, err)}
		}
	}
	if v, ok := olu.mutation.Name(); ok {
		if err := optionlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OptionList.name": %w`, err)}
		}
	}
	if v, ok := olu.mutation.DisplayName(); ok {
		if err := optionlist.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "OptionList.display_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (olu *OptionListUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OptionListUpdate {
	olu.modifiers = append(olu.modifiers, modifiers...)
	return olu
}

func (olu *OptionListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := olu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(optionlist.Table, optionlist.Columns, sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString))
	if ps := olu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := olu.mutation.UpdatedAt(); ok {
		_spec.SetField(optionlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := olu.mutation.GetType(); ok {
		_spec.SetField(optionlist.FieldType, field.TypeEnum, value)
	}
	if value, ok := olu.mutation.Name(); ok {
		_spec.SetField(optionlist.FieldName, field.TypeString, value)
	}
	if value, ok := olu.mutation.DisplayName(); ok {
		_spec.SetField(optionlist.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := olu.mutation.Active(); ok {
		_spec.SetField(optionlist.FieldActive, field.TypeBool, value)
	}
	if value, ok := olu.mutation.Order(); ok {
		_spec.SetField(optionlist.FieldOrder, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedOrder(); ok {
		_spec.AddField(optionlist.FieldOrder, field.TypeInt, value)
	}
	if olu.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.RemovedFinanceOptionsIDs(); len(nodes) > 0 && !olu.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.FinanceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if olu.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.RemovedEpcOptionsIDs(); len(nodes) > 0 && !olu.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.EpcOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if olu.mutation.EpcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.RemovedEpcIDs(); len(nodes) > 0 && !olu.mutation.EpcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.EpcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(olu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, olu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{optionlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	olu.mutation.done = true
	return n, nil
}

// OptionListUpdateOne is the builder for updating a single OptionList entity.
type OptionListUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OptionListMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (oluo *OptionListUpdateOne) SetUpdatedAt(t time.Time) *OptionListUpdateOne {
	oluo.mutation.SetUpdatedAt(t)
	return oluo
}

// SetType sets the "type" field.
func (oluo *OptionListUpdateOne) SetType(el enum.OptionList) *OptionListUpdateOne {
	oluo.mutation.SetType(el)
	return oluo
}

// SetName sets the "name" field.
func (oluo *OptionListUpdateOne) SetName(s string) *OptionListUpdateOne {
	oluo.mutation.SetName(s)
	return oluo
}

// SetDisplayName sets the "display_name" field.
func (oluo *OptionListUpdateOne) SetDisplayName(s string) *OptionListUpdateOne {
	oluo.mutation.SetDisplayName(s)
	return oluo
}

// SetActive sets the "active" field.
func (oluo *OptionListUpdateOne) SetActive(b bool) *OptionListUpdateOne {
	oluo.mutation.SetActive(b)
	return oluo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (oluo *OptionListUpdateOne) SetNillableActive(b *bool) *OptionListUpdateOne {
	if b != nil {
		oluo.SetActive(*b)
	}
	return oluo
}

// SetOrder sets the "order" field.
func (oluo *OptionListUpdateOne) SetOrder(i int) *OptionListUpdateOne {
	oluo.mutation.ResetOrder()
	oluo.mutation.SetOrder(i)
	return oluo
}

// AddOrder adds i to the "order" field.
func (oluo *OptionListUpdateOne) AddOrder(i int) *OptionListUpdateOne {
	oluo.mutation.AddOrder(i)
	return oluo
}

// AddFinanceOptionIDs adds the "finance_options" edge to the Partner entity by IDs.
func (oluo *OptionListUpdateOne) AddFinanceOptionIDs(ids ...string) *OptionListUpdateOne {
	oluo.mutation.AddFinanceOptionIDs(ids...)
	return oluo
}

// AddFinanceOptions adds the "finance_options" edges to the Partner entity.
func (oluo *OptionListUpdateOne) AddFinanceOptions(p ...*Partner) *OptionListUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oluo.AddFinanceOptionIDs(ids...)
}

// AddEpcOptionIDs adds the "epc_options" edge to the Partner entity by IDs.
func (oluo *OptionListUpdateOne) AddEpcOptionIDs(ids ...string) *OptionListUpdateOne {
	oluo.mutation.AddEpcOptionIDs(ids...)
	return oluo
}

// AddEpcOptions adds the "epc_options" edges to the Partner entity.
func (oluo *OptionListUpdateOne) AddEpcOptions(p ...*Partner) *OptionListUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oluo.AddEpcOptionIDs(ids...)
}

// AddEpcIDs adds the "epc" edge to the Job entity by IDs.
func (oluo *OptionListUpdateOne) AddEpcIDs(ids ...string) *OptionListUpdateOne {
	oluo.mutation.AddEpcIDs(ids...)
	return oluo
}

// AddEpc adds the "epc" edges to the Job entity.
func (oluo *OptionListUpdateOne) AddEpc(j ...*Job) *OptionListUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return oluo.AddEpcIDs(ids...)
}

// Mutation returns the OptionListMutation object of the builder.
func (oluo *OptionListUpdateOne) Mutation() *OptionListMutation {
	return oluo.mutation
}

// ClearFinanceOptions clears all "finance_options" edges to the Partner entity.
func (oluo *OptionListUpdateOne) ClearFinanceOptions() *OptionListUpdateOne {
	oluo.mutation.ClearFinanceOptions()
	return oluo
}

// RemoveFinanceOptionIDs removes the "finance_options" edge to Partner entities by IDs.
func (oluo *OptionListUpdateOne) RemoveFinanceOptionIDs(ids ...string) *OptionListUpdateOne {
	oluo.mutation.RemoveFinanceOptionIDs(ids...)
	return oluo
}

// RemoveFinanceOptions removes "finance_options" edges to Partner entities.
func (oluo *OptionListUpdateOne) RemoveFinanceOptions(p ...*Partner) *OptionListUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oluo.RemoveFinanceOptionIDs(ids...)
}

// ClearEpcOptions clears all "epc_options" edges to the Partner entity.
func (oluo *OptionListUpdateOne) ClearEpcOptions() *OptionListUpdateOne {
	oluo.mutation.ClearEpcOptions()
	return oluo
}

// RemoveEpcOptionIDs removes the "epc_options" edge to Partner entities by IDs.
func (oluo *OptionListUpdateOne) RemoveEpcOptionIDs(ids ...string) *OptionListUpdateOne {
	oluo.mutation.RemoveEpcOptionIDs(ids...)
	return oluo
}

// RemoveEpcOptions removes "epc_options" edges to Partner entities.
func (oluo *OptionListUpdateOne) RemoveEpcOptions(p ...*Partner) *OptionListUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oluo.RemoveEpcOptionIDs(ids...)
}

// ClearEpc clears all "epc" edges to the Job entity.
func (oluo *OptionListUpdateOne) ClearEpc() *OptionListUpdateOne {
	oluo.mutation.ClearEpc()
	return oluo
}

// RemoveEpcIDs removes the "epc" edge to Job entities by IDs.
func (oluo *OptionListUpdateOne) RemoveEpcIDs(ids ...string) *OptionListUpdateOne {
	oluo.mutation.RemoveEpcIDs(ids...)
	return oluo
}

// RemoveEpc removes "epc" edges to Job entities.
func (oluo *OptionListUpdateOne) RemoveEpc(j ...*Job) *OptionListUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return oluo.RemoveEpcIDs(ids...)
}

// Where appends a list predicates to the OptionListUpdate builder.
func (oluo *OptionListUpdateOne) Where(ps ...predicate.OptionList) *OptionListUpdateOne {
	oluo.mutation.Where(ps...)
	return oluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oluo *OptionListUpdateOne) Select(field string, fields ...string) *OptionListUpdateOne {
	oluo.fields = append([]string{field}, fields...)
	return oluo
}

// Save executes the query and returns the updated OptionList entity.
func (oluo *OptionListUpdateOne) Save(ctx context.Context) (*OptionList, error) {
	oluo.defaults()
	return withHooks(ctx, oluo.sqlSave, oluo.mutation, oluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oluo *OptionListUpdateOne) SaveX(ctx context.Context) *OptionList {
	node, err := oluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oluo *OptionListUpdateOne) Exec(ctx context.Context) error {
	_, err := oluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oluo *OptionListUpdateOne) ExecX(ctx context.Context) {
	if err := oluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oluo *OptionListUpdateOne) defaults() {
	if _, ok := oluo.mutation.UpdatedAt(); !ok {
		v := optionlist.UpdateDefaultUpdatedAt()
		oluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oluo *OptionListUpdateOne) check() error {
	if v, ok := oluo.mutation.GetType(); ok {
		if err := optionlist.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OptionList.type": %w`, err)}
		}
	}
	if v, ok := oluo.mutation.Name(); ok {
		if err := optionlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OptionList.name": %w`, err)}
		}
	}
	if v, ok := oluo.mutation.DisplayName(); ok {
		if err := optionlist.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "OptionList.display_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oluo *OptionListUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OptionListUpdateOne {
	oluo.modifiers = append(oluo.modifiers, modifiers...)
	return oluo
}

func (oluo *OptionListUpdateOne) sqlSave(ctx context.Context) (_node *OptionList, err error) {
	if err := oluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(optionlist.Table, optionlist.Columns, sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString))
	id, ok := oluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OptionList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, optionlist.FieldID)
		for _, f := range fields {
			if !optionlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != optionlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oluo.mutation.UpdatedAt(); ok {
		_spec.SetField(optionlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oluo.mutation.GetType(); ok {
		_spec.SetField(optionlist.FieldType, field.TypeEnum, value)
	}
	if value, ok := oluo.mutation.Name(); ok {
		_spec.SetField(optionlist.FieldName, field.TypeString, value)
	}
	if value, ok := oluo.mutation.DisplayName(); ok {
		_spec.SetField(optionlist.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := oluo.mutation.Active(); ok {
		_spec.SetField(optionlist.FieldActive, field.TypeBool, value)
	}
	if value, ok := oluo.mutation.Order(); ok {
		_spec.SetField(optionlist.FieldOrder, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedOrder(); ok {
		_spec.AddField(optionlist.FieldOrder, field.TypeInt, value)
	}
	if oluo.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.RemovedFinanceOptionsIDs(); len(nodes) > 0 && !oluo.mutation.FinanceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.FinanceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oluo.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.RemovedEpcOptionsIDs(); len(nodes) > 0 && !oluo.mutation.EpcOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.EpcOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oluo.mutation.EpcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.RemovedEpcIDs(); len(nodes) > 0 && !oluo.mutation.EpcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.EpcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oluo.modifiers...)
	_node = &OptionList{config: oluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{optionlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oluo.mutation.done = true
	return _node, nil
}

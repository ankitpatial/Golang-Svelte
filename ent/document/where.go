// Code generated by ent, DO NOT EDIT.

package document

import (
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdatedAt, v))
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldBucket, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldKey, v))
}

// Dir applies equality check predicate on the "dir" field. It's identical to DirEQ.
func Dir(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldDir, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldName, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFilename, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContentType, v))
}

// ContentSize applies equality check predicate on the "content_size" field. It's identical to ContentSizeEQ.
func ContentSize(v int64) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContentSize, v))
}

// Ready applies equality check predicate on the "ready" field. It's identical to ReadyEQ.
func Ready(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldReady, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatorID, v))
}

// UpdaterID applies equality check predicate on the "updater_id" field. It's identical to UpdaterIDEQ.
func UpdaterID(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdaterID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldUpdatedAt, v))
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldBucket, v))
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldBucket, v))
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldBucket, vs...))
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldBucket, vs...))
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldBucket, v))
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldBucket, v))
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldBucket, v))
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldBucket, v))
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldBucket, v))
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldBucket, v))
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldBucket, v))
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldBucket, v))
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldBucket, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldKey, v))
}

// FolderEQ applies the EQ predicate on the "folder" field.
func FolderEQ(v enum.DocFolder) predicate.Document {
	vc := v
	return predicate.Document(sql.FieldEQ(FieldFolder, vc))
}

// FolderNEQ applies the NEQ predicate on the "folder" field.
func FolderNEQ(v enum.DocFolder) predicate.Document {
	vc := v
	return predicate.Document(sql.FieldNEQ(FieldFolder, vc))
}

// FolderIn applies the In predicate on the "folder" field.
func FolderIn(vs ...enum.DocFolder) predicate.Document {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Document(sql.FieldIn(FieldFolder, v...))
}

// FolderNotIn applies the NotIn predicate on the "folder" field.
func FolderNotIn(vs ...enum.DocFolder) predicate.Document {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Document(sql.FieldNotIn(FieldFolder, v...))
}

// DirEQ applies the EQ predicate on the "dir" field.
func DirEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldDir, v))
}

// DirNEQ applies the NEQ predicate on the "dir" field.
func DirNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldDir, v))
}

// DirIn applies the In predicate on the "dir" field.
func DirIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldDir, vs...))
}

// DirNotIn applies the NotIn predicate on the "dir" field.
func DirNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldDir, vs...))
}

// DirGT applies the GT predicate on the "dir" field.
func DirGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldDir, v))
}

// DirGTE applies the GTE predicate on the "dir" field.
func DirGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldDir, v))
}

// DirLT applies the LT predicate on the "dir" field.
func DirLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldDir, v))
}

// DirLTE applies the LTE predicate on the "dir" field.
func DirLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldDir, v))
}

// DirContains applies the Contains predicate on the "dir" field.
func DirContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldDir, v))
}

// DirHasPrefix applies the HasPrefix predicate on the "dir" field.
func DirHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldDir, v))
}

// DirHasSuffix applies the HasSuffix predicate on the "dir" field.
func DirHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldDir, v))
}

// DirIsNil applies the IsNil predicate on the "dir" field.
func DirIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldDir))
}

// DirNotNil applies the NotNil predicate on the "dir" field.
func DirNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldDir))
}

// DirEqualFold applies the EqualFold predicate on the "dir" field.
func DirEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldDir, v))
}

// DirContainsFold applies the ContainsFold predicate on the "dir" field.
func DirContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldDir, v))
}

// SectionEQ applies the EQ predicate on the "section" field.
func SectionEQ(v enum.DocSection) predicate.Document {
	vc := v
	return predicate.Document(sql.FieldEQ(FieldSection, vc))
}

// SectionNEQ applies the NEQ predicate on the "section" field.
func SectionNEQ(v enum.DocSection) predicate.Document {
	vc := v
	return predicate.Document(sql.FieldNEQ(FieldSection, vc))
}

// SectionIn applies the In predicate on the "section" field.
func SectionIn(vs ...enum.DocSection) predicate.Document {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Document(sql.FieldIn(FieldSection, v...))
}

// SectionNotIn applies the NotIn predicate on the "section" field.
func SectionNotIn(vs ...enum.DocSection) predicate.Document {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Document(sql.FieldNotIn(FieldSection, v...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldName, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldFilename, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeIsNil applies the IsNil predicate on the "content_type" field.
func ContentTypeIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldContentType))
}

// ContentTypeNotNil applies the NotNil predicate on the "content_type" field.
func ContentTypeNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldContentType))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldContentType, v))
}

// ContentSizeEQ applies the EQ predicate on the "content_size" field.
func ContentSizeEQ(v int64) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContentSize, v))
}

// ContentSizeNEQ applies the NEQ predicate on the "content_size" field.
func ContentSizeNEQ(v int64) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldContentSize, v))
}

// ContentSizeIn applies the In predicate on the "content_size" field.
func ContentSizeIn(vs ...int64) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldContentSize, vs...))
}

// ContentSizeNotIn applies the NotIn predicate on the "content_size" field.
func ContentSizeNotIn(vs ...int64) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldContentSize, vs...))
}

// ContentSizeGT applies the GT predicate on the "content_size" field.
func ContentSizeGT(v int64) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldContentSize, v))
}

// ContentSizeGTE applies the GTE predicate on the "content_size" field.
func ContentSizeGTE(v int64) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldContentSize, v))
}

// ContentSizeLT applies the LT predicate on the "content_size" field.
func ContentSizeLT(v int64) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldContentSize, v))
}

// ContentSizeLTE applies the LTE predicate on the "content_size" field.
func ContentSizeLTE(v int64) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldContentSize, v))
}

// ReadyEQ applies the EQ predicate on the "ready" field.
func ReadyEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldReady, v))
}

// ReadyNEQ applies the NEQ predicate on the "ready" field.
func ReadyNEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldReady, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldCreatorID, v))
}

// CreatorIDContains applies the Contains predicate on the "creator_id" field.
func CreatorIDContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldCreatorID, v))
}

// CreatorIDHasPrefix applies the HasPrefix predicate on the "creator_id" field.
func CreatorIDHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldCreatorID, v))
}

// CreatorIDHasSuffix applies the HasSuffix predicate on the "creator_id" field.
func CreatorIDHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldCreatorID, v))
}

// CreatorIDEqualFold applies the EqualFold predicate on the "creator_id" field.
func CreatorIDEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldCreatorID, v))
}

// CreatorIDContainsFold applies the ContainsFold predicate on the "creator_id" field.
func CreatorIDContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldCreatorID, v))
}

// UpdaterIDEQ applies the EQ predicate on the "updater_id" field.
func UpdaterIDEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdaterID, v))
}

// UpdaterIDNEQ applies the NEQ predicate on the "updater_id" field.
func UpdaterIDNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldUpdaterID, v))
}

// UpdaterIDIn applies the In predicate on the "updater_id" field.
func UpdaterIDIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldUpdaterID, vs...))
}

// UpdaterIDNotIn applies the NotIn predicate on the "updater_id" field.
func UpdaterIDNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldUpdaterID, vs...))
}

// UpdaterIDGT applies the GT predicate on the "updater_id" field.
func UpdaterIDGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldUpdaterID, v))
}

// UpdaterIDGTE applies the GTE predicate on the "updater_id" field.
func UpdaterIDGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldUpdaterID, v))
}

// UpdaterIDLT applies the LT predicate on the "updater_id" field.
func UpdaterIDLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldUpdaterID, v))
}

// UpdaterIDLTE applies the LTE predicate on the "updater_id" field.
func UpdaterIDLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldUpdaterID, v))
}

// UpdaterIDContains applies the Contains predicate on the "updater_id" field.
func UpdaterIDContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldUpdaterID, v))
}

// UpdaterIDHasPrefix applies the HasPrefix predicate on the "updater_id" field.
func UpdaterIDHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldUpdaterID, v))
}

// UpdaterIDHasSuffix applies the HasSuffix predicate on the "updater_id" field.
func UpdaterIDHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldUpdaterID, v))
}

// UpdaterIDIsNil applies the IsNil predicate on the "updater_id" field.
func UpdaterIDIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldUpdaterID))
}

// UpdaterIDNotNil applies the NotNil predicate on the "updater_id" field.
func UpdaterIDNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldUpdaterID))
}

// UpdaterIDEqualFold applies the EqualFold predicate on the "updater_id" field.
func UpdaterIDEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldUpdaterID, v))
}

// UpdaterIDContainsFold applies the ContainsFold predicate on the "updater_id" field.
func UpdaterIDContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldUpdaterID, v))
}

// HasTrainingVideo applies the HasEdge predicate on the "training_video" edge.
func HasTrainingVideo() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TrainingVideoTable, TrainingVideoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrainingVideoWith applies the HasEdge predicate on the "training_video" edge with a given conditions (other predicates).
func HasTrainingVideoWith(preds ...predicate.TrainingVideo) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newTrainingVideoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrainingVideoPoster applies the HasEdge predicate on the "training_video_poster" edge.
func HasTrainingVideoPoster() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TrainingVideoPosterTable, TrainingVideoPosterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrainingVideoPosterWith applies the HasEdge predicate on the "training_video_poster" edge with a given conditions (other predicates).
func HasTrainingVideoPosterWith(preds ...predicate.TrainingVideo) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newTrainingVideoPosterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductsImage applies the HasEdge predicate on the "products_image" edge.
func HasProductsImage() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProductsImageTable, ProductsImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsImageWith applies the HasEdge predicate on the "products_image" edge with a given conditions (other predicates).
func HasProductsImageWith(preds ...predicate.Product) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newProductsImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstallationJobItemImage applies the HasEdge predicate on the "installation_job_item_image" edge.
func HasInstallationJobItemImage() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InstallationJobItemImageTable, InstallationJobItemImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstallationJobItemImageWith applies the HasEdge predicate on the "installation_job_item_image" edge with a given conditions (other predicates).
func HasInstallationJobItemImageWith(preds ...predicate.InstallationJobItem) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newInstallationJobItemImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEstimatePdf applies the HasEdge predicate on the "estimate_pdf" edge.
func HasEstimatePdf() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EstimatePdfTable, EstimatePdfColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimatePdfWith applies the HasEdge predicate on the "estimate_pdf" edge with a given conditions (other predicates).
func HasEstimatePdfWith(preds ...predicate.Estimate) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newEstimatePdfStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobEstimatePdf applies the HasEdge predicate on the "job_estimate_pdf" edge.
func HasJobEstimatePdf() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, JobEstimatePdfTable, JobEstimatePdfColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobEstimatePdfWith applies the HasEdge predicate on the "job_estimate_pdf" edge with a given conditions (other predicates).
func HasJobEstimatePdfWith(preds ...predicate.Job) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newJobEstimatePdfStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Document) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		p(s.Not())
	})
}

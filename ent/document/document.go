// Code generated by ent, DO NOT EDIT.

package document

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the document type in the database.
	Label = "document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBucket holds the string denoting the bucket field in the database.
	FieldBucket = "bucket"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldFolder holds the string denoting the folder field in the database.
	FieldFolder = "folder"
	// FieldDir holds the string denoting the dir field in the database.
	FieldDir = "dir"
	// FieldSection holds the string denoting the section field in the database.
	FieldSection = "section"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldContentSize holds the string denoting the content_size field in the database.
	FieldContentSize = "content_size"
	// FieldReady holds the string denoting the ready field in the database.
	FieldReady = "ready"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldUpdaterID holds the string denoting the updater_id field in the database.
	FieldUpdaterID = "updater_id"
	// EdgeTrainingVideo holds the string denoting the training_video edge name in mutations.
	EdgeTrainingVideo = "training_video"
	// EdgeTrainingVideoPoster holds the string denoting the training_video_poster edge name in mutations.
	EdgeTrainingVideoPoster = "training_video_poster"
	// EdgeProductsImage holds the string denoting the products_image edge name in mutations.
	EdgeProductsImage = "products_image"
	// EdgeInstallationJobItemImage holds the string denoting the installation_job_item_image edge name in mutations.
	EdgeInstallationJobItemImage = "installation_job_item_image"
	// EdgeEstimatePdf holds the string denoting the estimate_pdf edge name in mutations.
	EdgeEstimatePdf = "estimate_pdf"
	// EdgeJobEstimatePdf holds the string denoting the job_estimate_pdf edge name in mutations.
	EdgeJobEstimatePdf = "job_estimate_pdf"
	// Table holds the table name of the document in the database.
	Table = "documents"
	// TrainingVideoTable is the table that holds the training_video relation/edge.
	TrainingVideoTable = "training_videos"
	// TrainingVideoInverseTable is the table name for the TrainingVideo entity.
	// It exists in this package in order to avoid circular dependency with the "trainingvideo" package.
	TrainingVideoInverseTable = "training_videos"
	// TrainingVideoColumn is the table column denoting the training_video relation/edge.
	TrainingVideoColumn = "video_id"
	// TrainingVideoPosterTable is the table that holds the training_video_poster relation/edge.
	TrainingVideoPosterTable = "training_videos"
	// TrainingVideoPosterInverseTable is the table name for the TrainingVideo entity.
	// It exists in this package in order to avoid circular dependency with the "trainingvideo" package.
	TrainingVideoPosterInverseTable = "training_videos"
	// TrainingVideoPosterColumn is the table column denoting the training_video_poster relation/edge.
	TrainingVideoPosterColumn = "poster_id"
	// ProductsImageTable is the table that holds the products_image relation/edge.
	ProductsImageTable = "products"
	// ProductsImageInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsImageInverseTable = "products"
	// ProductsImageColumn is the table column denoting the products_image relation/edge.
	ProductsImageColumn = "image_id"
	// InstallationJobItemImageTable is the table that holds the installation_job_item_image relation/edge.
	InstallationJobItemImageTable = "documents"
	// InstallationJobItemImageInverseTable is the table name for the InstallationJobItem entity.
	// It exists in this package in order to avoid circular dependency with the "installationjobitem" package.
	InstallationJobItemImageInverseTable = "installation_job_items"
	// InstallationJobItemImageColumn is the table column denoting the installation_job_item_image relation/edge.
	InstallationJobItemImageColumn = "image_id"
	// EstimatePdfTable is the table that holds the estimate_pdf relation/edge.
	EstimatePdfTable = "estimates"
	// EstimatePdfInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	EstimatePdfInverseTable = "estimates"
	// EstimatePdfColumn is the table column denoting the estimate_pdf relation/edge.
	EstimatePdfColumn = "pdf_doc_id"
	// JobEstimatePdfTable is the table that holds the job_estimate_pdf relation/edge.
	JobEstimatePdfTable = "jobs"
	// JobEstimatePdfInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobEstimatePdfInverseTable = "jobs"
	// JobEstimatePdfColumn is the table column denoting the job_estimate_pdf relation/edge.
	JobEstimatePdfColumn = "estimate_pdf_id"
)

// Columns holds all SQL columns for document fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldBucket,
	FieldKey,
	FieldFolder,
	FieldDir,
	FieldSection,
	FieldName,
	FieldFilename,
	FieldContentType,
	FieldContentSize,
	FieldReady,
	FieldCreatorID,
	FieldUpdaterID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "documents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"image_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	BucketValidator func(string) error
	// DirValidator is a validator for the "dir" field. It is called by the builders before save.
	DirValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// ContentTypeValidator is a validator for the "content_type" field. It is called by the builders before save.
	ContentTypeValidator func(string) error
	// DefaultReady holds the default value on creation for the "ready" field.
	DefaultReady bool
	// CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	CreatorIDValidator func(string) error
	// UpdaterIDValidator is a validator for the "updater_id" field. It is called by the builders before save.
	UpdaterIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// FolderValidator is a validator for the "folder" field enum values. It is called by the builders before save.
func FolderValidator(f enum.DocFolder) error {
	switch f.String() {
	case "PartnerDocs", "JobDocs", "Estimates", "TrainingVideos", "PublicData", "Survey":
		return nil
	default:
		return fmt.Errorf("document: invalid enum value for folder field: %q", f)
	}
}

// SectionValidator is a validator for the "section" field enum values. It is called by the builders before save.
func SectionValidator(s enum.DocSection) error {
	switch s.String() {
	case "Docs", "InspectionDocs", "ProductionPics", "PricingPDF", "Proof", "Logo", "Avatar", "Image", "Video", "Proposal":
		return nil
	default:
		return fmt.Errorf("document: invalid enum value for section field: %q", s)
	}
}

// OrderOption defines the ordering options for the Document queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBucket orders the results by the bucket field.
func ByBucket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBucket, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByFolder orders the results by the folder field.
func ByFolder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolder, opts...).ToFunc()
}

// ByDir orders the results by the dir field.
func ByDir(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDir, opts...).ToFunc()
}

// BySection orders the results by the section field.
func BySection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSection, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// ByContentSize orders the results by the content_size field.
func ByContentSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentSize, opts...).ToFunc()
}

// ByReady orders the results by the ready field.
func ByReady(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReady, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByUpdaterID orders the results by the updater_id field.
func ByUpdaterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdaterID, opts...).ToFunc()
}

// ByTrainingVideoField orders the results by training_video field.
func ByTrainingVideoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrainingVideoStep(), sql.OrderByField(field, opts...))
	}
}

// ByTrainingVideoPosterField orders the results by training_video_poster field.
func ByTrainingVideoPosterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrainingVideoPosterStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductsImageField orders the results by products_image field.
func ByProductsImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsImageStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstallationJobItemImageField orders the results by installation_job_item_image field.
func ByInstallationJobItemImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstallationJobItemImageStep(), sql.OrderByField(field, opts...))
	}
}

// ByEstimatePdfField orders the results by estimate_pdf field.
func ByEstimatePdfField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimatePdfStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobEstimatePdfField orders the results by job_estimate_pdf field.
func ByJobEstimatePdfField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobEstimatePdfStep(), sql.OrderByField(field, opts...))
	}
}
func newTrainingVideoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrainingVideoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TrainingVideoTable, TrainingVideoColumn),
	)
}
func newTrainingVideoPosterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrainingVideoPosterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TrainingVideoPosterTable, TrainingVideoPosterColumn),
	)
}
func newProductsImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProductsImageTable, ProductsImageColumn),
	)
}
func newInstallationJobItemImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstallationJobItemImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InstallationJobItemImageTable, InstallationJobItemImageColumn),
	)
}
func newEstimatePdfStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimatePdfInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EstimatePdfTable, EstimatePdfColumn),
	)
}
func newJobEstimatePdfStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobEstimatePdfInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, JobEstimatePdfTable, JobEstimatePdfColumn),
	)
}

var (
	// enum.DocFolder must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.DocFolder)(nil)
	// enum.DocFolder must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.DocFolder)(nil)
)

var (
	// enum.DocSection must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.DocSection)(nil)
	// enum.DocSection must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.DocSection)(nil)
)

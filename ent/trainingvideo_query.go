// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/document"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/predicate"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrainingVideoQuery is the builder for querying TrainingVideo entities.
type TrainingVideoQuery struct {
	config
	ctx                     *QueryContext
	order                   []trainingvideo.OrderOption
	inters                  []Interceptor
	predicates              []predicate.TrainingVideo
	withTrainingVideos      *PartnerTrainingVideoQuery
	withCreator             *UserQuery
	withCourse              *TrainingCourseQuery
	withPoster              *DocumentQuery
	withVideo               *DocumentQuery
	withFKs                 bool
	loadTotal               []func(context.Context, []*TrainingVideo) error
	modifiers               []func(*sql.Selector)
	withNamedTrainingVideos map[string]*PartnerTrainingVideoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TrainingVideoQuery builder.
func (tvq *TrainingVideoQuery) Where(ps ...predicate.TrainingVideo) *TrainingVideoQuery {
	tvq.predicates = append(tvq.predicates, ps...)
	return tvq
}

// Limit the number of records to be returned by this query.
func (tvq *TrainingVideoQuery) Limit(limit int) *TrainingVideoQuery {
	tvq.ctx.Limit = &limit
	return tvq
}

// Offset to start from.
func (tvq *TrainingVideoQuery) Offset(offset int) *TrainingVideoQuery {
	tvq.ctx.Offset = &offset
	return tvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tvq *TrainingVideoQuery) Unique(unique bool) *TrainingVideoQuery {
	tvq.ctx.Unique = &unique
	return tvq
}

// Order specifies how the records should be ordered.
func (tvq *TrainingVideoQuery) Order(o ...trainingvideo.OrderOption) *TrainingVideoQuery {
	tvq.order = append(tvq.order, o...)
	return tvq
}

// QueryTrainingVideos chains the current query on the "training_videos" edge.
func (tvq *TrainingVideoQuery) QueryTrainingVideos() *PartnerTrainingVideoQuery {
	query := (&PartnerTrainingVideoClient{config: tvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, selector),
			sqlgraph.To(partnertrainingvideo.Table, partnertrainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trainingvideo.TrainingVideosTable, trainingvideo.TrainingVideosColumn),
		)
		fromU = sqlgraph.SetNeighbors(tvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (tvq *TrainingVideoQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: tvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trainingvideo.CreatorTable, trainingvideo.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(tvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourse chains the current query on the "course" edge.
func (tvq *TrainingVideoQuery) QueryCourse() *TrainingCourseQuery {
	query := (&TrainingCourseClient{config: tvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, selector),
			sqlgraph.To(trainingcourse.Table, trainingcourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trainingvideo.CourseTable, trainingvideo.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(tvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPoster chains the current query on the "poster" edge.
func (tvq *TrainingVideoQuery) QueryPoster() *DocumentQuery {
	query := (&DocumentClient{config: tvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, trainingvideo.PosterTable, trainingvideo.PosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(tvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVideo chains the current query on the "video" edge.
func (tvq *TrainingVideoQuery) QueryVideo() *DocumentQuery {
	query := (&DocumentClient{config: tvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainingvideo.Table, trainingvideo.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, trainingvideo.VideoTable, trainingvideo.VideoColumn),
		)
		fromU = sqlgraph.SetNeighbors(tvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TrainingVideo entity from the query.
// Returns a *NotFoundError when no TrainingVideo was found.
func (tvq *TrainingVideoQuery) First(ctx context.Context) (*TrainingVideo, error) {
	nodes, err := tvq.Limit(1).All(setContextOp(ctx, tvq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trainingvideo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tvq *TrainingVideoQuery) FirstX(ctx context.Context) *TrainingVideo {
	node, err := tvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TrainingVideo ID from the query.
// Returns a *NotFoundError when no TrainingVideo ID was found.
func (tvq *TrainingVideoQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tvq.Limit(1).IDs(setContextOp(ctx, tvq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{trainingvideo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tvq *TrainingVideoQuery) FirstIDX(ctx context.Context) string {
	id, err := tvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TrainingVideo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TrainingVideo entity is found.
// Returns a *NotFoundError when no TrainingVideo entities are found.
func (tvq *TrainingVideoQuery) Only(ctx context.Context) (*TrainingVideo, error) {
	nodes, err := tvq.Limit(2).All(setContextOp(ctx, tvq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trainingvideo.Label}
	default:
		return nil, &NotSingularError{trainingvideo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tvq *TrainingVideoQuery) OnlyX(ctx context.Context) *TrainingVideo {
	node, err := tvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TrainingVideo ID in the query.
// Returns a *NotSingularError when more than one TrainingVideo ID is found.
// Returns a *NotFoundError when no entities are found.
func (tvq *TrainingVideoQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tvq.Limit(2).IDs(setContextOp(ctx, tvq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{trainingvideo.Label}
	default:
		err = &NotSingularError{trainingvideo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tvq *TrainingVideoQuery) OnlyIDX(ctx context.Context) string {
	id, err := tvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TrainingVideos.
func (tvq *TrainingVideoQuery) All(ctx context.Context) ([]*TrainingVideo, error) {
	ctx = setContextOp(ctx, tvq.ctx, "All")
	if err := tvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TrainingVideo, *TrainingVideoQuery]()
	return withInterceptors[[]*TrainingVideo](ctx, tvq, qr, tvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tvq *TrainingVideoQuery) AllX(ctx context.Context) []*TrainingVideo {
	nodes, err := tvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TrainingVideo IDs.
func (tvq *TrainingVideoQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tvq.ctx.Unique == nil && tvq.path != nil {
		tvq.Unique(true)
	}
	ctx = setContextOp(ctx, tvq.ctx, "IDs")
	if err = tvq.Select(trainingvideo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tvq *TrainingVideoQuery) IDsX(ctx context.Context) []string {
	ids, err := tvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tvq *TrainingVideoQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tvq.ctx, "Count")
	if err := tvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tvq, querierCount[*TrainingVideoQuery](), tvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tvq *TrainingVideoQuery) CountX(ctx context.Context) int {
	count, err := tvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tvq *TrainingVideoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tvq.ctx, "Exist")
	switch _, err := tvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tvq *TrainingVideoQuery) ExistX(ctx context.Context) bool {
	exist, err := tvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TrainingVideoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tvq *TrainingVideoQuery) Clone() *TrainingVideoQuery {
	if tvq == nil {
		return nil
	}
	return &TrainingVideoQuery{
		config:             tvq.config,
		ctx:                tvq.ctx.Clone(),
		order:              append([]trainingvideo.OrderOption{}, tvq.order...),
		inters:             append([]Interceptor{}, tvq.inters...),
		predicates:         append([]predicate.TrainingVideo{}, tvq.predicates...),
		withTrainingVideos: tvq.withTrainingVideos.Clone(),
		withCreator:        tvq.withCreator.Clone(),
		withCourse:         tvq.withCourse.Clone(),
		withPoster:         tvq.withPoster.Clone(),
		withVideo:          tvq.withVideo.Clone(),
		// clone intermediate query.
		sql:  tvq.sql.Clone(),
		path: tvq.path,
	}
}

// WithTrainingVideos tells the query-builder to eager-load the nodes that are connected to
// the "training_videos" edge. The optional arguments are used to configure the query builder of the edge.
func (tvq *TrainingVideoQuery) WithTrainingVideos(opts ...func(*PartnerTrainingVideoQuery)) *TrainingVideoQuery {
	query := (&PartnerTrainingVideoClient{config: tvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tvq.withTrainingVideos = query
	return tvq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (tvq *TrainingVideoQuery) WithCreator(opts ...func(*UserQuery)) *TrainingVideoQuery {
	query := (&UserClient{config: tvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tvq.withCreator = query
	return tvq
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (tvq *TrainingVideoQuery) WithCourse(opts ...func(*TrainingCourseQuery)) *TrainingVideoQuery {
	query := (&TrainingCourseClient{config: tvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tvq.withCourse = query
	return tvq
}

// WithPoster tells the query-builder to eager-load the nodes that are connected to
// the "poster" edge. The optional arguments are used to configure the query builder of the edge.
func (tvq *TrainingVideoQuery) WithPoster(opts ...func(*DocumentQuery)) *TrainingVideoQuery {
	query := (&DocumentClient{config: tvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tvq.withPoster = query
	return tvq
}

// WithVideo tells the query-builder to eager-load the nodes that are connected to
// the "video" edge. The optional arguments are used to configure the query builder of the edge.
func (tvq *TrainingVideoQuery) WithVideo(opts ...func(*DocumentQuery)) *TrainingVideoQuery {
	query := (&DocumentClient{config: tvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tvq.withVideo = query
	return tvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TrainingVideo.Query().
//		GroupBy(trainingvideo.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tvq *TrainingVideoQuery) GroupBy(field string, fields ...string) *TrainingVideoGroupBy {
	tvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TrainingVideoGroupBy{build: tvq}
	grbuild.flds = &tvq.ctx.Fields
	grbuild.label = trainingvideo.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.TrainingVideo.Query().
//		Select(trainingvideo.FieldCreatedAt).
//		Scan(ctx, &v)
func (tvq *TrainingVideoQuery) Select(fields ...string) *TrainingVideoSelect {
	tvq.ctx.Fields = append(tvq.ctx.Fields, fields...)
	sbuild := &TrainingVideoSelect{TrainingVideoQuery: tvq}
	sbuild.label = trainingvideo.Label
	sbuild.flds, sbuild.scan = &tvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TrainingVideoSelect configured with the given aggregations.
func (tvq *TrainingVideoQuery) Aggregate(fns ...AggregateFunc) *TrainingVideoSelect {
	return tvq.Select().Aggregate(fns...)
}

func (tvq *TrainingVideoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tvq); err != nil {
				return err
			}
		}
	}
	for _, f := range tvq.ctx.Fields {
		if !trainingvideo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tvq.path != nil {
		prev, err := tvq.path(ctx)
		if err != nil {
			return err
		}
		tvq.sql = prev
	}
	return nil
}

func (tvq *TrainingVideoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TrainingVideo, error) {
	var (
		nodes       = []*TrainingVideo{}
		withFKs     = tvq.withFKs
		_spec       = tvq.querySpec()
		loadedTypes = [5]bool{
			tvq.withTrainingVideos != nil,
			tvq.withCreator != nil,
			tvq.withCourse != nil,
			tvq.withPoster != nil,
			tvq.withVideo != nil,
		}
	)
	if tvq.withCreator != nil || tvq.withCourse != nil || tvq.withPoster != nil || tvq.withVideo != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, trainingvideo.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TrainingVideo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TrainingVideo{config: tvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tvq.modifiers) > 0 {
		_spec.Modifiers = tvq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tvq.withTrainingVideos; query != nil {
		if err := tvq.loadTrainingVideos(ctx, query, nodes,
			func(n *TrainingVideo) { n.Edges.TrainingVideos = []*PartnerTrainingVideo{} },
			func(n *TrainingVideo, e *PartnerTrainingVideo) {
				n.Edges.TrainingVideos = append(n.Edges.TrainingVideos, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := tvq.withCreator; query != nil {
		if err := tvq.loadCreator(ctx, query, nodes, nil,
			func(n *TrainingVideo, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := tvq.withCourse; query != nil {
		if err := tvq.loadCourse(ctx, query, nodes, nil,
			func(n *TrainingVideo, e *TrainingCourse) { n.Edges.Course = e }); err != nil {
			return nil, err
		}
	}
	if query := tvq.withPoster; query != nil {
		if err := tvq.loadPoster(ctx, query, nodes, nil,
			func(n *TrainingVideo, e *Document) { n.Edges.Poster = e }); err != nil {
			return nil, err
		}
	}
	if query := tvq.withVideo; query != nil {
		if err := tvq.loadVideo(ctx, query, nodes, nil,
			func(n *TrainingVideo, e *Document) { n.Edges.Video = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range tvq.withNamedTrainingVideos {
		if err := tvq.loadTrainingVideos(ctx, query, nodes,
			func(n *TrainingVideo) { n.appendNamedTrainingVideos(name) },
			func(n *TrainingVideo, e *PartnerTrainingVideo) { n.appendNamedTrainingVideos(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range tvq.loadTotal {
		if err := tvq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tvq *TrainingVideoQuery) loadTrainingVideos(ctx context.Context, query *PartnerTrainingVideoQuery, nodes []*TrainingVideo, init func(*TrainingVideo), assign func(*TrainingVideo, *PartnerTrainingVideo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TrainingVideo)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerTrainingVideo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(trainingvideo.TrainingVideosColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.video_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "video_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "video_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tvq *TrainingVideoQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*TrainingVideo, init func(*TrainingVideo), assign func(*TrainingVideo, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TrainingVideo)
	for i := range nodes {
		if nodes[i].creator_id == nil {
			continue
		}
		fk := *nodes[i].creator_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tvq *TrainingVideoQuery) loadCourse(ctx context.Context, query *TrainingCourseQuery, nodes []*TrainingVideo, init func(*TrainingVideo), assign func(*TrainingVideo, *TrainingCourse)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TrainingVideo)
	for i := range nodes {
		if nodes[i].course_id == nil {
			continue
		}
		fk := *nodes[i].course_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(trainingcourse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tvq *TrainingVideoQuery) loadPoster(ctx context.Context, query *DocumentQuery, nodes []*TrainingVideo, init func(*TrainingVideo), assign func(*TrainingVideo, *Document)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TrainingVideo)
	for i := range nodes {
		if nodes[i].poster_id == nil {
			continue
		}
		fk := *nodes[i].poster_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(document.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "poster_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tvq *TrainingVideoQuery) loadVideo(ctx context.Context, query *DocumentQuery, nodes []*TrainingVideo, init func(*TrainingVideo), assign func(*TrainingVideo, *Document)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TrainingVideo)
	for i := range nodes {
		if nodes[i].video_id == nil {
			continue
		}
		fk := *nodes[i].video_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(document.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "video_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tvq *TrainingVideoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tvq.querySpec()
	if len(tvq.modifiers) > 0 {
		_spec.Modifiers = tvq.modifiers
	}
	_spec.Node.Columns = tvq.ctx.Fields
	if len(tvq.ctx.Fields) > 0 {
		_spec.Unique = tvq.ctx.Unique != nil && *tvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tvq.driver, _spec)
}

func (tvq *TrainingVideoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(trainingvideo.Table, trainingvideo.Columns, sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString))
	_spec.From = tvq.sql
	if unique := tvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tvq.path != nil {
		_spec.Unique = true
	}
	if fields := tvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trainingvideo.FieldID)
		for i := range fields {
			if fields[i] != trainingvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tvq *TrainingVideoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tvq.driver.Dialect())
	t1 := builder.Table(trainingvideo.Table)
	columns := tvq.ctx.Fields
	if len(columns) == 0 {
		columns = trainingvideo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tvq.sql != nil {
		selector = tvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tvq.ctx.Unique != nil && *tvq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tvq.modifiers {
		m(selector)
	}
	for _, p := range tvq.predicates {
		p(selector)
	}
	for _, p := range tvq.order {
		p(selector)
	}
	if offset := tvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tvq *TrainingVideoQuery) Modify(modifiers ...func(s *sql.Selector)) *TrainingVideoSelect {
	tvq.modifiers = append(tvq.modifiers, modifiers...)
	return tvq.Select()
}

// WithNamedTrainingVideos tells the query-builder to eager-load the nodes that are connected to the "training_videos"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tvq *TrainingVideoQuery) WithNamedTrainingVideos(name string, opts ...func(*PartnerTrainingVideoQuery)) *TrainingVideoQuery {
	query := (&PartnerTrainingVideoClient{config: tvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tvq.withNamedTrainingVideos == nil {
		tvq.withNamedTrainingVideos = make(map[string]*PartnerTrainingVideoQuery)
	}
	tvq.withNamedTrainingVideos[name] = query
	return tvq
}

// TrainingVideoGroupBy is the group-by builder for TrainingVideo entities.
type TrainingVideoGroupBy struct {
	selector
	build *TrainingVideoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tvgb *TrainingVideoGroupBy) Aggregate(fns ...AggregateFunc) *TrainingVideoGroupBy {
	tvgb.fns = append(tvgb.fns, fns...)
	return tvgb
}

// Scan applies the selector query and scans the result into the given value.
func (tvgb *TrainingVideoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tvgb.build.ctx, "GroupBy")
	if err := tvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrainingVideoQuery, *TrainingVideoGroupBy](ctx, tvgb.build, tvgb, tvgb.build.inters, v)
}

func (tvgb *TrainingVideoGroupBy) sqlScan(ctx context.Context, root *TrainingVideoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tvgb.fns))
	for _, fn := range tvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tvgb.flds)+len(tvgb.fns))
		for _, f := range *tvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TrainingVideoSelect is the builder for selecting fields of TrainingVideo entities.
type TrainingVideoSelect struct {
	*TrainingVideoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tvs *TrainingVideoSelect) Aggregate(fns ...AggregateFunc) *TrainingVideoSelect {
	tvs.fns = append(tvs.fns, fns...)
	return tvs
}

// Scan applies the selector query and scans the result into the given value.
func (tvs *TrainingVideoSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tvs.ctx, "Select")
	if err := tvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrainingVideoQuery, *TrainingVideoSelect](ctx, tvs.TrainingVideoQuery, tvs, tvs.inters, v)
}

func (tvs *TrainingVideoSelect) sqlScan(ctx context.Context, root *TrainingVideoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tvs.fns))
	for _, fn := range tvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tvs *TrainingVideoSelect) Modify(modifiers ...func(s *sql.Selector)) *TrainingVideoSelect {
	tvs.modifiers = append(tvs.modifiers, modifiers...)
	return tvs
}

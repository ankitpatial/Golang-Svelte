// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/auditlog"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobprogress"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/notifysetting"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"roofix/ent/useractivity"
	"roofix/ent/userauth"
	"roofix/ent/usersession"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetExternalID sets the "external_id" field.
func (uc *UserCreate) SetExternalID(s string) *UserCreate {
	uc.mutation.SetExternalID(s)
	return uc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableExternalID(s *string) *UserCreate {
	if s != nil {
		uc.SetExternalID(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetPwd sets the "pwd" field.
func (uc *UserCreate) SetPwd(s string) *UserCreate {
	uc.mutation.SetPwd(s)
	return uc
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableFirstName(s *string) *UserCreate {
	if s != nil {
		uc.SetFirstName(*s)
	}
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastName(s *string) *UserCreate {
	if s != nil {
		uc.SetLastName(*s)
	}
	return uc
}

// SetEmailVerified sets the "email_verified" field.
func (uc *UserCreate) SetEmailVerified(b bool) *UserCreate {
	uc.mutation.SetEmailVerified(b)
	return uc
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetEmailVerified(*b)
	}
	return uc
}

// SetPhoneVerified sets the "phone_verified" field.
func (uc *UserCreate) SetPhoneVerified(b bool) *UserCreate {
	uc.mutation.SetPhoneVerified(b)
	return uc
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetPhoneVerified(*b)
	}
	return uc
}

// SetPicture sets the "picture" field.
func (uc *UserCreate) SetPicture(s string) *UserCreate {
	uc.mutation.SetPicture(s)
	return uc
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uc *UserCreate) SetNillablePicture(s *string) *UserCreate {
	if s != nil {
		uc.SetPicture(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(es enum.AccountStatus) *UserCreate {
	uc.mutation.SetStatus(es)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UserCreate) SetNillableStatus(es *enum.AccountStatus) *UserCreate {
	if es != nil {
		uc.SetStatus(*es)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(e enum.Role) *UserCreate {
	uc.mutation.SetRole(e)
	return uc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(e *enum.Role) *UserCreate {
	if e != nil {
		uc.SetRole(*e)
	}
	return uc
}

// SetNote sets the "note" field.
func (uc *UserCreate) SetNote(s string) *UserCreate {
	uc.mutation.SetNote(s)
	return uc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (uc *UserCreate) SetNillableNote(s *string) *UserCreate {
	if s != nil {
		uc.SetNote(*s)
	}
	return uc
}

// SetWrongAttempts sets the "wrong_attempts" field.
func (uc *UserCreate) SetWrongAttempts(u uint8) *UserCreate {
	uc.mutation.SetWrongAttempts(u)
	return uc
}

// SetNillableWrongAttempts sets the "wrong_attempts" field if the given value is not nil.
func (uc *UserCreate) SetNillableWrongAttempts(u *uint8) *UserCreate {
	if u != nil {
		uc.SetWrongAttempts(*u)
	}
	return uc
}

// SetWrongAttemptAt sets the "wrong_attempt_at" field.
func (uc *UserCreate) SetWrongAttemptAt(t time.Time) *UserCreate {
	uc.mutation.SetWrongAttemptAt(t)
	return uc
}

// SetNillableWrongAttemptAt sets the "wrong_attempt_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableWrongAttemptAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetWrongAttemptAt(*t)
	}
	return uc
}

// SetLockedUntil sets the "locked_until" field.
func (uc *UserCreate) SetLockedUntil(t time.Time) *UserCreate {
	uc.mutation.SetLockedUntil(t)
	return uc
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (uc *UserCreate) SetNillableLockedUntil(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLockedUntil(*t)
	}
	return uc
}

// SetLocation sets the "location" field.
func (uc *UserCreate) SetLocation(s string) *UserCreate {
	uc.mutation.SetLocation(s)
	return uc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uc *UserCreate) SetNillableLocation(s *string) *UserCreate {
	if s != nil {
		uc.SetLocation(*s)
	}
	return uc
}

// SetAcceptedGeneralTerms sets the "accepted_general_terms" field.
func (uc *UserCreate) SetAcceptedGeneralTerms(b bool) *UserCreate {
	uc.mutation.SetAcceptedGeneralTerms(b)
	return uc
}

// SetNillableAcceptedGeneralTerms sets the "accepted_general_terms" field if the given value is not nil.
func (uc *UserCreate) SetNillableAcceptedGeneralTerms(b *bool) *UserCreate {
	if b != nil {
		uc.SetAcceptedGeneralTerms(*b)
	}
	return uc
}

// SetAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field.
func (uc *UserCreate) SetAcceptedTermsNPrivacy(b bool) *UserCreate {
	uc.mutation.SetAcceptedTermsNPrivacy(b)
	return uc
}

// SetNillableAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field if the given value is not nil.
func (uc *UserCreate) SetNillableAcceptedTermsNPrivacy(b *bool) *UserCreate {
	if b != nil {
		uc.SetAcceptedTermsNPrivacy(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(s string) *UserCreate {
	uc.mutation.SetID(s)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(s *string) *UserCreate {
	if s != nil {
		uc.SetID(*s)
	}
	return uc
}

// SetAuthsID sets the "auths" edge to the UserAuth entity by ID.
func (uc *UserCreate) SetAuthsID(id string) *UserCreate {
	uc.mutation.SetAuthsID(id)
	return uc
}

// SetNillableAuthsID sets the "auths" edge to the UserAuth entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableAuthsID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetAuthsID(*id)
	}
	return uc
}

// SetAuths sets the "auths" edge to the UserAuth entity.
func (uc *UserCreate) SetAuths(u *UserAuth) *UserCreate {
	return uc.SetAuthsID(u.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (uc *UserCreate) AddSessionIDs(ids ...string) *UserCreate {
	uc.mutation.AddSessionIDs(ids...)
	return uc
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (uc *UserCreate) AddSessions(u ...*UserSession) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddSessionIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (uc *UserCreate) AddAuditLogIDs(ids ...string) *UserCreate {
	uc.mutation.AddAuditLogIDs(ids...)
	return uc
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (uc *UserCreate) AddAuditLogs(a ...*AuditLog) *UserCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAuditLogIDs(ids...)
}

// AddNotifyIDs adds the "notify" edge to the NotifySetting entity by IDs.
func (uc *UserCreate) AddNotifyIDs(ids ...string) *UserCreate {
	uc.mutation.AddNotifyIDs(ids...)
	return uc
}

// AddNotify adds the "notify" edges to the NotifySetting entity.
func (uc *UserCreate) AddNotify(n ...*NotifySetting) *UserCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uc.AddNotifyIDs(ids...)
}

// AddCreatedJobIDs adds the "created_jobs" edge to the Job entity by IDs.
func (uc *UserCreate) AddCreatedJobIDs(ids ...string) *UserCreate {
	uc.mutation.AddCreatedJobIDs(ids...)
	return uc
}

// AddCreatedJobs adds the "created_jobs" edges to the Job entity.
func (uc *UserCreate) AddCreatedJobs(j ...*Job) *UserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddCreatedJobIDs(ids...)
}

// AddCreatedEstimateIDs adds the "created_estimates" edge to the Estimate entity by IDs.
func (uc *UserCreate) AddCreatedEstimateIDs(ids ...string) *UserCreate {
	uc.mutation.AddCreatedEstimateIDs(ids...)
	return uc
}

// AddCreatedEstimates adds the "created_estimates" edges to the Estimate entity.
func (uc *UserCreate) AddCreatedEstimates(e ...*Estimate) *UserCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddCreatedEstimateIDs(ids...)
}

// AddSalesRepEstimateIDs adds the "sales_rep_estimates" edge to the Estimate entity by IDs.
func (uc *UserCreate) AddSalesRepEstimateIDs(ids ...string) *UserCreate {
	uc.mutation.AddSalesRepEstimateIDs(ids...)
	return uc
}

// AddSalesRepEstimates adds the "sales_rep_estimates" edges to the Estimate entity.
func (uc *UserCreate) AddSalesRepEstimates(e ...*Estimate) *UserCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddSalesRepEstimateIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the Job entity by IDs.
func (uc *UserCreate) AddSaleIDs(ids ...string) *UserCreate {
	uc.mutation.AddSaleIDs(ids...)
	return uc
}

// AddSales adds the "sales" edges to the Job entity.
func (uc *UserCreate) AddSales(j ...*Job) *UserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddSaleIDs(ids...)
}

// AddCreatedInstallationJobIDs adds the "created_installation_jobs" edge to the InstallationJob entity by IDs.
func (uc *UserCreate) AddCreatedInstallationJobIDs(ids ...string) *UserCreate {
	uc.mutation.AddCreatedInstallationJobIDs(ids...)
	return uc
}

// AddCreatedInstallationJobs adds the "created_installation_jobs" edges to the InstallationJob entity.
func (uc *UserCreate) AddCreatedInstallationJobs(i ...*InstallationJob) *UserCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddCreatedInstallationJobIDs(ids...)
}

// AddInstallationLeadIDs adds the "installation_leads" edge to the InstallationJob entity by IDs.
func (uc *UserCreate) AddInstallationLeadIDs(ids ...string) *UserCreate {
	uc.mutation.AddInstallationLeadIDs(ids...)
	return uc
}

// AddInstallationLeads adds the "installation_leads" edges to the InstallationJob entity.
func (uc *UserCreate) AddInstallationLeads(i ...*InstallationJob) *UserCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddInstallationLeadIDs(ids...)
}

// AddEstimateActivityIDs adds the "estimate_activities" edge to the EstimateActivity entity by IDs.
func (uc *UserCreate) AddEstimateActivityIDs(ids ...string) *UserCreate {
	uc.mutation.AddEstimateActivityIDs(ids...)
	return uc
}

// AddEstimateActivities adds the "estimate_activities" edges to the EstimateActivity entity.
func (uc *UserCreate) AddEstimateActivities(e ...*EstimateActivity) *UserCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEstimateActivityIDs(ids...)
}

// AddJobActivityIDs adds the "job_activities" edge to the JobActivity entity by IDs.
func (uc *UserCreate) AddJobActivityIDs(ids ...string) *UserCreate {
	uc.mutation.AddJobActivityIDs(ids...)
	return uc
}

// AddJobActivities adds the "job_activities" edges to the JobActivity entity.
func (uc *UserCreate) AddJobActivities(j ...*JobActivity) *UserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddJobActivityIDs(ids...)
}

// AddPartnerActivityIDs adds the "partner_activities" edge to the PartnerActivity entity by IDs.
func (uc *UserCreate) AddPartnerActivityIDs(ids ...string) *UserCreate {
	uc.mutation.AddPartnerActivityIDs(ids...)
	return uc
}

// AddPartnerActivities adds the "partner_activities" edges to the PartnerActivity entity.
func (uc *UserCreate) AddPartnerActivities(p ...*PartnerActivity) *UserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPartnerActivityIDs(ids...)
}

// AddUserActivityIDs adds the "user_activities" edge to the UserActivity entity by IDs.
func (uc *UserCreate) AddUserActivityIDs(ids ...string) *UserCreate {
	uc.mutation.AddUserActivityIDs(ids...)
	return uc
}

// AddUserActivities adds the "user_activities" edges to the UserActivity entity.
func (uc *UserCreate) AddUserActivities(u ...*UserActivity) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserActivityIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the UserActivity entity by IDs.
func (uc *UserCreate) AddActivityIDs(ids ...string) *UserCreate {
	uc.mutation.AddActivityIDs(ids...)
	return uc
}

// AddActivities adds the "activities" edges to the UserActivity entity.
func (uc *UserCreate) AddActivities(u ...*UserActivity) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddActivityIDs(ids...)
}

// AddJobProgressHistoryIDs adds the "job_progress_history" edge to the JobProgressHistory entity by IDs.
func (uc *UserCreate) AddJobProgressHistoryIDs(ids ...string) *UserCreate {
	uc.mutation.AddJobProgressHistoryIDs(ids...)
	return uc
}

// AddJobProgressHistory adds the "job_progress_history" edges to the JobProgressHistory entity.
func (uc *UserCreate) AddJobProgressHistory(j ...*JobProgressHistory) *UserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddJobProgressHistoryIDs(ids...)
}

// AddInstallationJobStatusChangerIDs adds the "installation_job_status_changer" edge to the InstallationJobProgress entity by IDs.
func (uc *UserCreate) AddInstallationJobStatusChangerIDs(ids ...string) *UserCreate {
	uc.mutation.AddInstallationJobStatusChangerIDs(ids...)
	return uc
}

// AddInstallationJobStatusChanger adds the "installation_job_status_changer" edges to the InstallationJobProgress entity.
func (uc *UserCreate) AddInstallationJobStatusChanger(i ...*InstallationJobProgress) *UserCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddInstallationJobStatusChangerIDs(ids...)
}

// AddContactUsRequestIDs adds the "contact_us_requests" edge to the ContactUs entity by IDs.
func (uc *UserCreate) AddContactUsRequestIDs(ids ...string) *UserCreate {
	uc.mutation.AddContactUsRequestIDs(ids...)
	return uc
}

// AddContactUsRequests adds the "contact_us_requests" edges to the ContactUs entity.
func (uc *UserCreate) AddContactUsRequests(c ...*ContactUs) *UserCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddContactUsRequestIDs(ids...)
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by IDs.
func (uc *UserCreate) AddPartnerIDs(ids ...string) *UserCreate {
	uc.mutation.AddPartnerIDs(ids...)
	return uc
}

// AddPartner adds the "partner" edges to the Partner entity.
func (uc *UserCreate) AddPartner(p ...*Partner) *UserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPartnerIDs(ids...)
}

// AddSurveyIDs adds the "surveys" edge to the Survey entity by IDs.
func (uc *UserCreate) AddSurveyIDs(ids ...string) *UserCreate {
	uc.mutation.AddSurveyIDs(ids...)
	return uc
}

// AddSurveys adds the "surveys" edges to the Survey entity.
func (uc *UserCreate) AddSurveys(s ...*Survey) *UserCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSurveyIDs(ids...)
}

// AddSurveyProgresIDs adds the "survey_progress" edge to the SurveyProgress entity by IDs.
func (uc *UserCreate) AddSurveyProgresIDs(ids ...string) *UserCreate {
	uc.mutation.AddSurveyProgresIDs(ids...)
	return uc
}

// AddSurveyProgress adds the "survey_progress" edges to the SurveyProgress entity.
func (uc *UserCreate) AddSurveyProgress(s ...*SurveyProgress) *UserCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSurveyProgresIDs(ids...)
}

// AddCreatedTrainingVideoIDs adds the "created_training_videos" edge to the TrainingVideo entity by IDs.
func (uc *UserCreate) AddCreatedTrainingVideoIDs(ids ...string) *UserCreate {
	uc.mutation.AddCreatedTrainingVideoIDs(ids...)
	return uc
}

// AddCreatedTrainingVideos adds the "created_training_videos" edges to the TrainingVideo entity.
func (uc *UserCreate) AddCreatedTrainingVideos(t ...*TrainingVideo) *UserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddCreatedTrainingVideoIDs(ids...)
}

// AddCreatedTrainingCourseIDs adds the "created_training_courses" edge to the TrainingCourse entity by IDs.
func (uc *UserCreate) AddCreatedTrainingCourseIDs(ids ...string) *UserCreate {
	uc.mutation.AddCreatedTrainingCourseIDs(ids...)
	return uc
}

// AddCreatedTrainingCourses adds the "created_training_courses" edges to the TrainingCourse entity.
func (uc *UserCreate) AddCreatedTrainingCourses(t ...*TrainingCourse) *UserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddCreatedTrainingCourseIDs(ids...)
}

// AddJobNoteIDs adds the "job_notes" edge to the JobNote entity by IDs.
func (uc *UserCreate) AddJobNoteIDs(ids ...string) *UserCreate {
	uc.mutation.AddJobNoteIDs(ids...)
	return uc
}

// AddJobNotes adds the "job_notes" edges to the JobNote entity.
func (uc *UserCreate) AddJobNotes(j ...*JobNote) *UserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddJobNoteIDs(ids...)
}

// AddChatChannelIDs adds the "chat_channels" edge to the ChannelSub entity by IDs.
func (uc *UserCreate) AddChatChannelIDs(ids ...string) *UserCreate {
	uc.mutation.AddChatChannelIDs(ids...)
	return uc
}

// AddChatChannels adds the "chat_channels" edges to the ChannelSub entity.
func (uc *UserCreate) AddChatChannels(c ...*ChannelSub) *UserCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddChatChannelIDs(ids...)
}

// AddSentMessageIDs adds the "sent_messages" edge to the ChannelMessage entity by IDs.
func (uc *UserCreate) AddSentMessageIDs(ids ...string) *UserCreate {
	uc.mutation.AddSentMessageIDs(ids...)
	return uc
}

// AddSentMessages adds the "sent_messages" edges to the ChannelMessage entity.
func (uc *UserCreate) AddSentMessages(c ...*ChannelMessage) *UserCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddSentMessageIDs(ids...)
}

// AddReceivedMessageIDs adds the "received_messages" edge to the ChannelMessage entity by IDs.
func (uc *UserCreate) AddReceivedMessageIDs(ids ...string) *UserCreate {
	uc.mutation.AddReceivedMessageIDs(ids...)
	return uc
}

// AddReceivedMessages adds the "received_messages" edges to the ChannelMessage entity.
func (uc *UserCreate) AddReceivedMessages(c ...*ChannelMessage) *UserCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddReceivedMessageIDs(ids...)
}

// AddChannelMessageReadIDs adds the "channel_message_read" edge to the ChannelMessageRead entity by IDs.
func (uc *UserCreate) AddChannelMessageReadIDs(ids ...string) *UserCreate {
	uc.mutation.AddChannelMessageReadIDs(ids...)
	return uc
}

// AddChannelMessageRead adds the "channel_message_read" edges to the ChannelMessageRead entity.
func (uc *UserCreate) AddChannelMessageRead(c ...*ChannelMessageRead) *UserCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddChannelMessageReadIDs(ids...)
}

// AddProductsCreatedIDs adds the "products_created" edge to the Product entity by IDs.
func (uc *UserCreate) AddProductsCreatedIDs(ids ...string) *UserCreate {
	uc.mutation.AddProductsCreatedIDs(ids...)
	return uc
}

// AddProductsCreated adds the "products_created" edges to the Product entity.
func (uc *UserCreate) AddProductsCreated(p ...*Product) *UserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddProductsCreatedIDs(ids...)
}

// AddProductPkgCreatedIDs adds the "product_pkg_created" edge to the ProductPackage entity by IDs.
func (uc *UserCreate) AddProductPkgCreatedIDs(ids ...string) *UserCreate {
	uc.mutation.AddProductPkgCreatedIDs(ids...)
	return uc
}

// AddProductPkgCreated adds the "product_pkg_created" edges to the ProductPackage entity.
func (uc *UserCreate) AddProductPkgCreated(p ...*ProductPackage) *UserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddProductPkgCreatedIDs(ids...)
}

// AddJobDocURLIDs adds the "job_doc_urls" edge to the JobDocURL entity by IDs.
func (uc *UserCreate) AddJobDocURLIDs(ids ...string) *UserCreate {
	uc.mutation.AddJobDocURLIDs(ids...)
	return uc
}

// AddJobDocUrls adds the "job_doc_urls" edges to the JobDocURL entity.
func (uc *UserCreate) AddJobDocUrls(j ...*JobDocURL) *UserCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddJobDocURLIDs(ids...)
}

// AddPartnerContactIDs adds the "partner_contacts" edge to the PartnerContact entity by IDs.
func (uc *UserCreate) AddPartnerContactIDs(ids ...string) *UserCreate {
	uc.mutation.AddPartnerContactIDs(ids...)
	return uc
}

// AddPartnerContacts adds the "partner_contacts" edges to the PartnerContact entity.
func (uc *UserCreate) AddPartnerContacts(p ...*PartnerContact) *UserCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPartnerContactIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.EmailVerified(); !ok {
		v := user.DefaultEmailVerified
		uc.mutation.SetEmailVerified(v)
	}
	if _, ok := uc.mutation.PhoneVerified(); !ok {
		v := user.DefaultPhoneVerified
		uc.mutation.SetPhoneVerified(v)
	}
	if _, ok := uc.mutation.Status(); !ok {
		v := user.DefaultStatus
		uc.mutation.SetStatus(v)
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if _, ok := uc.mutation.WrongAttempts(); !ok {
		v := user.DefaultWrongAttempts
		uc.mutation.SetWrongAttempts(v)
	}
	if _, ok := uc.mutation.AcceptedGeneralTerms(); !ok {
		v := user.DefaultAcceptedGeneralTerms
		uc.mutation.SetAcceptedGeneralTerms(v)
	}
	if _, ok := uc.mutation.AcceptedTermsNPrivacy(); !ok {
		v := user.DefaultAcceptedTermsNPrivacy
		uc.mutation.SetAcceptedTermsNPrivacy(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if v, ok := uc.mutation.ExternalID(); ok {
		if err := user.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "User.external_id": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Pwd(); !ok {
		return &ValidationError{Name: "pwd", err: errors.New(`ent: missing required field "User.pwd"`)}
	}
	if v, ok := uc.mutation.Pwd(); ok {
		if err := user.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "User.pwd": %w`, err)}
		}
	}
	if v, ok := uc.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uc.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.EmailVerified(); !ok {
		return &ValidationError{Name: "email_verified", err: errors.New(`ent: missing required field "User.email_verified"`)}
	}
	if _, ok := uc.mutation.PhoneVerified(); !ok {
		return &ValidationError{Name: "phone_verified", err: errors.New(`ent: missing required field "User.phone_verified"`)}
	}
	if v, ok := uc.mutation.Picture(); ok {
		if err := user.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "User.picture": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "User.status"`)}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Note(); ok {
		if err := user.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "User.note": %w`, err)}
		}
	}
	if v, ok := uc.mutation.ID(); ok {
		if err := user.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "User.id": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Pwd(); ok {
		_spec.SetField(user.FieldPwd, field.TypeString, value)
		_node.Pwd = value
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
		_node.EmailVerified = value
	}
	if value, ok := uc.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
		_node.PhoneVerified = value
	}
	if value, ok := uc.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
		_node.Picture = &value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.Note(); ok {
		_spec.SetField(user.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := uc.mutation.WrongAttempts(); ok {
		_spec.SetField(user.FieldWrongAttempts, field.TypeUint8, value)
		_node.WrongAttempts = value
	}
	if value, ok := uc.mutation.WrongAttemptAt(); ok {
		_spec.SetField(user.FieldWrongAttemptAt, field.TypeTime, value)
		_node.WrongAttemptAt = &value
	}
	if value, ok := uc.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
		_node.LockedUntil = &value
	}
	if value, ok := uc.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := uc.mutation.AcceptedGeneralTerms(); ok {
		_spec.SetField(user.FieldAcceptedGeneralTerms, field.TypeBool, value)
		_node.AcceptedGeneralTerms = value
	}
	if value, ok := uc.mutation.AcceptedTermsNPrivacy(); ok {
		_spec.SetField(user.FieldAcceptedTermsNPrivacy, field.TypeBool, value)
		_node.AcceptedTermsNPrivacy = value
	}
	if nodes := uc.mutation.AuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.NotifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SalesRepEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InstallationLeadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.EstimateActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JobActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PartnerActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JobProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InstallationJobStatusChangerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ContactUsRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: uc.config, mutation: newPartnerContactMutation(uc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SurveyProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedTrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedTrainingCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JobNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ChatChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SentMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ReceivedMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ChannelMessageReadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ProductsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ProductPkgCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JobDocUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PartnerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsert) ClearDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDeletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *UserUpsert) SetExternalID(v string) *UserUpsert {
	u.Set(user.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateExternalID() *UserUpsert {
	u.SetExcluded(user.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_id" field.
func (u *UserUpsert) ClearExternalID() *UserUpsert {
	u.SetNull(user.FieldExternalID)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserUpsert) SetPhone(v string) *UserUpsert {
	u.Set(user.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhone() *UserUpsert {
	u.SetExcluded(user.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsert) ClearPhone() *UserUpsert {
	u.SetNull(user.FieldPhone)
	return u
}

// SetPwd sets the "pwd" field.
func (u *UserUpsert) SetPwd(v string) *UserUpsert {
	u.Set(user.FieldPwd, v)
	return u
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *UserUpsert) UpdatePwd() *UserUpsert {
	u.SetExcluded(user.FieldPwd)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsert) SetFirstName(v string) *UserUpsert {
	u.Set(user.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateFirstName() *UserUpsert {
	u.SetExcluded(user.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsert) ClearFirstName() *UserUpsert {
	u.SetNull(user.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *UserUpsert) SetLastName(v string) *UserUpsert {
	u.Set(user.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastName() *UserUpsert {
	u.SetExcluded(user.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsert) ClearLastName() *UserUpsert {
	u.SetNull(user.FieldLastName)
	return u
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsert) SetEmailVerified(v bool) *UserUpsert {
	u.Set(user.FieldEmailVerified, v)
	return u
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailVerified() *UserUpsert {
	u.SetExcluded(user.FieldEmailVerified)
	return u
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *UserUpsert) SetPhoneVerified(v bool) *UserUpsert {
	u.Set(user.FieldPhoneVerified, v)
	return u
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhoneVerified() *UserUpsert {
	u.SetExcluded(user.FieldPhoneVerified)
	return u
}

// SetPicture sets the "picture" field.
func (u *UserUpsert) SetPicture(v string) *UserUpsert {
	u.Set(user.FieldPicture, v)
	return u
}

// UpdatePicture sets the "picture" field to the value that was provided on create.
func (u *UserUpsert) UpdatePicture() *UserUpsert {
	u.SetExcluded(user.FieldPicture)
	return u
}

// ClearPicture clears the value of the "picture" field.
func (u *UserUpsert) ClearPicture() *UserUpsert {
	u.SetNull(user.FieldPicture)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v enum.AccountStatus) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// SetRole sets the "role" field.
func (u *UserUpsert) SetRole(v enum.Role) *UserUpsert {
	u.Set(user.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsert) UpdateRole() *UserUpsert {
	u.SetExcluded(user.FieldRole)
	return u
}

// SetNote sets the "note" field.
func (u *UserUpsert) SetNote(v string) *UserUpsert {
	u.Set(user.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *UserUpsert) UpdateNote() *UserUpsert {
	u.SetExcluded(user.FieldNote)
	return u
}

// ClearNote clears the value of the "note" field.
func (u *UserUpsert) ClearNote() *UserUpsert {
	u.SetNull(user.FieldNote)
	return u
}

// SetWrongAttempts sets the "wrong_attempts" field.
func (u *UserUpsert) SetWrongAttempts(v uint8) *UserUpsert {
	u.Set(user.FieldWrongAttempts, v)
	return u
}

// UpdateWrongAttempts sets the "wrong_attempts" field to the value that was provided on create.
func (u *UserUpsert) UpdateWrongAttempts() *UserUpsert {
	u.SetExcluded(user.FieldWrongAttempts)
	return u
}

// AddWrongAttempts adds v to the "wrong_attempts" field.
func (u *UserUpsert) AddWrongAttempts(v uint8) *UserUpsert {
	u.Add(user.FieldWrongAttempts, v)
	return u
}

// ClearWrongAttempts clears the value of the "wrong_attempts" field.
func (u *UserUpsert) ClearWrongAttempts() *UserUpsert {
	u.SetNull(user.FieldWrongAttempts)
	return u
}

// SetWrongAttemptAt sets the "wrong_attempt_at" field.
func (u *UserUpsert) SetWrongAttemptAt(v time.Time) *UserUpsert {
	u.Set(user.FieldWrongAttemptAt, v)
	return u
}

// UpdateWrongAttemptAt sets the "wrong_attempt_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateWrongAttemptAt() *UserUpsert {
	u.SetExcluded(user.FieldWrongAttemptAt)
	return u
}

// ClearWrongAttemptAt clears the value of the "wrong_attempt_at" field.
func (u *UserUpsert) ClearWrongAttemptAt() *UserUpsert {
	u.SetNull(user.FieldWrongAttemptAt)
	return u
}

// SetLockedUntil sets the "locked_until" field.
func (u *UserUpsert) SetLockedUntil(v time.Time) *UserUpsert {
	u.Set(user.FieldLockedUntil, v)
	return u
}

// UpdateLockedUntil sets the "locked_until" field to the value that was provided on create.
func (u *UserUpsert) UpdateLockedUntil() *UserUpsert {
	u.SetExcluded(user.FieldLockedUntil)
	return u
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (u *UserUpsert) ClearLockedUntil() *UserUpsert {
	u.SetNull(user.FieldLockedUntil)
	return u
}

// SetLocation sets the "location" field.
func (u *UserUpsert) SetLocation(v string) *UserUpsert {
	u.Set(user.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserUpsert) UpdateLocation() *UserUpsert {
	u.SetExcluded(user.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *UserUpsert) ClearLocation() *UserUpsert {
	u.SetNull(user.FieldLocation)
	return u
}

// SetAcceptedGeneralTerms sets the "accepted_general_terms" field.
func (u *UserUpsert) SetAcceptedGeneralTerms(v bool) *UserUpsert {
	u.Set(user.FieldAcceptedGeneralTerms, v)
	return u
}

// UpdateAcceptedGeneralTerms sets the "accepted_general_terms" field to the value that was provided on create.
func (u *UserUpsert) UpdateAcceptedGeneralTerms() *UserUpsert {
	u.SetExcluded(user.FieldAcceptedGeneralTerms)
	return u
}

// ClearAcceptedGeneralTerms clears the value of the "accepted_general_terms" field.
func (u *UserUpsert) ClearAcceptedGeneralTerms() *UserUpsert {
	u.SetNull(user.FieldAcceptedGeneralTerms)
	return u
}

// SetAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field.
func (u *UserUpsert) SetAcceptedTermsNPrivacy(v bool) *UserUpsert {
	u.Set(user.FieldAcceptedTermsNPrivacy, v)
	return u
}

// UpdateAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field to the value that was provided on create.
func (u *UserUpsert) UpdateAcceptedTermsNPrivacy() *UserUpsert {
	u.SetExcluded(user.FieldAcceptedTermsNPrivacy)
	return u
}

// ClearAcceptedTermsNPrivacy clears the value of the "accepted_terms_n_privacy" field.
func (u *UserUpsert) ClearAcceptedTermsNPrivacy() *UserUpsert {
	u.SetNull(user.FieldAcceptedTermsNPrivacy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertOne) ClearDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExternalID sets the "external_id" field.
func (u *UserUpsertOne) SetExternalID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateExternalID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *UserUpsertOne) ClearExternalID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearExternalID()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertOne) SetPhone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsertOne) ClearPhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhone()
	})
}

// SetPwd sets the "pwd" field.
func (u *UserUpsertOne) SetPwd(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPwd(v)
	})
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePwd() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePwd()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertOne) SetFirstName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertOne) ClearFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertOne) SetLastName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertOne) ClearLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsertOne) SetEmailVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerified()
	})
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *UserUpsertOne) SetPhoneVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneVerified(v)
	})
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhoneVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneVerified()
	})
}

// SetPicture sets the "picture" field.
func (u *UserUpsertOne) SetPicture(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPicture(v)
	})
}

// UpdatePicture sets the "picture" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePicture() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePicture()
	})
}

// ClearPicture clears the value of the "picture" field.
func (u *UserUpsertOne) ClearPicture() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPicture()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v enum.AccountStatus) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertOne) SetRole(v enum.Role) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRole() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetNote sets the "note" field.
func (u *UserUpsertOne) SetNote(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNote() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *UserUpsertOne) ClearNote() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearNote()
	})
}

// SetWrongAttempts sets the "wrong_attempts" field.
func (u *UserUpsertOne) SetWrongAttempts(v uint8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetWrongAttempts(v)
	})
}

// AddWrongAttempts adds v to the "wrong_attempts" field.
func (u *UserUpsertOne) AddWrongAttempts(v uint8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddWrongAttempts(v)
	})
}

// UpdateWrongAttempts sets the "wrong_attempts" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateWrongAttempts() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWrongAttempts()
	})
}

// ClearWrongAttempts clears the value of the "wrong_attempts" field.
func (u *UserUpsertOne) ClearWrongAttempts() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearWrongAttempts()
	})
}

// SetWrongAttemptAt sets the "wrong_attempt_at" field.
func (u *UserUpsertOne) SetWrongAttemptAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetWrongAttemptAt(v)
	})
}

// UpdateWrongAttemptAt sets the "wrong_attempt_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateWrongAttemptAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWrongAttemptAt()
	})
}

// ClearWrongAttemptAt clears the value of the "wrong_attempt_at" field.
func (u *UserUpsertOne) ClearWrongAttemptAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearWrongAttemptAt()
	})
}

// SetLockedUntil sets the "locked_until" field.
func (u *UserUpsertOne) SetLockedUntil(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedUntil(v)
	})
}

// UpdateLockedUntil sets the "locked_until" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLockedUntil() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedUntil()
	})
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (u *UserUpsertOne) ClearLockedUntil() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedUntil()
	})
}

// SetLocation sets the "location" field.
func (u *UserUpsertOne) SetLocation(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLocation() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *UserUpsertOne) ClearLocation() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLocation()
	})
}

// SetAcceptedGeneralTerms sets the "accepted_general_terms" field.
func (u *UserUpsertOne) SetAcceptedGeneralTerms(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAcceptedGeneralTerms(v)
	})
}

// UpdateAcceptedGeneralTerms sets the "accepted_general_terms" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAcceptedGeneralTerms() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAcceptedGeneralTerms()
	})
}

// ClearAcceptedGeneralTerms clears the value of the "accepted_general_terms" field.
func (u *UserUpsertOne) ClearAcceptedGeneralTerms() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAcceptedGeneralTerms()
	})
}

// SetAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field.
func (u *UserUpsertOne) SetAcceptedTermsNPrivacy(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAcceptedTermsNPrivacy(v)
	})
}

// UpdateAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAcceptedTermsNPrivacy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAcceptedTermsNPrivacy()
	})
}

// ClearAcceptedTermsNPrivacy clears the value of the "accepted_terms_n_privacy" field.
func (u *UserUpsertOne) ClearAcceptedTermsNPrivacy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAcceptedTermsNPrivacy()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertBulk) ClearDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExternalID sets the "external_id" field.
func (u *UserUpsertBulk) SetExternalID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateExternalID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *UserUpsertBulk) ClearExternalID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearExternalID()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertBulk) SetPhone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsertBulk) ClearPhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhone()
	})
}

// SetPwd sets the "pwd" field.
func (u *UserUpsertBulk) SetPwd(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPwd(v)
	})
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePwd() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePwd()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertBulk) SetFirstName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertBulk) ClearFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertBulk) SetLastName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertBulk) ClearLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsertBulk) SetEmailVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerified()
	})
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *UserUpsertBulk) SetPhoneVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneVerified(v)
	})
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhoneVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneVerified()
	})
}

// SetPicture sets the "picture" field.
func (u *UserUpsertBulk) SetPicture(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPicture(v)
	})
}

// UpdatePicture sets the "picture" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePicture() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePicture()
	})
}

// ClearPicture clears the value of the "picture" field.
func (u *UserUpsertBulk) ClearPicture() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPicture()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v enum.AccountStatus) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertBulk) SetRole(v enum.Role) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRole() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetNote sets the "note" field.
func (u *UserUpsertBulk) SetNote(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNote() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *UserUpsertBulk) ClearNote() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearNote()
	})
}

// SetWrongAttempts sets the "wrong_attempts" field.
func (u *UserUpsertBulk) SetWrongAttempts(v uint8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetWrongAttempts(v)
	})
}

// AddWrongAttempts adds v to the "wrong_attempts" field.
func (u *UserUpsertBulk) AddWrongAttempts(v uint8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddWrongAttempts(v)
	})
}

// UpdateWrongAttempts sets the "wrong_attempts" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateWrongAttempts() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWrongAttempts()
	})
}

// ClearWrongAttempts clears the value of the "wrong_attempts" field.
func (u *UserUpsertBulk) ClearWrongAttempts() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearWrongAttempts()
	})
}

// SetWrongAttemptAt sets the "wrong_attempt_at" field.
func (u *UserUpsertBulk) SetWrongAttemptAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetWrongAttemptAt(v)
	})
}

// UpdateWrongAttemptAt sets the "wrong_attempt_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateWrongAttemptAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWrongAttemptAt()
	})
}

// ClearWrongAttemptAt clears the value of the "wrong_attempt_at" field.
func (u *UserUpsertBulk) ClearWrongAttemptAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearWrongAttemptAt()
	})
}

// SetLockedUntil sets the "locked_until" field.
func (u *UserUpsertBulk) SetLockedUntil(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedUntil(v)
	})
}

// UpdateLockedUntil sets the "locked_until" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLockedUntil() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedUntil()
	})
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (u *UserUpsertBulk) ClearLockedUntil() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedUntil()
	})
}

// SetLocation sets the "location" field.
func (u *UserUpsertBulk) SetLocation(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLocation() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *UserUpsertBulk) ClearLocation() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLocation()
	})
}

// SetAcceptedGeneralTerms sets the "accepted_general_terms" field.
func (u *UserUpsertBulk) SetAcceptedGeneralTerms(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAcceptedGeneralTerms(v)
	})
}

// UpdateAcceptedGeneralTerms sets the "accepted_general_terms" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAcceptedGeneralTerms() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAcceptedGeneralTerms()
	})
}

// ClearAcceptedGeneralTerms clears the value of the "accepted_general_terms" field.
func (u *UserUpsertBulk) ClearAcceptedGeneralTerms() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAcceptedGeneralTerms()
	})
}

// SetAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field.
func (u *UserUpsertBulk) SetAcceptedTermsNPrivacy(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAcceptedTermsNPrivacy(v)
	})
}

// UpdateAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAcceptedTermsNPrivacy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAcceptedTermsNPrivacy()
	})
}

// ClearAcceptedTermsNPrivacy clears the value of the "accepted_terms_n_privacy" field.
func (u *UserUpsertBulk) ClearAcceptedTermsNPrivacy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAcceptedTermsNPrivacy()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

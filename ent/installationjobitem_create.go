// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobItemCreate is the builder for creating a InstallationJobItem entity.
type InstallationJobItemCreate struct {
	config
	mutation *InstallationJobItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ijic *InstallationJobItemCreate) SetName(s string) *InstallationJobItemCreate {
	ijic.mutation.SetName(s)
	return ijic
}

// SetDescription sets the "description" field.
func (ijic *InstallationJobItemCreate) SetDescription(s string) *InstallationJobItemCreate {
	ijic.mutation.SetDescription(s)
	return ijic
}

// SetFeatures sets the "features" field.
func (ijic *InstallationJobItemCreate) SetFeatures(s []string) *InstallationJobItemCreate {
	ijic.mutation.SetFeatures(s)
	return ijic
}

// SetPrice sets the "price" field.
func (ijic *InstallationJobItemCreate) SetPrice(f float64) *InstallationJobItemCreate {
	ijic.mutation.SetPrice(f)
	return ijic
}

// SetImgKey sets the "img_key" field.
func (ijic *InstallationJobItemCreate) SetImgKey(s string) *InstallationJobItemCreate {
	ijic.mutation.SetImgKey(s)
	return ijic
}

// SetSpecialNote sets the "special_note" field.
func (ijic *InstallationJobItemCreate) SetSpecialNote(s string) *InstallationJobItemCreate {
	ijic.mutation.SetSpecialNote(s)
	return ijic
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (ijic *InstallationJobItemCreate) SetNillableSpecialNote(s *string) *InstallationJobItemCreate {
	if s != nil {
		ijic.SetSpecialNote(*s)
	}
	return ijic
}

// SetID sets the "id" field.
func (ijic *InstallationJobItemCreate) SetID(s string) *InstallationJobItemCreate {
	ijic.mutation.SetID(s)
	return ijic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ijic *InstallationJobItemCreate) SetNillableID(s *string) *InstallationJobItemCreate {
	if s != nil {
		ijic.SetID(*s)
	}
	return ijic
}

// SetJobID sets the "job" edge to the InstallationJob entity by ID.
func (ijic *InstallationJobItemCreate) SetJobID(id string) *InstallationJobItemCreate {
	ijic.mutation.SetJobID(id)
	return ijic
}

// SetJob sets the "job" edge to the InstallationJob entity.
func (ijic *InstallationJobItemCreate) SetJob(i *InstallationJob) *InstallationJobItemCreate {
	return ijic.SetJobID(i.ID)
}

// Mutation returns the InstallationJobItemMutation object of the builder.
func (ijic *InstallationJobItemCreate) Mutation() *InstallationJobItemMutation {
	return ijic.mutation
}

// Save creates the InstallationJobItem in the database.
func (ijic *InstallationJobItemCreate) Save(ctx context.Context) (*InstallationJobItem, error) {
	ijic.defaults()
	return withHooks(ctx, ijic.sqlSave, ijic.mutation, ijic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ijic *InstallationJobItemCreate) SaveX(ctx context.Context) *InstallationJobItem {
	v, err := ijic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ijic *InstallationJobItemCreate) Exec(ctx context.Context) error {
	_, err := ijic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijic *InstallationJobItemCreate) ExecX(ctx context.Context) {
	if err := ijic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ijic *InstallationJobItemCreate) defaults() {
	if _, ok := ijic.mutation.Features(); !ok {
		v := installationjobitem.DefaultFeatures
		ijic.mutation.SetFeatures(v)
	}
	if _, ok := ijic.mutation.ID(); !ok {
		v := installationjobitem.DefaultID()
		ijic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ijic *InstallationJobItemCreate) check() error {
	if _, ok := ijic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "InstallationJobItem.name"`)}
	}
	if v, ok := ijic.mutation.Name(); ok {
		if err := installationjobitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.name": %w`, err)}
		}
	}
	if _, ok := ijic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "InstallationJobItem.description"`)}
	}
	if v, ok := ijic.mutation.Description(); ok {
		if err := installationjobitem.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.description": %w`, err)}
		}
	}
	if _, ok := ijic.mutation.Features(); !ok {
		return &ValidationError{Name: "features", err: errors.New(`ent: missing required field "InstallationJobItem.features"`)}
	}
	if _, ok := ijic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "InstallationJobItem.price"`)}
	}
	if _, ok := ijic.mutation.ImgKey(); !ok {
		return &ValidationError{Name: "img_key", err: errors.New(`ent: missing required field "InstallationJobItem.img_key"`)}
	}
	if v, ok := ijic.mutation.SpecialNote(); ok {
		if err := installationjobitem.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.special_note": %w`, err)}
		}
	}
	if v, ok := ijic.mutation.ID(); ok {
		if err := installationjobitem.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.id": %w`, err)}
		}
	}
	if _, ok := ijic.mutation.JobID(); !ok {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "InstallationJobItem.job"`)}
	}
	return nil
}

func (ijic *InstallationJobItemCreate) sqlSave(ctx context.Context) (*InstallationJobItem, error) {
	if err := ijic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ijic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ijic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InstallationJobItem.ID type: %T", _spec.ID.Value)
		}
	}
	ijic.mutation.id = &_node.ID
	ijic.mutation.done = true
	return _node, nil
}

func (ijic *InstallationJobItemCreate) createSpec() (*InstallationJobItem, *sqlgraph.CreateSpec) {
	var (
		_node = &InstallationJobItem{config: ijic.config}
		_spec = sqlgraph.NewCreateSpec(installationjobitem.Table, sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString))
	)
	_spec.OnConflict = ijic.conflict
	if id, ok := ijic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ijic.mutation.Name(); ok {
		_spec.SetField(installationjobitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ijic.mutation.Description(); ok {
		_spec.SetField(installationjobitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ijic.mutation.Features(); ok {
		_spec.SetField(installationjobitem.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := ijic.mutation.Price(); ok {
		_spec.SetField(installationjobitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ijic.mutation.ImgKey(); ok {
		_spec.SetField(installationjobitem.FieldImgKey, field.TypeString, value)
		_node.ImgKey = value
	}
	if value, ok := ijic.mutation.SpecialNote(); ok {
		_spec.SetField(installationjobitem.FieldSpecialNote, field.TypeString, value)
		_node.SpecialNote = value
	}
	if nodes := ijic.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobitem.JobTable,
			Columns: []string{installationjobitem.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstallationJobItem.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstallationJobItemUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ijic *InstallationJobItemCreate) OnConflict(opts ...sql.ConflictOption) *InstallationJobItemUpsertOne {
	ijic.conflict = opts
	return &InstallationJobItemUpsertOne{
		create: ijic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstallationJobItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ijic *InstallationJobItemCreate) OnConflictColumns(columns ...string) *InstallationJobItemUpsertOne {
	ijic.conflict = append(ijic.conflict, sql.ConflictColumns(columns...))
	return &InstallationJobItemUpsertOne{
		create: ijic,
	}
}

type (
	// InstallationJobItemUpsertOne is the builder for "upsert"-ing
	//  one InstallationJobItem node.
	InstallationJobItemUpsertOne struct {
		create *InstallationJobItemCreate
	}

	// InstallationJobItemUpsert is the "OnConflict" setter.
	InstallationJobItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *InstallationJobItemUpsert) SetName(v string) *InstallationJobItemUpsert {
	u.Set(installationjobitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InstallationJobItemUpsert) UpdateName() *InstallationJobItemUpsert {
	u.SetExcluded(installationjobitem.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *InstallationJobItemUpsert) SetDescription(v string) *InstallationJobItemUpsert {
	u.Set(installationjobitem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *InstallationJobItemUpsert) UpdateDescription() *InstallationJobItemUpsert {
	u.SetExcluded(installationjobitem.FieldDescription)
	return u
}

// SetFeatures sets the "features" field.
func (u *InstallationJobItemUpsert) SetFeatures(v []string) *InstallationJobItemUpsert {
	u.Set(installationjobitem.FieldFeatures, v)
	return u
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *InstallationJobItemUpsert) UpdateFeatures() *InstallationJobItemUpsert {
	u.SetExcluded(installationjobitem.FieldFeatures)
	return u
}

// SetPrice sets the "price" field.
func (u *InstallationJobItemUpsert) SetPrice(v float64) *InstallationJobItemUpsert {
	u.Set(installationjobitem.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *InstallationJobItemUpsert) UpdatePrice() *InstallationJobItemUpsert {
	u.SetExcluded(installationjobitem.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *InstallationJobItemUpsert) AddPrice(v float64) *InstallationJobItemUpsert {
	u.Add(installationjobitem.FieldPrice, v)
	return u
}

// SetImgKey sets the "img_key" field.
func (u *InstallationJobItemUpsert) SetImgKey(v string) *InstallationJobItemUpsert {
	u.Set(installationjobitem.FieldImgKey, v)
	return u
}

// UpdateImgKey sets the "img_key" field to the value that was provided on create.
func (u *InstallationJobItemUpsert) UpdateImgKey() *InstallationJobItemUpsert {
	u.SetExcluded(installationjobitem.FieldImgKey)
	return u
}

// SetSpecialNote sets the "special_note" field.
func (u *InstallationJobItemUpsert) SetSpecialNote(v string) *InstallationJobItemUpsert {
	u.Set(installationjobitem.FieldSpecialNote, v)
	return u
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *InstallationJobItemUpsert) UpdateSpecialNote() *InstallationJobItemUpsert {
	u.SetExcluded(installationjobitem.FieldSpecialNote)
	return u
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *InstallationJobItemUpsert) ClearSpecialNote() *InstallationJobItemUpsert {
	u.SetNull(installationjobitem.FieldSpecialNote)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InstallationJobItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(installationjobitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstallationJobItemUpsertOne) UpdateNewValues() *InstallationJobItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(installationjobitem.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstallationJobItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InstallationJobItemUpsertOne) Ignore() *InstallationJobItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstallationJobItemUpsertOne) DoNothing() *InstallationJobItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstallationJobItemCreate.OnConflict
// documentation for more info.
func (u *InstallationJobItemUpsertOne) Update(set func(*InstallationJobItemUpsert)) *InstallationJobItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstallationJobItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InstallationJobItemUpsertOne) SetName(v string) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InstallationJobItemUpsertOne) UpdateName() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *InstallationJobItemUpsertOne) SetDescription(v string) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *InstallationJobItemUpsertOne) UpdateDescription() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateDescription()
	})
}

// SetFeatures sets the "features" field.
func (u *InstallationJobItemUpsertOne) SetFeatures(v []string) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetFeatures(v)
	})
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *InstallationJobItemUpsertOne) UpdateFeatures() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateFeatures()
	})
}

// SetPrice sets the "price" field.
func (u *InstallationJobItemUpsertOne) SetPrice(v float64) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *InstallationJobItemUpsertOne) AddPrice(v float64) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *InstallationJobItemUpsertOne) UpdatePrice() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdatePrice()
	})
}

// SetImgKey sets the "img_key" field.
func (u *InstallationJobItemUpsertOne) SetImgKey(v string) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetImgKey(v)
	})
}

// UpdateImgKey sets the "img_key" field to the value that was provided on create.
func (u *InstallationJobItemUpsertOne) UpdateImgKey() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateImgKey()
	})
}

// SetSpecialNote sets the "special_note" field.
func (u *InstallationJobItemUpsertOne) SetSpecialNote(v string) *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetSpecialNote(v)
	})
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *InstallationJobItemUpsertOne) UpdateSpecialNote() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateSpecialNote()
	})
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *InstallationJobItemUpsertOne) ClearSpecialNote() *InstallationJobItemUpsertOne {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.ClearSpecialNote()
	})
}

// Exec executes the query.
func (u *InstallationJobItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstallationJobItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstallationJobItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InstallationJobItemUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InstallationJobItemUpsertOne.ID is not supported by MySQL driver. Use InstallationJobItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InstallationJobItemUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InstallationJobItemCreateBulk is the builder for creating many InstallationJobItem entities in bulk.
type InstallationJobItemCreateBulk struct {
	config
	builders []*InstallationJobItemCreate
	conflict []sql.ConflictOption
}

// Save creates the InstallationJobItem entities in the database.
func (ijicb *InstallationJobItemCreateBulk) Save(ctx context.Context) ([]*InstallationJobItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ijicb.builders))
	nodes := make([]*InstallationJobItem, len(ijicb.builders))
	mutators := make([]Mutator, len(ijicb.builders))
	for i := range ijicb.builders {
		func(i int, root context.Context) {
			builder := ijicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstallationJobItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ijicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ijicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ijicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ijicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ijicb *InstallationJobItemCreateBulk) SaveX(ctx context.Context) []*InstallationJobItem {
	v, err := ijicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ijicb *InstallationJobItemCreateBulk) Exec(ctx context.Context) error {
	_, err := ijicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijicb *InstallationJobItemCreateBulk) ExecX(ctx context.Context) {
	if err := ijicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstallationJobItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstallationJobItemUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ijicb *InstallationJobItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *InstallationJobItemUpsertBulk {
	ijicb.conflict = opts
	return &InstallationJobItemUpsertBulk{
		create: ijicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstallationJobItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ijicb *InstallationJobItemCreateBulk) OnConflictColumns(columns ...string) *InstallationJobItemUpsertBulk {
	ijicb.conflict = append(ijicb.conflict, sql.ConflictColumns(columns...))
	return &InstallationJobItemUpsertBulk{
		create: ijicb,
	}
}

// InstallationJobItemUpsertBulk is the builder for "upsert"-ing
// a bulk of InstallationJobItem nodes.
type InstallationJobItemUpsertBulk struct {
	create *InstallationJobItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InstallationJobItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(installationjobitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstallationJobItemUpsertBulk) UpdateNewValues() *InstallationJobItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(installationjobitem.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstallationJobItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InstallationJobItemUpsertBulk) Ignore() *InstallationJobItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstallationJobItemUpsertBulk) DoNothing() *InstallationJobItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstallationJobItemCreateBulk.OnConflict
// documentation for more info.
func (u *InstallationJobItemUpsertBulk) Update(set func(*InstallationJobItemUpsert)) *InstallationJobItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstallationJobItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InstallationJobItemUpsertBulk) SetName(v string) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InstallationJobItemUpsertBulk) UpdateName() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *InstallationJobItemUpsertBulk) SetDescription(v string) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *InstallationJobItemUpsertBulk) UpdateDescription() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateDescription()
	})
}

// SetFeatures sets the "features" field.
func (u *InstallationJobItemUpsertBulk) SetFeatures(v []string) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetFeatures(v)
	})
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *InstallationJobItemUpsertBulk) UpdateFeatures() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateFeatures()
	})
}

// SetPrice sets the "price" field.
func (u *InstallationJobItemUpsertBulk) SetPrice(v float64) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *InstallationJobItemUpsertBulk) AddPrice(v float64) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *InstallationJobItemUpsertBulk) UpdatePrice() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdatePrice()
	})
}

// SetImgKey sets the "img_key" field.
func (u *InstallationJobItemUpsertBulk) SetImgKey(v string) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetImgKey(v)
	})
}

// UpdateImgKey sets the "img_key" field to the value that was provided on create.
func (u *InstallationJobItemUpsertBulk) UpdateImgKey() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateImgKey()
	})
}

// SetSpecialNote sets the "special_note" field.
func (u *InstallationJobItemUpsertBulk) SetSpecialNote(v string) *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.SetSpecialNote(v)
	})
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *InstallationJobItemUpsertBulk) UpdateSpecialNote() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.UpdateSpecialNote()
	})
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *InstallationJobItemUpsertBulk) ClearSpecialNote() *InstallationJobItemUpsertBulk {
	return u.Update(func(s *InstallationJobItemUpsert) {
		s.ClearSpecialNote()
	})
}

// Exec executes the query.
func (u *InstallationJobItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InstallationJobItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstallationJobItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstallationJobItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/auditlog"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobprogress"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/notifysetting"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/predicate"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"roofix/ent/useractivity"
	"roofix/ent/userauth"
	"roofix/ent/usersession"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetExternalID sets the "external_id" field.
func (uu *UserUpdate) SetExternalID(s string) *UserUpdate {
	uu.mutation.SetExternalID(s)
	return uu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExternalID(s *string) *UserUpdate {
	if s != nil {
		uu.SetExternalID(*s)
	}
	return uu
}

// ClearExternalID clears the value of the "external_id" field.
func (uu *UserUpdate) ClearExternalID() *UserUpdate {
	uu.mutation.ClearExternalID()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetPwd sets the "pwd" field.
func (uu *UserUpdate) SetPwd(s string) *UserUpdate {
	uu.mutation.SetPwd(s)
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// ClearFirstName clears the value of the "first_name" field.
func (uu *UserUpdate) ClearFirstName() *UserUpdate {
	uu.mutation.ClearFirstName()
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// ClearLastName clears the value of the "last_name" field.
func (uu *UserUpdate) ClearLastName() *UserUpdate {
	uu.mutation.ClearLastName()
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetPhoneVerified sets the "phone_verified" field.
func (uu *UserUpdate) SetPhoneVerified(b bool) *UserUpdate {
	uu.mutation.SetPhoneVerified(b)
	return uu
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPhoneVerified(*b)
	}
	return uu
}

// SetPicture sets the "picture" field.
func (uu *UserUpdate) SetPicture(s string) *UserUpdate {
	uu.mutation.SetPicture(s)
	return uu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePicture(s *string) *UserUpdate {
	if s != nil {
		uu.SetPicture(*s)
	}
	return uu
}

// ClearPicture clears the value of the "picture" field.
func (uu *UserUpdate) ClearPicture() *UserUpdate {
	uu.mutation.ClearPicture()
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(es enum.AccountStatus) *UserUpdate {
	uu.mutation.SetStatus(es)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(es *enum.AccountStatus) *UserUpdate {
	if es != nil {
		uu.SetStatus(*es)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(e enum.Role) *UserUpdate {
	uu.mutation.SetRole(e)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(e *enum.Role) *UserUpdate {
	if e != nil {
		uu.SetRole(*e)
	}
	return uu
}

// SetNote sets the "note" field.
func (uu *UserUpdate) SetNote(s string) *UserUpdate {
	uu.mutation.SetNote(s)
	return uu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNote(s *string) *UserUpdate {
	if s != nil {
		uu.SetNote(*s)
	}
	return uu
}

// ClearNote clears the value of the "note" field.
func (uu *UserUpdate) ClearNote() *UserUpdate {
	uu.mutation.ClearNote()
	return uu
}

// SetWrongAttempts sets the "wrong_attempts" field.
func (uu *UserUpdate) SetWrongAttempts(u uint8) *UserUpdate {
	uu.mutation.ResetWrongAttempts()
	uu.mutation.SetWrongAttempts(u)
	return uu
}

// SetNillableWrongAttempts sets the "wrong_attempts" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWrongAttempts(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetWrongAttempts(*u)
	}
	return uu
}

// AddWrongAttempts adds u to the "wrong_attempts" field.
func (uu *UserUpdate) AddWrongAttempts(u int8) *UserUpdate {
	uu.mutation.AddWrongAttempts(u)
	return uu
}

// ClearWrongAttempts clears the value of the "wrong_attempts" field.
func (uu *UserUpdate) ClearWrongAttempts() *UserUpdate {
	uu.mutation.ClearWrongAttempts()
	return uu
}

// SetWrongAttemptAt sets the "wrong_attempt_at" field.
func (uu *UserUpdate) SetWrongAttemptAt(t time.Time) *UserUpdate {
	uu.mutation.SetWrongAttemptAt(t)
	return uu
}

// SetNillableWrongAttemptAt sets the "wrong_attempt_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWrongAttemptAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetWrongAttemptAt(*t)
	}
	return uu
}

// ClearWrongAttemptAt clears the value of the "wrong_attempt_at" field.
func (uu *UserUpdate) ClearWrongAttemptAt() *UserUpdate {
	uu.mutation.ClearWrongAttemptAt()
	return uu
}

// SetLockedUntil sets the "locked_until" field.
func (uu *UserUpdate) SetLockedUntil(t time.Time) *UserUpdate {
	uu.mutation.SetLockedUntil(t)
	return uu
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockedUntil(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLockedUntil(*t)
	}
	return uu
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (uu *UserUpdate) ClearLockedUntil() *UserUpdate {
	uu.mutation.ClearLockedUntil()
	return uu
}

// SetLocation sets the "location" field.
func (uu *UserUpdate) SetLocation(s string) *UserUpdate {
	uu.mutation.SetLocation(s)
	return uu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocation(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocation(*s)
	}
	return uu
}

// ClearLocation clears the value of the "location" field.
func (uu *UserUpdate) ClearLocation() *UserUpdate {
	uu.mutation.ClearLocation()
	return uu
}

// SetAcceptedGeneralTerms sets the "accepted_general_terms" field.
func (uu *UserUpdate) SetAcceptedGeneralTerms(b bool) *UserUpdate {
	uu.mutation.SetAcceptedGeneralTerms(b)
	return uu
}

// SetNillableAcceptedGeneralTerms sets the "accepted_general_terms" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAcceptedGeneralTerms(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAcceptedGeneralTerms(*b)
	}
	return uu
}

// ClearAcceptedGeneralTerms clears the value of the "accepted_general_terms" field.
func (uu *UserUpdate) ClearAcceptedGeneralTerms() *UserUpdate {
	uu.mutation.ClearAcceptedGeneralTerms()
	return uu
}

// SetAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field.
func (uu *UserUpdate) SetAcceptedTermsNPrivacy(b bool) *UserUpdate {
	uu.mutation.SetAcceptedTermsNPrivacy(b)
	return uu
}

// SetNillableAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAcceptedTermsNPrivacy(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAcceptedTermsNPrivacy(*b)
	}
	return uu
}

// ClearAcceptedTermsNPrivacy clears the value of the "accepted_terms_n_privacy" field.
func (uu *UserUpdate) ClearAcceptedTermsNPrivacy() *UserUpdate {
	uu.mutation.ClearAcceptedTermsNPrivacy()
	return uu
}

// SetAuthsID sets the "auths" edge to the UserAuth entity by ID.
func (uu *UserUpdate) SetAuthsID(id string) *UserUpdate {
	uu.mutation.SetAuthsID(id)
	return uu
}

// SetNillableAuthsID sets the "auths" edge to the UserAuth entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableAuthsID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetAuthsID(*id)
	}
	return uu
}

// SetAuths sets the "auths" edge to the UserAuth entity.
func (uu *UserUpdate) SetAuths(u *UserAuth) *UserUpdate {
	return uu.SetAuthsID(u.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (uu *UserUpdate) AddSessions(u ...*UserSession) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (uu *UserUpdate) AddAuditLogIDs(ids ...string) *UserUpdate {
	uu.mutation.AddAuditLogIDs(ids...)
	return uu
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (uu *UserUpdate) AddAuditLogs(a ...*AuditLog) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAuditLogIDs(ids...)
}

// AddNotifyIDs adds the "notify" edge to the NotifySetting entity by IDs.
func (uu *UserUpdate) AddNotifyIDs(ids ...string) *UserUpdate {
	uu.mutation.AddNotifyIDs(ids...)
	return uu
}

// AddNotify adds the "notify" edges to the NotifySetting entity.
func (uu *UserUpdate) AddNotify(n ...*NotifySetting) *UserUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotifyIDs(ids...)
}

// AddCreatedJobIDs adds the "created_jobs" edge to the Job entity by IDs.
func (uu *UserUpdate) AddCreatedJobIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCreatedJobIDs(ids...)
	return uu
}

// AddCreatedJobs adds the "created_jobs" edges to the Job entity.
func (uu *UserUpdate) AddCreatedJobs(j ...*Job) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddCreatedJobIDs(ids...)
}

// AddCreatedEstimateIDs adds the "created_estimates" edge to the Estimate entity by IDs.
func (uu *UserUpdate) AddCreatedEstimateIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCreatedEstimateIDs(ids...)
	return uu
}

// AddCreatedEstimates adds the "created_estimates" edges to the Estimate entity.
func (uu *UserUpdate) AddCreatedEstimates(e ...*Estimate) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddCreatedEstimateIDs(ids...)
}

// AddSalesRepEstimateIDs adds the "sales_rep_estimates" edge to the Estimate entity by IDs.
func (uu *UserUpdate) AddSalesRepEstimateIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSalesRepEstimateIDs(ids...)
	return uu
}

// AddSalesRepEstimates adds the "sales_rep_estimates" edges to the Estimate entity.
func (uu *UserUpdate) AddSalesRepEstimates(e ...*Estimate) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddSalesRepEstimateIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the Job entity by IDs.
func (uu *UserUpdate) AddSaleIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSaleIDs(ids...)
	return uu
}

// AddSales adds the "sales" edges to the Job entity.
func (uu *UserUpdate) AddSales(j ...*Job) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddSaleIDs(ids...)
}

// AddCreatedInstallationJobIDs adds the "created_installation_jobs" edge to the InstallationJob entity by IDs.
func (uu *UserUpdate) AddCreatedInstallationJobIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCreatedInstallationJobIDs(ids...)
	return uu
}

// AddCreatedInstallationJobs adds the "created_installation_jobs" edges to the InstallationJob entity.
func (uu *UserUpdate) AddCreatedInstallationJobs(i ...*InstallationJob) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddCreatedInstallationJobIDs(ids...)
}

// AddInstallationLeadIDs adds the "installation_leads" edge to the InstallationJob entity by IDs.
func (uu *UserUpdate) AddInstallationLeadIDs(ids ...string) *UserUpdate {
	uu.mutation.AddInstallationLeadIDs(ids...)
	return uu
}

// AddInstallationLeads adds the "installation_leads" edges to the InstallationJob entity.
func (uu *UserUpdate) AddInstallationLeads(i ...*InstallationJob) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInstallationLeadIDs(ids...)
}

// AddEstimateActivityIDs adds the "estimate_activities" edge to the EstimateActivity entity by IDs.
func (uu *UserUpdate) AddEstimateActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.AddEstimateActivityIDs(ids...)
	return uu
}

// AddEstimateActivities adds the "estimate_activities" edges to the EstimateActivity entity.
func (uu *UserUpdate) AddEstimateActivities(e ...*EstimateActivity) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEstimateActivityIDs(ids...)
}

// AddJobActivityIDs adds the "job_activities" edge to the JobActivity entity by IDs.
func (uu *UserUpdate) AddJobActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.AddJobActivityIDs(ids...)
	return uu
}

// AddJobActivities adds the "job_activities" edges to the JobActivity entity.
func (uu *UserUpdate) AddJobActivities(j ...*JobActivity) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddJobActivityIDs(ids...)
}

// AddPartnerActivityIDs adds the "partner_activities" edge to the PartnerActivity entity by IDs.
func (uu *UserUpdate) AddPartnerActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPartnerActivityIDs(ids...)
	return uu
}

// AddPartnerActivities adds the "partner_activities" edges to the PartnerActivity entity.
func (uu *UserUpdate) AddPartnerActivities(p ...*PartnerActivity) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPartnerActivityIDs(ids...)
}

// AddUserActivityIDs adds the "user_activities" edge to the UserActivity entity by IDs.
func (uu *UserUpdate) AddUserActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserActivityIDs(ids...)
	return uu
}

// AddUserActivities adds the "user_activities" edges to the UserActivity entity.
func (uu *UserUpdate) AddUserActivities(u ...*UserActivity) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserActivityIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the UserActivity entity by IDs.
func (uu *UserUpdate) AddActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.AddActivityIDs(ids...)
	return uu
}

// AddActivities adds the "activities" edges to the UserActivity entity.
func (uu *UserUpdate) AddActivities(u ...*UserActivity) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddActivityIDs(ids...)
}

// AddJobProgressHistoryIDs adds the "job_progress_history" edge to the JobProgressHistory entity by IDs.
func (uu *UserUpdate) AddJobProgressHistoryIDs(ids ...string) *UserUpdate {
	uu.mutation.AddJobProgressHistoryIDs(ids...)
	return uu
}

// AddJobProgressHistory adds the "job_progress_history" edges to the JobProgressHistory entity.
func (uu *UserUpdate) AddJobProgressHistory(j ...*JobProgressHistory) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddJobProgressHistoryIDs(ids...)
}

// AddInstallationJobStatusChangerIDs adds the "installation_job_status_changer" edge to the InstallationJobProgress entity by IDs.
func (uu *UserUpdate) AddInstallationJobStatusChangerIDs(ids ...string) *UserUpdate {
	uu.mutation.AddInstallationJobStatusChangerIDs(ids...)
	return uu
}

// AddInstallationJobStatusChanger adds the "installation_job_status_changer" edges to the InstallationJobProgress entity.
func (uu *UserUpdate) AddInstallationJobStatusChanger(i ...*InstallationJobProgress) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInstallationJobStatusChangerIDs(ids...)
}

// AddContactUsRequestIDs adds the "contact_us_requests" edge to the ContactUs entity by IDs.
func (uu *UserUpdate) AddContactUsRequestIDs(ids ...string) *UserUpdate {
	uu.mutation.AddContactUsRequestIDs(ids...)
	return uu
}

// AddContactUsRequests adds the "contact_us_requests" edges to the ContactUs entity.
func (uu *UserUpdate) AddContactUsRequests(c ...*ContactUs) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddContactUsRequestIDs(ids...)
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by IDs.
func (uu *UserUpdate) AddPartnerIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPartnerIDs(ids...)
	return uu
}

// AddPartner adds the "partner" edges to the Partner entity.
func (uu *UserUpdate) AddPartner(p ...*Partner) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPartnerIDs(ids...)
}

// AddSurveyIDs adds the "surveys" edge to the Survey entity by IDs.
func (uu *UserUpdate) AddSurveyIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSurveyIDs(ids...)
	return uu
}

// AddSurveys adds the "surveys" edges to the Survey entity.
func (uu *UserUpdate) AddSurveys(s ...*Survey) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSurveyIDs(ids...)
}

// AddSurveyProgresIDs adds the "survey_progress" edge to the SurveyProgress entity by IDs.
func (uu *UserUpdate) AddSurveyProgresIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSurveyProgresIDs(ids...)
	return uu
}

// AddSurveyProgress adds the "survey_progress" edges to the SurveyProgress entity.
func (uu *UserUpdate) AddSurveyProgress(s ...*SurveyProgress) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSurveyProgresIDs(ids...)
}

// AddCreatedTrainingVideoIDs adds the "created_training_videos" edge to the TrainingVideo entity by IDs.
func (uu *UserUpdate) AddCreatedTrainingVideoIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCreatedTrainingVideoIDs(ids...)
	return uu
}

// AddCreatedTrainingVideos adds the "created_training_videos" edges to the TrainingVideo entity.
func (uu *UserUpdate) AddCreatedTrainingVideos(t ...*TrainingVideo) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddCreatedTrainingVideoIDs(ids...)
}

// AddCreatedTrainingCourseIDs adds the "created_training_courses" edge to the TrainingCourse entity by IDs.
func (uu *UserUpdate) AddCreatedTrainingCourseIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCreatedTrainingCourseIDs(ids...)
	return uu
}

// AddCreatedTrainingCourses adds the "created_training_courses" edges to the TrainingCourse entity.
func (uu *UserUpdate) AddCreatedTrainingCourses(t ...*TrainingCourse) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddCreatedTrainingCourseIDs(ids...)
}

// AddJobNoteIDs adds the "job_notes" edge to the JobNote entity by IDs.
func (uu *UserUpdate) AddJobNoteIDs(ids ...string) *UserUpdate {
	uu.mutation.AddJobNoteIDs(ids...)
	return uu
}

// AddJobNotes adds the "job_notes" edges to the JobNote entity.
func (uu *UserUpdate) AddJobNotes(j ...*JobNote) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddJobNoteIDs(ids...)
}

// AddChatChannelIDs adds the "chat_channels" edge to the ChannelSub entity by IDs.
func (uu *UserUpdate) AddChatChannelIDs(ids ...string) *UserUpdate {
	uu.mutation.AddChatChannelIDs(ids...)
	return uu
}

// AddChatChannels adds the "chat_channels" edges to the ChannelSub entity.
func (uu *UserUpdate) AddChatChannels(c ...*ChannelSub) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddChatChannelIDs(ids...)
}

// AddSentMessageIDs adds the "sent_messages" edge to the ChannelMessage entity by IDs.
func (uu *UserUpdate) AddSentMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSentMessageIDs(ids...)
	return uu
}

// AddSentMessages adds the "sent_messages" edges to the ChannelMessage entity.
func (uu *UserUpdate) AddSentMessages(c ...*ChannelMessage) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddSentMessageIDs(ids...)
}

// AddReceivedMessageIDs adds the "received_messages" edge to the ChannelMessage entity by IDs.
func (uu *UserUpdate) AddReceivedMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.AddReceivedMessageIDs(ids...)
	return uu
}

// AddReceivedMessages adds the "received_messages" edges to the ChannelMessage entity.
func (uu *UserUpdate) AddReceivedMessages(c ...*ChannelMessage) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddReceivedMessageIDs(ids...)
}

// AddChannelMessageReadIDs adds the "channel_message_read" edge to the ChannelMessageRead entity by IDs.
func (uu *UserUpdate) AddChannelMessageReadIDs(ids ...string) *UserUpdate {
	uu.mutation.AddChannelMessageReadIDs(ids...)
	return uu
}

// AddChannelMessageRead adds the "channel_message_read" edges to the ChannelMessageRead entity.
func (uu *UserUpdate) AddChannelMessageRead(c ...*ChannelMessageRead) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddChannelMessageReadIDs(ids...)
}

// AddProductsCreatedIDs adds the "products_created" edge to the Product entity by IDs.
func (uu *UserUpdate) AddProductsCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddProductsCreatedIDs(ids...)
	return uu
}

// AddProductsCreated adds the "products_created" edges to the Product entity.
func (uu *UserUpdate) AddProductsCreated(p ...*Product) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddProductsCreatedIDs(ids...)
}

// AddProductPkgCreatedIDs adds the "product_pkg_created" edge to the ProductPackage entity by IDs.
func (uu *UserUpdate) AddProductPkgCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddProductPkgCreatedIDs(ids...)
	return uu
}

// AddProductPkgCreated adds the "product_pkg_created" edges to the ProductPackage entity.
func (uu *UserUpdate) AddProductPkgCreated(p ...*ProductPackage) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddProductPkgCreatedIDs(ids...)
}

// AddJobDocURLIDs adds the "job_doc_urls" edge to the JobDocURL entity by IDs.
func (uu *UserUpdate) AddJobDocURLIDs(ids ...string) *UserUpdate {
	uu.mutation.AddJobDocURLIDs(ids...)
	return uu
}

// AddJobDocUrls adds the "job_doc_urls" edges to the JobDocURL entity.
func (uu *UserUpdate) AddJobDocUrls(j ...*JobDocURL) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddJobDocURLIDs(ids...)
}

// AddPartnerContactIDs adds the "partner_contacts" edge to the PartnerContact entity by IDs.
func (uu *UserUpdate) AddPartnerContactIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPartnerContactIDs(ids...)
	return uu
}

// AddPartnerContacts adds the "partner_contacts" edges to the PartnerContact entity.
func (uu *UserUpdate) AddPartnerContacts(p ...*PartnerContact) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPartnerContactIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearAuths clears the "auths" edge to the UserAuth entity.
func (uu *UserUpdate) ClearAuths() *UserUpdate {
	uu.mutation.ClearAuths()
	return uu
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (uu *UserUpdate) RemoveSessions(u ...*UserSession) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (uu *UserUpdate) ClearAuditLogs() *UserUpdate {
	uu.mutation.ClearAuditLogs()
	return uu
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (uu *UserUpdate) RemoveAuditLogIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveAuditLogIDs(ids...)
	return uu
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (uu *UserUpdate) RemoveAuditLogs(a ...*AuditLog) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAuditLogIDs(ids...)
}

// ClearNotify clears all "notify" edges to the NotifySetting entity.
func (uu *UserUpdate) ClearNotify() *UserUpdate {
	uu.mutation.ClearNotify()
	return uu
}

// RemoveNotifyIDs removes the "notify" edge to NotifySetting entities by IDs.
func (uu *UserUpdate) RemoveNotifyIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveNotifyIDs(ids...)
	return uu
}

// RemoveNotify removes "notify" edges to NotifySetting entities.
func (uu *UserUpdate) RemoveNotify(n ...*NotifySetting) *UserUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotifyIDs(ids...)
}

// ClearCreatedJobs clears all "created_jobs" edges to the Job entity.
func (uu *UserUpdate) ClearCreatedJobs() *UserUpdate {
	uu.mutation.ClearCreatedJobs()
	return uu
}

// RemoveCreatedJobIDs removes the "created_jobs" edge to Job entities by IDs.
func (uu *UserUpdate) RemoveCreatedJobIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCreatedJobIDs(ids...)
	return uu
}

// RemoveCreatedJobs removes "created_jobs" edges to Job entities.
func (uu *UserUpdate) RemoveCreatedJobs(j ...*Job) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveCreatedJobIDs(ids...)
}

// ClearCreatedEstimates clears all "created_estimates" edges to the Estimate entity.
func (uu *UserUpdate) ClearCreatedEstimates() *UserUpdate {
	uu.mutation.ClearCreatedEstimates()
	return uu
}

// RemoveCreatedEstimateIDs removes the "created_estimates" edge to Estimate entities by IDs.
func (uu *UserUpdate) RemoveCreatedEstimateIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCreatedEstimateIDs(ids...)
	return uu
}

// RemoveCreatedEstimates removes "created_estimates" edges to Estimate entities.
func (uu *UserUpdate) RemoveCreatedEstimates(e ...*Estimate) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveCreatedEstimateIDs(ids...)
}

// ClearSalesRepEstimates clears all "sales_rep_estimates" edges to the Estimate entity.
func (uu *UserUpdate) ClearSalesRepEstimates() *UserUpdate {
	uu.mutation.ClearSalesRepEstimates()
	return uu
}

// RemoveSalesRepEstimateIDs removes the "sales_rep_estimates" edge to Estimate entities by IDs.
func (uu *UserUpdate) RemoveSalesRepEstimateIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSalesRepEstimateIDs(ids...)
	return uu
}

// RemoveSalesRepEstimates removes "sales_rep_estimates" edges to Estimate entities.
func (uu *UserUpdate) RemoveSalesRepEstimates(e ...*Estimate) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveSalesRepEstimateIDs(ids...)
}

// ClearSales clears all "sales" edges to the Job entity.
func (uu *UserUpdate) ClearSales() *UserUpdate {
	uu.mutation.ClearSales()
	return uu
}

// RemoveSaleIDs removes the "sales" edge to Job entities by IDs.
func (uu *UserUpdate) RemoveSaleIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSaleIDs(ids...)
	return uu
}

// RemoveSales removes "sales" edges to Job entities.
func (uu *UserUpdate) RemoveSales(j ...*Job) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveSaleIDs(ids...)
}

// ClearCreatedInstallationJobs clears all "created_installation_jobs" edges to the InstallationJob entity.
func (uu *UserUpdate) ClearCreatedInstallationJobs() *UserUpdate {
	uu.mutation.ClearCreatedInstallationJobs()
	return uu
}

// RemoveCreatedInstallationJobIDs removes the "created_installation_jobs" edge to InstallationJob entities by IDs.
func (uu *UserUpdate) RemoveCreatedInstallationJobIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCreatedInstallationJobIDs(ids...)
	return uu
}

// RemoveCreatedInstallationJobs removes "created_installation_jobs" edges to InstallationJob entities.
func (uu *UserUpdate) RemoveCreatedInstallationJobs(i ...*InstallationJob) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveCreatedInstallationJobIDs(ids...)
}

// ClearInstallationLeads clears all "installation_leads" edges to the InstallationJob entity.
func (uu *UserUpdate) ClearInstallationLeads() *UserUpdate {
	uu.mutation.ClearInstallationLeads()
	return uu
}

// RemoveInstallationLeadIDs removes the "installation_leads" edge to InstallationJob entities by IDs.
func (uu *UserUpdate) RemoveInstallationLeadIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveInstallationLeadIDs(ids...)
	return uu
}

// RemoveInstallationLeads removes "installation_leads" edges to InstallationJob entities.
func (uu *UserUpdate) RemoveInstallationLeads(i ...*InstallationJob) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInstallationLeadIDs(ids...)
}

// ClearEstimateActivities clears all "estimate_activities" edges to the EstimateActivity entity.
func (uu *UserUpdate) ClearEstimateActivities() *UserUpdate {
	uu.mutation.ClearEstimateActivities()
	return uu
}

// RemoveEstimateActivityIDs removes the "estimate_activities" edge to EstimateActivity entities by IDs.
func (uu *UserUpdate) RemoveEstimateActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveEstimateActivityIDs(ids...)
	return uu
}

// RemoveEstimateActivities removes "estimate_activities" edges to EstimateActivity entities.
func (uu *UserUpdate) RemoveEstimateActivities(e ...*EstimateActivity) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEstimateActivityIDs(ids...)
}

// ClearJobActivities clears all "job_activities" edges to the JobActivity entity.
func (uu *UserUpdate) ClearJobActivities() *UserUpdate {
	uu.mutation.ClearJobActivities()
	return uu
}

// RemoveJobActivityIDs removes the "job_activities" edge to JobActivity entities by IDs.
func (uu *UserUpdate) RemoveJobActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveJobActivityIDs(ids...)
	return uu
}

// RemoveJobActivities removes "job_activities" edges to JobActivity entities.
func (uu *UserUpdate) RemoveJobActivities(j ...*JobActivity) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveJobActivityIDs(ids...)
}

// ClearPartnerActivities clears all "partner_activities" edges to the PartnerActivity entity.
func (uu *UserUpdate) ClearPartnerActivities() *UserUpdate {
	uu.mutation.ClearPartnerActivities()
	return uu
}

// RemovePartnerActivityIDs removes the "partner_activities" edge to PartnerActivity entities by IDs.
func (uu *UserUpdate) RemovePartnerActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePartnerActivityIDs(ids...)
	return uu
}

// RemovePartnerActivities removes "partner_activities" edges to PartnerActivity entities.
func (uu *UserUpdate) RemovePartnerActivities(p ...*PartnerActivity) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePartnerActivityIDs(ids...)
}

// ClearUserActivities clears all "user_activities" edges to the UserActivity entity.
func (uu *UserUpdate) ClearUserActivities() *UserUpdate {
	uu.mutation.ClearUserActivities()
	return uu
}

// RemoveUserActivityIDs removes the "user_activities" edge to UserActivity entities by IDs.
func (uu *UserUpdate) RemoveUserActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserActivityIDs(ids...)
	return uu
}

// RemoveUserActivities removes "user_activities" edges to UserActivity entities.
func (uu *UserUpdate) RemoveUserActivities(u ...*UserActivity) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserActivityIDs(ids...)
}

// ClearActivities clears all "activities" edges to the UserActivity entity.
func (uu *UserUpdate) ClearActivities() *UserUpdate {
	uu.mutation.ClearActivities()
	return uu
}

// RemoveActivityIDs removes the "activities" edge to UserActivity entities by IDs.
func (uu *UserUpdate) RemoveActivityIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveActivityIDs(ids...)
	return uu
}

// RemoveActivities removes "activities" edges to UserActivity entities.
func (uu *UserUpdate) RemoveActivities(u ...*UserActivity) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveActivityIDs(ids...)
}

// ClearJobProgressHistory clears all "job_progress_history" edges to the JobProgressHistory entity.
func (uu *UserUpdate) ClearJobProgressHistory() *UserUpdate {
	uu.mutation.ClearJobProgressHistory()
	return uu
}

// RemoveJobProgressHistoryIDs removes the "job_progress_history" edge to JobProgressHistory entities by IDs.
func (uu *UserUpdate) RemoveJobProgressHistoryIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveJobProgressHistoryIDs(ids...)
	return uu
}

// RemoveJobProgressHistory removes "job_progress_history" edges to JobProgressHistory entities.
func (uu *UserUpdate) RemoveJobProgressHistory(j ...*JobProgressHistory) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveJobProgressHistoryIDs(ids...)
}

// ClearInstallationJobStatusChanger clears all "installation_job_status_changer" edges to the InstallationJobProgress entity.
func (uu *UserUpdate) ClearInstallationJobStatusChanger() *UserUpdate {
	uu.mutation.ClearInstallationJobStatusChanger()
	return uu
}

// RemoveInstallationJobStatusChangerIDs removes the "installation_job_status_changer" edge to InstallationJobProgress entities by IDs.
func (uu *UserUpdate) RemoveInstallationJobStatusChangerIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveInstallationJobStatusChangerIDs(ids...)
	return uu
}

// RemoveInstallationJobStatusChanger removes "installation_job_status_changer" edges to InstallationJobProgress entities.
func (uu *UserUpdate) RemoveInstallationJobStatusChanger(i ...*InstallationJobProgress) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInstallationJobStatusChangerIDs(ids...)
}

// ClearContactUsRequests clears all "contact_us_requests" edges to the ContactUs entity.
func (uu *UserUpdate) ClearContactUsRequests() *UserUpdate {
	uu.mutation.ClearContactUsRequests()
	return uu
}

// RemoveContactUsRequestIDs removes the "contact_us_requests" edge to ContactUs entities by IDs.
func (uu *UserUpdate) RemoveContactUsRequestIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveContactUsRequestIDs(ids...)
	return uu
}

// RemoveContactUsRequests removes "contact_us_requests" edges to ContactUs entities.
func (uu *UserUpdate) RemoveContactUsRequests(c ...*ContactUs) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveContactUsRequestIDs(ids...)
}

// ClearPartner clears all "partner" edges to the Partner entity.
func (uu *UserUpdate) ClearPartner() *UserUpdate {
	uu.mutation.ClearPartner()
	return uu
}

// RemovePartnerIDs removes the "partner" edge to Partner entities by IDs.
func (uu *UserUpdate) RemovePartnerIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePartnerIDs(ids...)
	return uu
}

// RemovePartner removes "partner" edges to Partner entities.
func (uu *UserUpdate) RemovePartner(p ...*Partner) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePartnerIDs(ids...)
}

// ClearSurveys clears all "surveys" edges to the Survey entity.
func (uu *UserUpdate) ClearSurveys() *UserUpdate {
	uu.mutation.ClearSurveys()
	return uu
}

// RemoveSurveyIDs removes the "surveys" edge to Survey entities by IDs.
func (uu *UserUpdate) RemoveSurveyIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSurveyIDs(ids...)
	return uu
}

// RemoveSurveys removes "surveys" edges to Survey entities.
func (uu *UserUpdate) RemoveSurveys(s ...*Survey) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSurveyIDs(ids...)
}

// ClearSurveyProgress clears all "survey_progress" edges to the SurveyProgress entity.
func (uu *UserUpdate) ClearSurveyProgress() *UserUpdate {
	uu.mutation.ClearSurveyProgress()
	return uu
}

// RemoveSurveyProgresIDs removes the "survey_progress" edge to SurveyProgress entities by IDs.
func (uu *UserUpdate) RemoveSurveyProgresIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSurveyProgresIDs(ids...)
	return uu
}

// RemoveSurveyProgress removes "survey_progress" edges to SurveyProgress entities.
func (uu *UserUpdate) RemoveSurveyProgress(s ...*SurveyProgress) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSurveyProgresIDs(ids...)
}

// ClearCreatedTrainingVideos clears all "created_training_videos" edges to the TrainingVideo entity.
func (uu *UserUpdate) ClearCreatedTrainingVideos() *UserUpdate {
	uu.mutation.ClearCreatedTrainingVideos()
	return uu
}

// RemoveCreatedTrainingVideoIDs removes the "created_training_videos" edge to TrainingVideo entities by IDs.
func (uu *UserUpdate) RemoveCreatedTrainingVideoIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCreatedTrainingVideoIDs(ids...)
	return uu
}

// RemoveCreatedTrainingVideos removes "created_training_videos" edges to TrainingVideo entities.
func (uu *UserUpdate) RemoveCreatedTrainingVideos(t ...*TrainingVideo) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveCreatedTrainingVideoIDs(ids...)
}

// ClearCreatedTrainingCourses clears all "created_training_courses" edges to the TrainingCourse entity.
func (uu *UserUpdate) ClearCreatedTrainingCourses() *UserUpdate {
	uu.mutation.ClearCreatedTrainingCourses()
	return uu
}

// RemoveCreatedTrainingCourseIDs removes the "created_training_courses" edge to TrainingCourse entities by IDs.
func (uu *UserUpdate) RemoveCreatedTrainingCourseIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCreatedTrainingCourseIDs(ids...)
	return uu
}

// RemoveCreatedTrainingCourses removes "created_training_courses" edges to TrainingCourse entities.
func (uu *UserUpdate) RemoveCreatedTrainingCourses(t ...*TrainingCourse) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveCreatedTrainingCourseIDs(ids...)
}

// ClearJobNotes clears all "job_notes" edges to the JobNote entity.
func (uu *UserUpdate) ClearJobNotes() *UserUpdate {
	uu.mutation.ClearJobNotes()
	return uu
}

// RemoveJobNoteIDs removes the "job_notes" edge to JobNote entities by IDs.
func (uu *UserUpdate) RemoveJobNoteIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveJobNoteIDs(ids...)
	return uu
}

// RemoveJobNotes removes "job_notes" edges to JobNote entities.
func (uu *UserUpdate) RemoveJobNotes(j ...*JobNote) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveJobNoteIDs(ids...)
}

// ClearChatChannels clears all "chat_channels" edges to the ChannelSub entity.
func (uu *UserUpdate) ClearChatChannels() *UserUpdate {
	uu.mutation.ClearChatChannels()
	return uu
}

// RemoveChatChannelIDs removes the "chat_channels" edge to ChannelSub entities by IDs.
func (uu *UserUpdate) RemoveChatChannelIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveChatChannelIDs(ids...)
	return uu
}

// RemoveChatChannels removes "chat_channels" edges to ChannelSub entities.
func (uu *UserUpdate) RemoveChatChannels(c ...*ChannelSub) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveChatChannelIDs(ids...)
}

// ClearSentMessages clears all "sent_messages" edges to the ChannelMessage entity.
func (uu *UserUpdate) ClearSentMessages() *UserUpdate {
	uu.mutation.ClearSentMessages()
	return uu
}

// RemoveSentMessageIDs removes the "sent_messages" edge to ChannelMessage entities by IDs.
func (uu *UserUpdate) RemoveSentMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSentMessageIDs(ids...)
	return uu
}

// RemoveSentMessages removes "sent_messages" edges to ChannelMessage entities.
func (uu *UserUpdate) RemoveSentMessages(c ...*ChannelMessage) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveSentMessageIDs(ids...)
}

// ClearReceivedMessages clears all "received_messages" edges to the ChannelMessage entity.
func (uu *UserUpdate) ClearReceivedMessages() *UserUpdate {
	uu.mutation.ClearReceivedMessages()
	return uu
}

// RemoveReceivedMessageIDs removes the "received_messages" edge to ChannelMessage entities by IDs.
func (uu *UserUpdate) RemoveReceivedMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveReceivedMessageIDs(ids...)
	return uu
}

// RemoveReceivedMessages removes "received_messages" edges to ChannelMessage entities.
func (uu *UserUpdate) RemoveReceivedMessages(c ...*ChannelMessage) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveReceivedMessageIDs(ids...)
}

// ClearChannelMessageRead clears all "channel_message_read" edges to the ChannelMessageRead entity.
func (uu *UserUpdate) ClearChannelMessageRead() *UserUpdate {
	uu.mutation.ClearChannelMessageRead()
	return uu
}

// RemoveChannelMessageReadIDs removes the "channel_message_read" edge to ChannelMessageRead entities by IDs.
func (uu *UserUpdate) RemoveChannelMessageReadIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveChannelMessageReadIDs(ids...)
	return uu
}

// RemoveChannelMessageRead removes "channel_message_read" edges to ChannelMessageRead entities.
func (uu *UserUpdate) RemoveChannelMessageRead(c ...*ChannelMessageRead) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveChannelMessageReadIDs(ids...)
}

// ClearProductsCreated clears all "products_created" edges to the Product entity.
func (uu *UserUpdate) ClearProductsCreated() *UserUpdate {
	uu.mutation.ClearProductsCreated()
	return uu
}

// RemoveProductsCreatedIDs removes the "products_created" edge to Product entities by IDs.
func (uu *UserUpdate) RemoveProductsCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveProductsCreatedIDs(ids...)
	return uu
}

// RemoveProductsCreated removes "products_created" edges to Product entities.
func (uu *UserUpdate) RemoveProductsCreated(p ...*Product) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveProductsCreatedIDs(ids...)
}

// ClearProductPkgCreated clears all "product_pkg_created" edges to the ProductPackage entity.
func (uu *UserUpdate) ClearProductPkgCreated() *UserUpdate {
	uu.mutation.ClearProductPkgCreated()
	return uu
}

// RemoveProductPkgCreatedIDs removes the "product_pkg_created" edge to ProductPackage entities by IDs.
func (uu *UserUpdate) RemoveProductPkgCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveProductPkgCreatedIDs(ids...)
	return uu
}

// RemoveProductPkgCreated removes "product_pkg_created" edges to ProductPackage entities.
func (uu *UserUpdate) RemoveProductPkgCreated(p ...*ProductPackage) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveProductPkgCreatedIDs(ids...)
}

// ClearJobDocUrls clears all "job_doc_urls" edges to the JobDocURL entity.
func (uu *UserUpdate) ClearJobDocUrls() *UserUpdate {
	uu.mutation.ClearJobDocUrls()
	return uu
}

// RemoveJobDocURLIDs removes the "job_doc_urls" edge to JobDocURL entities by IDs.
func (uu *UserUpdate) RemoveJobDocURLIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveJobDocURLIDs(ids...)
	return uu
}

// RemoveJobDocUrls removes "job_doc_urls" edges to JobDocURL entities.
func (uu *UserUpdate) RemoveJobDocUrls(j ...*JobDocURL) *UserUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveJobDocURLIDs(ids...)
}

// ClearPartnerContacts clears all "partner_contacts" edges to the PartnerContact entity.
func (uu *UserUpdate) ClearPartnerContacts() *UserUpdate {
	uu.mutation.ClearPartnerContacts()
	return uu
}

// RemovePartnerContactIDs removes the "partner_contacts" edge to PartnerContact entities by IDs.
func (uu *UserUpdate) RemovePartnerContactIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePartnerContactIDs(ids...)
	return uu
}

// RemovePartnerContacts removes "partner_contacts" edges to PartnerContact entities.
func (uu *UserUpdate) RemovePartnerContacts(p ...*PartnerContact) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePartnerContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.ExternalID(); ok {
		if err := user.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "User.external_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Pwd(); ok {
		if err := user.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "User.pwd": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Picture(); ok {
		if err := user.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "User.picture": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Note(); ok {
		if err := user.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "User.note": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
	}
	if uu.mutation.ExternalIDCleared() {
		_spec.ClearField(user.FieldExternalID, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.Pwd(); ok {
		_spec.SetField(user.FieldPwd, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uu.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uu.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uu.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Note(); ok {
		_spec.SetField(user.FieldNote, field.TypeString, value)
	}
	if uu.mutation.NoteCleared() {
		_spec.ClearField(user.FieldNote, field.TypeString)
	}
	if value, ok := uu.mutation.WrongAttempts(); ok {
		_spec.SetField(user.FieldWrongAttempts, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.AddedWrongAttempts(); ok {
		_spec.AddField(user.FieldWrongAttempts, field.TypeUint8, value)
	}
	if uu.mutation.WrongAttemptsCleared() {
		_spec.ClearField(user.FieldWrongAttempts, field.TypeUint8)
	}
	if value, ok := uu.mutation.WrongAttemptAt(); ok {
		_spec.SetField(user.FieldWrongAttemptAt, field.TypeTime, value)
	}
	if uu.mutation.WrongAttemptAtCleared() {
		_spec.ClearField(user.FieldWrongAttemptAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
	}
	if uu.mutation.LockedUntilCleared() {
		_spec.ClearField(user.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := uu.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
	}
	if uu.mutation.LocationCleared() {
		_spec.ClearField(user.FieldLocation, field.TypeString)
	}
	if value, ok := uu.mutation.AcceptedGeneralTerms(); ok {
		_spec.SetField(user.FieldAcceptedGeneralTerms, field.TypeBool, value)
	}
	if uu.mutation.AcceptedGeneralTermsCleared() {
		_spec.ClearField(user.FieldAcceptedGeneralTerms, field.TypeBool)
	}
	if value, ok := uu.mutation.AcceptedTermsNPrivacy(); ok {
		_spec.SetField(user.FieldAcceptedTermsNPrivacy, field.TypeBool, value)
	}
	if uu.mutation.AcceptedTermsNPrivacyCleared() {
		_spec.ClearField(user.FieldAcceptedTermsNPrivacy, field.TypeBool)
	}
	if uu.mutation.AuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !uu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotifyIDs(); len(nodes) > 0 && !uu.mutation.NotifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedJobsIDs(); len(nodes) > 0 && !uu.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedEstimatesIDs(); len(nodes) > 0 && !uu.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SalesRepEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSalesRepEstimatesIDs(); len(nodes) > 0 && !uu.mutation.SalesRepEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SalesRepEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSalesIDs(); len(nodes) > 0 && !uu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedInstallationJobsIDs(); len(nodes) > 0 && !uu.mutation.CreatedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InstallationLeadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInstallationLeadsIDs(); len(nodes) > 0 && !uu.mutation.InstallationLeadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InstallationLeadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEstimateActivitiesIDs(); len(nodes) > 0 && !uu.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EstimateActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJobActivitiesIDs(); len(nodes) > 0 && !uu.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JobActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPartnerActivitiesIDs(); len(nodes) > 0 && !uu.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PartnerActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserActivitiesIDs(); len(nodes) > 0 && !uu.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !uu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJobProgressHistoryIDs(); len(nodes) > 0 && !uu.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JobProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InstallationJobStatusChangerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInstallationJobStatusChangerIDs(); len(nodes) > 0 && !uu.mutation.InstallationJobStatusChangerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InstallationJobStatusChangerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedContactUsRequestsIDs(); len(nodes) > 0 && !uu.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContactUsRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		createE := &PartnerContactCreate{config: uu.config, mutation: newPartnerContactMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPartnerIDs(); len(nodes) > 0 && !uu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: uu.config, mutation: newPartnerContactMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: uu.config, mutation: newPartnerContactMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSurveysIDs(); len(nodes) > 0 && !uu.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSurveyProgressIDs(); len(nodes) > 0 && !uu.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SurveyProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedTrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedTrainingVideosIDs(); len(nodes) > 0 && !uu.mutation.CreatedTrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedTrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedTrainingCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedTrainingCoursesIDs(); len(nodes) > 0 && !uu.mutation.CreatedTrainingCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedTrainingCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJobNotesIDs(); len(nodes) > 0 && !uu.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JobNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ChatChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedChatChannelsIDs(); len(nodes) > 0 && !uu.mutation.ChatChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ChatChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SentMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSentMessagesIDs(); len(nodes) > 0 && !uu.mutation.SentMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SentMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReceivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReceivedMessagesIDs(); len(nodes) > 0 && !uu.mutation.ReceivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReceivedMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ChannelMessageReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedChannelMessageReadIDs(); len(nodes) > 0 && !uu.mutation.ChannelMessageReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ChannelMessageReadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ProductsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedProductsCreatedIDs(); len(nodes) > 0 && !uu.mutation.ProductsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProductsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ProductPkgCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedProductPkgCreatedIDs(); len(nodes) > 0 && !uu.mutation.ProductPkgCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProductPkgCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JobDocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJobDocUrlsIDs(); len(nodes) > 0 && !uu.mutation.JobDocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JobDocUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPartnerContactsIDs(); len(nodes) > 0 && !uu.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PartnerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetExternalID sets the "external_id" field.
func (uuo *UserUpdateOne) SetExternalID(s string) *UserUpdateOne {
	uuo.mutation.SetExternalID(s)
	return uuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExternalID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetExternalID(*s)
	}
	return uuo
}

// ClearExternalID clears the value of the "external_id" field.
func (uuo *UserUpdateOne) ClearExternalID() *UserUpdateOne {
	uuo.mutation.ClearExternalID()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetPwd sets the "pwd" field.
func (uuo *UserUpdateOne) SetPwd(s string) *UserUpdateOne {
	uuo.mutation.SetPwd(s)
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// ClearFirstName clears the value of the "first_name" field.
func (uuo *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	uuo.mutation.ClearFirstName()
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// ClearLastName clears the value of the "last_name" field.
func (uuo *UserUpdateOne) ClearLastName() *UserUpdateOne {
	uuo.mutation.ClearLastName()
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetPhoneVerified sets the "phone_verified" field.
func (uuo *UserUpdateOne) SetPhoneVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetPhoneVerified(b)
	return uuo
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPhoneVerified(*b)
	}
	return uuo
}

// SetPicture sets the "picture" field.
func (uuo *UserUpdateOne) SetPicture(s string) *UserUpdateOne {
	uuo.mutation.SetPicture(s)
	return uuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePicture(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPicture(*s)
	}
	return uuo
}

// ClearPicture clears the value of the "picture" field.
func (uuo *UserUpdateOne) ClearPicture() *UserUpdateOne {
	uuo.mutation.ClearPicture()
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(es enum.AccountStatus) *UserUpdateOne {
	uuo.mutation.SetStatus(es)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(es *enum.AccountStatus) *UserUpdateOne {
	if es != nil {
		uuo.SetStatus(*es)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(e enum.Role) *UserUpdateOne {
	uuo.mutation.SetRole(e)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(e *enum.Role) *UserUpdateOne {
	if e != nil {
		uuo.SetRole(*e)
	}
	return uuo
}

// SetNote sets the "note" field.
func (uuo *UserUpdateOne) SetNote(s string) *UserUpdateOne {
	uuo.mutation.SetNote(s)
	return uuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNote(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNote(*s)
	}
	return uuo
}

// ClearNote clears the value of the "note" field.
func (uuo *UserUpdateOne) ClearNote() *UserUpdateOne {
	uuo.mutation.ClearNote()
	return uuo
}

// SetWrongAttempts sets the "wrong_attempts" field.
func (uuo *UserUpdateOne) SetWrongAttempts(u uint8) *UserUpdateOne {
	uuo.mutation.ResetWrongAttempts()
	uuo.mutation.SetWrongAttempts(u)
	return uuo
}

// SetNillableWrongAttempts sets the "wrong_attempts" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWrongAttempts(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetWrongAttempts(*u)
	}
	return uuo
}

// AddWrongAttempts adds u to the "wrong_attempts" field.
func (uuo *UserUpdateOne) AddWrongAttempts(u int8) *UserUpdateOne {
	uuo.mutation.AddWrongAttempts(u)
	return uuo
}

// ClearWrongAttempts clears the value of the "wrong_attempts" field.
func (uuo *UserUpdateOne) ClearWrongAttempts() *UserUpdateOne {
	uuo.mutation.ClearWrongAttempts()
	return uuo
}

// SetWrongAttemptAt sets the "wrong_attempt_at" field.
func (uuo *UserUpdateOne) SetWrongAttemptAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetWrongAttemptAt(t)
	return uuo
}

// SetNillableWrongAttemptAt sets the "wrong_attempt_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWrongAttemptAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetWrongAttemptAt(*t)
	}
	return uuo
}

// ClearWrongAttemptAt clears the value of the "wrong_attempt_at" field.
func (uuo *UserUpdateOne) ClearWrongAttemptAt() *UserUpdateOne {
	uuo.mutation.ClearWrongAttemptAt()
	return uuo
}

// SetLockedUntil sets the "locked_until" field.
func (uuo *UserUpdateOne) SetLockedUntil(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLockedUntil(t)
	return uuo
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockedUntil(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLockedUntil(*t)
	}
	return uuo
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (uuo *UserUpdateOne) ClearLockedUntil() *UserUpdateOne {
	uuo.mutation.ClearLockedUntil()
	return uuo
}

// SetLocation sets the "location" field.
func (uuo *UserUpdateOne) SetLocation(s string) *UserUpdateOne {
	uuo.mutation.SetLocation(s)
	return uuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocation(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocation(*s)
	}
	return uuo
}

// ClearLocation clears the value of the "location" field.
func (uuo *UserUpdateOne) ClearLocation() *UserUpdateOne {
	uuo.mutation.ClearLocation()
	return uuo
}

// SetAcceptedGeneralTerms sets the "accepted_general_terms" field.
func (uuo *UserUpdateOne) SetAcceptedGeneralTerms(b bool) *UserUpdateOne {
	uuo.mutation.SetAcceptedGeneralTerms(b)
	return uuo
}

// SetNillableAcceptedGeneralTerms sets the "accepted_general_terms" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAcceptedGeneralTerms(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAcceptedGeneralTerms(*b)
	}
	return uuo
}

// ClearAcceptedGeneralTerms clears the value of the "accepted_general_terms" field.
func (uuo *UserUpdateOne) ClearAcceptedGeneralTerms() *UserUpdateOne {
	uuo.mutation.ClearAcceptedGeneralTerms()
	return uuo
}

// SetAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field.
func (uuo *UserUpdateOne) SetAcceptedTermsNPrivacy(b bool) *UserUpdateOne {
	uuo.mutation.SetAcceptedTermsNPrivacy(b)
	return uuo
}

// SetNillableAcceptedTermsNPrivacy sets the "accepted_terms_n_privacy" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAcceptedTermsNPrivacy(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAcceptedTermsNPrivacy(*b)
	}
	return uuo
}

// ClearAcceptedTermsNPrivacy clears the value of the "accepted_terms_n_privacy" field.
func (uuo *UserUpdateOne) ClearAcceptedTermsNPrivacy() *UserUpdateOne {
	uuo.mutation.ClearAcceptedTermsNPrivacy()
	return uuo
}

// SetAuthsID sets the "auths" edge to the UserAuth entity by ID.
func (uuo *UserUpdateOne) SetAuthsID(id string) *UserUpdateOne {
	uuo.mutation.SetAuthsID(id)
	return uuo
}

// SetNillableAuthsID sets the "auths" edge to the UserAuth entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAuthsID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAuthsID(*id)
	}
	return uuo
}

// SetAuths sets the "auths" edge to the UserAuth entity.
func (uuo *UserUpdateOne) SetAuths(u *UserAuth) *UserUpdateOne {
	return uuo.SetAuthsID(u.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (uuo *UserUpdateOne) AddSessions(u ...*UserSession) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (uuo *UserUpdateOne) AddAuditLogIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddAuditLogIDs(ids...)
	return uuo
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (uuo *UserUpdateOne) AddAuditLogs(a ...*AuditLog) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAuditLogIDs(ids...)
}

// AddNotifyIDs adds the "notify" edge to the NotifySetting entity by IDs.
func (uuo *UserUpdateOne) AddNotifyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddNotifyIDs(ids...)
	return uuo
}

// AddNotify adds the "notify" edges to the NotifySetting entity.
func (uuo *UserUpdateOne) AddNotify(n ...*NotifySetting) *UserUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotifyIDs(ids...)
}

// AddCreatedJobIDs adds the "created_jobs" edge to the Job entity by IDs.
func (uuo *UserUpdateOne) AddCreatedJobIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCreatedJobIDs(ids...)
	return uuo
}

// AddCreatedJobs adds the "created_jobs" edges to the Job entity.
func (uuo *UserUpdateOne) AddCreatedJobs(j ...*Job) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddCreatedJobIDs(ids...)
}

// AddCreatedEstimateIDs adds the "created_estimates" edge to the Estimate entity by IDs.
func (uuo *UserUpdateOne) AddCreatedEstimateIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCreatedEstimateIDs(ids...)
	return uuo
}

// AddCreatedEstimates adds the "created_estimates" edges to the Estimate entity.
func (uuo *UserUpdateOne) AddCreatedEstimates(e ...*Estimate) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddCreatedEstimateIDs(ids...)
}

// AddSalesRepEstimateIDs adds the "sales_rep_estimates" edge to the Estimate entity by IDs.
func (uuo *UserUpdateOne) AddSalesRepEstimateIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSalesRepEstimateIDs(ids...)
	return uuo
}

// AddSalesRepEstimates adds the "sales_rep_estimates" edges to the Estimate entity.
func (uuo *UserUpdateOne) AddSalesRepEstimates(e ...*Estimate) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddSalesRepEstimateIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the Job entity by IDs.
func (uuo *UserUpdateOne) AddSaleIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSaleIDs(ids...)
	return uuo
}

// AddSales adds the "sales" edges to the Job entity.
func (uuo *UserUpdateOne) AddSales(j ...*Job) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddSaleIDs(ids...)
}

// AddCreatedInstallationJobIDs adds the "created_installation_jobs" edge to the InstallationJob entity by IDs.
func (uuo *UserUpdateOne) AddCreatedInstallationJobIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCreatedInstallationJobIDs(ids...)
	return uuo
}

// AddCreatedInstallationJobs adds the "created_installation_jobs" edges to the InstallationJob entity.
func (uuo *UserUpdateOne) AddCreatedInstallationJobs(i ...*InstallationJob) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddCreatedInstallationJobIDs(ids...)
}

// AddInstallationLeadIDs adds the "installation_leads" edge to the InstallationJob entity by IDs.
func (uuo *UserUpdateOne) AddInstallationLeadIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddInstallationLeadIDs(ids...)
	return uuo
}

// AddInstallationLeads adds the "installation_leads" edges to the InstallationJob entity.
func (uuo *UserUpdateOne) AddInstallationLeads(i ...*InstallationJob) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInstallationLeadIDs(ids...)
}

// AddEstimateActivityIDs adds the "estimate_activities" edge to the EstimateActivity entity by IDs.
func (uuo *UserUpdateOne) AddEstimateActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddEstimateActivityIDs(ids...)
	return uuo
}

// AddEstimateActivities adds the "estimate_activities" edges to the EstimateActivity entity.
func (uuo *UserUpdateOne) AddEstimateActivities(e ...*EstimateActivity) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEstimateActivityIDs(ids...)
}

// AddJobActivityIDs adds the "job_activities" edge to the JobActivity entity by IDs.
func (uuo *UserUpdateOne) AddJobActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddJobActivityIDs(ids...)
	return uuo
}

// AddJobActivities adds the "job_activities" edges to the JobActivity entity.
func (uuo *UserUpdateOne) AddJobActivities(j ...*JobActivity) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddJobActivityIDs(ids...)
}

// AddPartnerActivityIDs adds the "partner_activities" edge to the PartnerActivity entity by IDs.
func (uuo *UserUpdateOne) AddPartnerActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPartnerActivityIDs(ids...)
	return uuo
}

// AddPartnerActivities adds the "partner_activities" edges to the PartnerActivity entity.
func (uuo *UserUpdateOne) AddPartnerActivities(p ...*PartnerActivity) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPartnerActivityIDs(ids...)
}

// AddUserActivityIDs adds the "user_activities" edge to the UserActivity entity by IDs.
func (uuo *UserUpdateOne) AddUserActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserActivityIDs(ids...)
	return uuo
}

// AddUserActivities adds the "user_activities" edges to the UserActivity entity.
func (uuo *UserUpdateOne) AddUserActivities(u ...*UserActivity) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserActivityIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the UserActivity entity by IDs.
func (uuo *UserUpdateOne) AddActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddActivityIDs(ids...)
	return uuo
}

// AddActivities adds the "activities" edges to the UserActivity entity.
func (uuo *UserUpdateOne) AddActivities(u ...*UserActivity) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddActivityIDs(ids...)
}

// AddJobProgressHistoryIDs adds the "job_progress_history" edge to the JobProgressHistory entity by IDs.
func (uuo *UserUpdateOne) AddJobProgressHistoryIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddJobProgressHistoryIDs(ids...)
	return uuo
}

// AddJobProgressHistory adds the "job_progress_history" edges to the JobProgressHistory entity.
func (uuo *UserUpdateOne) AddJobProgressHistory(j ...*JobProgressHistory) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddJobProgressHistoryIDs(ids...)
}

// AddInstallationJobStatusChangerIDs adds the "installation_job_status_changer" edge to the InstallationJobProgress entity by IDs.
func (uuo *UserUpdateOne) AddInstallationJobStatusChangerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddInstallationJobStatusChangerIDs(ids...)
	return uuo
}

// AddInstallationJobStatusChanger adds the "installation_job_status_changer" edges to the InstallationJobProgress entity.
func (uuo *UserUpdateOne) AddInstallationJobStatusChanger(i ...*InstallationJobProgress) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInstallationJobStatusChangerIDs(ids...)
}

// AddContactUsRequestIDs adds the "contact_us_requests" edge to the ContactUs entity by IDs.
func (uuo *UserUpdateOne) AddContactUsRequestIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddContactUsRequestIDs(ids...)
	return uuo
}

// AddContactUsRequests adds the "contact_us_requests" edges to the ContactUs entity.
func (uuo *UserUpdateOne) AddContactUsRequests(c ...*ContactUs) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddContactUsRequestIDs(ids...)
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by IDs.
func (uuo *UserUpdateOne) AddPartnerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPartnerIDs(ids...)
	return uuo
}

// AddPartner adds the "partner" edges to the Partner entity.
func (uuo *UserUpdateOne) AddPartner(p ...*Partner) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPartnerIDs(ids...)
}

// AddSurveyIDs adds the "surveys" edge to the Survey entity by IDs.
func (uuo *UserUpdateOne) AddSurveyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSurveyIDs(ids...)
	return uuo
}

// AddSurveys adds the "surveys" edges to the Survey entity.
func (uuo *UserUpdateOne) AddSurveys(s ...*Survey) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSurveyIDs(ids...)
}

// AddSurveyProgresIDs adds the "survey_progress" edge to the SurveyProgress entity by IDs.
func (uuo *UserUpdateOne) AddSurveyProgresIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSurveyProgresIDs(ids...)
	return uuo
}

// AddSurveyProgress adds the "survey_progress" edges to the SurveyProgress entity.
func (uuo *UserUpdateOne) AddSurveyProgress(s ...*SurveyProgress) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSurveyProgresIDs(ids...)
}

// AddCreatedTrainingVideoIDs adds the "created_training_videos" edge to the TrainingVideo entity by IDs.
func (uuo *UserUpdateOne) AddCreatedTrainingVideoIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCreatedTrainingVideoIDs(ids...)
	return uuo
}

// AddCreatedTrainingVideos adds the "created_training_videos" edges to the TrainingVideo entity.
func (uuo *UserUpdateOne) AddCreatedTrainingVideos(t ...*TrainingVideo) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddCreatedTrainingVideoIDs(ids...)
}

// AddCreatedTrainingCourseIDs adds the "created_training_courses" edge to the TrainingCourse entity by IDs.
func (uuo *UserUpdateOne) AddCreatedTrainingCourseIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCreatedTrainingCourseIDs(ids...)
	return uuo
}

// AddCreatedTrainingCourses adds the "created_training_courses" edges to the TrainingCourse entity.
func (uuo *UserUpdateOne) AddCreatedTrainingCourses(t ...*TrainingCourse) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddCreatedTrainingCourseIDs(ids...)
}

// AddJobNoteIDs adds the "job_notes" edge to the JobNote entity by IDs.
func (uuo *UserUpdateOne) AddJobNoteIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddJobNoteIDs(ids...)
	return uuo
}

// AddJobNotes adds the "job_notes" edges to the JobNote entity.
func (uuo *UserUpdateOne) AddJobNotes(j ...*JobNote) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddJobNoteIDs(ids...)
}

// AddChatChannelIDs adds the "chat_channels" edge to the ChannelSub entity by IDs.
func (uuo *UserUpdateOne) AddChatChannelIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddChatChannelIDs(ids...)
	return uuo
}

// AddChatChannels adds the "chat_channels" edges to the ChannelSub entity.
func (uuo *UserUpdateOne) AddChatChannels(c ...*ChannelSub) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddChatChannelIDs(ids...)
}

// AddSentMessageIDs adds the "sent_messages" edge to the ChannelMessage entity by IDs.
func (uuo *UserUpdateOne) AddSentMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSentMessageIDs(ids...)
	return uuo
}

// AddSentMessages adds the "sent_messages" edges to the ChannelMessage entity.
func (uuo *UserUpdateOne) AddSentMessages(c ...*ChannelMessage) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddSentMessageIDs(ids...)
}

// AddReceivedMessageIDs adds the "received_messages" edge to the ChannelMessage entity by IDs.
func (uuo *UserUpdateOne) AddReceivedMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddReceivedMessageIDs(ids...)
	return uuo
}

// AddReceivedMessages adds the "received_messages" edges to the ChannelMessage entity.
func (uuo *UserUpdateOne) AddReceivedMessages(c ...*ChannelMessage) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddReceivedMessageIDs(ids...)
}

// AddChannelMessageReadIDs adds the "channel_message_read" edge to the ChannelMessageRead entity by IDs.
func (uuo *UserUpdateOne) AddChannelMessageReadIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddChannelMessageReadIDs(ids...)
	return uuo
}

// AddChannelMessageRead adds the "channel_message_read" edges to the ChannelMessageRead entity.
func (uuo *UserUpdateOne) AddChannelMessageRead(c ...*ChannelMessageRead) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddChannelMessageReadIDs(ids...)
}

// AddProductsCreatedIDs adds the "products_created" edge to the Product entity by IDs.
func (uuo *UserUpdateOne) AddProductsCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddProductsCreatedIDs(ids...)
	return uuo
}

// AddProductsCreated adds the "products_created" edges to the Product entity.
func (uuo *UserUpdateOne) AddProductsCreated(p ...*Product) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddProductsCreatedIDs(ids...)
}

// AddProductPkgCreatedIDs adds the "product_pkg_created" edge to the ProductPackage entity by IDs.
func (uuo *UserUpdateOne) AddProductPkgCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddProductPkgCreatedIDs(ids...)
	return uuo
}

// AddProductPkgCreated adds the "product_pkg_created" edges to the ProductPackage entity.
func (uuo *UserUpdateOne) AddProductPkgCreated(p ...*ProductPackage) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddProductPkgCreatedIDs(ids...)
}

// AddJobDocURLIDs adds the "job_doc_urls" edge to the JobDocURL entity by IDs.
func (uuo *UserUpdateOne) AddJobDocURLIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddJobDocURLIDs(ids...)
	return uuo
}

// AddJobDocUrls adds the "job_doc_urls" edges to the JobDocURL entity.
func (uuo *UserUpdateOne) AddJobDocUrls(j ...*JobDocURL) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddJobDocURLIDs(ids...)
}

// AddPartnerContactIDs adds the "partner_contacts" edge to the PartnerContact entity by IDs.
func (uuo *UserUpdateOne) AddPartnerContactIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPartnerContactIDs(ids...)
	return uuo
}

// AddPartnerContacts adds the "partner_contacts" edges to the PartnerContact entity.
func (uuo *UserUpdateOne) AddPartnerContacts(p ...*PartnerContact) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPartnerContactIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearAuths clears the "auths" edge to the UserAuth entity.
func (uuo *UserUpdateOne) ClearAuths() *UserUpdateOne {
	uuo.mutation.ClearAuths()
	return uuo
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (uuo *UserUpdateOne) RemoveSessions(u ...*UserSession) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (uuo *UserUpdateOne) ClearAuditLogs() *UserUpdateOne {
	uuo.mutation.ClearAuditLogs()
	return uuo
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (uuo *UserUpdateOne) RemoveAuditLogIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveAuditLogIDs(ids...)
	return uuo
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (uuo *UserUpdateOne) RemoveAuditLogs(a ...*AuditLog) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAuditLogIDs(ids...)
}

// ClearNotify clears all "notify" edges to the NotifySetting entity.
func (uuo *UserUpdateOne) ClearNotify() *UserUpdateOne {
	uuo.mutation.ClearNotify()
	return uuo
}

// RemoveNotifyIDs removes the "notify" edge to NotifySetting entities by IDs.
func (uuo *UserUpdateOne) RemoveNotifyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveNotifyIDs(ids...)
	return uuo
}

// RemoveNotify removes "notify" edges to NotifySetting entities.
func (uuo *UserUpdateOne) RemoveNotify(n ...*NotifySetting) *UserUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotifyIDs(ids...)
}

// ClearCreatedJobs clears all "created_jobs" edges to the Job entity.
func (uuo *UserUpdateOne) ClearCreatedJobs() *UserUpdateOne {
	uuo.mutation.ClearCreatedJobs()
	return uuo
}

// RemoveCreatedJobIDs removes the "created_jobs" edge to Job entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedJobIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCreatedJobIDs(ids...)
	return uuo
}

// RemoveCreatedJobs removes "created_jobs" edges to Job entities.
func (uuo *UserUpdateOne) RemoveCreatedJobs(j ...*Job) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveCreatedJobIDs(ids...)
}

// ClearCreatedEstimates clears all "created_estimates" edges to the Estimate entity.
func (uuo *UserUpdateOne) ClearCreatedEstimates() *UserUpdateOne {
	uuo.mutation.ClearCreatedEstimates()
	return uuo
}

// RemoveCreatedEstimateIDs removes the "created_estimates" edge to Estimate entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedEstimateIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCreatedEstimateIDs(ids...)
	return uuo
}

// RemoveCreatedEstimates removes "created_estimates" edges to Estimate entities.
func (uuo *UserUpdateOne) RemoveCreatedEstimates(e ...*Estimate) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveCreatedEstimateIDs(ids...)
}

// ClearSalesRepEstimates clears all "sales_rep_estimates" edges to the Estimate entity.
func (uuo *UserUpdateOne) ClearSalesRepEstimates() *UserUpdateOne {
	uuo.mutation.ClearSalesRepEstimates()
	return uuo
}

// RemoveSalesRepEstimateIDs removes the "sales_rep_estimates" edge to Estimate entities by IDs.
func (uuo *UserUpdateOne) RemoveSalesRepEstimateIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSalesRepEstimateIDs(ids...)
	return uuo
}

// RemoveSalesRepEstimates removes "sales_rep_estimates" edges to Estimate entities.
func (uuo *UserUpdateOne) RemoveSalesRepEstimates(e ...*Estimate) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveSalesRepEstimateIDs(ids...)
}

// ClearSales clears all "sales" edges to the Job entity.
func (uuo *UserUpdateOne) ClearSales() *UserUpdateOne {
	uuo.mutation.ClearSales()
	return uuo
}

// RemoveSaleIDs removes the "sales" edge to Job entities by IDs.
func (uuo *UserUpdateOne) RemoveSaleIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSaleIDs(ids...)
	return uuo
}

// RemoveSales removes "sales" edges to Job entities.
func (uuo *UserUpdateOne) RemoveSales(j ...*Job) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveSaleIDs(ids...)
}

// ClearCreatedInstallationJobs clears all "created_installation_jobs" edges to the InstallationJob entity.
func (uuo *UserUpdateOne) ClearCreatedInstallationJobs() *UserUpdateOne {
	uuo.mutation.ClearCreatedInstallationJobs()
	return uuo
}

// RemoveCreatedInstallationJobIDs removes the "created_installation_jobs" edge to InstallationJob entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedInstallationJobIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCreatedInstallationJobIDs(ids...)
	return uuo
}

// RemoveCreatedInstallationJobs removes "created_installation_jobs" edges to InstallationJob entities.
func (uuo *UserUpdateOne) RemoveCreatedInstallationJobs(i ...*InstallationJob) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveCreatedInstallationJobIDs(ids...)
}

// ClearInstallationLeads clears all "installation_leads" edges to the InstallationJob entity.
func (uuo *UserUpdateOne) ClearInstallationLeads() *UserUpdateOne {
	uuo.mutation.ClearInstallationLeads()
	return uuo
}

// RemoveInstallationLeadIDs removes the "installation_leads" edge to InstallationJob entities by IDs.
func (uuo *UserUpdateOne) RemoveInstallationLeadIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveInstallationLeadIDs(ids...)
	return uuo
}

// RemoveInstallationLeads removes "installation_leads" edges to InstallationJob entities.
func (uuo *UserUpdateOne) RemoveInstallationLeads(i ...*InstallationJob) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInstallationLeadIDs(ids...)
}

// ClearEstimateActivities clears all "estimate_activities" edges to the EstimateActivity entity.
func (uuo *UserUpdateOne) ClearEstimateActivities() *UserUpdateOne {
	uuo.mutation.ClearEstimateActivities()
	return uuo
}

// RemoveEstimateActivityIDs removes the "estimate_activities" edge to EstimateActivity entities by IDs.
func (uuo *UserUpdateOne) RemoveEstimateActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveEstimateActivityIDs(ids...)
	return uuo
}

// RemoveEstimateActivities removes "estimate_activities" edges to EstimateActivity entities.
func (uuo *UserUpdateOne) RemoveEstimateActivities(e ...*EstimateActivity) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEstimateActivityIDs(ids...)
}

// ClearJobActivities clears all "job_activities" edges to the JobActivity entity.
func (uuo *UserUpdateOne) ClearJobActivities() *UserUpdateOne {
	uuo.mutation.ClearJobActivities()
	return uuo
}

// RemoveJobActivityIDs removes the "job_activities" edge to JobActivity entities by IDs.
func (uuo *UserUpdateOne) RemoveJobActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveJobActivityIDs(ids...)
	return uuo
}

// RemoveJobActivities removes "job_activities" edges to JobActivity entities.
func (uuo *UserUpdateOne) RemoveJobActivities(j ...*JobActivity) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveJobActivityIDs(ids...)
}

// ClearPartnerActivities clears all "partner_activities" edges to the PartnerActivity entity.
func (uuo *UserUpdateOne) ClearPartnerActivities() *UserUpdateOne {
	uuo.mutation.ClearPartnerActivities()
	return uuo
}

// RemovePartnerActivityIDs removes the "partner_activities" edge to PartnerActivity entities by IDs.
func (uuo *UserUpdateOne) RemovePartnerActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePartnerActivityIDs(ids...)
	return uuo
}

// RemovePartnerActivities removes "partner_activities" edges to PartnerActivity entities.
func (uuo *UserUpdateOne) RemovePartnerActivities(p ...*PartnerActivity) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePartnerActivityIDs(ids...)
}

// ClearUserActivities clears all "user_activities" edges to the UserActivity entity.
func (uuo *UserUpdateOne) ClearUserActivities() *UserUpdateOne {
	uuo.mutation.ClearUserActivities()
	return uuo
}

// RemoveUserActivityIDs removes the "user_activities" edge to UserActivity entities by IDs.
func (uuo *UserUpdateOne) RemoveUserActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserActivityIDs(ids...)
	return uuo
}

// RemoveUserActivities removes "user_activities" edges to UserActivity entities.
func (uuo *UserUpdateOne) RemoveUserActivities(u ...*UserActivity) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserActivityIDs(ids...)
}

// ClearActivities clears all "activities" edges to the UserActivity entity.
func (uuo *UserUpdateOne) ClearActivities() *UserUpdateOne {
	uuo.mutation.ClearActivities()
	return uuo
}

// RemoveActivityIDs removes the "activities" edge to UserActivity entities by IDs.
func (uuo *UserUpdateOne) RemoveActivityIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveActivityIDs(ids...)
	return uuo
}

// RemoveActivities removes "activities" edges to UserActivity entities.
func (uuo *UserUpdateOne) RemoveActivities(u ...*UserActivity) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveActivityIDs(ids...)
}

// ClearJobProgressHistory clears all "job_progress_history" edges to the JobProgressHistory entity.
func (uuo *UserUpdateOne) ClearJobProgressHistory() *UserUpdateOne {
	uuo.mutation.ClearJobProgressHistory()
	return uuo
}

// RemoveJobProgressHistoryIDs removes the "job_progress_history" edge to JobProgressHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveJobProgressHistoryIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveJobProgressHistoryIDs(ids...)
	return uuo
}

// RemoveJobProgressHistory removes "job_progress_history" edges to JobProgressHistory entities.
func (uuo *UserUpdateOne) RemoveJobProgressHistory(j ...*JobProgressHistory) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveJobProgressHistoryIDs(ids...)
}

// ClearInstallationJobStatusChanger clears all "installation_job_status_changer" edges to the InstallationJobProgress entity.
func (uuo *UserUpdateOne) ClearInstallationJobStatusChanger() *UserUpdateOne {
	uuo.mutation.ClearInstallationJobStatusChanger()
	return uuo
}

// RemoveInstallationJobStatusChangerIDs removes the "installation_job_status_changer" edge to InstallationJobProgress entities by IDs.
func (uuo *UserUpdateOne) RemoveInstallationJobStatusChangerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveInstallationJobStatusChangerIDs(ids...)
	return uuo
}

// RemoveInstallationJobStatusChanger removes "installation_job_status_changer" edges to InstallationJobProgress entities.
func (uuo *UserUpdateOne) RemoveInstallationJobStatusChanger(i ...*InstallationJobProgress) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInstallationJobStatusChangerIDs(ids...)
}

// ClearContactUsRequests clears all "contact_us_requests" edges to the ContactUs entity.
func (uuo *UserUpdateOne) ClearContactUsRequests() *UserUpdateOne {
	uuo.mutation.ClearContactUsRequests()
	return uuo
}

// RemoveContactUsRequestIDs removes the "contact_us_requests" edge to ContactUs entities by IDs.
func (uuo *UserUpdateOne) RemoveContactUsRequestIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveContactUsRequestIDs(ids...)
	return uuo
}

// RemoveContactUsRequests removes "contact_us_requests" edges to ContactUs entities.
func (uuo *UserUpdateOne) RemoveContactUsRequests(c ...*ContactUs) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveContactUsRequestIDs(ids...)
}

// ClearPartner clears all "partner" edges to the Partner entity.
func (uuo *UserUpdateOne) ClearPartner() *UserUpdateOne {
	uuo.mutation.ClearPartner()
	return uuo
}

// RemovePartnerIDs removes the "partner" edge to Partner entities by IDs.
func (uuo *UserUpdateOne) RemovePartnerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePartnerIDs(ids...)
	return uuo
}

// RemovePartner removes "partner" edges to Partner entities.
func (uuo *UserUpdateOne) RemovePartner(p ...*Partner) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePartnerIDs(ids...)
}

// ClearSurveys clears all "surveys" edges to the Survey entity.
func (uuo *UserUpdateOne) ClearSurveys() *UserUpdateOne {
	uuo.mutation.ClearSurveys()
	return uuo
}

// RemoveSurveyIDs removes the "surveys" edge to Survey entities by IDs.
func (uuo *UserUpdateOne) RemoveSurveyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSurveyIDs(ids...)
	return uuo
}

// RemoveSurveys removes "surveys" edges to Survey entities.
func (uuo *UserUpdateOne) RemoveSurveys(s ...*Survey) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSurveyIDs(ids...)
}

// ClearSurveyProgress clears all "survey_progress" edges to the SurveyProgress entity.
func (uuo *UserUpdateOne) ClearSurveyProgress() *UserUpdateOne {
	uuo.mutation.ClearSurveyProgress()
	return uuo
}

// RemoveSurveyProgresIDs removes the "survey_progress" edge to SurveyProgress entities by IDs.
func (uuo *UserUpdateOne) RemoveSurveyProgresIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSurveyProgresIDs(ids...)
	return uuo
}

// RemoveSurveyProgress removes "survey_progress" edges to SurveyProgress entities.
func (uuo *UserUpdateOne) RemoveSurveyProgress(s ...*SurveyProgress) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSurveyProgresIDs(ids...)
}

// ClearCreatedTrainingVideos clears all "created_training_videos" edges to the TrainingVideo entity.
func (uuo *UserUpdateOne) ClearCreatedTrainingVideos() *UserUpdateOne {
	uuo.mutation.ClearCreatedTrainingVideos()
	return uuo
}

// RemoveCreatedTrainingVideoIDs removes the "created_training_videos" edge to TrainingVideo entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedTrainingVideoIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCreatedTrainingVideoIDs(ids...)
	return uuo
}

// RemoveCreatedTrainingVideos removes "created_training_videos" edges to TrainingVideo entities.
func (uuo *UserUpdateOne) RemoveCreatedTrainingVideos(t ...*TrainingVideo) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveCreatedTrainingVideoIDs(ids...)
}

// ClearCreatedTrainingCourses clears all "created_training_courses" edges to the TrainingCourse entity.
func (uuo *UserUpdateOne) ClearCreatedTrainingCourses() *UserUpdateOne {
	uuo.mutation.ClearCreatedTrainingCourses()
	return uuo
}

// RemoveCreatedTrainingCourseIDs removes the "created_training_courses" edge to TrainingCourse entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedTrainingCourseIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCreatedTrainingCourseIDs(ids...)
	return uuo
}

// RemoveCreatedTrainingCourses removes "created_training_courses" edges to TrainingCourse entities.
func (uuo *UserUpdateOne) RemoveCreatedTrainingCourses(t ...*TrainingCourse) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveCreatedTrainingCourseIDs(ids...)
}

// ClearJobNotes clears all "job_notes" edges to the JobNote entity.
func (uuo *UserUpdateOne) ClearJobNotes() *UserUpdateOne {
	uuo.mutation.ClearJobNotes()
	return uuo
}

// RemoveJobNoteIDs removes the "job_notes" edge to JobNote entities by IDs.
func (uuo *UserUpdateOne) RemoveJobNoteIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveJobNoteIDs(ids...)
	return uuo
}

// RemoveJobNotes removes "job_notes" edges to JobNote entities.
func (uuo *UserUpdateOne) RemoveJobNotes(j ...*JobNote) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveJobNoteIDs(ids...)
}

// ClearChatChannels clears all "chat_channels" edges to the ChannelSub entity.
func (uuo *UserUpdateOne) ClearChatChannels() *UserUpdateOne {
	uuo.mutation.ClearChatChannels()
	return uuo
}

// RemoveChatChannelIDs removes the "chat_channels" edge to ChannelSub entities by IDs.
func (uuo *UserUpdateOne) RemoveChatChannelIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveChatChannelIDs(ids...)
	return uuo
}

// RemoveChatChannels removes "chat_channels" edges to ChannelSub entities.
func (uuo *UserUpdateOne) RemoveChatChannels(c ...*ChannelSub) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveChatChannelIDs(ids...)
}

// ClearSentMessages clears all "sent_messages" edges to the ChannelMessage entity.
func (uuo *UserUpdateOne) ClearSentMessages() *UserUpdateOne {
	uuo.mutation.ClearSentMessages()
	return uuo
}

// RemoveSentMessageIDs removes the "sent_messages" edge to ChannelMessage entities by IDs.
func (uuo *UserUpdateOne) RemoveSentMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSentMessageIDs(ids...)
	return uuo
}

// RemoveSentMessages removes "sent_messages" edges to ChannelMessage entities.
func (uuo *UserUpdateOne) RemoveSentMessages(c ...*ChannelMessage) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveSentMessageIDs(ids...)
}

// ClearReceivedMessages clears all "received_messages" edges to the ChannelMessage entity.
func (uuo *UserUpdateOne) ClearReceivedMessages() *UserUpdateOne {
	uuo.mutation.ClearReceivedMessages()
	return uuo
}

// RemoveReceivedMessageIDs removes the "received_messages" edge to ChannelMessage entities by IDs.
func (uuo *UserUpdateOne) RemoveReceivedMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveReceivedMessageIDs(ids...)
	return uuo
}

// RemoveReceivedMessages removes "received_messages" edges to ChannelMessage entities.
func (uuo *UserUpdateOne) RemoveReceivedMessages(c ...*ChannelMessage) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveReceivedMessageIDs(ids...)
}

// ClearChannelMessageRead clears all "channel_message_read" edges to the ChannelMessageRead entity.
func (uuo *UserUpdateOne) ClearChannelMessageRead() *UserUpdateOne {
	uuo.mutation.ClearChannelMessageRead()
	return uuo
}

// RemoveChannelMessageReadIDs removes the "channel_message_read" edge to ChannelMessageRead entities by IDs.
func (uuo *UserUpdateOne) RemoveChannelMessageReadIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveChannelMessageReadIDs(ids...)
	return uuo
}

// RemoveChannelMessageRead removes "channel_message_read" edges to ChannelMessageRead entities.
func (uuo *UserUpdateOne) RemoveChannelMessageRead(c ...*ChannelMessageRead) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveChannelMessageReadIDs(ids...)
}

// ClearProductsCreated clears all "products_created" edges to the Product entity.
func (uuo *UserUpdateOne) ClearProductsCreated() *UserUpdateOne {
	uuo.mutation.ClearProductsCreated()
	return uuo
}

// RemoveProductsCreatedIDs removes the "products_created" edge to Product entities by IDs.
func (uuo *UserUpdateOne) RemoveProductsCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveProductsCreatedIDs(ids...)
	return uuo
}

// RemoveProductsCreated removes "products_created" edges to Product entities.
func (uuo *UserUpdateOne) RemoveProductsCreated(p ...*Product) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveProductsCreatedIDs(ids...)
}

// ClearProductPkgCreated clears all "product_pkg_created" edges to the ProductPackage entity.
func (uuo *UserUpdateOne) ClearProductPkgCreated() *UserUpdateOne {
	uuo.mutation.ClearProductPkgCreated()
	return uuo
}

// RemoveProductPkgCreatedIDs removes the "product_pkg_created" edge to ProductPackage entities by IDs.
func (uuo *UserUpdateOne) RemoveProductPkgCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveProductPkgCreatedIDs(ids...)
	return uuo
}

// RemoveProductPkgCreated removes "product_pkg_created" edges to ProductPackage entities.
func (uuo *UserUpdateOne) RemoveProductPkgCreated(p ...*ProductPackage) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveProductPkgCreatedIDs(ids...)
}

// ClearJobDocUrls clears all "job_doc_urls" edges to the JobDocURL entity.
func (uuo *UserUpdateOne) ClearJobDocUrls() *UserUpdateOne {
	uuo.mutation.ClearJobDocUrls()
	return uuo
}

// RemoveJobDocURLIDs removes the "job_doc_urls" edge to JobDocURL entities by IDs.
func (uuo *UserUpdateOne) RemoveJobDocURLIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveJobDocURLIDs(ids...)
	return uuo
}

// RemoveJobDocUrls removes "job_doc_urls" edges to JobDocURL entities.
func (uuo *UserUpdateOne) RemoveJobDocUrls(j ...*JobDocURL) *UserUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveJobDocURLIDs(ids...)
}

// ClearPartnerContacts clears all "partner_contacts" edges to the PartnerContact entity.
func (uuo *UserUpdateOne) ClearPartnerContacts() *UserUpdateOne {
	uuo.mutation.ClearPartnerContacts()
	return uuo
}

// RemovePartnerContactIDs removes the "partner_contacts" edge to PartnerContact entities by IDs.
func (uuo *UserUpdateOne) RemovePartnerContactIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePartnerContactIDs(ids...)
	return uuo
}

// RemovePartnerContacts removes "partner_contacts" edges to PartnerContact entities.
func (uuo *UserUpdateOne) RemovePartnerContacts(p ...*PartnerContact) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePartnerContactIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.ExternalID(); ok {
		if err := user.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "User.external_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Pwd(); ok {
		if err := user.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "User.pwd": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Picture(); ok {
		if err := user.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "User.picture": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Note(); ok {
		if err := user.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "User.note": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
	}
	if uuo.mutation.ExternalIDCleared() {
		_spec.ClearField(user.FieldExternalID, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.Pwd(); ok {
		_spec.SetField(user.FieldPwd, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uuo.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uuo.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uuo.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Note(); ok {
		_spec.SetField(user.FieldNote, field.TypeString, value)
	}
	if uuo.mutation.NoteCleared() {
		_spec.ClearField(user.FieldNote, field.TypeString)
	}
	if value, ok := uuo.mutation.WrongAttempts(); ok {
		_spec.SetField(user.FieldWrongAttempts, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.AddedWrongAttempts(); ok {
		_spec.AddField(user.FieldWrongAttempts, field.TypeUint8, value)
	}
	if uuo.mutation.WrongAttemptsCleared() {
		_spec.ClearField(user.FieldWrongAttempts, field.TypeUint8)
	}
	if value, ok := uuo.mutation.WrongAttemptAt(); ok {
		_spec.SetField(user.FieldWrongAttemptAt, field.TypeTime, value)
	}
	if uuo.mutation.WrongAttemptAtCleared() {
		_spec.ClearField(user.FieldWrongAttemptAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
	}
	if uuo.mutation.LockedUntilCleared() {
		_spec.ClearField(user.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := uuo.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
	}
	if uuo.mutation.LocationCleared() {
		_spec.ClearField(user.FieldLocation, field.TypeString)
	}
	if value, ok := uuo.mutation.AcceptedGeneralTerms(); ok {
		_spec.SetField(user.FieldAcceptedGeneralTerms, field.TypeBool, value)
	}
	if uuo.mutation.AcceptedGeneralTermsCleared() {
		_spec.ClearField(user.FieldAcceptedGeneralTerms, field.TypeBool)
	}
	if value, ok := uuo.mutation.AcceptedTermsNPrivacy(); ok {
		_spec.SetField(user.FieldAcceptedTermsNPrivacy, field.TypeBool, value)
	}
	if uuo.mutation.AcceptedTermsNPrivacyCleared() {
		_spec.ClearField(user.FieldAcceptedTermsNPrivacy, field.TypeBool)
	}
	if uuo.mutation.AuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !uuo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotifyIDs(); len(nodes) > 0 && !uuo.mutation.NotifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTable,
			Columns: []string{user.NotifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedJobsIDs(); len(nodes) > 0 && !uuo.mutation.CreatedJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedJobsTable,
			Columns: []string{user.CreatedJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedEstimatesIDs(); len(nodes) > 0 && !uuo.mutation.CreatedEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEstimatesTable,
			Columns: []string{user.CreatedEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SalesRepEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSalesRepEstimatesIDs(); len(nodes) > 0 && !uuo.mutation.SalesRepEstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SalesRepEstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesRepEstimatesTable,
			Columns: []string{user.SalesRepEstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSalesIDs(); len(nodes) > 0 && !uuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SalesTable,
			Columns: []string{user.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedInstallationJobsIDs(); len(nodes) > 0 && !uuo.mutation.CreatedInstallationJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedInstallationJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedInstallationJobsTable,
			Columns: []string{user.CreatedInstallationJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InstallationLeadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInstallationLeadsIDs(); len(nodes) > 0 && !uuo.mutation.InstallationLeadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InstallationLeadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationLeadsTable,
			Columns: []string{user.InstallationLeadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEstimateActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.EstimateActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EstimateActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EstimateActivitiesTable,
			Columns: []string{user.EstimateActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJobActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.JobActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JobActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobActivitiesTable,
			Columns: []string{user.JobActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPartnerActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.PartnerActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PartnerActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PartnerActivitiesTable,
			Columns: []string{user.PartnerActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.UserActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserActivitiesTable,
			Columns: []string{user.UserActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJobProgressHistoryIDs(); len(nodes) > 0 && !uuo.mutation.JobProgressHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JobProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobProgressHistoryTable,
			Columns: []string{user.JobProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InstallationJobStatusChangerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInstallationJobStatusChangerIDs(); len(nodes) > 0 && !uuo.mutation.InstallationJobStatusChangerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InstallationJobStatusChangerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InstallationJobStatusChangerTable,
			Columns: []string{user.InstallationJobStatusChangerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedContactUsRequestsIDs(); len(nodes) > 0 && !uuo.mutation.ContactUsRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContactUsRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactUsRequestsTable,
			Columns: []string{user.ContactUsRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		createE := &PartnerContactCreate{config: uuo.config, mutation: newPartnerContactMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPartnerIDs(); len(nodes) > 0 && !uuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: uuo.config, mutation: newPartnerContactMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PartnerTable,
			Columns: user.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PartnerContactCreate{config: uuo.config, mutation: newPartnerContactMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSurveysIDs(); len(nodes) > 0 && !uuo.mutation.SurveysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveysTable,
			Columns: []string{user.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSurveyProgressIDs(); len(nodes) > 0 && !uuo.mutation.SurveyProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SurveyProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyProgressTable,
			Columns: []string{user.SurveyProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedTrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedTrainingVideosIDs(); len(nodes) > 0 && !uuo.mutation.CreatedTrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedTrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingVideosTable,
			Columns: []string{user.CreatedTrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedTrainingCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedTrainingCoursesIDs(); len(nodes) > 0 && !uuo.mutation.CreatedTrainingCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedTrainingCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTrainingCoursesTable,
			Columns: []string{user.CreatedTrainingCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJobNotesIDs(); len(nodes) > 0 && !uuo.mutation.JobNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JobNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobNotesTable,
			Columns: []string{user.JobNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ChatChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedChatChannelsIDs(); len(nodes) > 0 && !uuo.mutation.ChatChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ChatChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChatChannelsTable,
			Columns: []string{user.ChatChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SentMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSentMessagesIDs(); len(nodes) > 0 && !uuo.mutation.SentMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SentMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentMessagesTable,
			Columns: []string{user.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReceivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReceivedMessagesIDs(); len(nodes) > 0 && !uuo.mutation.ReceivedMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReceivedMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedMessagesTable,
			Columns: []string{user.ReceivedMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ChannelMessageReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedChannelMessageReadIDs(); len(nodes) > 0 && !uuo.mutation.ChannelMessageReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ChannelMessageReadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChannelMessageReadTable,
			Columns: []string{user.ChannelMessageReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ProductsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedProductsCreatedIDs(); len(nodes) > 0 && !uuo.mutation.ProductsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProductsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsCreatedTable,
			Columns: []string{user.ProductsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ProductPkgCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedProductPkgCreatedIDs(); len(nodes) > 0 && !uuo.mutation.ProductPkgCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProductPkgCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductPkgCreatedTable,
			Columns: []string{user.ProductPkgCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productpackage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JobDocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJobDocUrlsIDs(); len(nodes) > 0 && !uuo.mutation.JobDocUrlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JobDocUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobDocUrlsTable,
			Columns: []string{user.JobDocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPartnerContactsIDs(); len(nodes) > 0 && !uuo.mutation.PartnerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PartnerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PartnerContactsTable,
			Columns: []string{user.PartnerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

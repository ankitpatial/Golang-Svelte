// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiaccess"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiAccessCreate is the builder for creating a ApiAccess entity.
type ApiAccessCreate struct {
	config
	mutation *ApiAccessMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (aac *ApiAccessCreate) SetCreatedAt(t time.Time) *ApiAccessCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableCreatedAt(t *time.Time) *ApiAccessCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *ApiAccessCreate) SetUpdatedAt(t time.Time) *ApiAccessCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableUpdatedAt(t *time.Time) *ApiAccessCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetURL sets the "url" field.
func (aac *ApiAccessCreate) SetURL(s string) *ApiAccessCreate {
	aac.mutation.SetURL(s)
	return aac
}

// SetUsername sets the "username" field.
func (aac *ApiAccessCreate) SetUsername(s string) *ApiAccessCreate {
	aac.mutation.SetUsername(s)
	return aac
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableUsername(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetUsername(*s)
	}
	return aac
}

// SetPassword sets the "password" field.
func (aac *ApiAccessCreate) SetPassword(s string) *ApiAccessCreate {
	aac.mutation.SetPassword(s)
	return aac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillablePassword(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetPassword(*s)
	}
	return aac
}

// SetKey sets the "key" field.
func (aac *ApiAccessCreate) SetKey(s string) *ApiAccessCreate {
	aac.mutation.SetKey(s)
	return aac
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableKey(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetKey(*s)
	}
	return aac
}

// SetSecret sets the "secret" field.
func (aac *ApiAccessCreate) SetSecret(s string) *ApiAccessCreate {
	aac.mutation.SetSecret(s)
	return aac
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableSecret(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetSecret(*s)
	}
	return aac
}

// SetAccessToken sets the "access_token" field.
func (aac *ApiAccessCreate) SetAccessToken(s string) *ApiAccessCreate {
	aac.mutation.SetAccessToken(s)
	return aac
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableAccessToken(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetAccessToken(*s)
	}
	return aac
}

// SetRefreshToken sets the "refresh_token" field.
func (aac *ApiAccessCreate) SetRefreshToken(s string) *ApiAccessCreate {
	aac.mutation.SetRefreshToken(s)
	return aac
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableRefreshToken(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetRefreshToken(*s)
	}
	return aac
}

// SetExpiresAt sets the "expires_at" field.
func (aac *ApiAccessCreate) SetExpiresAt(t time.Time) *ApiAccessCreate {
	aac.mutation.SetExpiresAt(t)
	return aac
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableExpiresAt(t *time.Time) *ApiAccessCreate {
	if t != nil {
		aac.SetExpiresAt(*t)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *ApiAccessCreate) SetID(s string) *ApiAccessCreate {
	aac.mutation.SetID(s)
	return aac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aac *ApiAccessCreate) SetNillableID(s *string) *ApiAccessCreate {
	if s != nil {
		aac.SetID(*s)
	}
	return aac
}

// Mutation returns the ApiAccessMutation object of the builder.
func (aac *ApiAccessCreate) Mutation() *ApiAccessMutation {
	return aac.mutation
}

// Save creates the ApiAccess in the database.
func (aac *ApiAccessCreate) Save(ctx context.Context) (*ApiAccess, error) {
	aac.defaults()
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *ApiAccessCreate) SaveX(ctx context.Context) *ApiAccess {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *ApiAccessCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *ApiAccessCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *ApiAccessCreate) defaults() {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		v := apiaccess.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		v := apiaccess.DefaultUpdatedAt()
		aac.mutation.SetUpdatedAt(v)
	}
	if _, ok := aac.mutation.Username(); !ok {
		v := apiaccess.DefaultUsername
		aac.mutation.SetUsername(v)
	}
	if _, ok := aac.mutation.Password(); !ok {
		v := apiaccess.DefaultPassword
		aac.mutation.SetPassword(v)
	}
	if _, ok := aac.mutation.Key(); !ok {
		v := apiaccess.DefaultKey
		aac.mutation.SetKey(v)
	}
	if _, ok := aac.mutation.Secret(); !ok {
		v := apiaccess.DefaultSecret
		aac.mutation.SetSecret(v)
	}
	if _, ok := aac.mutation.ID(); !ok {
		v := apiaccess.DefaultID()
		aac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *ApiAccessCreate) check() error {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ApiAccess.created_at"`)}
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ApiAccess.updated_at"`)}
	}
	if _, ok := aac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "ApiAccess.url"`)}
	}
	if _, ok := aac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "ApiAccess.username"`)}
	}
	if _, ok := aac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "ApiAccess.password"`)}
	}
	if _, ok := aac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ApiAccess.key"`)}
	}
	if _, ok := aac.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "ApiAccess.secret"`)}
	}
	if v, ok := aac.mutation.AccessToken(); ok {
		if err := apiaccess.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.access_token": %w`, err)}
		}
	}
	if v, ok := aac.mutation.RefreshToken(); ok {
		if err := apiaccess.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.refresh_token": %w`, err)}
		}
	}
	if v, ok := aac.mutation.ID(); ok {
		if err := apiaccess.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.id": %w`, err)}
		}
	}
	return nil
}

func (aac *ApiAccessCreate) sqlSave(ctx context.Context) (*ApiAccess, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApiAccess.ID type: %T", _spec.ID.Value)
		}
	}
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *ApiAccessCreate) createSpec() (*ApiAccess, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiAccess{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(apiaccess.Table, sqlgraph.NewFieldSpec(apiaccess.FieldID, field.TypeString))
	)
	_spec.OnConflict = aac.conflict
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(apiaccess.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(apiaccess.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aac.mutation.URL(); ok {
		_spec.SetField(apiaccess.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := aac.mutation.Username(); ok {
		_spec.SetField(apiaccess.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := aac.mutation.Password(); ok {
		_spec.SetField(apiaccess.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := aac.mutation.Key(); ok {
		_spec.SetField(apiaccess.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := aac.mutation.Secret(); ok {
		_spec.SetField(apiaccess.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := aac.mutation.AccessToken(); ok {
		_spec.SetField(apiaccess.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := aac.mutation.RefreshToken(); ok {
		_spec.SetField(apiaccess.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := aac.mutation.ExpiresAt(); ok {
		_spec.SetField(apiaccess.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiAccess.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiAccessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aac *ApiAccessCreate) OnConflict(opts ...sql.ConflictOption) *ApiAccessUpsertOne {
	aac.conflict = opts
	return &ApiAccessUpsertOne{
		create: aac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiAccess.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aac *ApiAccessCreate) OnConflictColumns(columns ...string) *ApiAccessUpsertOne {
	aac.conflict = append(aac.conflict, sql.ConflictColumns(columns...))
	return &ApiAccessUpsertOne{
		create: aac,
	}
}

type (
	// ApiAccessUpsertOne is the builder for "upsert"-ing
	//  one ApiAccess node.
	ApiAccessUpsertOne struct {
		create *ApiAccessCreate
	}

	// ApiAccessUpsert is the "OnConflict" setter.
	ApiAccessUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiAccessUpsert) SetUpdatedAt(v time.Time) *ApiAccessUpsert {
	u.Set(apiaccess.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateUpdatedAt() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldUpdatedAt)
	return u
}

// SetURL sets the "url" field.
func (u *ApiAccessUpsert) SetURL(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateURL() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldURL)
	return u
}

// SetUsername sets the "username" field.
func (u *ApiAccessUpsert) SetUsername(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateUsername() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *ApiAccessUpsert) SetPassword(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdatePassword() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldPassword)
	return u
}

// SetKey sets the "key" field.
func (u *ApiAccessUpsert) SetKey(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateKey() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldKey)
	return u
}

// SetSecret sets the "secret" field.
func (u *ApiAccessUpsert) SetSecret(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateSecret() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldSecret)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *ApiAccessUpsert) SetAccessToken(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateAccessToken() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldAccessToken)
	return u
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *ApiAccessUpsert) ClearAccessToken() *ApiAccessUpsert {
	u.SetNull(apiaccess.FieldAccessToken)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *ApiAccessUpsert) SetRefreshToken(v string) *ApiAccessUpsert {
	u.Set(apiaccess.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateRefreshToken() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldRefreshToken)
	return u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *ApiAccessUpsert) ClearRefreshToken() *ApiAccessUpsert {
	u.SetNull(apiaccess.FieldRefreshToken)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *ApiAccessUpsert) SetExpiresAt(v time.Time) *ApiAccessUpsert {
	u.Set(apiaccess.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ApiAccessUpsert) UpdateExpiresAt() *ApiAccessUpsert {
	u.SetExcluded(apiaccess.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ApiAccessUpsert) ClearExpiresAt() *ApiAccessUpsert {
	u.SetNull(apiaccess.FieldExpiresAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApiAccess.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiaccess.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiAccessUpsertOne) UpdateNewValues() *ApiAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apiaccess.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apiaccess.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiAccess.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApiAccessUpsertOne) Ignore() *ApiAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiAccessUpsertOne) DoNothing() *ApiAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiAccessCreate.OnConflict
// documentation for more info.
func (u *ApiAccessUpsertOne) Update(set func(*ApiAccessUpsert)) *ApiAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiAccessUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiAccessUpsertOne) SetUpdatedAt(v time.Time) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateUpdatedAt() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURL sets the "url" field.
func (u *ApiAccessUpsertOne) SetURL(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateURL() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateURL()
	})
}

// SetUsername sets the "username" field.
func (u *ApiAccessUpsertOne) SetUsername(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateUsername() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *ApiAccessUpsertOne) SetPassword(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdatePassword() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdatePassword()
	})
}

// SetKey sets the "key" field.
func (u *ApiAccessUpsertOne) SetKey(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateKey() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateKey()
	})
}

// SetSecret sets the "secret" field.
func (u *ApiAccessUpsertOne) SetSecret(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateSecret() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateSecret()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *ApiAccessUpsertOne) SetAccessToken(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateAccessToken() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateAccessToken()
	})
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *ApiAccessUpsertOne) ClearAccessToken() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.ClearAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *ApiAccessUpsertOne) SetRefreshToken(v string) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateRefreshToken() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateRefreshToken()
	})
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *ApiAccessUpsertOne) ClearRefreshToken() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.ClearRefreshToken()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *ApiAccessUpsertOne) SetExpiresAt(v time.Time) *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ApiAccessUpsertOne) UpdateExpiresAt() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ApiAccessUpsertOne) ClearExpiresAt() *ApiAccessUpsertOne {
	return u.Update(func(s *ApiAccessUpsert) {
		s.ClearExpiresAt()
	})
}

// Exec executes the query.
func (u *ApiAccessUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiAccessCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiAccessUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiAccessUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ApiAccessUpsertOne.ID is not supported by MySQL driver. Use ApiAccessUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiAccessUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApiAccessCreateBulk is the builder for creating many ApiAccess entities in bulk.
type ApiAccessCreateBulk struct {
	config
	builders []*ApiAccessCreate
	conflict []sql.ConflictOption
}

// Save creates the ApiAccess entities in the database.
func (aacb *ApiAccessCreateBulk) Save(ctx context.Context) ([]*ApiAccess, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*ApiAccess, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiAccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *ApiAccessCreateBulk) SaveX(ctx context.Context) []*ApiAccess {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *ApiAccessCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *ApiAccessCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiAccess.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiAccessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aacb *ApiAccessCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiAccessUpsertBulk {
	aacb.conflict = opts
	return &ApiAccessUpsertBulk{
		create: aacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiAccess.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aacb *ApiAccessCreateBulk) OnConflictColumns(columns ...string) *ApiAccessUpsertBulk {
	aacb.conflict = append(aacb.conflict, sql.ConflictColumns(columns...))
	return &ApiAccessUpsertBulk{
		create: aacb,
	}
}

// ApiAccessUpsertBulk is the builder for "upsert"-ing
// a bulk of ApiAccess nodes.
type ApiAccessUpsertBulk struct {
	create *ApiAccessCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApiAccess.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiaccess.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiAccessUpsertBulk) UpdateNewValues() *ApiAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apiaccess.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apiaccess.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiAccess.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApiAccessUpsertBulk) Ignore() *ApiAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiAccessUpsertBulk) DoNothing() *ApiAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiAccessCreateBulk.OnConflict
// documentation for more info.
func (u *ApiAccessUpsertBulk) Update(set func(*ApiAccessUpsert)) *ApiAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiAccessUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiAccessUpsertBulk) SetUpdatedAt(v time.Time) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateUpdatedAt() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURL sets the "url" field.
func (u *ApiAccessUpsertBulk) SetURL(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateURL() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateURL()
	})
}

// SetUsername sets the "username" field.
func (u *ApiAccessUpsertBulk) SetUsername(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateUsername() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *ApiAccessUpsertBulk) SetPassword(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdatePassword() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdatePassword()
	})
}

// SetKey sets the "key" field.
func (u *ApiAccessUpsertBulk) SetKey(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateKey() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateKey()
	})
}

// SetSecret sets the "secret" field.
func (u *ApiAccessUpsertBulk) SetSecret(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateSecret() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateSecret()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *ApiAccessUpsertBulk) SetAccessToken(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateAccessToken() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateAccessToken()
	})
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *ApiAccessUpsertBulk) ClearAccessToken() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.ClearAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *ApiAccessUpsertBulk) SetRefreshToken(v string) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateRefreshToken() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateRefreshToken()
	})
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *ApiAccessUpsertBulk) ClearRefreshToken() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.ClearRefreshToken()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *ApiAccessUpsertBulk) SetExpiresAt(v time.Time) *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ApiAccessUpsertBulk) UpdateExpiresAt() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ApiAccessUpsertBulk) ClearExpiresAt() *ApiAccessUpsertBulk {
	return u.Update(func(s *ApiAccessUpsert) {
		s.ClearExpiresAt()
	})
}

// Exec executes the query.
func (u *ApiAccessUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ApiAccessCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiAccessCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiAccessUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// InstallationJobItemUpdate is the builder for updating InstallationJobItem entities.
type InstallationJobItemUpdate struct {
	config
	hooks     []Hook
	mutation  *InstallationJobItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InstallationJobItemUpdate builder.
func (ijiu *InstallationJobItemUpdate) Where(ps ...predicate.InstallationJobItem) *InstallationJobItemUpdate {
	ijiu.mutation.Where(ps...)
	return ijiu
}

// SetName sets the "name" field.
func (ijiu *InstallationJobItemUpdate) SetName(s string) *InstallationJobItemUpdate {
	ijiu.mutation.SetName(s)
	return ijiu
}

// SetDescription sets the "description" field.
func (ijiu *InstallationJobItemUpdate) SetDescription(s string) *InstallationJobItemUpdate {
	ijiu.mutation.SetDescription(s)
	return ijiu
}

// SetFeatures sets the "features" field.
func (ijiu *InstallationJobItemUpdate) SetFeatures(s []string) *InstallationJobItemUpdate {
	ijiu.mutation.SetFeatures(s)
	return ijiu
}

// AppendFeatures appends s to the "features" field.
func (ijiu *InstallationJobItemUpdate) AppendFeatures(s []string) *InstallationJobItemUpdate {
	ijiu.mutation.AppendFeatures(s)
	return ijiu
}

// SetPrice sets the "price" field.
func (ijiu *InstallationJobItemUpdate) SetPrice(f float64) *InstallationJobItemUpdate {
	ijiu.mutation.ResetPrice()
	ijiu.mutation.SetPrice(f)
	return ijiu
}

// AddPrice adds f to the "price" field.
func (ijiu *InstallationJobItemUpdate) AddPrice(f float64) *InstallationJobItemUpdate {
	ijiu.mutation.AddPrice(f)
	return ijiu
}

// SetImgKey sets the "img_key" field.
func (ijiu *InstallationJobItemUpdate) SetImgKey(s string) *InstallationJobItemUpdate {
	ijiu.mutation.SetImgKey(s)
	return ijiu
}

// SetSpecialNote sets the "special_note" field.
func (ijiu *InstallationJobItemUpdate) SetSpecialNote(s string) *InstallationJobItemUpdate {
	ijiu.mutation.SetSpecialNote(s)
	return ijiu
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (ijiu *InstallationJobItemUpdate) SetNillableSpecialNote(s *string) *InstallationJobItemUpdate {
	if s != nil {
		ijiu.SetSpecialNote(*s)
	}
	return ijiu
}

// ClearSpecialNote clears the value of the "special_note" field.
func (ijiu *InstallationJobItemUpdate) ClearSpecialNote() *InstallationJobItemUpdate {
	ijiu.mutation.ClearSpecialNote()
	return ijiu
}

// SetJobID sets the "job" edge to the InstallationJob entity by ID.
func (ijiu *InstallationJobItemUpdate) SetJobID(id string) *InstallationJobItemUpdate {
	ijiu.mutation.SetJobID(id)
	return ijiu
}

// SetJob sets the "job" edge to the InstallationJob entity.
func (ijiu *InstallationJobItemUpdate) SetJob(i *InstallationJob) *InstallationJobItemUpdate {
	return ijiu.SetJobID(i.ID)
}

// Mutation returns the InstallationJobItemMutation object of the builder.
func (ijiu *InstallationJobItemUpdate) Mutation() *InstallationJobItemMutation {
	return ijiu.mutation
}

// ClearJob clears the "job" edge to the InstallationJob entity.
func (ijiu *InstallationJobItemUpdate) ClearJob() *InstallationJobItemUpdate {
	ijiu.mutation.ClearJob()
	return ijiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ijiu *InstallationJobItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ijiu.sqlSave, ijiu.mutation, ijiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ijiu *InstallationJobItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ijiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ijiu *InstallationJobItemUpdate) Exec(ctx context.Context) error {
	_, err := ijiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijiu *InstallationJobItemUpdate) ExecX(ctx context.Context) {
	if err := ijiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ijiu *InstallationJobItemUpdate) check() error {
	if v, ok := ijiu.mutation.Name(); ok {
		if err := installationjobitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.name": %w`, err)}
		}
	}
	if v, ok := ijiu.mutation.Description(); ok {
		if err := installationjobitem.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.description": %w`, err)}
		}
	}
	if v, ok := ijiu.mutation.SpecialNote(); ok {
		if err := installationjobitem.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.special_note": %w`, err)}
		}
	}
	if _, ok := ijiu.mutation.JobID(); ijiu.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InstallationJobItem.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ijiu *InstallationJobItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstallationJobItemUpdate {
	ijiu.modifiers = append(ijiu.modifiers, modifiers...)
	return ijiu
}

func (ijiu *InstallationJobItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ijiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(installationjobitem.Table, installationjobitem.Columns, sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString))
	if ps := ijiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ijiu.mutation.Name(); ok {
		_spec.SetField(installationjobitem.FieldName, field.TypeString, value)
	}
	if value, ok := ijiu.mutation.Description(); ok {
		_spec.SetField(installationjobitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := ijiu.mutation.Features(); ok {
		_spec.SetField(installationjobitem.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := ijiu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, installationjobitem.FieldFeatures, value)
		})
	}
	if value, ok := ijiu.mutation.Price(); ok {
		_spec.SetField(installationjobitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ijiu.mutation.AddedPrice(); ok {
		_spec.AddField(installationjobitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ijiu.mutation.ImgKey(); ok {
		_spec.SetField(installationjobitem.FieldImgKey, field.TypeString, value)
	}
	if value, ok := ijiu.mutation.SpecialNote(); ok {
		_spec.SetField(installationjobitem.FieldSpecialNote, field.TypeString, value)
	}
	if ijiu.mutation.SpecialNoteCleared() {
		_spec.ClearField(installationjobitem.FieldSpecialNote, field.TypeString)
	}
	if ijiu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobitem.JobTable,
			Columns: []string{installationjobitem.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijiu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobitem.JobTable,
			Columns: []string{installationjobitem.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ijiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ijiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installationjobitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ijiu.mutation.done = true
	return n, nil
}

// InstallationJobItemUpdateOne is the builder for updating a single InstallationJobItem entity.
type InstallationJobItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InstallationJobItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (ijiuo *InstallationJobItemUpdateOne) SetName(s string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.SetName(s)
	return ijiuo
}

// SetDescription sets the "description" field.
func (ijiuo *InstallationJobItemUpdateOne) SetDescription(s string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.SetDescription(s)
	return ijiuo
}

// SetFeatures sets the "features" field.
func (ijiuo *InstallationJobItemUpdateOne) SetFeatures(s []string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.SetFeatures(s)
	return ijiuo
}

// AppendFeatures appends s to the "features" field.
func (ijiuo *InstallationJobItemUpdateOne) AppendFeatures(s []string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.AppendFeatures(s)
	return ijiuo
}

// SetPrice sets the "price" field.
func (ijiuo *InstallationJobItemUpdateOne) SetPrice(f float64) *InstallationJobItemUpdateOne {
	ijiuo.mutation.ResetPrice()
	ijiuo.mutation.SetPrice(f)
	return ijiuo
}

// AddPrice adds f to the "price" field.
func (ijiuo *InstallationJobItemUpdateOne) AddPrice(f float64) *InstallationJobItemUpdateOne {
	ijiuo.mutation.AddPrice(f)
	return ijiuo
}

// SetImgKey sets the "img_key" field.
func (ijiuo *InstallationJobItemUpdateOne) SetImgKey(s string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.SetImgKey(s)
	return ijiuo
}

// SetSpecialNote sets the "special_note" field.
func (ijiuo *InstallationJobItemUpdateOne) SetSpecialNote(s string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.SetSpecialNote(s)
	return ijiuo
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (ijiuo *InstallationJobItemUpdateOne) SetNillableSpecialNote(s *string) *InstallationJobItemUpdateOne {
	if s != nil {
		ijiuo.SetSpecialNote(*s)
	}
	return ijiuo
}

// ClearSpecialNote clears the value of the "special_note" field.
func (ijiuo *InstallationJobItemUpdateOne) ClearSpecialNote() *InstallationJobItemUpdateOne {
	ijiuo.mutation.ClearSpecialNote()
	return ijiuo
}

// SetJobID sets the "job" edge to the InstallationJob entity by ID.
func (ijiuo *InstallationJobItemUpdateOne) SetJobID(id string) *InstallationJobItemUpdateOne {
	ijiuo.mutation.SetJobID(id)
	return ijiuo
}

// SetJob sets the "job" edge to the InstallationJob entity.
func (ijiuo *InstallationJobItemUpdateOne) SetJob(i *InstallationJob) *InstallationJobItemUpdateOne {
	return ijiuo.SetJobID(i.ID)
}

// Mutation returns the InstallationJobItemMutation object of the builder.
func (ijiuo *InstallationJobItemUpdateOne) Mutation() *InstallationJobItemMutation {
	return ijiuo.mutation
}

// ClearJob clears the "job" edge to the InstallationJob entity.
func (ijiuo *InstallationJobItemUpdateOne) ClearJob() *InstallationJobItemUpdateOne {
	ijiuo.mutation.ClearJob()
	return ijiuo
}

// Where appends a list predicates to the InstallationJobItemUpdate builder.
func (ijiuo *InstallationJobItemUpdateOne) Where(ps ...predicate.InstallationJobItem) *InstallationJobItemUpdateOne {
	ijiuo.mutation.Where(ps...)
	return ijiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ijiuo *InstallationJobItemUpdateOne) Select(field string, fields ...string) *InstallationJobItemUpdateOne {
	ijiuo.fields = append([]string{field}, fields...)
	return ijiuo
}

// Save executes the query and returns the updated InstallationJobItem entity.
func (ijiuo *InstallationJobItemUpdateOne) Save(ctx context.Context) (*InstallationJobItem, error) {
	return withHooks(ctx, ijiuo.sqlSave, ijiuo.mutation, ijiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ijiuo *InstallationJobItemUpdateOne) SaveX(ctx context.Context) *InstallationJobItem {
	node, err := ijiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ijiuo *InstallationJobItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ijiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijiuo *InstallationJobItemUpdateOne) ExecX(ctx context.Context) {
	if err := ijiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ijiuo *InstallationJobItemUpdateOne) check() error {
	if v, ok := ijiuo.mutation.Name(); ok {
		if err := installationjobitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.name": %w`, err)}
		}
	}
	if v, ok := ijiuo.mutation.Description(); ok {
		if err := installationjobitem.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.description": %w`, err)}
		}
	}
	if v, ok := ijiuo.mutation.SpecialNote(); ok {
		if err := installationjobitem.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "InstallationJobItem.special_note": %w`, err)}
		}
	}
	if _, ok := ijiuo.mutation.JobID(); ijiuo.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InstallationJobItem.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ijiuo *InstallationJobItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstallationJobItemUpdateOne {
	ijiuo.modifiers = append(ijiuo.modifiers, modifiers...)
	return ijiuo
}

func (ijiuo *InstallationJobItemUpdateOne) sqlSave(ctx context.Context) (_node *InstallationJobItem, err error) {
	if err := ijiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(installationjobitem.Table, installationjobitem.Columns, sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString))
	id, ok := ijiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstallationJobItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ijiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installationjobitem.FieldID)
		for _, f := range fields {
			if !installationjobitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != installationjobitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ijiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ijiuo.mutation.Name(); ok {
		_spec.SetField(installationjobitem.FieldName, field.TypeString, value)
	}
	if value, ok := ijiuo.mutation.Description(); ok {
		_spec.SetField(installationjobitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := ijiuo.mutation.Features(); ok {
		_spec.SetField(installationjobitem.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := ijiuo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, installationjobitem.FieldFeatures, value)
		})
	}
	if value, ok := ijiuo.mutation.Price(); ok {
		_spec.SetField(installationjobitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ijiuo.mutation.AddedPrice(); ok {
		_spec.AddField(installationjobitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ijiuo.mutation.ImgKey(); ok {
		_spec.SetField(installationjobitem.FieldImgKey, field.TypeString, value)
	}
	if value, ok := ijiuo.mutation.SpecialNote(); ok {
		_spec.SetField(installationjobitem.FieldSpecialNote, field.TypeString, value)
	}
	if ijiuo.mutation.SpecialNoteCleared() {
		_spec.ClearField(installationjobitem.FieldSpecialNote, field.TypeString)
	}
	if ijiuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobitem.JobTable,
			Columns: []string{installationjobitem.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijiuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobitem.JobTable,
			Columns: []string{installationjobitem.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ijiuo.modifiers...)
	_node = &InstallationJobItem{config: ijiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ijiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installationjobitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ijiuo.mutation.done = true
	return _node, nil
}

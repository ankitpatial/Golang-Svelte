// Code generated by ent, DO NOT EDIT.

package optionlist

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the optionlist type in the database.
	Label = "option_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeFinanceOptions holds the string denoting the finance_options edge name in mutations.
	EdgeFinanceOptions = "finance_options"
	// EdgeEpcOptions holds the string denoting the epc_options edge name in mutations.
	EdgeEpcOptions = "epc_options"
	// EdgeEpc holds the string denoting the epc edge name in mutations.
	EdgeEpc = "epc"
	// Table holds the table name of the optionlist in the database.
	Table = "option_list"
	// FinanceOptionsTable is the table that holds the finance_options relation/edge. The primary key declared below.
	FinanceOptionsTable = "partner_finance_options"
	// FinanceOptionsInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	FinanceOptionsInverseTable = "partners"
	// EpcOptionsTable is the table that holds the epc_options relation/edge. The primary key declared below.
	EpcOptionsTable = "partner_epc_options"
	// EpcOptionsInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	EpcOptionsInverseTable = "partners"
	// EpcTable is the table that holds the epc relation/edge.
	EpcTable = "jobs"
	// EpcInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	EpcInverseTable = "jobs"
	// EpcColumn is the table column denoting the epc relation/edge.
	EpcColumn = "epc_id"
)

// Columns holds all SQL columns for optionlist fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldName,
	FieldDisplayName,
	FieldActive,
	FieldOrder,
}

var (
	// FinanceOptionsPrimaryKey and FinanceOptionsColumn2 are the table columns denoting the
	// primary key for the finance_options relation (M2M).
	FinanceOptionsPrimaryKey = []string{"option_id", "partner_id"}
	// EpcOptionsPrimaryKey and EpcOptionsColumn2 are the table columns denoting the
	// primary key for the epc_options relation (M2M).
	EpcOptionsPrimaryKey = []string{"option_id", "partner_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enum.OptionList) error {
	switch _type.String() {
	case "FINANCE", "EPC":
		return nil
	default:
		return fmt.Errorf("optionlist: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the OptionList queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByFinanceOptionsCount orders the results by finance_options count.
func ByFinanceOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFinanceOptionsStep(), opts...)
	}
}

// ByFinanceOptions orders the results by finance_options terms.
func ByFinanceOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFinanceOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEpcOptionsCount orders the results by epc_options count.
func ByEpcOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpcOptionsStep(), opts...)
	}
}

// ByEpcOptions orders the results by epc_options terms.
func ByEpcOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpcOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEpcCount orders the results by epc count.
func ByEpcCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpcStep(), opts...)
	}
}

// ByEpc orders the results by epc terms.
func ByEpc(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpcStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFinanceOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FinanceOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FinanceOptionsTable, FinanceOptionsPrimaryKey...),
	)
}
func newEpcOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpcOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EpcOptionsTable, EpcOptionsPrimaryKey...),
	)
}
func newEpcStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpcInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EpcTable, EpcColumn),
	)
}

var (
	// enum.OptionList must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.OptionList)(nil)
	// enum.OptionList must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.OptionList)(nil)
)

// Code generated by ent, DO NOT EDIT.

package homeowner

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldUpdatedAt, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldLastName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldPhone, v))
}

// StreetNumber applies equality check predicate on the "street_number" field. It's identical to StreetNumberEQ.
func StreetNumber(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldStreetNumber, v))
}

// StreetName applies equality check predicate on the "street_name" field. It's identical to StreetNameEQ.
func StreetName(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldStreetName, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldState, v))
}

// StateAbbr applies equality check predicate on the "state_abbr" field. It's identical to StateAbbrEQ.
func StateAbbr(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldStateAbbr, v))
}

// Zip applies equality check predicate on the "zip" field. It's identical to ZipEQ.
func Zip(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldZip, v))
}

// FormattedAddress applies equality check predicate on the "formatted_address" field. It's identical to FormattedAddressEQ.
func FormattedAddress(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldFormattedAddress, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldLongitude, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldUpdatedAt, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldLastName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldPhone, v))
}

// StreetNumberEQ applies the EQ predicate on the "street_number" field.
func StreetNumberEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldStreetNumber, v))
}

// StreetNumberNEQ applies the NEQ predicate on the "street_number" field.
func StreetNumberNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldStreetNumber, v))
}

// StreetNumberIn applies the In predicate on the "street_number" field.
func StreetNumberIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldStreetNumber, vs...))
}

// StreetNumberNotIn applies the NotIn predicate on the "street_number" field.
func StreetNumberNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldStreetNumber, vs...))
}

// StreetNumberGT applies the GT predicate on the "street_number" field.
func StreetNumberGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldStreetNumber, v))
}

// StreetNumberGTE applies the GTE predicate on the "street_number" field.
func StreetNumberGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldStreetNumber, v))
}

// StreetNumberLT applies the LT predicate on the "street_number" field.
func StreetNumberLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldStreetNumber, v))
}

// StreetNumberLTE applies the LTE predicate on the "street_number" field.
func StreetNumberLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldStreetNumber, v))
}

// StreetNumberContains applies the Contains predicate on the "street_number" field.
func StreetNumberContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldStreetNumber, v))
}

// StreetNumberHasPrefix applies the HasPrefix predicate on the "street_number" field.
func StreetNumberHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldStreetNumber, v))
}

// StreetNumberHasSuffix applies the HasSuffix predicate on the "street_number" field.
func StreetNumberHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldStreetNumber, v))
}

// StreetNumberEqualFold applies the EqualFold predicate on the "street_number" field.
func StreetNumberEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldStreetNumber, v))
}

// StreetNumberContainsFold applies the ContainsFold predicate on the "street_number" field.
func StreetNumberContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldStreetNumber, v))
}

// StreetNameEQ applies the EQ predicate on the "street_name" field.
func StreetNameEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldStreetName, v))
}

// StreetNameNEQ applies the NEQ predicate on the "street_name" field.
func StreetNameNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldStreetName, v))
}

// StreetNameIn applies the In predicate on the "street_name" field.
func StreetNameIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldStreetName, vs...))
}

// StreetNameNotIn applies the NotIn predicate on the "street_name" field.
func StreetNameNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldStreetName, vs...))
}

// StreetNameGT applies the GT predicate on the "street_name" field.
func StreetNameGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldStreetName, v))
}

// StreetNameGTE applies the GTE predicate on the "street_name" field.
func StreetNameGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldStreetName, v))
}

// StreetNameLT applies the LT predicate on the "street_name" field.
func StreetNameLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldStreetName, v))
}

// StreetNameLTE applies the LTE predicate on the "street_name" field.
func StreetNameLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldStreetName, v))
}

// StreetNameContains applies the Contains predicate on the "street_name" field.
func StreetNameContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldStreetName, v))
}

// StreetNameHasPrefix applies the HasPrefix predicate on the "street_name" field.
func StreetNameHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldStreetName, v))
}

// StreetNameHasSuffix applies the HasSuffix predicate on the "street_name" field.
func StreetNameHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldStreetName, v))
}

// StreetNameEqualFold applies the EqualFold predicate on the "street_name" field.
func StreetNameEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldStreetName, v))
}

// StreetNameContainsFold applies the ContainsFold predicate on the "street_name" field.
func StreetNameContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldStreetName, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldState, v))
}

// StateAbbrEQ applies the EQ predicate on the "state_abbr" field.
func StateAbbrEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldStateAbbr, v))
}

// StateAbbrNEQ applies the NEQ predicate on the "state_abbr" field.
func StateAbbrNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldStateAbbr, v))
}

// StateAbbrIn applies the In predicate on the "state_abbr" field.
func StateAbbrIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldStateAbbr, vs...))
}

// StateAbbrNotIn applies the NotIn predicate on the "state_abbr" field.
func StateAbbrNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldStateAbbr, vs...))
}

// StateAbbrGT applies the GT predicate on the "state_abbr" field.
func StateAbbrGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldStateAbbr, v))
}

// StateAbbrGTE applies the GTE predicate on the "state_abbr" field.
func StateAbbrGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldStateAbbr, v))
}

// StateAbbrLT applies the LT predicate on the "state_abbr" field.
func StateAbbrLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldStateAbbr, v))
}

// StateAbbrLTE applies the LTE predicate on the "state_abbr" field.
func StateAbbrLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldStateAbbr, v))
}

// StateAbbrContains applies the Contains predicate on the "state_abbr" field.
func StateAbbrContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldStateAbbr, v))
}

// StateAbbrHasPrefix applies the HasPrefix predicate on the "state_abbr" field.
func StateAbbrHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldStateAbbr, v))
}

// StateAbbrHasSuffix applies the HasSuffix predicate on the "state_abbr" field.
func StateAbbrHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldStateAbbr, v))
}

// StateAbbrIsNil applies the IsNil predicate on the "state_abbr" field.
func StateAbbrIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldStateAbbr))
}

// StateAbbrNotNil applies the NotNil predicate on the "state_abbr" field.
func StateAbbrNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldStateAbbr))
}

// StateAbbrEqualFold applies the EqualFold predicate on the "state_abbr" field.
func StateAbbrEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldStateAbbr, v))
}

// StateAbbrContainsFold applies the ContainsFold predicate on the "state_abbr" field.
func StateAbbrContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldStateAbbr, v))
}

// ZipEQ applies the EQ predicate on the "zip" field.
func ZipEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldZip, v))
}

// ZipNEQ applies the NEQ predicate on the "zip" field.
func ZipNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldZip, v))
}

// ZipIn applies the In predicate on the "zip" field.
func ZipIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldZip, vs...))
}

// ZipNotIn applies the NotIn predicate on the "zip" field.
func ZipNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldZip, vs...))
}

// ZipGT applies the GT predicate on the "zip" field.
func ZipGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldZip, v))
}

// ZipGTE applies the GTE predicate on the "zip" field.
func ZipGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldZip, v))
}

// ZipLT applies the LT predicate on the "zip" field.
func ZipLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldZip, v))
}

// ZipLTE applies the LTE predicate on the "zip" field.
func ZipLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldZip, v))
}

// ZipContains applies the Contains predicate on the "zip" field.
func ZipContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldZip, v))
}

// ZipHasPrefix applies the HasPrefix predicate on the "zip" field.
func ZipHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldZip, v))
}

// ZipHasSuffix applies the HasSuffix predicate on the "zip" field.
func ZipHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldZip, v))
}

// ZipEqualFold applies the EqualFold predicate on the "zip" field.
func ZipEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldZip, v))
}

// ZipContainsFold applies the ContainsFold predicate on the "zip" field.
func ZipContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldZip, v))
}

// FormattedAddressEQ applies the EQ predicate on the "formatted_address" field.
func FormattedAddressEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldFormattedAddress, v))
}

// FormattedAddressNEQ applies the NEQ predicate on the "formatted_address" field.
func FormattedAddressNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldFormattedAddress, v))
}

// FormattedAddressIn applies the In predicate on the "formatted_address" field.
func FormattedAddressIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldFormattedAddress, vs...))
}

// FormattedAddressNotIn applies the NotIn predicate on the "formatted_address" field.
func FormattedAddressNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldFormattedAddress, vs...))
}

// FormattedAddressGT applies the GT predicate on the "formatted_address" field.
func FormattedAddressGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldFormattedAddress, v))
}

// FormattedAddressGTE applies the GTE predicate on the "formatted_address" field.
func FormattedAddressGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldFormattedAddress, v))
}

// FormattedAddressLT applies the LT predicate on the "formatted_address" field.
func FormattedAddressLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldFormattedAddress, v))
}

// FormattedAddressLTE applies the LTE predicate on the "formatted_address" field.
func FormattedAddressLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldFormattedAddress, v))
}

// FormattedAddressContains applies the Contains predicate on the "formatted_address" field.
func FormattedAddressContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldFormattedAddress, v))
}

// FormattedAddressHasPrefix applies the HasPrefix predicate on the "formatted_address" field.
func FormattedAddressHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldFormattedAddress, v))
}

// FormattedAddressHasSuffix applies the HasSuffix predicate on the "formatted_address" field.
func FormattedAddressHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldFormattedAddress, v))
}

// FormattedAddressIsNil applies the IsNil predicate on the "formatted_address" field.
func FormattedAddressIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldFormattedAddress))
}

// FormattedAddressNotNil applies the NotNil predicate on the "formatted_address" field.
func FormattedAddressNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldFormattedAddress))
}

// FormattedAddressEqualFold applies the EqualFold predicate on the "formatted_address" field.
func FormattedAddressEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldFormattedAddress, v))
}

// FormattedAddressContainsFold applies the ContainsFold predicate on the "formatted_address" field.
func FormattedAddressContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldFormattedAddress, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldLatitude, v))
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldLatitude))
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldLatitude))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldLongitude, v))
}

// LongitudeIsNil applies the IsNil predicate on the "longitude" field.
func LongitudeIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldLongitude))
}

// LongitudeNotNil applies the NotNil predicate on the "longitude" field.
func LongitudeNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldLongitude))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldHasSuffix(FieldHash, v))
}

// HashIsNil applies the IsNil predicate on the "hash" field.
func HashIsNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldIsNull(FieldHash))
}

// HashNotNil applies the NotNil predicate on the "hash" field.
func HashNotNil() predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldNotNull(FieldHash))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.HomeOwner {
	return predicate.HomeOwner(sql.FieldContainsFold(FieldHash, v))
}

// HasEstimates applies the HasEdge predicate on the "estimates" edge.
func HasEstimates() predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EstimatesTable, EstimatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimatesWith applies the HasEdge predicate on the "estimates" edge with a given conditions (other predicates).
func HasEstimatesWith(preds ...predicate.Estimate) predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		step := newEstimatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.Job) predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartner applies the HasEdge predicate on the "partner" edge.
func HasPartner() predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerWith applies the HasEdge predicate on the "partner" edge with a given conditions (other predicates).
func HasPartnerWith(preds ...predicate.Partner) predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		step := newPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HomeOwner) predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HomeOwner) predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HomeOwner) predicate.HomeOwner {
	return predicate.HomeOwner(func(s *sql.Selector) {
		p(s.Not())
	})
}

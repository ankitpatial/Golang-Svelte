// Code generated by ent, DO NOT EDIT.

package homeowner

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the homeowner type in the database.
	Label = "home_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldStreetNumber holds the string denoting the street_number field in the database.
	FieldStreetNumber = "street_number"
	// FieldStreetName holds the string denoting the street_name field in the database.
	FieldStreetName = "street_name"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldStateAbbr holds the string denoting the state_abbr field in the database.
	FieldStateAbbr = "state_abbr"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// FieldFormattedAddress holds the string denoting the formatted_address field in the database.
	FieldFormattedAddress = "formatted_address"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// EdgeEstimates holds the string denoting the estimates edge name in mutations.
	EdgeEstimates = "estimates"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// Table holds the table name of the homeowner in the database.
	Table = "home_owners"
	// EstimatesTable is the table that holds the estimates relation/edge.
	EstimatesTable = "estimates"
	// EstimatesInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	EstimatesInverseTable = "estimates"
	// EstimatesColumn is the table column denoting the estimates relation/edge.
	EstimatesColumn = "home_owner_id"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "jobs"
	// JobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsInverseTable = "jobs"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "home_owner_id"
	// PartnerTable is the table that holds the partner relation/edge.
	PartnerTable = "home_owners"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
	// PartnerColumn is the table column denoting the partner relation/edge.
	PartnerColumn = "partner_id"
)

// Columns holds all SQL columns for homeowner fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPhone,
	FieldStreetNumber,
	FieldStreetName,
	FieldCity,
	FieldState,
	FieldStateAbbr,
	FieldZip,
	FieldFormattedAddress,
	FieldLatitude,
	FieldLongitude,
	FieldHash,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "home_owners"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partner_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// StateAbbrValidator is a validator for the "state_abbr" field. It is called by the builders before save.
	StateAbbrValidator func(string) error
	// ZipValidator is a validator for the "zip" field. It is called by the builders before save.
	ZipValidator func(string) error
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the HomeOwner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByStreetNumber orders the results by the street_number field.
func ByStreetNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreetNumber, opts...).ToFunc()
}

// ByStreetName orders the results by the street_name field.
func ByStreetName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreetName, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByStateAbbr orders the results by the state_abbr field.
func ByStateAbbr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateAbbr, opts...).ToFunc()
}

// ByZip orders the results by the zip field.
func ByZip(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZip, opts...).ToFunc()
}

// ByFormattedAddress orders the results by the formatted_address field.
func ByFormattedAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormattedAddress, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByEstimatesCount orders the results by estimates count.
func ByEstimatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEstimatesStep(), opts...)
	}
}

// ByEstimates orders the results by estimates terms.
func ByEstimates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnerField orders the results by partner field.
func ByPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), sql.OrderByField(field, opts...))
	}
}
func newEstimatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EstimatesTable, EstimatesColumn),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
	)
}

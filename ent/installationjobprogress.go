// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobprogress"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InstallationJobProgress is the model entity for the InstallationJobProgress schema.
type InstallationJobProgress struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Status holds the value of the "status" field.
	Status enum.InstallationStatus `json:"status,omitempty"`
	// Complete holds the value of the "complete" field.
	Complete bool `json:"complete,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstallationJobProgressQuery when eager-loading is set.
	Edges        InstallationJobProgressEdges `json:"edges"`
	job_id       *string
	creator_id   *string
	selectValues sql.SelectValues
}

// InstallationJobProgressEdges holds the relations/edges for other nodes in the graph.
type InstallationJobProgressEdges struct {
	// Job holds the value of the job edge.
	Job *InstallationJob `json:"job,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobProgressEdges) JobOrErr() (*InstallationJob, error) {
	if e.loadedTypes[0] {
		if e.Job == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: installationjob.Label}
		}
		return e.Job, nil
	}
	return nil, &NotLoadedError{edge: "job"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationJobProgressEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstallationJobProgress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case installationjobprogress.FieldComplete:
			values[i] = new(sql.NullBool)
		case installationjobprogress.FieldID, installationjobprogress.FieldStatus, installationjobprogress.FieldNote:
			values[i] = new(sql.NullString)
		case installationjobprogress.FieldCreatedAt, installationjobprogress.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case installationjobprogress.ForeignKeys[0]: // job_id
			values[i] = new(sql.NullString)
		case installationjobprogress.ForeignKeys[1]: // creator_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstallationJobProgress fields.
func (ijp *InstallationJobProgress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case installationjobprogress.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ijp.ID = value.String
			}
		case installationjobprogress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ijp.CreatedAt = value.Time
			}
		case installationjobprogress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ijp.UpdatedAt = value.Time
			}
		case installationjobprogress.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ijp.Status = enum.InstallationStatus(value.String)
			}
		case installationjobprogress.FieldComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field complete", values[i])
			} else if value.Valid {
				ijp.Complete = value.Bool
			}
		case installationjobprogress.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				ijp.Note = value.String
			}
		case installationjobprogress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				ijp.job_id = new(string)
				*ijp.job_id = value.String
			}
		case installationjobprogress.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				ijp.creator_id = new(string)
				*ijp.creator_id = value.String
			}
		default:
			ijp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstallationJobProgress.
// This includes values selected through modifiers, order, etc.
func (ijp *InstallationJobProgress) Value(name string) (ent.Value, error) {
	return ijp.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the InstallationJobProgress entity.
func (ijp *InstallationJobProgress) QueryJob() *InstallationJobQuery {
	return NewInstallationJobProgressClient(ijp.config).QueryJob(ijp)
}

// QueryCreator queries the "creator" edge of the InstallationJobProgress entity.
func (ijp *InstallationJobProgress) QueryCreator() *UserQuery {
	return NewInstallationJobProgressClient(ijp.config).QueryCreator(ijp)
}

// Update returns a builder for updating this InstallationJobProgress.
// Note that you need to call InstallationJobProgress.Unwrap() before calling this method if this InstallationJobProgress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ijp *InstallationJobProgress) Update() *InstallationJobProgressUpdateOne {
	return NewInstallationJobProgressClient(ijp.config).UpdateOne(ijp)
}

// Unwrap unwraps the InstallationJobProgress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ijp *InstallationJobProgress) Unwrap() *InstallationJobProgress {
	_tx, ok := ijp.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstallationJobProgress is not a transactional entity")
	}
	ijp.config.driver = _tx.drv
	return ijp
}

// String implements the fmt.Stringer.
func (ijp *InstallationJobProgress) String() string {
	var builder strings.Builder
	builder.WriteString("InstallationJobProgress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ijp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ijp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ijp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ijp.Status))
	builder.WriteString(", ")
	builder.WriteString("complete=")
	builder.WriteString(fmt.Sprintf("%v", ijp.Complete))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(ijp.Note)
	builder.WriteByte(')')
	return builder.String()
}

// InstallationJobProgresses is a parsable slice of InstallationJobProgress.
type InstallationJobProgresses []*InstallationJobProgress

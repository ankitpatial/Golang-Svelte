// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/predicate"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyProgressUpdate is the builder for updating SurveyProgress entities.
type SurveyProgressUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyProgressUpdate builder.
func (spu *SurveyProgressUpdate) Where(ps ...predicate.SurveyProgress) *SurveyProgressUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (spu *SurveyProgressUpdate) SetSurveyID(id string) *SurveyProgressUpdate {
	spu.mutation.SetSurveyID(id)
	return spu
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (spu *SurveyProgressUpdate) SetNillableSurveyID(id *string) *SurveyProgressUpdate {
	if id != nil {
		spu = spu.SetSurveyID(*id)
	}
	return spu
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (spu *SurveyProgressUpdate) SetSurvey(s *Survey) *SurveyProgressUpdate {
	return spu.SetSurveyID(s.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (spu *SurveyProgressUpdate) SetCreatorID(id string) *SurveyProgressUpdate {
	spu.mutation.SetCreatorID(id)
	return spu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (spu *SurveyProgressUpdate) SetNillableCreatorID(id *string) *SurveyProgressUpdate {
	if id != nil {
		spu = spu.SetCreatorID(*id)
	}
	return spu
}

// SetCreator sets the "creator" edge to the User entity.
func (spu *SurveyProgressUpdate) SetCreator(u *User) *SurveyProgressUpdate {
	return spu.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (spu *SurveyProgressUpdate) SetCreatorAPIID(id string) *SurveyProgressUpdate {
	spu.mutation.SetCreatorAPIID(id)
	return spu
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (spu *SurveyProgressUpdate) SetNillableCreatorAPIID(id *string) *SurveyProgressUpdate {
	if id != nil {
		spu = spu.SetCreatorAPIID(*id)
	}
	return spu
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (spu *SurveyProgressUpdate) SetCreatorAPI(a *ApiUser) *SurveyProgressUpdate {
	return spu.SetCreatorAPIID(a.ID)
}

// Mutation returns the SurveyProgressMutation object of the builder.
func (spu *SurveyProgressUpdate) Mutation() *SurveyProgressMutation {
	return spu.mutation
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (spu *SurveyProgressUpdate) ClearSurvey() *SurveyProgressUpdate {
	spu.mutation.ClearSurvey()
	return spu
}

// ClearCreator clears the "creator" edge to the User entity.
func (spu *SurveyProgressUpdate) ClearCreator() *SurveyProgressUpdate {
	spu.mutation.ClearCreator()
	return spu
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (spu *SurveyProgressUpdate) ClearCreatorAPI() *SurveyProgressUpdate {
	spu.mutation.ClearCreatorAPI()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SurveyProgressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SurveyProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SurveyProgressUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SurveyProgressUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spu *SurveyProgressUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyProgressUpdate {
	spu.modifiers = append(spu.modifiers, modifiers...)
	return spu
}

func (spu *SurveyProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyprogress.Table, surveyprogress.Columns, sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spu.mutation.CompleteCleared() {
		_spec.ClearField(surveyprogress.FieldComplete, field.TypeBool)
	}
	if spu.mutation.NoteCleared() {
		_spec.ClearField(surveyprogress.FieldNote, field.TypeString)
	}
	if spu.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.SurveyTable,
			Columns: []string{surveyprogress.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.SurveyTable,
			Columns: []string{surveyprogress.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorTable,
			Columns: []string{surveyprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorTable,
			Columns: []string{surveyprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorAPITable,
			Columns: []string{surveyprogress.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorAPITable,
			Columns: []string{surveyprogress.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(spu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SurveyProgressUpdateOne is the builder for updating a single SurveyProgress entity.
type SurveyProgressUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (spuo *SurveyProgressUpdateOne) SetSurveyID(id string) *SurveyProgressUpdateOne {
	spuo.mutation.SetSurveyID(id)
	return spuo
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (spuo *SurveyProgressUpdateOne) SetNillableSurveyID(id *string) *SurveyProgressUpdateOne {
	if id != nil {
		spuo = spuo.SetSurveyID(*id)
	}
	return spuo
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (spuo *SurveyProgressUpdateOne) SetSurvey(s *Survey) *SurveyProgressUpdateOne {
	return spuo.SetSurveyID(s.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (spuo *SurveyProgressUpdateOne) SetCreatorID(id string) *SurveyProgressUpdateOne {
	spuo.mutation.SetCreatorID(id)
	return spuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (spuo *SurveyProgressUpdateOne) SetNillableCreatorID(id *string) *SurveyProgressUpdateOne {
	if id != nil {
		spuo = spuo.SetCreatorID(*id)
	}
	return spuo
}

// SetCreator sets the "creator" edge to the User entity.
func (spuo *SurveyProgressUpdateOne) SetCreator(u *User) *SurveyProgressUpdateOne {
	return spuo.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (spuo *SurveyProgressUpdateOne) SetCreatorAPIID(id string) *SurveyProgressUpdateOne {
	spuo.mutation.SetCreatorAPIID(id)
	return spuo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (spuo *SurveyProgressUpdateOne) SetNillableCreatorAPIID(id *string) *SurveyProgressUpdateOne {
	if id != nil {
		spuo = spuo.SetCreatorAPIID(*id)
	}
	return spuo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (spuo *SurveyProgressUpdateOne) SetCreatorAPI(a *ApiUser) *SurveyProgressUpdateOne {
	return spuo.SetCreatorAPIID(a.ID)
}

// Mutation returns the SurveyProgressMutation object of the builder.
func (spuo *SurveyProgressUpdateOne) Mutation() *SurveyProgressMutation {
	return spuo.mutation
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (spuo *SurveyProgressUpdateOne) ClearSurvey() *SurveyProgressUpdateOne {
	spuo.mutation.ClearSurvey()
	return spuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (spuo *SurveyProgressUpdateOne) ClearCreator() *SurveyProgressUpdateOne {
	spuo.mutation.ClearCreator()
	return spuo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (spuo *SurveyProgressUpdateOne) ClearCreatorAPI() *SurveyProgressUpdateOne {
	spuo.mutation.ClearCreatorAPI()
	return spuo
}

// Where appends a list predicates to the SurveyProgressUpdate builder.
func (spuo *SurveyProgressUpdateOne) Where(ps ...predicate.SurveyProgress) *SurveyProgressUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SurveyProgressUpdateOne) Select(field string, fields ...string) *SurveyProgressUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SurveyProgress entity.
func (spuo *SurveyProgressUpdateOne) Save(ctx context.Context) (*SurveyProgress, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SurveyProgressUpdateOne) SaveX(ctx context.Context) *SurveyProgress {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SurveyProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SurveyProgressUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spuo *SurveyProgressUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyProgressUpdateOne {
	spuo.modifiers = append(spuo.modifiers, modifiers...)
	return spuo
}

func (spuo *SurveyProgressUpdateOne) sqlSave(ctx context.Context) (_node *SurveyProgress, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyprogress.Table, surveyprogress.Columns, sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SurveyProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyprogress.FieldID)
		for _, f := range fields {
			if !surveyprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != surveyprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spuo.mutation.CompleteCleared() {
		_spec.ClearField(surveyprogress.FieldComplete, field.TypeBool)
	}
	if spuo.mutation.NoteCleared() {
		_spec.ClearField(surveyprogress.FieldNote, field.TypeString)
	}
	if spuo.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.SurveyTable,
			Columns: []string{surveyprogress.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.SurveyTable,
			Columns: []string{surveyprogress.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorTable,
			Columns: []string{surveyprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorTable,
			Columns: []string{surveyprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorAPITable,
			Columns: []string{surveyprogress.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorAPITable,
			Columns: []string{surveyprogress.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(spuo.modifiers...)
	_node = &SurveyProgress{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}

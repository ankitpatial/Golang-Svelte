// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/homeowner"
	"roofix/ent/partner"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HomeOwner is the model entity for the HomeOwner schema.
type HomeOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// StreetNumber holds the value of the "street_number" field.
	StreetNumber string `json:"street_number,omitempty"`
	// StreetName holds the value of the "street_name" field.
	StreetName string `json:"street_name,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// StateAbbr holds the value of the "state_abbr" field.
	StateAbbr string `json:"state_abbr,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip string `json:"zip,omitempty"`
	// FormattedAddress holds the value of the "formatted_address" field.
	FormattedAddress string `json:"formatted_address,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HomeOwnerQuery when eager-loading is set.
	Edges        HomeOwnerEdges `json:"edges"`
	partner_id   *string
	selectValues sql.SelectValues
}

// HomeOwnerEdges holds the relations/edges for other nodes in the graph.
type HomeOwnerEdges struct {
	// Estimates holds the value of the estimates edge.
	Estimates []*Estimate `json:"estimates,omitempty"`
	// Jobs holds the value of the jobs edge.
	Jobs []*Job `json:"jobs,omitempty"`
	// Partner holds the value of the partner edge.
	Partner *Partner `json:"partner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEstimates map[string][]*Estimate
	namedJobs      map[string][]*Job
}

// EstimatesOrErr returns the Estimates value or an error if the edge
// was not loaded in eager-loading.
func (e HomeOwnerEdges) EstimatesOrErr() ([]*Estimate, error) {
	if e.loadedTypes[0] {
		return e.Estimates, nil
	}
	return nil, &NotLoadedError{edge: "estimates"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e HomeOwnerEdges) JobsOrErr() ([]*Job, error) {
	if e.loadedTypes[1] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HomeOwnerEdges) PartnerOrErr() (*Partner, error) {
	if e.loadedTypes[2] {
		if e.Partner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HomeOwner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case homeowner.FieldLatitude, homeowner.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case homeowner.FieldID, homeowner.FieldFirstName, homeowner.FieldLastName, homeowner.FieldEmail, homeowner.FieldPhone, homeowner.FieldStreetNumber, homeowner.FieldStreetName, homeowner.FieldCity, homeowner.FieldState, homeowner.FieldStateAbbr, homeowner.FieldZip, homeowner.FieldFormattedAddress, homeowner.FieldHash:
			values[i] = new(sql.NullString)
		case homeowner.FieldCreatedAt, homeowner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case homeowner.ForeignKeys[0]: // partner_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HomeOwner fields.
func (ho *HomeOwner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case homeowner.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ho.ID = value.String
			}
		case homeowner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ho.CreatedAt = value.Time
			}
		case homeowner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ho.UpdatedAt = value.Time
			}
		case homeowner.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				ho.FirstName = value.String
			}
		case homeowner.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				ho.LastName = value.String
			}
		case homeowner.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ho.Email = value.String
			}
		case homeowner.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ho.Phone = value.String
			}
		case homeowner.FieldStreetNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_number", values[i])
			} else if value.Valid {
				ho.StreetNumber = value.String
			}
		case homeowner.FieldStreetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_name", values[i])
			} else if value.Valid {
				ho.StreetName = value.String
			}
		case homeowner.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ho.City = value.String
			}
		case homeowner.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ho.State = value.String
			}
		case homeowner.FieldStateAbbr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_abbr", values[i])
			} else if value.Valid {
				ho.StateAbbr = value.String
			}
		case homeowner.FieldZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				ho.Zip = value.String
			}
		case homeowner.FieldFormattedAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field formatted_address", values[i])
			} else if value.Valid {
				ho.FormattedAddress = value.String
			}
		case homeowner.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				ho.Latitude = value.Float64
			}
		case homeowner.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				ho.Longitude = value.Float64
			}
		case homeowner.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				ho.Hash = value.String
			}
		case homeowner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				ho.partner_id = new(string)
				*ho.partner_id = value.String
			}
		default:
			ho.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HomeOwner.
// This includes values selected through modifiers, order, etc.
func (ho *HomeOwner) Value(name string) (ent.Value, error) {
	return ho.selectValues.Get(name)
}

// QueryEstimates queries the "estimates" edge of the HomeOwner entity.
func (ho *HomeOwner) QueryEstimates() *EstimateQuery {
	return NewHomeOwnerClient(ho.config).QueryEstimates(ho)
}

// QueryJobs queries the "jobs" edge of the HomeOwner entity.
func (ho *HomeOwner) QueryJobs() *JobQuery {
	return NewHomeOwnerClient(ho.config).QueryJobs(ho)
}

// QueryPartner queries the "partner" edge of the HomeOwner entity.
func (ho *HomeOwner) QueryPartner() *PartnerQuery {
	return NewHomeOwnerClient(ho.config).QueryPartner(ho)
}

// Update returns a builder for updating this HomeOwner.
// Note that you need to call HomeOwner.Unwrap() before calling this method if this HomeOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (ho *HomeOwner) Update() *HomeOwnerUpdateOne {
	return NewHomeOwnerClient(ho.config).UpdateOne(ho)
}

// Unwrap unwraps the HomeOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ho *HomeOwner) Unwrap() *HomeOwner {
	_tx, ok := ho.config.driver.(*txDriver)
	if !ok {
		panic("ent: HomeOwner is not a transactional entity")
	}
	ho.config.driver = _tx.drv
	return ho
}

// String implements the fmt.Stringer.
func (ho *HomeOwner) String() string {
	var builder strings.Builder
	builder.WriteString("HomeOwner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ho.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ho.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ho.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(ho.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(ho.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ho.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ho.Phone)
	builder.WriteString(", ")
	builder.WriteString("street_number=")
	builder.WriteString(ho.StreetNumber)
	builder.WriteString(", ")
	builder.WriteString("street_name=")
	builder.WriteString(ho.StreetName)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(ho.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ho.State)
	builder.WriteString(", ")
	builder.WriteString("state_abbr=")
	builder.WriteString(ho.StateAbbr)
	builder.WriteString(", ")
	builder.WriteString("zip=")
	builder.WriteString(ho.Zip)
	builder.WriteString(", ")
	builder.WriteString("formatted_address=")
	builder.WriteString(ho.FormattedAddress)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", ho.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", ho.Longitude))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(ho.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEstimates returns the Estimates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ho *HomeOwner) NamedEstimates(name string) ([]*Estimate, error) {
	if ho.Edges.namedEstimates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ho.Edges.namedEstimates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ho *HomeOwner) appendNamedEstimates(name string, edges ...*Estimate) {
	if ho.Edges.namedEstimates == nil {
		ho.Edges.namedEstimates = make(map[string][]*Estimate)
	}
	if len(edges) == 0 {
		ho.Edges.namedEstimates[name] = []*Estimate{}
	} else {
		ho.Edges.namedEstimates[name] = append(ho.Edges.namedEstimates[name], edges...)
	}
}

// NamedJobs returns the Jobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ho *HomeOwner) NamedJobs(name string) ([]*Job, error) {
	if ho.Edges.namedJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ho.Edges.namedJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ho *HomeOwner) appendNamedJobs(name string, edges ...*Job) {
	if ho.Edges.namedJobs == nil {
		ho.Edges.namedJobs = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		ho.Edges.namedJobs[name] = []*Job{}
	} else {
		ho.Edges.namedJobs[name] = append(ho.Edges.namedJobs[name], edges...)
	}
}

// HomeOwners is a parsable slice of HomeOwner.
type HomeOwners []*HomeOwner

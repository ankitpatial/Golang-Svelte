// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/job"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobProgressHistoryUpdate is the builder for updating JobProgressHistory entities.
type JobProgressHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *JobProgressHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobProgressHistoryUpdate builder.
func (jphu *JobProgressHistoryUpdate) Where(ps ...predicate.JobProgressHistory) *JobProgressHistoryUpdate {
	jphu.mutation.Where(ps...)
	return jphu
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jphu *JobProgressHistoryUpdate) SetJobID(id string) *JobProgressHistoryUpdate {
	jphu.mutation.SetJobID(id)
	return jphu
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jphu *JobProgressHistoryUpdate) SetNillableJobID(id *string) *JobProgressHistoryUpdate {
	if id != nil {
		jphu = jphu.SetJobID(*id)
	}
	return jphu
}

// SetJob sets the "job" edge to the Job entity.
func (jphu *JobProgressHistoryUpdate) SetJob(j *Job) *JobProgressHistoryUpdate {
	return jphu.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jphu *JobProgressHistoryUpdate) SetCreatorID(id string) *JobProgressHistoryUpdate {
	jphu.mutation.SetCreatorID(id)
	return jphu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jphu *JobProgressHistoryUpdate) SetNillableCreatorID(id *string) *JobProgressHistoryUpdate {
	if id != nil {
		jphu = jphu.SetCreatorID(*id)
	}
	return jphu
}

// SetCreator sets the "creator" edge to the User entity.
func (jphu *JobProgressHistoryUpdate) SetCreator(u *User) *JobProgressHistoryUpdate {
	return jphu.SetCreatorID(u.ID)
}

// SetCreatorAPIUserID sets the "creator_api_user" edge to the ApiUser entity by ID.
func (jphu *JobProgressHistoryUpdate) SetCreatorAPIUserID(id string) *JobProgressHistoryUpdate {
	jphu.mutation.SetCreatorAPIUserID(id)
	return jphu
}

// SetNillableCreatorAPIUserID sets the "creator_api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (jphu *JobProgressHistoryUpdate) SetNillableCreatorAPIUserID(id *string) *JobProgressHistoryUpdate {
	if id != nil {
		jphu = jphu.SetCreatorAPIUserID(*id)
	}
	return jphu
}

// SetCreatorAPIUser sets the "creator_api_user" edge to the ApiUser entity.
func (jphu *JobProgressHistoryUpdate) SetCreatorAPIUser(a *ApiUser) *JobProgressHistoryUpdate {
	return jphu.SetCreatorAPIUserID(a.ID)
}

// Mutation returns the JobProgressHistoryMutation object of the builder.
func (jphu *JobProgressHistoryUpdate) Mutation() *JobProgressHistoryMutation {
	return jphu.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (jphu *JobProgressHistoryUpdate) ClearJob() *JobProgressHistoryUpdate {
	jphu.mutation.ClearJob()
	return jphu
}

// ClearCreator clears the "creator" edge to the User entity.
func (jphu *JobProgressHistoryUpdate) ClearCreator() *JobProgressHistoryUpdate {
	jphu.mutation.ClearCreator()
	return jphu
}

// ClearCreatorAPIUser clears the "creator_api_user" edge to the ApiUser entity.
func (jphu *JobProgressHistoryUpdate) ClearCreatorAPIUser() *JobProgressHistoryUpdate {
	jphu.mutation.ClearCreatorAPIUser()
	return jphu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jphu *JobProgressHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jphu.sqlSave, jphu.mutation, jphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jphu *JobProgressHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := jphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jphu *JobProgressHistoryUpdate) Exec(ctx context.Context) error {
	_, err := jphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jphu *JobProgressHistoryUpdate) ExecX(ctx context.Context) {
	if err := jphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jphu *JobProgressHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobProgressHistoryUpdate {
	jphu.modifiers = append(jphu.modifiers, modifiers...)
	return jphu
}

func (jphu *JobProgressHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobprogresshistory.Table, jobprogresshistory.Columns, sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString))
	if ps := jphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jphu.mutation.CompleteCleared() {
		_spec.ClearField(jobprogresshistory.FieldComplete, field.TypeBool)
	}
	if jphu.mutation.NoteCleared() {
		_spec.ClearField(jobprogresshistory.FieldNote, field.TypeString)
	}
	if jphu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.JobTable,
			Columns: []string{jobprogresshistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jphu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.JobTable,
			Columns: []string{jobprogresshistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jphu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorTable,
			Columns: []string{jobprogresshistory.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jphu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorTable,
			Columns: []string{jobprogresshistory.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jphu.mutation.CreatorAPIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorAPIUserTable,
			Columns: []string{jobprogresshistory.CreatorAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jphu.mutation.CreatorAPIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorAPIUserTable,
			Columns: []string{jobprogresshistory.CreatorAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jphu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobprogresshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jphu.mutation.done = true
	return n, nil
}

// JobProgressHistoryUpdateOne is the builder for updating a single JobProgressHistory entity.
type JobProgressHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobProgressHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jphuo *JobProgressHistoryUpdateOne) SetJobID(id string) *JobProgressHistoryUpdateOne {
	jphuo.mutation.SetJobID(id)
	return jphuo
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jphuo *JobProgressHistoryUpdateOne) SetNillableJobID(id *string) *JobProgressHistoryUpdateOne {
	if id != nil {
		jphuo = jphuo.SetJobID(*id)
	}
	return jphuo
}

// SetJob sets the "job" edge to the Job entity.
func (jphuo *JobProgressHistoryUpdateOne) SetJob(j *Job) *JobProgressHistoryUpdateOne {
	return jphuo.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jphuo *JobProgressHistoryUpdateOne) SetCreatorID(id string) *JobProgressHistoryUpdateOne {
	jphuo.mutation.SetCreatorID(id)
	return jphuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jphuo *JobProgressHistoryUpdateOne) SetNillableCreatorID(id *string) *JobProgressHistoryUpdateOne {
	if id != nil {
		jphuo = jphuo.SetCreatorID(*id)
	}
	return jphuo
}

// SetCreator sets the "creator" edge to the User entity.
func (jphuo *JobProgressHistoryUpdateOne) SetCreator(u *User) *JobProgressHistoryUpdateOne {
	return jphuo.SetCreatorID(u.ID)
}

// SetCreatorAPIUserID sets the "creator_api_user" edge to the ApiUser entity by ID.
func (jphuo *JobProgressHistoryUpdateOne) SetCreatorAPIUserID(id string) *JobProgressHistoryUpdateOne {
	jphuo.mutation.SetCreatorAPIUserID(id)
	return jphuo
}

// SetNillableCreatorAPIUserID sets the "creator_api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (jphuo *JobProgressHistoryUpdateOne) SetNillableCreatorAPIUserID(id *string) *JobProgressHistoryUpdateOne {
	if id != nil {
		jphuo = jphuo.SetCreatorAPIUserID(*id)
	}
	return jphuo
}

// SetCreatorAPIUser sets the "creator_api_user" edge to the ApiUser entity.
func (jphuo *JobProgressHistoryUpdateOne) SetCreatorAPIUser(a *ApiUser) *JobProgressHistoryUpdateOne {
	return jphuo.SetCreatorAPIUserID(a.ID)
}

// Mutation returns the JobProgressHistoryMutation object of the builder.
func (jphuo *JobProgressHistoryUpdateOne) Mutation() *JobProgressHistoryMutation {
	return jphuo.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (jphuo *JobProgressHistoryUpdateOne) ClearJob() *JobProgressHistoryUpdateOne {
	jphuo.mutation.ClearJob()
	return jphuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (jphuo *JobProgressHistoryUpdateOne) ClearCreator() *JobProgressHistoryUpdateOne {
	jphuo.mutation.ClearCreator()
	return jphuo
}

// ClearCreatorAPIUser clears the "creator_api_user" edge to the ApiUser entity.
func (jphuo *JobProgressHistoryUpdateOne) ClearCreatorAPIUser() *JobProgressHistoryUpdateOne {
	jphuo.mutation.ClearCreatorAPIUser()
	return jphuo
}

// Where appends a list predicates to the JobProgressHistoryUpdate builder.
func (jphuo *JobProgressHistoryUpdateOne) Where(ps ...predicate.JobProgressHistory) *JobProgressHistoryUpdateOne {
	jphuo.mutation.Where(ps...)
	return jphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jphuo *JobProgressHistoryUpdateOne) Select(field string, fields ...string) *JobProgressHistoryUpdateOne {
	jphuo.fields = append([]string{field}, fields...)
	return jphuo
}

// Save executes the query and returns the updated JobProgressHistory entity.
func (jphuo *JobProgressHistoryUpdateOne) Save(ctx context.Context) (*JobProgressHistory, error) {
	return withHooks(ctx, jphuo.sqlSave, jphuo.mutation, jphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jphuo *JobProgressHistoryUpdateOne) SaveX(ctx context.Context) *JobProgressHistory {
	node, err := jphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jphuo *JobProgressHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := jphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jphuo *JobProgressHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := jphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jphuo *JobProgressHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobProgressHistoryUpdateOne {
	jphuo.modifiers = append(jphuo.modifiers, modifiers...)
	return jphuo
}

func (jphuo *JobProgressHistoryUpdateOne) sqlSave(ctx context.Context) (_node *JobProgressHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobprogresshistory.Table, jobprogresshistory.Columns, sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString))
	id, ok := jphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobProgressHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobprogresshistory.FieldID)
		for _, f := range fields {
			if !jobprogresshistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobprogresshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jphuo.mutation.CompleteCleared() {
		_spec.ClearField(jobprogresshistory.FieldComplete, field.TypeBool)
	}
	if jphuo.mutation.NoteCleared() {
		_spec.ClearField(jobprogresshistory.FieldNote, field.TypeString)
	}
	if jphuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.JobTable,
			Columns: []string{jobprogresshistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jphuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.JobTable,
			Columns: []string{jobprogresshistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jphuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorTable,
			Columns: []string{jobprogresshistory.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jphuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorTable,
			Columns: []string{jobprogresshistory.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jphuo.mutation.CreatorAPIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorAPIUserTable,
			Columns: []string{jobprogresshistory.CreatorAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jphuo.mutation.CreatorAPIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorAPIUserTable,
			Columns: []string{jobprogresshistory.CreatorAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jphuo.modifiers...)
	_node = &JobProgressHistory{config: jphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobprogresshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jphuo.mutation.done = true
	return _node, nil
}

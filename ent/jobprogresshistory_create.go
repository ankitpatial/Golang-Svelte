// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/job"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobProgressHistoryCreate is the builder for creating a JobProgressHistory entity.
type JobProgressHistoryCreate struct {
	config
	mutation *JobProgressHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (jphc *JobProgressHistoryCreate) SetCreatedAt(t time.Time) *JobProgressHistoryCreate {
	jphc.mutation.SetCreatedAt(t)
	return jphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableCreatedAt(t *time.Time) *JobProgressHistoryCreate {
	if t != nil {
		jphc.SetCreatedAt(*t)
	}
	return jphc
}

// SetStatus sets the "status" field.
func (jphc *JobProgressHistoryCreate) SetStatus(ep enum.JobProgress) *JobProgressHistoryCreate {
	jphc.mutation.SetStatus(ep)
	return jphc
}

// SetComplete sets the "complete" field.
func (jphc *JobProgressHistoryCreate) SetComplete(b bool) *JobProgressHistoryCreate {
	jphc.mutation.SetComplete(b)
	return jphc
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableComplete(b *bool) *JobProgressHistoryCreate {
	if b != nil {
		jphc.SetComplete(*b)
	}
	return jphc
}

// SetNote sets the "note" field.
func (jphc *JobProgressHistoryCreate) SetNote(s string) *JobProgressHistoryCreate {
	jphc.mutation.SetNote(s)
	return jphc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableNote(s *string) *JobProgressHistoryCreate {
	if s != nil {
		jphc.SetNote(*s)
	}
	return jphc
}

// SetID sets the "id" field.
func (jphc *JobProgressHistoryCreate) SetID(s string) *JobProgressHistoryCreate {
	jphc.mutation.SetID(s)
	return jphc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableID(s *string) *JobProgressHistoryCreate {
	if s != nil {
		jphc.SetID(*s)
	}
	return jphc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jphc *JobProgressHistoryCreate) SetJobID(id string) *JobProgressHistoryCreate {
	jphc.mutation.SetJobID(id)
	return jphc
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableJobID(id *string) *JobProgressHistoryCreate {
	if id != nil {
		jphc = jphc.SetJobID(*id)
	}
	return jphc
}

// SetJob sets the "job" edge to the Job entity.
func (jphc *JobProgressHistoryCreate) SetJob(j *Job) *JobProgressHistoryCreate {
	return jphc.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jphc *JobProgressHistoryCreate) SetCreatorID(id string) *JobProgressHistoryCreate {
	jphc.mutation.SetCreatorID(id)
	return jphc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableCreatorID(id *string) *JobProgressHistoryCreate {
	if id != nil {
		jphc = jphc.SetCreatorID(*id)
	}
	return jphc
}

// SetCreator sets the "creator" edge to the User entity.
func (jphc *JobProgressHistoryCreate) SetCreator(u *User) *JobProgressHistoryCreate {
	return jphc.SetCreatorID(u.ID)
}

// SetCreatorAPIUserID sets the "creator_api_user" edge to the ApiUser entity by ID.
func (jphc *JobProgressHistoryCreate) SetCreatorAPIUserID(id string) *JobProgressHistoryCreate {
	jphc.mutation.SetCreatorAPIUserID(id)
	return jphc
}

// SetNillableCreatorAPIUserID sets the "creator_api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (jphc *JobProgressHistoryCreate) SetNillableCreatorAPIUserID(id *string) *JobProgressHistoryCreate {
	if id != nil {
		jphc = jphc.SetCreatorAPIUserID(*id)
	}
	return jphc
}

// SetCreatorAPIUser sets the "creator_api_user" edge to the ApiUser entity.
func (jphc *JobProgressHistoryCreate) SetCreatorAPIUser(a *ApiUser) *JobProgressHistoryCreate {
	return jphc.SetCreatorAPIUserID(a.ID)
}

// Mutation returns the JobProgressHistoryMutation object of the builder.
func (jphc *JobProgressHistoryCreate) Mutation() *JobProgressHistoryMutation {
	return jphc.mutation
}

// Save creates the JobProgressHistory in the database.
func (jphc *JobProgressHistoryCreate) Save(ctx context.Context) (*JobProgressHistory, error) {
	jphc.defaults()
	return withHooks(ctx, jphc.sqlSave, jphc.mutation, jphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jphc *JobProgressHistoryCreate) SaveX(ctx context.Context) *JobProgressHistory {
	v, err := jphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jphc *JobProgressHistoryCreate) Exec(ctx context.Context) error {
	_, err := jphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jphc *JobProgressHistoryCreate) ExecX(ctx context.Context) {
	if err := jphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jphc *JobProgressHistoryCreate) defaults() {
	if _, ok := jphc.mutation.CreatedAt(); !ok {
		v := jobprogresshistory.DefaultCreatedAt()
		jphc.mutation.SetCreatedAt(v)
	}
	if _, ok := jphc.mutation.Complete(); !ok {
		v := jobprogresshistory.DefaultComplete
		jphc.mutation.SetComplete(v)
	}
	if _, ok := jphc.mutation.ID(); !ok {
		v := jobprogresshistory.DefaultID()
		jphc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jphc *JobProgressHistoryCreate) check() error {
	if _, ok := jphc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobProgressHistory.created_at"`)}
	}
	if _, ok := jphc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "JobProgressHistory.status"`)}
	}
	if v, ok := jphc.mutation.Status(); ok {
		if err := jobprogresshistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "JobProgressHistory.status": %w`, err)}
		}
	}
	if v, ok := jphc.mutation.ID(); ok {
		if err := jobprogresshistory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "JobProgressHistory.id": %w`, err)}
		}
	}
	return nil
}

func (jphc *JobProgressHistoryCreate) sqlSave(ctx context.Context) (*JobProgressHistory, error) {
	if err := jphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobProgressHistory.ID type: %T", _spec.ID.Value)
		}
	}
	jphc.mutation.id = &_node.ID
	jphc.mutation.done = true
	return _node, nil
}

func (jphc *JobProgressHistoryCreate) createSpec() (*JobProgressHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobProgressHistory{config: jphc.config}
		_spec = sqlgraph.NewCreateSpec(jobprogresshistory.Table, sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = jphc.conflict
	if id, ok := jphc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jphc.mutation.CreatedAt(); ok {
		_spec.SetField(jobprogresshistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jphc.mutation.Status(); ok {
		_spec.SetField(jobprogresshistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := jphc.mutation.Complete(); ok {
		_spec.SetField(jobprogresshistory.FieldComplete, field.TypeBool, value)
		_node.Complete = value
	}
	if value, ok := jphc.mutation.Note(); ok {
		_spec.SetField(jobprogresshistory.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := jphc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.JobTable,
			Columns: []string{jobprogresshistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jphc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorTable,
			Columns: []string{jobprogresshistory.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jphc.mutation.CreatorAPIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobprogresshistory.CreatorAPIUserTable,
			Columns: []string{jobprogresshistory.CreatorAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobProgressHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobProgressHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jphc *JobProgressHistoryCreate) OnConflict(opts ...sql.ConflictOption) *JobProgressHistoryUpsertOne {
	jphc.conflict = opts
	return &JobProgressHistoryUpsertOne{
		create: jphc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobProgressHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jphc *JobProgressHistoryCreate) OnConflictColumns(columns ...string) *JobProgressHistoryUpsertOne {
	jphc.conflict = append(jphc.conflict, sql.ConflictColumns(columns...))
	return &JobProgressHistoryUpsertOne{
		create: jphc,
	}
}

type (
	// JobProgressHistoryUpsertOne is the builder for "upsert"-ing
	//  one JobProgressHistory node.
	JobProgressHistoryUpsertOne struct {
		create *JobProgressHistoryCreate
	}

	// JobProgressHistoryUpsert is the "OnConflict" setter.
	JobProgressHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobProgressHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobprogresshistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobProgressHistoryUpsertOne) UpdateNewValues() *JobProgressHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobprogresshistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobprogresshistory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Status(); exists {
			s.SetIgnore(jobprogresshistory.FieldStatus)
		}
		if _, exists := u.create.mutation.Complete(); exists {
			s.SetIgnore(jobprogresshistory.FieldComplete)
		}
		if _, exists := u.create.mutation.Note(); exists {
			s.SetIgnore(jobprogresshistory.FieldNote)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobProgressHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobProgressHistoryUpsertOne) Ignore() *JobProgressHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobProgressHistoryUpsertOne) DoNothing() *JobProgressHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobProgressHistoryCreate.OnConflict
// documentation for more info.
func (u *JobProgressHistoryUpsertOne) Update(set func(*JobProgressHistoryUpsert)) *JobProgressHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobProgressHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *JobProgressHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobProgressHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobProgressHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobProgressHistoryUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: JobProgressHistoryUpsertOne.ID is not supported by MySQL driver. Use JobProgressHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobProgressHistoryUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobProgressHistoryCreateBulk is the builder for creating many JobProgressHistory entities in bulk.
type JobProgressHistoryCreateBulk struct {
	config
	builders []*JobProgressHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the JobProgressHistory entities in the database.
func (jphcb *JobProgressHistoryCreateBulk) Save(ctx context.Context) ([]*JobProgressHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jphcb.builders))
	nodes := make([]*JobProgressHistory, len(jphcb.builders))
	mutators := make([]Mutator, len(jphcb.builders))
	for i := range jphcb.builders {
		func(i int, root context.Context) {
			builder := jphcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobProgressHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jphcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jphcb *JobProgressHistoryCreateBulk) SaveX(ctx context.Context) []*JobProgressHistory {
	v, err := jphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jphcb *JobProgressHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := jphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jphcb *JobProgressHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := jphcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobProgressHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobProgressHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jphcb *JobProgressHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobProgressHistoryUpsertBulk {
	jphcb.conflict = opts
	return &JobProgressHistoryUpsertBulk{
		create: jphcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobProgressHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jphcb *JobProgressHistoryCreateBulk) OnConflictColumns(columns ...string) *JobProgressHistoryUpsertBulk {
	jphcb.conflict = append(jphcb.conflict, sql.ConflictColumns(columns...))
	return &JobProgressHistoryUpsertBulk{
		create: jphcb,
	}
}

// JobProgressHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of JobProgressHistory nodes.
type JobProgressHistoryUpsertBulk struct {
	create *JobProgressHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobProgressHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobprogresshistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobProgressHistoryUpsertBulk) UpdateNewValues() *JobProgressHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobprogresshistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobprogresshistory.FieldCreatedAt)
			}
			if _, exists := b.mutation.Status(); exists {
				s.SetIgnore(jobprogresshistory.FieldStatus)
			}
			if _, exists := b.mutation.Complete(); exists {
				s.SetIgnore(jobprogresshistory.FieldComplete)
			}
			if _, exists := b.mutation.Note(); exists {
				s.SetIgnore(jobprogresshistory.FieldNote)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobProgressHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobProgressHistoryUpsertBulk) Ignore() *JobProgressHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobProgressHistoryUpsertBulk) DoNothing() *JobProgressHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobProgressHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *JobProgressHistoryUpsertBulk) Update(set func(*JobProgressHistoryUpsert)) *JobProgressHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobProgressHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *JobProgressHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobProgressHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobProgressHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobProgressHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

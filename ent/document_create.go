// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/installationjobitem"
	"roofix/ent/job"
	"roofix/ent/product"
	"roofix/ent/trainingvideo"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DocumentCreate) SetCreatedAt(t time.Time) *DocumentCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableCreatedAt(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DocumentCreate) SetUpdatedAt(t time.Time) *DocumentCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableUpdatedAt(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetBucket sets the "bucket" field.
func (dc *DocumentCreate) SetBucket(s string) *DocumentCreate {
	dc.mutation.SetBucket(s)
	return dc
}

// SetKey sets the "key" field.
func (dc *DocumentCreate) SetKey(s string) *DocumentCreate {
	dc.mutation.SetKey(s)
	return dc
}

// SetFolder sets the "folder" field.
func (dc *DocumentCreate) SetFolder(ef enum.DocFolder) *DocumentCreate {
	dc.mutation.SetFolder(ef)
	return dc
}

// SetDir sets the "dir" field.
func (dc *DocumentCreate) SetDir(s string) *DocumentCreate {
	dc.mutation.SetDir(s)
	return dc
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableDir(s *string) *DocumentCreate {
	if s != nil {
		dc.SetDir(*s)
	}
	return dc
}

// SetSection sets the "section" field.
func (dc *DocumentCreate) SetSection(es enum.DocSection) *DocumentCreate {
	dc.mutation.SetSection(es)
	return dc
}

// SetName sets the "name" field.
func (dc *DocumentCreate) SetName(s string) *DocumentCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetFilename sets the "filename" field.
func (dc *DocumentCreate) SetFilename(s string) *DocumentCreate {
	dc.mutation.SetFilename(s)
	return dc
}

// SetContentType sets the "content_type" field.
func (dc *DocumentCreate) SetContentType(s string) *DocumentCreate {
	dc.mutation.SetContentType(s)
	return dc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableContentType(s *string) *DocumentCreate {
	if s != nil {
		dc.SetContentType(*s)
	}
	return dc
}

// SetContentSize sets the "content_size" field.
func (dc *DocumentCreate) SetContentSize(i int64) *DocumentCreate {
	dc.mutation.SetContentSize(i)
	return dc
}

// SetReady sets the "ready" field.
func (dc *DocumentCreate) SetReady(b bool) *DocumentCreate {
	dc.mutation.SetReady(b)
	return dc
}

// SetNillableReady sets the "ready" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableReady(b *bool) *DocumentCreate {
	if b != nil {
		dc.SetReady(*b)
	}
	return dc
}

// SetCreatorID sets the "creator_id" field.
func (dc *DocumentCreate) SetCreatorID(s string) *DocumentCreate {
	dc.mutation.SetCreatorID(s)
	return dc
}

// SetUpdaterID sets the "updater_id" field.
func (dc *DocumentCreate) SetUpdaterID(s string) *DocumentCreate {
	dc.mutation.SetUpdaterID(s)
	return dc
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableUpdaterID(s *string) *DocumentCreate {
	if s != nil {
		dc.SetUpdaterID(*s)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DocumentCreate) SetID(s string) *DocumentCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableID(s *string) *DocumentCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// SetTrainingVideoID sets the "training_video" edge to the TrainingVideo entity by ID.
func (dc *DocumentCreate) SetTrainingVideoID(id string) *DocumentCreate {
	dc.mutation.SetTrainingVideoID(id)
	return dc
}

// SetNillableTrainingVideoID sets the "training_video" edge to the TrainingVideo entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableTrainingVideoID(id *string) *DocumentCreate {
	if id != nil {
		dc = dc.SetTrainingVideoID(*id)
	}
	return dc
}

// SetTrainingVideo sets the "training_video" edge to the TrainingVideo entity.
func (dc *DocumentCreate) SetTrainingVideo(t *TrainingVideo) *DocumentCreate {
	return dc.SetTrainingVideoID(t.ID)
}

// SetTrainingVideoPosterID sets the "training_video_poster" edge to the TrainingVideo entity by ID.
func (dc *DocumentCreate) SetTrainingVideoPosterID(id string) *DocumentCreate {
	dc.mutation.SetTrainingVideoPosterID(id)
	return dc
}

// SetNillableTrainingVideoPosterID sets the "training_video_poster" edge to the TrainingVideo entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableTrainingVideoPosterID(id *string) *DocumentCreate {
	if id != nil {
		dc = dc.SetTrainingVideoPosterID(*id)
	}
	return dc
}

// SetTrainingVideoPoster sets the "training_video_poster" edge to the TrainingVideo entity.
func (dc *DocumentCreate) SetTrainingVideoPoster(t *TrainingVideo) *DocumentCreate {
	return dc.SetTrainingVideoPosterID(t.ID)
}

// SetProductsImageID sets the "products_image" edge to the Product entity by ID.
func (dc *DocumentCreate) SetProductsImageID(id string) *DocumentCreate {
	dc.mutation.SetProductsImageID(id)
	return dc
}

// SetNillableProductsImageID sets the "products_image" edge to the Product entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableProductsImageID(id *string) *DocumentCreate {
	if id != nil {
		dc = dc.SetProductsImageID(*id)
	}
	return dc
}

// SetProductsImage sets the "products_image" edge to the Product entity.
func (dc *DocumentCreate) SetProductsImage(p *Product) *DocumentCreate {
	return dc.SetProductsImageID(p.ID)
}

// SetInstallationJobItemImageID sets the "installation_job_item_image" edge to the InstallationJobItem entity by ID.
func (dc *DocumentCreate) SetInstallationJobItemImageID(id string) *DocumentCreate {
	dc.mutation.SetInstallationJobItemImageID(id)
	return dc
}

// SetNillableInstallationJobItemImageID sets the "installation_job_item_image" edge to the InstallationJobItem entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableInstallationJobItemImageID(id *string) *DocumentCreate {
	if id != nil {
		dc = dc.SetInstallationJobItemImageID(*id)
	}
	return dc
}

// SetInstallationJobItemImage sets the "installation_job_item_image" edge to the InstallationJobItem entity.
func (dc *DocumentCreate) SetInstallationJobItemImage(i *InstallationJobItem) *DocumentCreate {
	return dc.SetInstallationJobItemImageID(i.ID)
}

// SetEstimatePdfID sets the "estimate_pdf" edge to the Estimate entity by ID.
func (dc *DocumentCreate) SetEstimatePdfID(id string) *DocumentCreate {
	dc.mutation.SetEstimatePdfID(id)
	return dc
}

// SetNillableEstimatePdfID sets the "estimate_pdf" edge to the Estimate entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableEstimatePdfID(id *string) *DocumentCreate {
	if id != nil {
		dc = dc.SetEstimatePdfID(*id)
	}
	return dc
}

// SetEstimatePdf sets the "estimate_pdf" edge to the Estimate entity.
func (dc *DocumentCreate) SetEstimatePdf(e *Estimate) *DocumentCreate {
	return dc.SetEstimatePdfID(e.ID)
}

// SetJobEstimatePdfID sets the "job_estimate_pdf" edge to the Job entity by ID.
func (dc *DocumentCreate) SetJobEstimatePdfID(id string) *DocumentCreate {
	dc.mutation.SetJobEstimatePdfID(id)
	return dc
}

// SetNillableJobEstimatePdfID sets the "job_estimate_pdf" edge to the Job entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableJobEstimatePdfID(id *string) *DocumentCreate {
	if id != nil {
		dc = dc.SetJobEstimatePdfID(*id)
	}
	return dc
}

// SetJobEstimatePdf sets the "job_estimate_pdf" edge to the Job entity.
func (dc *DocumentCreate) SetJobEstimatePdf(j *Job) *DocumentCreate {
	return dc.SetJobEstimatePdfID(j.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (dc *DocumentCreate) Mutation() *DocumentMutation {
	return dc.mutation
}

// Save creates the Document in the database.
func (dc *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DocumentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DocumentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DocumentCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := document.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := document.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Ready(); !ok {
		v := document.DefaultReady
		dc.mutation.SetReady(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := document.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DocumentCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Document.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Document.updated_at"`)}
	}
	if _, ok := dc.mutation.Bucket(); !ok {
		return &ValidationError{Name: "bucket", err: errors.New(`ent: missing required field "Document.bucket"`)}
	}
	if v, ok := dc.mutation.Bucket(); ok {
		if err := document.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "Document.bucket": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Document.key"`)}
	}
	if _, ok := dc.mutation.Folder(); !ok {
		return &ValidationError{Name: "folder", err: errors.New(`ent: missing required field "Document.folder"`)}
	}
	if v, ok := dc.mutation.Folder(); ok {
		if err := document.FolderValidator(v); err != nil {
			return &ValidationError{Name: "folder", err: fmt.Errorf(`ent: validator failed for field "Document.folder": %w`, err)}
		}
	}
	if v, ok := dc.mutation.Dir(); ok {
		if err := document.DirValidator(v); err != nil {
			return &ValidationError{Name: "dir", err: fmt.Errorf(`ent: validator failed for field "Document.dir": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Section(); !ok {
		return &ValidationError{Name: "section", err: errors.New(`ent: missing required field "Document.section"`)}
	}
	if v, ok := dc.mutation.Section(); ok {
		if err := document.SectionValidator(v); err != nil {
			return &ValidationError{Name: "section", err: fmt.Errorf(`ent: validator failed for field "Document.section": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Document.name"`)}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := document.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Document.name": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Document.filename"`)}
	}
	if v, ok := dc.mutation.Filename(); ok {
		if err := document.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Document.filename": %w`, err)}
		}
	}
	if v, ok := dc.mutation.ContentType(); ok {
		if err := document.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Document.content_type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.ContentSize(); !ok {
		return &ValidationError{Name: "content_size", err: errors.New(`ent: missing required field "Document.content_size"`)}
	}
	if _, ok := dc.mutation.Ready(); !ok {
		return &ValidationError{Name: "ready", err: errors.New(`ent: missing required field "Document.ready"`)}
	}
	if _, ok := dc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Document.creator_id"`)}
	}
	if v, ok := dc.mutation.CreatorID(); ok {
		if err := document.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Document.creator_id": %w`, err)}
		}
	}
	if v, ok := dc.mutation.UpdaterID(); ok {
		if err := document.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`ent: validator failed for field "Document.updater_id": %w`, err)}
		}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := document.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Document.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Document.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(document.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Bucket(); ok {
		_spec.SetField(document.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if value, ok := dc.mutation.Key(); ok {
		_spec.SetField(document.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := dc.mutation.Folder(); ok {
		_spec.SetField(document.FieldFolder, field.TypeEnum, value)
		_node.Folder = value
	}
	if value, ok := dc.mutation.Dir(); ok {
		_spec.SetField(document.FieldDir, field.TypeString, value)
		_node.Dir = &value
	}
	if value, ok := dc.mutation.Section(); ok {
		_spec.SetField(document.FieldSection, field.TypeEnum, value)
		_node.Section = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Filename(); ok {
		_spec.SetField(document.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := dc.mutation.ContentType(); ok {
		_spec.SetField(document.FieldContentType, field.TypeString, value)
		_node.ContentType = &value
	}
	if value, ok := dc.mutation.ContentSize(); ok {
		_spec.SetField(document.FieldContentSize, field.TypeInt64, value)
		_node.ContentSize = value
	}
	if value, ok := dc.mutation.Ready(); ok {
		_spec.SetField(document.FieldReady, field.TypeBool, value)
		_node.Ready = value
	}
	if value, ok := dc.mutation.CreatorID(); ok {
		_spec.SetField(document.FieldCreatorID, field.TypeString, value)
		_node.CreatorID = value
	}
	if value, ok := dc.mutation.UpdaterID(); ok {
		_spec.SetField(document.FieldUpdaterID, field.TypeString, value)
		_node.UpdaterID = &value
	}
	if nodes := dc.mutation.TrainingVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoTable,
			Columns: []string{document.TrainingVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.TrainingVideoPosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoPosterTable,
			Columns: []string{document.TrainingVideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ProductsImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.ProductsImageTable,
			Columns: []string{document.ProductsImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.InstallationJobItemImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.InstallationJobItemImageTable,
			Columns: []string{document.InstallationJobItemImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.EstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.EstimatePdfTable,
			Columns: []string{document.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.JobEstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.JobEstimatePdfTable,
			Columns: []string{document.JobEstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertOne {
	dc.conflict = opts
	return &DocumentUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflictColumns(columns ...string) *DocumentUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertOne{
		create: dc,
	}
}

type (
	// DocumentUpsertOne is the builder for "upsert"-ing
	//  one Document node.
	DocumentUpsertOne struct {
		create *DocumentCreate
	}

	// DocumentUpsert is the "OnConflict" setter.
	DocumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentUpsert) SetUpdatedAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateUpdatedAt() *DocumentUpsert {
	u.SetExcluded(document.FieldUpdatedAt)
	return u
}

// SetBucket sets the "bucket" field.
func (u *DocumentUpsert) SetBucket(v string) *DocumentUpsert {
	u.Set(document.FieldBucket, v)
	return u
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateBucket() *DocumentUpsert {
	u.SetExcluded(document.FieldBucket)
	return u
}

// SetKey sets the "key" field.
func (u *DocumentUpsert) SetKey(v string) *DocumentUpsert {
	u.Set(document.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateKey() *DocumentUpsert {
	u.SetExcluded(document.FieldKey)
	return u
}

// SetFolder sets the "folder" field.
func (u *DocumentUpsert) SetFolder(v enum.DocFolder) *DocumentUpsert {
	u.Set(document.FieldFolder, v)
	return u
}

// UpdateFolder sets the "folder" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateFolder() *DocumentUpsert {
	u.SetExcluded(document.FieldFolder)
	return u
}

// SetDir sets the "dir" field.
func (u *DocumentUpsert) SetDir(v string) *DocumentUpsert {
	u.Set(document.FieldDir, v)
	return u
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateDir() *DocumentUpsert {
	u.SetExcluded(document.FieldDir)
	return u
}

// ClearDir clears the value of the "dir" field.
func (u *DocumentUpsert) ClearDir() *DocumentUpsert {
	u.SetNull(document.FieldDir)
	return u
}

// SetSection sets the "section" field.
func (u *DocumentUpsert) SetSection(v enum.DocSection) *DocumentUpsert {
	u.Set(document.FieldSection, v)
	return u
}

// UpdateSection sets the "section" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateSection() *DocumentUpsert {
	u.SetExcluded(document.FieldSection)
	return u
}

// SetName sets the "name" field.
func (u *DocumentUpsert) SetName(v string) *DocumentUpsert {
	u.Set(document.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateName() *DocumentUpsert {
	u.SetExcluded(document.FieldName)
	return u
}

// SetFilename sets the "filename" field.
func (u *DocumentUpsert) SetFilename(v string) *DocumentUpsert {
	u.Set(document.FieldFilename, v)
	return u
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateFilename() *DocumentUpsert {
	u.SetExcluded(document.FieldFilename)
	return u
}

// SetContentType sets the "content_type" field.
func (u *DocumentUpsert) SetContentType(v string) *DocumentUpsert {
	u.Set(document.FieldContentType, v)
	return u
}

// UpdateContentType sets the "content_type" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateContentType() *DocumentUpsert {
	u.SetExcluded(document.FieldContentType)
	return u
}

// ClearContentType clears the value of the "content_type" field.
func (u *DocumentUpsert) ClearContentType() *DocumentUpsert {
	u.SetNull(document.FieldContentType)
	return u
}

// SetContentSize sets the "content_size" field.
func (u *DocumentUpsert) SetContentSize(v int64) *DocumentUpsert {
	u.Set(document.FieldContentSize, v)
	return u
}

// UpdateContentSize sets the "content_size" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateContentSize() *DocumentUpsert {
	u.SetExcluded(document.FieldContentSize)
	return u
}

// AddContentSize adds v to the "content_size" field.
func (u *DocumentUpsert) AddContentSize(v int64) *DocumentUpsert {
	u.Add(document.FieldContentSize, v)
	return u
}

// SetReady sets the "ready" field.
func (u *DocumentUpsert) SetReady(v bool) *DocumentUpsert {
	u.Set(document.FieldReady, v)
	return u
}

// UpdateReady sets the "ready" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateReady() *DocumentUpsert {
	u.SetExcluded(document.FieldReady)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *DocumentUpsert) SetCreatorID(v string) *DocumentUpsert {
	u.Set(document.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateCreatorID() *DocumentUpsert {
	u.SetExcluded(document.FieldCreatorID)
	return u
}

// SetUpdaterID sets the "updater_id" field.
func (u *DocumentUpsert) SetUpdaterID(v string) *DocumentUpsert {
	u.Set(document.FieldUpdaterID, v)
	return u
}

// UpdateUpdaterID sets the "updater_id" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateUpdaterID() *DocumentUpsert {
	u.SetExcluded(document.FieldUpdaterID)
	return u
}

// ClearUpdaterID clears the value of the "updater_id" field.
func (u *DocumentUpsert) ClearUpdaterID() *DocumentUpsert {
	u.SetNull(document.FieldUpdaterID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(document.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentUpsertOne) UpdateNewValues() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(document.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(document.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentUpsertOne) Ignore() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertOne) DoNothing() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreate.OnConflict
// documentation for more info.
func (u *DocumentUpsertOne) Update(set func(*DocumentUpsert)) *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentUpsertOne) SetUpdatedAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateUpdatedAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBucket sets the "bucket" field.
func (u *DocumentUpsertOne) SetBucket(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetBucket(v)
	})
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateBucket() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateBucket()
	})
}

// SetKey sets the "key" field.
func (u *DocumentUpsertOne) SetKey(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateKey() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateKey()
	})
}

// SetFolder sets the "folder" field.
func (u *DocumentUpsertOne) SetFolder(v enum.DocFolder) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFolder(v)
	})
}

// UpdateFolder sets the "folder" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateFolder() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFolder()
	})
}

// SetDir sets the "dir" field.
func (u *DocumentUpsertOne) SetDir(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetDir(v)
	})
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateDir() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateDir()
	})
}

// ClearDir clears the value of the "dir" field.
func (u *DocumentUpsertOne) ClearDir() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearDir()
	})
}

// SetSection sets the "section" field.
func (u *DocumentUpsertOne) SetSection(v enum.DocSection) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetSection(v)
	})
}

// UpdateSection sets the "section" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateSection() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateSection()
	})
}

// SetName sets the "name" field.
func (u *DocumentUpsertOne) SetName(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateName() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateName()
	})
}

// SetFilename sets the "filename" field.
func (u *DocumentUpsertOne) SetFilename(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateFilename() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFilename()
	})
}

// SetContentType sets the "content_type" field.
func (u *DocumentUpsertOne) SetContentType(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetContentType(v)
	})
}

// UpdateContentType sets the "content_type" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateContentType() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateContentType()
	})
}

// ClearContentType clears the value of the "content_type" field.
func (u *DocumentUpsertOne) ClearContentType() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearContentType()
	})
}

// SetContentSize sets the "content_size" field.
func (u *DocumentUpsertOne) SetContentSize(v int64) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetContentSize(v)
	})
}

// AddContentSize adds v to the "content_size" field.
func (u *DocumentUpsertOne) AddContentSize(v int64) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.AddContentSize(v)
	})
}

// UpdateContentSize sets the "content_size" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateContentSize() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateContentSize()
	})
}

// SetReady sets the "ready" field.
func (u *DocumentUpsertOne) SetReady(v bool) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetReady(v)
	})
}

// UpdateReady sets the "ready" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateReady() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateReady()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *DocumentUpsertOne) SetCreatorID(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateCreatorID() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateCreatorID()
	})
}

// SetUpdaterID sets the "updater_id" field.
func (u *DocumentUpsertOne) SetUpdaterID(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUpdaterID(v)
	})
}

// UpdateUpdaterID sets the "updater_id" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateUpdaterID() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUpdaterID()
	})
}

// ClearUpdaterID clears the value of the "updater_id" field.
func (u *DocumentUpsertOne) ClearUpdaterID() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearUpdaterID()
	})
}

// Exec executes the query.
func (u *DocumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DocumentUpsertOne.ID is not supported by MySQL driver. Use DocumentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	builders []*DocumentCreate
	conflict []sql.ConflictOption
}

// Save creates the Document entities in the database.
func (dcb *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Document, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertBulk {
	dcb.conflict = opts
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflictColumns(columns ...string) *DocumentUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// DocumentUpsertBulk is the builder for "upsert"-ing
// a bulk of Document nodes.
type DocumentUpsertBulk struct {
	create *DocumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(document.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentUpsertBulk) UpdateNewValues() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(document.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(document.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentUpsertBulk) Ignore() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertBulk) DoNothing() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentUpsertBulk) Update(set func(*DocumentUpsert)) *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentUpsertBulk) SetUpdatedAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateUpdatedAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBucket sets the "bucket" field.
func (u *DocumentUpsertBulk) SetBucket(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetBucket(v)
	})
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateBucket() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateBucket()
	})
}

// SetKey sets the "key" field.
func (u *DocumentUpsertBulk) SetKey(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateKey() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateKey()
	})
}

// SetFolder sets the "folder" field.
func (u *DocumentUpsertBulk) SetFolder(v enum.DocFolder) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFolder(v)
	})
}

// UpdateFolder sets the "folder" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateFolder() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFolder()
	})
}

// SetDir sets the "dir" field.
func (u *DocumentUpsertBulk) SetDir(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetDir(v)
	})
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateDir() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateDir()
	})
}

// ClearDir clears the value of the "dir" field.
func (u *DocumentUpsertBulk) ClearDir() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearDir()
	})
}

// SetSection sets the "section" field.
func (u *DocumentUpsertBulk) SetSection(v enum.DocSection) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetSection(v)
	})
}

// UpdateSection sets the "section" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateSection() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateSection()
	})
}

// SetName sets the "name" field.
func (u *DocumentUpsertBulk) SetName(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateName() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateName()
	})
}

// SetFilename sets the "filename" field.
func (u *DocumentUpsertBulk) SetFilename(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateFilename() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFilename()
	})
}

// SetContentType sets the "content_type" field.
func (u *DocumentUpsertBulk) SetContentType(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetContentType(v)
	})
}

// UpdateContentType sets the "content_type" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateContentType() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateContentType()
	})
}

// ClearContentType clears the value of the "content_type" field.
func (u *DocumentUpsertBulk) ClearContentType() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearContentType()
	})
}

// SetContentSize sets the "content_size" field.
func (u *DocumentUpsertBulk) SetContentSize(v int64) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetContentSize(v)
	})
}

// AddContentSize adds v to the "content_size" field.
func (u *DocumentUpsertBulk) AddContentSize(v int64) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.AddContentSize(v)
	})
}

// UpdateContentSize sets the "content_size" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateContentSize() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateContentSize()
	})
}

// SetReady sets the "ready" field.
func (u *DocumentUpsertBulk) SetReady(v bool) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetReady(v)
	})
}

// UpdateReady sets the "ready" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateReady() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateReady()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *DocumentUpsertBulk) SetCreatorID(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateCreatorID() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateCreatorID()
	})
}

// SetUpdaterID sets the "updater_id" field.
func (u *DocumentUpsertBulk) SetUpdaterID(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUpdaterID(v)
	})
}

// UpdateUpdaterID sets the "updater_id" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateUpdaterID() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUpdaterID()
	})
}

// ClearUpdaterID clears the value of the "updater_id" field.
func (u *DocumentUpsertBulk) ClearUpdaterID() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearUpdaterID()
	})
}

// Exec executes the query.
func (u *DocumentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

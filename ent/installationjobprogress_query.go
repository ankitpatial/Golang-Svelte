// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobprogress"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobProgressQuery is the builder for querying InstallationJobProgress entities.
type InstallationJobProgressQuery struct {
	config
	ctx         *QueryContext
	order       []installationjobprogress.OrderOption
	inters      []Interceptor
	predicates  []predicate.InstallationJobProgress
	withJob     *InstallationJobQuery
	withCreator *UserQuery
	withFKs     bool
	loadTotal   []func(context.Context, []*InstallationJobProgress) error
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InstallationJobProgressQuery builder.
func (ijpq *InstallationJobProgressQuery) Where(ps ...predicate.InstallationJobProgress) *InstallationJobProgressQuery {
	ijpq.predicates = append(ijpq.predicates, ps...)
	return ijpq
}

// Limit the number of records to be returned by this query.
func (ijpq *InstallationJobProgressQuery) Limit(limit int) *InstallationJobProgressQuery {
	ijpq.ctx.Limit = &limit
	return ijpq
}

// Offset to start from.
func (ijpq *InstallationJobProgressQuery) Offset(offset int) *InstallationJobProgressQuery {
	ijpq.ctx.Offset = &offset
	return ijpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ijpq *InstallationJobProgressQuery) Unique(unique bool) *InstallationJobProgressQuery {
	ijpq.ctx.Unique = &unique
	return ijpq
}

// Order specifies how the records should be ordered.
func (ijpq *InstallationJobProgressQuery) Order(o ...installationjobprogress.OrderOption) *InstallationJobProgressQuery {
	ijpq.order = append(ijpq.order, o...)
	return ijpq
}

// QueryJob chains the current query on the "job" edge.
func (ijpq *InstallationJobProgressQuery) QueryJob() *InstallationJobQuery {
	query := (&InstallationJobClient{config: ijpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjobprogress.Table, installationjobprogress.FieldID, selector),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjobprogress.JobTable, installationjobprogress.JobColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (ijpq *InstallationJobProgressQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: ijpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ijpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ijpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(installationjobprogress.Table, installationjobprogress.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, installationjobprogress.CreatorTable, installationjobprogress.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(ijpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InstallationJobProgress entity from the query.
// Returns a *NotFoundError when no InstallationJobProgress was found.
func (ijpq *InstallationJobProgressQuery) First(ctx context.Context) (*InstallationJobProgress, error) {
	nodes, err := ijpq.Limit(1).All(setContextOp(ctx, ijpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{installationjobprogress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) FirstX(ctx context.Context) *InstallationJobProgress {
	node, err := ijpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InstallationJobProgress ID from the query.
// Returns a *NotFoundError when no InstallationJobProgress ID was found.
func (ijpq *InstallationJobProgressQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ijpq.Limit(1).IDs(setContextOp(ctx, ijpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{installationjobprogress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) FirstIDX(ctx context.Context) string {
	id, err := ijpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InstallationJobProgress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InstallationJobProgress entity is found.
// Returns a *NotFoundError when no InstallationJobProgress entities are found.
func (ijpq *InstallationJobProgressQuery) Only(ctx context.Context) (*InstallationJobProgress, error) {
	nodes, err := ijpq.Limit(2).All(setContextOp(ctx, ijpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{installationjobprogress.Label}
	default:
		return nil, &NotSingularError{installationjobprogress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) OnlyX(ctx context.Context) *InstallationJobProgress {
	node, err := ijpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InstallationJobProgress ID in the query.
// Returns a *NotSingularError when more than one InstallationJobProgress ID is found.
// Returns a *NotFoundError when no entities are found.
func (ijpq *InstallationJobProgressQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ijpq.Limit(2).IDs(setContextOp(ctx, ijpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{installationjobprogress.Label}
	default:
		err = &NotSingularError{installationjobprogress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) OnlyIDX(ctx context.Context) string {
	id, err := ijpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InstallationJobProgresses.
func (ijpq *InstallationJobProgressQuery) All(ctx context.Context) ([]*InstallationJobProgress, error) {
	ctx = setContextOp(ctx, ijpq.ctx, "All")
	if err := ijpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InstallationJobProgress, *InstallationJobProgressQuery]()
	return withInterceptors[[]*InstallationJobProgress](ctx, ijpq, qr, ijpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) AllX(ctx context.Context) []*InstallationJobProgress {
	nodes, err := ijpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InstallationJobProgress IDs.
func (ijpq *InstallationJobProgressQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ijpq.ctx.Unique == nil && ijpq.path != nil {
		ijpq.Unique(true)
	}
	ctx = setContextOp(ctx, ijpq.ctx, "IDs")
	if err = ijpq.Select(installationjobprogress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) IDsX(ctx context.Context) []string {
	ids, err := ijpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ijpq *InstallationJobProgressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ijpq.ctx, "Count")
	if err := ijpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ijpq, querierCount[*InstallationJobProgressQuery](), ijpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) CountX(ctx context.Context) int {
	count, err := ijpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ijpq *InstallationJobProgressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ijpq.ctx, "Exist")
	switch _, err := ijpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ijpq *InstallationJobProgressQuery) ExistX(ctx context.Context) bool {
	exist, err := ijpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InstallationJobProgressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ijpq *InstallationJobProgressQuery) Clone() *InstallationJobProgressQuery {
	if ijpq == nil {
		return nil
	}
	return &InstallationJobProgressQuery{
		config:      ijpq.config,
		ctx:         ijpq.ctx.Clone(),
		order:       append([]installationjobprogress.OrderOption{}, ijpq.order...),
		inters:      append([]Interceptor{}, ijpq.inters...),
		predicates:  append([]predicate.InstallationJobProgress{}, ijpq.predicates...),
		withJob:     ijpq.withJob.Clone(),
		withCreator: ijpq.withCreator.Clone(),
		// clone intermediate query.
		sql:  ijpq.sql.Clone(),
		path: ijpq.path,
	}
}

// WithJob tells the query-builder to eager-load the nodes that are connected to
// the "job" edge. The optional arguments are used to configure the query builder of the edge.
func (ijpq *InstallationJobProgressQuery) WithJob(opts ...func(*InstallationJobQuery)) *InstallationJobProgressQuery {
	query := (&InstallationJobClient{config: ijpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijpq.withJob = query
	return ijpq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (ijpq *InstallationJobProgressQuery) WithCreator(opts ...func(*UserQuery)) *InstallationJobProgressQuery {
	query := (&UserClient{config: ijpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ijpq.withCreator = query
	return ijpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InstallationJobProgress.Query().
//		GroupBy(installationjobprogress.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ijpq *InstallationJobProgressQuery) GroupBy(field string, fields ...string) *InstallationJobProgressGroupBy {
	ijpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InstallationJobProgressGroupBy{build: ijpq}
	grbuild.flds = &ijpq.ctx.Fields
	grbuild.label = installationjobprogress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.InstallationJobProgress.Query().
//		Select(installationjobprogress.FieldCreatedAt).
//		Scan(ctx, &v)
func (ijpq *InstallationJobProgressQuery) Select(fields ...string) *InstallationJobProgressSelect {
	ijpq.ctx.Fields = append(ijpq.ctx.Fields, fields...)
	sbuild := &InstallationJobProgressSelect{InstallationJobProgressQuery: ijpq}
	sbuild.label = installationjobprogress.Label
	sbuild.flds, sbuild.scan = &ijpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InstallationJobProgressSelect configured with the given aggregations.
func (ijpq *InstallationJobProgressQuery) Aggregate(fns ...AggregateFunc) *InstallationJobProgressSelect {
	return ijpq.Select().Aggregate(fns...)
}

func (ijpq *InstallationJobProgressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ijpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ijpq); err != nil {
				return err
			}
		}
	}
	for _, f := range ijpq.ctx.Fields {
		if !installationjobprogress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ijpq.path != nil {
		prev, err := ijpq.path(ctx)
		if err != nil {
			return err
		}
		ijpq.sql = prev
	}
	return nil
}

func (ijpq *InstallationJobProgressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InstallationJobProgress, error) {
	var (
		nodes       = []*InstallationJobProgress{}
		withFKs     = ijpq.withFKs
		_spec       = ijpq.querySpec()
		loadedTypes = [2]bool{
			ijpq.withJob != nil,
			ijpq.withCreator != nil,
		}
	)
	if ijpq.withJob != nil || ijpq.withCreator != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, installationjobprogress.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InstallationJobProgress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InstallationJobProgress{config: ijpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ijpq.modifiers) > 0 {
		_spec.Modifiers = ijpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ijpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ijpq.withJob; query != nil {
		if err := ijpq.loadJob(ctx, query, nodes, nil,
			func(n *InstallationJobProgress, e *InstallationJob) { n.Edges.Job = e }); err != nil {
			return nil, err
		}
	}
	if query := ijpq.withCreator; query != nil {
		if err := ijpq.loadCreator(ctx, query, nodes, nil,
			func(n *InstallationJobProgress, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	for i := range ijpq.loadTotal {
		if err := ijpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ijpq *InstallationJobProgressQuery) loadJob(ctx context.Context, query *InstallationJobQuery, nodes []*InstallationJobProgress, init func(*InstallationJobProgress), assign func(*InstallationJobProgress, *InstallationJob)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InstallationJobProgress)
	for i := range nodes {
		if nodes[i].job_id == nil {
			continue
		}
		fk := *nodes[i].job_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(installationjob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ijpq *InstallationJobProgressQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*InstallationJobProgress, init func(*InstallationJobProgress), assign func(*InstallationJobProgress, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InstallationJobProgress)
	for i := range nodes {
		if nodes[i].creator_id == nil {
			continue
		}
		fk := *nodes[i].creator_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ijpq *InstallationJobProgressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ijpq.querySpec()
	if len(ijpq.modifiers) > 0 {
		_spec.Modifiers = ijpq.modifiers
	}
	_spec.Node.Columns = ijpq.ctx.Fields
	if len(ijpq.ctx.Fields) > 0 {
		_spec.Unique = ijpq.ctx.Unique != nil && *ijpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ijpq.driver, _spec)
}

func (ijpq *InstallationJobProgressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(installationjobprogress.Table, installationjobprogress.Columns, sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString))
	_spec.From = ijpq.sql
	if unique := ijpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ijpq.path != nil {
		_spec.Unique = true
	}
	if fields := ijpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installationjobprogress.FieldID)
		for i := range fields {
			if fields[i] != installationjobprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ijpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ijpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ijpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ijpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ijpq *InstallationJobProgressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ijpq.driver.Dialect())
	t1 := builder.Table(installationjobprogress.Table)
	columns := ijpq.ctx.Fields
	if len(columns) == 0 {
		columns = installationjobprogress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ijpq.sql != nil {
		selector = ijpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ijpq.ctx.Unique != nil && *ijpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ijpq.modifiers {
		m(selector)
	}
	for _, p := range ijpq.predicates {
		p(selector)
	}
	for _, p := range ijpq.order {
		p(selector)
	}
	if offset := ijpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ijpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ijpq *InstallationJobProgressQuery) Modify(modifiers ...func(s *sql.Selector)) *InstallationJobProgressSelect {
	ijpq.modifiers = append(ijpq.modifiers, modifiers...)
	return ijpq.Select()
}

// InstallationJobProgressGroupBy is the group-by builder for InstallationJobProgress entities.
type InstallationJobProgressGroupBy struct {
	selector
	build *InstallationJobProgressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ijpgb *InstallationJobProgressGroupBy) Aggregate(fns ...AggregateFunc) *InstallationJobProgressGroupBy {
	ijpgb.fns = append(ijpgb.fns, fns...)
	return ijpgb
}

// Scan applies the selector query and scans the result into the given value.
func (ijpgb *InstallationJobProgressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ijpgb.build.ctx, "GroupBy")
	if err := ijpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstallationJobProgressQuery, *InstallationJobProgressGroupBy](ctx, ijpgb.build, ijpgb, ijpgb.build.inters, v)
}

func (ijpgb *InstallationJobProgressGroupBy) sqlScan(ctx context.Context, root *InstallationJobProgressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ijpgb.fns))
	for _, fn := range ijpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ijpgb.flds)+len(ijpgb.fns))
		for _, f := range *ijpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ijpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ijpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InstallationJobProgressSelect is the builder for selecting fields of InstallationJobProgress entities.
type InstallationJobProgressSelect struct {
	*InstallationJobProgressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ijps *InstallationJobProgressSelect) Aggregate(fns ...AggregateFunc) *InstallationJobProgressSelect {
	ijps.fns = append(ijps.fns, fns...)
	return ijps
}

// Scan applies the selector query and scans the result into the given value.
func (ijps *InstallationJobProgressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ijps.ctx, "Select")
	if err := ijps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstallationJobProgressQuery, *InstallationJobProgressSelect](ctx, ijps.InstallationJobProgressQuery, ijps, ijps.inters, v)
}

func (ijps *InstallationJobProgressSelect) sqlScan(ctx context.Context, root *InstallationJobProgressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ijps.fns))
	for _, fn := range ijps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ijps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ijps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ijps *InstallationJobProgressSelect) Modify(modifiers ...func(s *sql.Selector)) *InstallationJobProgressSelect {
	ijps.modifiers = append(ijps.modifiers, modifiers...)
	return ijps
}

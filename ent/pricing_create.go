// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/postalcode"
	"roofix/ent/pricing"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PricingCreate is the builder for creating a Pricing entity.
type PricingCreate struct {
	config
	mutation *PricingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PricingCreate) SetCreatedAt(t time.Time) *PricingCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PricingCreate) SetNillableCreatedAt(t *time.Time) *PricingCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PricingCreate) SetUpdatedAt(t time.Time) *PricingCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PricingCreate) SetNillableUpdatedAt(t *time.Time) *PricingCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetPostalCountry sets the "postal_country" field.
func (pc *PricingCreate) SetPostalCountry(s string) *PricingCreate {
	pc.mutation.SetPostalCountry(s)
	return pc
}

// SetPostalCode sets the "postal_code" field.
func (pc *PricingCreate) SetPostalCode(s string) *PricingCreate {
	pc.mutation.SetPostalCode(s)
	return pc
}

// SetProductID sets the "product_id" field.
func (pc *PricingCreate) SetProductID(u uint8) *PricingCreate {
	pc.mutation.SetProductID(u)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PricingCreate) SetDescription(s string) *PricingCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PricingCreate) SetNillableDescription(s *string) *PricingCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetPrice sets the "price" field.
func (pc *PricingCreate) SetPrice(f float64) *PricingCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetPricePer sets the "price_per" field.
func (pc *PricingCreate) SetPricePer(s string) *PricingCreate {
	pc.mutation.SetPricePer(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PricingCreate) SetID(s string) *PricingCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PricingCreate) SetNillableID(s *string) *PricingCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// SetPostalID sets the "postal" edge to the PostalCode entity by ID.
func (pc *PricingCreate) SetPostalID(id string) *PricingCreate {
	pc.mutation.SetPostalID(id)
	return pc
}

// SetPostal sets the "postal" edge to the PostalCode entity.
func (pc *PricingCreate) SetPostal(p *PostalCode) *PricingCreate {
	return pc.SetPostalID(p.ID)
}

// Mutation returns the PricingMutation object of the builder.
func (pc *PricingCreate) Mutation() *PricingMutation {
	return pc.mutation
}

// Save creates the Pricing in the database.
func (pc *PricingCreate) Save(ctx context.Context) (*Pricing, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PricingCreate) SaveX(ctx context.Context) *Pricing {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PricingCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PricingCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PricingCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pricing.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := pricing.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := pricing.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PricingCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pricing.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Pricing.updated_at"`)}
	}
	if _, ok := pc.mutation.PostalCountry(); !ok {
		return &ValidationError{Name: "postal_country", err: errors.New(`ent: missing required field "Pricing.postal_country"`)}
	}
	if v, ok := pc.mutation.PostalCountry(); ok {
		if err := pricing.PostalCountryValidator(v); err != nil {
			return &ValidationError{Name: "postal_country", err: fmt.Errorf(`ent: validator failed for field "Pricing.postal_country": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "Pricing.postal_code"`)}
	}
	if v, ok := pc.mutation.PostalCode(); ok {
		if err := pricing.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Pricing.postal_code": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "Pricing.product_id"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Pricing.price"`)}
	}
	if _, ok := pc.mutation.PricePer(); !ok {
		return &ValidationError{Name: "price_per", err: errors.New(`ent: missing required field "Pricing.price_per"`)}
	}
	if v, ok := pc.mutation.PricePer(); ok {
		if err := pricing.PricePerValidator(v); err != nil {
			return &ValidationError{Name: "price_per", err: fmt.Errorf(`ent: validator failed for field "Pricing.price_per": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := pricing.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Pricing.id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PostalID(); !ok {
		return &ValidationError{Name: "postal", err: errors.New(`ent: missing required edge "Pricing.postal"`)}
	}
	return nil
}

func (pc *PricingCreate) sqlSave(ctx context.Context) (*Pricing, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Pricing.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PricingCreate) createSpec() (*Pricing, *sqlgraph.CreateSpec) {
	var (
		_node = &Pricing{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pricing.Table, sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pricing.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(pricing.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.PostalCountry(); ok {
		_spec.SetField(pricing.FieldPostalCountry, field.TypeString, value)
		_node.PostalCountry = value
	}
	if value, ok := pc.mutation.PostalCode(); ok {
		_spec.SetField(pricing.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := pc.mutation.ProductID(); ok {
		_spec.SetField(pricing.FieldProductID, field.TypeUint8, value)
		_node.ProductID = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(pricing.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(pricing.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.PricePer(); ok {
		_spec.SetField(pricing.FieldPricePer, field.TypeString, value)
		_node.PricePer = value
	}
	if nodes := pc.mutation.PostalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pricing.PostalTable,
			Columns: []string{pricing.PostalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.postal_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pricing.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PricingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PricingCreate) OnConflict(opts ...sql.ConflictOption) *PricingUpsertOne {
	pc.conflict = opts
	return &PricingUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pricing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PricingCreate) OnConflictColumns(columns ...string) *PricingUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PricingUpsertOne{
		create: pc,
	}
}

type (
	// PricingUpsertOne is the builder for "upsert"-ing
	//  one Pricing node.
	PricingUpsertOne struct {
		create *PricingCreate
	}

	// PricingUpsert is the "OnConflict" setter.
	PricingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PricingUpsert) SetUpdatedAt(v time.Time) *PricingUpsert {
	u.Set(pricing.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PricingUpsert) UpdateUpdatedAt() *PricingUpsert {
	u.SetExcluded(pricing.FieldUpdatedAt)
	return u
}

// SetPostalCountry sets the "postal_country" field.
func (u *PricingUpsert) SetPostalCountry(v string) *PricingUpsert {
	u.Set(pricing.FieldPostalCountry, v)
	return u
}

// UpdatePostalCountry sets the "postal_country" field to the value that was provided on create.
func (u *PricingUpsert) UpdatePostalCountry() *PricingUpsert {
	u.SetExcluded(pricing.FieldPostalCountry)
	return u
}

// SetPostalCode sets the "postal_code" field.
func (u *PricingUpsert) SetPostalCode(v string) *PricingUpsert {
	u.Set(pricing.FieldPostalCode, v)
	return u
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *PricingUpsert) UpdatePostalCode() *PricingUpsert {
	u.SetExcluded(pricing.FieldPostalCode)
	return u
}

// SetProductID sets the "product_id" field.
func (u *PricingUpsert) SetProductID(v uint8) *PricingUpsert {
	u.Set(pricing.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *PricingUpsert) UpdateProductID() *PricingUpsert {
	u.SetExcluded(pricing.FieldProductID)
	return u
}

// AddProductID adds v to the "product_id" field.
func (u *PricingUpsert) AddProductID(v uint8) *PricingUpsert {
	u.Add(pricing.FieldProductID, v)
	return u
}

// SetDescription sets the "description" field.
func (u *PricingUpsert) SetDescription(v string) *PricingUpsert {
	u.Set(pricing.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PricingUpsert) UpdateDescription() *PricingUpsert {
	u.SetExcluded(pricing.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PricingUpsert) ClearDescription() *PricingUpsert {
	u.SetNull(pricing.FieldDescription)
	return u
}

// SetPrice sets the "price" field.
func (u *PricingUpsert) SetPrice(v float64) *PricingUpsert {
	u.Set(pricing.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PricingUpsert) UpdatePrice() *PricingUpsert {
	u.SetExcluded(pricing.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *PricingUpsert) AddPrice(v float64) *PricingUpsert {
	u.Add(pricing.FieldPrice, v)
	return u
}

// SetPricePer sets the "price_per" field.
func (u *PricingUpsert) SetPricePer(v string) *PricingUpsert {
	u.Set(pricing.FieldPricePer, v)
	return u
}

// UpdatePricePer sets the "price_per" field to the value that was provided on create.
func (u *PricingUpsert) UpdatePricePer() *PricingUpsert {
	u.SetExcluded(pricing.FieldPricePer)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Pricing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pricing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PricingUpsertOne) UpdateNewValues() *PricingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pricing.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pricing.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pricing.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PricingUpsertOne) Ignore() *PricingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PricingUpsertOne) DoNothing() *PricingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PricingCreate.OnConflict
// documentation for more info.
func (u *PricingUpsertOne) Update(set func(*PricingUpsert)) *PricingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PricingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PricingUpsertOne) SetUpdatedAt(v time.Time) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdateUpdatedAt() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPostalCountry sets the "postal_country" field.
func (u *PricingUpsertOne) SetPostalCountry(v string) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetPostalCountry(v)
	})
}

// UpdatePostalCountry sets the "postal_country" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdatePostalCountry() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePostalCountry()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *PricingUpsertOne) SetPostalCode(v string) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdatePostalCode() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePostalCode()
	})
}

// SetProductID sets the "product_id" field.
func (u *PricingUpsertOne) SetProductID(v uint8) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *PricingUpsertOne) AddProductID(v uint8) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdateProductID() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdateProductID()
	})
}

// SetDescription sets the "description" field.
func (u *PricingUpsertOne) SetDescription(v string) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdateDescription() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PricingUpsertOne) ClearDescription() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.ClearDescription()
	})
}

// SetPrice sets the "price" field.
func (u *PricingUpsertOne) SetPrice(v float64) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *PricingUpsertOne) AddPrice(v float64) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdatePrice() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePrice()
	})
}

// SetPricePer sets the "price_per" field.
func (u *PricingUpsertOne) SetPricePer(v string) *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.SetPricePer(v)
	})
}

// UpdatePricePer sets the "price_per" field to the value that was provided on create.
func (u *PricingUpsertOne) UpdatePricePer() *PricingUpsertOne {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePricePer()
	})
}

// Exec executes the query.
func (u *PricingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PricingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PricingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PricingUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PricingUpsertOne.ID is not supported by MySQL driver. Use PricingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PricingUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PricingCreateBulk is the builder for creating many Pricing entities in bulk.
type PricingCreateBulk struct {
	config
	builders []*PricingCreate
	conflict []sql.ConflictOption
}

// Save creates the Pricing entities in the database.
func (pcb *PricingCreateBulk) Save(ctx context.Context) ([]*Pricing, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pricing, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PricingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PricingCreateBulk) SaveX(ctx context.Context) []*Pricing {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PricingCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PricingCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pricing.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PricingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PricingCreateBulk) OnConflict(opts ...sql.ConflictOption) *PricingUpsertBulk {
	pcb.conflict = opts
	return &PricingUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pricing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PricingCreateBulk) OnConflictColumns(columns ...string) *PricingUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PricingUpsertBulk{
		create: pcb,
	}
}

// PricingUpsertBulk is the builder for "upsert"-ing
// a bulk of Pricing nodes.
type PricingUpsertBulk struct {
	create *PricingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pricing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pricing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PricingUpsertBulk) UpdateNewValues() *PricingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pricing.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pricing.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pricing.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PricingUpsertBulk) Ignore() *PricingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PricingUpsertBulk) DoNothing() *PricingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PricingCreateBulk.OnConflict
// documentation for more info.
func (u *PricingUpsertBulk) Update(set func(*PricingUpsert)) *PricingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PricingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PricingUpsertBulk) SetUpdatedAt(v time.Time) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdateUpdatedAt() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPostalCountry sets the "postal_country" field.
func (u *PricingUpsertBulk) SetPostalCountry(v string) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetPostalCountry(v)
	})
}

// UpdatePostalCountry sets the "postal_country" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdatePostalCountry() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePostalCountry()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *PricingUpsertBulk) SetPostalCode(v string) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdatePostalCode() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePostalCode()
	})
}

// SetProductID sets the "product_id" field.
func (u *PricingUpsertBulk) SetProductID(v uint8) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *PricingUpsertBulk) AddProductID(v uint8) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdateProductID() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdateProductID()
	})
}

// SetDescription sets the "description" field.
func (u *PricingUpsertBulk) SetDescription(v string) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdateDescription() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PricingUpsertBulk) ClearDescription() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.ClearDescription()
	})
}

// SetPrice sets the "price" field.
func (u *PricingUpsertBulk) SetPrice(v float64) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *PricingUpsertBulk) AddPrice(v float64) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdatePrice() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePrice()
	})
}

// SetPricePer sets the "price_per" field.
func (u *PricingUpsertBulk) SetPricePer(v string) *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.SetPricePer(v)
	})
}

// UpdatePricePer sets the "price_per" field to the value that was provided on create.
func (u *PricingUpsertBulk) UpdatePricePer() *PricingUpsertBulk {
	return u.Update(func(s *PricingUpsert) {
		s.UpdatePricePer()
	})
}

// Exec executes the query.
func (u *PricingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PricingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PricingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PricingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

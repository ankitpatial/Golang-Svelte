// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/jobnote"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobNoteDelete is the builder for deleting a JobNote entity.
type JobNoteDelete struct {
	config
	hooks    []Hook
	mutation *JobNoteMutation
}

// Where appends a list predicates to the JobNoteDelete builder.
func (jnd *JobNoteDelete) Where(ps ...predicate.JobNote) *JobNoteDelete {
	jnd.mutation.Where(ps...)
	return jnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jnd *JobNoteDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jnd.sqlExec, jnd.mutation, jnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jnd *JobNoteDelete) ExecX(ctx context.Context) int {
	n, err := jnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jnd *JobNoteDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobnote.Table, sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString))
	if ps := jnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jnd.mutation.done = true
	return affected, err
}

// JobNoteDeleteOne is the builder for deleting a single JobNote entity.
type JobNoteDeleteOne struct {
	jnd *JobNoteDelete
}

// Where appends a list predicates to the JobNoteDelete builder.
func (jndo *JobNoteDeleteOne) Where(ps ...predicate.JobNote) *JobNoteDeleteOne {
	jndo.jnd.mutation.Where(ps...)
	return jndo
}

// Exec executes the deletion query.
func (jndo *JobNoteDeleteOne) Exec(ctx context.Context) error {
	n, err := jndo.jnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobnote.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jndo *JobNoteDeleteOne) ExecX(ctx context.Context) {
	if err := jndo.Exec(ctx); err != nil {
		panic(err)
	}
}

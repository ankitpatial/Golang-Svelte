// Code generated by ent, DO NOT EDIT.

package apiuser

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCreatedAt, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldUsername, v))
}

// PwdHash applies equality check predicate on the "pwd_hash" field. It's identical to PwdHashEQ.
func PwdHash(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldPwdHash, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldActive, v))
}

// CbAPIURL applies equality check predicate on the "cb_api_url" field. It's identical to CbAPIURLEQ.
func CbAPIURL(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIURL, v))
}

// CbAPIUser applies equality check predicate on the "cb_api_user" field. It's identical to CbAPIUserEQ.
func CbAPIUser(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIUser, v))
}

// CbAPIPwd applies equality check predicate on the "cb_api_pwd" field. It's identical to CbAPIPwdEQ.
func CbAPIPwd(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIPwd, v))
}

// CbAPIToken applies equality check predicate on the "cb_api_token" field. It's identical to CbAPITokenEQ.
func CbAPIToken(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldUsername, v))
}

// PwdHashEQ applies the EQ predicate on the "pwd_hash" field.
func PwdHashEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldPwdHash, v))
}

// PwdHashNEQ applies the NEQ predicate on the "pwd_hash" field.
func PwdHashNEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldPwdHash, v))
}

// PwdHashIn applies the In predicate on the "pwd_hash" field.
func PwdHashIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldPwdHash, vs...))
}

// PwdHashNotIn applies the NotIn predicate on the "pwd_hash" field.
func PwdHashNotIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldPwdHash, vs...))
}

// PwdHashGT applies the GT predicate on the "pwd_hash" field.
func PwdHashGT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldPwdHash, v))
}

// PwdHashGTE applies the GTE predicate on the "pwd_hash" field.
func PwdHashGTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldPwdHash, v))
}

// PwdHashLT applies the LT predicate on the "pwd_hash" field.
func PwdHashLT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldPwdHash, v))
}

// PwdHashLTE applies the LTE predicate on the "pwd_hash" field.
func PwdHashLTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldPwdHash, v))
}

// PwdHashContains applies the Contains predicate on the "pwd_hash" field.
func PwdHashContains(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContains(FieldPwdHash, v))
}

// PwdHashHasPrefix applies the HasPrefix predicate on the "pwd_hash" field.
func PwdHashHasPrefix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasPrefix(FieldPwdHash, v))
}

// PwdHashHasSuffix applies the HasSuffix predicate on the "pwd_hash" field.
func PwdHashHasSuffix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasSuffix(FieldPwdHash, v))
}

// PwdHashEqualFold applies the EqualFold predicate on the "pwd_hash" field.
func PwdHashEqualFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldPwdHash, v))
}

// PwdHashContainsFold applies the ContainsFold predicate on the "pwd_hash" field.
func PwdHashContainsFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldPwdHash, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldActive, v))
}

// CbAPIURLEQ applies the EQ predicate on the "cb_api_url" field.
func CbAPIURLEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIURL, v))
}

// CbAPIURLNEQ applies the NEQ predicate on the "cb_api_url" field.
func CbAPIURLNEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldCbAPIURL, v))
}

// CbAPIURLIn applies the In predicate on the "cb_api_url" field.
func CbAPIURLIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldCbAPIURL, vs...))
}

// CbAPIURLNotIn applies the NotIn predicate on the "cb_api_url" field.
func CbAPIURLNotIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldCbAPIURL, vs...))
}

// CbAPIURLGT applies the GT predicate on the "cb_api_url" field.
func CbAPIURLGT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldCbAPIURL, v))
}

// CbAPIURLGTE applies the GTE predicate on the "cb_api_url" field.
func CbAPIURLGTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldCbAPIURL, v))
}

// CbAPIURLLT applies the LT predicate on the "cb_api_url" field.
func CbAPIURLLT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldCbAPIURL, v))
}

// CbAPIURLLTE applies the LTE predicate on the "cb_api_url" field.
func CbAPIURLLTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldCbAPIURL, v))
}

// CbAPIURLContains applies the Contains predicate on the "cb_api_url" field.
func CbAPIURLContains(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContains(FieldCbAPIURL, v))
}

// CbAPIURLHasPrefix applies the HasPrefix predicate on the "cb_api_url" field.
func CbAPIURLHasPrefix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasPrefix(FieldCbAPIURL, v))
}

// CbAPIURLHasSuffix applies the HasSuffix predicate on the "cb_api_url" field.
func CbAPIURLHasSuffix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasSuffix(FieldCbAPIURL, v))
}

// CbAPIURLIsNil applies the IsNil predicate on the "cb_api_url" field.
func CbAPIURLIsNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIsNull(FieldCbAPIURL))
}

// CbAPIURLNotNil applies the NotNil predicate on the "cb_api_url" field.
func CbAPIURLNotNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotNull(FieldCbAPIURL))
}

// CbAPIURLEqualFold applies the EqualFold predicate on the "cb_api_url" field.
func CbAPIURLEqualFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldCbAPIURL, v))
}

// CbAPIURLContainsFold applies the ContainsFold predicate on the "cb_api_url" field.
func CbAPIURLContainsFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldCbAPIURL, v))
}

// CbAPIAuthEQ applies the EQ predicate on the "cb_api_auth" field.
func CbAPIAuthEQ(v CbAPIAuth) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIAuth, v))
}

// CbAPIAuthNEQ applies the NEQ predicate on the "cb_api_auth" field.
func CbAPIAuthNEQ(v CbAPIAuth) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldCbAPIAuth, v))
}

// CbAPIAuthIn applies the In predicate on the "cb_api_auth" field.
func CbAPIAuthIn(vs ...CbAPIAuth) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldCbAPIAuth, vs...))
}

// CbAPIAuthNotIn applies the NotIn predicate on the "cb_api_auth" field.
func CbAPIAuthNotIn(vs ...CbAPIAuth) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldCbAPIAuth, vs...))
}

// CbAPIAuthIsNil applies the IsNil predicate on the "cb_api_auth" field.
func CbAPIAuthIsNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIsNull(FieldCbAPIAuth))
}

// CbAPIAuthNotNil applies the NotNil predicate on the "cb_api_auth" field.
func CbAPIAuthNotNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotNull(FieldCbAPIAuth))
}

// CbAPIUserEQ applies the EQ predicate on the "cb_api_user" field.
func CbAPIUserEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIUser, v))
}

// CbAPIUserNEQ applies the NEQ predicate on the "cb_api_user" field.
func CbAPIUserNEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldCbAPIUser, v))
}

// CbAPIUserIn applies the In predicate on the "cb_api_user" field.
func CbAPIUserIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldCbAPIUser, vs...))
}

// CbAPIUserNotIn applies the NotIn predicate on the "cb_api_user" field.
func CbAPIUserNotIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldCbAPIUser, vs...))
}

// CbAPIUserGT applies the GT predicate on the "cb_api_user" field.
func CbAPIUserGT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldCbAPIUser, v))
}

// CbAPIUserGTE applies the GTE predicate on the "cb_api_user" field.
func CbAPIUserGTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldCbAPIUser, v))
}

// CbAPIUserLT applies the LT predicate on the "cb_api_user" field.
func CbAPIUserLT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldCbAPIUser, v))
}

// CbAPIUserLTE applies the LTE predicate on the "cb_api_user" field.
func CbAPIUserLTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldCbAPIUser, v))
}

// CbAPIUserContains applies the Contains predicate on the "cb_api_user" field.
func CbAPIUserContains(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContains(FieldCbAPIUser, v))
}

// CbAPIUserHasPrefix applies the HasPrefix predicate on the "cb_api_user" field.
func CbAPIUserHasPrefix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasPrefix(FieldCbAPIUser, v))
}

// CbAPIUserHasSuffix applies the HasSuffix predicate on the "cb_api_user" field.
func CbAPIUserHasSuffix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasSuffix(FieldCbAPIUser, v))
}

// CbAPIUserIsNil applies the IsNil predicate on the "cb_api_user" field.
func CbAPIUserIsNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIsNull(FieldCbAPIUser))
}

// CbAPIUserNotNil applies the NotNil predicate on the "cb_api_user" field.
func CbAPIUserNotNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotNull(FieldCbAPIUser))
}

// CbAPIUserEqualFold applies the EqualFold predicate on the "cb_api_user" field.
func CbAPIUserEqualFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldCbAPIUser, v))
}

// CbAPIUserContainsFold applies the ContainsFold predicate on the "cb_api_user" field.
func CbAPIUserContainsFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldCbAPIUser, v))
}

// CbAPIPwdEQ applies the EQ predicate on the "cb_api_pwd" field.
func CbAPIPwdEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIPwd, v))
}

// CbAPIPwdNEQ applies the NEQ predicate on the "cb_api_pwd" field.
func CbAPIPwdNEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldCbAPIPwd, v))
}

// CbAPIPwdIn applies the In predicate on the "cb_api_pwd" field.
func CbAPIPwdIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldCbAPIPwd, vs...))
}

// CbAPIPwdNotIn applies the NotIn predicate on the "cb_api_pwd" field.
func CbAPIPwdNotIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldCbAPIPwd, vs...))
}

// CbAPIPwdGT applies the GT predicate on the "cb_api_pwd" field.
func CbAPIPwdGT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldCbAPIPwd, v))
}

// CbAPIPwdGTE applies the GTE predicate on the "cb_api_pwd" field.
func CbAPIPwdGTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldCbAPIPwd, v))
}

// CbAPIPwdLT applies the LT predicate on the "cb_api_pwd" field.
func CbAPIPwdLT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldCbAPIPwd, v))
}

// CbAPIPwdLTE applies the LTE predicate on the "cb_api_pwd" field.
func CbAPIPwdLTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldCbAPIPwd, v))
}

// CbAPIPwdContains applies the Contains predicate on the "cb_api_pwd" field.
func CbAPIPwdContains(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContains(FieldCbAPIPwd, v))
}

// CbAPIPwdHasPrefix applies the HasPrefix predicate on the "cb_api_pwd" field.
func CbAPIPwdHasPrefix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasPrefix(FieldCbAPIPwd, v))
}

// CbAPIPwdHasSuffix applies the HasSuffix predicate on the "cb_api_pwd" field.
func CbAPIPwdHasSuffix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasSuffix(FieldCbAPIPwd, v))
}

// CbAPIPwdIsNil applies the IsNil predicate on the "cb_api_pwd" field.
func CbAPIPwdIsNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIsNull(FieldCbAPIPwd))
}

// CbAPIPwdNotNil applies the NotNil predicate on the "cb_api_pwd" field.
func CbAPIPwdNotNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotNull(FieldCbAPIPwd))
}

// CbAPIPwdEqualFold applies the EqualFold predicate on the "cb_api_pwd" field.
func CbAPIPwdEqualFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldCbAPIPwd, v))
}

// CbAPIPwdContainsFold applies the ContainsFold predicate on the "cb_api_pwd" field.
func CbAPIPwdContainsFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldCbAPIPwd, v))
}

// CbAPITokenEQ applies the EQ predicate on the "cb_api_token" field.
func CbAPITokenEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEQ(FieldCbAPIToken, v))
}

// CbAPITokenNEQ applies the NEQ predicate on the "cb_api_token" field.
func CbAPITokenNEQ(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNEQ(FieldCbAPIToken, v))
}

// CbAPITokenIn applies the In predicate on the "cb_api_token" field.
func CbAPITokenIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIn(FieldCbAPIToken, vs...))
}

// CbAPITokenNotIn applies the NotIn predicate on the "cb_api_token" field.
func CbAPITokenNotIn(vs ...string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotIn(FieldCbAPIToken, vs...))
}

// CbAPITokenGT applies the GT predicate on the "cb_api_token" field.
func CbAPITokenGT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGT(FieldCbAPIToken, v))
}

// CbAPITokenGTE applies the GTE predicate on the "cb_api_token" field.
func CbAPITokenGTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldGTE(FieldCbAPIToken, v))
}

// CbAPITokenLT applies the LT predicate on the "cb_api_token" field.
func CbAPITokenLT(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLT(FieldCbAPIToken, v))
}

// CbAPITokenLTE applies the LTE predicate on the "cb_api_token" field.
func CbAPITokenLTE(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldLTE(FieldCbAPIToken, v))
}

// CbAPITokenContains applies the Contains predicate on the "cb_api_token" field.
func CbAPITokenContains(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContains(FieldCbAPIToken, v))
}

// CbAPITokenHasPrefix applies the HasPrefix predicate on the "cb_api_token" field.
func CbAPITokenHasPrefix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasPrefix(FieldCbAPIToken, v))
}

// CbAPITokenHasSuffix applies the HasSuffix predicate on the "cb_api_token" field.
func CbAPITokenHasSuffix(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldHasSuffix(FieldCbAPIToken, v))
}

// CbAPITokenIsNil applies the IsNil predicate on the "cb_api_token" field.
func CbAPITokenIsNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIsNull(FieldCbAPIToken))
}

// CbAPITokenNotNil applies the NotNil predicate on the "cb_api_token" field.
func CbAPITokenNotNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotNull(FieldCbAPIToken))
}

// CbAPITokenEqualFold applies the EqualFold predicate on the "cb_api_token" field.
func CbAPITokenEqualFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldEqualFold(FieldCbAPIToken, v))
}

// CbAPITokenContainsFold applies the ContainsFold predicate on the "cb_api_token" field.
func CbAPITokenContainsFold(v string) predicate.ApiUser {
	return predicate.ApiUser(sql.FieldContainsFold(FieldCbAPIToken, v))
}

// CbAPIEndpointsIsNil applies the IsNil predicate on the "cb_api_endpoints" field.
func CbAPIEndpointsIsNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldIsNull(FieldCbAPIEndpoints))
}

// CbAPIEndpointsNotNil applies the NotNil predicate on the "cb_api_endpoints" field.
func CbAPIEndpointsNotNil() predicate.ApiUser {
	return predicate.ApiUser(sql.FieldNotNull(FieldCbAPIEndpoints))
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.ApiUserToken) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuditLogs applies the HasEdge predicate on the "audit_logs" edge.
func HasAuditLogs() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditLogsWith applies the HasEdge predicate on the "audit_logs" edge with a given conditions (other predicates).
func HasAuditLogsWith(preds ...predicate.AuditLog) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newAuditLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedEstimates applies the HasEdge predicate on the "created_estimates" edge.
func HasCreatedEstimates() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedEstimatesTable, CreatedEstimatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedEstimatesWith applies the HasEdge predicate on the "created_estimates" edge with a given conditions (other predicates).
func HasCreatedEstimatesWith(preds ...predicate.Estimate) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newCreatedEstimatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedJobs applies the HasEdge predicate on the "created_jobs" edge.
func HasCreatedJobs() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedJobsTable, CreatedJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedJobsWith applies the HasEdge predicate on the "created_jobs" edge with a given conditions (other predicates).
func HasCreatedJobsWith(preds ...predicate.Job) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newCreatedJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedPartners applies the HasEdge predicate on the "created_partners" edge.
func HasCreatedPartners() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedPartnersTable, CreatedPartnersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedPartnersWith applies the HasEdge predicate on the "created_partners" edge with a given conditions (other predicates).
func HasCreatedPartnersWith(preds ...predicate.Partner) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newCreatedPartnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurveyProgress applies the HasEdge predicate on the "survey_progress" edge.
func HasSurveyProgress() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveyProgressTable, SurveyProgressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveyProgressWith applies the HasEdge predicate on the "survey_progress" edge with a given conditions (other predicates).
func HasSurveyProgressWith(preds ...predicate.SurveyProgress) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newSurveyProgressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEstimateActivities applies the HasEdge predicate on the "estimate_activities" edge.
func HasEstimateActivities() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EstimateActivitiesTable, EstimateActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimateActivitiesWith applies the HasEdge predicate on the "estimate_activities" edge with a given conditions (other predicates).
func HasEstimateActivitiesWith(preds ...predicate.EstimateActivity) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newEstimateActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserActivities applies the HasEdge predicate on the "user_activities" edge.
func HasUserActivities() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserActivitiesTable, UserActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserActivitiesWith applies the HasEdge predicate on the "user_activities" edge with a given conditions (other predicates).
func HasUserActivitiesWith(preds ...predicate.UserActivity) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newUserActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartnerActivities applies the HasEdge predicate on the "partner_activities" edge.
func HasPartnerActivities() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartnerActivitiesTable, PartnerActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerActivitiesWith applies the HasEdge predicate on the "partner_activities" edge with a given conditions (other predicates).
func HasPartnerActivitiesWith(preds ...predicate.PartnerActivity) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newPartnerActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobActivities applies the HasEdge predicate on the "job_activities" edge.
func HasJobActivities() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobActivitiesTable, JobActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobActivitiesWith applies the HasEdge predicate on the "job_activities" edge with a given conditions (other predicates).
func HasJobActivitiesWith(preds ...predicate.JobActivity) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newJobActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.ChannelMessage) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobProgressHistory applies the HasEdge predicate on the "job_progress_history" edge.
func HasJobProgressHistory() predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobProgressHistoryTable, JobProgressHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobProgressHistoryWith applies the HasEdge predicate on the "job_progress_history" edge with a given conditions (other predicates).
func HasJobProgressHistoryWith(preds ...predicate.JobProgressHistory) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		step := newJobProgressHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiUser) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiUser) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiUser) predicate.ApiUser {
	return predicate.ApiUser(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package apiuser

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apiuser type in the database.
	Label = "api_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPwdHash holds the string denoting the pwd_hash field in the database.
	FieldPwdHash = "pwd_hash"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCbAPIURL holds the string denoting the cb_api_url field in the database.
	FieldCbAPIURL = "cb_api_url"
	// FieldCbAPIAuth holds the string denoting the cb_api_auth field in the database.
	FieldCbAPIAuth = "cb_api_auth"
	// FieldCbAPIUser holds the string denoting the cb_api_user field in the database.
	FieldCbAPIUser = "cb_api_user"
	// FieldCbAPIPwd holds the string denoting the cb_api_pwd field in the database.
	FieldCbAPIPwd = "cb_api_pwd"
	// FieldCbAPIToken holds the string denoting the cb_api_token field in the database.
	FieldCbAPIToken = "cb_api_token"
	// FieldCbAPIEndpoints holds the string denoting the cb_api_endpoints field in the database.
	FieldCbAPIEndpoints = "cb_api_endpoints"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// EdgeAuditLogs holds the string denoting the audit_logs edge name in mutations.
	EdgeAuditLogs = "audit_logs"
	// EdgeCreatedEstimates holds the string denoting the created_estimates edge name in mutations.
	EdgeCreatedEstimates = "created_estimates"
	// EdgeCreatedJobs holds the string denoting the created_jobs edge name in mutations.
	EdgeCreatedJobs = "created_jobs"
	// EdgeCreatedPartners holds the string denoting the created_partners edge name in mutations.
	EdgeCreatedPartners = "created_partners"
	// EdgeSurveyProgress holds the string denoting the survey_progress edge name in mutations.
	EdgeSurveyProgress = "survey_progress"
	// EdgeEstimateActivities holds the string denoting the estimate_activities edge name in mutations.
	EdgeEstimateActivities = "estimate_activities"
	// EdgeUserActivities holds the string denoting the user_activities edge name in mutations.
	EdgeUserActivities = "user_activities"
	// EdgePartnerActivities holds the string denoting the partner_activities edge name in mutations.
	EdgePartnerActivities = "partner_activities"
	// EdgeJobActivities holds the string denoting the job_activities edge name in mutations.
	EdgeJobActivities = "job_activities"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeJobProgressHistory holds the string denoting the job_progress_history edge name in mutations.
	EdgeJobProgressHistory = "job_progress_history"
	// Table holds the table name of the apiuser in the database.
	Table = "api_users"
	// TokensTable is the table that holds the tokens relation/edge.
	TokensTable = "api_user_tokens"
	// TokensInverseTable is the table name for the ApiUserToken entity.
	// It exists in this package in order to avoid circular dependency with the "apiusertoken" package.
	TokensInverseTable = "api_user_tokens"
	// TokensColumn is the table column denoting the tokens relation/edge.
	TokensColumn = "api_user_id"
	// AuditLogsTable is the table that holds the audit_logs relation/edge.
	AuditLogsTable = "audit_logs"
	// AuditLogsInverseTable is the table name for the AuditLog entity.
	// It exists in this package in order to avoid circular dependency with the "auditlog" package.
	AuditLogsInverseTable = "audit_logs"
	// AuditLogsColumn is the table column denoting the audit_logs relation/edge.
	AuditLogsColumn = "api_user_id"
	// CreatedEstimatesTable is the table that holds the created_estimates relation/edge.
	CreatedEstimatesTable = "estimates"
	// CreatedEstimatesInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	CreatedEstimatesInverseTable = "estimates"
	// CreatedEstimatesColumn is the table column denoting the created_estimates relation/edge.
	CreatedEstimatesColumn = "api_user_id"
	// CreatedJobsTable is the table that holds the created_jobs relation/edge.
	CreatedJobsTable = "jobs"
	// CreatedJobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	CreatedJobsInverseTable = "jobs"
	// CreatedJobsColumn is the table column denoting the created_jobs relation/edge.
	CreatedJobsColumn = "api_user_id"
	// CreatedPartnersTable is the table that holds the created_partners relation/edge.
	CreatedPartnersTable = "partners"
	// CreatedPartnersInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	CreatedPartnersInverseTable = "partners"
	// CreatedPartnersColumn is the table column denoting the created_partners relation/edge.
	CreatedPartnersColumn = "api_user_id"
	// SurveyProgressTable is the table that holds the survey_progress relation/edge.
	SurveyProgressTable = "survey_progress"
	// SurveyProgressInverseTable is the table name for the SurveyProgress entity.
	// It exists in this package in order to avoid circular dependency with the "surveyprogress" package.
	SurveyProgressInverseTable = "survey_progress"
	// SurveyProgressColumn is the table column denoting the survey_progress relation/edge.
	SurveyProgressColumn = "api_user_id"
	// EstimateActivitiesTable is the table that holds the estimate_activities relation/edge.
	EstimateActivitiesTable = "estimate_activities"
	// EstimateActivitiesInverseTable is the table name for the EstimateActivity entity.
	// It exists in this package in order to avoid circular dependency with the "estimateactivity" package.
	EstimateActivitiesInverseTable = "estimate_activities"
	// EstimateActivitiesColumn is the table column denoting the estimate_activities relation/edge.
	EstimateActivitiesColumn = "api_user_id"
	// UserActivitiesTable is the table that holds the user_activities relation/edge.
	UserActivitiesTable = "user_activities"
	// UserActivitiesInverseTable is the table name for the UserActivity entity.
	// It exists in this package in order to avoid circular dependency with the "useractivity" package.
	UserActivitiesInverseTable = "user_activities"
	// UserActivitiesColumn is the table column denoting the user_activities relation/edge.
	UserActivitiesColumn = "api_user_id"
	// PartnerActivitiesTable is the table that holds the partner_activities relation/edge.
	PartnerActivitiesTable = "partner_activities"
	// PartnerActivitiesInverseTable is the table name for the PartnerActivity entity.
	// It exists in this package in order to avoid circular dependency with the "partneractivity" package.
	PartnerActivitiesInverseTable = "partner_activities"
	// PartnerActivitiesColumn is the table column denoting the partner_activities relation/edge.
	PartnerActivitiesColumn = "api_user_id"
	// JobActivitiesTable is the table that holds the job_activities relation/edge.
	JobActivitiesTable = "job_activities"
	// JobActivitiesInverseTable is the table name for the JobActivity entity.
	// It exists in this package in order to avoid circular dependency with the "jobactivity" package.
	JobActivitiesInverseTable = "job_activities"
	// JobActivitiesColumn is the table column denoting the job_activities relation/edge.
	JobActivitiesColumn = "api_user_id"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "channel_messages"
	// NotificationsInverseTable is the table name for the ChannelMessage entity.
	// It exists in this package in order to avoid circular dependency with the "channelmessage" package.
	NotificationsInverseTable = "channel_messages"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "from_api_user_id"
	// JobProgressHistoryTable is the table that holds the job_progress_history relation/edge.
	JobProgressHistoryTable = "job_progress_history"
	// JobProgressHistoryInverseTable is the table name for the JobProgressHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobprogresshistory" package.
	JobProgressHistoryInverseTable = "job_progress_history"
	// JobProgressHistoryColumn is the table column denoting the job_progress_history relation/edge.
	JobProgressHistoryColumn = "api_user_id"
)

// Columns holds all SQL columns for apiuser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUsername,
	FieldPwdHash,
	FieldActive,
	FieldCbAPIURL,
	FieldCbAPIAuth,
	FieldCbAPIUser,
	FieldCbAPIPwd,
	FieldCbAPIToken,
	FieldCbAPIEndpoints,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PwdHashValidator is a validator for the "pwd_hash" field. It is called by the builders before save.
	PwdHashValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// CbAPIAuth defines the type for the "cb_api_auth" enum field.
type CbAPIAuth string

// CbAPIAuthNONE is the default value of the CbAPIAuth enum.
const DefaultCbAPIAuth = CbAPIAuthNONE

// CbAPIAuth values.
const (
	CbAPIAuthNONE  CbAPIAuth = "NONE"
	CbAPIAuthBASIC CbAPIAuth = "BASIC"
	CbAPIAuthTOKEN CbAPIAuth = "TOKEN"
	CbAPIAuthOAUTH CbAPIAuth = "OAUTH"
)

func (caa CbAPIAuth) String() string {
	return string(caa)
}

// CbAPIAuthValidator is a validator for the "cb_api_auth" field enum values. It is called by the builders before save.
func CbAPIAuthValidator(caa CbAPIAuth) error {
	switch caa {
	case CbAPIAuthNONE, CbAPIAuthBASIC, CbAPIAuthTOKEN, CbAPIAuthOAUTH:
		return nil
	default:
		return fmt.Errorf("apiuser: invalid enum value for cb_api_auth field: %q", caa)
	}
}

// OrderOption defines the ordering options for the ApiUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPwdHash orders the results by the pwd_hash field.
func ByPwdHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPwdHash, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCbAPIURL orders the results by the cb_api_url field.
func ByCbAPIURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCbAPIURL, opts...).ToFunc()
}

// ByCbAPIAuth orders the results by the cb_api_auth field.
func ByCbAPIAuth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCbAPIAuth, opts...).ToFunc()
}

// ByCbAPIUser orders the results by the cb_api_user field.
func ByCbAPIUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCbAPIUser, opts...).ToFunc()
}

// ByCbAPIPwd orders the results by the cb_api_pwd field.
func ByCbAPIPwd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCbAPIPwd, opts...).ToFunc()
}

// ByCbAPIToken orders the results by the cb_api_token field.
func ByCbAPIToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCbAPIToken, opts...).ToFunc()
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuditLogsCount orders the results by audit_logs count.
func ByAuditLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuditLogsStep(), opts...)
	}
}

// ByAuditLogs orders the results by audit_logs terms.
func ByAuditLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuditLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedEstimatesCount orders the results by created_estimates count.
func ByCreatedEstimatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedEstimatesStep(), opts...)
	}
}

// ByCreatedEstimates orders the results by created_estimates terms.
func ByCreatedEstimates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedEstimatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedJobsCount orders the results by created_jobs count.
func ByCreatedJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedJobsStep(), opts...)
	}
}

// ByCreatedJobs orders the results by created_jobs terms.
func ByCreatedJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedPartnersCount orders the results by created_partners count.
func ByCreatedPartnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedPartnersStep(), opts...)
	}
}

// ByCreatedPartners orders the results by created_partners terms.
func ByCreatedPartners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedPartnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveyProgressCount orders the results by survey_progress count.
func BySurveyProgressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyProgressStep(), opts...)
	}
}

// BySurveyProgress orders the results by survey_progress terms.
func BySurveyProgress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyProgressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEstimateActivitiesCount orders the results by estimate_activities count.
func ByEstimateActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEstimateActivitiesStep(), opts...)
	}
}

// ByEstimateActivities orders the results by estimate_activities terms.
func ByEstimateActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimateActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserActivitiesCount orders the results by user_activities count.
func ByUserActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserActivitiesStep(), opts...)
	}
}

// ByUserActivities orders the results by user_activities terms.
func ByUserActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnerActivitiesCount orders the results by partner_activities count.
func ByPartnerActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerActivitiesStep(), opts...)
	}
}

// ByPartnerActivities orders the results by partner_activities terms.
func ByPartnerActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobActivitiesCount orders the results by job_activities count.
func ByJobActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobActivitiesStep(), opts...)
	}
}

// ByJobActivities orders the results by job_activities terms.
func ByJobActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobProgressHistoryCount orders the results by job_progress_history count.
func ByJobProgressHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobProgressHistoryStep(), opts...)
	}
}

// ByJobProgressHistory orders the results by job_progress_history terms.
func ByJobProgressHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobProgressHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
	)
}
func newAuditLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuditLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
	)
}
func newCreatedEstimatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedEstimatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedEstimatesTable, CreatedEstimatesColumn),
	)
}
func newCreatedJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedJobsTable, CreatedJobsColumn),
	)
}
func newCreatedPartnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedPartnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedPartnersTable, CreatedPartnersColumn),
	)
}
func newSurveyProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyProgressTable, SurveyProgressColumn),
	)
}
func newEstimateActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimateActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EstimateActivitiesTable, EstimateActivitiesColumn),
	)
}
func newUserActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserActivitiesTable, UserActivitiesColumn),
	)
}
func newPartnerActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PartnerActivitiesTable, PartnerActivitiesColumn),
	)
}
func newJobActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobActivitiesTable, JobActivitiesColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
	)
}
func newJobProgressHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobProgressHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobProgressHistoryTable, JobProgressHistoryColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e CbAPIAuth) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *CbAPIAuth) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = CbAPIAuth(str)
	if err := CbAPIAuthValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid CbAPIAuth", str)
	}
	return nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/channel"
	"roofix/ent/channelsub"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelSubUpdate is the builder for updating ChannelSub entities.
type ChannelSubUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelSubMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelSubUpdate builder.
func (csu *ChannelSubUpdate) Where(ps ...predicate.ChannelSub) *ChannelSubUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *ChannelSubUpdate) SetUpdatedAt(t time.Time) *ChannelSubUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetRole sets the "role" field.
func (csu *ChannelSubUpdate) SetRole(e enum.Role) *ChannelSubUpdate {
	csu.mutation.SetRole(e)
	return csu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (csu *ChannelSubUpdate) SetNillableRole(e *enum.Role) *ChannelSubUpdate {
	if e != nil {
		csu.SetRole(*e)
	}
	return csu
}

// ClearRole clears the value of the "role" field.
func (csu *ChannelSubUpdate) ClearRole() *ChannelSubUpdate {
	csu.mutation.ClearRole()
	return csu
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (csu *ChannelSubUpdate) SetChannelID(id string) *ChannelSubUpdate {
	csu.mutation.SetChannelID(id)
	return csu
}

// SetChannel sets the "channel" edge to the Channel entity.
func (csu *ChannelSubUpdate) SetChannel(c *Channel) *ChannelSubUpdate {
	return csu.SetChannelID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csu *ChannelSubUpdate) SetUserID(id string) *ChannelSubUpdate {
	csu.mutation.SetUserID(id)
	return csu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (csu *ChannelSubUpdate) SetNillableUserID(id *string) *ChannelSubUpdate {
	if id != nil {
		csu = csu.SetUserID(*id)
	}
	return csu
}

// SetUser sets the "user" edge to the User entity.
func (csu *ChannelSubUpdate) SetUser(u *User) *ChannelSubUpdate {
	return csu.SetUserID(u.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (csu *ChannelSubUpdate) SetPartnerID(id string) *ChannelSubUpdate {
	csu.mutation.SetPartnerID(id)
	return csu
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (csu *ChannelSubUpdate) SetNillablePartnerID(id *string) *ChannelSubUpdate {
	if id != nil {
		csu = csu.SetPartnerID(*id)
	}
	return csu
}

// SetPartner sets the "partner" edge to the Partner entity.
func (csu *ChannelSubUpdate) SetPartner(p *Partner) *ChannelSubUpdate {
	return csu.SetPartnerID(p.ID)
}

// Mutation returns the ChannelSubMutation object of the builder.
func (csu *ChannelSubUpdate) Mutation() *ChannelSubMutation {
	return csu.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (csu *ChannelSubUpdate) ClearChannel() *ChannelSubUpdate {
	csu.mutation.ClearChannel()
	return csu
}

// ClearUser clears the "user" edge to the User entity.
func (csu *ChannelSubUpdate) ClearUser() *ChannelSubUpdate {
	csu.mutation.ClearUser()
	return csu
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (csu *ChannelSubUpdate) ClearPartner() *ChannelSubUpdate {
	csu.mutation.ClearPartner()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ChannelSubUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ChannelSubUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ChannelSubUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ChannelSubUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *ChannelSubUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := channelsub.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *ChannelSubUpdate) check() error {
	if v, ok := csu.mutation.Role(); ok {
		if err := channelsub.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ChannelSub.role": %w`, err)}
		}
	}
	if _, ok := csu.mutation.ChannelID(); csu.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChannelSub.channel"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csu *ChannelSubUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelSubUpdate {
	csu.modifiers = append(csu.modifiers, modifiers...)
	return csu
}

func (csu *ChannelSubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(channelsub.Table, channelsub.Columns, sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(channelsub.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.Role(); ok {
		_spec.SetField(channelsub.FieldRole, field.TypeEnum, value)
	}
	if csu.mutation.RoleCleared() {
		_spec.ClearField(channelsub.FieldRole, field.TypeEnum)
	}
	if csu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.ChannelTable,
			Columns: []string{channelsub.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.ChannelTable,
			Columns: []string{channelsub.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.UserTable,
			Columns: []string{channelsub.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.UserTable,
			Columns: []string{channelsub.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.PartnerTable,
			Columns: []string{channelsub.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.PartnerTable,
			Columns: []string{channelsub.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(csu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelsub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ChannelSubUpdateOne is the builder for updating a single ChannelSub entity.
type ChannelSubUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelSubMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *ChannelSubUpdateOne) SetUpdatedAt(t time.Time) *ChannelSubUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetRole sets the "role" field.
func (csuo *ChannelSubUpdateOne) SetRole(e enum.Role) *ChannelSubUpdateOne {
	csuo.mutation.SetRole(e)
	return csuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (csuo *ChannelSubUpdateOne) SetNillableRole(e *enum.Role) *ChannelSubUpdateOne {
	if e != nil {
		csuo.SetRole(*e)
	}
	return csuo
}

// ClearRole clears the value of the "role" field.
func (csuo *ChannelSubUpdateOne) ClearRole() *ChannelSubUpdateOne {
	csuo.mutation.ClearRole()
	return csuo
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (csuo *ChannelSubUpdateOne) SetChannelID(id string) *ChannelSubUpdateOne {
	csuo.mutation.SetChannelID(id)
	return csuo
}

// SetChannel sets the "channel" edge to the Channel entity.
func (csuo *ChannelSubUpdateOne) SetChannel(c *Channel) *ChannelSubUpdateOne {
	return csuo.SetChannelID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csuo *ChannelSubUpdateOne) SetUserID(id string) *ChannelSubUpdateOne {
	csuo.mutation.SetUserID(id)
	return csuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (csuo *ChannelSubUpdateOne) SetNillableUserID(id *string) *ChannelSubUpdateOne {
	if id != nil {
		csuo = csuo.SetUserID(*id)
	}
	return csuo
}

// SetUser sets the "user" edge to the User entity.
func (csuo *ChannelSubUpdateOne) SetUser(u *User) *ChannelSubUpdateOne {
	return csuo.SetUserID(u.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (csuo *ChannelSubUpdateOne) SetPartnerID(id string) *ChannelSubUpdateOne {
	csuo.mutation.SetPartnerID(id)
	return csuo
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (csuo *ChannelSubUpdateOne) SetNillablePartnerID(id *string) *ChannelSubUpdateOne {
	if id != nil {
		csuo = csuo.SetPartnerID(*id)
	}
	return csuo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (csuo *ChannelSubUpdateOne) SetPartner(p *Partner) *ChannelSubUpdateOne {
	return csuo.SetPartnerID(p.ID)
}

// Mutation returns the ChannelSubMutation object of the builder.
func (csuo *ChannelSubUpdateOne) Mutation() *ChannelSubMutation {
	return csuo.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (csuo *ChannelSubUpdateOne) ClearChannel() *ChannelSubUpdateOne {
	csuo.mutation.ClearChannel()
	return csuo
}

// ClearUser clears the "user" edge to the User entity.
func (csuo *ChannelSubUpdateOne) ClearUser() *ChannelSubUpdateOne {
	csuo.mutation.ClearUser()
	return csuo
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (csuo *ChannelSubUpdateOne) ClearPartner() *ChannelSubUpdateOne {
	csuo.mutation.ClearPartner()
	return csuo
}

// Where appends a list predicates to the ChannelSubUpdate builder.
func (csuo *ChannelSubUpdateOne) Where(ps ...predicate.ChannelSub) *ChannelSubUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ChannelSubUpdateOne) Select(field string, fields ...string) *ChannelSubUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ChannelSub entity.
func (csuo *ChannelSubUpdateOne) Save(ctx context.Context) (*ChannelSub, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ChannelSubUpdateOne) SaveX(ctx context.Context) *ChannelSub {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ChannelSubUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ChannelSubUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *ChannelSubUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := channelsub.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *ChannelSubUpdateOne) check() error {
	if v, ok := csuo.mutation.Role(); ok {
		if err := channelsub.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ChannelSub.role": %w`, err)}
		}
	}
	if _, ok := csuo.mutation.ChannelID(); csuo.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChannelSub.channel"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csuo *ChannelSubUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelSubUpdateOne {
	csuo.modifiers = append(csuo.modifiers, modifiers...)
	return csuo
}

func (csuo *ChannelSubUpdateOne) sqlSave(ctx context.Context) (_node *ChannelSub, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(channelsub.Table, channelsub.Columns, sqlgraph.NewFieldSpec(channelsub.FieldID, field.TypeString))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChannelSub.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelsub.FieldID)
		for _, f := range fields {
			if !channelsub.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channelsub.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channelsub.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.Role(); ok {
		_spec.SetField(channelsub.FieldRole, field.TypeEnum, value)
	}
	if csuo.mutation.RoleCleared() {
		_spec.ClearField(channelsub.FieldRole, field.TypeEnum)
	}
	if csuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.ChannelTable,
			Columns: []string{channelsub.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.ChannelTable,
			Columns: []string{channelsub.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.UserTable,
			Columns: []string{channelsub.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.UserTable,
			Columns: []string{channelsub.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.PartnerTable,
			Columns: []string{channelsub.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelsub.PartnerTable,
			Columns: []string{channelsub.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(csuo.modifiers...)
	_node = &ChannelSub{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelsub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}

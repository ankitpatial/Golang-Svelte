// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/predicate"
	"roofix/ent/usersessionsocket"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSessionSocketDelete is the builder for deleting a UserSessionSocket entity.
type UserSessionSocketDelete struct {
	config
	hooks    []Hook
	mutation *UserSessionSocketMutation
}

// Where appends a list predicates to the UserSessionSocketDelete builder.
func (ussd *UserSessionSocketDelete) Where(ps ...predicate.UserSessionSocket) *UserSessionSocketDelete {
	ussd.mutation.Where(ps...)
	return ussd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ussd *UserSessionSocketDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ussd.sqlExec, ussd.mutation, ussd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ussd *UserSessionSocketDelete) ExecX(ctx context.Context) int {
	n, err := ussd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ussd *UserSessionSocketDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usersessionsocket.Table, sqlgraph.NewFieldSpec(usersessionsocket.FieldID, field.TypeString))
	if ps := ussd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ussd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ussd.mutation.done = true
	return affected, err
}

// UserSessionSocketDeleteOne is the builder for deleting a single UserSessionSocket entity.
type UserSessionSocketDeleteOne struct {
	ussd *UserSessionSocketDelete
}

// Where appends a list predicates to the UserSessionSocketDelete builder.
func (ussdo *UserSessionSocketDeleteOne) Where(ps ...predicate.UserSessionSocket) *UserSessionSocketDeleteOne {
	ussdo.ussd.mutation.Where(ps...)
	return ussdo
}

// Exec executes the deletion query.
func (ussdo *UserSessionSocketDeleteOne) Exec(ctx context.Context) error {
	n, err := ussdo.ussd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usersessionsocket.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ussdo *UserSessionSocketDeleteOne) ExecX(ctx context.Context) {
	if err := ussdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerTrainingVideoDelete is the builder for deleting a PartnerTrainingVideo entity.
type PartnerTrainingVideoDelete struct {
	config
	hooks    []Hook
	mutation *PartnerTrainingVideoMutation
}

// Where appends a list predicates to the PartnerTrainingVideoDelete builder.
func (ptvd *PartnerTrainingVideoDelete) Where(ps ...predicate.PartnerTrainingVideo) *PartnerTrainingVideoDelete {
	ptvd.mutation.Where(ps...)
	return ptvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptvd *PartnerTrainingVideoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptvd.sqlExec, ptvd.mutation, ptvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptvd *PartnerTrainingVideoDelete) ExecX(ctx context.Context) int {
	n, err := ptvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptvd *PartnerTrainingVideoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(partnertrainingvideo.Table, sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString))
	if ps := ptvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptvd.mutation.done = true
	return affected, err
}

// PartnerTrainingVideoDeleteOne is the builder for deleting a single PartnerTrainingVideo entity.
type PartnerTrainingVideoDeleteOne struct {
	ptvd *PartnerTrainingVideoDelete
}

// Where appends a list predicates to the PartnerTrainingVideoDelete builder.
func (ptvdo *PartnerTrainingVideoDeleteOne) Where(ps ...predicate.PartnerTrainingVideo) *PartnerTrainingVideoDeleteOne {
	ptvdo.ptvd.mutation.Where(ps...)
	return ptvdo
}

// Exec executes the deletion query.
func (ptvdo *PartnerTrainingVideoDeleteOne) Exec(ctx context.Context) error {
	n, err := ptvdo.ptvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{partnertrainingvideo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptvdo *PartnerTrainingVideoDeleteOne) ExecX(ctx context.Context) {
	if err := ptvdo.Exec(ctx); err != nil {
		panic(err)
	}
}

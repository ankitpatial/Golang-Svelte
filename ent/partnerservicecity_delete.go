// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/partnerservicecity"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerServiceCityDelete is the builder for deleting a PartnerServiceCity entity.
type PartnerServiceCityDelete struct {
	config
	hooks    []Hook
	mutation *PartnerServiceCityMutation
}

// Where appends a list predicates to the PartnerServiceCityDelete builder.
func (pscd *PartnerServiceCityDelete) Where(ps ...predicate.PartnerServiceCity) *PartnerServiceCityDelete {
	pscd.mutation.Where(ps...)
	return pscd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pscd *PartnerServiceCityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pscd.sqlExec, pscd.mutation, pscd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pscd *PartnerServiceCityDelete) ExecX(ctx context.Context) int {
	n, err := pscd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pscd *PartnerServiceCityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(partnerservicecity.Table, sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString))
	if ps := pscd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pscd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pscd.mutation.done = true
	return affected, err
}

// PartnerServiceCityDeleteOne is the builder for deleting a single PartnerServiceCity entity.
type PartnerServiceCityDeleteOne struct {
	pscd *PartnerServiceCityDelete
}

// Where appends a list predicates to the PartnerServiceCityDelete builder.
func (pscdo *PartnerServiceCityDeleteOne) Where(ps ...predicate.PartnerServiceCity) *PartnerServiceCityDeleteOne {
	pscdo.pscd.mutation.Where(ps...)
	return pscdo
}

// Exec executes the deletion query.
func (pscdo *PartnerServiceCityDeleteOne) Exec(ctx context.Context) error {
	n, err := pscdo.pscd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{partnerservicecity.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pscdo *PartnerServiceCityDeleteOne) ExecX(ctx context.Context) {
	if err := pscdo.Exec(ctx); err != nil {
		panic(err)
	}
}

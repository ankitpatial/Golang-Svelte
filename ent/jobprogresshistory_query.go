// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"roofix/ent/apiuser"
	"roofix/ent/job"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobProgressHistoryQuery is the builder for querying JobProgressHistory entities.
type JobProgressHistoryQuery struct {
	config
	ctx                *QueryContext
	order              []jobprogresshistory.OrderOption
	inters             []Interceptor
	predicates         []predicate.JobProgressHistory
	withJob            *JobQuery
	withCreator        *UserQuery
	withCreatorAPIUser *ApiUserQuery
	withFKs            bool
	loadTotal          []func(context.Context, []*JobProgressHistory) error
	modifiers          []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobProgressHistoryQuery builder.
func (jphq *JobProgressHistoryQuery) Where(ps ...predicate.JobProgressHistory) *JobProgressHistoryQuery {
	jphq.predicates = append(jphq.predicates, ps...)
	return jphq
}

// Limit the number of records to be returned by this query.
func (jphq *JobProgressHistoryQuery) Limit(limit int) *JobProgressHistoryQuery {
	jphq.ctx.Limit = &limit
	return jphq
}

// Offset to start from.
func (jphq *JobProgressHistoryQuery) Offset(offset int) *JobProgressHistoryQuery {
	jphq.ctx.Offset = &offset
	return jphq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jphq *JobProgressHistoryQuery) Unique(unique bool) *JobProgressHistoryQuery {
	jphq.ctx.Unique = &unique
	return jphq
}

// Order specifies how the records should be ordered.
func (jphq *JobProgressHistoryQuery) Order(o ...jobprogresshistory.OrderOption) *JobProgressHistoryQuery {
	jphq.order = append(jphq.order, o...)
	return jphq
}

// QueryJob chains the current query on the "job" edge.
func (jphq *JobProgressHistoryQuery) QueryJob() *JobQuery {
	query := (&JobClient{config: jphq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jphq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jphq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogresshistory.Table, jobprogresshistory.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobprogresshistory.JobTable, jobprogresshistory.JobColumn),
		)
		fromU = sqlgraph.SetNeighbors(jphq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (jphq *JobProgressHistoryQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: jphq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jphq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jphq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogresshistory.Table, jobprogresshistory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobprogresshistory.CreatorTable, jobprogresshistory.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jphq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatorAPIUser chains the current query on the "creator_api_user" edge.
func (jphq *JobProgressHistoryQuery) QueryCreatorAPIUser() *ApiUserQuery {
	query := (&ApiUserClient{config: jphq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jphq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jphq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogresshistory.Table, jobprogresshistory.FieldID, selector),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobprogresshistory.CreatorAPIUserTable, jobprogresshistory.CreatorAPIUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(jphq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobProgressHistory entity from the query.
// Returns a *NotFoundError when no JobProgressHistory was found.
func (jphq *JobProgressHistoryQuery) First(ctx context.Context) (*JobProgressHistory, error) {
	nodes, err := jphq.Limit(1).All(setContextOp(ctx, jphq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobprogresshistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) FirstX(ctx context.Context) *JobProgressHistory {
	node, err := jphq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobProgressHistory ID from the query.
// Returns a *NotFoundError when no JobProgressHistory ID was found.
func (jphq *JobProgressHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jphq.Limit(1).IDs(setContextOp(ctx, jphq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobprogresshistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := jphq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobProgressHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobProgressHistory entity is found.
// Returns a *NotFoundError when no JobProgressHistory entities are found.
func (jphq *JobProgressHistoryQuery) Only(ctx context.Context) (*JobProgressHistory, error) {
	nodes, err := jphq.Limit(2).All(setContextOp(ctx, jphq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobprogresshistory.Label}
	default:
		return nil, &NotSingularError{jobprogresshistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) OnlyX(ctx context.Context) *JobProgressHistory {
	node, err := jphq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobProgressHistory ID in the query.
// Returns a *NotSingularError when more than one JobProgressHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (jphq *JobProgressHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jphq.Limit(2).IDs(setContextOp(ctx, jphq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobprogresshistory.Label}
	default:
		err = &NotSingularError{jobprogresshistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := jphq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobProgressHistories.
func (jphq *JobProgressHistoryQuery) All(ctx context.Context) ([]*JobProgressHistory, error) {
	ctx = setContextOp(ctx, jphq.ctx, "All")
	if err := jphq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobProgressHistory, *JobProgressHistoryQuery]()
	return withInterceptors[[]*JobProgressHistory](ctx, jphq, qr, jphq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) AllX(ctx context.Context) []*JobProgressHistory {
	nodes, err := jphq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobProgressHistory IDs.
func (jphq *JobProgressHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if jphq.ctx.Unique == nil && jphq.path != nil {
		jphq.Unique(true)
	}
	ctx = setContextOp(ctx, jphq.ctx, "IDs")
	if err = jphq.Select(jobprogresshistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := jphq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jphq *JobProgressHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jphq.ctx, "Count")
	if err := jphq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jphq, querierCount[*JobProgressHistoryQuery](), jphq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) CountX(ctx context.Context) int {
	count, err := jphq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jphq *JobProgressHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jphq.ctx, "Exist")
	switch _, err := jphq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jphq *JobProgressHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := jphq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobProgressHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jphq *JobProgressHistoryQuery) Clone() *JobProgressHistoryQuery {
	if jphq == nil {
		return nil
	}
	return &JobProgressHistoryQuery{
		config:             jphq.config,
		ctx:                jphq.ctx.Clone(),
		order:              append([]jobprogresshistory.OrderOption{}, jphq.order...),
		inters:             append([]Interceptor{}, jphq.inters...),
		predicates:         append([]predicate.JobProgressHistory{}, jphq.predicates...),
		withJob:            jphq.withJob.Clone(),
		withCreator:        jphq.withCreator.Clone(),
		withCreatorAPIUser: jphq.withCreatorAPIUser.Clone(),
		// clone intermediate query.
		sql:  jphq.sql.Clone(),
		path: jphq.path,
	}
}

// WithJob tells the query-builder to eager-load the nodes that are connected to
// the "job" edge. The optional arguments are used to configure the query builder of the edge.
func (jphq *JobProgressHistoryQuery) WithJob(opts ...func(*JobQuery)) *JobProgressHistoryQuery {
	query := (&JobClient{config: jphq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jphq.withJob = query
	return jphq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (jphq *JobProgressHistoryQuery) WithCreator(opts ...func(*UserQuery)) *JobProgressHistoryQuery {
	query := (&UserClient{config: jphq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jphq.withCreator = query
	return jphq
}

// WithCreatorAPIUser tells the query-builder to eager-load the nodes that are connected to
// the "creator_api_user" edge. The optional arguments are used to configure the query builder of the edge.
func (jphq *JobProgressHistoryQuery) WithCreatorAPIUser(opts ...func(*ApiUserQuery)) *JobProgressHistoryQuery {
	query := (&ApiUserClient{config: jphq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jphq.withCreatorAPIUser = query
	return jphq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobProgressHistory.Query().
//		GroupBy(jobprogresshistory.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jphq *JobProgressHistoryQuery) GroupBy(field string, fields ...string) *JobProgressHistoryGroupBy {
	jphq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobProgressHistoryGroupBy{build: jphq}
	grbuild.flds = &jphq.ctx.Fields
	grbuild.label = jobprogresshistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.JobProgressHistory.Query().
//		Select(jobprogresshistory.FieldCreatedAt).
//		Scan(ctx, &v)
func (jphq *JobProgressHistoryQuery) Select(fields ...string) *JobProgressHistorySelect {
	jphq.ctx.Fields = append(jphq.ctx.Fields, fields...)
	sbuild := &JobProgressHistorySelect{JobProgressHistoryQuery: jphq}
	sbuild.label = jobprogresshistory.Label
	sbuild.flds, sbuild.scan = &jphq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobProgressHistorySelect configured with the given aggregations.
func (jphq *JobProgressHistoryQuery) Aggregate(fns ...AggregateFunc) *JobProgressHistorySelect {
	return jphq.Select().Aggregate(fns...)
}

func (jphq *JobProgressHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jphq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jphq); err != nil {
				return err
			}
		}
	}
	for _, f := range jphq.ctx.Fields {
		if !jobprogresshistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jphq.path != nil {
		prev, err := jphq.path(ctx)
		if err != nil {
			return err
		}
		jphq.sql = prev
	}
	return nil
}

func (jphq *JobProgressHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobProgressHistory, error) {
	var (
		nodes       = []*JobProgressHistory{}
		withFKs     = jphq.withFKs
		_spec       = jphq.querySpec()
		loadedTypes = [3]bool{
			jphq.withJob != nil,
			jphq.withCreator != nil,
			jphq.withCreatorAPIUser != nil,
		}
	)
	if jphq.withJob != nil || jphq.withCreator != nil || jphq.withCreatorAPIUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, jobprogresshistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobProgressHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobProgressHistory{config: jphq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jphq.modifiers) > 0 {
		_spec.Modifiers = jphq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jphq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jphq.withJob; query != nil {
		if err := jphq.loadJob(ctx, query, nodes, nil,
			func(n *JobProgressHistory, e *Job) { n.Edges.Job = e }); err != nil {
			return nil, err
		}
	}
	if query := jphq.withCreator; query != nil {
		if err := jphq.loadCreator(ctx, query, nodes, nil,
			func(n *JobProgressHistory, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := jphq.withCreatorAPIUser; query != nil {
		if err := jphq.loadCreatorAPIUser(ctx, query, nodes, nil,
			func(n *JobProgressHistory, e *ApiUser) { n.Edges.CreatorAPIUser = e }); err != nil {
			return nil, err
		}
	}
	for i := range jphq.loadTotal {
		if err := jphq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jphq *JobProgressHistoryQuery) loadJob(ctx context.Context, query *JobQuery, nodes []*JobProgressHistory, init func(*JobProgressHistory), assign func(*JobProgressHistory, *Job)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*JobProgressHistory)
	for i := range nodes {
		if nodes[i].job_id == nil {
			continue
		}
		fk := *nodes[i].job_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(job.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jphq *JobProgressHistoryQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*JobProgressHistory, init func(*JobProgressHistory), assign func(*JobProgressHistory, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*JobProgressHistory)
	for i := range nodes {
		if nodes[i].user_id == nil {
			continue
		}
		fk := *nodes[i].user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jphq *JobProgressHistoryQuery) loadCreatorAPIUser(ctx context.Context, query *ApiUserQuery, nodes []*JobProgressHistory, init func(*JobProgressHistory), assign func(*JobProgressHistory, *ApiUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*JobProgressHistory)
	for i := range nodes {
		if nodes[i].api_user_id == nil {
			continue
		}
		fk := *nodes[i].api_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apiuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "api_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jphq *JobProgressHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jphq.querySpec()
	if len(jphq.modifiers) > 0 {
		_spec.Modifiers = jphq.modifiers
	}
	_spec.Node.Columns = jphq.ctx.Fields
	if len(jphq.ctx.Fields) > 0 {
		_spec.Unique = jphq.ctx.Unique != nil && *jphq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jphq.driver, _spec)
}

func (jphq *JobProgressHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobprogresshistory.Table, jobprogresshistory.Columns, sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString))
	_spec.From = jphq.sql
	if unique := jphq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jphq.path != nil {
		_spec.Unique = true
	}
	if fields := jphq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobprogresshistory.FieldID)
		for i := range fields {
			if fields[i] != jobprogresshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jphq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jphq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jphq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jphq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jphq *JobProgressHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jphq.driver.Dialect())
	t1 := builder.Table(jobprogresshistory.Table)
	columns := jphq.ctx.Fields
	if len(columns) == 0 {
		columns = jobprogresshistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jphq.sql != nil {
		selector = jphq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jphq.ctx.Unique != nil && *jphq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jphq.modifiers {
		m(selector)
	}
	for _, p := range jphq.predicates {
		p(selector)
	}
	for _, p := range jphq.order {
		p(selector)
	}
	if offset := jphq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jphq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jphq *JobProgressHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *JobProgressHistorySelect {
	jphq.modifiers = append(jphq.modifiers, modifiers...)
	return jphq.Select()
}

// JobProgressHistoryGroupBy is the group-by builder for JobProgressHistory entities.
type JobProgressHistoryGroupBy struct {
	selector
	build *JobProgressHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jphgb *JobProgressHistoryGroupBy) Aggregate(fns ...AggregateFunc) *JobProgressHistoryGroupBy {
	jphgb.fns = append(jphgb.fns, fns...)
	return jphgb
}

// Scan applies the selector query and scans the result into the given value.
func (jphgb *JobProgressHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jphgb.build.ctx, "GroupBy")
	if err := jphgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobProgressHistoryQuery, *JobProgressHistoryGroupBy](ctx, jphgb.build, jphgb, jphgb.build.inters, v)
}

func (jphgb *JobProgressHistoryGroupBy) sqlScan(ctx context.Context, root *JobProgressHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jphgb.fns))
	for _, fn := range jphgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jphgb.flds)+len(jphgb.fns))
		for _, f := range *jphgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jphgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jphgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobProgressHistorySelect is the builder for selecting fields of JobProgressHistory entities.
type JobProgressHistorySelect struct {
	*JobProgressHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jphs *JobProgressHistorySelect) Aggregate(fns ...AggregateFunc) *JobProgressHistorySelect {
	jphs.fns = append(jphs.fns, fns...)
	return jphs
}

// Scan applies the selector query and scans the result into the given value.
func (jphs *JobProgressHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jphs.ctx, "Select")
	if err := jphs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobProgressHistoryQuery, *JobProgressHistorySelect](ctx, jphs.JobProgressHistoryQuery, jphs, jphs.inters, v)
}

func (jphs *JobProgressHistorySelect) sqlScan(ctx context.Context, root *JobProgressHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jphs.fns))
	for _, fn := range jphs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jphs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jphs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jphs *JobProgressHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *JobProgressHistorySelect {
	jphs.modifiers = append(jphs.modifiers, modifiers...)
	return jphs
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EstimateActivity is the model entity for the EstimateActivity schema.
type EstimateActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// any related data
	Raw map[string]interface{} `json:"raw,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EstimateActivityQuery when eager-loading is set.
	Edges        EstimateActivityEdges `json:"edges"`
	api_user_id  *string
	estimate_id  *string
	creator_id   *string
	selectValues sql.SelectValues
}

// EstimateActivityEdges holds the relations/edges for other nodes in the graph.
type EstimateActivityEdges struct {
	// Estimate holds the value of the estimate edge.
	Estimate *Estimate `json:"estimate,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// CreatorAPI holds the value of the creator_api edge.
	CreatorAPI *ApiUser `json:"creator_api,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// EstimateOrErr returns the Estimate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateActivityEdges) EstimateOrErr() (*Estimate, error) {
	if e.loadedTypes[0] {
		if e.Estimate == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: estimate.Label}
		}
		return e.Estimate, nil
	}
	return nil, &NotLoadedError{edge: "estimate"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateActivityEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CreatorAPIOrErr returns the CreatorAPI value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EstimateActivityEdges) CreatorAPIOrErr() (*ApiUser, error) {
	if e.loadedTypes[2] {
		if e.CreatorAPI == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.CreatorAPI, nil
	}
	return nil, &NotLoadedError{edge: "creator_api"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EstimateActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case estimateactivity.FieldRaw:
			values[i] = new([]byte)
		case estimateactivity.FieldID, estimateactivity.FieldDescription:
			values[i] = new(sql.NullString)
		case estimateactivity.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case estimateactivity.ForeignKeys[0]: // api_user_id
			values[i] = new(sql.NullString)
		case estimateactivity.ForeignKeys[1]: // estimate_id
			values[i] = new(sql.NullString)
		case estimateactivity.ForeignKeys[2]: // creator_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EstimateActivity fields.
func (ea *EstimateActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case estimateactivity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ea.ID = value.String
			}
		case estimateactivity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case estimateactivity.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ea.Description = value.String
			}
		case estimateactivity.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ea.Raw); err != nil {
					return fmt.Errorf("unmarshal field raw: %w", err)
				}
			}
		case estimateactivity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_user_id", values[i])
			} else if value.Valid {
				ea.api_user_id = new(string)
				*ea.api_user_id = value.String
			}
		case estimateactivity.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estimate_id", values[i])
			} else if value.Valid {
				ea.estimate_id = new(string)
				*ea.estimate_id = value.String
			}
		case estimateactivity.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				ea.creator_id = new(string)
				*ea.creator_id = value.String
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EstimateActivity.
// This includes values selected through modifiers, order, etc.
func (ea *EstimateActivity) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// QueryEstimate queries the "estimate" edge of the EstimateActivity entity.
func (ea *EstimateActivity) QueryEstimate() *EstimateQuery {
	return NewEstimateActivityClient(ea.config).QueryEstimate(ea)
}

// QueryCreator queries the "creator" edge of the EstimateActivity entity.
func (ea *EstimateActivity) QueryCreator() *UserQuery {
	return NewEstimateActivityClient(ea.config).QueryCreator(ea)
}

// QueryCreatorAPI queries the "creator_api" edge of the EstimateActivity entity.
func (ea *EstimateActivity) QueryCreatorAPI() *ApiUserQuery {
	return NewEstimateActivityClient(ea.config).QueryCreatorAPI(ea)
}

// Update returns a builder for updating this EstimateActivity.
// Note that you need to call EstimateActivity.Unwrap() before calling this method if this EstimateActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EstimateActivity) Update() *EstimateActivityUpdateOne {
	return NewEstimateActivityClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EstimateActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EstimateActivity) Unwrap() *EstimateActivity {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EstimateActivity is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EstimateActivity) String() string {
	var builder strings.Builder
	builder.WriteString("EstimateActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ea.Description)
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", ea.Raw))
	builder.WriteByte(')')
	return builder.String()
}

// EstimateActivities is a parsable slice of EstimateActivity.
type EstimateActivities []*EstimateActivity

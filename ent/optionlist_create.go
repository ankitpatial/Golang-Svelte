// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/job"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OptionListCreate is the builder for creating a OptionList entity.
type OptionListCreate struct {
	config
	mutation *OptionListMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (olc *OptionListCreate) SetCreatedAt(t time.Time) *OptionListCreate {
	olc.mutation.SetCreatedAt(t)
	return olc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (olc *OptionListCreate) SetNillableCreatedAt(t *time.Time) *OptionListCreate {
	if t != nil {
		olc.SetCreatedAt(*t)
	}
	return olc
}

// SetUpdatedAt sets the "updated_at" field.
func (olc *OptionListCreate) SetUpdatedAt(t time.Time) *OptionListCreate {
	olc.mutation.SetUpdatedAt(t)
	return olc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (olc *OptionListCreate) SetNillableUpdatedAt(t *time.Time) *OptionListCreate {
	if t != nil {
		olc.SetUpdatedAt(*t)
	}
	return olc
}

// SetType sets the "type" field.
func (olc *OptionListCreate) SetType(el enum.OptionList) *OptionListCreate {
	olc.mutation.SetType(el)
	return olc
}

// SetName sets the "name" field.
func (olc *OptionListCreate) SetName(s string) *OptionListCreate {
	olc.mutation.SetName(s)
	return olc
}

// SetDisplayName sets the "display_name" field.
func (olc *OptionListCreate) SetDisplayName(s string) *OptionListCreate {
	olc.mutation.SetDisplayName(s)
	return olc
}

// SetActive sets the "active" field.
func (olc *OptionListCreate) SetActive(b bool) *OptionListCreate {
	olc.mutation.SetActive(b)
	return olc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (olc *OptionListCreate) SetNillableActive(b *bool) *OptionListCreate {
	if b != nil {
		olc.SetActive(*b)
	}
	return olc
}

// SetOrder sets the "order" field.
func (olc *OptionListCreate) SetOrder(i int) *OptionListCreate {
	olc.mutation.SetOrder(i)
	return olc
}

// SetID sets the "id" field.
func (olc *OptionListCreate) SetID(s string) *OptionListCreate {
	olc.mutation.SetID(s)
	return olc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (olc *OptionListCreate) SetNillableID(s *string) *OptionListCreate {
	if s != nil {
		olc.SetID(*s)
	}
	return olc
}

// AddFinanceOptionIDs adds the "finance_options" edge to the Partner entity by IDs.
func (olc *OptionListCreate) AddFinanceOptionIDs(ids ...string) *OptionListCreate {
	olc.mutation.AddFinanceOptionIDs(ids...)
	return olc
}

// AddFinanceOptions adds the "finance_options" edges to the Partner entity.
func (olc *OptionListCreate) AddFinanceOptions(p ...*Partner) *OptionListCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return olc.AddFinanceOptionIDs(ids...)
}

// AddEpcOptionIDs adds the "epc_options" edge to the Partner entity by IDs.
func (olc *OptionListCreate) AddEpcOptionIDs(ids ...string) *OptionListCreate {
	olc.mutation.AddEpcOptionIDs(ids...)
	return olc
}

// AddEpcOptions adds the "epc_options" edges to the Partner entity.
func (olc *OptionListCreate) AddEpcOptions(p ...*Partner) *OptionListCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return olc.AddEpcOptionIDs(ids...)
}

// AddEpcIDs adds the "epc" edge to the Job entity by IDs.
func (olc *OptionListCreate) AddEpcIDs(ids ...string) *OptionListCreate {
	olc.mutation.AddEpcIDs(ids...)
	return olc
}

// AddEpc adds the "epc" edges to the Job entity.
func (olc *OptionListCreate) AddEpc(j ...*Job) *OptionListCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return olc.AddEpcIDs(ids...)
}

// Mutation returns the OptionListMutation object of the builder.
func (olc *OptionListCreate) Mutation() *OptionListMutation {
	return olc.mutation
}

// Save creates the OptionList in the database.
func (olc *OptionListCreate) Save(ctx context.Context) (*OptionList, error) {
	olc.defaults()
	return withHooks(ctx, olc.sqlSave, olc.mutation, olc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (olc *OptionListCreate) SaveX(ctx context.Context) *OptionList {
	v, err := olc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olc *OptionListCreate) Exec(ctx context.Context) error {
	_, err := olc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olc *OptionListCreate) ExecX(ctx context.Context) {
	if err := olc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olc *OptionListCreate) defaults() {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		v := optionlist.DefaultCreatedAt()
		olc.mutation.SetCreatedAt(v)
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		v := optionlist.DefaultUpdatedAt()
		olc.mutation.SetUpdatedAt(v)
	}
	if _, ok := olc.mutation.Active(); !ok {
		v := optionlist.DefaultActive
		olc.mutation.SetActive(v)
	}
	if _, ok := olc.mutation.ID(); !ok {
		v := optionlist.DefaultID()
		olc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (olc *OptionListCreate) check() error {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OptionList.created_at"`)}
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OptionList.updated_at"`)}
	}
	if _, ok := olc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "OptionList.type"`)}
	}
	if v, ok := olc.mutation.GetType(); ok {
		if err := optionlist.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OptionList.type": %w`, err)}
		}
	}
	if _, ok := olc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OptionList.name"`)}
	}
	if v, ok := olc.mutation.Name(); ok {
		if err := optionlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OptionList.name": %w`, err)}
		}
	}
	if _, ok := olc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "OptionList.display_name"`)}
	}
	if v, ok := olc.mutation.DisplayName(); ok {
		if err := optionlist.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "OptionList.display_name": %w`, err)}
		}
	}
	if _, ok := olc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "OptionList.active"`)}
	}
	if _, ok := olc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "OptionList.order"`)}
	}
	if v, ok := olc.mutation.ID(); ok {
		if err := optionlist.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OptionList.id": %w`, err)}
		}
	}
	return nil
}

func (olc *OptionListCreate) sqlSave(ctx context.Context) (*OptionList, error) {
	if err := olc.check(); err != nil {
		return nil, err
	}
	_node, _spec := olc.createSpec()
	if err := sqlgraph.CreateNode(ctx, olc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OptionList.ID type: %T", _spec.ID.Value)
		}
	}
	olc.mutation.id = &_node.ID
	olc.mutation.done = true
	return _node, nil
}

func (olc *OptionListCreate) createSpec() (*OptionList, *sqlgraph.CreateSpec) {
	var (
		_node = &OptionList{config: olc.config}
		_spec = sqlgraph.NewCreateSpec(optionlist.Table, sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString))
	)
	_spec.OnConflict = olc.conflict
	if id, ok := olc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := olc.mutation.CreatedAt(); ok {
		_spec.SetField(optionlist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := olc.mutation.UpdatedAt(); ok {
		_spec.SetField(optionlist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := olc.mutation.GetType(); ok {
		_spec.SetField(optionlist.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := olc.mutation.Name(); ok {
		_spec.SetField(optionlist.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := olc.mutation.DisplayName(); ok {
		_spec.SetField(optionlist.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := olc.mutation.Active(); ok {
		_spec.SetField(optionlist.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := olc.mutation.Order(); ok {
		_spec.SetField(optionlist.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := olc.mutation.FinanceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.FinanceOptionsTable,
			Columns: optionlist.FinanceOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olc.mutation.EpcOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   optionlist.EpcOptionsTable,
			Columns: optionlist.EpcOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olc.mutation.EpcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   optionlist.EpcTable,
			Columns: []string{optionlist.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OptionList.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OptionListUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (olc *OptionListCreate) OnConflict(opts ...sql.ConflictOption) *OptionListUpsertOne {
	olc.conflict = opts
	return &OptionListUpsertOne{
		create: olc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OptionList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (olc *OptionListCreate) OnConflictColumns(columns ...string) *OptionListUpsertOne {
	olc.conflict = append(olc.conflict, sql.ConflictColumns(columns...))
	return &OptionListUpsertOne{
		create: olc,
	}
}

type (
	// OptionListUpsertOne is the builder for "upsert"-ing
	//  one OptionList node.
	OptionListUpsertOne struct {
		create *OptionListCreate
	}

	// OptionListUpsert is the "OnConflict" setter.
	OptionListUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OptionListUpsert) SetUpdatedAt(v time.Time) *OptionListUpsert {
	u.Set(optionlist.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OptionListUpsert) UpdateUpdatedAt() *OptionListUpsert {
	u.SetExcluded(optionlist.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *OptionListUpsert) SetType(v enum.OptionList) *OptionListUpsert {
	u.Set(optionlist.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OptionListUpsert) UpdateType() *OptionListUpsert {
	u.SetExcluded(optionlist.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *OptionListUpsert) SetName(v string) *OptionListUpsert {
	u.Set(optionlist.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OptionListUpsert) UpdateName() *OptionListUpsert {
	u.SetExcluded(optionlist.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *OptionListUpsert) SetDisplayName(v string) *OptionListUpsert {
	u.Set(optionlist.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *OptionListUpsert) UpdateDisplayName() *OptionListUpsert {
	u.SetExcluded(optionlist.FieldDisplayName)
	return u
}

// SetActive sets the "active" field.
func (u *OptionListUpsert) SetActive(v bool) *OptionListUpsert {
	u.Set(optionlist.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OptionListUpsert) UpdateActive() *OptionListUpsert {
	u.SetExcluded(optionlist.FieldActive)
	return u
}

// SetOrder sets the "order" field.
func (u *OptionListUpsert) SetOrder(v int) *OptionListUpsert {
	u.Set(optionlist.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *OptionListUpsert) UpdateOrder() *OptionListUpsert {
	u.SetExcluded(optionlist.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *OptionListUpsert) AddOrder(v int) *OptionListUpsert {
	u.Add(optionlist.FieldOrder, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OptionList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(optionlist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OptionListUpsertOne) UpdateNewValues() *OptionListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(optionlist.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(optionlist.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OptionList.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OptionListUpsertOne) Ignore() *OptionListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OptionListUpsertOne) DoNothing() *OptionListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OptionListCreate.OnConflict
// documentation for more info.
func (u *OptionListUpsertOne) Update(set func(*OptionListUpsert)) *OptionListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OptionListUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OptionListUpsertOne) SetUpdatedAt(v time.Time) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OptionListUpsertOne) UpdateUpdatedAt() *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *OptionListUpsertOne) SetType(v enum.OptionList) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OptionListUpsertOne) UpdateType() *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *OptionListUpsertOne) SetName(v string) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OptionListUpsertOne) UpdateName() *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *OptionListUpsertOne) SetDisplayName(v string) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *OptionListUpsertOne) UpdateDisplayName() *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateDisplayName()
	})
}

// SetActive sets the "active" field.
func (u *OptionListUpsertOne) SetActive(v bool) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OptionListUpsertOne) UpdateActive() *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateActive()
	})
}

// SetOrder sets the "order" field.
func (u *OptionListUpsertOne) SetOrder(v int) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *OptionListUpsertOne) AddOrder(v int) *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *OptionListUpsertOne) UpdateOrder() *OptionListUpsertOne {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *OptionListUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OptionListCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OptionListUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OptionListUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OptionListUpsertOne.ID is not supported by MySQL driver. Use OptionListUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OptionListUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OptionListCreateBulk is the builder for creating many OptionList entities in bulk.
type OptionListCreateBulk struct {
	config
	builders []*OptionListCreate
	conflict []sql.ConflictOption
}

// Save creates the OptionList entities in the database.
func (olcb *OptionListCreateBulk) Save(ctx context.Context) ([]*OptionList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(olcb.builders))
	nodes := make([]*OptionList, len(olcb.builders))
	mutators := make([]Mutator, len(olcb.builders))
	for i := range olcb.builders {
		func(i int, root context.Context) {
			builder := olcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OptionListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, olcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = olcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, olcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, olcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (olcb *OptionListCreateBulk) SaveX(ctx context.Context) []*OptionList {
	v, err := olcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olcb *OptionListCreateBulk) Exec(ctx context.Context) error {
	_, err := olcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olcb *OptionListCreateBulk) ExecX(ctx context.Context) {
	if err := olcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OptionList.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OptionListUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (olcb *OptionListCreateBulk) OnConflict(opts ...sql.ConflictOption) *OptionListUpsertBulk {
	olcb.conflict = opts
	return &OptionListUpsertBulk{
		create: olcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OptionList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (olcb *OptionListCreateBulk) OnConflictColumns(columns ...string) *OptionListUpsertBulk {
	olcb.conflict = append(olcb.conflict, sql.ConflictColumns(columns...))
	return &OptionListUpsertBulk{
		create: olcb,
	}
}

// OptionListUpsertBulk is the builder for "upsert"-ing
// a bulk of OptionList nodes.
type OptionListUpsertBulk struct {
	create *OptionListCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OptionList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(optionlist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OptionListUpsertBulk) UpdateNewValues() *OptionListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(optionlist.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(optionlist.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OptionList.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OptionListUpsertBulk) Ignore() *OptionListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OptionListUpsertBulk) DoNothing() *OptionListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OptionListCreateBulk.OnConflict
// documentation for more info.
func (u *OptionListUpsertBulk) Update(set func(*OptionListUpsert)) *OptionListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OptionListUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OptionListUpsertBulk) SetUpdatedAt(v time.Time) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OptionListUpsertBulk) UpdateUpdatedAt() *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *OptionListUpsertBulk) SetType(v enum.OptionList) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OptionListUpsertBulk) UpdateType() *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *OptionListUpsertBulk) SetName(v string) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OptionListUpsertBulk) UpdateName() *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *OptionListUpsertBulk) SetDisplayName(v string) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *OptionListUpsertBulk) UpdateDisplayName() *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateDisplayName()
	})
}

// SetActive sets the "active" field.
func (u *OptionListUpsertBulk) SetActive(v bool) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OptionListUpsertBulk) UpdateActive() *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateActive()
	})
}

// SetOrder sets the "order" field.
func (u *OptionListUpsertBulk) SetOrder(v int) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *OptionListUpsertBulk) AddOrder(v int) *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *OptionListUpsertBulk) UpdateOrder() *OptionListUpsertBulk {
	return u.Update(func(s *OptionListUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *OptionListUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OptionListCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OptionListCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OptionListUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/ent/useractivity"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserActivityUpdate is the builder for updating UserActivity entities.
type UserActivityUpdate struct {
	config
	hooks     []Hook
	mutation  *UserActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserActivityUpdate builder.
func (uau *UserActivityUpdate) Where(ps ...predicate.UserActivity) *UserActivityUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetDescription sets the "description" field.
func (uau *UserActivityUpdate) SetDescription(s string) *UserActivityUpdate {
	uau.mutation.SetDescription(s)
	return uau
}

// SetRaw sets the "raw" field.
func (uau *UserActivityUpdate) SetRaw(m map[string]interface{}) *UserActivityUpdate {
	uau.mutation.SetRaw(m)
	return uau
}

// ClearRaw clears the value of the "raw" field.
func (uau *UserActivityUpdate) ClearRaw() *UserActivityUpdate {
	uau.mutation.ClearRaw()
	return uau
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uau *UserActivityUpdate) SetUserID(id string) *UserActivityUpdate {
	uau.mutation.SetUserID(id)
	return uau
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uau *UserActivityUpdate) SetNillableUserID(id *string) *UserActivityUpdate {
	if id != nil {
		uau = uau.SetUserID(*id)
	}
	return uau
}

// SetUser sets the "user" edge to the User entity.
func (uau *UserActivityUpdate) SetUser(u *User) *UserActivityUpdate {
	return uau.SetUserID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (uau *UserActivityUpdate) SetCreatorID(id string) *UserActivityUpdate {
	uau.mutation.SetCreatorID(id)
	return uau
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (uau *UserActivityUpdate) SetNillableCreatorID(id *string) *UserActivityUpdate {
	if id != nil {
		uau = uau.SetCreatorID(*id)
	}
	return uau
}

// SetCreator sets the "creator" edge to the User entity.
func (uau *UserActivityUpdate) SetCreator(u *User) *UserActivityUpdate {
	return uau.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (uau *UserActivityUpdate) SetCreatorAPIID(id string) *UserActivityUpdate {
	uau.mutation.SetCreatorAPIID(id)
	return uau
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (uau *UserActivityUpdate) SetNillableCreatorAPIID(id *string) *UserActivityUpdate {
	if id != nil {
		uau = uau.SetCreatorAPIID(*id)
	}
	return uau
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (uau *UserActivityUpdate) SetCreatorAPI(a *ApiUser) *UserActivityUpdate {
	return uau.SetCreatorAPIID(a.ID)
}

// Mutation returns the UserActivityMutation object of the builder.
func (uau *UserActivityUpdate) Mutation() *UserActivityMutation {
	return uau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uau *UserActivityUpdate) ClearUser() *UserActivityUpdate {
	uau.mutation.ClearUser()
	return uau
}

// ClearCreator clears the "creator" edge to the User entity.
func (uau *UserActivityUpdate) ClearCreator() *UserActivityUpdate {
	uau.mutation.ClearCreator()
	return uau
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (uau *UserActivityUpdate) ClearCreatorAPI() *UserActivityUpdate {
	uau.mutation.ClearCreatorAPI()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserActivityUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserActivityUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uau *UserActivityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserActivityUpdate {
	uau.modifiers = append(uau.modifiers, modifiers...)
	return uau
}

func (uau *UserActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(useractivity.Table, useractivity.Columns, sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.Description(); ok {
		_spec.SetField(useractivity.FieldDescription, field.TypeString, value)
	}
	if value, ok := uau.mutation.Raw(); ok {
		_spec.SetField(useractivity.FieldRaw, field.TypeJSON, value)
	}
	if uau.mutation.RawCleared() {
		_spec.ClearField(useractivity.FieldRaw, field.TypeJSON)
	}
	if uau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorTable,
			Columns: []string{useractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorTable,
			Columns: []string{useractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorAPITable,
			Columns: []string{useractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorAPITable,
			Columns: []string{useractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useractivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserActivityUpdateOne is the builder for updating a single UserActivity entity.
type UserActivityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDescription sets the "description" field.
func (uauo *UserActivityUpdateOne) SetDescription(s string) *UserActivityUpdateOne {
	uauo.mutation.SetDescription(s)
	return uauo
}

// SetRaw sets the "raw" field.
func (uauo *UserActivityUpdateOne) SetRaw(m map[string]interface{}) *UserActivityUpdateOne {
	uauo.mutation.SetRaw(m)
	return uauo
}

// ClearRaw clears the value of the "raw" field.
func (uauo *UserActivityUpdateOne) ClearRaw() *UserActivityUpdateOne {
	uauo.mutation.ClearRaw()
	return uauo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uauo *UserActivityUpdateOne) SetUserID(id string) *UserActivityUpdateOne {
	uauo.mutation.SetUserID(id)
	return uauo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uauo *UserActivityUpdateOne) SetNillableUserID(id *string) *UserActivityUpdateOne {
	if id != nil {
		uauo = uauo.SetUserID(*id)
	}
	return uauo
}

// SetUser sets the "user" edge to the User entity.
func (uauo *UserActivityUpdateOne) SetUser(u *User) *UserActivityUpdateOne {
	return uauo.SetUserID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (uauo *UserActivityUpdateOne) SetCreatorID(id string) *UserActivityUpdateOne {
	uauo.mutation.SetCreatorID(id)
	return uauo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (uauo *UserActivityUpdateOne) SetNillableCreatorID(id *string) *UserActivityUpdateOne {
	if id != nil {
		uauo = uauo.SetCreatorID(*id)
	}
	return uauo
}

// SetCreator sets the "creator" edge to the User entity.
func (uauo *UserActivityUpdateOne) SetCreator(u *User) *UserActivityUpdateOne {
	return uauo.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (uauo *UserActivityUpdateOne) SetCreatorAPIID(id string) *UserActivityUpdateOne {
	uauo.mutation.SetCreatorAPIID(id)
	return uauo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (uauo *UserActivityUpdateOne) SetNillableCreatorAPIID(id *string) *UserActivityUpdateOne {
	if id != nil {
		uauo = uauo.SetCreatorAPIID(*id)
	}
	return uauo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (uauo *UserActivityUpdateOne) SetCreatorAPI(a *ApiUser) *UserActivityUpdateOne {
	return uauo.SetCreatorAPIID(a.ID)
}

// Mutation returns the UserActivityMutation object of the builder.
func (uauo *UserActivityUpdateOne) Mutation() *UserActivityMutation {
	return uauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uauo *UserActivityUpdateOne) ClearUser() *UserActivityUpdateOne {
	uauo.mutation.ClearUser()
	return uauo
}

// ClearCreator clears the "creator" edge to the User entity.
func (uauo *UserActivityUpdateOne) ClearCreator() *UserActivityUpdateOne {
	uauo.mutation.ClearCreator()
	return uauo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (uauo *UserActivityUpdateOne) ClearCreatorAPI() *UserActivityUpdateOne {
	uauo.mutation.ClearCreatorAPI()
	return uauo
}

// Where appends a list predicates to the UserActivityUpdate builder.
func (uauo *UserActivityUpdateOne) Where(ps ...predicate.UserActivity) *UserActivityUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserActivityUpdateOne) Select(field string, fields ...string) *UserActivityUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserActivity entity.
func (uauo *UserActivityUpdateOne) Save(ctx context.Context) (*UserActivity, error) {
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserActivityUpdateOne) SaveX(ctx context.Context) *UserActivity {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserActivityUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uauo *UserActivityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserActivityUpdateOne {
	uauo.modifiers = append(uauo.modifiers, modifiers...)
	return uauo
}

func (uauo *UserActivityUpdateOne) sqlSave(ctx context.Context) (_node *UserActivity, err error) {
	_spec := sqlgraph.NewUpdateSpec(useractivity.Table, useractivity.Columns, sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeString))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useractivity.FieldID)
		for _, f := range fields {
			if !useractivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useractivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.Description(); ok {
		_spec.SetField(useractivity.FieldDescription, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Raw(); ok {
		_spec.SetField(useractivity.FieldRaw, field.TypeJSON, value)
	}
	if uauo.mutation.RawCleared() {
		_spec.ClearField(useractivity.FieldRaw, field.TypeJSON)
	}
	if uauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorTable,
			Columns: []string{useractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorTable,
			Columns: []string{useractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorAPITable,
			Columns: []string{useractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.CreatorAPITable,
			Columns: []string{useractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uauo.modifiers...)
	_node = &UserActivity{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useractivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelMessageUpdate is the builder for updating ChannelMessage entities.
type ChannelMessageUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelMessageUpdate builder.
func (cmu *ChannelMessageUpdate) Where(ps ...predicate.ChannelMessage) *ChannelMessageUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetUpdatedAt sets the "updated_at" field.
func (cmu *ChannelMessageUpdate) SetUpdatedAt(t time.Time) *ChannelMessageUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// SetTitle sets the "title" field.
func (cmu *ChannelMessageUpdate) SetTitle(s string) *ChannelMessageUpdate {
	cmu.mutation.SetTitle(s)
	return cmu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillableTitle(s *string) *ChannelMessageUpdate {
	if s != nil {
		cmu.SetTitle(*s)
	}
	return cmu
}

// ClearTitle clears the value of the "title" field.
func (cmu *ChannelMessageUpdate) ClearTitle() *ChannelMessageUpdate {
	cmu.mutation.ClearTitle()
	return cmu
}

// SetMessage sets the "message" field.
func (cmu *ChannelMessageUpdate) SetMessage(s string) *ChannelMessageUpdate {
	cmu.mutation.SetMessage(s)
	return cmu
}

// SetFromName sets the "from_name" field.
func (cmu *ChannelMessageUpdate) SetFromName(s string) *ChannelMessageUpdate {
	cmu.mutation.SetFromName(s)
	return cmu
}

// SetToName sets the "to_name" field.
func (cmu *ChannelMessageUpdate) SetToName(s string) *ChannelMessageUpdate {
	cmu.mutation.SetToName(s)
	return cmu
}

// SetNillableToName sets the "to_name" field if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillableToName(s *string) *ChannelMessageUpdate {
	if s != nil {
		cmu.SetToName(*s)
	}
	return cmu
}

// ClearToName clears the value of the "to_name" field.
func (cmu *ChannelMessageUpdate) ClearToName() *ChannelMessageUpdate {
	cmu.mutation.ClearToName()
	return cmu
}

// SetPrivate sets the "private" field.
func (cmu *ChannelMessageUpdate) SetPrivate(b bool) *ChannelMessageUpdate {
	cmu.mutation.SetPrivate(b)
	return cmu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillablePrivate(b *bool) *ChannelMessageUpdate {
	if b != nil {
		cmu.SetPrivate(*b)
	}
	return cmu
}

// SetUnread sets the "unread" field.
func (cmu *ChannelMessageUpdate) SetUnread(b bool) *ChannelMessageUpdate {
	cmu.mutation.SetUnread(b)
	return cmu
}

// SetNillableUnread sets the "unread" field if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillableUnread(b *bool) *ChannelMessageUpdate {
	if b != nil {
		cmu.SetUnread(*b)
	}
	return cmu
}

// ClearUnread clears the value of the "unread" field.
func (cmu *ChannelMessageUpdate) ClearUnread() *ChannelMessageUpdate {
	cmu.mutation.ClearUnread()
	return cmu
}

// AddReadIDs adds the "reads" edge to the ChannelMessageRead entity by IDs.
func (cmu *ChannelMessageUpdate) AddReadIDs(ids ...string) *ChannelMessageUpdate {
	cmu.mutation.AddReadIDs(ids...)
	return cmu
}

// AddReads adds the "reads" edges to the ChannelMessageRead entity.
func (cmu *ChannelMessageUpdate) AddReads(c ...*ChannelMessageRead) *ChannelMessageUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.AddReadIDs(ids...)
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (cmu *ChannelMessageUpdate) SetChannelID(id string) *ChannelMessageUpdate {
	cmu.mutation.SetChannelID(id)
	return cmu
}

// SetChannel sets the "channel" edge to the Channel entity.
func (cmu *ChannelMessageUpdate) SetChannel(c *Channel) *ChannelMessageUpdate {
	return cmu.SetChannelID(c.ID)
}

// SetFromID sets the "from" edge to the User entity by ID.
func (cmu *ChannelMessageUpdate) SetFromID(id string) *ChannelMessageUpdate {
	cmu.mutation.SetFromID(id)
	return cmu
}

// SetNillableFromID sets the "from" edge to the User entity by ID if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillableFromID(id *string) *ChannelMessageUpdate {
	if id != nil {
		cmu = cmu.SetFromID(*id)
	}
	return cmu
}

// SetFrom sets the "from" edge to the User entity.
func (cmu *ChannelMessageUpdate) SetFrom(u *User) *ChannelMessageUpdate {
	return cmu.SetFromID(u.ID)
}

// SetFromAPIUserID sets the "from_api_user" edge to the ApiUser entity by ID.
func (cmu *ChannelMessageUpdate) SetFromAPIUserID(id string) *ChannelMessageUpdate {
	cmu.mutation.SetFromAPIUserID(id)
	return cmu
}

// SetNillableFromAPIUserID sets the "from_api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillableFromAPIUserID(id *string) *ChannelMessageUpdate {
	if id != nil {
		cmu = cmu.SetFromAPIUserID(*id)
	}
	return cmu
}

// SetFromAPIUser sets the "from_api_user" edge to the ApiUser entity.
func (cmu *ChannelMessageUpdate) SetFromAPIUser(a *ApiUser) *ChannelMessageUpdate {
	return cmu.SetFromAPIUserID(a.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (cmu *ChannelMessageUpdate) SetToID(id string) *ChannelMessageUpdate {
	cmu.mutation.SetToID(id)
	return cmu
}

// SetNillableToID sets the "to" edge to the User entity by ID if the given value is not nil.
func (cmu *ChannelMessageUpdate) SetNillableToID(id *string) *ChannelMessageUpdate {
	if id != nil {
		cmu = cmu.SetToID(*id)
	}
	return cmu
}

// SetTo sets the "to" edge to the User entity.
func (cmu *ChannelMessageUpdate) SetTo(u *User) *ChannelMessageUpdate {
	return cmu.SetToID(u.ID)
}

// Mutation returns the ChannelMessageMutation object of the builder.
func (cmu *ChannelMessageUpdate) Mutation() *ChannelMessageMutation {
	return cmu.mutation
}

// ClearReads clears all "reads" edges to the ChannelMessageRead entity.
func (cmu *ChannelMessageUpdate) ClearReads() *ChannelMessageUpdate {
	cmu.mutation.ClearReads()
	return cmu
}

// RemoveReadIDs removes the "reads" edge to ChannelMessageRead entities by IDs.
func (cmu *ChannelMessageUpdate) RemoveReadIDs(ids ...string) *ChannelMessageUpdate {
	cmu.mutation.RemoveReadIDs(ids...)
	return cmu
}

// RemoveReads removes "reads" edges to ChannelMessageRead entities.
func (cmu *ChannelMessageUpdate) RemoveReads(c ...*ChannelMessageRead) *ChannelMessageUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.RemoveReadIDs(ids...)
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (cmu *ChannelMessageUpdate) ClearChannel() *ChannelMessageUpdate {
	cmu.mutation.ClearChannel()
	return cmu
}

// ClearFrom clears the "from" edge to the User entity.
func (cmu *ChannelMessageUpdate) ClearFrom() *ChannelMessageUpdate {
	cmu.mutation.ClearFrom()
	return cmu
}

// ClearFromAPIUser clears the "from_api_user" edge to the ApiUser entity.
func (cmu *ChannelMessageUpdate) ClearFromAPIUser() *ChannelMessageUpdate {
	cmu.mutation.ClearFromAPIUser()
	return cmu
}

// ClearTo clears the "to" edge to the User entity.
func (cmu *ChannelMessageUpdate) ClearTo() *ChannelMessageUpdate {
	cmu.mutation.ClearTo()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ChannelMessageUpdate) Save(ctx context.Context) (int, error) {
	cmu.defaults()
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ChannelMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ChannelMessageUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ChannelMessageUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *ChannelMessageUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := channelmessage.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *ChannelMessageUpdate) check() error {
	if v, ok := cmu.mutation.Title(); ok {
		if err := channelmessage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.title": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.Message(); ok {
		if err := channelmessage.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.message": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.FromName(); ok {
		if err := channelmessage.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "from_name", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.from_name": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.ToName(); ok {
		if err := channelmessage.ToNameValidator(v); err != nil {
			return &ValidationError{Name: "to_name", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.to_name": %w`, err)}
		}
	}
	if _, ok := cmu.mutation.ChannelID(); cmu.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChannelMessage.channel"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cmu *ChannelMessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelMessageUpdate {
	cmu.modifiers = append(cmu.modifiers, modifiers...)
	return cmu
}

func (cmu *ChannelMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(channelmessage.Table, channelmessage.Columns, sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.SetField(channelmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmu.mutation.Title(); ok {
		_spec.SetField(channelmessage.FieldTitle, field.TypeString, value)
	}
	if cmu.mutation.TitleCleared() {
		_spec.ClearField(channelmessage.FieldTitle, field.TypeString)
	}
	if value, ok := cmu.mutation.Message(); ok {
		_spec.SetField(channelmessage.FieldMessage, field.TypeString, value)
	}
	if value, ok := cmu.mutation.FromName(); ok {
		_spec.SetField(channelmessage.FieldFromName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.ToName(); ok {
		_spec.SetField(channelmessage.FieldToName, field.TypeString, value)
	}
	if cmu.mutation.ToNameCleared() {
		_spec.ClearField(channelmessage.FieldToName, field.TypeString)
	}
	if value, ok := cmu.mutation.Private(); ok {
		_spec.SetField(channelmessage.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := cmu.mutation.Unread(); ok {
		_spec.SetField(channelmessage.FieldUnread, field.TypeBool, value)
	}
	if cmu.mutation.UnreadCleared() {
		_spec.ClearField(channelmessage.FieldUnread, field.TypeBool)
	}
	if cmu.mutation.ReadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedReadsIDs(); len(nodes) > 0 && !cmu.mutation.ReadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ReadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ChannelTable,
			Columns: []string{channelmessage.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ChannelTable,
			Columns: []string{channelmessage.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromTable,
			Columns: []string{channelmessage.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromTable,
			Columns: []string{channelmessage.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.FromAPIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromAPIUserTable,
			Columns: []string{channelmessage.FromAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.FromAPIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromAPIUserTable,
			Columns: []string{channelmessage.FromAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ToTable,
			Columns: []string{channelmessage.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ToTable,
			Columns: []string{channelmessage.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ChannelMessageUpdateOne is the builder for updating a single ChannelMessage entity.
type ChannelMessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cmuo *ChannelMessageUpdateOne) SetUpdatedAt(t time.Time) *ChannelMessageUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// SetTitle sets the "title" field.
func (cmuo *ChannelMessageUpdateOne) SetTitle(s string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetTitle(s)
	return cmuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillableTitle(s *string) *ChannelMessageUpdateOne {
	if s != nil {
		cmuo.SetTitle(*s)
	}
	return cmuo
}

// ClearTitle clears the value of the "title" field.
func (cmuo *ChannelMessageUpdateOne) ClearTitle() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearTitle()
	return cmuo
}

// SetMessage sets the "message" field.
func (cmuo *ChannelMessageUpdateOne) SetMessage(s string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetMessage(s)
	return cmuo
}

// SetFromName sets the "from_name" field.
func (cmuo *ChannelMessageUpdateOne) SetFromName(s string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetFromName(s)
	return cmuo
}

// SetToName sets the "to_name" field.
func (cmuo *ChannelMessageUpdateOne) SetToName(s string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetToName(s)
	return cmuo
}

// SetNillableToName sets the "to_name" field if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillableToName(s *string) *ChannelMessageUpdateOne {
	if s != nil {
		cmuo.SetToName(*s)
	}
	return cmuo
}

// ClearToName clears the value of the "to_name" field.
func (cmuo *ChannelMessageUpdateOne) ClearToName() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearToName()
	return cmuo
}

// SetPrivate sets the "private" field.
func (cmuo *ChannelMessageUpdateOne) SetPrivate(b bool) *ChannelMessageUpdateOne {
	cmuo.mutation.SetPrivate(b)
	return cmuo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillablePrivate(b *bool) *ChannelMessageUpdateOne {
	if b != nil {
		cmuo.SetPrivate(*b)
	}
	return cmuo
}

// SetUnread sets the "unread" field.
func (cmuo *ChannelMessageUpdateOne) SetUnread(b bool) *ChannelMessageUpdateOne {
	cmuo.mutation.SetUnread(b)
	return cmuo
}

// SetNillableUnread sets the "unread" field if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillableUnread(b *bool) *ChannelMessageUpdateOne {
	if b != nil {
		cmuo.SetUnread(*b)
	}
	return cmuo
}

// ClearUnread clears the value of the "unread" field.
func (cmuo *ChannelMessageUpdateOne) ClearUnread() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearUnread()
	return cmuo
}

// AddReadIDs adds the "reads" edge to the ChannelMessageRead entity by IDs.
func (cmuo *ChannelMessageUpdateOne) AddReadIDs(ids ...string) *ChannelMessageUpdateOne {
	cmuo.mutation.AddReadIDs(ids...)
	return cmuo
}

// AddReads adds the "reads" edges to the ChannelMessageRead entity.
func (cmuo *ChannelMessageUpdateOne) AddReads(c ...*ChannelMessageRead) *ChannelMessageUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.AddReadIDs(ids...)
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (cmuo *ChannelMessageUpdateOne) SetChannelID(id string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetChannelID(id)
	return cmuo
}

// SetChannel sets the "channel" edge to the Channel entity.
func (cmuo *ChannelMessageUpdateOne) SetChannel(c *Channel) *ChannelMessageUpdateOne {
	return cmuo.SetChannelID(c.ID)
}

// SetFromID sets the "from" edge to the User entity by ID.
func (cmuo *ChannelMessageUpdateOne) SetFromID(id string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetFromID(id)
	return cmuo
}

// SetNillableFromID sets the "from" edge to the User entity by ID if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillableFromID(id *string) *ChannelMessageUpdateOne {
	if id != nil {
		cmuo = cmuo.SetFromID(*id)
	}
	return cmuo
}

// SetFrom sets the "from" edge to the User entity.
func (cmuo *ChannelMessageUpdateOne) SetFrom(u *User) *ChannelMessageUpdateOne {
	return cmuo.SetFromID(u.ID)
}

// SetFromAPIUserID sets the "from_api_user" edge to the ApiUser entity by ID.
func (cmuo *ChannelMessageUpdateOne) SetFromAPIUserID(id string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetFromAPIUserID(id)
	return cmuo
}

// SetNillableFromAPIUserID sets the "from_api_user" edge to the ApiUser entity by ID if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillableFromAPIUserID(id *string) *ChannelMessageUpdateOne {
	if id != nil {
		cmuo = cmuo.SetFromAPIUserID(*id)
	}
	return cmuo
}

// SetFromAPIUser sets the "from_api_user" edge to the ApiUser entity.
func (cmuo *ChannelMessageUpdateOne) SetFromAPIUser(a *ApiUser) *ChannelMessageUpdateOne {
	return cmuo.SetFromAPIUserID(a.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (cmuo *ChannelMessageUpdateOne) SetToID(id string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetToID(id)
	return cmuo
}

// SetNillableToID sets the "to" edge to the User entity by ID if the given value is not nil.
func (cmuo *ChannelMessageUpdateOne) SetNillableToID(id *string) *ChannelMessageUpdateOne {
	if id != nil {
		cmuo = cmuo.SetToID(*id)
	}
	return cmuo
}

// SetTo sets the "to" edge to the User entity.
func (cmuo *ChannelMessageUpdateOne) SetTo(u *User) *ChannelMessageUpdateOne {
	return cmuo.SetToID(u.ID)
}

// Mutation returns the ChannelMessageMutation object of the builder.
func (cmuo *ChannelMessageUpdateOne) Mutation() *ChannelMessageMutation {
	return cmuo.mutation
}

// ClearReads clears all "reads" edges to the ChannelMessageRead entity.
func (cmuo *ChannelMessageUpdateOne) ClearReads() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearReads()
	return cmuo
}

// RemoveReadIDs removes the "reads" edge to ChannelMessageRead entities by IDs.
func (cmuo *ChannelMessageUpdateOne) RemoveReadIDs(ids ...string) *ChannelMessageUpdateOne {
	cmuo.mutation.RemoveReadIDs(ids...)
	return cmuo
}

// RemoveReads removes "reads" edges to ChannelMessageRead entities.
func (cmuo *ChannelMessageUpdateOne) RemoveReads(c ...*ChannelMessageRead) *ChannelMessageUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.RemoveReadIDs(ids...)
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (cmuo *ChannelMessageUpdateOne) ClearChannel() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearChannel()
	return cmuo
}

// ClearFrom clears the "from" edge to the User entity.
func (cmuo *ChannelMessageUpdateOne) ClearFrom() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearFrom()
	return cmuo
}

// ClearFromAPIUser clears the "from_api_user" edge to the ApiUser entity.
func (cmuo *ChannelMessageUpdateOne) ClearFromAPIUser() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearFromAPIUser()
	return cmuo
}

// ClearTo clears the "to" edge to the User entity.
func (cmuo *ChannelMessageUpdateOne) ClearTo() *ChannelMessageUpdateOne {
	cmuo.mutation.ClearTo()
	return cmuo
}

// Where appends a list predicates to the ChannelMessageUpdate builder.
func (cmuo *ChannelMessageUpdateOne) Where(ps ...predicate.ChannelMessage) *ChannelMessageUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ChannelMessageUpdateOne) Select(field string, fields ...string) *ChannelMessageUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ChannelMessage entity.
func (cmuo *ChannelMessageUpdateOne) Save(ctx context.Context) (*ChannelMessage, error) {
	cmuo.defaults()
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ChannelMessageUpdateOne) SaveX(ctx context.Context) *ChannelMessage {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ChannelMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ChannelMessageUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *ChannelMessageUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := channelmessage.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *ChannelMessageUpdateOne) check() error {
	if v, ok := cmuo.mutation.Title(); ok {
		if err := channelmessage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.title": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.Message(); ok {
		if err := channelmessage.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.message": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.FromName(); ok {
		if err := channelmessage.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "from_name", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.from_name": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.ToName(); ok {
		if err := channelmessage.ToNameValidator(v); err != nil {
			return &ValidationError{Name: "to_name", err: fmt.Errorf(`ent: validator failed for field "ChannelMessage.to_name": %w`, err)}
		}
	}
	if _, ok := cmuo.mutation.ChannelID(); cmuo.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChannelMessage.channel"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cmuo *ChannelMessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelMessageUpdateOne {
	cmuo.modifiers = append(cmuo.modifiers, modifiers...)
	return cmuo
}

func (cmuo *ChannelMessageUpdateOne) sqlSave(ctx context.Context) (_node *ChannelMessage, err error) {
	if err := cmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(channelmessage.Table, channelmessage.Columns, sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChannelMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelmessage.FieldID)
		for _, f := range fields {
			if !channelmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channelmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channelmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmuo.mutation.Title(); ok {
		_spec.SetField(channelmessage.FieldTitle, field.TypeString, value)
	}
	if cmuo.mutation.TitleCleared() {
		_spec.ClearField(channelmessage.FieldTitle, field.TypeString)
	}
	if value, ok := cmuo.mutation.Message(); ok {
		_spec.SetField(channelmessage.FieldMessage, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.FromName(); ok {
		_spec.SetField(channelmessage.FieldFromName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.ToName(); ok {
		_spec.SetField(channelmessage.FieldToName, field.TypeString, value)
	}
	if cmuo.mutation.ToNameCleared() {
		_spec.ClearField(channelmessage.FieldToName, field.TypeString)
	}
	if value, ok := cmuo.mutation.Private(); ok {
		_spec.SetField(channelmessage.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := cmuo.mutation.Unread(); ok {
		_spec.SetField(channelmessage.FieldUnread, field.TypeBool, value)
	}
	if cmuo.mutation.UnreadCleared() {
		_spec.ClearField(channelmessage.FieldUnread, field.TypeBool)
	}
	if cmuo.mutation.ReadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedReadsIDs(); len(nodes) > 0 && !cmuo.mutation.ReadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ReadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channelmessage.ReadsTable,
			Columns: []string{channelmessage.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ChannelTable,
			Columns: []string{channelmessage.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ChannelTable,
			Columns: []string{channelmessage.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromTable,
			Columns: []string{channelmessage.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromTable,
			Columns: []string{channelmessage.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.FromAPIUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromAPIUserTable,
			Columns: []string{channelmessage.FromAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.FromAPIUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.FromAPIUserTable,
			Columns: []string{channelmessage.FromAPIUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ToTable,
			Columns: []string{channelmessage.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelmessage.ToTable,
			Columns: []string{channelmessage.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cmuo.modifiers...)
	_node = &ChannelMessage{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}

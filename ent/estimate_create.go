// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/partner"
	"roofix/ent/schema"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"roofix/pkg/model"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EstimateCreate is the builder for creating a Estimate entity.
type EstimateCreate struct {
	config
	mutation *EstimateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EstimateCreate) SetCreatedAt(t time.Time) *EstimateCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableCreatedAt(t *time.Time) *EstimateCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EstimateCreate) SetUpdatedAt(t time.Time) *EstimateCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableUpdatedAt(t *time.Time) *EstimateCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetRegionID sets the "region_id" field.
func (ec *EstimateCreate) SetRegionID(u uint8) *EstimateCreate {
	ec.mutation.SetRegionID(u)
	return ec
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableRegionID(u *uint8) *EstimateCreate {
	if u != nil {
		ec.SetRegionID(*u)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EstimateCreate) SetStatus(es enum.EstimateStatus) *EstimateCreate {
	ec.mutation.SetStatus(es)
	return ec
}

// SetCurrentMaterial sets the "current_material" field.
func (ec *EstimateCreate) SetCurrentMaterial(s string) *EstimateCreate {
	ec.mutation.SetCurrentMaterial(s)
	return ec
}

// SetNillableCurrentMaterial sets the "current_material" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableCurrentMaterial(s *string) *EstimateCreate {
	if s != nil {
		ec.SetCurrentMaterial(*s)
	}
	return ec
}

// SetNewRoofingMaterial sets the "new_roofing_material" field.
func (ec *EstimateCreate) SetNewRoofingMaterial(s string) *EstimateCreate {
	ec.mutation.SetNewRoofingMaterial(s)
	return ec
}

// SetNillableNewRoofingMaterial sets the "new_roofing_material" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableNewRoofingMaterial(s *string) *EstimateCreate {
	if s != nil {
		ec.SetNewRoofingMaterial(*s)
	}
	return ec
}

// SetLowSlope sets the "lowSlope" field.
func (ec *EstimateCreate) SetLowSlope(b bool) *EstimateCreate {
	ec.mutation.SetLowSlope(b)
	return ec
}

// SetNillableLowSlope sets the "lowSlope" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableLowSlope(b *bool) *EstimateCreate {
	if b != nil {
		ec.SetLowSlope(*b)
	}
	return ec
}

// SetCurrentMaterialLowSlope sets the "current_material_low_slope" field.
func (ec *EstimateCreate) SetCurrentMaterialLowSlope(s string) *EstimateCreate {
	ec.mutation.SetCurrentMaterialLowSlope(s)
	return ec
}

// SetNillableCurrentMaterialLowSlope sets the "current_material_low_slope" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableCurrentMaterialLowSlope(s *string) *EstimateCreate {
	if s != nil {
		ec.SetCurrentMaterialLowSlope(*s)
	}
	return ec
}

// SetNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field.
func (ec *EstimateCreate) SetNewRoofingMaterialLowSlope(s string) *EstimateCreate {
	ec.mutation.SetNewRoofingMaterialLowSlope(s)
	return ec
}

// SetNillableNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableNewRoofingMaterialLowSlope(s *string) *EstimateCreate {
	if s != nil {
		ec.SetNewRoofingMaterialLowSlope(*s)
	}
	return ec
}

// SetRedeck sets the "redeck" field.
func (ec *EstimateCreate) SetRedeck(b bool) *EstimateCreate {
	ec.mutation.SetRedeck(b)
	return ec
}

// SetNillableRedeck sets the "redeck" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableRedeck(b *bool) *EstimateCreate {
	if b != nil {
		ec.SetRedeck(*b)
	}
	return ec
}

// SetLayers sets the "layers" field.
func (ec *EstimateCreate) SetLayers(u uint8) *EstimateCreate {
	ec.mutation.SetLayers(u)
	return ec
}

// SetLayer2Material sets the "layer2_material" field.
func (ec *EstimateCreate) SetLayer2Material(s string) *EstimateCreate {
	ec.mutation.SetLayer2Material(s)
	return ec
}

// SetNillableLayer2Material sets the "layer2_material" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableLayer2Material(s *string) *EstimateCreate {
	if s != nil {
		ec.SetLayer2Material(*s)
	}
	return ec
}

// SetLayer3Material sets the "layer3_material" field.
func (ec *EstimateCreate) SetLayer3Material(s string) *EstimateCreate {
	ec.mutation.SetLayer3Material(s)
	return ec
}

// SetNillableLayer3Material sets the "layer3_material" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableLayer3Material(s *string) *EstimateCreate {
	if s != nil {
		ec.SetLayer3Material(*s)
	}
	return ec
}

// SetPartialPercentage sets the "partial_percentage" field.
func (ec *EstimateCreate) SetPartialPercentage(f float64) *EstimateCreate {
	ec.mutation.SetPartialPercentage(f)
	return ec
}

// SetNillablePartialPercentage sets the "partial_percentage" field if the given value is not nil.
func (ec *EstimateCreate) SetNillablePartialPercentage(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetPartialPercentage(*f)
	}
	return ec
}

// SetMaterialMappingNote sets the "material_mapping_note" field.
func (ec *EstimateCreate) SetMaterialMappingNote(s string) *EstimateCreate {
	ec.mutation.SetMaterialMappingNote(s)
	return ec
}

// SetNillableMaterialMappingNote sets the "material_mapping_note" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableMaterialMappingNote(s *string) *EstimateCreate {
	if s != nil {
		ec.SetMaterialMappingNote(*s)
	}
	return ec
}

// SetMeasureType sets the "measure_type" field.
func (ec *EstimateCreate) SetMeasureType(e enum.Measure) *EstimateCreate {
	ec.mutation.SetMeasureType(e)
	return ec
}

// SetExtraChargeType sets the "extra_charge_type" field.
func (ec *EstimateCreate) SetExtraChargeType(value enum.ExtraCharge) *EstimateCreate {
	ec.mutation.SetExtraChargeType(value)
	return ec
}

// SetNillableExtraChargeType sets the "extra_charge_type" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableExtraChargeType(value *enum.ExtraCharge) *EstimateCreate {
	if value != nil {
		ec.SetExtraChargeType(*value)
	}
	return ec
}

// SetExtraCharges sets the "extra_charges" field.
func (ec *EstimateCreate) SetExtraCharges(f float64) *EstimateCreate {
	ec.mutation.SetExtraCharges(f)
	return ec
}

// SetNillableExtraCharges sets the "extra_charges" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableExtraCharges(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetExtraCharges(*f)
	}
	return ec
}

// SetExtraChargeCond sets the "extra_charge_cond" field.
func (ec *EstimateCreate) SetExtraChargeCond(mcc []*model.ExtraChargeCondition) *EstimateCreate {
	ec.mutation.SetExtraChargeCond(mcc)
	return ec
}

// SetExtraChargeNote sets the "extra_charge_note" field.
func (ec *EstimateCreate) SetExtraChargeNote(s string) *EstimateCreate {
	ec.mutation.SetExtraChargeNote(s)
	return ec
}

// SetNillableExtraChargeNote sets the "extra_charge_note" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableExtraChargeNote(s *string) *EstimateCreate {
	if s != nil {
		ec.SetExtraChargeNote(*s)
	}
	return ec
}

// SetEstimator sets the "estimator" field.
func (ec *EstimateCreate) SetEstimator(s string) *EstimateCreate {
	ec.mutation.SetEstimator(s)
	return ec
}

// SetNillableEstimator sets the "estimator" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableEstimator(s *string) *EstimateCreate {
	if s != nil {
		ec.SetEstimator(*s)
	}
	return ec
}

// SetEstimatorOrderID sets the "estimator_order_id" field.
func (ec *EstimateCreate) SetEstimatorOrderID(u uint) *EstimateCreate {
	ec.mutation.SetEstimatorOrderID(u)
	return ec
}

// SetNillableEstimatorOrderID sets the "estimator_order_id" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableEstimatorOrderID(u *uint) *EstimateCreate {
	if u != nil {
		ec.SetEstimatorOrderID(*u)
	}
	return ec
}

// SetEstimatorReportID sets the "estimator_report_id" field.
func (ec *EstimateCreate) SetEstimatorReportID(u uint) *EstimateCreate {
	ec.mutation.SetEstimatorReportID(u)
	return ec
}

// SetNillableEstimatorReportID sets the "estimator_report_id" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableEstimatorReportID(u *uint) *EstimateCreate {
	if u != nil {
		ec.SetEstimatorReportID(*u)
	}
	return ec
}

// SetTotalSquares sets the "total_squares" field.
func (ec *EstimateCreate) SetTotalSquares(f float64) *EstimateCreate {
	ec.mutation.SetTotalSquares(f)
	return ec
}

// SetNillableTotalSquares sets the "total_squares" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableTotalSquares(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetTotalSquares(*f)
	}
	return ec
}

// SetPrimaryPitch sets the "primary_pitch" field.
func (ec *EstimateCreate) SetPrimaryPitch(f float64) *EstimateCreate {
	ec.mutation.SetPrimaryPitch(f)
	return ec
}

// SetNillablePrimaryPitch sets the "primary_pitch" field if the given value is not nil.
func (ec *EstimateCreate) SetNillablePrimaryPitch(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetPrimaryPitch(*f)
	}
	return ec
}

// SetPrice sets the "price" field.
func (ec *EstimateCreate) SetPrice(f float64) *EstimateCreate {
	ec.mutation.SetPrice(f)
	return ec
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ec *EstimateCreate) SetNillablePrice(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetPrice(*f)
	}
	return ec
}

// SetPriceSummary sets the "price_summary" field.
func (ec *EstimateCreate) SetPriceSummary(s string) *EstimateCreate {
	ec.mutation.SetPriceSummary(s)
	return ec
}

// SetNillablePriceSummary sets the "price_summary" field if the given value is not nil.
func (ec *EstimateCreate) SetNillablePriceSummary(s *string) *EstimateCreate {
	if s != nil {
		ec.SetPriceSummary(*s)
	}
	return ec
}

// SetBounds sets the "bounds" field.
func (ec *EstimateCreate) SetBounds(s []schema.Point) *EstimateCreate {
	ec.mutation.SetBounds(s)
	return ec
}

// SetEstimatorRawResponse sets the "estimator_raw_response" field.
func (ec *EstimateCreate) SetEstimatorRawResponse(m map[string]interface{}) *EstimateCreate {
	ec.mutation.SetEstimatorRawResponse(m)
	return ec
}

// SetOverride sets the "override" field.
func (ec *EstimateCreate) SetOverride(b bool) *EstimateCreate {
	ec.mutation.SetOverride(b)
	return ec
}

// SetNillableOverride sets the "override" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableOverride(b *bool) *EstimateCreate {
	if b != nil {
		ec.SetOverride(*b)
	}
	return ec
}

// SetOverrideTotalSquares sets the "override_total_squares" field.
func (ec *EstimateCreate) SetOverrideTotalSquares(f float64) *EstimateCreate {
	ec.mutation.SetOverrideTotalSquares(f)
	return ec
}

// SetNillableOverrideTotalSquares sets the "override_total_squares" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableOverrideTotalSquares(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetOverrideTotalSquares(*f)
	}
	return ec
}

// SetOverridePrimaryPitch sets the "override_primary_pitch" field.
func (ec *EstimateCreate) SetOverridePrimaryPitch(f float64) *EstimateCreate {
	ec.mutation.SetOverridePrimaryPitch(f)
	return ec
}

// SetNillableOverridePrimaryPitch sets the "override_primary_pitch" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableOverridePrimaryPitch(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetOverridePrimaryPitch(*f)
	}
	return ec
}

// SetOverridePrice sets the "override_price" field.
func (ec *EstimateCreate) SetOverridePrice(f float64) *EstimateCreate {
	ec.mutation.SetOverridePrice(f)
	return ec
}

// SetNillableOverridePrice sets the "override_price" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableOverridePrice(f *float64) *EstimateCreate {
	if f != nil {
		ec.SetOverridePrice(*f)
	}
	return ec
}

// SetOverridePriceSummary sets the "override_price_summary" field.
func (ec *EstimateCreate) SetOverridePriceSummary(s string) *EstimateCreate {
	ec.mutation.SetOverridePriceSummary(s)
	return ec
}

// SetNillableOverridePriceSummary sets the "override_price_summary" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableOverridePriceSummary(s *string) *EstimateCreate {
	if s != nil {
		ec.SetOverridePriceSummary(*s)
	}
	return ec
}

// SetCompanyRefID sets the "company_ref_id" field.
func (ec *EstimateCreate) SetCompanyRefID(s string) *EstimateCreate {
	ec.mutation.SetCompanyRefID(s)
	return ec
}

// SetNillableCompanyRefID sets the "company_ref_id" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableCompanyRefID(s *string) *EstimateCreate {
	if s != nil {
		ec.SetCompanyRefID(*s)
	}
	return ec
}

// SetCompanyRefName sets the "company_ref_name" field.
func (ec *EstimateCreate) SetCompanyRefName(s string) *EstimateCreate {
	ec.mutation.SetCompanyRefName(s)
	return ec
}

// SetNillableCompanyRefName sets the "company_ref_name" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableCompanyRefName(s *string) *EstimateCreate {
	if s != nil {
		ec.SetCompanyRefName(*s)
	}
	return ec
}

// SetFailureReason sets the "failure_reason" field.
func (ec *EstimateCreate) SetFailureReason(s string) *EstimateCreate {
	ec.mutation.SetFailureReason(s)
	return ec
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableFailureReason(s *string) *EstimateCreate {
	if s != nil {
		ec.SetFailureReason(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EstimateCreate) SetID(s string) *EstimateCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableID(s *string) *EstimateCreate {
	if s != nil {
		ec.SetID(*s)
	}
	return ec
}

// AddActivityIDs adds the "activities" edge to the EstimateActivity entity by IDs.
func (ec *EstimateCreate) AddActivityIDs(ids ...string) *EstimateCreate {
	ec.mutation.AddActivityIDs(ids...)
	return ec
}

// AddActivities adds the "activities" edges to the EstimateActivity entity.
func (ec *EstimateCreate) AddActivities(e ...*EstimateActivity) *EstimateCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddActivityIDs(ids...)
}

// SetJobInfoID sets the "job_info" edge to the Job entity by ID.
func (ec *EstimateCreate) SetJobInfoID(id string) *EstimateCreate {
	ec.mutation.SetJobInfoID(id)
	return ec
}

// SetNillableJobInfoID sets the "job_info" edge to the Job entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillableJobInfoID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetJobInfoID(*id)
	}
	return ec
}

// SetJobInfo sets the "job_info" edge to the Job entity.
func (ec *EstimateCreate) SetJobInfo(j *Job) *EstimateCreate {
	return ec.SetJobInfoID(j.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (ec *EstimateCreate) SetPartnerID(id string) *EstimateCreate {
	ec.mutation.SetPartnerID(id)
	return ec
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillablePartnerID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetPartnerID(*id)
	}
	return ec
}

// SetPartner sets the "partner" edge to the Partner entity.
func (ec *EstimateCreate) SetPartner(p *Partner) *EstimateCreate {
	return ec.SetPartnerID(p.ID)
}

// SetHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID.
func (ec *EstimateCreate) SetHomeOwnerID(id string) *EstimateCreate {
	ec.mutation.SetHomeOwnerID(id)
	return ec
}

// SetNillableHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillableHomeOwnerID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetHomeOwnerID(*id)
	}
	return ec
}

// SetHomeOwner sets the "home_owner" edge to the HomeOwner entity.
func (ec *EstimateCreate) SetHomeOwner(h *HomeOwner) *EstimateCreate {
	return ec.SetHomeOwnerID(h.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (ec *EstimateCreate) SetSalesRepID(id string) *EstimateCreate {
	ec.mutation.SetSalesRepID(id)
	return ec
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillableSalesRepID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetSalesRepID(*id)
	}
	return ec
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (ec *EstimateCreate) SetSalesRep(u *User) *EstimateCreate {
	return ec.SetSalesRepID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ec *EstimateCreate) SetCreatorID(id string) *EstimateCreate {
	ec.mutation.SetCreatorID(id)
	return ec
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillableCreatorID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetCreatorID(*id)
	}
	return ec
}

// SetCreator sets the "creator" edge to the User entity.
func (ec *EstimateCreate) SetCreator(u *User) *EstimateCreate {
	return ec.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (ec *EstimateCreate) SetCreatorAPIID(id string) *EstimateCreate {
	ec.mutation.SetCreatorAPIID(id)
	return ec
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillableCreatorAPIID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetCreatorAPIID(*id)
	}
	return ec
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (ec *EstimateCreate) SetCreatorAPI(a *ApiUser) *EstimateCreate {
	return ec.SetCreatorAPIID(a.ID)
}

// SetPdfID sets the "pdf" edge to the Document entity by ID.
func (ec *EstimateCreate) SetPdfID(id string) *EstimateCreate {
	ec.mutation.SetPdfID(id)
	return ec
}

// SetNillablePdfID sets the "pdf" edge to the Document entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillablePdfID(id *string) *EstimateCreate {
	if id != nil {
		ec = ec.SetPdfID(*id)
	}
	return ec
}

// SetPdf sets the "pdf" edge to the Document entity.
func (ec *EstimateCreate) SetPdf(d *Document) *EstimateCreate {
	return ec.SetPdfID(d.ID)
}

// Mutation returns the EstimateMutation object of the builder.
func (ec *EstimateCreate) Mutation() *EstimateMutation {
	return ec.mutation
}

// Save creates the Estimate in the database.
func (ec *EstimateCreate) Save(ctx context.Context) (*Estimate, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EstimateCreate) SaveX(ctx context.Context) *Estimate {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EstimateCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EstimateCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EstimateCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := estimate.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := estimate.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.RegionID(); !ok {
		v := estimate.DefaultRegionID
		ec.mutation.SetRegionID(v)
	}
	if _, ok := ec.mutation.LowSlope(); !ok {
		v := estimate.DefaultLowSlope
		ec.mutation.SetLowSlope(v)
	}
	if _, ok := ec.mutation.Redeck(); !ok {
		v := estimate.DefaultRedeck
		ec.mutation.SetRedeck(v)
	}
	if _, ok := ec.mutation.PartialPercentage(); !ok {
		v := estimate.DefaultPartialPercentage
		ec.mutation.SetPartialPercentage(v)
	}
	if _, ok := ec.mutation.ExtraChargeType(); !ok {
		v := estimate.DefaultExtraChargeType
		ec.mutation.SetExtraChargeType(v)
	}
	if _, ok := ec.mutation.ExtraCharges(); !ok {
		v := estimate.DefaultExtraCharges
		ec.mutation.SetExtraCharges(v)
	}
	if _, ok := ec.mutation.EstimatorOrderID(); !ok {
		v := estimate.DefaultEstimatorOrderID
		ec.mutation.SetEstimatorOrderID(v)
	}
	if _, ok := ec.mutation.EstimatorReportID(); !ok {
		v := estimate.DefaultEstimatorReportID
		ec.mutation.SetEstimatorReportID(v)
	}
	if _, ok := ec.mutation.TotalSquares(); !ok {
		v := estimate.DefaultTotalSquares
		ec.mutation.SetTotalSquares(v)
	}
	if _, ok := ec.mutation.PrimaryPitch(); !ok {
		v := estimate.DefaultPrimaryPitch
		ec.mutation.SetPrimaryPitch(v)
	}
	if _, ok := ec.mutation.Price(); !ok {
		v := estimate.DefaultPrice
		ec.mutation.SetPrice(v)
	}
	if _, ok := ec.mutation.Override(); !ok {
		v := estimate.DefaultOverride
		ec.mutation.SetOverride(v)
	}
	if _, ok := ec.mutation.OverrideTotalSquares(); !ok {
		v := estimate.DefaultOverrideTotalSquares
		ec.mutation.SetOverrideTotalSquares(v)
	}
	if _, ok := ec.mutation.OverridePrimaryPitch(); !ok {
		v := estimate.DefaultOverridePrimaryPitch
		ec.mutation.SetOverridePrimaryPitch(v)
	}
	if _, ok := ec.mutation.OverridePrice(); !ok {
		v := estimate.DefaultOverridePrice
		ec.mutation.SetOverridePrice(v)
	}
	if _, ok := ec.mutation.CompanyRefName(); !ok {
		v := estimate.DefaultCompanyRefName
		ec.mutation.SetCompanyRefName(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := estimate.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EstimateCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Estimate.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Estimate.updated_at"`)}
	}
	if _, ok := ec.mutation.RegionID(); !ok {
		return &ValidationError{Name: "region_id", err: errors.New(`ent: missing required field "Estimate.region_id"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Estimate.status"`)}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := estimate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Estimate.status": %w`, err)}
		}
	}
	if v, ok := ec.mutation.CurrentMaterial(); ok {
		if err := estimate.CurrentMaterialValidator(v); err != nil {
			return &ValidationError{Name: "current_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.current_material": %w`, err)}
		}
	}
	if v, ok := ec.mutation.NewRoofingMaterial(); ok {
		if err := estimate.NewRoofingMaterialValidator(v); err != nil {
			return &ValidationError{Name: "new_roofing_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.new_roofing_material": %w`, err)}
		}
	}
	if _, ok := ec.mutation.LowSlope(); !ok {
		return &ValidationError{Name: "lowSlope", err: errors.New(`ent: missing required field "Estimate.lowSlope"`)}
	}
	if v, ok := ec.mutation.CurrentMaterialLowSlope(); ok {
		if err := estimate.CurrentMaterialLowSlopeValidator(v); err != nil {
			return &ValidationError{Name: "current_material_low_slope", err: fmt.Errorf(`ent: validator failed for field "Estimate.current_material_low_slope": %w`, err)}
		}
	}
	if v, ok := ec.mutation.NewRoofingMaterialLowSlope(); ok {
		if err := estimate.NewRoofingMaterialLowSlopeValidator(v); err != nil {
			return &ValidationError{Name: "new_roofing_material_low_slope", err: fmt.Errorf(`ent: validator failed for field "Estimate.new_roofing_material_low_slope": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Redeck(); !ok {
		return &ValidationError{Name: "redeck", err: errors.New(`ent: missing required field "Estimate.redeck"`)}
	}
	if _, ok := ec.mutation.Layers(); !ok {
		return &ValidationError{Name: "layers", err: errors.New(`ent: missing required field "Estimate.layers"`)}
	}
	if v, ok := ec.mutation.Layer2Material(); ok {
		if err := estimate.Layer2MaterialValidator(v); err != nil {
			return &ValidationError{Name: "layer2_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.layer2_material": %w`, err)}
		}
	}
	if v, ok := ec.mutation.Layer3Material(); ok {
		if err := estimate.Layer3MaterialValidator(v); err != nil {
			return &ValidationError{Name: "layer3_material", err: fmt.Errorf(`ent: validator failed for field "Estimate.layer3_material": %w`, err)}
		}
	}
	if v, ok := ec.mutation.MaterialMappingNote(); ok {
		if err := estimate.MaterialMappingNoteValidator(v); err != nil {
			return &ValidationError{Name: "material_mapping_note", err: fmt.Errorf(`ent: validator failed for field "Estimate.material_mapping_note": %w`, err)}
		}
	}
	if _, ok := ec.mutation.MeasureType(); !ok {
		return &ValidationError{Name: "measure_type", err: errors.New(`ent: missing required field "Estimate.measure_type"`)}
	}
	if v, ok := ec.mutation.MeasureType(); ok {
		if err := estimate.MeasureTypeValidator(v); err != nil {
			return &ValidationError{Name: "measure_type", err: fmt.Errorf(`ent: validator failed for field "Estimate.measure_type": %w`, err)}
		}
	}
	if v, ok := ec.mutation.ExtraChargeType(); ok {
		if err := estimate.ExtraChargeTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_charge_type", err: fmt.Errorf(`ent: validator failed for field "Estimate.extra_charge_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.TotalSquares(); !ok {
		return &ValidationError{Name: "total_squares", err: errors.New(`ent: missing required field "Estimate.total_squares"`)}
	}
	if _, ok := ec.mutation.PrimaryPitch(); !ok {
		return &ValidationError{Name: "primary_pitch", err: errors.New(`ent: missing required field "Estimate.primary_pitch"`)}
	}
	if _, ok := ec.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Estimate.price"`)}
	}
	if _, ok := ec.mutation.OverrideTotalSquares(); !ok {
		return &ValidationError{Name: "override_total_squares", err: errors.New(`ent: missing required field "Estimate.override_total_squares"`)}
	}
	if _, ok := ec.mutation.OverridePrimaryPitch(); !ok {
		return &ValidationError{Name: "override_primary_pitch", err: errors.New(`ent: missing required field "Estimate.override_primary_pitch"`)}
	}
	if _, ok := ec.mutation.OverridePrice(); !ok {
		return &ValidationError{Name: "override_price", err: errors.New(`ent: missing required field "Estimate.override_price"`)}
	}
	if v, ok := ec.mutation.CompanyRefID(); ok {
		if err := estimate.CompanyRefIDValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_id", err: fmt.Errorf(`ent: validator failed for field "Estimate.company_ref_id": %w`, err)}
		}
	}
	if v, ok := ec.mutation.CompanyRefName(); ok {
		if err := estimate.CompanyRefNameValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_name", err: fmt.Errorf(`ent: validator failed for field "Estimate.company_ref_name": %w`, err)}
		}
	}
	if v, ok := ec.mutation.FailureReason(); ok {
		if err := estimate.FailureReasonValidator(v); err != nil {
			return &ValidationError{Name: "failure_reason", err: fmt.Errorf(`ent: validator failed for field "Estimate.failure_reason": %w`, err)}
		}
	}
	if v, ok := ec.mutation.ID(); ok {
		if err := estimate.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Estimate.id": %w`, err)}
		}
	}
	return nil
}

func (ec *EstimateCreate) sqlSave(ctx context.Context) (*Estimate, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Estimate.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EstimateCreate) createSpec() (*Estimate, *sqlgraph.CreateSpec) {
	var (
		_node = &Estimate{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(estimate.Table, sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(estimate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(estimate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.RegionID(); ok {
		_spec.SetField(estimate.FieldRegionID, field.TypeUint8, value)
		_node.RegionID = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(estimate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.CurrentMaterial(); ok {
		_spec.SetField(estimate.FieldCurrentMaterial, field.TypeString, value)
		_node.CurrentMaterial = value
	}
	if value, ok := ec.mutation.NewRoofingMaterial(); ok {
		_spec.SetField(estimate.FieldNewRoofingMaterial, field.TypeString, value)
		_node.NewRoofingMaterial = value
	}
	if value, ok := ec.mutation.LowSlope(); ok {
		_spec.SetField(estimate.FieldLowSlope, field.TypeBool, value)
		_node.LowSlope = value
	}
	if value, ok := ec.mutation.CurrentMaterialLowSlope(); ok {
		_spec.SetField(estimate.FieldCurrentMaterialLowSlope, field.TypeString, value)
		_node.CurrentMaterialLowSlope = value
	}
	if value, ok := ec.mutation.NewRoofingMaterialLowSlope(); ok {
		_spec.SetField(estimate.FieldNewRoofingMaterialLowSlope, field.TypeString, value)
		_node.NewRoofingMaterialLowSlope = value
	}
	if value, ok := ec.mutation.Redeck(); ok {
		_spec.SetField(estimate.FieldRedeck, field.TypeBool, value)
		_node.Redeck = value
	}
	if value, ok := ec.mutation.Layers(); ok {
		_spec.SetField(estimate.FieldLayers, field.TypeUint8, value)
		_node.Layers = value
	}
	if value, ok := ec.mutation.Layer2Material(); ok {
		_spec.SetField(estimate.FieldLayer2Material, field.TypeString, value)
		_node.Layer2Material = value
	}
	if value, ok := ec.mutation.Layer3Material(); ok {
		_spec.SetField(estimate.FieldLayer3Material, field.TypeString, value)
		_node.Layer3Material = value
	}
	if value, ok := ec.mutation.PartialPercentage(); ok {
		_spec.SetField(estimate.FieldPartialPercentage, field.TypeFloat64, value)
		_node.PartialPercentage = value
	}
	if value, ok := ec.mutation.MaterialMappingNote(); ok {
		_spec.SetField(estimate.FieldMaterialMappingNote, field.TypeString, value)
		_node.MaterialMappingNote = value
	}
	if value, ok := ec.mutation.MeasureType(); ok {
		_spec.SetField(estimate.FieldMeasureType, field.TypeEnum, value)
		_node.MeasureType = value
	}
	if value, ok := ec.mutation.ExtraChargeType(); ok {
		_spec.SetField(estimate.FieldExtraChargeType, field.TypeEnum, value)
		_node.ExtraChargeType = value
	}
	if value, ok := ec.mutation.ExtraCharges(); ok {
		_spec.SetField(estimate.FieldExtraCharges, field.TypeFloat64, value)
		_node.ExtraCharges = value
	}
	if value, ok := ec.mutation.ExtraChargeCond(); ok {
		_spec.SetField(estimate.FieldExtraChargeCond, field.TypeJSON, value)
		_node.ExtraChargeCond = value
	}
	if value, ok := ec.mutation.ExtraChargeNote(); ok {
		_spec.SetField(estimate.FieldExtraChargeNote, field.TypeString, value)
		_node.ExtraChargeNote = &value
	}
	if value, ok := ec.mutation.Estimator(); ok {
		_spec.SetField(estimate.FieldEstimator, field.TypeString, value)
		_node.Estimator = value
	}
	if value, ok := ec.mutation.EstimatorOrderID(); ok {
		_spec.SetField(estimate.FieldEstimatorOrderID, field.TypeUint, value)
		_node.EstimatorOrderID = value
	}
	if value, ok := ec.mutation.EstimatorReportID(); ok {
		_spec.SetField(estimate.FieldEstimatorReportID, field.TypeUint, value)
		_node.EstimatorReportID = value
	}
	if value, ok := ec.mutation.TotalSquares(); ok {
		_spec.SetField(estimate.FieldTotalSquares, field.TypeFloat64, value)
		_node.TotalSquares = value
	}
	if value, ok := ec.mutation.PrimaryPitch(); ok {
		_spec.SetField(estimate.FieldPrimaryPitch, field.TypeFloat64, value)
		_node.PrimaryPitch = value
	}
	if value, ok := ec.mutation.Price(); ok {
		_spec.SetField(estimate.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ec.mutation.PriceSummary(); ok {
		_spec.SetField(estimate.FieldPriceSummary, field.TypeString, value)
		_node.PriceSummary = value
	}
	if value, ok := ec.mutation.Bounds(); ok {
		_spec.SetField(estimate.FieldBounds, field.TypeJSON, value)
		_node.Bounds = value
	}
	if value, ok := ec.mutation.EstimatorRawResponse(); ok {
		_spec.SetField(estimate.FieldEstimatorRawResponse, field.TypeJSON, value)
		_node.EstimatorRawResponse = value
	}
	if value, ok := ec.mutation.Override(); ok {
		_spec.SetField(estimate.FieldOverride, field.TypeBool, value)
		_node.Override = value
	}
	if value, ok := ec.mutation.OverrideTotalSquares(); ok {
		_spec.SetField(estimate.FieldOverrideTotalSquares, field.TypeFloat64, value)
		_node.OverrideTotalSquares = value
	}
	if value, ok := ec.mutation.OverridePrimaryPitch(); ok {
		_spec.SetField(estimate.FieldOverridePrimaryPitch, field.TypeFloat64, value)
		_node.OverridePrimaryPitch = value
	}
	if value, ok := ec.mutation.OverridePrice(); ok {
		_spec.SetField(estimate.FieldOverridePrice, field.TypeFloat64, value)
		_node.OverridePrice = value
	}
	if value, ok := ec.mutation.OverridePriceSummary(); ok {
		_spec.SetField(estimate.FieldOverridePriceSummary, field.TypeString, value)
		_node.OverridePriceSummary = value
	}
	if value, ok := ec.mutation.CompanyRefID(); ok {
		_spec.SetField(estimate.FieldCompanyRefID, field.TypeString, value)
		_node.CompanyRefID = value
	}
	if value, ok := ec.mutation.CompanyRefName(); ok {
		_spec.SetField(estimate.FieldCompanyRefName, field.TypeString, value)
		_node.CompanyRefName = value
	}
	if value, ok := ec.mutation.FailureReason(); ok {
		_spec.SetField(estimate.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = value
	}
	if nodes := ec.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ActivitiesTable,
			Columns: []string{estimate.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.JobInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   estimate.JobInfoTable,
			Columns: []string{estimate.JobInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.PartnerTable,
			Columns: []string{estimate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.HomeOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.HomeOwnerTable,
			Columns: []string{estimate.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.home_owner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.SalesRepTable,
			Columns: []string{estimate.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sales_rep_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorTable,
			Columns: []string{estimate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.CreatorAPITable,
			Columns: []string{estimate.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   estimate.PdfTable,
			Columns: []string{estimate.PdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pdf_doc_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Estimate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EstimateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EstimateCreate) OnConflict(opts ...sql.ConflictOption) *EstimateUpsertOne {
	ec.conflict = opts
	return &EstimateUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Estimate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EstimateCreate) OnConflictColumns(columns ...string) *EstimateUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EstimateUpsertOne{
		create: ec,
	}
}

type (
	// EstimateUpsertOne is the builder for "upsert"-ing
	//  one Estimate node.
	EstimateUpsertOne struct {
		create *EstimateCreate
	}

	// EstimateUpsert is the "OnConflict" setter.
	EstimateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EstimateUpsert) SetUpdatedAt(v time.Time) *EstimateUpsert {
	u.Set(estimate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateUpdatedAt() *EstimateUpsert {
	u.SetExcluded(estimate.FieldUpdatedAt)
	return u
}

// SetRegionID sets the "region_id" field.
func (u *EstimateUpsert) SetRegionID(v uint8) *EstimateUpsert {
	u.Set(estimate.FieldRegionID, v)
	return u
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateRegionID() *EstimateUpsert {
	u.SetExcluded(estimate.FieldRegionID)
	return u
}

// AddRegionID adds v to the "region_id" field.
func (u *EstimateUpsert) AddRegionID(v uint8) *EstimateUpsert {
	u.Add(estimate.FieldRegionID, v)
	return u
}

// SetStatus sets the "status" field.
func (u *EstimateUpsert) SetStatus(v enum.EstimateStatus) *EstimateUpsert {
	u.Set(estimate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateStatus() *EstimateUpsert {
	u.SetExcluded(estimate.FieldStatus)
	return u
}

// SetCurrentMaterial sets the "current_material" field.
func (u *EstimateUpsert) SetCurrentMaterial(v string) *EstimateUpsert {
	u.Set(estimate.FieldCurrentMaterial, v)
	return u
}

// UpdateCurrentMaterial sets the "current_material" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateCurrentMaterial() *EstimateUpsert {
	u.SetExcluded(estimate.FieldCurrentMaterial)
	return u
}

// ClearCurrentMaterial clears the value of the "current_material" field.
func (u *EstimateUpsert) ClearCurrentMaterial() *EstimateUpsert {
	u.SetNull(estimate.FieldCurrentMaterial)
	return u
}

// SetNewRoofingMaterial sets the "new_roofing_material" field.
func (u *EstimateUpsert) SetNewRoofingMaterial(v string) *EstimateUpsert {
	u.Set(estimate.FieldNewRoofingMaterial, v)
	return u
}

// UpdateNewRoofingMaterial sets the "new_roofing_material" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateNewRoofingMaterial() *EstimateUpsert {
	u.SetExcluded(estimate.FieldNewRoofingMaterial)
	return u
}

// ClearNewRoofingMaterial clears the value of the "new_roofing_material" field.
func (u *EstimateUpsert) ClearNewRoofingMaterial() *EstimateUpsert {
	u.SetNull(estimate.FieldNewRoofingMaterial)
	return u
}

// SetLowSlope sets the "lowSlope" field.
func (u *EstimateUpsert) SetLowSlope(v bool) *EstimateUpsert {
	u.Set(estimate.FieldLowSlope, v)
	return u
}

// UpdateLowSlope sets the "lowSlope" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateLowSlope() *EstimateUpsert {
	u.SetExcluded(estimate.FieldLowSlope)
	return u
}

// SetCurrentMaterialLowSlope sets the "current_material_low_slope" field.
func (u *EstimateUpsert) SetCurrentMaterialLowSlope(v string) *EstimateUpsert {
	u.Set(estimate.FieldCurrentMaterialLowSlope, v)
	return u
}

// UpdateCurrentMaterialLowSlope sets the "current_material_low_slope" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateCurrentMaterialLowSlope() *EstimateUpsert {
	u.SetExcluded(estimate.FieldCurrentMaterialLowSlope)
	return u
}

// ClearCurrentMaterialLowSlope clears the value of the "current_material_low_slope" field.
func (u *EstimateUpsert) ClearCurrentMaterialLowSlope() *EstimateUpsert {
	u.SetNull(estimate.FieldCurrentMaterialLowSlope)
	return u
}

// SetNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field.
func (u *EstimateUpsert) SetNewRoofingMaterialLowSlope(v string) *EstimateUpsert {
	u.Set(estimate.FieldNewRoofingMaterialLowSlope, v)
	return u
}

// UpdateNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateNewRoofingMaterialLowSlope() *EstimateUpsert {
	u.SetExcluded(estimate.FieldNewRoofingMaterialLowSlope)
	return u
}

// ClearNewRoofingMaterialLowSlope clears the value of the "new_roofing_material_low_slope" field.
func (u *EstimateUpsert) ClearNewRoofingMaterialLowSlope() *EstimateUpsert {
	u.SetNull(estimate.FieldNewRoofingMaterialLowSlope)
	return u
}

// SetRedeck sets the "redeck" field.
func (u *EstimateUpsert) SetRedeck(v bool) *EstimateUpsert {
	u.Set(estimate.FieldRedeck, v)
	return u
}

// UpdateRedeck sets the "redeck" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateRedeck() *EstimateUpsert {
	u.SetExcluded(estimate.FieldRedeck)
	return u
}

// SetLayers sets the "layers" field.
func (u *EstimateUpsert) SetLayers(v uint8) *EstimateUpsert {
	u.Set(estimate.FieldLayers, v)
	return u
}

// UpdateLayers sets the "layers" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateLayers() *EstimateUpsert {
	u.SetExcluded(estimate.FieldLayers)
	return u
}

// AddLayers adds v to the "layers" field.
func (u *EstimateUpsert) AddLayers(v uint8) *EstimateUpsert {
	u.Add(estimate.FieldLayers, v)
	return u
}

// SetLayer2Material sets the "layer2_material" field.
func (u *EstimateUpsert) SetLayer2Material(v string) *EstimateUpsert {
	u.Set(estimate.FieldLayer2Material, v)
	return u
}

// UpdateLayer2Material sets the "layer2_material" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateLayer2Material() *EstimateUpsert {
	u.SetExcluded(estimate.FieldLayer2Material)
	return u
}

// ClearLayer2Material clears the value of the "layer2_material" field.
func (u *EstimateUpsert) ClearLayer2Material() *EstimateUpsert {
	u.SetNull(estimate.FieldLayer2Material)
	return u
}

// SetLayer3Material sets the "layer3_material" field.
func (u *EstimateUpsert) SetLayer3Material(v string) *EstimateUpsert {
	u.Set(estimate.FieldLayer3Material, v)
	return u
}

// UpdateLayer3Material sets the "layer3_material" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateLayer3Material() *EstimateUpsert {
	u.SetExcluded(estimate.FieldLayer3Material)
	return u
}

// ClearLayer3Material clears the value of the "layer3_material" field.
func (u *EstimateUpsert) ClearLayer3Material() *EstimateUpsert {
	u.SetNull(estimate.FieldLayer3Material)
	return u
}

// SetPartialPercentage sets the "partial_percentage" field.
func (u *EstimateUpsert) SetPartialPercentage(v float64) *EstimateUpsert {
	u.Set(estimate.FieldPartialPercentage, v)
	return u
}

// UpdatePartialPercentage sets the "partial_percentage" field to the value that was provided on create.
func (u *EstimateUpsert) UpdatePartialPercentage() *EstimateUpsert {
	u.SetExcluded(estimate.FieldPartialPercentage)
	return u
}

// AddPartialPercentage adds v to the "partial_percentage" field.
func (u *EstimateUpsert) AddPartialPercentage(v float64) *EstimateUpsert {
	u.Add(estimate.FieldPartialPercentage, v)
	return u
}

// ClearPartialPercentage clears the value of the "partial_percentage" field.
func (u *EstimateUpsert) ClearPartialPercentage() *EstimateUpsert {
	u.SetNull(estimate.FieldPartialPercentage)
	return u
}

// SetMaterialMappingNote sets the "material_mapping_note" field.
func (u *EstimateUpsert) SetMaterialMappingNote(v string) *EstimateUpsert {
	u.Set(estimate.FieldMaterialMappingNote, v)
	return u
}

// UpdateMaterialMappingNote sets the "material_mapping_note" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateMaterialMappingNote() *EstimateUpsert {
	u.SetExcluded(estimate.FieldMaterialMappingNote)
	return u
}

// ClearMaterialMappingNote clears the value of the "material_mapping_note" field.
func (u *EstimateUpsert) ClearMaterialMappingNote() *EstimateUpsert {
	u.SetNull(estimate.FieldMaterialMappingNote)
	return u
}

// SetMeasureType sets the "measure_type" field.
func (u *EstimateUpsert) SetMeasureType(v enum.Measure) *EstimateUpsert {
	u.Set(estimate.FieldMeasureType, v)
	return u
}

// UpdateMeasureType sets the "measure_type" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateMeasureType() *EstimateUpsert {
	u.SetExcluded(estimate.FieldMeasureType)
	return u
}

// SetExtraChargeType sets the "extra_charge_type" field.
func (u *EstimateUpsert) SetExtraChargeType(v enum.ExtraCharge) *EstimateUpsert {
	u.Set(estimate.FieldExtraChargeType, v)
	return u
}

// UpdateExtraChargeType sets the "extra_charge_type" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateExtraChargeType() *EstimateUpsert {
	u.SetExcluded(estimate.FieldExtraChargeType)
	return u
}

// ClearExtraChargeType clears the value of the "extra_charge_type" field.
func (u *EstimateUpsert) ClearExtraChargeType() *EstimateUpsert {
	u.SetNull(estimate.FieldExtraChargeType)
	return u
}

// SetExtraCharges sets the "extra_charges" field.
func (u *EstimateUpsert) SetExtraCharges(v float64) *EstimateUpsert {
	u.Set(estimate.FieldExtraCharges, v)
	return u
}

// UpdateExtraCharges sets the "extra_charges" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateExtraCharges() *EstimateUpsert {
	u.SetExcluded(estimate.FieldExtraCharges)
	return u
}

// AddExtraCharges adds v to the "extra_charges" field.
func (u *EstimateUpsert) AddExtraCharges(v float64) *EstimateUpsert {
	u.Add(estimate.FieldExtraCharges, v)
	return u
}

// ClearExtraCharges clears the value of the "extra_charges" field.
func (u *EstimateUpsert) ClearExtraCharges() *EstimateUpsert {
	u.SetNull(estimate.FieldExtraCharges)
	return u
}

// SetExtraChargeCond sets the "extra_charge_cond" field.
func (u *EstimateUpsert) SetExtraChargeCond(v []*model.ExtraChargeCondition) *EstimateUpsert {
	u.Set(estimate.FieldExtraChargeCond, v)
	return u
}

// UpdateExtraChargeCond sets the "extra_charge_cond" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateExtraChargeCond() *EstimateUpsert {
	u.SetExcluded(estimate.FieldExtraChargeCond)
	return u
}

// ClearExtraChargeCond clears the value of the "extra_charge_cond" field.
func (u *EstimateUpsert) ClearExtraChargeCond() *EstimateUpsert {
	u.SetNull(estimate.FieldExtraChargeCond)
	return u
}

// SetExtraChargeNote sets the "extra_charge_note" field.
func (u *EstimateUpsert) SetExtraChargeNote(v string) *EstimateUpsert {
	u.Set(estimate.FieldExtraChargeNote, v)
	return u
}

// UpdateExtraChargeNote sets the "extra_charge_note" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateExtraChargeNote() *EstimateUpsert {
	u.SetExcluded(estimate.FieldExtraChargeNote)
	return u
}

// ClearExtraChargeNote clears the value of the "extra_charge_note" field.
func (u *EstimateUpsert) ClearExtraChargeNote() *EstimateUpsert {
	u.SetNull(estimate.FieldExtraChargeNote)
	return u
}

// SetEstimator sets the "estimator" field.
func (u *EstimateUpsert) SetEstimator(v string) *EstimateUpsert {
	u.Set(estimate.FieldEstimator, v)
	return u
}

// UpdateEstimator sets the "estimator" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateEstimator() *EstimateUpsert {
	u.SetExcluded(estimate.FieldEstimator)
	return u
}

// ClearEstimator clears the value of the "estimator" field.
func (u *EstimateUpsert) ClearEstimator() *EstimateUpsert {
	u.SetNull(estimate.FieldEstimator)
	return u
}

// SetEstimatorOrderID sets the "estimator_order_id" field.
func (u *EstimateUpsert) SetEstimatorOrderID(v uint) *EstimateUpsert {
	u.Set(estimate.FieldEstimatorOrderID, v)
	return u
}

// UpdateEstimatorOrderID sets the "estimator_order_id" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateEstimatorOrderID() *EstimateUpsert {
	u.SetExcluded(estimate.FieldEstimatorOrderID)
	return u
}

// AddEstimatorOrderID adds v to the "estimator_order_id" field.
func (u *EstimateUpsert) AddEstimatorOrderID(v uint) *EstimateUpsert {
	u.Add(estimate.FieldEstimatorOrderID, v)
	return u
}

// ClearEstimatorOrderID clears the value of the "estimator_order_id" field.
func (u *EstimateUpsert) ClearEstimatorOrderID() *EstimateUpsert {
	u.SetNull(estimate.FieldEstimatorOrderID)
	return u
}

// SetEstimatorReportID sets the "estimator_report_id" field.
func (u *EstimateUpsert) SetEstimatorReportID(v uint) *EstimateUpsert {
	u.Set(estimate.FieldEstimatorReportID, v)
	return u
}

// UpdateEstimatorReportID sets the "estimator_report_id" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateEstimatorReportID() *EstimateUpsert {
	u.SetExcluded(estimate.FieldEstimatorReportID)
	return u
}

// AddEstimatorReportID adds v to the "estimator_report_id" field.
func (u *EstimateUpsert) AddEstimatorReportID(v uint) *EstimateUpsert {
	u.Add(estimate.FieldEstimatorReportID, v)
	return u
}

// ClearEstimatorReportID clears the value of the "estimator_report_id" field.
func (u *EstimateUpsert) ClearEstimatorReportID() *EstimateUpsert {
	u.SetNull(estimate.FieldEstimatorReportID)
	return u
}

// SetTotalSquares sets the "total_squares" field.
func (u *EstimateUpsert) SetTotalSquares(v float64) *EstimateUpsert {
	u.Set(estimate.FieldTotalSquares, v)
	return u
}

// UpdateTotalSquares sets the "total_squares" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateTotalSquares() *EstimateUpsert {
	u.SetExcluded(estimate.FieldTotalSquares)
	return u
}

// AddTotalSquares adds v to the "total_squares" field.
func (u *EstimateUpsert) AddTotalSquares(v float64) *EstimateUpsert {
	u.Add(estimate.FieldTotalSquares, v)
	return u
}

// SetPrimaryPitch sets the "primary_pitch" field.
func (u *EstimateUpsert) SetPrimaryPitch(v float64) *EstimateUpsert {
	u.Set(estimate.FieldPrimaryPitch, v)
	return u
}

// UpdatePrimaryPitch sets the "primary_pitch" field to the value that was provided on create.
func (u *EstimateUpsert) UpdatePrimaryPitch() *EstimateUpsert {
	u.SetExcluded(estimate.FieldPrimaryPitch)
	return u
}

// AddPrimaryPitch adds v to the "primary_pitch" field.
func (u *EstimateUpsert) AddPrimaryPitch(v float64) *EstimateUpsert {
	u.Add(estimate.FieldPrimaryPitch, v)
	return u
}

// SetPrice sets the "price" field.
func (u *EstimateUpsert) SetPrice(v float64) *EstimateUpsert {
	u.Set(estimate.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EstimateUpsert) UpdatePrice() *EstimateUpsert {
	u.SetExcluded(estimate.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *EstimateUpsert) AddPrice(v float64) *EstimateUpsert {
	u.Add(estimate.FieldPrice, v)
	return u
}

// SetPriceSummary sets the "price_summary" field.
func (u *EstimateUpsert) SetPriceSummary(v string) *EstimateUpsert {
	u.Set(estimate.FieldPriceSummary, v)
	return u
}

// UpdatePriceSummary sets the "price_summary" field to the value that was provided on create.
func (u *EstimateUpsert) UpdatePriceSummary() *EstimateUpsert {
	u.SetExcluded(estimate.FieldPriceSummary)
	return u
}

// ClearPriceSummary clears the value of the "price_summary" field.
func (u *EstimateUpsert) ClearPriceSummary() *EstimateUpsert {
	u.SetNull(estimate.FieldPriceSummary)
	return u
}

// SetBounds sets the "bounds" field.
func (u *EstimateUpsert) SetBounds(v []schema.Point) *EstimateUpsert {
	u.Set(estimate.FieldBounds, v)
	return u
}

// UpdateBounds sets the "bounds" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateBounds() *EstimateUpsert {
	u.SetExcluded(estimate.FieldBounds)
	return u
}

// ClearBounds clears the value of the "bounds" field.
func (u *EstimateUpsert) ClearBounds() *EstimateUpsert {
	u.SetNull(estimate.FieldBounds)
	return u
}

// SetEstimatorRawResponse sets the "estimator_raw_response" field.
func (u *EstimateUpsert) SetEstimatorRawResponse(v map[string]interface{}) *EstimateUpsert {
	u.Set(estimate.FieldEstimatorRawResponse, v)
	return u
}

// UpdateEstimatorRawResponse sets the "estimator_raw_response" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateEstimatorRawResponse() *EstimateUpsert {
	u.SetExcluded(estimate.FieldEstimatorRawResponse)
	return u
}

// ClearEstimatorRawResponse clears the value of the "estimator_raw_response" field.
func (u *EstimateUpsert) ClearEstimatorRawResponse() *EstimateUpsert {
	u.SetNull(estimate.FieldEstimatorRawResponse)
	return u
}

// SetOverride sets the "override" field.
func (u *EstimateUpsert) SetOverride(v bool) *EstimateUpsert {
	u.Set(estimate.FieldOverride, v)
	return u
}

// UpdateOverride sets the "override" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateOverride() *EstimateUpsert {
	u.SetExcluded(estimate.FieldOverride)
	return u
}

// ClearOverride clears the value of the "override" field.
func (u *EstimateUpsert) ClearOverride() *EstimateUpsert {
	u.SetNull(estimate.FieldOverride)
	return u
}

// SetOverrideTotalSquares sets the "override_total_squares" field.
func (u *EstimateUpsert) SetOverrideTotalSquares(v float64) *EstimateUpsert {
	u.Set(estimate.FieldOverrideTotalSquares, v)
	return u
}

// UpdateOverrideTotalSquares sets the "override_total_squares" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateOverrideTotalSquares() *EstimateUpsert {
	u.SetExcluded(estimate.FieldOverrideTotalSquares)
	return u
}

// AddOverrideTotalSquares adds v to the "override_total_squares" field.
func (u *EstimateUpsert) AddOverrideTotalSquares(v float64) *EstimateUpsert {
	u.Add(estimate.FieldOverrideTotalSquares, v)
	return u
}

// SetOverridePrimaryPitch sets the "override_primary_pitch" field.
func (u *EstimateUpsert) SetOverridePrimaryPitch(v float64) *EstimateUpsert {
	u.Set(estimate.FieldOverridePrimaryPitch, v)
	return u
}

// UpdateOverridePrimaryPitch sets the "override_primary_pitch" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateOverridePrimaryPitch() *EstimateUpsert {
	u.SetExcluded(estimate.FieldOverridePrimaryPitch)
	return u
}

// AddOverridePrimaryPitch adds v to the "override_primary_pitch" field.
func (u *EstimateUpsert) AddOverridePrimaryPitch(v float64) *EstimateUpsert {
	u.Add(estimate.FieldOverridePrimaryPitch, v)
	return u
}

// SetOverridePrice sets the "override_price" field.
func (u *EstimateUpsert) SetOverridePrice(v float64) *EstimateUpsert {
	u.Set(estimate.FieldOverridePrice, v)
	return u
}

// UpdateOverridePrice sets the "override_price" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateOverridePrice() *EstimateUpsert {
	u.SetExcluded(estimate.FieldOverridePrice)
	return u
}

// AddOverridePrice adds v to the "override_price" field.
func (u *EstimateUpsert) AddOverridePrice(v float64) *EstimateUpsert {
	u.Add(estimate.FieldOverridePrice, v)
	return u
}

// SetOverridePriceSummary sets the "override_price_summary" field.
func (u *EstimateUpsert) SetOverridePriceSummary(v string) *EstimateUpsert {
	u.Set(estimate.FieldOverridePriceSummary, v)
	return u
}

// UpdateOverridePriceSummary sets the "override_price_summary" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateOverridePriceSummary() *EstimateUpsert {
	u.SetExcluded(estimate.FieldOverridePriceSummary)
	return u
}

// ClearOverridePriceSummary clears the value of the "override_price_summary" field.
func (u *EstimateUpsert) ClearOverridePriceSummary() *EstimateUpsert {
	u.SetNull(estimate.FieldOverridePriceSummary)
	return u
}

// SetCompanyRefID sets the "company_ref_id" field.
func (u *EstimateUpsert) SetCompanyRefID(v string) *EstimateUpsert {
	u.Set(estimate.FieldCompanyRefID, v)
	return u
}

// UpdateCompanyRefID sets the "company_ref_id" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateCompanyRefID() *EstimateUpsert {
	u.SetExcluded(estimate.FieldCompanyRefID)
	return u
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (u *EstimateUpsert) ClearCompanyRefID() *EstimateUpsert {
	u.SetNull(estimate.FieldCompanyRefID)
	return u
}

// SetCompanyRefName sets the "company_ref_name" field.
func (u *EstimateUpsert) SetCompanyRefName(v string) *EstimateUpsert {
	u.Set(estimate.FieldCompanyRefName, v)
	return u
}

// UpdateCompanyRefName sets the "company_ref_name" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateCompanyRefName() *EstimateUpsert {
	u.SetExcluded(estimate.FieldCompanyRefName)
	return u
}

// ClearCompanyRefName clears the value of the "company_ref_name" field.
func (u *EstimateUpsert) ClearCompanyRefName() *EstimateUpsert {
	u.SetNull(estimate.FieldCompanyRefName)
	return u
}

// SetFailureReason sets the "failure_reason" field.
func (u *EstimateUpsert) SetFailureReason(v string) *EstimateUpsert {
	u.Set(estimate.FieldFailureReason, v)
	return u
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *EstimateUpsert) UpdateFailureReason() *EstimateUpsert {
	u.SetExcluded(estimate.FieldFailureReason)
	return u
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *EstimateUpsert) ClearFailureReason() *EstimateUpsert {
	u.SetNull(estimate.FieldFailureReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Estimate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(estimate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EstimateUpsertOne) UpdateNewValues() *EstimateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(estimate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(estimate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Estimate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EstimateUpsertOne) Ignore() *EstimateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EstimateUpsertOne) DoNothing() *EstimateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EstimateCreate.OnConflict
// documentation for more info.
func (u *EstimateUpsertOne) Update(set func(*EstimateUpsert)) *EstimateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EstimateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EstimateUpsertOne) SetUpdatedAt(v time.Time) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateUpdatedAt() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRegionID sets the "region_id" field.
func (u *EstimateUpsertOne) SetRegionID(v uint8) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *EstimateUpsertOne) AddRegionID(v uint8) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateRegionID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateRegionID()
	})
}

// SetStatus sets the "status" field.
func (u *EstimateUpsertOne) SetStatus(v enum.EstimateStatus) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateStatus() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateStatus()
	})
}

// SetCurrentMaterial sets the "current_material" field.
func (u *EstimateUpsertOne) SetCurrentMaterial(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCurrentMaterial(v)
	})
}

// UpdateCurrentMaterial sets the "current_material" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateCurrentMaterial() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCurrentMaterial()
	})
}

// ClearCurrentMaterial clears the value of the "current_material" field.
func (u *EstimateUpsertOne) ClearCurrentMaterial() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCurrentMaterial()
	})
}

// SetNewRoofingMaterial sets the "new_roofing_material" field.
func (u *EstimateUpsertOne) SetNewRoofingMaterial(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetNewRoofingMaterial(v)
	})
}

// UpdateNewRoofingMaterial sets the "new_roofing_material" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateNewRoofingMaterial() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateNewRoofingMaterial()
	})
}

// ClearNewRoofingMaterial clears the value of the "new_roofing_material" field.
func (u *EstimateUpsertOne) ClearNewRoofingMaterial() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearNewRoofingMaterial()
	})
}

// SetLowSlope sets the "lowSlope" field.
func (u *EstimateUpsertOne) SetLowSlope(v bool) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLowSlope(v)
	})
}

// UpdateLowSlope sets the "lowSlope" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateLowSlope() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLowSlope()
	})
}

// SetCurrentMaterialLowSlope sets the "current_material_low_slope" field.
func (u *EstimateUpsertOne) SetCurrentMaterialLowSlope(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCurrentMaterialLowSlope(v)
	})
}

// UpdateCurrentMaterialLowSlope sets the "current_material_low_slope" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateCurrentMaterialLowSlope() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCurrentMaterialLowSlope()
	})
}

// ClearCurrentMaterialLowSlope clears the value of the "current_material_low_slope" field.
func (u *EstimateUpsertOne) ClearCurrentMaterialLowSlope() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCurrentMaterialLowSlope()
	})
}

// SetNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field.
func (u *EstimateUpsertOne) SetNewRoofingMaterialLowSlope(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetNewRoofingMaterialLowSlope(v)
	})
}

// UpdateNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateNewRoofingMaterialLowSlope() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateNewRoofingMaterialLowSlope()
	})
}

// ClearNewRoofingMaterialLowSlope clears the value of the "new_roofing_material_low_slope" field.
func (u *EstimateUpsertOne) ClearNewRoofingMaterialLowSlope() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearNewRoofingMaterialLowSlope()
	})
}

// SetRedeck sets the "redeck" field.
func (u *EstimateUpsertOne) SetRedeck(v bool) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetRedeck(v)
	})
}

// UpdateRedeck sets the "redeck" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateRedeck() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateRedeck()
	})
}

// SetLayers sets the "layers" field.
func (u *EstimateUpsertOne) SetLayers(v uint8) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLayers(v)
	})
}

// AddLayers adds v to the "layers" field.
func (u *EstimateUpsertOne) AddLayers(v uint8) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddLayers(v)
	})
}

// UpdateLayers sets the "layers" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateLayers() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLayers()
	})
}

// SetLayer2Material sets the "layer2_material" field.
func (u *EstimateUpsertOne) SetLayer2Material(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLayer2Material(v)
	})
}

// UpdateLayer2Material sets the "layer2_material" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateLayer2Material() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLayer2Material()
	})
}

// ClearLayer2Material clears the value of the "layer2_material" field.
func (u *EstimateUpsertOne) ClearLayer2Material() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearLayer2Material()
	})
}

// SetLayer3Material sets the "layer3_material" field.
func (u *EstimateUpsertOne) SetLayer3Material(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLayer3Material(v)
	})
}

// UpdateLayer3Material sets the "layer3_material" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateLayer3Material() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLayer3Material()
	})
}

// ClearLayer3Material clears the value of the "layer3_material" field.
func (u *EstimateUpsertOne) ClearLayer3Material() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearLayer3Material()
	})
}

// SetPartialPercentage sets the "partial_percentage" field.
func (u *EstimateUpsertOne) SetPartialPercentage(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPartialPercentage(v)
	})
}

// AddPartialPercentage adds v to the "partial_percentage" field.
func (u *EstimateUpsertOne) AddPartialPercentage(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddPartialPercentage(v)
	})
}

// UpdatePartialPercentage sets the "partial_percentage" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdatePartialPercentage() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePartialPercentage()
	})
}

// ClearPartialPercentage clears the value of the "partial_percentage" field.
func (u *EstimateUpsertOne) ClearPartialPercentage() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearPartialPercentage()
	})
}

// SetMaterialMappingNote sets the "material_mapping_note" field.
func (u *EstimateUpsertOne) SetMaterialMappingNote(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetMaterialMappingNote(v)
	})
}

// UpdateMaterialMappingNote sets the "material_mapping_note" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateMaterialMappingNote() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateMaterialMappingNote()
	})
}

// ClearMaterialMappingNote clears the value of the "material_mapping_note" field.
func (u *EstimateUpsertOne) ClearMaterialMappingNote() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearMaterialMappingNote()
	})
}

// SetMeasureType sets the "measure_type" field.
func (u *EstimateUpsertOne) SetMeasureType(v enum.Measure) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetMeasureType(v)
	})
}

// UpdateMeasureType sets the "measure_type" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateMeasureType() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateMeasureType()
	})
}

// SetExtraChargeType sets the "extra_charge_type" field.
func (u *EstimateUpsertOne) SetExtraChargeType(v enum.ExtraCharge) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraChargeType(v)
	})
}

// UpdateExtraChargeType sets the "extra_charge_type" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateExtraChargeType() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraChargeType()
	})
}

// ClearExtraChargeType clears the value of the "extra_charge_type" field.
func (u *EstimateUpsertOne) ClearExtraChargeType() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraChargeType()
	})
}

// SetExtraCharges sets the "extra_charges" field.
func (u *EstimateUpsertOne) SetExtraCharges(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraCharges(v)
	})
}

// AddExtraCharges adds v to the "extra_charges" field.
func (u *EstimateUpsertOne) AddExtraCharges(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddExtraCharges(v)
	})
}

// UpdateExtraCharges sets the "extra_charges" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateExtraCharges() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraCharges()
	})
}

// ClearExtraCharges clears the value of the "extra_charges" field.
func (u *EstimateUpsertOne) ClearExtraCharges() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraCharges()
	})
}

// SetExtraChargeCond sets the "extra_charge_cond" field.
func (u *EstimateUpsertOne) SetExtraChargeCond(v []*model.ExtraChargeCondition) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraChargeCond(v)
	})
}

// UpdateExtraChargeCond sets the "extra_charge_cond" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateExtraChargeCond() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraChargeCond()
	})
}

// ClearExtraChargeCond clears the value of the "extra_charge_cond" field.
func (u *EstimateUpsertOne) ClearExtraChargeCond() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraChargeCond()
	})
}

// SetExtraChargeNote sets the "extra_charge_note" field.
func (u *EstimateUpsertOne) SetExtraChargeNote(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraChargeNote(v)
	})
}

// UpdateExtraChargeNote sets the "extra_charge_note" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateExtraChargeNote() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraChargeNote()
	})
}

// ClearExtraChargeNote clears the value of the "extra_charge_note" field.
func (u *EstimateUpsertOne) ClearExtraChargeNote() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraChargeNote()
	})
}

// SetEstimator sets the "estimator" field.
func (u *EstimateUpsertOne) SetEstimator(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimator(v)
	})
}

// UpdateEstimator sets the "estimator" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateEstimator() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimator()
	})
}

// ClearEstimator clears the value of the "estimator" field.
func (u *EstimateUpsertOne) ClearEstimator() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimator()
	})
}

// SetEstimatorOrderID sets the "estimator_order_id" field.
func (u *EstimateUpsertOne) SetEstimatorOrderID(v uint) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimatorOrderID(v)
	})
}

// AddEstimatorOrderID adds v to the "estimator_order_id" field.
func (u *EstimateUpsertOne) AddEstimatorOrderID(v uint) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddEstimatorOrderID(v)
	})
}

// UpdateEstimatorOrderID sets the "estimator_order_id" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateEstimatorOrderID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimatorOrderID()
	})
}

// ClearEstimatorOrderID clears the value of the "estimator_order_id" field.
func (u *EstimateUpsertOne) ClearEstimatorOrderID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimatorOrderID()
	})
}

// SetEstimatorReportID sets the "estimator_report_id" field.
func (u *EstimateUpsertOne) SetEstimatorReportID(v uint) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimatorReportID(v)
	})
}

// AddEstimatorReportID adds v to the "estimator_report_id" field.
func (u *EstimateUpsertOne) AddEstimatorReportID(v uint) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddEstimatorReportID(v)
	})
}

// UpdateEstimatorReportID sets the "estimator_report_id" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateEstimatorReportID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimatorReportID()
	})
}

// ClearEstimatorReportID clears the value of the "estimator_report_id" field.
func (u *EstimateUpsertOne) ClearEstimatorReportID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimatorReportID()
	})
}

// SetTotalSquares sets the "total_squares" field.
func (u *EstimateUpsertOne) SetTotalSquares(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetTotalSquares(v)
	})
}

// AddTotalSquares adds v to the "total_squares" field.
func (u *EstimateUpsertOne) AddTotalSquares(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddTotalSquares(v)
	})
}

// UpdateTotalSquares sets the "total_squares" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateTotalSquares() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateTotalSquares()
	})
}

// SetPrimaryPitch sets the "primary_pitch" field.
func (u *EstimateUpsertOne) SetPrimaryPitch(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPrimaryPitch(v)
	})
}

// AddPrimaryPitch adds v to the "primary_pitch" field.
func (u *EstimateUpsertOne) AddPrimaryPitch(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddPrimaryPitch(v)
	})
}

// UpdatePrimaryPitch sets the "primary_pitch" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdatePrimaryPitch() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePrimaryPitch()
	})
}

// SetPrice sets the "price" field.
func (u *EstimateUpsertOne) SetPrice(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EstimateUpsertOne) AddPrice(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdatePrice() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePrice()
	})
}

// SetPriceSummary sets the "price_summary" field.
func (u *EstimateUpsertOne) SetPriceSummary(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPriceSummary(v)
	})
}

// UpdatePriceSummary sets the "price_summary" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdatePriceSummary() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePriceSummary()
	})
}

// ClearPriceSummary clears the value of the "price_summary" field.
func (u *EstimateUpsertOne) ClearPriceSummary() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearPriceSummary()
	})
}

// SetBounds sets the "bounds" field.
func (u *EstimateUpsertOne) SetBounds(v []schema.Point) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetBounds(v)
	})
}

// UpdateBounds sets the "bounds" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateBounds() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateBounds()
	})
}

// ClearBounds clears the value of the "bounds" field.
func (u *EstimateUpsertOne) ClearBounds() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearBounds()
	})
}

// SetEstimatorRawResponse sets the "estimator_raw_response" field.
func (u *EstimateUpsertOne) SetEstimatorRawResponse(v map[string]interface{}) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimatorRawResponse(v)
	})
}

// UpdateEstimatorRawResponse sets the "estimator_raw_response" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateEstimatorRawResponse() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimatorRawResponse()
	})
}

// ClearEstimatorRawResponse clears the value of the "estimator_raw_response" field.
func (u *EstimateUpsertOne) ClearEstimatorRawResponse() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimatorRawResponse()
	})
}

// SetOverride sets the "override" field.
func (u *EstimateUpsertOne) SetOverride(v bool) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverride(v)
	})
}

// UpdateOverride sets the "override" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateOverride() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverride()
	})
}

// ClearOverride clears the value of the "override" field.
func (u *EstimateUpsertOne) ClearOverride() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearOverride()
	})
}

// SetOverrideTotalSquares sets the "override_total_squares" field.
func (u *EstimateUpsertOne) SetOverrideTotalSquares(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverrideTotalSquares(v)
	})
}

// AddOverrideTotalSquares adds v to the "override_total_squares" field.
func (u *EstimateUpsertOne) AddOverrideTotalSquares(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddOverrideTotalSquares(v)
	})
}

// UpdateOverrideTotalSquares sets the "override_total_squares" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateOverrideTotalSquares() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverrideTotalSquares()
	})
}

// SetOverridePrimaryPitch sets the "override_primary_pitch" field.
func (u *EstimateUpsertOne) SetOverridePrimaryPitch(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverridePrimaryPitch(v)
	})
}

// AddOverridePrimaryPitch adds v to the "override_primary_pitch" field.
func (u *EstimateUpsertOne) AddOverridePrimaryPitch(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddOverridePrimaryPitch(v)
	})
}

// UpdateOverridePrimaryPitch sets the "override_primary_pitch" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateOverridePrimaryPitch() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverridePrimaryPitch()
	})
}

// SetOverridePrice sets the "override_price" field.
func (u *EstimateUpsertOne) SetOverridePrice(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverridePrice(v)
	})
}

// AddOverridePrice adds v to the "override_price" field.
func (u *EstimateUpsertOne) AddOverridePrice(v float64) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.AddOverridePrice(v)
	})
}

// UpdateOverridePrice sets the "override_price" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateOverridePrice() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverridePrice()
	})
}

// SetOverridePriceSummary sets the "override_price_summary" field.
func (u *EstimateUpsertOne) SetOverridePriceSummary(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverridePriceSummary(v)
	})
}

// UpdateOverridePriceSummary sets the "override_price_summary" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateOverridePriceSummary() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverridePriceSummary()
	})
}

// ClearOverridePriceSummary clears the value of the "override_price_summary" field.
func (u *EstimateUpsertOne) ClearOverridePriceSummary() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearOverridePriceSummary()
	})
}

// SetCompanyRefID sets the "company_ref_id" field.
func (u *EstimateUpsertOne) SetCompanyRefID(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCompanyRefID(v)
	})
}

// UpdateCompanyRefID sets the "company_ref_id" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateCompanyRefID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCompanyRefID()
	})
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (u *EstimateUpsertOne) ClearCompanyRefID() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCompanyRefID()
	})
}

// SetCompanyRefName sets the "company_ref_name" field.
func (u *EstimateUpsertOne) SetCompanyRefName(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCompanyRefName(v)
	})
}

// UpdateCompanyRefName sets the "company_ref_name" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateCompanyRefName() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCompanyRefName()
	})
}

// ClearCompanyRefName clears the value of the "company_ref_name" field.
func (u *EstimateUpsertOne) ClearCompanyRefName() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCompanyRefName()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *EstimateUpsertOne) SetFailureReason(v string) *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *EstimateUpsertOne) UpdateFailureReason() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *EstimateUpsertOne) ClearFailureReason() *EstimateUpsertOne {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearFailureReason()
	})
}

// Exec executes the query.
func (u *EstimateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EstimateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EstimateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EstimateUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EstimateUpsertOne.ID is not supported by MySQL driver. Use EstimateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EstimateUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EstimateCreateBulk is the builder for creating many Estimate entities in bulk.
type EstimateCreateBulk struct {
	config
	builders []*EstimateCreate
	conflict []sql.ConflictOption
}

// Save creates the Estimate entities in the database.
func (ecb *EstimateCreateBulk) Save(ctx context.Context) ([]*Estimate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Estimate, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EstimateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EstimateCreateBulk) SaveX(ctx context.Context) []*Estimate {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EstimateCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EstimateCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Estimate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EstimateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EstimateCreateBulk) OnConflict(opts ...sql.ConflictOption) *EstimateUpsertBulk {
	ecb.conflict = opts
	return &EstimateUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Estimate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EstimateCreateBulk) OnConflictColumns(columns ...string) *EstimateUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EstimateUpsertBulk{
		create: ecb,
	}
}

// EstimateUpsertBulk is the builder for "upsert"-ing
// a bulk of Estimate nodes.
type EstimateUpsertBulk struct {
	create *EstimateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Estimate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(estimate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EstimateUpsertBulk) UpdateNewValues() *EstimateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(estimate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(estimate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Estimate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EstimateUpsertBulk) Ignore() *EstimateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EstimateUpsertBulk) DoNothing() *EstimateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EstimateCreateBulk.OnConflict
// documentation for more info.
func (u *EstimateUpsertBulk) Update(set func(*EstimateUpsert)) *EstimateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EstimateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EstimateUpsertBulk) SetUpdatedAt(v time.Time) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateUpdatedAt() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRegionID sets the "region_id" field.
func (u *EstimateUpsertBulk) SetRegionID(v uint8) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *EstimateUpsertBulk) AddRegionID(v uint8) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateRegionID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateRegionID()
	})
}

// SetStatus sets the "status" field.
func (u *EstimateUpsertBulk) SetStatus(v enum.EstimateStatus) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateStatus() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateStatus()
	})
}

// SetCurrentMaterial sets the "current_material" field.
func (u *EstimateUpsertBulk) SetCurrentMaterial(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCurrentMaterial(v)
	})
}

// UpdateCurrentMaterial sets the "current_material" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateCurrentMaterial() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCurrentMaterial()
	})
}

// ClearCurrentMaterial clears the value of the "current_material" field.
func (u *EstimateUpsertBulk) ClearCurrentMaterial() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCurrentMaterial()
	})
}

// SetNewRoofingMaterial sets the "new_roofing_material" field.
func (u *EstimateUpsertBulk) SetNewRoofingMaterial(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetNewRoofingMaterial(v)
	})
}

// UpdateNewRoofingMaterial sets the "new_roofing_material" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateNewRoofingMaterial() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateNewRoofingMaterial()
	})
}

// ClearNewRoofingMaterial clears the value of the "new_roofing_material" field.
func (u *EstimateUpsertBulk) ClearNewRoofingMaterial() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearNewRoofingMaterial()
	})
}

// SetLowSlope sets the "lowSlope" field.
func (u *EstimateUpsertBulk) SetLowSlope(v bool) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLowSlope(v)
	})
}

// UpdateLowSlope sets the "lowSlope" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateLowSlope() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLowSlope()
	})
}

// SetCurrentMaterialLowSlope sets the "current_material_low_slope" field.
func (u *EstimateUpsertBulk) SetCurrentMaterialLowSlope(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCurrentMaterialLowSlope(v)
	})
}

// UpdateCurrentMaterialLowSlope sets the "current_material_low_slope" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateCurrentMaterialLowSlope() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCurrentMaterialLowSlope()
	})
}

// ClearCurrentMaterialLowSlope clears the value of the "current_material_low_slope" field.
func (u *EstimateUpsertBulk) ClearCurrentMaterialLowSlope() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCurrentMaterialLowSlope()
	})
}

// SetNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field.
func (u *EstimateUpsertBulk) SetNewRoofingMaterialLowSlope(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetNewRoofingMaterialLowSlope(v)
	})
}

// UpdateNewRoofingMaterialLowSlope sets the "new_roofing_material_low_slope" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateNewRoofingMaterialLowSlope() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateNewRoofingMaterialLowSlope()
	})
}

// ClearNewRoofingMaterialLowSlope clears the value of the "new_roofing_material_low_slope" field.
func (u *EstimateUpsertBulk) ClearNewRoofingMaterialLowSlope() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearNewRoofingMaterialLowSlope()
	})
}

// SetRedeck sets the "redeck" field.
func (u *EstimateUpsertBulk) SetRedeck(v bool) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetRedeck(v)
	})
}

// UpdateRedeck sets the "redeck" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateRedeck() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateRedeck()
	})
}

// SetLayers sets the "layers" field.
func (u *EstimateUpsertBulk) SetLayers(v uint8) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLayers(v)
	})
}

// AddLayers adds v to the "layers" field.
func (u *EstimateUpsertBulk) AddLayers(v uint8) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddLayers(v)
	})
}

// UpdateLayers sets the "layers" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateLayers() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLayers()
	})
}

// SetLayer2Material sets the "layer2_material" field.
func (u *EstimateUpsertBulk) SetLayer2Material(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLayer2Material(v)
	})
}

// UpdateLayer2Material sets the "layer2_material" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateLayer2Material() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLayer2Material()
	})
}

// ClearLayer2Material clears the value of the "layer2_material" field.
func (u *EstimateUpsertBulk) ClearLayer2Material() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearLayer2Material()
	})
}

// SetLayer3Material sets the "layer3_material" field.
func (u *EstimateUpsertBulk) SetLayer3Material(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetLayer3Material(v)
	})
}

// UpdateLayer3Material sets the "layer3_material" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateLayer3Material() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateLayer3Material()
	})
}

// ClearLayer3Material clears the value of the "layer3_material" field.
func (u *EstimateUpsertBulk) ClearLayer3Material() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearLayer3Material()
	})
}

// SetPartialPercentage sets the "partial_percentage" field.
func (u *EstimateUpsertBulk) SetPartialPercentage(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPartialPercentage(v)
	})
}

// AddPartialPercentage adds v to the "partial_percentage" field.
func (u *EstimateUpsertBulk) AddPartialPercentage(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddPartialPercentage(v)
	})
}

// UpdatePartialPercentage sets the "partial_percentage" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdatePartialPercentage() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePartialPercentage()
	})
}

// ClearPartialPercentage clears the value of the "partial_percentage" field.
func (u *EstimateUpsertBulk) ClearPartialPercentage() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearPartialPercentage()
	})
}

// SetMaterialMappingNote sets the "material_mapping_note" field.
func (u *EstimateUpsertBulk) SetMaterialMappingNote(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetMaterialMappingNote(v)
	})
}

// UpdateMaterialMappingNote sets the "material_mapping_note" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateMaterialMappingNote() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateMaterialMappingNote()
	})
}

// ClearMaterialMappingNote clears the value of the "material_mapping_note" field.
func (u *EstimateUpsertBulk) ClearMaterialMappingNote() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearMaterialMappingNote()
	})
}

// SetMeasureType sets the "measure_type" field.
func (u *EstimateUpsertBulk) SetMeasureType(v enum.Measure) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetMeasureType(v)
	})
}

// UpdateMeasureType sets the "measure_type" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateMeasureType() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateMeasureType()
	})
}

// SetExtraChargeType sets the "extra_charge_type" field.
func (u *EstimateUpsertBulk) SetExtraChargeType(v enum.ExtraCharge) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraChargeType(v)
	})
}

// UpdateExtraChargeType sets the "extra_charge_type" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateExtraChargeType() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraChargeType()
	})
}

// ClearExtraChargeType clears the value of the "extra_charge_type" field.
func (u *EstimateUpsertBulk) ClearExtraChargeType() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraChargeType()
	})
}

// SetExtraCharges sets the "extra_charges" field.
func (u *EstimateUpsertBulk) SetExtraCharges(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraCharges(v)
	})
}

// AddExtraCharges adds v to the "extra_charges" field.
func (u *EstimateUpsertBulk) AddExtraCharges(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddExtraCharges(v)
	})
}

// UpdateExtraCharges sets the "extra_charges" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateExtraCharges() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraCharges()
	})
}

// ClearExtraCharges clears the value of the "extra_charges" field.
func (u *EstimateUpsertBulk) ClearExtraCharges() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraCharges()
	})
}

// SetExtraChargeCond sets the "extra_charge_cond" field.
func (u *EstimateUpsertBulk) SetExtraChargeCond(v []*model.ExtraChargeCondition) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraChargeCond(v)
	})
}

// UpdateExtraChargeCond sets the "extra_charge_cond" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateExtraChargeCond() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraChargeCond()
	})
}

// ClearExtraChargeCond clears the value of the "extra_charge_cond" field.
func (u *EstimateUpsertBulk) ClearExtraChargeCond() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraChargeCond()
	})
}

// SetExtraChargeNote sets the "extra_charge_note" field.
func (u *EstimateUpsertBulk) SetExtraChargeNote(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetExtraChargeNote(v)
	})
}

// UpdateExtraChargeNote sets the "extra_charge_note" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateExtraChargeNote() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateExtraChargeNote()
	})
}

// ClearExtraChargeNote clears the value of the "extra_charge_note" field.
func (u *EstimateUpsertBulk) ClearExtraChargeNote() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearExtraChargeNote()
	})
}

// SetEstimator sets the "estimator" field.
func (u *EstimateUpsertBulk) SetEstimator(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimator(v)
	})
}

// UpdateEstimator sets the "estimator" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateEstimator() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimator()
	})
}

// ClearEstimator clears the value of the "estimator" field.
func (u *EstimateUpsertBulk) ClearEstimator() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimator()
	})
}

// SetEstimatorOrderID sets the "estimator_order_id" field.
func (u *EstimateUpsertBulk) SetEstimatorOrderID(v uint) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimatorOrderID(v)
	})
}

// AddEstimatorOrderID adds v to the "estimator_order_id" field.
func (u *EstimateUpsertBulk) AddEstimatorOrderID(v uint) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddEstimatorOrderID(v)
	})
}

// UpdateEstimatorOrderID sets the "estimator_order_id" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateEstimatorOrderID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimatorOrderID()
	})
}

// ClearEstimatorOrderID clears the value of the "estimator_order_id" field.
func (u *EstimateUpsertBulk) ClearEstimatorOrderID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimatorOrderID()
	})
}

// SetEstimatorReportID sets the "estimator_report_id" field.
func (u *EstimateUpsertBulk) SetEstimatorReportID(v uint) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimatorReportID(v)
	})
}

// AddEstimatorReportID adds v to the "estimator_report_id" field.
func (u *EstimateUpsertBulk) AddEstimatorReportID(v uint) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddEstimatorReportID(v)
	})
}

// UpdateEstimatorReportID sets the "estimator_report_id" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateEstimatorReportID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimatorReportID()
	})
}

// ClearEstimatorReportID clears the value of the "estimator_report_id" field.
func (u *EstimateUpsertBulk) ClearEstimatorReportID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimatorReportID()
	})
}

// SetTotalSquares sets the "total_squares" field.
func (u *EstimateUpsertBulk) SetTotalSquares(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetTotalSquares(v)
	})
}

// AddTotalSquares adds v to the "total_squares" field.
func (u *EstimateUpsertBulk) AddTotalSquares(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddTotalSquares(v)
	})
}

// UpdateTotalSquares sets the "total_squares" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateTotalSquares() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateTotalSquares()
	})
}

// SetPrimaryPitch sets the "primary_pitch" field.
func (u *EstimateUpsertBulk) SetPrimaryPitch(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPrimaryPitch(v)
	})
}

// AddPrimaryPitch adds v to the "primary_pitch" field.
func (u *EstimateUpsertBulk) AddPrimaryPitch(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddPrimaryPitch(v)
	})
}

// UpdatePrimaryPitch sets the "primary_pitch" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdatePrimaryPitch() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePrimaryPitch()
	})
}

// SetPrice sets the "price" field.
func (u *EstimateUpsertBulk) SetPrice(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EstimateUpsertBulk) AddPrice(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdatePrice() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePrice()
	})
}

// SetPriceSummary sets the "price_summary" field.
func (u *EstimateUpsertBulk) SetPriceSummary(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetPriceSummary(v)
	})
}

// UpdatePriceSummary sets the "price_summary" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdatePriceSummary() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdatePriceSummary()
	})
}

// ClearPriceSummary clears the value of the "price_summary" field.
func (u *EstimateUpsertBulk) ClearPriceSummary() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearPriceSummary()
	})
}

// SetBounds sets the "bounds" field.
func (u *EstimateUpsertBulk) SetBounds(v []schema.Point) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetBounds(v)
	})
}

// UpdateBounds sets the "bounds" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateBounds() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateBounds()
	})
}

// ClearBounds clears the value of the "bounds" field.
func (u *EstimateUpsertBulk) ClearBounds() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearBounds()
	})
}

// SetEstimatorRawResponse sets the "estimator_raw_response" field.
func (u *EstimateUpsertBulk) SetEstimatorRawResponse(v map[string]interface{}) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetEstimatorRawResponse(v)
	})
}

// UpdateEstimatorRawResponse sets the "estimator_raw_response" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateEstimatorRawResponse() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateEstimatorRawResponse()
	})
}

// ClearEstimatorRawResponse clears the value of the "estimator_raw_response" field.
func (u *EstimateUpsertBulk) ClearEstimatorRawResponse() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearEstimatorRawResponse()
	})
}

// SetOverride sets the "override" field.
func (u *EstimateUpsertBulk) SetOverride(v bool) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverride(v)
	})
}

// UpdateOverride sets the "override" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateOverride() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverride()
	})
}

// ClearOverride clears the value of the "override" field.
func (u *EstimateUpsertBulk) ClearOverride() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearOverride()
	})
}

// SetOverrideTotalSquares sets the "override_total_squares" field.
func (u *EstimateUpsertBulk) SetOverrideTotalSquares(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverrideTotalSquares(v)
	})
}

// AddOverrideTotalSquares adds v to the "override_total_squares" field.
func (u *EstimateUpsertBulk) AddOverrideTotalSquares(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddOverrideTotalSquares(v)
	})
}

// UpdateOverrideTotalSquares sets the "override_total_squares" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateOverrideTotalSquares() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverrideTotalSquares()
	})
}

// SetOverridePrimaryPitch sets the "override_primary_pitch" field.
func (u *EstimateUpsertBulk) SetOverridePrimaryPitch(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverridePrimaryPitch(v)
	})
}

// AddOverridePrimaryPitch adds v to the "override_primary_pitch" field.
func (u *EstimateUpsertBulk) AddOverridePrimaryPitch(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddOverridePrimaryPitch(v)
	})
}

// UpdateOverridePrimaryPitch sets the "override_primary_pitch" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateOverridePrimaryPitch() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverridePrimaryPitch()
	})
}

// SetOverridePrice sets the "override_price" field.
func (u *EstimateUpsertBulk) SetOverridePrice(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverridePrice(v)
	})
}

// AddOverridePrice adds v to the "override_price" field.
func (u *EstimateUpsertBulk) AddOverridePrice(v float64) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.AddOverridePrice(v)
	})
}

// UpdateOverridePrice sets the "override_price" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateOverridePrice() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverridePrice()
	})
}

// SetOverridePriceSummary sets the "override_price_summary" field.
func (u *EstimateUpsertBulk) SetOverridePriceSummary(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetOverridePriceSummary(v)
	})
}

// UpdateOverridePriceSummary sets the "override_price_summary" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateOverridePriceSummary() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateOverridePriceSummary()
	})
}

// ClearOverridePriceSummary clears the value of the "override_price_summary" field.
func (u *EstimateUpsertBulk) ClearOverridePriceSummary() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearOverridePriceSummary()
	})
}

// SetCompanyRefID sets the "company_ref_id" field.
func (u *EstimateUpsertBulk) SetCompanyRefID(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCompanyRefID(v)
	})
}

// UpdateCompanyRefID sets the "company_ref_id" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateCompanyRefID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCompanyRefID()
	})
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (u *EstimateUpsertBulk) ClearCompanyRefID() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCompanyRefID()
	})
}

// SetCompanyRefName sets the "company_ref_name" field.
func (u *EstimateUpsertBulk) SetCompanyRefName(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetCompanyRefName(v)
	})
}

// UpdateCompanyRefName sets the "company_ref_name" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateCompanyRefName() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateCompanyRefName()
	})
}

// ClearCompanyRefName clears the value of the "company_ref_name" field.
func (u *EstimateUpsertBulk) ClearCompanyRefName() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearCompanyRefName()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *EstimateUpsertBulk) SetFailureReason(v string) *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *EstimateUpsertBulk) UpdateFailureReason() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *EstimateUpsertBulk) ClearFailureReason() *EstimateUpsertBulk {
	return u.Update(func(s *EstimateUpsert) {
		s.ClearFailureReason()
	})
}

// Exec executes the query.
func (u *EstimateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EstimateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EstimateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EstimateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

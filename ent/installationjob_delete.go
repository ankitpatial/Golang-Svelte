// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/installationjob"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobDelete is the builder for deleting a InstallationJob entity.
type InstallationJobDelete struct {
	config
	hooks    []Hook
	mutation *InstallationJobMutation
}

// Where appends a list predicates to the InstallationJobDelete builder.
func (ijd *InstallationJobDelete) Where(ps ...predicate.InstallationJob) *InstallationJobDelete {
	ijd.mutation.Where(ps...)
	return ijd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ijd *InstallationJobDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ijd.sqlExec, ijd.mutation, ijd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ijd *InstallationJobDelete) ExecX(ctx context.Context) int {
	n, err := ijd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ijd *InstallationJobDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(installationjob.Table, sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString))
	if ps := ijd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ijd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ijd.mutation.done = true
	return affected, err
}

// InstallationJobDeleteOne is the builder for deleting a single InstallationJob entity.
type InstallationJobDeleteOne struct {
	ijd *InstallationJobDelete
}

// Where appends a list predicates to the InstallationJobDelete builder.
func (ijdo *InstallationJobDeleteOne) Where(ps ...predicate.InstallationJob) *InstallationJobDeleteOne {
	ijdo.ijd.mutation.Where(ps...)
	return ijdo
}

// Exec executes the deletion query.
func (ijdo *InstallationJobDeleteOne) Exec(ctx context.Context) error {
	n, err := ijdo.ijd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{installationjob.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ijdo *InstallationJobDeleteOne) ExecX(ctx context.Context) {
	if err := ijdo.Exec(ctx); err != nil {
		panic(err)
	}
}

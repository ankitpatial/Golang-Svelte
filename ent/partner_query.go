// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/apiuser"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/installationjob"
	"roofix/ent/job"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobnote"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/partnerservice"
	"roofix/ent/partnerservicecity"
	"roofix/ent/partnerservicestate"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/predicate"
	"roofix/ent/survey"
	"roofix/ent/user"
	"roofix/ent/usersession"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerQuery is the builder for querying Partner entities.
type PartnerQuery struct {
	config
	ctx                                *QueryContext
	order                              []partner.OrderOption
	inters                             []Interceptor
	predicates                         []predicate.Partner
	withRequestedEstimates             *EstimateQuery
	withEstimateHomeOwners             *HomeOwnerQuery
	withRoofingJobs                    *JobQuery
	withIntegrationJobs                *JobQuery
	withEpcJobs                        *JobQuery
	withJobRequests                    *JobQuery
	withActivities                     *PartnerActivityQuery
	withJobAssignmentHistory           *JobAssignmentHistoryQuery
	withRequestedInstallationJobs      *InstallationJobQuery
	withAssignedInstallationJobs       *InstallationJobQuery
	withContacts                       *UserQuery
	withCreator                        *UserQuery
	withCreatorAPI                     *ApiUserQuery
	withServices                       *PartnerServiceQuery
	withServiceStates                  *PartnerServiceStateQuery
	withServiceCities                  *PartnerServiceCityQuery
	withTrainingVideos                 *PartnerTrainingVideoQuery
	withContactUsRequests              *ContactUsQuery
	withSurveys                        *SurveyQuery
	withSessions                       *UserSessionQuery
	withJobNotes                       *JobNoteQuery
	withChannels                       *ChannelSubQuery
	withFinanceOptions                 *OptionListQuery
	withEpcOptions                     *OptionListQuery
	withPartnerContacts                *PartnerContactQuery
	withFKs                            bool
	loadTotal                          []func(context.Context, []*Partner) error
	modifiers                          []func(*sql.Selector)
	withNamedRequestedEstimates        map[string]*EstimateQuery
	withNamedEstimateHomeOwners        map[string]*HomeOwnerQuery
	withNamedRoofingJobs               map[string]*JobQuery
	withNamedIntegrationJobs           map[string]*JobQuery
	withNamedEpcJobs                   map[string]*JobQuery
	withNamedJobRequests               map[string]*JobQuery
	withNamedActivities                map[string]*PartnerActivityQuery
	withNamedJobAssignmentHistory      map[string]*JobAssignmentHistoryQuery
	withNamedRequestedInstallationJobs map[string]*InstallationJobQuery
	withNamedAssignedInstallationJobs  map[string]*InstallationJobQuery
	withNamedContacts                  map[string]*UserQuery
	withNamedServices                  map[string]*PartnerServiceQuery
	withNamedServiceStates             map[string]*PartnerServiceStateQuery
	withNamedServiceCities             map[string]*PartnerServiceCityQuery
	withNamedTrainingVideos            map[string]*PartnerTrainingVideoQuery
	withNamedContactUsRequests         map[string]*ContactUsQuery
	withNamedSurveys                   map[string]*SurveyQuery
	withNamedSessions                  map[string]*UserSessionQuery
	withNamedJobNotes                  map[string]*JobNoteQuery
	withNamedChannels                  map[string]*ChannelSubQuery
	withNamedFinanceOptions            map[string]*OptionListQuery
	withNamedEpcOptions                map[string]*OptionListQuery
	withNamedPartnerContacts           map[string]*PartnerContactQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PartnerQuery builder.
func (pq *PartnerQuery) Where(ps ...predicate.Partner) *PartnerQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PartnerQuery) Limit(limit int) *PartnerQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PartnerQuery) Offset(offset int) *PartnerQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PartnerQuery) Unique(unique bool) *PartnerQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PartnerQuery) Order(o ...partner.OrderOption) *PartnerQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryRequestedEstimates chains the current query on the "requested_estimates" edge.
func (pq *PartnerQuery) QueryRequestedEstimates() *EstimateQuery {
	query := (&EstimateClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.RequestedEstimatesTable, partner.RequestedEstimatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEstimateHomeOwners chains the current query on the "estimate_home_owners" edge.
func (pq *PartnerQuery) QueryEstimateHomeOwners() *HomeOwnerQuery {
	query := (&HomeOwnerClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(homeowner.Table, homeowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.EstimateHomeOwnersTable, partner.EstimateHomeOwnersColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoofingJobs chains the current query on the "roofing_jobs" edge.
func (pq *PartnerQuery) QueryRoofingJobs() *JobQuery {
	query := (&JobClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.RoofingJobsTable, partner.RoofingJobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrationJobs chains the current query on the "integration_jobs" edge.
func (pq *PartnerQuery) QueryIntegrationJobs() *JobQuery {
	query := (&JobClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.IntegrationJobsTable, partner.IntegrationJobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpcJobs chains the current query on the "epc_jobs" edge.
func (pq *PartnerQuery) QueryEpcJobs() *JobQuery {
	query := (&JobClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.EpcJobsTable, partner.EpcJobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobRequests chains the current query on the "job_requests" edge.
func (pq *PartnerQuery) QueryJobRequests() *JobQuery {
	query := (&JobClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.JobRequestsTable, partner.JobRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActivities chains the current query on the "activities" edge.
func (pq *PartnerQuery) QueryActivities() *PartnerActivityQuery {
	query := (&PartnerActivityClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(partneractivity.Table, partneractivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ActivitiesTable, partner.ActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobAssignmentHistory chains the current query on the "job_assignment_history" edge.
func (pq *PartnerQuery) QueryJobAssignmentHistory() *JobAssignmentHistoryQuery {
	query := (&JobAssignmentHistoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(jobassignmenthistory.Table, jobassignmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.JobAssignmentHistoryTable, partner.JobAssignmentHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequestedInstallationJobs chains the current query on the "requested_installation_jobs" edge.
func (pq *PartnerQuery) QueryRequestedInstallationJobs() *InstallationJobQuery {
	query := (&InstallationJobClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.RequestedInstallationJobsTable, partner.RequestedInstallationJobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedInstallationJobs chains the current query on the "assigned_installation_jobs" edge.
func (pq *PartnerQuery) QueryAssignedInstallationJobs() *InstallationJobQuery {
	query := (&InstallationJobClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(installationjob.Table, installationjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.AssignedInstallationJobsTable, partner.AssignedInstallationJobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContacts chains the current query on the "contacts" edge.
func (pq *PartnerQuery) QueryContacts() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partner.ContactsTable, partner.ContactsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (pq *PartnerQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partner.CreatorTable, partner.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatorAPI chains the current query on the "creator_api" edge.
func (pq *PartnerQuery) QueryCreatorAPI() *ApiUserQuery {
	query := (&ApiUserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partner.CreatorAPITable, partner.CreatorAPIColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServices chains the current query on the "services" edge.
func (pq *PartnerQuery) QueryServices() *PartnerServiceQuery {
	query := (&PartnerServiceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(partnerservice.Table, partnerservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ServicesTable, partner.ServicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceStates chains the current query on the "service_states" edge.
func (pq *PartnerQuery) QueryServiceStates() *PartnerServiceStateQuery {
	query := (&PartnerServiceStateClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(partnerservicestate.Table, partnerservicestate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ServiceStatesTable, partner.ServiceStatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceCities chains the current query on the "service_cities" edge.
func (pq *PartnerQuery) QueryServiceCities() *PartnerServiceCityQuery {
	query := (&PartnerServiceCityClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(partnerservicecity.Table, partnerservicecity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ServiceCitiesTable, partner.ServiceCitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrainingVideos chains the current query on the "training_videos" edge.
func (pq *PartnerQuery) QueryTrainingVideos() *PartnerTrainingVideoQuery {
	query := (&PartnerTrainingVideoClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(partnertrainingvideo.Table, partnertrainingvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.TrainingVideosTable, partner.TrainingVideosColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContactUsRequests chains the current query on the "contact_us_requests" edge.
func (pq *PartnerQuery) QueryContactUsRequests() *ContactUsQuery {
	query := (&ContactUsClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(contactus.Table, contactus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ContactUsRequestsTable, partner.ContactUsRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySurveys chains the current query on the "surveys" edge.
func (pq *PartnerQuery) QuerySurveys() *SurveyQuery {
	query := (&SurveyClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.SurveysTable, partner.SurveysColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (pq *PartnerQuery) QuerySessions() *UserSessionQuery {
	query := (&UserSessionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.SessionsTable, partner.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobNotes chains the current query on the "job_notes" edge.
func (pq *PartnerQuery) QueryJobNotes() *JobNoteQuery {
	query := (&JobNoteClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(jobnote.Table, jobnote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.JobNotesTable, partner.JobNotesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChannels chains the current query on the "channels" edge.
func (pq *PartnerQuery) QueryChannels() *ChannelSubQuery {
	query := (&ChannelSubClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(channelsub.Table, channelsub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partner.ChannelsTable, partner.ChannelsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFinanceOptions chains the current query on the "finance_options" edge.
func (pq *PartnerQuery) QueryFinanceOptions() *OptionListQuery {
	query := (&OptionListClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(optionlist.Table, optionlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, partner.FinanceOptionsTable, partner.FinanceOptionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpcOptions chains the current query on the "epc_options" edge.
func (pq *PartnerQuery) QueryEpcOptions() *OptionListQuery {
	query := (&OptionListClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(optionlist.Table, optionlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, partner.EpcOptionsTable, partner.EpcOptionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartnerContacts chains the current query on the "partner_contacts" edge.
func (pq *PartnerQuery) QueryPartnerContacts() *PartnerContactQuery {
	query := (&PartnerContactClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, selector),
			sqlgraph.To(partnercontact.Table, partnercontact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, partner.PartnerContactsTable, partner.PartnerContactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Partner entity from the query.
// Returns a *NotFoundError when no Partner was found.
func (pq *PartnerQuery) First(ctx context.Context) (*Partner, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{partner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PartnerQuery) FirstX(ctx context.Context) *Partner {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Partner ID from the query.
// Returns a *NotFoundError when no Partner ID was found.
func (pq *PartnerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{partner.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PartnerQuery) FirstIDX(ctx context.Context) string {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Partner entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Partner entity is found.
// Returns a *NotFoundError when no Partner entities are found.
func (pq *PartnerQuery) Only(ctx context.Context) (*Partner, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{partner.Label}
	default:
		return nil, &NotSingularError{partner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PartnerQuery) OnlyX(ctx context.Context) *Partner {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Partner ID in the query.
// Returns a *NotSingularError when more than one Partner ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PartnerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{partner.Label}
	default:
		err = &NotSingularError{partner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PartnerQuery) OnlyIDX(ctx context.Context) string {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Partners.
func (pq *PartnerQuery) All(ctx context.Context) ([]*Partner, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Partner, *PartnerQuery]()
	return withInterceptors[[]*Partner](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PartnerQuery) AllX(ctx context.Context) []*Partner {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Partner IDs.
func (pq *PartnerQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(partner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PartnerQuery) IDsX(ctx context.Context) []string {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PartnerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PartnerQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PartnerQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PartnerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PartnerQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PartnerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PartnerQuery) Clone() *PartnerQuery {
	if pq == nil {
		return nil
	}
	return &PartnerQuery{
		config:                        pq.config,
		ctx:                           pq.ctx.Clone(),
		order:                         append([]partner.OrderOption{}, pq.order...),
		inters:                        append([]Interceptor{}, pq.inters...),
		predicates:                    append([]predicate.Partner{}, pq.predicates...),
		withRequestedEstimates:        pq.withRequestedEstimates.Clone(),
		withEstimateHomeOwners:        pq.withEstimateHomeOwners.Clone(),
		withRoofingJobs:               pq.withRoofingJobs.Clone(),
		withIntegrationJobs:           pq.withIntegrationJobs.Clone(),
		withEpcJobs:                   pq.withEpcJobs.Clone(),
		withJobRequests:               pq.withJobRequests.Clone(),
		withActivities:                pq.withActivities.Clone(),
		withJobAssignmentHistory:      pq.withJobAssignmentHistory.Clone(),
		withRequestedInstallationJobs: pq.withRequestedInstallationJobs.Clone(),
		withAssignedInstallationJobs:  pq.withAssignedInstallationJobs.Clone(),
		withContacts:                  pq.withContacts.Clone(),
		withCreator:                   pq.withCreator.Clone(),
		withCreatorAPI:                pq.withCreatorAPI.Clone(),
		withServices:                  pq.withServices.Clone(),
		withServiceStates:             pq.withServiceStates.Clone(),
		withServiceCities:             pq.withServiceCities.Clone(),
		withTrainingVideos:            pq.withTrainingVideos.Clone(),
		withContactUsRequests:         pq.withContactUsRequests.Clone(),
		withSurveys:                   pq.withSurveys.Clone(),
		withSessions:                  pq.withSessions.Clone(),
		withJobNotes:                  pq.withJobNotes.Clone(),
		withChannels:                  pq.withChannels.Clone(),
		withFinanceOptions:            pq.withFinanceOptions.Clone(),
		withEpcOptions:                pq.withEpcOptions.Clone(),
		withPartnerContacts:           pq.withPartnerContacts.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithRequestedEstimates tells the query-builder to eager-load the nodes that are connected to
// the "requested_estimates" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithRequestedEstimates(opts ...func(*EstimateQuery)) *PartnerQuery {
	query := (&EstimateClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRequestedEstimates = query
	return pq
}

// WithEstimateHomeOwners tells the query-builder to eager-load the nodes that are connected to
// the "estimate_home_owners" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithEstimateHomeOwners(opts ...func(*HomeOwnerQuery)) *PartnerQuery {
	query := (&HomeOwnerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEstimateHomeOwners = query
	return pq
}

// WithRoofingJobs tells the query-builder to eager-load the nodes that are connected to
// the "roofing_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithRoofingJobs(opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRoofingJobs = query
	return pq
}

// WithIntegrationJobs tells the query-builder to eager-load the nodes that are connected to
// the "integration_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithIntegrationJobs(opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withIntegrationJobs = query
	return pq
}

// WithEpcJobs tells the query-builder to eager-load the nodes that are connected to
// the "epc_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithEpcJobs(opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEpcJobs = query
	return pq
}

// WithJobRequests tells the query-builder to eager-load the nodes that are connected to
// the "job_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithJobRequests(opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withJobRequests = query
	return pq
}

// WithActivities tells the query-builder to eager-load the nodes that are connected to
// the "activities" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithActivities(opts ...func(*PartnerActivityQuery)) *PartnerQuery {
	query := (&PartnerActivityClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withActivities = query
	return pq
}

// WithJobAssignmentHistory tells the query-builder to eager-load the nodes that are connected to
// the "job_assignment_history" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithJobAssignmentHistory(opts ...func(*JobAssignmentHistoryQuery)) *PartnerQuery {
	query := (&JobAssignmentHistoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withJobAssignmentHistory = query
	return pq
}

// WithRequestedInstallationJobs tells the query-builder to eager-load the nodes that are connected to
// the "requested_installation_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithRequestedInstallationJobs(opts ...func(*InstallationJobQuery)) *PartnerQuery {
	query := (&InstallationJobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRequestedInstallationJobs = query
	return pq
}

// WithAssignedInstallationJobs tells the query-builder to eager-load the nodes that are connected to
// the "assigned_installation_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithAssignedInstallationJobs(opts ...func(*InstallationJobQuery)) *PartnerQuery {
	query := (&InstallationJobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAssignedInstallationJobs = query
	return pq
}

// WithContacts tells the query-builder to eager-load the nodes that are connected to
// the "contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithContacts(opts ...func(*UserQuery)) *PartnerQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withContacts = query
	return pq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithCreator(opts ...func(*UserQuery)) *PartnerQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCreator = query
	return pq
}

// WithCreatorAPI tells the query-builder to eager-load the nodes that are connected to
// the "creator_api" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithCreatorAPI(opts ...func(*ApiUserQuery)) *PartnerQuery {
	query := (&ApiUserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCreatorAPI = query
	return pq
}

// WithServices tells the query-builder to eager-load the nodes that are connected to
// the "services" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithServices(opts ...func(*PartnerServiceQuery)) *PartnerQuery {
	query := (&PartnerServiceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withServices = query
	return pq
}

// WithServiceStates tells the query-builder to eager-load the nodes that are connected to
// the "service_states" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithServiceStates(opts ...func(*PartnerServiceStateQuery)) *PartnerQuery {
	query := (&PartnerServiceStateClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withServiceStates = query
	return pq
}

// WithServiceCities tells the query-builder to eager-load the nodes that are connected to
// the "service_cities" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithServiceCities(opts ...func(*PartnerServiceCityQuery)) *PartnerQuery {
	query := (&PartnerServiceCityClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withServiceCities = query
	return pq
}

// WithTrainingVideos tells the query-builder to eager-load the nodes that are connected to
// the "training_videos" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithTrainingVideos(opts ...func(*PartnerTrainingVideoQuery)) *PartnerQuery {
	query := (&PartnerTrainingVideoClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTrainingVideos = query
	return pq
}

// WithContactUsRequests tells the query-builder to eager-load the nodes that are connected to
// the "contact_us_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithContactUsRequests(opts ...func(*ContactUsQuery)) *PartnerQuery {
	query := (&ContactUsClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withContactUsRequests = query
	return pq
}

// WithSurveys tells the query-builder to eager-load the nodes that are connected to
// the "surveys" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithSurveys(opts ...func(*SurveyQuery)) *PartnerQuery {
	query := (&SurveyClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSurveys = query
	return pq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithSessions(opts ...func(*UserSessionQuery)) *PartnerQuery {
	query := (&UserSessionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSessions = query
	return pq
}

// WithJobNotes tells the query-builder to eager-load the nodes that are connected to
// the "job_notes" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithJobNotes(opts ...func(*JobNoteQuery)) *PartnerQuery {
	query := (&JobNoteClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withJobNotes = query
	return pq
}

// WithChannels tells the query-builder to eager-load the nodes that are connected to
// the "channels" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithChannels(opts ...func(*ChannelSubQuery)) *PartnerQuery {
	query := (&ChannelSubClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withChannels = query
	return pq
}

// WithFinanceOptions tells the query-builder to eager-load the nodes that are connected to
// the "finance_options" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithFinanceOptions(opts ...func(*OptionListQuery)) *PartnerQuery {
	query := (&OptionListClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withFinanceOptions = query
	return pq
}

// WithEpcOptions tells the query-builder to eager-load the nodes that are connected to
// the "epc_options" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithEpcOptions(opts ...func(*OptionListQuery)) *PartnerQuery {
	query := (&OptionListClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEpcOptions = query
	return pq
}

// WithPartnerContacts tells the query-builder to eager-load the nodes that are connected to
// the "partner_contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithPartnerContacts(opts ...func(*PartnerContactQuery)) *PartnerQuery {
	query := (&PartnerContactClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPartnerContacts = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Partner.Query().
//		GroupBy(partner.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PartnerQuery) GroupBy(field string, fields ...string) *PartnerGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PartnerGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = partner.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.Partner.Query().
//		Select(partner.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *PartnerQuery) Select(fields ...string) *PartnerSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PartnerSelect{PartnerQuery: pq}
	sbuild.label = partner.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PartnerSelect configured with the given aggregations.
func (pq *PartnerQuery) Aggregate(fns ...AggregateFunc) *PartnerSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PartnerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !partner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PartnerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Partner, error) {
	var (
		nodes       = []*Partner{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [25]bool{
			pq.withRequestedEstimates != nil,
			pq.withEstimateHomeOwners != nil,
			pq.withRoofingJobs != nil,
			pq.withIntegrationJobs != nil,
			pq.withEpcJobs != nil,
			pq.withJobRequests != nil,
			pq.withActivities != nil,
			pq.withJobAssignmentHistory != nil,
			pq.withRequestedInstallationJobs != nil,
			pq.withAssignedInstallationJobs != nil,
			pq.withContacts != nil,
			pq.withCreator != nil,
			pq.withCreatorAPI != nil,
			pq.withServices != nil,
			pq.withServiceStates != nil,
			pq.withServiceCities != nil,
			pq.withTrainingVideos != nil,
			pq.withContactUsRequests != nil,
			pq.withSurveys != nil,
			pq.withSessions != nil,
			pq.withJobNotes != nil,
			pq.withChannels != nil,
			pq.withFinanceOptions != nil,
			pq.withEpcOptions != nil,
			pq.withPartnerContacts != nil,
		}
	)
	if pq.withCreatorAPI != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, partner.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Partner).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Partner{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withRequestedEstimates; query != nil {
		if err := pq.loadRequestedEstimates(ctx, query, nodes,
			func(n *Partner) { n.Edges.RequestedEstimates = []*Estimate{} },
			func(n *Partner, e *Estimate) { n.Edges.RequestedEstimates = append(n.Edges.RequestedEstimates, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEstimateHomeOwners; query != nil {
		if err := pq.loadEstimateHomeOwners(ctx, query, nodes,
			func(n *Partner) { n.Edges.EstimateHomeOwners = []*HomeOwner{} },
			func(n *Partner, e *HomeOwner) { n.Edges.EstimateHomeOwners = append(n.Edges.EstimateHomeOwners, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRoofingJobs; query != nil {
		if err := pq.loadRoofingJobs(ctx, query, nodes,
			func(n *Partner) { n.Edges.RoofingJobs = []*Job{} },
			func(n *Partner, e *Job) { n.Edges.RoofingJobs = append(n.Edges.RoofingJobs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withIntegrationJobs; query != nil {
		if err := pq.loadIntegrationJobs(ctx, query, nodes,
			func(n *Partner) { n.Edges.IntegrationJobs = []*Job{} },
			func(n *Partner, e *Job) { n.Edges.IntegrationJobs = append(n.Edges.IntegrationJobs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEpcJobs; query != nil {
		if err := pq.loadEpcJobs(ctx, query, nodes,
			func(n *Partner) { n.Edges.EpcJobs = []*Job{} },
			func(n *Partner, e *Job) { n.Edges.EpcJobs = append(n.Edges.EpcJobs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withJobRequests; query != nil {
		if err := pq.loadJobRequests(ctx, query, nodes,
			func(n *Partner) { n.Edges.JobRequests = []*Job{} },
			func(n *Partner, e *Job) { n.Edges.JobRequests = append(n.Edges.JobRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withActivities; query != nil {
		if err := pq.loadActivities(ctx, query, nodes,
			func(n *Partner) { n.Edges.Activities = []*PartnerActivity{} },
			func(n *Partner, e *PartnerActivity) { n.Edges.Activities = append(n.Edges.Activities, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withJobAssignmentHistory; query != nil {
		if err := pq.loadJobAssignmentHistory(ctx, query, nodes,
			func(n *Partner) { n.Edges.JobAssignmentHistory = []*JobAssignmentHistory{} },
			func(n *Partner, e *JobAssignmentHistory) {
				n.Edges.JobAssignmentHistory = append(n.Edges.JobAssignmentHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withRequestedInstallationJobs; query != nil {
		if err := pq.loadRequestedInstallationJobs(ctx, query, nodes,
			func(n *Partner) { n.Edges.RequestedInstallationJobs = []*InstallationJob{} },
			func(n *Partner, e *InstallationJob) {
				n.Edges.RequestedInstallationJobs = append(n.Edges.RequestedInstallationJobs, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withAssignedInstallationJobs; query != nil {
		if err := pq.loadAssignedInstallationJobs(ctx, query, nodes,
			func(n *Partner) { n.Edges.AssignedInstallationJobs = []*InstallationJob{} },
			func(n *Partner, e *InstallationJob) {
				n.Edges.AssignedInstallationJobs = append(n.Edges.AssignedInstallationJobs, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withContacts; query != nil {
		if err := pq.loadContacts(ctx, query, nodes,
			func(n *Partner) { n.Edges.Contacts = []*User{} },
			func(n *Partner, e *User) { n.Edges.Contacts = append(n.Edges.Contacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCreator; query != nil {
		if err := pq.loadCreator(ctx, query, nodes, nil,
			func(n *Partner, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCreatorAPI; query != nil {
		if err := pq.loadCreatorAPI(ctx, query, nodes, nil,
			func(n *Partner, e *ApiUser) { n.Edges.CreatorAPI = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withServices; query != nil {
		if err := pq.loadServices(ctx, query, nodes,
			func(n *Partner) { n.Edges.Services = []*PartnerService{} },
			func(n *Partner, e *PartnerService) { n.Edges.Services = append(n.Edges.Services, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withServiceStates; query != nil {
		if err := pq.loadServiceStates(ctx, query, nodes,
			func(n *Partner) { n.Edges.ServiceStates = []*PartnerServiceState{} },
			func(n *Partner, e *PartnerServiceState) { n.Edges.ServiceStates = append(n.Edges.ServiceStates, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withServiceCities; query != nil {
		if err := pq.loadServiceCities(ctx, query, nodes,
			func(n *Partner) { n.Edges.ServiceCities = []*PartnerServiceCity{} },
			func(n *Partner, e *PartnerServiceCity) { n.Edges.ServiceCities = append(n.Edges.ServiceCities, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTrainingVideos; query != nil {
		if err := pq.loadTrainingVideos(ctx, query, nodes,
			func(n *Partner) { n.Edges.TrainingVideos = []*PartnerTrainingVideo{} },
			func(n *Partner, e *PartnerTrainingVideo) { n.Edges.TrainingVideos = append(n.Edges.TrainingVideos, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withContactUsRequests; query != nil {
		if err := pq.loadContactUsRequests(ctx, query, nodes,
			func(n *Partner) { n.Edges.ContactUsRequests = []*ContactUs{} },
			func(n *Partner, e *ContactUs) { n.Edges.ContactUsRequests = append(n.Edges.ContactUsRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSurveys; query != nil {
		if err := pq.loadSurveys(ctx, query, nodes,
			func(n *Partner) { n.Edges.Surveys = []*Survey{} },
			func(n *Partner, e *Survey) { n.Edges.Surveys = append(n.Edges.Surveys, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSessions; query != nil {
		if err := pq.loadSessions(ctx, query, nodes,
			func(n *Partner) { n.Edges.Sessions = []*UserSession{} },
			func(n *Partner, e *UserSession) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withJobNotes; query != nil {
		if err := pq.loadJobNotes(ctx, query, nodes,
			func(n *Partner) { n.Edges.JobNotes = []*JobNote{} },
			func(n *Partner, e *JobNote) { n.Edges.JobNotes = append(n.Edges.JobNotes, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withChannels; query != nil {
		if err := pq.loadChannels(ctx, query, nodes,
			func(n *Partner) { n.Edges.Channels = []*ChannelSub{} },
			func(n *Partner, e *ChannelSub) { n.Edges.Channels = append(n.Edges.Channels, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withFinanceOptions; query != nil {
		if err := pq.loadFinanceOptions(ctx, query, nodes,
			func(n *Partner) { n.Edges.FinanceOptions = []*OptionList{} },
			func(n *Partner, e *OptionList) { n.Edges.FinanceOptions = append(n.Edges.FinanceOptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEpcOptions; query != nil {
		if err := pq.loadEpcOptions(ctx, query, nodes,
			func(n *Partner) { n.Edges.EpcOptions = []*OptionList{} },
			func(n *Partner, e *OptionList) { n.Edges.EpcOptions = append(n.Edges.EpcOptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPartnerContacts; query != nil {
		if err := pq.loadPartnerContacts(ctx, query, nodes,
			func(n *Partner) { n.Edges.PartnerContacts = []*PartnerContact{} },
			func(n *Partner, e *PartnerContact) { n.Edges.PartnerContacts = append(n.Edges.PartnerContacts, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedRequestedEstimates {
		if err := pq.loadRequestedEstimates(ctx, query, nodes,
			func(n *Partner) { n.appendNamedRequestedEstimates(name) },
			func(n *Partner, e *Estimate) { n.appendNamedRequestedEstimates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedEstimateHomeOwners {
		if err := pq.loadEstimateHomeOwners(ctx, query, nodes,
			func(n *Partner) { n.appendNamedEstimateHomeOwners(name) },
			func(n *Partner, e *HomeOwner) { n.appendNamedEstimateHomeOwners(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedRoofingJobs {
		if err := pq.loadRoofingJobs(ctx, query, nodes,
			func(n *Partner) { n.appendNamedRoofingJobs(name) },
			func(n *Partner, e *Job) { n.appendNamedRoofingJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedIntegrationJobs {
		if err := pq.loadIntegrationJobs(ctx, query, nodes,
			func(n *Partner) { n.appendNamedIntegrationJobs(name) },
			func(n *Partner, e *Job) { n.appendNamedIntegrationJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedEpcJobs {
		if err := pq.loadEpcJobs(ctx, query, nodes,
			func(n *Partner) { n.appendNamedEpcJobs(name) },
			func(n *Partner, e *Job) { n.appendNamedEpcJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedJobRequests {
		if err := pq.loadJobRequests(ctx, query, nodes,
			func(n *Partner) { n.appendNamedJobRequests(name) },
			func(n *Partner, e *Job) { n.appendNamedJobRequests(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedActivities {
		if err := pq.loadActivities(ctx, query, nodes,
			func(n *Partner) { n.appendNamedActivities(name) },
			func(n *Partner, e *PartnerActivity) { n.appendNamedActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedJobAssignmentHistory {
		if err := pq.loadJobAssignmentHistory(ctx, query, nodes,
			func(n *Partner) { n.appendNamedJobAssignmentHistory(name) },
			func(n *Partner, e *JobAssignmentHistory) { n.appendNamedJobAssignmentHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedRequestedInstallationJobs {
		if err := pq.loadRequestedInstallationJobs(ctx, query, nodes,
			func(n *Partner) { n.appendNamedRequestedInstallationJobs(name) },
			func(n *Partner, e *InstallationJob) { n.appendNamedRequestedInstallationJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedAssignedInstallationJobs {
		if err := pq.loadAssignedInstallationJobs(ctx, query, nodes,
			func(n *Partner) { n.appendNamedAssignedInstallationJobs(name) },
			func(n *Partner, e *InstallationJob) { n.appendNamedAssignedInstallationJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedContacts {
		if err := pq.loadContacts(ctx, query, nodes,
			func(n *Partner) { n.appendNamedContacts(name) },
			func(n *Partner, e *User) { n.appendNamedContacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedServices {
		if err := pq.loadServices(ctx, query, nodes,
			func(n *Partner) { n.appendNamedServices(name) },
			func(n *Partner, e *PartnerService) { n.appendNamedServices(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedServiceStates {
		if err := pq.loadServiceStates(ctx, query, nodes,
			func(n *Partner) { n.appendNamedServiceStates(name) },
			func(n *Partner, e *PartnerServiceState) { n.appendNamedServiceStates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedServiceCities {
		if err := pq.loadServiceCities(ctx, query, nodes,
			func(n *Partner) { n.appendNamedServiceCities(name) },
			func(n *Partner, e *PartnerServiceCity) { n.appendNamedServiceCities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedTrainingVideos {
		if err := pq.loadTrainingVideos(ctx, query, nodes,
			func(n *Partner) { n.appendNamedTrainingVideos(name) },
			func(n *Partner, e *PartnerTrainingVideo) { n.appendNamedTrainingVideos(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedContactUsRequests {
		if err := pq.loadContactUsRequests(ctx, query, nodes,
			func(n *Partner) { n.appendNamedContactUsRequests(name) },
			func(n *Partner, e *ContactUs) { n.appendNamedContactUsRequests(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedSurveys {
		if err := pq.loadSurveys(ctx, query, nodes,
			func(n *Partner) { n.appendNamedSurveys(name) },
			func(n *Partner, e *Survey) { n.appendNamedSurveys(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedSessions {
		if err := pq.loadSessions(ctx, query, nodes,
			func(n *Partner) { n.appendNamedSessions(name) },
			func(n *Partner, e *UserSession) { n.appendNamedSessions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedJobNotes {
		if err := pq.loadJobNotes(ctx, query, nodes,
			func(n *Partner) { n.appendNamedJobNotes(name) },
			func(n *Partner, e *JobNote) { n.appendNamedJobNotes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedChannels {
		if err := pq.loadChannels(ctx, query, nodes,
			func(n *Partner) { n.appendNamedChannels(name) },
			func(n *Partner, e *ChannelSub) { n.appendNamedChannels(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedFinanceOptions {
		if err := pq.loadFinanceOptions(ctx, query, nodes,
			func(n *Partner) { n.appendNamedFinanceOptions(name) },
			func(n *Partner, e *OptionList) { n.appendNamedFinanceOptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedEpcOptions {
		if err := pq.loadEpcOptions(ctx, query, nodes,
			func(n *Partner) { n.appendNamedEpcOptions(name) },
			func(n *Partner, e *OptionList) { n.appendNamedEpcOptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPartnerContacts {
		if err := pq.loadPartnerContacts(ctx, query, nodes,
			func(n *Partner) { n.appendNamedPartnerContacts(name) },
			func(n *Partner, e *PartnerContact) { n.appendNamedPartnerContacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PartnerQuery) loadRequestedEstimates(ctx context.Context, query *EstimateQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *Estimate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Estimate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.RequestedEstimatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadEstimateHomeOwners(ctx context.Context, query *HomeOwnerQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *HomeOwner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HomeOwner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.EstimateHomeOwnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadRoofingJobs(ctx context.Context, query *JobQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.RoofingJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.roofing_partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "roofing_partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "roofing_partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadIntegrationJobs(ctx context.Context, query *JobQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.IntegrationJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.integration_partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "integration_partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "integration_partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadEpcJobs(ctx context.Context, query *JobQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.EpcJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.epc_partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "epc_partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "epc_partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadJobRequests(ctx context.Context, query *JobQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.JobRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.requester_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "requester_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "requester_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadActivities(ctx context.Context, query *PartnerActivityQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *PartnerActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.ActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadJobAssignmentHistory(ctx context.Context, query *JobAssignmentHistoryQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *JobAssignmentHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.JobAssignmentHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadRequestedInstallationJobs(ctx context.Context, query *InstallationJobQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *InstallationJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InstallationJob(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.RequestedInstallationJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.requesting_partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "requesting_partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "requesting_partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadAssignedInstallationJobs(ctx context.Context, query *InstallationJobQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *InstallationJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InstallationJob(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.AssignedInstallationJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.assigned_partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "assigned_partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assigned_partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadContacts(ctx context.Context, query *UserQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Partner)
	nids := make(map[string]map[*Partner]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(partner.ContactsTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(partner.ContactsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(partner.ContactsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(partner.ContactsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Partner]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "contacts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PartnerQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Partner)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PartnerQuery) loadCreatorAPI(ctx context.Context, query *ApiUserQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *ApiUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Partner)
	for i := range nodes {
		if nodes[i].api_user_id == nil {
			continue
		}
		fk := *nodes[i].api_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apiuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "api_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PartnerQuery) loadServices(ctx context.Context, query *PartnerServiceQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *PartnerService)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerService(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.ServicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadServiceStates(ctx context.Context, query *PartnerServiceStateQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *PartnerServiceState)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerServiceState(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.ServiceStatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadServiceCities(ctx context.Context, query *PartnerServiceCityQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *PartnerServiceCity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerServiceCity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.ServiceCitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadTrainingVideos(ctx context.Context, query *PartnerTrainingVideoQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *PartnerTrainingVideo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PartnerTrainingVideo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.TrainingVideosColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadContactUsRequests(ctx context.Context, query *ContactUsQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *ContactUs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ContactUs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.ContactUsRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadSurveys(ctx context.Context, query *SurveyQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *Survey)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Survey(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.SurveysColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadSessions(ctx context.Context, query *UserSessionQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *UserSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadJobNotes(ctx context.Context, query *JobNoteQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *JobNote)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobNote(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.JobNotesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadChannels(ctx context.Context, query *ChannelSubQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *ChannelSub)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ChannelSub(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.ChannelsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PartnerQuery) loadFinanceOptions(ctx context.Context, query *OptionListQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *OptionList)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Partner)
	nids := make(map[string]map[*Partner]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(partner.FinanceOptionsTable)
		s.Join(joinT).On(s.C(optionlist.FieldID), joinT.C(partner.FinanceOptionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(partner.FinanceOptionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(partner.FinanceOptionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Partner]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OptionList](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "finance_options" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PartnerQuery) loadEpcOptions(ctx context.Context, query *OptionListQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *OptionList)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Partner)
	nids := make(map[string]map[*Partner]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(partner.EpcOptionsTable)
		s.Join(joinT).On(s.C(optionlist.FieldID), joinT.C(partner.EpcOptionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(partner.EpcOptionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(partner.EpcOptionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Partner]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OptionList](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "epc_options" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PartnerQuery) loadPartnerContacts(ctx context.Context, query *PartnerContactQuery, nodes []*Partner, init func(*Partner), assign func(*Partner, *PartnerContact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Partner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(partnercontact.FieldPartnerID)
	}
	query.Where(predicate.PartnerContact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partner.PartnerContactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PartnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PartnerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PartnerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for i := range fields {
			if fields[i] != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pq.withCreator != nil {
			_spec.Node.AddColumnOnce(partner.FieldCreatorID)
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PartnerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(partner.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = partner.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pq.modifiers {
		m(selector)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pq *PartnerQuery) Modify(modifiers ...func(s *sql.Selector)) *PartnerSelect {
	pq.modifiers = append(pq.modifiers, modifiers...)
	return pq.Select()
}

// WithNamedRequestedEstimates tells the query-builder to eager-load the nodes that are connected to the "requested_estimates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedRequestedEstimates(name string, opts ...func(*EstimateQuery)) *PartnerQuery {
	query := (&EstimateClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedRequestedEstimates == nil {
		pq.withNamedRequestedEstimates = make(map[string]*EstimateQuery)
	}
	pq.withNamedRequestedEstimates[name] = query
	return pq
}

// WithNamedEstimateHomeOwners tells the query-builder to eager-load the nodes that are connected to the "estimate_home_owners"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedEstimateHomeOwners(name string, opts ...func(*HomeOwnerQuery)) *PartnerQuery {
	query := (&HomeOwnerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedEstimateHomeOwners == nil {
		pq.withNamedEstimateHomeOwners = make(map[string]*HomeOwnerQuery)
	}
	pq.withNamedEstimateHomeOwners[name] = query
	return pq
}

// WithNamedRoofingJobs tells the query-builder to eager-load the nodes that are connected to the "roofing_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedRoofingJobs(name string, opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedRoofingJobs == nil {
		pq.withNamedRoofingJobs = make(map[string]*JobQuery)
	}
	pq.withNamedRoofingJobs[name] = query
	return pq
}

// WithNamedIntegrationJobs tells the query-builder to eager-load the nodes that are connected to the "integration_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedIntegrationJobs(name string, opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedIntegrationJobs == nil {
		pq.withNamedIntegrationJobs = make(map[string]*JobQuery)
	}
	pq.withNamedIntegrationJobs[name] = query
	return pq
}

// WithNamedEpcJobs tells the query-builder to eager-load the nodes that are connected to the "epc_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedEpcJobs(name string, opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedEpcJobs == nil {
		pq.withNamedEpcJobs = make(map[string]*JobQuery)
	}
	pq.withNamedEpcJobs[name] = query
	return pq
}

// WithNamedJobRequests tells the query-builder to eager-load the nodes that are connected to the "job_requests"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedJobRequests(name string, opts ...func(*JobQuery)) *PartnerQuery {
	query := (&JobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedJobRequests == nil {
		pq.withNamedJobRequests = make(map[string]*JobQuery)
	}
	pq.withNamedJobRequests[name] = query
	return pq
}

// WithNamedActivities tells the query-builder to eager-load the nodes that are connected to the "activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedActivities(name string, opts ...func(*PartnerActivityQuery)) *PartnerQuery {
	query := (&PartnerActivityClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedActivities == nil {
		pq.withNamedActivities = make(map[string]*PartnerActivityQuery)
	}
	pq.withNamedActivities[name] = query
	return pq
}

// WithNamedJobAssignmentHistory tells the query-builder to eager-load the nodes that are connected to the "job_assignment_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedJobAssignmentHistory(name string, opts ...func(*JobAssignmentHistoryQuery)) *PartnerQuery {
	query := (&JobAssignmentHistoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedJobAssignmentHistory == nil {
		pq.withNamedJobAssignmentHistory = make(map[string]*JobAssignmentHistoryQuery)
	}
	pq.withNamedJobAssignmentHistory[name] = query
	return pq
}

// WithNamedRequestedInstallationJobs tells the query-builder to eager-load the nodes that are connected to the "requested_installation_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedRequestedInstallationJobs(name string, opts ...func(*InstallationJobQuery)) *PartnerQuery {
	query := (&InstallationJobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedRequestedInstallationJobs == nil {
		pq.withNamedRequestedInstallationJobs = make(map[string]*InstallationJobQuery)
	}
	pq.withNamedRequestedInstallationJobs[name] = query
	return pq
}

// WithNamedAssignedInstallationJobs tells the query-builder to eager-load the nodes that are connected to the "assigned_installation_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedAssignedInstallationJobs(name string, opts ...func(*InstallationJobQuery)) *PartnerQuery {
	query := (&InstallationJobClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedAssignedInstallationJobs == nil {
		pq.withNamedAssignedInstallationJobs = make(map[string]*InstallationJobQuery)
	}
	pq.withNamedAssignedInstallationJobs[name] = query
	return pq
}

// WithNamedContacts tells the query-builder to eager-load the nodes that are connected to the "contacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedContacts(name string, opts ...func(*UserQuery)) *PartnerQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedContacts == nil {
		pq.withNamedContacts = make(map[string]*UserQuery)
	}
	pq.withNamedContacts[name] = query
	return pq
}

// WithNamedServices tells the query-builder to eager-load the nodes that are connected to the "services"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedServices(name string, opts ...func(*PartnerServiceQuery)) *PartnerQuery {
	query := (&PartnerServiceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedServices == nil {
		pq.withNamedServices = make(map[string]*PartnerServiceQuery)
	}
	pq.withNamedServices[name] = query
	return pq
}

// WithNamedServiceStates tells the query-builder to eager-load the nodes that are connected to the "service_states"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedServiceStates(name string, opts ...func(*PartnerServiceStateQuery)) *PartnerQuery {
	query := (&PartnerServiceStateClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedServiceStates == nil {
		pq.withNamedServiceStates = make(map[string]*PartnerServiceStateQuery)
	}
	pq.withNamedServiceStates[name] = query
	return pq
}

// WithNamedServiceCities tells the query-builder to eager-load the nodes that are connected to the "service_cities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedServiceCities(name string, opts ...func(*PartnerServiceCityQuery)) *PartnerQuery {
	query := (&PartnerServiceCityClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedServiceCities == nil {
		pq.withNamedServiceCities = make(map[string]*PartnerServiceCityQuery)
	}
	pq.withNamedServiceCities[name] = query
	return pq
}

// WithNamedTrainingVideos tells the query-builder to eager-load the nodes that are connected to the "training_videos"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedTrainingVideos(name string, opts ...func(*PartnerTrainingVideoQuery)) *PartnerQuery {
	query := (&PartnerTrainingVideoClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedTrainingVideos == nil {
		pq.withNamedTrainingVideos = make(map[string]*PartnerTrainingVideoQuery)
	}
	pq.withNamedTrainingVideos[name] = query
	return pq
}

// WithNamedContactUsRequests tells the query-builder to eager-load the nodes that are connected to the "contact_us_requests"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedContactUsRequests(name string, opts ...func(*ContactUsQuery)) *PartnerQuery {
	query := (&ContactUsClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedContactUsRequests == nil {
		pq.withNamedContactUsRequests = make(map[string]*ContactUsQuery)
	}
	pq.withNamedContactUsRequests[name] = query
	return pq
}

// WithNamedSurveys tells the query-builder to eager-load the nodes that are connected to the "surveys"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedSurveys(name string, opts ...func(*SurveyQuery)) *PartnerQuery {
	query := (&SurveyClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedSurveys == nil {
		pq.withNamedSurveys = make(map[string]*SurveyQuery)
	}
	pq.withNamedSurveys[name] = query
	return pq
}

// WithNamedSessions tells the query-builder to eager-load the nodes that are connected to the "sessions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedSessions(name string, opts ...func(*UserSessionQuery)) *PartnerQuery {
	query := (&UserSessionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedSessions == nil {
		pq.withNamedSessions = make(map[string]*UserSessionQuery)
	}
	pq.withNamedSessions[name] = query
	return pq
}

// WithNamedJobNotes tells the query-builder to eager-load the nodes that are connected to the "job_notes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedJobNotes(name string, opts ...func(*JobNoteQuery)) *PartnerQuery {
	query := (&JobNoteClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedJobNotes == nil {
		pq.withNamedJobNotes = make(map[string]*JobNoteQuery)
	}
	pq.withNamedJobNotes[name] = query
	return pq
}

// WithNamedChannels tells the query-builder to eager-load the nodes that are connected to the "channels"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedChannels(name string, opts ...func(*ChannelSubQuery)) *PartnerQuery {
	query := (&ChannelSubClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedChannels == nil {
		pq.withNamedChannels = make(map[string]*ChannelSubQuery)
	}
	pq.withNamedChannels[name] = query
	return pq
}

// WithNamedFinanceOptions tells the query-builder to eager-load the nodes that are connected to the "finance_options"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedFinanceOptions(name string, opts ...func(*OptionListQuery)) *PartnerQuery {
	query := (&OptionListClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedFinanceOptions == nil {
		pq.withNamedFinanceOptions = make(map[string]*OptionListQuery)
	}
	pq.withNamedFinanceOptions[name] = query
	return pq
}

// WithNamedEpcOptions tells the query-builder to eager-load the nodes that are connected to the "epc_options"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedEpcOptions(name string, opts ...func(*OptionListQuery)) *PartnerQuery {
	query := (&OptionListClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedEpcOptions == nil {
		pq.withNamedEpcOptions = make(map[string]*OptionListQuery)
	}
	pq.withNamedEpcOptions[name] = query
	return pq
}

// WithNamedPartnerContacts tells the query-builder to eager-load the nodes that are connected to the "partner_contacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PartnerQuery) WithNamedPartnerContacts(name string, opts ...func(*PartnerContactQuery)) *PartnerQuery {
	query := (&PartnerContactClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPartnerContacts == nil {
		pq.withNamedPartnerContacts = make(map[string]*PartnerContactQuery)
	}
	pq.withNamedPartnerContacts[name] = query
	return pq
}

// PartnerGroupBy is the group-by builder for Partner entities.
type PartnerGroupBy struct {
	selector
	build *PartnerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PartnerGroupBy) Aggregate(fns ...AggregateFunc) *PartnerGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PartnerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PartnerQuery, *PartnerGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PartnerGroupBy) sqlScan(ctx context.Context, root *PartnerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PartnerSelect is the builder for selecting fields of Partner entities.
type PartnerSelect struct {
	*PartnerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PartnerSelect) Aggregate(fns ...AggregateFunc) *PartnerSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PartnerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PartnerQuery, *PartnerSelect](ctx, ps.PartnerQuery, ps, ps.inters, v)
}

func (ps *PartnerSelect) sqlScan(ctx context.Context, root *PartnerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ps *PartnerSelect) Modify(modifiers ...func(s *sql.Selector)) *PartnerSelect {
	ps.modifiers = append(ps.modifiers, modifiers...)
	return ps
}

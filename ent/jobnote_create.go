// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/job"
	"roofix/ent/jobnote"
	"roofix/ent/partner"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobNoteCreate is the builder for creating a JobNote entity.
type JobNoteCreate struct {
	config
	mutation *JobNoteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (jnc *JobNoteCreate) SetCreatedAt(t time.Time) *JobNoteCreate {
	jnc.mutation.SetCreatedAt(t)
	return jnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jnc *JobNoteCreate) SetNillableCreatedAt(t *time.Time) *JobNoteCreate {
	if t != nil {
		jnc.SetCreatedAt(*t)
	}
	return jnc
}

// SetUpdatedAt sets the "updated_at" field.
func (jnc *JobNoteCreate) SetUpdatedAt(t time.Time) *JobNoteCreate {
	jnc.mutation.SetUpdatedAt(t)
	return jnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jnc *JobNoteCreate) SetNillableUpdatedAt(t *time.Time) *JobNoteCreate {
	if t != nil {
		jnc.SetUpdatedAt(*t)
	}
	return jnc
}

// SetNote sets the "note" field.
func (jnc *JobNoteCreate) SetNote(s string) *JobNoteCreate {
	jnc.mutation.SetNote(s)
	return jnc
}

// SetID sets the "id" field.
func (jnc *JobNoteCreate) SetID(s string) *JobNoteCreate {
	jnc.mutation.SetID(s)
	return jnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jnc *JobNoteCreate) SetNillableID(s *string) *JobNoteCreate {
	if s != nil {
		jnc.SetID(*s)
	}
	return jnc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jnc *JobNoteCreate) SetJobID(id string) *JobNoteCreate {
	jnc.mutation.SetJobID(id)
	return jnc
}

// SetJob sets the "job" edge to the Job entity.
func (jnc *JobNoteCreate) SetJob(j *Job) *JobNoteCreate {
	return jnc.SetJobID(j.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (jnc *JobNoteCreate) SetUserID(id string) *JobNoteCreate {
	jnc.mutation.SetUserID(id)
	return jnc
}

// SetUser sets the "user" edge to the User entity.
func (jnc *JobNoteCreate) SetUser(u *User) *JobNoteCreate {
	return jnc.SetUserID(u.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (jnc *JobNoteCreate) SetPartnerID(id string) *JobNoteCreate {
	jnc.mutation.SetPartnerID(id)
	return jnc
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (jnc *JobNoteCreate) SetNillablePartnerID(id *string) *JobNoteCreate {
	if id != nil {
		jnc = jnc.SetPartnerID(*id)
	}
	return jnc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (jnc *JobNoteCreate) SetPartner(p *Partner) *JobNoteCreate {
	return jnc.SetPartnerID(p.ID)
}

// Mutation returns the JobNoteMutation object of the builder.
func (jnc *JobNoteCreate) Mutation() *JobNoteMutation {
	return jnc.mutation
}

// Save creates the JobNote in the database.
func (jnc *JobNoteCreate) Save(ctx context.Context) (*JobNote, error) {
	jnc.defaults()
	return withHooks(ctx, jnc.sqlSave, jnc.mutation, jnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jnc *JobNoteCreate) SaveX(ctx context.Context) *JobNote {
	v, err := jnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jnc *JobNoteCreate) Exec(ctx context.Context) error {
	_, err := jnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jnc *JobNoteCreate) ExecX(ctx context.Context) {
	if err := jnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jnc *JobNoteCreate) defaults() {
	if _, ok := jnc.mutation.CreatedAt(); !ok {
		v := jobnote.DefaultCreatedAt()
		jnc.mutation.SetCreatedAt(v)
	}
	if _, ok := jnc.mutation.UpdatedAt(); !ok {
		v := jobnote.DefaultUpdatedAt()
		jnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jnc.mutation.ID(); !ok {
		v := jobnote.DefaultID()
		jnc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jnc *JobNoteCreate) check() error {
	if _, ok := jnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobNote.created_at"`)}
	}
	if _, ok := jnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "JobNote.updated_at"`)}
	}
	if _, ok := jnc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "JobNote.note"`)}
	}
	if v, ok := jnc.mutation.Note(); ok {
		if err := jobnote.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "JobNote.note": %w`, err)}
		}
	}
	if v, ok := jnc.mutation.ID(); ok {
		if err := jobnote.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "JobNote.id": %w`, err)}
		}
	}
	if _, ok := jnc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "JobNote.job"`)}
	}
	if _, ok := jnc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "JobNote.user"`)}
	}
	return nil
}

func (jnc *JobNoteCreate) sqlSave(ctx context.Context) (*JobNote, error) {
	if err := jnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobNote.ID type: %T", _spec.ID.Value)
		}
	}
	jnc.mutation.id = &_node.ID
	jnc.mutation.done = true
	return _node, nil
}

func (jnc *JobNoteCreate) createSpec() (*JobNote, *sqlgraph.CreateSpec) {
	var (
		_node = &JobNote{config: jnc.config}
		_spec = sqlgraph.NewCreateSpec(jobnote.Table, sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString))
	)
	_spec.OnConflict = jnc.conflict
	if id, ok := jnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jnc.mutation.CreatedAt(); ok {
		_spec.SetField(jobnote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jnc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobnote.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jnc.mutation.Note(); ok {
		_spec.SetField(jobnote.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := jnc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobnote.JobTable,
			Columns: []string{jobnote.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jnc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobnote.UserTable,
			Columns: []string{jobnote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jnc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobnote.PartnerTable,
			Columns: []string{jobnote.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobNote.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobNoteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jnc *JobNoteCreate) OnConflict(opts ...sql.ConflictOption) *JobNoteUpsertOne {
	jnc.conflict = opts
	return &JobNoteUpsertOne{
		create: jnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobNote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jnc *JobNoteCreate) OnConflictColumns(columns ...string) *JobNoteUpsertOne {
	jnc.conflict = append(jnc.conflict, sql.ConflictColumns(columns...))
	return &JobNoteUpsertOne{
		create: jnc,
	}
}

type (
	// JobNoteUpsertOne is the builder for "upsert"-ing
	//  one JobNote node.
	JobNoteUpsertOne struct {
		create *JobNoteCreate
	}

	// JobNoteUpsert is the "OnConflict" setter.
	JobNoteUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *JobNoteUpsert) SetUpdatedAt(v time.Time) *JobNoteUpsert {
	u.Set(jobnote.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobNoteUpsert) UpdateUpdatedAt() *JobNoteUpsert {
	u.SetExcluded(jobnote.FieldUpdatedAt)
	return u
}

// SetNote sets the "note" field.
func (u *JobNoteUpsert) SetNote(v string) *JobNoteUpsert {
	u.Set(jobnote.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *JobNoteUpsert) UpdateNote() *JobNoteUpsert {
	u.SetExcluded(jobnote.FieldNote)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobNote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobnote.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobNoteUpsertOne) UpdateNewValues() *JobNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobnote.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobnote.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobNote.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobNoteUpsertOne) Ignore() *JobNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobNoteUpsertOne) DoNothing() *JobNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobNoteCreate.OnConflict
// documentation for more info.
func (u *JobNoteUpsertOne) Update(set func(*JobNoteUpsert)) *JobNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobNoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobNoteUpsertOne) SetUpdatedAt(v time.Time) *JobNoteUpsertOne {
	return u.Update(func(s *JobNoteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobNoteUpsertOne) UpdateUpdatedAt() *JobNoteUpsertOne {
	return u.Update(func(s *JobNoteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetNote sets the "note" field.
func (u *JobNoteUpsertOne) SetNote(v string) *JobNoteUpsertOne {
	return u.Update(func(s *JobNoteUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *JobNoteUpsertOne) UpdateNote() *JobNoteUpsertOne {
	return u.Update(func(s *JobNoteUpsert) {
		s.UpdateNote()
	})
}

// Exec executes the query.
func (u *JobNoteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobNoteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobNoteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobNoteUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: JobNoteUpsertOne.ID is not supported by MySQL driver. Use JobNoteUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobNoteUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobNoteCreateBulk is the builder for creating many JobNote entities in bulk.
type JobNoteCreateBulk struct {
	config
	builders []*JobNoteCreate
	conflict []sql.ConflictOption
}

// Save creates the JobNote entities in the database.
func (jncb *JobNoteCreateBulk) Save(ctx context.Context) ([]*JobNote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jncb.builders))
	nodes := make([]*JobNote, len(jncb.builders))
	mutators := make([]Mutator, len(jncb.builders))
	for i := range jncb.builders {
		func(i int, root context.Context) {
			builder := jncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobNoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jncb *JobNoteCreateBulk) SaveX(ctx context.Context) []*JobNote {
	v, err := jncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jncb *JobNoteCreateBulk) Exec(ctx context.Context) error {
	_, err := jncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jncb *JobNoteCreateBulk) ExecX(ctx context.Context) {
	if err := jncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobNote.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobNoteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jncb *JobNoteCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobNoteUpsertBulk {
	jncb.conflict = opts
	return &JobNoteUpsertBulk{
		create: jncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobNote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jncb *JobNoteCreateBulk) OnConflictColumns(columns ...string) *JobNoteUpsertBulk {
	jncb.conflict = append(jncb.conflict, sql.ConflictColumns(columns...))
	return &JobNoteUpsertBulk{
		create: jncb,
	}
}

// JobNoteUpsertBulk is the builder for "upsert"-ing
// a bulk of JobNote nodes.
type JobNoteUpsertBulk struct {
	create *JobNoteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobNote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobnote.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobNoteUpsertBulk) UpdateNewValues() *JobNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobnote.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobnote.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobNote.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobNoteUpsertBulk) Ignore() *JobNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobNoteUpsertBulk) DoNothing() *JobNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobNoteCreateBulk.OnConflict
// documentation for more info.
func (u *JobNoteUpsertBulk) Update(set func(*JobNoteUpsert)) *JobNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobNoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobNoteUpsertBulk) SetUpdatedAt(v time.Time) *JobNoteUpsertBulk {
	return u.Update(func(s *JobNoteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobNoteUpsertBulk) UpdateUpdatedAt() *JobNoteUpsertBulk {
	return u.Update(func(s *JobNoteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetNote sets the "note" field.
func (u *JobNoteUpsertBulk) SetNote(v string) *JobNoteUpsertBulk {
	return u.Update(func(s *JobNoteUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *JobNoteUpsertBulk) UpdateNote() *JobNoteUpsertBulk {
	return u.Update(func(s *JobNoteUpsert) {
		s.UpdateNote()
	})
}

// Exec executes the query.
func (u *JobNoteUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobNoteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobNoteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobNoteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnerservicestate"
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerServiceStateUpdate is the builder for updating PartnerServiceState entities.
type PartnerServiceStateUpdate struct {
	config
	hooks     []Hook
	mutation  *PartnerServiceStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartnerServiceStateUpdate builder.
func (pssu *PartnerServiceStateUpdate) Where(ps ...predicate.PartnerServiceState) *PartnerServiceStateUpdate {
	pssu.mutation.Where(ps...)
	return pssu
}

// SetUpdatedAt sets the "updated_at" field.
func (pssu *PartnerServiceStateUpdate) SetUpdatedAt(t time.Time) *PartnerServiceStateUpdate {
	pssu.mutation.SetUpdatedAt(t)
	return pssu
}

// SetCountry sets the "country" field.
func (pssu *PartnerServiceStateUpdate) SetCountry(s string) *PartnerServiceStateUpdate {
	pssu.mutation.SetCountry(s)
	return pssu
}

// SetState sets the "state" field.
func (pssu *PartnerServiceStateUpdate) SetState(s string) *PartnerServiceStateUpdate {
	pssu.mutation.SetState(s)
	return pssu
}

// SetLicenseNo sets the "license_no" field.
func (pssu *PartnerServiceStateUpdate) SetLicenseNo(s string) *PartnerServiceStateUpdate {
	pssu.mutation.SetLicenseNo(s)
	return pssu
}

// SetNillableLicenseNo sets the "license_no" field if the given value is not nil.
func (pssu *PartnerServiceStateUpdate) SetNillableLicenseNo(s *string) *PartnerServiceStateUpdate {
	if s != nil {
		pssu.SetLicenseNo(*s)
	}
	return pssu
}

// ClearLicenseNo clears the value of the "license_no" field.
func (pssu *PartnerServiceStateUpdate) ClearLicenseNo() *PartnerServiceStateUpdate {
	pssu.mutation.ClearLicenseNo()
	return pssu
}

// SetLicenseExpDate sets the "license_exp_date" field.
func (pssu *PartnerServiceStateUpdate) SetLicenseExpDate(t time.Time) *PartnerServiceStateUpdate {
	pssu.mutation.SetLicenseExpDate(t)
	return pssu
}

// SetNillableLicenseExpDate sets the "license_exp_date" field if the given value is not nil.
func (pssu *PartnerServiceStateUpdate) SetNillableLicenseExpDate(t *time.Time) *PartnerServiceStateUpdate {
	if t != nil {
		pssu.SetLicenseExpDate(*t)
	}
	return pssu
}

// ClearLicenseExpDate clears the value of the "license_exp_date" field.
func (pssu *PartnerServiceStateUpdate) ClearLicenseExpDate() *PartnerServiceStateUpdate {
	pssu.mutation.ClearLicenseExpDate()
	return pssu
}

// SetProofDocID sets the "proof_doc_id" field.
func (pssu *PartnerServiceStateUpdate) SetProofDocID(s string) *PartnerServiceStateUpdate {
	pssu.mutation.SetProofDocID(s)
	return pssu
}

// SetNillableProofDocID sets the "proof_doc_id" field if the given value is not nil.
func (pssu *PartnerServiceStateUpdate) SetNillableProofDocID(s *string) *PartnerServiceStateUpdate {
	if s != nil {
		pssu.SetProofDocID(*s)
	}
	return pssu
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (pssu *PartnerServiceStateUpdate) ClearProofDocID() *PartnerServiceStateUpdate {
	pssu.mutation.ClearProofDocID()
	return pssu
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pssu *PartnerServiceStateUpdate) SetPartnerID(id string) *PartnerServiceStateUpdate {
	pssu.mutation.SetPartnerID(id)
	return pssu
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pssu *PartnerServiceStateUpdate) SetPartner(p *Partner) *PartnerServiceStateUpdate {
	return pssu.SetPartnerID(p.ID)
}

// Mutation returns the PartnerServiceStateMutation object of the builder.
func (pssu *PartnerServiceStateUpdate) Mutation() *PartnerServiceStateMutation {
	return pssu.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pssu *PartnerServiceStateUpdate) ClearPartner() *PartnerServiceStateUpdate {
	pssu.mutation.ClearPartner()
	return pssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pssu *PartnerServiceStateUpdate) Save(ctx context.Context) (int, error) {
	pssu.defaults()
	return withHooks(ctx, pssu.sqlSave, pssu.mutation, pssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pssu *PartnerServiceStateUpdate) SaveX(ctx context.Context) int {
	affected, err := pssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pssu *PartnerServiceStateUpdate) Exec(ctx context.Context) error {
	_, err := pssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssu *PartnerServiceStateUpdate) ExecX(ctx context.Context) {
	if err := pssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pssu *PartnerServiceStateUpdate) defaults() {
	if _, ok := pssu.mutation.UpdatedAt(); !ok {
		v := partnerservicestate.UpdateDefaultUpdatedAt()
		pssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssu *PartnerServiceStateUpdate) check() error {
	if v, ok := pssu.mutation.Country(); ok {
		if err := partnerservicestate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.country": %w`, err)}
		}
	}
	if v, ok := pssu.mutation.State(); ok {
		if err := partnerservicestate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.state": %w`, err)}
		}
	}
	if v, ok := pssu.mutation.LicenseNo(); ok {
		if err := partnerservicestate.LicenseNoValidator(v); err != nil {
			return &ValidationError{Name: "license_no", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.license_no": %w`, err)}
		}
	}
	if v, ok := pssu.mutation.ProofDocID(); ok {
		if err := partnerservicestate.ProofDocIDValidator(v); err != nil {
			return &ValidationError{Name: "proof_doc_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.proof_doc_id": %w`, err)}
		}
	}
	if _, ok := pssu.mutation.PartnerID(); pssu.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerServiceState.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pssu *PartnerServiceStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerServiceStateUpdate {
	pssu.modifiers = append(pssu.modifiers, modifiers...)
	return pssu
}

func (pssu *PartnerServiceStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnerservicestate.Table, partnerservicestate.Columns, sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString))
	if ps := pssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssu.mutation.UpdatedAt(); ok {
		_spec.SetField(partnerservicestate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pssu.mutation.Country(); ok {
		_spec.SetField(partnerservicestate.FieldCountry, field.TypeString, value)
	}
	if value, ok := pssu.mutation.State(); ok {
		_spec.SetField(partnerservicestate.FieldState, field.TypeString, value)
	}
	if value, ok := pssu.mutation.LicenseNo(); ok {
		_spec.SetField(partnerservicestate.FieldLicenseNo, field.TypeString, value)
	}
	if pssu.mutation.LicenseNoCleared() {
		_spec.ClearField(partnerservicestate.FieldLicenseNo, field.TypeString)
	}
	if value, ok := pssu.mutation.LicenseExpDate(); ok {
		_spec.SetField(partnerservicestate.FieldLicenseExpDate, field.TypeTime, value)
	}
	if pssu.mutation.LicenseExpDateCleared() {
		_spec.ClearField(partnerservicestate.FieldLicenseExpDate, field.TypeTime)
	}
	if value, ok := pssu.mutation.ProofDocID(); ok {
		_spec.SetField(partnerservicestate.FieldProofDocID, field.TypeString, value)
	}
	if pssu.mutation.ProofDocIDCleared() {
		_spec.ClearField(partnerservicestate.FieldProofDocID, field.TypeString)
	}
	if pssu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicestate.PartnerTable,
			Columns: []string{partnerservicestate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicestate.PartnerTable,
			Columns: []string{partnerservicestate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pssu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnerservicestate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pssu.mutation.done = true
	return n, nil
}

// PartnerServiceStateUpdateOne is the builder for updating a single PartnerServiceState entity.
type PartnerServiceStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartnerServiceStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pssuo *PartnerServiceStateUpdateOne) SetUpdatedAt(t time.Time) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetUpdatedAt(t)
	return pssuo
}

// SetCountry sets the "country" field.
func (pssuo *PartnerServiceStateUpdateOne) SetCountry(s string) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetCountry(s)
	return pssuo
}

// SetState sets the "state" field.
func (pssuo *PartnerServiceStateUpdateOne) SetState(s string) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetState(s)
	return pssuo
}

// SetLicenseNo sets the "license_no" field.
func (pssuo *PartnerServiceStateUpdateOne) SetLicenseNo(s string) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetLicenseNo(s)
	return pssuo
}

// SetNillableLicenseNo sets the "license_no" field if the given value is not nil.
func (pssuo *PartnerServiceStateUpdateOne) SetNillableLicenseNo(s *string) *PartnerServiceStateUpdateOne {
	if s != nil {
		pssuo.SetLicenseNo(*s)
	}
	return pssuo
}

// ClearLicenseNo clears the value of the "license_no" field.
func (pssuo *PartnerServiceStateUpdateOne) ClearLicenseNo() *PartnerServiceStateUpdateOne {
	pssuo.mutation.ClearLicenseNo()
	return pssuo
}

// SetLicenseExpDate sets the "license_exp_date" field.
func (pssuo *PartnerServiceStateUpdateOne) SetLicenseExpDate(t time.Time) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetLicenseExpDate(t)
	return pssuo
}

// SetNillableLicenseExpDate sets the "license_exp_date" field if the given value is not nil.
func (pssuo *PartnerServiceStateUpdateOne) SetNillableLicenseExpDate(t *time.Time) *PartnerServiceStateUpdateOne {
	if t != nil {
		pssuo.SetLicenseExpDate(*t)
	}
	return pssuo
}

// ClearLicenseExpDate clears the value of the "license_exp_date" field.
func (pssuo *PartnerServiceStateUpdateOne) ClearLicenseExpDate() *PartnerServiceStateUpdateOne {
	pssuo.mutation.ClearLicenseExpDate()
	return pssuo
}

// SetProofDocID sets the "proof_doc_id" field.
func (pssuo *PartnerServiceStateUpdateOne) SetProofDocID(s string) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetProofDocID(s)
	return pssuo
}

// SetNillableProofDocID sets the "proof_doc_id" field if the given value is not nil.
func (pssuo *PartnerServiceStateUpdateOne) SetNillableProofDocID(s *string) *PartnerServiceStateUpdateOne {
	if s != nil {
		pssuo.SetProofDocID(*s)
	}
	return pssuo
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (pssuo *PartnerServiceStateUpdateOne) ClearProofDocID() *PartnerServiceStateUpdateOne {
	pssuo.mutation.ClearProofDocID()
	return pssuo
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pssuo *PartnerServiceStateUpdateOne) SetPartnerID(id string) *PartnerServiceStateUpdateOne {
	pssuo.mutation.SetPartnerID(id)
	return pssuo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pssuo *PartnerServiceStateUpdateOne) SetPartner(p *Partner) *PartnerServiceStateUpdateOne {
	return pssuo.SetPartnerID(p.ID)
}

// Mutation returns the PartnerServiceStateMutation object of the builder.
func (pssuo *PartnerServiceStateUpdateOne) Mutation() *PartnerServiceStateMutation {
	return pssuo.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pssuo *PartnerServiceStateUpdateOne) ClearPartner() *PartnerServiceStateUpdateOne {
	pssuo.mutation.ClearPartner()
	return pssuo
}

// Where appends a list predicates to the PartnerServiceStateUpdate builder.
func (pssuo *PartnerServiceStateUpdateOne) Where(ps ...predicate.PartnerServiceState) *PartnerServiceStateUpdateOne {
	pssuo.mutation.Where(ps...)
	return pssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pssuo *PartnerServiceStateUpdateOne) Select(field string, fields ...string) *PartnerServiceStateUpdateOne {
	pssuo.fields = append([]string{field}, fields...)
	return pssuo
}

// Save executes the query and returns the updated PartnerServiceState entity.
func (pssuo *PartnerServiceStateUpdateOne) Save(ctx context.Context) (*PartnerServiceState, error) {
	pssuo.defaults()
	return withHooks(ctx, pssuo.sqlSave, pssuo.mutation, pssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pssuo *PartnerServiceStateUpdateOne) SaveX(ctx context.Context) *PartnerServiceState {
	node, err := pssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pssuo *PartnerServiceStateUpdateOne) Exec(ctx context.Context) error {
	_, err := pssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssuo *PartnerServiceStateUpdateOne) ExecX(ctx context.Context) {
	if err := pssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pssuo *PartnerServiceStateUpdateOne) defaults() {
	if _, ok := pssuo.mutation.UpdatedAt(); !ok {
		v := partnerservicestate.UpdateDefaultUpdatedAt()
		pssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssuo *PartnerServiceStateUpdateOne) check() error {
	if v, ok := pssuo.mutation.Country(); ok {
		if err := partnerservicestate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.country": %w`, err)}
		}
	}
	if v, ok := pssuo.mutation.State(); ok {
		if err := partnerservicestate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.state": %w`, err)}
		}
	}
	if v, ok := pssuo.mutation.LicenseNo(); ok {
		if err := partnerservicestate.LicenseNoValidator(v); err != nil {
			return &ValidationError{Name: "license_no", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.license_no": %w`, err)}
		}
	}
	if v, ok := pssuo.mutation.ProofDocID(); ok {
		if err := partnerservicestate.ProofDocIDValidator(v); err != nil {
			return &ValidationError{Name: "proof_doc_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceState.proof_doc_id": %w`, err)}
		}
	}
	if _, ok := pssuo.mutation.PartnerID(); pssuo.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerServiceState.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pssuo *PartnerServiceStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerServiceStateUpdateOne {
	pssuo.modifiers = append(pssuo.modifiers, modifiers...)
	return pssuo
}

func (pssuo *PartnerServiceStateUpdateOne) sqlSave(ctx context.Context) (_node *PartnerServiceState, err error) {
	if err := pssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnerservicestate.Table, partnerservicestate.Columns, sqlgraph.NewFieldSpec(partnerservicestate.FieldID, field.TypeString))
	id, ok := pssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnerServiceState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnerservicestate.FieldID)
		for _, f := range fields {
			if !partnerservicestate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnerservicestate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(partnerservicestate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pssuo.mutation.Country(); ok {
		_spec.SetField(partnerservicestate.FieldCountry, field.TypeString, value)
	}
	if value, ok := pssuo.mutation.State(); ok {
		_spec.SetField(partnerservicestate.FieldState, field.TypeString, value)
	}
	if value, ok := pssuo.mutation.LicenseNo(); ok {
		_spec.SetField(partnerservicestate.FieldLicenseNo, field.TypeString, value)
	}
	if pssuo.mutation.LicenseNoCleared() {
		_spec.ClearField(partnerservicestate.FieldLicenseNo, field.TypeString)
	}
	if value, ok := pssuo.mutation.LicenseExpDate(); ok {
		_spec.SetField(partnerservicestate.FieldLicenseExpDate, field.TypeTime, value)
	}
	if pssuo.mutation.LicenseExpDateCleared() {
		_spec.ClearField(partnerservicestate.FieldLicenseExpDate, field.TypeTime)
	}
	if value, ok := pssuo.mutation.ProofDocID(); ok {
		_spec.SetField(partnerservicestate.FieldProofDocID, field.TypeString, value)
	}
	if pssuo.mutation.ProofDocIDCleared() {
		_spec.ClearField(partnerservicestate.FieldProofDocID, field.TypeString)
	}
	if pssuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicestate.PartnerTable,
			Columns: []string{partnerservicestate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicestate.PartnerTable,
			Columns: []string{partnerservicestate.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pssuo.modifiers...)
	_node = &PartnerServiceState{config: pssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnerservicestate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pssuo.mutation.done = true
	return _node, nil
}

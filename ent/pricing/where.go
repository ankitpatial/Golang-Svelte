// Code generated by ent, DO NOT EDIT.

package pricing

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldUpdatedAt, v))
}

// PostalCountry applies equality check predicate on the "postal_country" field. It's identical to PostalCountryEQ.
func PostalCountry(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPostalCountry, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPostalCode, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldProductID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldDescription, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPrice, v))
}

// PricePer applies equality check predicate on the "price_per" field. It's identical to PricePerEQ.
func PricePer(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPricePer, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldUpdatedAt, v))
}

// PostalCountryEQ applies the EQ predicate on the "postal_country" field.
func PostalCountryEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPostalCountry, v))
}

// PostalCountryNEQ applies the NEQ predicate on the "postal_country" field.
func PostalCountryNEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldPostalCountry, v))
}

// PostalCountryIn applies the In predicate on the "postal_country" field.
func PostalCountryIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldPostalCountry, vs...))
}

// PostalCountryNotIn applies the NotIn predicate on the "postal_country" field.
func PostalCountryNotIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldPostalCountry, vs...))
}

// PostalCountryGT applies the GT predicate on the "postal_country" field.
func PostalCountryGT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldPostalCountry, v))
}

// PostalCountryGTE applies the GTE predicate on the "postal_country" field.
func PostalCountryGTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldPostalCountry, v))
}

// PostalCountryLT applies the LT predicate on the "postal_country" field.
func PostalCountryLT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldPostalCountry, v))
}

// PostalCountryLTE applies the LTE predicate on the "postal_country" field.
func PostalCountryLTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldPostalCountry, v))
}

// PostalCountryContains applies the Contains predicate on the "postal_country" field.
func PostalCountryContains(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContains(FieldPostalCountry, v))
}

// PostalCountryHasPrefix applies the HasPrefix predicate on the "postal_country" field.
func PostalCountryHasPrefix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasPrefix(FieldPostalCountry, v))
}

// PostalCountryHasSuffix applies the HasSuffix predicate on the "postal_country" field.
func PostalCountryHasSuffix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasSuffix(FieldPostalCountry, v))
}

// PostalCountryEqualFold applies the EqualFold predicate on the "postal_country" field.
func PostalCountryEqualFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEqualFold(FieldPostalCountry, v))
}

// PostalCountryContainsFold applies the ContainsFold predicate on the "postal_country" field.
func PostalCountryContainsFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContainsFold(FieldPostalCountry, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContainsFold(FieldPostalCode, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v uint8) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldProductID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Pricing {
	return predicate.Pricing(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Pricing {
	return predicate.Pricing(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContainsFold(FieldDescription, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldPrice, v))
}

// PricePerEQ applies the EQ predicate on the "price_per" field.
func PricePerEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEQ(FieldPricePer, v))
}

// PricePerNEQ applies the NEQ predicate on the "price_per" field.
func PricePerNEQ(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNEQ(FieldPricePer, v))
}

// PricePerIn applies the In predicate on the "price_per" field.
func PricePerIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldIn(FieldPricePer, vs...))
}

// PricePerNotIn applies the NotIn predicate on the "price_per" field.
func PricePerNotIn(vs ...string) predicate.Pricing {
	return predicate.Pricing(sql.FieldNotIn(FieldPricePer, vs...))
}

// PricePerGT applies the GT predicate on the "price_per" field.
func PricePerGT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGT(FieldPricePer, v))
}

// PricePerGTE applies the GTE predicate on the "price_per" field.
func PricePerGTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldGTE(FieldPricePer, v))
}

// PricePerLT applies the LT predicate on the "price_per" field.
func PricePerLT(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLT(FieldPricePer, v))
}

// PricePerLTE applies the LTE predicate on the "price_per" field.
func PricePerLTE(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldLTE(FieldPricePer, v))
}

// PricePerContains applies the Contains predicate on the "price_per" field.
func PricePerContains(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContains(FieldPricePer, v))
}

// PricePerHasPrefix applies the HasPrefix predicate on the "price_per" field.
func PricePerHasPrefix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasPrefix(FieldPricePer, v))
}

// PricePerHasSuffix applies the HasSuffix predicate on the "price_per" field.
func PricePerHasSuffix(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldHasSuffix(FieldPricePer, v))
}

// PricePerEqualFold applies the EqualFold predicate on the "price_per" field.
func PricePerEqualFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldEqualFold(FieldPricePer, v))
}

// PricePerContainsFold applies the ContainsFold predicate on the "price_per" field.
func PricePerContainsFold(v string) predicate.Pricing {
	return predicate.Pricing(sql.FieldContainsFold(FieldPricePer, v))
}

// HasPostal applies the HasEdge predicate on the "postal" edge.
func HasPostal() predicate.Pricing {
	return predicate.Pricing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PostalTable, PostalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostalWith applies the HasEdge predicate on the "postal" edge with a given conditions (other predicates).
func HasPostalWith(preds ...predicate.PostalCode) predicate.Pricing {
	return predicate.Pricing(func(s *sql.Selector) {
		step := newPostalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pricing) predicate.Pricing {
	return predicate.Pricing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pricing) predicate.Pricing {
	return predicate.Pricing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pricing) predicate.Pricing {
	return predicate.Pricing(func(s *sql.Selector) {
		p(s.Not())
	})
}

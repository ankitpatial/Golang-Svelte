// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIAccessesColumns holds the columns for the "api_accesses" table.
	APIAccessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "url", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Default: ""},
		{Name: "password", Type: field.TypeString, Default: ""},
		{Name: "key", Type: field.TypeString, Default: ""},
		{Name: "secret", Type: field.TypeString, Default: ""},
		{Name: "access_token", Type: field.TypeString, Nullable: true, Size: 800},
		{Name: "refresh_token", Type: field.TypeString, Nullable: true, Size: 800},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
	}
	// APIAccessesTable holds the schema information for the "api_accesses" table.
	APIAccessesTable = &schema.Table{
		Name:       "api_accesses",
		Columns:    APIAccessesColumns,
		PrimaryKey: []*schema.Column{APIAccessesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "apiaccess_created_at",
				Unique:  false,
				Columns: []*schema.Column{APIAccessesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "apiaccess_updated_at",
				Unique:  false,
				Columns: []*schema.Column{APIAccessesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "apiaccess_url",
				Unique:  false,
				Columns: []*schema.Column{APIAccessesColumns[3]},
			},
			{
				Name:    "apiaccess_username",
				Unique:  false,
				Columns: []*schema.Column{APIAccessesColumns[4]},
			},
		},
	}
	// APIUsersColumns holds the columns for the "api_users" table.
	APIUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "pwd_hash", Type: field.TypeString, Size: 150},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "cb_api_url", Type: field.TypeString, Nullable: true},
		{Name: "cb_api_auth", Type: field.TypeEnum, Nullable: true, Enums: []string{"NONE", "BASIC", "TOKEN", "OAUTH"}, Default: "NONE"},
		{Name: "cb_api_user", Type: field.TypeString, Nullable: true},
		{Name: "cb_api_pwd", Type: field.TypeString, Nullable: true},
		{Name: "cb_api_token", Type: field.TypeString, Nullable: true},
		{Name: "cb_api_endpoints", Type: field.TypeJSON, Nullable: true},
	}
	// APIUsersTable holds the schema information for the "api_users" table.
	APIUsersTable = &schema.Table{
		Name:       "api_users",
		Columns:    APIUsersColumns,
		PrimaryKey: []*schema.Column{APIUsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "apiuser_created_at",
				Unique:  false,
				Columns: []*schema.Column{APIUsersColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "apiuser_username",
				Unique:  false,
				Columns: []*schema.Column{APIUsersColumns[2]},
			},
			{
				Name:    "apiuser_active",
				Unique:  false,
				Columns: []*schema.Column{APIUsersColumns[4]},
			},
		},
	}
	// APIUserTokensColumns holds the columns for the "api_user_tokens" table.
	APIUserTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "token_type", Type: field.TypeString, Size: 10},
		{Name: "token_id", Type: field.TypeString, Unique: true, Size: 500},
		{Name: "refresh_token_id", Type: field.TypeString, Size: 500},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// APIUserTokensTable holds the schema information for the "api_user_tokens" table.
	APIUserTokensTable = &schema.Table{
		Name:       "api_user_tokens",
		Columns:    APIUserTokensColumns,
		PrimaryKey: []*schema.Column{APIUserTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_user_tokens_api_users_tokens",
				Columns:    []*schema.Column{APIUserTokensColumns[5]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apiusertoken_created_at",
				Unique:  false,
				Columns: []*schema.Column{APIUserTokensColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "apiusertoken_token_type",
				Unique:  false,
				Columns: []*schema.Column{APIUserTokensColumns[2]},
			},
			{
				Name:    "apiusertoken_token_id",
				Unique:  false,
				Columns: []*schema.Column{APIUserTokensColumns[3]},
			},
		},
	}
	// AuditLogsColumns holds the columns for the "audit_logs" table.
	AuditLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "action", Type: field.TypeString, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 500, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "ip", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// AuditLogsTable holds the schema information for the "audit_logs" table.
	AuditLogsTable = &schema.Table{
		Name:       "audit_logs",
		Columns:    AuditLogsColumns,
		PrimaryKey: []*schema.Column{AuditLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "audit_logs_api_users_audit_logs",
				Columns:    []*schema.Column{AuditLogsColumns[5]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "audit_logs_users_audit_logs",
				Columns:    []*schema.Column{AuditLogsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "auditlog_created_at",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "auditlog_ip",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[4]},
			},
			{
				Name:    "auditlog_action",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[2]},
			},
			{
				Name:    "auditlog_description",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[3]},
			},
		},
	}
	// ChannelsColumns holds the columns for the "channels" table.
	ChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeEnum, Enums: []string{"PING", "ESTIMATE", "JOB", "JOB_CHAT", "TASK", "TRAINING_VIDEO", "PARTNER", "PARTNER_USER"}},
		{Name: "topic", Type: field.TypeEnum, Enums: []string{"BROADCAST", "CHANGE", "STATUS_CHANGE", "PROGRESS", "FILE_UPLOAD", "ASSIGNED", "CREATED", "UPDATED", "NEW_MESSAGE"}},
		{Name: "ref_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// ChannelsTable holds the schema information for the "channels" table.
	ChannelsTable = &schema.Table{
		Name:       "channels",
		Columns:    ChannelsColumns,
		PrimaryKey: []*schema.Column{ChannelsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "channel_created_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "channel_updated_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "channel_name",
				Unique:  false,
				Columns: []*schema.Column{ChannelsColumns[3]},
			},
			{
				Name:    "channel_topic",
				Unique:  false,
				Columns: []*schema.Column{ChannelsColumns[4]},
			},
			{
				Name:    "channel_ref_id",
				Unique:  false,
				Columns: []*schema.Column{ChannelsColumns[5]},
			},
		},
	}
	// ChannelMessagesColumns holds the columns for the "channel_messages" table.
	ChannelMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "message", Type: field.TypeString, Size: 500},
		{Name: "from_name", Type: field.TypeString, Size: 100},
		{Name: "to_name", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "private", Type: field.TypeBool, Default: true},
		{Name: "unread", Type: field.TypeBool, Nullable: true},
		{Name: "from_api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "channel_id", Type: field.TypeString, Size: 36},
		{Name: "from_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "to_user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// ChannelMessagesTable holds the schema information for the "channel_messages" table.
	ChannelMessagesTable = &schema.Table{
		Name:       "channel_messages",
		Columns:    ChannelMessagesColumns,
		PrimaryKey: []*schema.Column{ChannelMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "channel_messages_api_users_notifications",
				Columns:    []*schema.Column{ChannelMessagesColumns[9]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "channel_messages_channels_messages",
				Columns:    []*schema.Column{ChannelMessagesColumns[10]},
				RefColumns: []*schema.Column{ChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "channel_messages_users_sent_messages",
				Columns:    []*schema.Column{ChannelMessagesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "channel_messages_users_received_messages",
				Columns:    []*schema.Column{ChannelMessagesColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "channelmessage_created_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelMessagesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "channelmessage_updated_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelMessagesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// ChannelMessageReadsColumns holds the columns for the "channel_message_reads" table.
	ChannelMessageReadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "read", Type: field.TypeBool, Default: true},
		{Name: "channel_message_id", Type: field.TypeString, Size: 36},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// ChannelMessageReadsTable holds the schema information for the "channel_message_reads" table.
	ChannelMessageReadsTable = &schema.Table{
		Name:       "channel_message_reads",
		Columns:    ChannelMessageReadsColumns,
		PrimaryKey: []*schema.Column{ChannelMessageReadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "channel_message_reads_channel_messages_reads",
				Columns:    []*schema.Column{ChannelMessageReadsColumns[3]},
				RefColumns: []*schema.Column{ChannelMessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "channel_message_reads_users_channel_message_read",
				Columns:    []*schema.Column{ChannelMessageReadsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "channelmessageread_created_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelMessageReadsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// ChannelSubsColumns holds the columns for the "channel_subs" table.
	ChannelSubsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "role", Type: field.TypeEnum, Nullable: true, Enums: []string{"ADMIN", "SUB_ADMIN", "ESTIMATOR", "REVIEWER", "SITE_USER"}},
		{Name: "channel_id", Type: field.TypeString, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// ChannelSubsTable holds the schema information for the "channel_subs" table.
	ChannelSubsTable = &schema.Table{
		Name:       "channel_subs",
		Columns:    ChannelSubsColumns,
		PrimaryKey: []*schema.Column{ChannelSubsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "channel_subs_channels_subscriptions",
				Columns:    []*schema.Column{ChannelSubsColumns[4]},
				RefColumns: []*schema.Column{ChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "channel_subs_partners_channels",
				Columns:    []*schema.Column{ChannelSubsColumns[5]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "channel_subs_users_chat_channels",
				Columns:    []*schema.Column{ChannelSubsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "channelsub_created_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelSubsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "channelsub_updated_at",
				Unique:  false,
				Columns: []*schema.Column{ChannelSubsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "channelsub_role",
				Unique:  false,
				Columns: []*schema.Column{ChannelSubsColumns[3]},
			},
		},
	}
	// ContactUsColumns holds the columns for the "contact_us" table.
	ContactUsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "reason", Type: field.TypeString, Size: 1000},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// ContactUsTable holds the schema information for the "contact_us" table.
	ContactUsTable = &schema.Table{
		Name:       "contact_us",
		Columns:    ContactUsColumns,
		PrimaryKey: []*schema.Column{ContactUsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contact_us_partners_contact_us_requests",
				Columns:    []*schema.Column{ContactUsColumns[4]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "contact_us_users_contact_us_requests",
				Columns:    []*schema.Column{ContactUsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "contactus_created_at",
				Unique:  false,
				Columns: []*schema.Column{ContactUsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "contactus_updated_at",
				Unique:  false,
				Columns: []*schema.Column{ContactUsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "bucket", Type: field.TypeString, Size: 50},
		{Name: "key", Type: field.TypeString},
		{Name: "folder", Type: field.TypeEnum, Enums: []string{"PartnerDocs", "JobDocs", "Estimates", "TrainingVideos", "PublicData", "Survey"}},
		{Name: "dir", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "section", Type: field.TypeEnum, Enums: []string{"Docs", "InspectionDocs", "ProductionPics", "PricingPDF", "Proof", "Logo", "Avatar", "Image", "Video", "Proposal"}},
		{Name: "name", Type: field.TypeString, Size: 150},
		{Name: "filename", Type: field.TypeString, Size: 150},
		{Name: "content_type", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "content_size", Type: field.TypeInt64},
		{Name: "ready", Type: field.TypeBool, Default: false},
		{Name: "creator_id", Type: field.TypeString, Size: 36},
		{Name: "updater_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "image_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "documents_installation_job_items_installation_job_item_image",
				Columns:    []*schema.Column{DocumentsColumns[15]},
				RefColumns: []*schema.Column{InstallationJobItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "document_created_at",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "document_updated_at",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "document_bucket_key",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[3], DocumentsColumns[4]},
			},
			{
				Name:    "document_folder_dir",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[5], DocumentsColumns[6]},
			},
			{
				Name:    "document_section",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[7]},
			},
			{
				Name:    "document_name",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[8]},
			},
			{
				Name:    "document_ready",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[12]},
			},
		},
	}
	// EstimatesColumns holds the columns for the "estimates" table.
	EstimatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "region_id", Type: field.TypeUint8, Default: 0},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"New", "Pending", "Approved", "Denied", "OnHold", "Failed"}},
		{Name: "current_material", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "new_roofing_material", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "low_slope", Type: field.TypeBool, Default: false},
		{Name: "current_material_low_slope", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "new_roofing_material_low_slope", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "redeck", Type: field.TypeBool, Default: false},
		{Name: "layers", Type: field.TypeUint8},
		{Name: "layer2_material", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "layer3_material", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "partial_percentage", Type: field.TypeFloat64, Nullable: true, Default: 0},
		{Name: "material_mapping_note", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "measure_type", Type: field.TypeEnum, Enums: []string{"PrimaryStructureOnly", "PrimaryPlusDetachedGarage", "AllStructuresOnParcel"}},
		{Name: "extra_charge_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"NONE", "AMOUNT", "PERCENT", "PER_SQ", "CONDITIONAL"}, Default: "NONE"},
		{Name: "extra_charges", Type: field.TypeFloat64, Nullable: true, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "extra_charge_cond", Type: field.TypeJSON, Nullable: true},
		{Name: "extra_charge_note", Type: field.TypeString, Nullable: true},
		{Name: "estimator", Type: field.TypeString, Nullable: true},
		{Name: "estimator_order_id", Type: field.TypeUint, Nullable: true, Default: 0},
		{Name: "estimator_report_id", Type: field.TypeUint, Nullable: true, Default: 0},
		{Name: "total_squares", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
		{Name: "primary_pitch", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
		{Name: "price", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "price_summary", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "bounds", Type: field.TypeJSON, Nullable: true},
		{Name: "estimator_raw_response", Type: field.TypeJSON, Nullable: true},
		{Name: "override", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "override_total_squares", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
		{Name: "override_primary_pitch", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
		{Name: "override_price", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "override_price_summary", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "company_ref_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "company_ref_name", Type: field.TypeString, Nullable: true, Size: 100, Default: "RFX"},
		{Name: "failure_reason", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "pdf_doc_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "home_owner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "sales_rep_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// EstimatesTable holds the schema information for the "estimates" table.
	EstimatesTable = &schema.Table{
		Name:       "estimates",
		Columns:    EstimatesColumns,
		PrimaryKey: []*schema.Column{EstimatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "estimates_api_users_created_estimates",
				Columns:    []*schema.Column{EstimatesColumns[38]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "estimates_documents_estimate_pdf",
				Columns:    []*schema.Column{EstimatesColumns[39]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "estimates_home_owners_estimates",
				Columns:    []*schema.Column{EstimatesColumns[40]},
				RefColumns: []*schema.Column{HomeOwnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "estimates_partners_requested_estimates",
				Columns:    []*schema.Column{EstimatesColumns[41]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "estimates_users_created_estimates",
				Columns:    []*schema.Column{EstimatesColumns[42]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "estimates_users_sales_rep_estimates",
				Columns:    []*schema.Column{EstimatesColumns[43]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "estimate_created_at",
				Unique:  false,
				Columns: []*schema.Column{EstimatesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "estimate_updated_at",
				Unique:  false,
				Columns: []*schema.Column{EstimatesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "estimate_status",
				Unique:  false,
				Columns: []*schema.Column{EstimatesColumns[4]},
			},
			{
				Name:    "estimate_region_id",
				Unique:  false,
				Columns: []*schema.Column{EstimatesColumns[3]},
			},
			{
				Name:    "estimate_estimator_order_id",
				Unique:  false,
				Columns: []*schema.Column{EstimatesColumns[22]},
			},
		},
	}
	// EstimateActivitiesColumns holds the columns for the "estimate_activities" table.
	EstimateActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
		{Name: "raw", Type: field.TypeJSON, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "estimate_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// EstimateActivitiesTable holds the schema information for the "estimate_activities" table.
	EstimateActivitiesTable = &schema.Table{
		Name:       "estimate_activities",
		Columns:    EstimateActivitiesColumns,
		PrimaryKey: []*schema.Column{EstimateActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "estimate_activities_api_users_estimate_activities",
				Columns:    []*schema.Column{EstimateActivitiesColumns[4]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "estimate_activities_estimates_activities",
				Columns:    []*schema.Column{EstimateActivitiesColumns[5]},
				RefColumns: []*schema.Column{EstimatesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "estimate_activities_users_estimate_activities",
				Columns:    []*schema.Column{EstimateActivitiesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "estimateactivity_created_at",
				Unique:  false,
				Columns: []*schema.Column{EstimateActivitiesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// HomeOwnersColumns holds the columns for the "home_owners" table.
	HomeOwnersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "first_name", Type: field.TypeString, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "last_name", Type: field.TypeString, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "email", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "phone", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "street_number", Type: field.TypeString},
		{Name: "street_name", Type: field.TypeString},
		{Name: "city", Type: field.TypeString, Size: 50},
		{Name: "state", Type: field.TypeString, Size: 50},
		{Name: "state_abbr", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "zip", Type: field.TypeString, Size: 20},
		{Name: "formatted_address", Type: field.TypeString, Nullable: true},
		{Name: "latitude", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(10,8)"}},
		{Name: "longitude", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(11,8)"}},
		{Name: "hash", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// HomeOwnersTable holds the schema information for the "home_owners" table.
	HomeOwnersTable = &schema.Table{
		Name:       "home_owners",
		Columns:    HomeOwnersColumns,
		PrimaryKey: []*schema.Column{HomeOwnersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "home_owners_partners_estimate_home_owners",
				Columns:    []*schema.Column{HomeOwnersColumns[17]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "homeowner_created_at",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "homeowner_updated_at",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "homeowner_email",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[5]},
			},
			{
				Name:    "homeowner_first_name_last_name",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[3], HomeOwnersColumns[4]},
			},
			{
				Name:    "homeowner_phone",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[6]},
			},
			{
				Name:    "homeowner_formatted_address",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[13]},
			},
			{
				Name:    "homeowner_hash",
				Unique:  false,
				Columns: []*schema.Column{HomeOwnersColumns[16]},
			},
		},
	}
	// InstallationJobsColumns holds the columns for the "installation_jobs" table.
	InstallationJobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"SMART_HOME", "HVAC"}},
		{Name: "owner_name", Type: field.TypeString, Size: 60},
		{Name: "owner_phone", Type: field.TypeString, Size: 15},
		{Name: "owner_email", Type: field.TypeString, Nullable: true},
		{Name: "owner_address", Type: field.TypeString, Size: 250},
		{Name: "owner_address_lat", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(10,8)"}},
		{Name: "owner_address_lng", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(11,8)"}},
		{Name: "special_note", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "pkg", Type: field.TypeString, Size: 100},
		{Name: "pkg_description", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "pkg_features", Type: field.TypeJSON, Nullable: true},
		{Name: "price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "approval", Type: field.TypeEnum, Enums: []string{"PENDING", "APPROVED", "DENIED"}, Default: "PENDING"},
		{Name: "approval_at", Type: field.TypeTime},
		{Name: "deny_reason", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "NEW", "SCHEDULED", "INSTALLED"}, Default: "PENDING"},
		{Name: "status_at", Type: field.TypeTime},
		{Name: "requesting_partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "assigned_partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "sales_rep_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// InstallationJobsTable holds the schema information for the "installation_jobs" table.
	InstallationJobsTable = &schema.Table{
		Name:       "installation_jobs",
		Columns:    InstallationJobsColumns,
		PrimaryKey: []*schema.Column{InstallationJobsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "installation_jobs_partners_requested_installation_jobs",
				Columns:    []*schema.Column{InstallationJobsColumns[20]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "installation_jobs_partners_assigned_installation_jobs",
				Columns:    []*schema.Column{InstallationJobsColumns[21]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "installation_jobs_users_created_installation_jobs",
				Columns:    []*schema.Column{InstallationJobsColumns[22]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "installation_jobs_users_installation_leads",
				Columns:    []*schema.Column{InstallationJobsColumns[23]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "installationjob_created_at",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "installationjob_updated_at",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "installationjob_owner_name",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[4]},
			},
			{
				Name:    "installationjob_owner_email",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[6]},
			},
			{
				Name:    "installationjob_owner_phone",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[5]},
			},
			{
				Name:    "installationjob_owner_address",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[7]},
			},
			{
				Name:    "installationjob_approval_approval_at",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[15], InstallationJobsColumns[16]},
			},
			{
				Name:    "installationjob_status_status_at",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobsColumns[18], InstallationJobsColumns[19]},
			},
		},
	}
	// InstallationJobItemsColumns holds the columns for the "installation_job_items" table.
	InstallationJobItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "description", Type: field.TypeString, Size: 500},
		{Name: "features", Type: field.TypeJSON},
		{Name: "price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "img_key", Type: field.TypeString},
		{Name: "special_note", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "job_id", Type: field.TypeString, Size: 36},
	}
	// InstallationJobItemsTable holds the schema information for the "installation_job_items" table.
	InstallationJobItemsTable = &schema.Table{
		Name:       "installation_job_items",
		Columns:    InstallationJobItemsColumns,
		PrimaryKey: []*schema.Column{InstallationJobItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "installation_job_items_installation_jobs_items",
				Columns:    []*schema.Column{InstallationJobItemsColumns[7]},
				RefColumns: []*schema.Column{InstallationJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InstallationJobProgressColumns holds the columns for the "installation_job_progress" table.
	InstallationJobProgressColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "NEW", "SCHEDULED", "INSTALLED"}},
		{Name: "complete", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "note", Type: field.TypeString, Nullable: true},
		{Name: "job_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// InstallationJobProgressTable holds the schema information for the "installation_job_progress" table.
	InstallationJobProgressTable = &schema.Table{
		Name:       "installation_job_progress",
		Columns:    InstallationJobProgressColumns,
		PrimaryKey: []*schema.Column{InstallationJobProgressColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "installation_job_progress_installation_jobs_progress_history",
				Columns:    []*schema.Column{InstallationJobProgressColumns[6]},
				RefColumns: []*schema.Column{InstallationJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "installation_job_progress_users_installation_job_status_changer",
				Columns:    []*schema.Column{InstallationJobProgressColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "installationjobprogress_created_at",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobProgressColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "installationjobprogress_updated_at",
				Unique:  false,
				Columns: []*schema.Column{InstallationJobProgressColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// JobsColumns holds the columns for the "jobs" table.
	JobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "progress", Type: field.TypeEnum, Nullable: true, Enums: []string{"New", "CustomerContacted", "JobDetailsConfirmed", "Permitting", "Delayed", "Scheduled", "InProgress", "Installed", "Invoiced", "InvoiceApproved", "InvoicePaid"}},
		{Name: "progress_at", Type: field.TypeTime, Nullable: true},
		{Name: "progress_flag_at", Type: field.TypeTime, Nullable: true},
		{Name: "region_id", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "company_ref_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "company_name", Type: field.TypeString, Nullable: true, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "price", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "work_order_price", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "contract_price", Type: field.TypeFloat64, Nullable: true, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "change_order_price", Type: field.TypeFloat64, Nullable: true, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "note", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "shingle_color", Type: field.TypeString, Nullable: true},
		{Name: "permit_required", Type: field.TypeBool, Nullable: true},
		{Name: "inspection_required", Type: field.TypeBool, Nullable: true},
		{Name: "inspection_date", Type: field.TypeTime, Nullable: true},
		{Name: "progress_inspection_date", Type: field.TypeTime, Nullable: true},
		{Name: "install_date", Type: field.TypeTime, Nullable: true},
		{Name: "completion_date", Type: field.TypeTime, Nullable: true},
		{Name: "material_delivery_date", Type: field.TypeTime, Nullable: true},
		{Name: "agree", Type: field.TypeBool, Nullable: true},
		{Name: "agree_at", Type: field.TypeTime, Nullable: true},
		{Name: "po_number", Type: field.TypeString, Nullable: true},
		{Name: "roofing_partner_assigned_at", Type: field.TypeTime, Nullable: true},
		{Name: "roofing_partner_flag_at", Type: field.TypeTime, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "estimate_pdf_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "estimate_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "home_owner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "epc_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "roofing_partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "integration_partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "epc_partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "requester_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "sales_rep_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// JobsTable holds the schema information for the "jobs" table.
	JobsTable = &schema.Table{
		Name:       "jobs",
		Columns:    JobsColumns,
		PrimaryKey: []*schema.Column{JobsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "jobs_api_users_created_jobs",
				Columns:    []*schema.Column{JobsColumns[27]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_documents_job_estimate_pdf",
				Columns:    []*schema.Column{JobsColumns[28]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_estimates_job_info",
				Columns:    []*schema.Column{JobsColumns[29]},
				RefColumns: []*schema.Column{EstimatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_home_owners_jobs",
				Columns:    []*schema.Column{JobsColumns[30]},
				RefColumns: []*schema.Column{HomeOwnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_option_list_epc",
				Columns:    []*schema.Column{JobsColumns[31]},
				RefColumns: []*schema.Column{OptionListColumns[0]},
				OnDelete:   schema.Restrict,
			},
			{
				Symbol:     "jobs_partners_roofing_jobs",
				Columns:    []*schema.Column{JobsColumns[32]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_partners_integration_jobs",
				Columns:    []*schema.Column{JobsColumns[33]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_partners_epc_jobs",
				Columns:    []*schema.Column{JobsColumns[34]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_partners_job_requests",
				Columns:    []*schema.Column{JobsColumns[35]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_users_created_jobs",
				Columns:    []*schema.Column{JobsColumns[36]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_users_sales",
				Columns:    []*schema.Column{JobsColumns[37]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "job_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "job_updated_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "job_progress",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[3]},
			},
			{
				Name:    "job_progress_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[4]},
			},
			{
				Name:    "job_progress_flag_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[5]},
			},
			{
				Name:    "job_region_id",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[6]},
			},
		},
	}
	// JobActivitiesColumns holds the columns for the "job_activities" table.
	JobActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
		{Name: "raw", Type: field.TypeJSON, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "job_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// JobActivitiesTable holds the schema information for the "job_activities" table.
	JobActivitiesTable = &schema.Table{
		Name:       "job_activities",
		Columns:    JobActivitiesColumns,
		PrimaryKey: []*schema.Column{JobActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_activities_api_users_job_activities",
				Columns:    []*schema.Column{JobActivitiesColumns[4]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "job_activities_jobs_activities",
				Columns:    []*schema.Column{JobActivitiesColumns[5]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "job_activities_users_job_activities",
				Columns:    []*schema.Column{JobActivitiesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "jobactivity_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobActivitiesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// JobAssignmentHistoryColumns holds the columns for the "job_assignment_history" table.
	JobAssignmentHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Assigned", "Accepted", "Rejected", "Expired"}, Default: "Assigned"},
		{Name: "note", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "job_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// JobAssignmentHistoryTable holds the schema information for the "job_assignment_history" table.
	JobAssignmentHistoryTable = &schema.Table{
		Name:       "job_assignment_history",
		Columns:    JobAssignmentHistoryColumns,
		PrimaryKey: []*schema.Column{JobAssignmentHistoryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_assignment_history_jobs_assignment_history",
				Columns:    []*schema.Column{JobAssignmentHistoryColumns[4]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "job_assignment_history_partners_job_assignment_history",
				Columns:    []*schema.Column{JobAssignmentHistoryColumns[5]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "jobassignmenthistory_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobAssignmentHistoryColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// JobDocUrLsColumns holds the columns for the "job_doc_ur_ls" table.
	JobDocUrLsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"InspectionDocs", "ProductionPics"}},
		{Name: "url", Type: field.TypeString},
		{Name: "job_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// JobDocUrLsTable holds the schema information for the "job_doc_ur_ls" table.
	JobDocUrLsTable = &schema.Table{
		Name:       "job_doc_ur_ls",
		Columns:    JobDocUrLsColumns,
		PrimaryKey: []*schema.Column{JobDocUrLsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_doc_ur_ls_jobs_doc_urls",
				Columns:    []*schema.Column{JobDocUrLsColumns[5]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "job_doc_ur_ls_users_job_doc_urls",
				Columns:    []*schema.Column{JobDocUrLsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "jobdocurl_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobDocUrLsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "jobdocurl_updated_at",
				Unique:  false,
				Columns: []*schema.Column{JobDocUrLsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// JobNotesColumns holds the columns for the "job_notes" table.
	JobNotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "note", Type: field.TypeString, Size: 500},
		{Name: "job_id", Type: field.TypeString, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// JobNotesTable holds the schema information for the "job_notes" table.
	JobNotesTable = &schema.Table{
		Name:       "job_notes",
		Columns:    JobNotesColumns,
		PrimaryKey: []*schema.Column{JobNotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_notes_jobs_notes",
				Columns:    []*schema.Column{JobNotesColumns[4]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "job_notes_partners_job_notes",
				Columns:    []*schema.Column{JobNotesColumns[5]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "job_notes_users_job_notes",
				Columns:    []*schema.Column{JobNotesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "jobnote_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobNotesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "jobnote_updated_at",
				Unique:  false,
				Columns: []*schema.Column{JobNotesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// JobProgressHistoryColumns holds the columns for the "job_progress_history" table.
	JobProgressHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"New", "CustomerContacted", "JobDetailsConfirmed", "Permitting", "Delayed", "Scheduled", "InProgress", "Installed", "Invoiced", "InvoiceApproved", "InvoicePaid"}},
		{Name: "complete", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "note", Type: field.TypeString, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "job_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// JobProgressHistoryTable holds the schema information for the "job_progress_history" table.
	JobProgressHistoryTable = &schema.Table{
		Name:       "job_progress_history",
		Columns:    JobProgressHistoryColumns,
		PrimaryKey: []*schema.Column{JobProgressHistoryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_progress_history_api_users_job_progress_history",
				Columns:    []*schema.Column{JobProgressHistoryColumns[5]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "job_progress_history_jobs_progress_history",
				Columns:    []*schema.Column{JobProgressHistoryColumns[6]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "job_progress_history_users_job_progress_history",
				Columns:    []*schema.Column{JobProgressHistoryColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "jobprogresshistory_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobProgressHistoryColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// NotifySettingsColumns holds the columns for the "notify_settings" table.
	NotifySettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "topic_id", Type: field.TypeString, Size: 36},
		{Name: "receive_email", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "receive_sms", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// NotifySettingsTable holds the schema information for the "notify_settings" table.
	NotifySettingsTable = &schema.Table{
		Name:       "notify_settings",
		Columns:    NotifySettingsColumns,
		PrimaryKey: []*schema.Column{NotifySettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notify_settings_users_notify",
				Columns:    []*schema.Column{NotifySettingsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "notifysetting_created_at",
				Unique:  false,
				Columns: []*schema.Column{NotifySettingsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "notifysetting_topic_id",
				Unique:  false,
				Columns: []*schema.Column{NotifySettingsColumns[2]},
			},
		},
	}
	// OptionListColumns holds the columns for the "option_list" table.
	OptionListColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"FINANCE", "EPC"}},
		{Name: "name", Type: field.TypeString, Size: 60},
		{Name: "display_name", Type: field.TypeString, Size: 60},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "order", Type: field.TypeInt},
	}
	// OptionListTable holds the schema information for the "option_list" table.
	OptionListTable = &schema.Table{
		Name:       "option_list",
		Columns:    OptionListColumns,
		PrimaryKey: []*schema.Column{OptionListColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "optionlist_created_at",
				Unique:  false,
				Columns: []*schema.Column{OptionListColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "optionlist_updated_at",
				Unique:  false,
				Columns: []*schema.Column{OptionListColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// PartnersColumns holds the columns for the "partners" table.
	PartnersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "external_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"NONE", "RFX", "ROOFING", "SOLAR", "EPC", "INTEGRATION", "LENDER"}},
		{Name: "name", Type: field.TypeString, Size: 100, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "latitude", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(10,8)"}},
		{Name: "longitude", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(11,8)"}},
		{Name: "is_nation_wide", Type: field.TypeBool, Default: false},
		{Name: "crew_count", Type: field.TypeUint16, Default: 0},
		{Name: "years_in_business", Type: field.TypeInt, Nullable: true},
		{Name: "job_capacity", Type: field.TypeUint16, Default: 0},
		{Name: "asphalt_lead_t", Type: field.TypeString, Nullable: true},
		{Name: "metal_lead_t", Type: field.TypeString, Nullable: true},
		{Name: "tile_lead_t", Type: field.TypeString, Nullable: true},
		{Name: "setup_steps_completed", Type: field.TypeUint8, Default: 1},
		{Name: "sales_volume", Type: field.TypeInt, Nullable: true},
		{Name: "down_payment", Type: field.TypeInt, Nullable: true},
		{Name: "pif", Type: field.TypeInt, Nullable: true},
		{Name: "install_in_house", Type: field.TypeBool, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Active", "InActive", "Onboarding", "OnboardingDone"}, Default: "InActive"},
		{Name: "epc_status", Type: field.TypeEnum, Nullable: true, Enums: []string{"None", "Dealer", "MultipleDealers", "VerticallyIntegrated"}},
		{Name: "mobile_app_settings", Type: field.TypeJSON, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PartnersTable holds the schema information for the "partners" table.
	PartnersTable = &schema.Table{
		Name:       "partners",
		Columns:    PartnersColumns,
		PrimaryKey: []*schema.Column{PartnersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partners_api_users_created_partners",
				Columns:    []*schema.Column{PartnersColumns[26]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "partners_users_creator",
				Columns:    []*schema.Column{PartnersColumns[27]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partner_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnersColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partner_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PartnersColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partner_external_id",
				Unique:  false,
				Columns: []*schema.Column{PartnersColumns[3]},
			},
			{
				Name:    "partner_name",
				Unique:  false,
				Columns: []*schema.Column{PartnersColumns[5]},
			},
			{
				Name:    "partner_type",
				Unique:  false,
				Columns: []*schema.Column{PartnersColumns[4]},
			},
			{
				Name:    "partner_status",
				Unique:  false,
				Columns: []*schema.Column{PartnersColumns[23]},
			},
		},
	}
	// PartnerActivitiesColumns holds the columns for the "partner_activities" table.
	PartnerActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
		{Name: "raw", Type: field.TypeJSON, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PartnerActivitiesTable holds the schema information for the "partner_activities" table.
	PartnerActivitiesTable = &schema.Table{
		Name:       "partner_activities",
		Columns:    PartnerActivitiesColumns,
		PrimaryKey: []*schema.Column{PartnerActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_activities_api_users_partner_activities",
				Columns:    []*schema.Column{PartnerActivitiesColumns[4]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "partner_activities_partners_activities",
				Columns:    []*schema.Column{PartnerActivitiesColumns[5]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "partner_activities_users_partner_activities",
				Columns:    []*schema.Column{PartnerActivitiesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partneractivity_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerActivitiesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// PartnerContactsColumns holds the columns for the "partner_contacts" table.
	PartnerContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"NONE", "ADMIN", "SALES_REP"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"PRIMARY", "OPERATIONS", "APPROVAL", "ACCOUNTING", "INVOICING", "CUSTOMER_SERVICE", "CUSTOM"}},
		{Name: "title", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 250},
		{Name: "invoicing_email", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
	}
	// PartnerContactsTable holds the schema information for the "partner_contacts" table.
	PartnerContactsTable = &schema.Table{
		Name:       "partner_contacts",
		Columns:    PartnerContactsColumns,
		PrimaryKey: []*schema.Column{PartnerContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_contacts_users_user",
				Columns:    []*schema.Column{PartnerContactsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "partner_contacts_partners_partner",
				Columns:    []*schema.Column{PartnerContactsColumns[9]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnercontact_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerContactsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnercontact_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerContactsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnercontact_type",
				Unique:  false,
				Columns: []*schema.Column{PartnerContactsColumns[4]},
			},
			{
				Name:    "partnercontact_partner_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{PartnerContactsColumns[9], PartnerContactsColumns[8]},
			},
		},
	}
	// PartnerServicesColumns holds the columns for the "partner_services" table.
	PartnerServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "service_id", Type: field.TypeUint8},
		{Name: "active", Type: field.TypeBool},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
	}
	// PartnerServicesTable holds the schema information for the "partner_services" table.
	PartnerServicesTable = &schema.Table{
		Name:       "partner_services",
		Columns:    PartnerServicesColumns,
		PrimaryKey: []*schema.Column{PartnerServicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_services_partners_services",
				Columns:    []*schema.Column{PartnerServicesColumns[5]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnerservice_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerServicesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnerservice_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerServicesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnerservice_service_id",
				Unique:  false,
				Columns: []*schema.Column{PartnerServicesColumns[3]},
			},
			{
				Name:    "partnerservice_active",
				Unique:  false,
				Columns: []*schema.Column{PartnerServicesColumns[4]},
			},
		},
	}
	// PartnerServiceCitiesColumns holds the columns for the "partner_service_cities" table.
	PartnerServiceCitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "postal_id", Type: field.TypeString, Size: 36},
		{Name: "active", Type: field.TypeBool, Default: false},
		{Name: "name", Type: field.TypeString, Size: 50},
		{Name: "naics_code", Type: field.TypeUint},
		{Name: "license_no", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "proof_doc_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
	}
	// PartnerServiceCitiesTable holds the schema information for the "partner_service_cities" table.
	PartnerServiceCitiesTable = &schema.Table{
		Name:       "partner_service_cities",
		Columns:    PartnerServiceCitiesColumns,
		PrimaryKey: []*schema.Column{PartnerServiceCitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_service_cities_partners_service_cities",
				Columns:    []*schema.Column{PartnerServiceCitiesColumns[9]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnerservicecity_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceCitiesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnerservicecity_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceCitiesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnerservicecity_postal_id",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceCitiesColumns[3]},
			},
		},
	}
	// PartnerServiceStatesColumns holds the columns for the "partner_service_states" table.
	PartnerServiceStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "country", Type: field.TypeString, Size: 20},
		{Name: "state", Type: field.TypeString, Size: 50},
		{Name: "license_no", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "license_exp_date", Type: field.TypeTime, Nullable: true},
		{Name: "proof_doc_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
	}
	// PartnerServiceStatesTable holds the schema information for the "partner_service_states" table.
	PartnerServiceStatesTable = &schema.Table{
		Name:       "partner_service_states",
		Columns:    PartnerServiceStatesColumns,
		PrimaryKey: []*schema.Column{PartnerServiceStatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_service_states_partners_service_states",
				Columns:    []*schema.Column{PartnerServiceStatesColumns[8]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnerservicestate_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceStatesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnerservicestate_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceStatesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnerservicestate_country",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceStatesColumns[3]},
			},
			{
				Name:    "partnerservicestate_state",
				Unique:  false,
				Columns: []*schema.Column{PartnerServiceStatesColumns[4]},
			},
		},
	}
	// PartnerTrainingVideosColumns holds the columns for the "partner_training_videos" table.
	PartnerTrainingVideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
		{Name: "video_id", Type: field.TypeString, Size: 36},
	}
	// PartnerTrainingVideosTable holds the schema information for the "partner_training_videos" table.
	PartnerTrainingVideosTable = &schema.Table{
		Name:       "partner_training_videos",
		Columns:    PartnerTrainingVideosColumns,
		PrimaryKey: []*schema.Column{PartnerTrainingVideosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_training_videos_partners_training_videos",
				Columns:    []*schema.Column{PartnerTrainingVideosColumns[4]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "partner_training_videos_training_videos_training_videos",
				Columns:    []*schema.Column{PartnerTrainingVideosColumns[5]},
				RefColumns: []*schema.Column{TrainingVideosColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnertrainingvideo_created_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerTrainingVideosColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "partnertrainingvideo_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PartnerTrainingVideosColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// PaymentsColumns holds the columns for the "payments" table.
	PaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "amount", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "status_id", Type: field.TypeUint8, Default: 0},
		{Name: "job_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PaymentsTable holds the schema information for the "payments" table.
	PaymentsTable = &schema.Table{
		Name:       "payments",
		Columns:    PaymentsColumns,
		PrimaryKey: []*schema.Column{PaymentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payments_jobs_payments",
				Columns:    []*schema.Column{PaymentsColumns[5]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "payment_created_at",
				Unique:  false,
				Columns: []*schema.Column{PaymentsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "payment_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PaymentsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// PostalCodesColumns holds the columns for the "postal_codes" table.
	PostalCodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "country", Type: field.TypeString, Size: 20, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "code", Type: field.TypeString, Size: 12},
		{Name: "city", Type: field.TypeString, Size: 50},
		{Name: "state", Type: field.TypeString, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "state_abr", Type: field.TypeString, Size: 5, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "region_id", Type: field.TypeUint8},
		{Name: "latitude", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10,8)"}},
		{Name: "longitude", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(11,8)"}},
		{Name: "accuracy", Type: field.TypeUint8},
		{Name: "service_area", Type: field.TypeBool, Default: false},
	}
	// PostalCodesTable holds the schema information for the "postal_codes" table.
	PostalCodesTable = &schema.Table{
		Name:       "postal_codes",
		Columns:    PostalCodesColumns,
		PrimaryKey: []*schema.Column{PostalCodesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "postalcode_created_at",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "postalcode_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "postalcode_country",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[3]},
			},
			{
				Name:    "postalcode_code",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[4]},
			},
			{
				Name:    "postalcode_state",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[6]},
			},
			{
				Name:    "postalcode_state_abr",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[7]},
			},
			{
				Name:    "postalcode_region_id",
				Unique:  false,
				Columns: []*schema.Column{PostalCodesColumns[8]},
			},
		},
	}
	// PricingColumns holds the columns for the "pricing" table.
	PricingColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "postal_country", Type: field.TypeString, Size: 20},
		{Name: "postal_code", Type: field.TypeString, Size: 20},
		{Name: "product_id", Type: field.TypeUint8},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
		{Name: "price_per", Type: field.TypeString, Size: 20},
		{Name: "postal_id", Type: field.TypeString, Size: 36},
	}
	// PricingTable holds the schema information for the "pricing" table.
	PricingTable = &schema.Table{
		Name:       "pricing",
		Columns:    PricingColumns,
		PrimaryKey: []*schema.Column{PricingColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pricing_postal_codes_pricing",
				Columns:    []*schema.Column{PricingColumns[9]},
				RefColumns: []*schema.Column{PostalCodesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "pricing_created_at",
				Unique:  false,
				Columns: []*schema.Column{PricingColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "pricing_updated_at",
				Unique:  false,
				Columns: []*schema.Column{PricingColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "pricing_postal_country",
				Unique:  false,
				Columns: []*schema.Column{PricingColumns[3]},
			},
			{
				Name:    "pricing_postal_code",
				Unique:  false,
				Columns: []*schema.Column{PricingColumns[4]},
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"HVAC", "SMART_HOME"}},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "description", Type: field.TypeString, Size: 500},
		{Name: "features", Type: field.TypeJSON},
		{Name: "special_note", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "unit_price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "units_in_stock", Type: field.TypeInt, Nullable: true, Default: 0},
		{Name: "units_on_order", Type: field.TypeInt, Nullable: true, Default: 0},
		{Name: "discontinued", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "image_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Size: 36},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_documents_products_image",
				Columns:    []*schema.Column{ProductsColumns[12]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "products_users_products_created",
				Columns:    []*schema.Column{ProductsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "product_created_at",
				Unique:  false,
				Columns: []*schema.Column{ProductsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "product_updated_at",
				Unique:  false,
				Columns: []*schema.Column{ProductsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "product_type",
				Unique:  false,
				Columns: []*schema.Column{ProductsColumns[3]},
			},
			{
				Name:    "product_name",
				Unique:  false,
				Columns: []*schema.Column{ProductsColumns[4]},
			},
			{
				Name:    "product_discontinued",
				Unique:  false,
				Columns: []*schema.Column{ProductsColumns[11]},
			},
		},
	}
	// ProductPackagesColumns holds the columns for the "product_packages" table.
	ProductPackagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"HVAC", "SMART_HOME"}},
		{Name: "sold_as", Type: field.TypeEnum, Enums: []string{"PACKAGE", "INDIVIDUAL_ITEM"}},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "description", Type: field.TypeString, Size: 500},
		{Name: "features", Type: field.TypeJSON},
		{Name: "price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10,2)"}},
		{Name: "discontinued", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "creator_id", Type: field.TypeString, Size: 36},
	}
	// ProductPackagesTable holds the schema information for the "product_packages" table.
	ProductPackagesTable = &schema.Table{
		Name:       "product_packages",
		Columns:    ProductPackagesColumns,
		PrimaryKey: []*schema.Column{ProductPackagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_packages_users_product_pkg_created",
				Columns:    []*schema.Column{ProductPackagesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "productpackage_created_at",
				Unique:  false,
				Columns: []*schema.Column{ProductPackagesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "productpackage_updated_at",
				Unique:  false,
				Columns: []*schema.Column{ProductPackagesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "productpackage_type",
				Unique:  false,
				Columns: []*schema.Column{ProductPackagesColumns[3]},
			},
			{
				Name:    "productpackage_name",
				Unique:  false,
				Columns: []*schema.Column{ProductPackagesColumns[5]},
			},
			{
				Name:    "productpackage_discontinued",
				Unique:  false,
				Columns: []*schema.Column{ProductPackagesColumns[9]},
			},
		},
	}
	// SurveysColumns holds the columns for the "surveys" table.
	SurveysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "date", Type: field.TypeString, Size: 10},
		{Name: "slot", Type: field.TypeString, Size: 10},
		{Name: "slot_id", Type: field.TypeString, Size: 36},
		{Name: "from", Type: field.TypeTime},
		{Name: "to", Type: field.TypeTime},
		{Name: "until", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "address", Type: field.TypeString, Nullable: true, Size: 200},
		{Name: "phone", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"REQUESTING", "REQUESTED"}},
		{Name: "progress", Type: field.TypeEnum, Nullable: true, Enums: []string{"SCHEDULED", "EN_ROUTE", "ON_SITE", "COMPLETED", "DOCS_UPLOADED"}},
		{Name: "progress_at", Type: field.TypeTime, Nullable: true},
		{Name: "progress_flag_at", Type: field.TypeTime, Nullable: true},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// SurveysTable holds the schema information for the "surveys" table.
	SurveysTable = &schema.Table{
		Name:       "surveys",
		Columns:    SurveysColumns,
		PrimaryKey: []*schema.Column{SurveysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "surveys_partners_surveys",
				Columns:    []*schema.Column{SurveysColumns[17]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "surveys_users_surveys",
				Columns:    []*schema.Column{SurveysColumns[18]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "survey_created_at",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "survey_updated_at",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "survey_date",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[3]},
			},
			{
				Name:    "survey_slot_id",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[5]},
			},
			{
				Name:    "survey_from",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[6]},
			},
			{
				Name:    "survey_to",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[7]},
			},
			{
				Name:    "survey_name",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[9]},
			},
			{
				Name:    "survey_address",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[10]},
			},
			{
				Name:    "survey_phone",
				Unique:  false,
				Columns: []*schema.Column{SurveysColumns[11]},
			},
		},
	}
	// SurveyProgressColumns holds the columns for the "survey_progress" table.
	SurveyProgressColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"SCHEDULED", "EN_ROUTE", "ON_SITE", "COMPLETED", "DOCS_UPLOADED"}},
		{Name: "complete", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "note", Type: field.TypeString, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "survey_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// SurveyProgressTable holds the schema information for the "survey_progress" table.
	SurveyProgressTable = &schema.Table{
		Name:       "survey_progress",
		Columns:    SurveyProgressColumns,
		PrimaryKey: []*schema.Column{SurveyProgressColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "survey_progress_api_users_survey_progress",
				Columns:    []*schema.Column{SurveyProgressColumns[5]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "survey_progress_surveys_progress_history",
				Columns:    []*schema.Column{SurveyProgressColumns[6]},
				RefColumns: []*schema.Column{SurveysColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "survey_progress_users_survey_progress",
				Columns:    []*schema.Column{SurveyProgressColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "surveyprogress_created_at",
				Unique:  false,
				Columns: []*schema.Column{SurveyProgressColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "confirmed_at", Type: field.TypeTime, Nullable: true},
		{Name: "action", Type: field.TypeString, Size: 50},
		{Name: "data", Type: field.TypeJSON, Nullable: true},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
	}
	// TrainingCoursesColumns holds the columns for the "training_courses" table.
	TrainingCoursesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 100, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// TrainingCoursesTable holds the schema information for the "training_courses" table.
	TrainingCoursesTable = &schema.Table{
		Name:       "training_courses",
		Columns:    TrainingCoursesColumns,
		PrimaryKey: []*schema.Column{TrainingCoursesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "training_courses_users_created_training_courses",
				Columns:    []*schema.Column{TrainingCoursesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "trainingcourse_created_at",
				Unique:  false,
				Columns: []*schema.Column{TrainingCoursesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "trainingcourse_updated_at",
				Unique:  false,
				Columns: []*schema.Column{TrainingCoursesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// TrainingVideosColumns holds the columns for the "training_videos" table.
	TrainingVideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"ROOFING", "SOLAR", "SITE_SURVEY"}},
		{Name: "title", Type: field.TypeString, Size: 100, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "description", Type: field.TypeString, Size: 500},
		{Name: "video_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "poster_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "course_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// TrainingVideosTable holds the schema information for the "training_videos" table.
	TrainingVideosTable = &schema.Table{
		Name:       "training_videos",
		Columns:    TrainingVideosColumns,
		PrimaryKey: []*schema.Column{TrainingVideosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "training_videos_documents_training_video",
				Columns:    []*schema.Column{TrainingVideosColumns[6]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "training_videos_documents_training_video_poster",
				Columns:    []*schema.Column{TrainingVideosColumns[7]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "training_videos_training_courses_training_videos",
				Columns:    []*schema.Column{TrainingVideosColumns[8]},
				RefColumns: []*schema.Column{TrainingCoursesColumns[0]},
				OnDelete:   schema.Restrict,
			},
			{
				Symbol:     "training_videos_users_created_training_videos",
				Columns:    []*schema.Column{TrainingVideosColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "trainingvideo_created_at",
				Unique:  false,
				Columns: []*schema.Column{TrainingVideosColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "trainingvideo_updated_at",
				Unique:  false,
				Columns: []*schema.Column{TrainingVideosColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "trainingvideo_kind",
				Unique:  false,
				Columns: []*schema.Column{TrainingVideosColumns[3]},
			},
			{
				Name:    "trainingvideo_title",
				Unique:  false,
				Columns: []*schema.Column{TrainingVideosColumns[4]},
			},
			{
				Name:    "trainingvideo_description",
				Unique:  false,
				Columns: []*schema.Column{TrainingVideosColumns[5]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "external_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "email", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "phone", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "pwd", Type: field.TypeString, Size: 150},
		{Name: "first_name", Type: field.TypeString, Nullable: true, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "last_name", Type: field.TypeString, Nullable: true, Size: 50, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "email_verified", Type: field.TypeBool, Default: false},
		{Name: "phone_verified", Type: field.TypeBool, Default: false},
		{Name: "picture", Type: field.TypeString, Nullable: true, Size: 250},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "ACTIVE", "DISABLED"}, Default: "PENDING"},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "SUB_ADMIN", "ESTIMATOR", "REVIEWER", "SITE_USER"}, Default: "SITE_USER"},
		{Name: "note", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "wrong_attempts", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "wrong_attempt_at", Type: field.TypeTime, Nullable: true},
		{Name: "locked_until", Type: field.TypeTime, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "accepted_general_terms", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "accepted_terms_n_privacy", Type: field.TypeBool, Nullable: true, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_created_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "user_updated_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[3]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "user_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "user_external_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
			{
				Name:    "user_first_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[8]},
			},
			{
				Name:    "user_last_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[9]},
			},
			{
				Name:    "user_phone",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[6]},
			},
			{
				Name:    "user_role",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[14]},
			},
			{
				Name:    "user_status",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[13]},
			},
		},
	}
	// UserActivitiesColumns holds the columns for the "user_activities" table.
	UserActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
		{Name: "raw", Type: field.TypeJSON, Nullable: true},
		{Name: "api_user_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "creator_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// UserActivitiesTable holds the schema information for the "user_activities" table.
	UserActivitiesTable = &schema.Table{
		Name:       "user_activities",
		Columns:    UserActivitiesColumns,
		PrimaryKey: []*schema.Column{UserActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_activities_api_users_user_activities",
				Columns:    []*schema.Column{UserActivitiesColumns[4]},
				RefColumns: []*schema.Column{APIUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_activities_users_user_activities",
				Columns:    []*schema.Column{UserActivitiesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_activities_users_activities",
				Columns:    []*schema.Column{UserActivitiesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "useractivity_created_at",
				Unique:  false,
				Columns: []*schema.Column{UserActivitiesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// UserAuthsColumns holds the columns for the "user_auths" table.
	UserAuthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 150},
		{Name: "provider_id", Type: field.TypeUint8, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeString, Unique: true, Size: 36},
	}
	// UserAuthsTable holds the schema information for the "user_auths" table.
	UserAuthsTable = &schema.Table{
		Name:       "user_auths",
		Columns:    UserAuthsColumns,
		PrimaryKey: []*schema.Column{UserAuthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_auths_users_auths",
				Columns:    []*schema.Column{UserAuthsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSessionsColumns holds the columns for the "user_sessions" table.
	UserSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "ip", Type: field.TypeString, Size: 50},
		{Name: "partner_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "partner_contact_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// UserSessionsTable holds the schema information for the "user_sessions" table.
	UserSessionsTable = &schema.Table{
		Name:       "user_sessions",
		Columns:    UserSessionsColumns,
		PrimaryKey: []*schema.Column{UserSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_sessions_partners_sessions",
				Columns:    []*schema.Column{UserSessionsColumns[5]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_sessions_partner_contacts_sessions",
				Columns:    []*schema.Column{UserSessionsColumns[6]},
				RefColumns: []*schema.Column{PartnerContactsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_sessions_users_sessions",
				Columns:    []*schema.Column{UserSessionsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usersession_created_at",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "usersession_updated_at",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "usersession_expires_at",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[3]},
			},
		},
	}
	// UserSessionSocketsColumns holds the columns for the "user_session_sockets" table.
	UserSessionSocketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "sessions_id", Type: field.TypeString, Size: 36},
	}
	// UserSessionSocketsTable holds the schema information for the "user_session_sockets" table.
	UserSessionSocketsTable = &schema.Table{
		Name:       "user_session_sockets",
		Columns:    UserSessionSocketsColumns,
		PrimaryKey: []*schema.Column{UserSessionSocketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_session_sockets_user_sessions_sockets",
				Columns:    []*schema.Column{UserSessionSocketsColumns[3]},
				RefColumns: []*schema.Column{UserSessionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usersessionsocket_created_at",
				Unique:  false,
				Columns: []*schema.Column{UserSessionSocketsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
			{
				Name:    "usersessionsocket_updated_at",
				Unique:  false,
				Columns: []*schema.Column{UserSessionSocketsColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Desc: true,
				},
			},
		},
	}
	// PartnerFinanceOptionsColumns holds the columns for the "partner_finance_options" table.
	PartnerFinanceOptionsColumns = []*schema.Column{
		{Name: "option_id", Type: field.TypeString, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
	}
	// PartnerFinanceOptionsTable holds the schema information for the "partner_finance_options" table.
	PartnerFinanceOptionsTable = &schema.Table{
		Name:       "partner_finance_options",
		Columns:    PartnerFinanceOptionsColumns,
		PrimaryKey: []*schema.Column{PartnerFinanceOptionsColumns[0], PartnerFinanceOptionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_finance_options_option_id",
				Columns:    []*schema.Column{PartnerFinanceOptionsColumns[0]},
				RefColumns: []*schema.Column{OptionListColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "partner_finance_options_partner_id",
				Columns:    []*schema.Column{PartnerFinanceOptionsColumns[1]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PartnerEpcOptionsColumns holds the columns for the "partner_epc_options" table.
	PartnerEpcOptionsColumns = []*schema.Column{
		{Name: "option_id", Type: field.TypeString, Size: 36},
		{Name: "partner_id", Type: field.TypeString, Size: 36},
	}
	// PartnerEpcOptionsTable holds the schema information for the "partner_epc_options" table.
	PartnerEpcOptionsTable = &schema.Table{
		Name:       "partner_epc_options",
		Columns:    PartnerEpcOptionsColumns,
		PrimaryKey: []*schema.Column{PartnerEpcOptionsColumns[0], PartnerEpcOptionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_epc_options_option_id",
				Columns:    []*schema.Column{PartnerEpcOptionsColumns[0]},
				RefColumns: []*schema.Column{OptionListColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "partner_epc_options_partner_id",
				Columns:    []*schema.Column{PartnerEpcOptionsColumns[1]},
				RefColumns: []*schema.Column{PartnersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProductPackageItemsColumns holds the columns for the "product_package_items" table.
	ProductPackageItemsColumns = []*schema.Column{
		{Name: "package_id", Type: field.TypeString, Size: 36},
		{Name: "product_id", Type: field.TypeString, Size: 36},
	}
	// ProductPackageItemsTable holds the schema information for the "product_package_items" table.
	ProductPackageItemsTable = &schema.Table{
		Name:       "product_package_items",
		Columns:    ProductPackageItemsColumns,
		PrimaryKey: []*schema.Column{ProductPackageItemsColumns[0], ProductPackageItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_package_items_package_id",
				Columns:    []*schema.Column{ProductPackageItemsColumns[0]},
				RefColumns: []*schema.Column{ProductPackagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "product_package_items_product_id",
				Columns:    []*schema.Column{ProductPackageItemsColumns[1]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIAccessesTable,
		APIUsersTable,
		APIUserTokensTable,
		AuditLogsTable,
		ChannelsTable,
		ChannelMessagesTable,
		ChannelMessageReadsTable,
		ChannelSubsTable,
		ContactUsTable,
		DocumentsTable,
		EstimatesTable,
		EstimateActivitiesTable,
		HomeOwnersTable,
		InstallationJobsTable,
		InstallationJobItemsTable,
		InstallationJobProgressTable,
		JobsTable,
		JobActivitiesTable,
		JobAssignmentHistoryTable,
		JobDocUrLsTable,
		JobNotesTable,
		JobProgressHistoryTable,
		NotifySettingsTable,
		OptionListTable,
		PartnersTable,
		PartnerActivitiesTable,
		PartnerContactsTable,
		PartnerServicesTable,
		PartnerServiceCitiesTable,
		PartnerServiceStatesTable,
		PartnerTrainingVideosTable,
		PaymentsTable,
		PostalCodesTable,
		PricingTable,
		ProductsTable,
		ProductPackagesTable,
		SurveysTable,
		SurveyProgressTable,
		TokensTable,
		TrainingCoursesTable,
		TrainingVideosTable,
		UsersTable,
		UserActivitiesTable,
		UserAuthsTable,
		UserSessionsTable,
		UserSessionSocketsTable,
		PartnerFinanceOptionsTable,
		PartnerEpcOptionsTable,
		ProductPackageItemsTable,
	}
)

func init() {
	APIUserTokensTable.ForeignKeys[0].RefTable = APIUsersTable
	AuditLogsTable.ForeignKeys[0].RefTable = APIUsersTable
	AuditLogsTable.ForeignKeys[1].RefTable = UsersTable
	ChannelMessagesTable.ForeignKeys[0].RefTable = APIUsersTable
	ChannelMessagesTable.ForeignKeys[1].RefTable = ChannelsTable
	ChannelMessagesTable.ForeignKeys[2].RefTable = UsersTable
	ChannelMessagesTable.ForeignKeys[3].RefTable = UsersTable
	ChannelMessageReadsTable.ForeignKeys[0].RefTable = ChannelMessagesTable
	ChannelMessageReadsTable.ForeignKeys[1].RefTable = UsersTable
	ChannelSubsTable.ForeignKeys[0].RefTable = ChannelsTable
	ChannelSubsTable.ForeignKeys[1].RefTable = PartnersTable
	ChannelSubsTable.ForeignKeys[2].RefTable = UsersTable
	ContactUsTable.ForeignKeys[0].RefTable = PartnersTable
	ContactUsTable.ForeignKeys[1].RefTable = UsersTable
	DocumentsTable.ForeignKeys[0].RefTable = InstallationJobItemsTable
	EstimatesTable.ForeignKeys[0].RefTable = APIUsersTable
	EstimatesTable.ForeignKeys[1].RefTable = DocumentsTable
	EstimatesTable.ForeignKeys[2].RefTable = HomeOwnersTable
	EstimatesTable.ForeignKeys[3].RefTable = PartnersTable
	EstimatesTable.ForeignKeys[4].RefTable = UsersTable
	EstimatesTable.ForeignKeys[5].RefTable = UsersTable
	EstimateActivitiesTable.ForeignKeys[0].RefTable = APIUsersTable
	EstimateActivitiesTable.ForeignKeys[1].RefTable = EstimatesTable
	EstimateActivitiesTable.ForeignKeys[2].RefTable = UsersTable
	HomeOwnersTable.ForeignKeys[0].RefTable = PartnersTable
	InstallationJobsTable.ForeignKeys[0].RefTable = PartnersTable
	InstallationJobsTable.ForeignKeys[1].RefTable = PartnersTable
	InstallationJobsTable.ForeignKeys[2].RefTable = UsersTable
	InstallationJobsTable.ForeignKeys[3].RefTable = UsersTable
	InstallationJobItemsTable.ForeignKeys[0].RefTable = InstallationJobsTable
	InstallationJobProgressTable.ForeignKeys[0].RefTable = InstallationJobsTable
	InstallationJobProgressTable.ForeignKeys[1].RefTable = UsersTable
	InstallationJobProgressTable.Annotation = &entsql.Annotation{
		Table: "installation_job_progress",
	}
	JobsTable.ForeignKeys[0].RefTable = APIUsersTable
	JobsTable.ForeignKeys[1].RefTable = DocumentsTable
	JobsTable.ForeignKeys[2].RefTable = EstimatesTable
	JobsTable.ForeignKeys[3].RefTable = HomeOwnersTable
	JobsTable.ForeignKeys[4].RefTable = OptionListTable
	JobsTable.ForeignKeys[5].RefTable = PartnersTable
	JobsTable.ForeignKeys[6].RefTable = PartnersTable
	JobsTable.ForeignKeys[7].RefTable = PartnersTable
	JobsTable.ForeignKeys[8].RefTable = PartnersTable
	JobsTable.ForeignKeys[9].RefTable = UsersTable
	JobsTable.ForeignKeys[10].RefTable = UsersTable
	JobActivitiesTable.ForeignKeys[0].RefTable = APIUsersTable
	JobActivitiesTable.ForeignKeys[1].RefTable = JobsTable
	JobActivitiesTable.ForeignKeys[2].RefTable = UsersTable
	JobAssignmentHistoryTable.ForeignKeys[0].RefTable = JobsTable
	JobAssignmentHistoryTable.ForeignKeys[1].RefTable = PartnersTable
	JobAssignmentHistoryTable.Annotation = &entsql.Annotation{
		Table: "job_assignment_history",
	}
	JobDocUrLsTable.ForeignKeys[0].RefTable = JobsTable
	JobDocUrLsTable.ForeignKeys[1].RefTable = UsersTable
	JobNotesTable.ForeignKeys[0].RefTable = JobsTable
	JobNotesTable.ForeignKeys[1].RefTable = PartnersTable
	JobNotesTable.ForeignKeys[2].RefTable = UsersTable
	JobProgressHistoryTable.ForeignKeys[0].RefTable = APIUsersTable
	JobProgressHistoryTable.ForeignKeys[1].RefTable = JobsTable
	JobProgressHistoryTable.ForeignKeys[2].RefTable = UsersTable
	JobProgressHistoryTable.Annotation = &entsql.Annotation{
		Table: "job_progress_history",
	}
	NotifySettingsTable.ForeignKeys[0].RefTable = UsersTable
	OptionListTable.Annotation = &entsql.Annotation{
		Table: "option_list",
	}
	PartnersTable.ForeignKeys[0].RefTable = APIUsersTable
	PartnersTable.ForeignKeys[1].RefTable = UsersTable
	PartnerActivitiesTable.ForeignKeys[0].RefTable = APIUsersTable
	PartnerActivitiesTable.ForeignKeys[1].RefTable = PartnersTable
	PartnerActivitiesTable.ForeignKeys[2].RefTable = UsersTable
	PartnerContactsTable.ForeignKeys[0].RefTable = UsersTable
	PartnerContactsTable.ForeignKeys[1].RefTable = PartnersTable
	PartnerServicesTable.ForeignKeys[0].RefTable = PartnersTable
	PartnerServiceCitiesTable.ForeignKeys[0].RefTable = PartnersTable
	PartnerServiceStatesTable.ForeignKeys[0].RefTable = PartnersTable
	PartnerTrainingVideosTable.ForeignKeys[0].RefTable = PartnersTable
	PartnerTrainingVideosTable.ForeignKeys[1].RefTable = TrainingVideosTable
	PaymentsTable.ForeignKeys[0].RefTable = JobsTable
	PricingTable.ForeignKeys[0].RefTable = PostalCodesTable
	PricingTable.Annotation = &entsql.Annotation{
		Table: "pricing",
	}
	ProductsTable.ForeignKeys[0].RefTable = DocumentsTable
	ProductsTable.ForeignKeys[1].RefTable = UsersTable
	ProductPackagesTable.ForeignKeys[0].RefTable = UsersTable
	SurveysTable.ForeignKeys[0].RefTable = PartnersTable
	SurveysTable.ForeignKeys[1].RefTable = UsersTable
	SurveyProgressTable.ForeignKeys[0].RefTable = APIUsersTable
	SurveyProgressTable.ForeignKeys[1].RefTable = SurveysTable
	SurveyProgressTable.ForeignKeys[2].RefTable = UsersTable
	SurveyProgressTable.Annotation = &entsql.Annotation{
		Table: "survey_progress",
	}
	TrainingCoursesTable.ForeignKeys[0].RefTable = UsersTable
	TrainingVideosTable.ForeignKeys[0].RefTable = DocumentsTable
	TrainingVideosTable.ForeignKeys[1].RefTable = DocumentsTable
	TrainingVideosTable.ForeignKeys[2].RefTable = TrainingCoursesTable
	TrainingVideosTable.ForeignKeys[3].RefTable = UsersTable
	UserActivitiesTable.ForeignKeys[0].RefTable = APIUsersTable
	UserActivitiesTable.ForeignKeys[1].RefTable = UsersTable
	UserActivitiesTable.ForeignKeys[2].RefTable = UsersTable
	UserAuthsTable.ForeignKeys[0].RefTable = UsersTable
	UserSessionsTable.ForeignKeys[0].RefTable = PartnersTable
	UserSessionsTable.ForeignKeys[1].RefTable = PartnerContactsTable
	UserSessionsTable.ForeignKeys[2].RefTable = UsersTable
	UserSessionSocketsTable.ForeignKeys[0].RefTable = UserSessionsTable
	PartnerFinanceOptionsTable.ForeignKeys[0].RefTable = OptionListTable
	PartnerFinanceOptionsTable.ForeignKeys[1].RefTable = PartnersTable
	PartnerEpcOptionsTable.ForeignKeys[0].RefTable = OptionListTable
	PartnerEpcOptionsTable.ForeignKeys[1].RefTable = PartnersTable
	ProductPackageItemsTable.ForeignKeys[0].RefTable = ProductPackagesTable
	ProductPackageItemsTable.ForeignKeys[1].RefTable = ProductsTable
}

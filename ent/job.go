// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Progress holds the value of the "progress" field.
	Progress *enum.JobProgress `json:"progress,omitempty"`
	// ProgressAt holds the value of the "progress_at" field.
	ProgressAt *time.Time `json:"progress_at,omitempty"`
	// ProgressFlagAt holds the value of the "progress_flag_at" field.
	ProgressFlagAt *time.Time `json:"progress_flag_at,omitempty"`
	// RegionID holds the value of the "region_id" field.
	RegionID uint8 `json:"region_id,omitempty"`
	// CompanyRefID holds the value of the "company_ref_id" field.
	CompanyRefID *string `json:"company_ref_id,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// WorkOrderPrice holds the value of the "work_order_price" field.
	WorkOrderPrice float64 `json:"work_order_price,omitempty"`
	// ContractPrice holds the value of the "contract_price" field.
	ContractPrice float64 `json:"contract_price,omitempty"`
	// ChangeOrderPrice holds the value of the "change_order_price" field.
	ChangeOrderPrice float64 `json:"change_order_price,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// ShingleColor holds the value of the "shingle_color" field.
	ShingleColor *string `json:"shingle_color,omitempty"`
	// PermitRequired holds the value of the "permit_required" field.
	PermitRequired *bool `json:"permit_required,omitempty"`
	// final inspection required flag
	InspectionRequired *bool `json:"inspection_required,omitempty"`
	// final inspection date
	InspectionDate *time.Time `json:"inspection_date,omitempty"`
	// ProgressInspectionDate holds the value of the "progress_inspection_date" field.
	ProgressInspectionDate *time.Time `json:"progress_inspection_date,omitempty"`
	// InstallDate holds the value of the "install_date" field.
	InstallDate *time.Time `json:"install_date,omitempty"`
	// CompletionDate holds the value of the "completion_date" field.
	CompletionDate *time.Time `json:"completion_date,omitempty"`
	// MaterialDeliveryDate holds the value of the "material_delivery_date" field.
	MaterialDeliveryDate *time.Time `json:"material_delivery_date,omitempty"`
	// solar approved job to production and agrees to the terms and conditions
	Agree *bool `json:"agree,omitempty"`
	// AgreeAt holds the value of the "agree_at" field.
	AgreeAt *time.Time `json:"agree_at,omitempty"`
	// PoNumber holds the value of the "po_number" field.
	PoNumber string `json:"po_number,omitempty"`
	// RoofingPartnerAssignedAt holds the value of the "roofing_partner_assigned_at" field.
	RoofingPartnerAssignedAt *time.Time `json:"roofing_partner_assigned_at,omitempty"`
	// RoofingPartnerFlagAt holds the value of the "roofing_partner_flag_at" field.
	RoofingPartnerFlagAt *time.Time `json:"roofing_partner_flag_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges                  JobEdges `json:"edges"`
	api_user_id            *string
	estimate_pdf_id        *string
	estimate_id            *string
	home_owner_id          *string
	epc_id                 *string
	roofing_partner_id     *string
	integration_partner_id *string
	epc_partner_id         *string
	requester_id           *string
	creator_id             *string
	sales_rep_id           *string
	selectValues           sql.SelectValues
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Payments holds the value of the payments edge.
	Payments []*Payment `json:"payments,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*JobActivity `json:"activities,omitempty"`
	// AssignmentHistory holds the value of the assignment_history edge.
	AssignmentHistory []*JobAssignmentHistory `json:"assignment_history,omitempty"`
	// ProgressHistory holds the value of the progress_history edge.
	ProgressHistory []*JobProgressHistory `json:"progress_history,omitempty"`
	// Notes holds the value of the notes edge.
	Notes []*JobNote `json:"notes,omitempty"`
	// DocUrls holds the value of the doc_urls edge.
	DocUrls []*JobDocURL `json:"doc_urls,omitempty"`
	// Estimate holds the value of the estimate edge.
	Estimate *Estimate `json:"estimate,omitempty"`
	// CreatorAPI holds the value of the creator_api edge.
	CreatorAPI *ApiUser `json:"creator_api,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// HomeOwner holds the value of the home_owner edge.
	HomeOwner *HomeOwner `json:"home_owner,omitempty"`
	// SalesRep holds the value of the sales_rep edge.
	SalesRep *User `json:"sales_rep,omitempty"`
	// Requester holds the value of the requester edge.
	Requester *Partner `json:"requester,omitempty"`
	// a.k.a contractor
	RoofingPartner *Partner `json:"roofing_partner,omitempty"`
	// job contractor
	IntegrationPartner *Partner `json:"integration_partner,omitempty"`
	// job contractor
	EpcPartner *Partner `json:"epc_partner,omitempty"`
	// Epc holds the value of the epc edge.
	Epc *OptionList `json:"epc,omitempty"`
	// EstimatePdf holds the value of the estimate_pdf edge.
	EstimatePdf *Document `json:"estimate_pdf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [17]bool
	// totalCount holds the count of the edges above.
	totalCount [17]map[string]int

	namedPayments          map[string][]*Payment
	namedActivities        map[string][]*JobActivity
	namedAssignmentHistory map[string][]*JobAssignmentHistory
	namedProgressHistory   map[string][]*JobProgressHistory
	namedNotes             map[string][]*JobNote
	namedDocUrls           map[string][]*JobDocURL
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) PaymentsOrErr() ([]*Payment, error) {
	if e.loadedTypes[0] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) ActivitiesOrErr() ([]*JobActivity, error) {
	if e.loadedTypes[1] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// AssignmentHistoryOrErr returns the AssignmentHistory value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) AssignmentHistoryOrErr() ([]*JobAssignmentHistory, error) {
	if e.loadedTypes[2] {
		return e.AssignmentHistory, nil
	}
	return nil, &NotLoadedError{edge: "assignment_history"}
}

// ProgressHistoryOrErr returns the ProgressHistory value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) ProgressHistoryOrErr() ([]*JobProgressHistory, error) {
	if e.loadedTypes[3] {
		return e.ProgressHistory, nil
	}
	return nil, &NotLoadedError{edge: "progress_history"}
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) NotesOrErr() ([]*JobNote, error) {
	if e.loadedTypes[4] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// DocUrlsOrErr returns the DocUrls value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) DocUrlsOrErr() ([]*JobDocURL, error) {
	if e.loadedTypes[5] {
		return e.DocUrls, nil
	}
	return nil, &NotLoadedError{edge: "doc_urls"}
}

// EstimateOrErr returns the Estimate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) EstimateOrErr() (*Estimate, error) {
	if e.loadedTypes[6] {
		if e.Estimate == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: estimate.Label}
		}
		return e.Estimate, nil
	}
	return nil, &NotLoadedError{edge: "estimate"}
}

// CreatorAPIOrErr returns the CreatorAPI value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) CreatorAPIOrErr() (*ApiUser, error) {
	if e.loadedTypes[7] {
		if e.CreatorAPI == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.CreatorAPI, nil
	}
	return nil, &NotLoadedError{edge: "creator_api"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[8] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// HomeOwnerOrErr returns the HomeOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) HomeOwnerOrErr() (*HomeOwner, error) {
	if e.loadedTypes[9] {
		if e.HomeOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: homeowner.Label}
		}
		return e.HomeOwner, nil
	}
	return nil, &NotLoadedError{edge: "home_owner"}
}

// SalesRepOrErr returns the SalesRep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) SalesRepOrErr() (*User, error) {
	if e.loadedTypes[10] {
		if e.SalesRep == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.SalesRep, nil
	}
	return nil, &NotLoadedError{edge: "sales_rep"}
}

// RequesterOrErr returns the Requester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) RequesterOrErr() (*Partner, error) {
	if e.loadedTypes[11] {
		if e.Requester == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Requester, nil
	}
	return nil, &NotLoadedError{edge: "requester"}
}

// RoofingPartnerOrErr returns the RoofingPartner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) RoofingPartnerOrErr() (*Partner, error) {
	if e.loadedTypes[12] {
		if e.RoofingPartner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.RoofingPartner, nil
	}
	return nil, &NotLoadedError{edge: "roofing_partner"}
}

// IntegrationPartnerOrErr returns the IntegrationPartner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) IntegrationPartnerOrErr() (*Partner, error) {
	if e.loadedTypes[13] {
		if e.IntegrationPartner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.IntegrationPartner, nil
	}
	return nil, &NotLoadedError{edge: "integration_partner"}
}

// EpcPartnerOrErr returns the EpcPartner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) EpcPartnerOrErr() (*Partner, error) {
	if e.loadedTypes[14] {
		if e.EpcPartner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.EpcPartner, nil
	}
	return nil, &NotLoadedError{edge: "epc_partner"}
}

// EpcOrErr returns the Epc value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) EpcOrErr() (*OptionList, error) {
	if e.loadedTypes[15] {
		if e.Epc == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: optionlist.Label}
		}
		return e.Epc, nil
	}
	return nil, &NotLoadedError{edge: "epc"}
}

// EstimatePdfOrErr returns the EstimatePdf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) EstimatePdfOrErr() (*Document, error) {
	if e.loadedTypes[16] {
		if e.EstimatePdf == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: document.Label}
		}
		return e.EstimatePdf, nil
	}
	return nil, &NotLoadedError{edge: "estimate_pdf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldPermitRequired, job.FieldInspectionRequired, job.FieldAgree:
			values[i] = new(sql.NullBool)
		case job.FieldPrice, job.FieldWorkOrderPrice, job.FieldContractPrice, job.FieldChangeOrderPrice:
			values[i] = new(sql.NullFloat64)
		case job.FieldRegionID:
			values[i] = new(sql.NullInt64)
		case job.FieldID, job.FieldProgress, job.FieldCompanyRefID, job.FieldCompanyName, job.FieldNote, job.FieldShingleColor, job.FieldPoNumber:
			values[i] = new(sql.NullString)
		case job.FieldCreatedAt, job.FieldUpdatedAt, job.FieldProgressAt, job.FieldProgressFlagAt, job.FieldInspectionDate, job.FieldProgressInspectionDate, job.FieldInstallDate, job.FieldCompletionDate, job.FieldMaterialDeliveryDate, job.FieldAgreeAt, job.FieldRoofingPartnerAssignedAt, job.FieldRoofingPartnerFlagAt:
			values[i] = new(sql.NullTime)
		case job.ForeignKeys[0]: // api_user_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[1]: // estimate_pdf_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[2]: // estimate_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[3]: // home_owner_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[4]: // epc_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[5]: // roofing_partner_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[6]: // integration_partner_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[7]: // epc_partner_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[8]: // requester_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[9]: // creator_id
			values[i] = new(sql.NullString)
		case job.ForeignKeys[10]: // sales_rep_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				j.ID = value.String
			}
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case job.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				j.UpdatedAt = value.Time
			}
		case job.FieldProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				j.Progress = new(enum.JobProgress)
				*j.Progress = enum.JobProgress(value.String)
			}
		case job.FieldProgressAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field progress_at", values[i])
			} else if value.Valid {
				j.ProgressAt = new(time.Time)
				*j.ProgressAt = value.Time
			}
		case job.FieldProgressFlagAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field progress_flag_at", values[i])
			} else if value.Valid {
				j.ProgressFlagAt = new(time.Time)
				*j.ProgressFlagAt = value.Time
			}
		case job.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field region_id", values[i])
			} else if value.Valid {
				j.RegionID = uint8(value.Int64)
			}
		case job.FieldCompanyRefID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_ref_id", values[i])
			} else if value.Valid {
				j.CompanyRefID = new(string)
				*j.CompanyRefID = value.String
			}
		case job.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				j.CompanyName = value.String
			}
		case job.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				j.Price = value.Float64
			}
		case job.FieldWorkOrderPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field work_order_price", values[i])
			} else if value.Valid {
				j.WorkOrderPrice = value.Float64
			}
		case job.FieldContractPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field contract_price", values[i])
			} else if value.Valid {
				j.ContractPrice = value.Float64
			}
		case job.FieldChangeOrderPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field change_order_price", values[i])
			} else if value.Valid {
				j.ChangeOrderPrice = value.Float64
			}
		case job.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				j.Note = value.String
			}
		case job.FieldShingleColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shingle_color", values[i])
			} else if value.Valid {
				j.ShingleColor = new(string)
				*j.ShingleColor = value.String
			}
		case job.FieldPermitRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field permit_required", values[i])
			} else if value.Valid {
				j.PermitRequired = new(bool)
				*j.PermitRequired = value.Bool
			}
		case job.FieldInspectionRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field inspection_required", values[i])
			} else if value.Valid {
				j.InspectionRequired = new(bool)
				*j.InspectionRequired = value.Bool
			}
		case job.FieldInspectionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field inspection_date", values[i])
			} else if value.Valid {
				j.InspectionDate = new(time.Time)
				*j.InspectionDate = value.Time
			}
		case job.FieldProgressInspectionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field progress_inspection_date", values[i])
			} else if value.Valid {
				j.ProgressInspectionDate = new(time.Time)
				*j.ProgressInspectionDate = value.Time
			}
		case job.FieldInstallDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field install_date", values[i])
			} else if value.Valid {
				j.InstallDate = new(time.Time)
				*j.InstallDate = value.Time
			}
		case job.FieldCompletionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completion_date", values[i])
			} else if value.Valid {
				j.CompletionDate = new(time.Time)
				*j.CompletionDate = value.Time
			}
		case job.FieldMaterialDeliveryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field material_delivery_date", values[i])
			} else if value.Valid {
				j.MaterialDeliveryDate = new(time.Time)
				*j.MaterialDeliveryDate = value.Time
			}
		case job.FieldAgree:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field agree", values[i])
			} else if value.Valid {
				j.Agree = new(bool)
				*j.Agree = value.Bool
			}
		case job.FieldAgreeAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field agree_at", values[i])
			} else if value.Valid {
				j.AgreeAt = new(time.Time)
				*j.AgreeAt = value.Time
			}
		case job.FieldPoNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field po_number", values[i])
			} else if value.Valid {
				j.PoNumber = value.String
			}
		case job.FieldRoofingPartnerAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field roofing_partner_assigned_at", values[i])
			} else if value.Valid {
				j.RoofingPartnerAssignedAt = new(time.Time)
				*j.RoofingPartnerAssignedAt = value.Time
			}
		case job.FieldRoofingPartnerFlagAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field roofing_partner_flag_at", values[i])
			} else if value.Valid {
				j.RoofingPartnerFlagAt = new(time.Time)
				*j.RoofingPartnerFlagAt = value.Time
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_user_id", values[i])
			} else if value.Valid {
				j.api_user_id = new(string)
				*j.api_user_id = value.String
			}
		case job.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estimate_pdf_id", values[i])
			} else if value.Valid {
				j.estimate_pdf_id = new(string)
				*j.estimate_pdf_id = value.String
			}
		case job.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estimate_id", values[i])
			} else if value.Valid {
				j.estimate_id = new(string)
				*j.estimate_id = value.String
			}
		case job.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_owner_id", values[i])
			} else if value.Valid {
				j.home_owner_id = new(string)
				*j.home_owner_id = value.String
			}
		case job.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field epc_id", values[i])
			} else if value.Valid {
				j.epc_id = new(string)
				*j.epc_id = value.String
			}
		case job.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roofing_partner_id", values[i])
			} else if value.Valid {
				j.roofing_partner_id = new(string)
				*j.roofing_partner_id = value.String
			}
		case job.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field integration_partner_id", values[i])
			} else if value.Valid {
				j.integration_partner_id = new(string)
				*j.integration_partner_id = value.String
			}
		case job.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field epc_partner_id", values[i])
			} else if value.Valid {
				j.epc_partner_id = new(string)
				*j.epc_partner_id = value.String
			}
		case job.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requester_id", values[i])
			} else if value.Valid {
				j.requester_id = new(string)
				*j.requester_id = value.String
			}
		case job.ForeignKeys[9]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				j.creator_id = new(string)
				*j.creator_id = value.String
			}
		case job.ForeignKeys[10]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales_rep_id", values[i])
			} else if value.Valid {
				j.sales_rep_id = new(string)
				*j.sales_rep_id = value.String
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// QueryPayments queries the "payments" edge of the Job entity.
func (j *Job) QueryPayments() *PaymentQuery {
	return NewJobClient(j.config).QueryPayments(j)
}

// QueryActivities queries the "activities" edge of the Job entity.
func (j *Job) QueryActivities() *JobActivityQuery {
	return NewJobClient(j.config).QueryActivities(j)
}

// QueryAssignmentHistory queries the "assignment_history" edge of the Job entity.
func (j *Job) QueryAssignmentHistory() *JobAssignmentHistoryQuery {
	return NewJobClient(j.config).QueryAssignmentHistory(j)
}

// QueryProgressHistory queries the "progress_history" edge of the Job entity.
func (j *Job) QueryProgressHistory() *JobProgressHistoryQuery {
	return NewJobClient(j.config).QueryProgressHistory(j)
}

// QueryNotes queries the "notes" edge of the Job entity.
func (j *Job) QueryNotes() *JobNoteQuery {
	return NewJobClient(j.config).QueryNotes(j)
}

// QueryDocUrls queries the "doc_urls" edge of the Job entity.
func (j *Job) QueryDocUrls() *JobDocURLQuery {
	return NewJobClient(j.config).QueryDocUrls(j)
}

// QueryEstimate queries the "estimate" edge of the Job entity.
func (j *Job) QueryEstimate() *EstimateQuery {
	return NewJobClient(j.config).QueryEstimate(j)
}

// QueryCreatorAPI queries the "creator_api" edge of the Job entity.
func (j *Job) QueryCreatorAPI() *ApiUserQuery {
	return NewJobClient(j.config).QueryCreatorAPI(j)
}

// QueryCreator queries the "creator" edge of the Job entity.
func (j *Job) QueryCreator() *UserQuery {
	return NewJobClient(j.config).QueryCreator(j)
}

// QueryHomeOwner queries the "home_owner" edge of the Job entity.
func (j *Job) QueryHomeOwner() *HomeOwnerQuery {
	return NewJobClient(j.config).QueryHomeOwner(j)
}

// QuerySalesRep queries the "sales_rep" edge of the Job entity.
func (j *Job) QuerySalesRep() *UserQuery {
	return NewJobClient(j.config).QuerySalesRep(j)
}

// QueryRequester queries the "requester" edge of the Job entity.
func (j *Job) QueryRequester() *PartnerQuery {
	return NewJobClient(j.config).QueryRequester(j)
}

// QueryRoofingPartner queries the "roofing_partner" edge of the Job entity.
func (j *Job) QueryRoofingPartner() *PartnerQuery {
	return NewJobClient(j.config).QueryRoofingPartner(j)
}

// QueryIntegrationPartner queries the "integration_partner" edge of the Job entity.
func (j *Job) QueryIntegrationPartner() *PartnerQuery {
	return NewJobClient(j.config).QueryIntegrationPartner(j)
}

// QueryEpcPartner queries the "epc_partner" edge of the Job entity.
func (j *Job) QueryEpcPartner() *PartnerQuery {
	return NewJobClient(j.config).QueryEpcPartner(j)
}

// QueryEpc queries the "epc" edge of the Job entity.
func (j *Job) QueryEpc() *OptionListQuery {
	return NewJobClient(j.config).QueryEpc(j)
}

// QueryEstimatePdf queries the "estimate_pdf" edge of the Job entity.
func (j *Job) QueryEstimatePdf() *DocumentQuery {
	return NewJobClient(j.config).QueryEstimatePdf(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(j.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := j.Progress; v != nil {
		builder.WriteString("progress=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := j.ProgressAt; v != nil {
		builder.WriteString("progress_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.ProgressFlagAt; v != nil {
		builder.WriteString("progress_flag_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("region_id=")
	builder.WriteString(fmt.Sprintf("%v", j.RegionID))
	builder.WriteString(", ")
	if v := j.CompanyRefID; v != nil {
		builder.WriteString("company_ref_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(j.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", j.Price))
	builder.WriteString(", ")
	builder.WriteString("work_order_price=")
	builder.WriteString(fmt.Sprintf("%v", j.WorkOrderPrice))
	builder.WriteString(", ")
	builder.WriteString("contract_price=")
	builder.WriteString(fmt.Sprintf("%v", j.ContractPrice))
	builder.WriteString(", ")
	builder.WriteString("change_order_price=")
	builder.WriteString(fmt.Sprintf("%v", j.ChangeOrderPrice))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(j.Note)
	builder.WriteString(", ")
	if v := j.ShingleColor; v != nil {
		builder.WriteString("shingle_color=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := j.PermitRequired; v != nil {
		builder.WriteString("permit_required=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := j.InspectionRequired; v != nil {
		builder.WriteString("inspection_required=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := j.InspectionDate; v != nil {
		builder.WriteString("inspection_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.ProgressInspectionDate; v != nil {
		builder.WriteString("progress_inspection_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.InstallDate; v != nil {
		builder.WriteString("install_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.CompletionDate; v != nil {
		builder.WriteString("completion_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.MaterialDeliveryDate; v != nil {
		builder.WriteString("material_delivery_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.Agree; v != nil {
		builder.WriteString("agree=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := j.AgreeAt; v != nil {
		builder.WriteString("agree_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("po_number=")
	builder.WriteString(j.PoNumber)
	builder.WriteString(", ")
	if v := j.RoofingPartnerAssignedAt; v != nil {
		builder.WriteString("roofing_partner_assigned_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := j.RoofingPartnerFlagAt; v != nil {
		builder.WriteString("roofing_partner_flag_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedPayments returns the Payments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedPayments(name string) ([]*Payment, error) {
	if j.Edges.namedPayments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedPayments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedPayments(name string, edges ...*Payment) {
	if j.Edges.namedPayments == nil {
		j.Edges.namedPayments = make(map[string][]*Payment)
	}
	if len(edges) == 0 {
		j.Edges.namedPayments[name] = []*Payment{}
	} else {
		j.Edges.namedPayments[name] = append(j.Edges.namedPayments[name], edges...)
	}
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedActivities(name string) ([]*JobActivity, error) {
	if j.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedActivities(name string, edges ...*JobActivity) {
	if j.Edges.namedActivities == nil {
		j.Edges.namedActivities = make(map[string][]*JobActivity)
	}
	if len(edges) == 0 {
		j.Edges.namedActivities[name] = []*JobActivity{}
	} else {
		j.Edges.namedActivities[name] = append(j.Edges.namedActivities[name], edges...)
	}
}

// NamedAssignmentHistory returns the AssignmentHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedAssignmentHistory(name string) ([]*JobAssignmentHistory, error) {
	if j.Edges.namedAssignmentHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedAssignmentHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedAssignmentHistory(name string, edges ...*JobAssignmentHistory) {
	if j.Edges.namedAssignmentHistory == nil {
		j.Edges.namedAssignmentHistory = make(map[string][]*JobAssignmentHistory)
	}
	if len(edges) == 0 {
		j.Edges.namedAssignmentHistory[name] = []*JobAssignmentHistory{}
	} else {
		j.Edges.namedAssignmentHistory[name] = append(j.Edges.namedAssignmentHistory[name], edges...)
	}
}

// NamedProgressHistory returns the ProgressHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedProgressHistory(name string) ([]*JobProgressHistory, error) {
	if j.Edges.namedProgressHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedProgressHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedProgressHistory(name string, edges ...*JobProgressHistory) {
	if j.Edges.namedProgressHistory == nil {
		j.Edges.namedProgressHistory = make(map[string][]*JobProgressHistory)
	}
	if len(edges) == 0 {
		j.Edges.namedProgressHistory[name] = []*JobProgressHistory{}
	} else {
		j.Edges.namedProgressHistory[name] = append(j.Edges.namedProgressHistory[name], edges...)
	}
}

// NamedNotes returns the Notes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedNotes(name string) ([]*JobNote, error) {
	if j.Edges.namedNotes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedNotes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedNotes(name string, edges ...*JobNote) {
	if j.Edges.namedNotes == nil {
		j.Edges.namedNotes = make(map[string][]*JobNote)
	}
	if len(edges) == 0 {
		j.Edges.namedNotes[name] = []*JobNote{}
	} else {
		j.Edges.namedNotes[name] = append(j.Edges.namedNotes[name], edges...)
	}
}

// NamedDocUrls returns the DocUrls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (j *Job) NamedDocUrls(name string) ([]*JobDocURL, error) {
	if j.Edges.namedDocUrls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := j.Edges.namedDocUrls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (j *Job) appendNamedDocUrls(name string, edges ...*JobDocURL) {
	if j.Edges.namedDocUrls == nil {
		j.Edges.namedDocUrls = make(map[string][]*JobDocURL)
	}
	if len(edges) == 0 {
		j.Edges.namedDocUrls[name] = []*JobDocURL{}
	} else {
		j.Edges.namedDocUrls[name] = append(j.Edges.namedDocUrls[name], edges...)
	}
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/predicate"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrainingCourseUpdate is the builder for updating TrainingCourse entities.
type TrainingCourseUpdate struct {
	config
	hooks     []Hook
	mutation  *TrainingCourseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrainingCourseUpdate builder.
func (tcu *TrainingCourseUpdate) Where(ps ...predicate.TrainingCourse) *TrainingCourseUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TrainingCourseUpdate) SetUpdatedAt(t time.Time) *TrainingCourseUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// SetName sets the "name" field.
func (tcu *TrainingCourseUpdate) SetName(s string) *TrainingCourseUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// AddTrainingVideoIDs adds the "training_videos" edge to the TrainingVideo entity by IDs.
func (tcu *TrainingCourseUpdate) AddTrainingVideoIDs(ids ...string) *TrainingCourseUpdate {
	tcu.mutation.AddTrainingVideoIDs(ids...)
	return tcu
}

// AddTrainingVideos adds the "training_videos" edges to the TrainingVideo entity.
func (tcu *TrainingCourseUpdate) AddTrainingVideos(t ...*TrainingVideo) *TrainingCourseUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddTrainingVideoIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tcu *TrainingCourseUpdate) SetCreatorID(id string) *TrainingCourseUpdate {
	tcu.mutation.SetCreatorID(id)
	return tcu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tcu *TrainingCourseUpdate) SetNillableCreatorID(id *string) *TrainingCourseUpdate {
	if id != nil {
		tcu = tcu.SetCreatorID(*id)
	}
	return tcu
}

// SetCreator sets the "creator" edge to the User entity.
func (tcu *TrainingCourseUpdate) SetCreator(u *User) *TrainingCourseUpdate {
	return tcu.SetCreatorID(u.ID)
}

// Mutation returns the TrainingCourseMutation object of the builder.
func (tcu *TrainingCourseUpdate) Mutation() *TrainingCourseMutation {
	return tcu.mutation
}

// ClearTrainingVideos clears all "training_videos" edges to the TrainingVideo entity.
func (tcu *TrainingCourseUpdate) ClearTrainingVideos() *TrainingCourseUpdate {
	tcu.mutation.ClearTrainingVideos()
	return tcu
}

// RemoveTrainingVideoIDs removes the "training_videos" edge to TrainingVideo entities by IDs.
func (tcu *TrainingCourseUpdate) RemoveTrainingVideoIDs(ids ...string) *TrainingCourseUpdate {
	tcu.mutation.RemoveTrainingVideoIDs(ids...)
	return tcu
}

// RemoveTrainingVideos removes "training_videos" edges to TrainingVideo entities.
func (tcu *TrainingCourseUpdate) RemoveTrainingVideos(t ...*TrainingVideo) *TrainingCourseUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveTrainingVideoIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (tcu *TrainingCourseUpdate) ClearCreator() *TrainingCourseUpdate {
	tcu.mutation.ClearCreator()
	return tcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TrainingCourseUpdate) Save(ctx context.Context) (int, error) {
	tcu.defaults()
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TrainingCourseUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TrainingCourseUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TrainingCourseUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TrainingCourseUpdate) defaults() {
	if _, ok := tcu.mutation.UpdatedAt(); !ok {
		v := trainingcourse.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TrainingCourseUpdate) check() error {
	if v, ok := tcu.mutation.Name(); ok {
		if err := trainingcourse.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TrainingCourse.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcu *TrainingCourseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrainingCourseUpdate {
	tcu.modifiers = append(tcu.modifiers, modifiers...)
	return tcu
}

func (tcu *TrainingCourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trainingcourse.Table, trainingcourse.Columns, sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(trainingcourse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.SetField(trainingcourse.FieldName, field.TypeString, value)
	}
	if tcu.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedTrainingVideosIDs(); len(nodes) > 0 && !tcu.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.TrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trainingcourse.CreatorTable,
			Columns: []string{trainingcourse.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trainingcourse.CreatorTable,
			Columns: []string{trainingcourse.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainingcourse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TrainingCourseUpdateOne is the builder for updating a single TrainingCourse entity.
type TrainingCourseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrainingCourseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TrainingCourseUpdateOne) SetUpdatedAt(t time.Time) *TrainingCourseUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// SetName sets the "name" field.
func (tcuo *TrainingCourseUpdateOne) SetName(s string) *TrainingCourseUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// AddTrainingVideoIDs adds the "training_videos" edge to the TrainingVideo entity by IDs.
func (tcuo *TrainingCourseUpdateOne) AddTrainingVideoIDs(ids ...string) *TrainingCourseUpdateOne {
	tcuo.mutation.AddTrainingVideoIDs(ids...)
	return tcuo
}

// AddTrainingVideos adds the "training_videos" edges to the TrainingVideo entity.
func (tcuo *TrainingCourseUpdateOne) AddTrainingVideos(t ...*TrainingVideo) *TrainingCourseUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddTrainingVideoIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tcuo *TrainingCourseUpdateOne) SetCreatorID(id string) *TrainingCourseUpdateOne {
	tcuo.mutation.SetCreatorID(id)
	return tcuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tcuo *TrainingCourseUpdateOne) SetNillableCreatorID(id *string) *TrainingCourseUpdateOne {
	if id != nil {
		tcuo = tcuo.SetCreatorID(*id)
	}
	return tcuo
}

// SetCreator sets the "creator" edge to the User entity.
func (tcuo *TrainingCourseUpdateOne) SetCreator(u *User) *TrainingCourseUpdateOne {
	return tcuo.SetCreatorID(u.ID)
}

// Mutation returns the TrainingCourseMutation object of the builder.
func (tcuo *TrainingCourseUpdateOne) Mutation() *TrainingCourseMutation {
	return tcuo.mutation
}

// ClearTrainingVideos clears all "training_videos" edges to the TrainingVideo entity.
func (tcuo *TrainingCourseUpdateOne) ClearTrainingVideos() *TrainingCourseUpdateOne {
	tcuo.mutation.ClearTrainingVideos()
	return tcuo
}

// RemoveTrainingVideoIDs removes the "training_videos" edge to TrainingVideo entities by IDs.
func (tcuo *TrainingCourseUpdateOne) RemoveTrainingVideoIDs(ids ...string) *TrainingCourseUpdateOne {
	tcuo.mutation.RemoveTrainingVideoIDs(ids...)
	return tcuo
}

// RemoveTrainingVideos removes "training_videos" edges to TrainingVideo entities.
func (tcuo *TrainingCourseUpdateOne) RemoveTrainingVideos(t ...*TrainingVideo) *TrainingCourseUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveTrainingVideoIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (tcuo *TrainingCourseUpdateOne) ClearCreator() *TrainingCourseUpdateOne {
	tcuo.mutation.ClearCreator()
	return tcuo
}

// Where appends a list predicates to the TrainingCourseUpdate builder.
func (tcuo *TrainingCourseUpdateOne) Where(ps ...predicate.TrainingCourse) *TrainingCourseUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TrainingCourseUpdateOne) Select(field string, fields ...string) *TrainingCourseUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TrainingCourse entity.
func (tcuo *TrainingCourseUpdateOne) Save(ctx context.Context) (*TrainingCourse, error) {
	tcuo.defaults()
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TrainingCourseUpdateOne) SaveX(ctx context.Context) *TrainingCourse {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TrainingCourseUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TrainingCourseUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TrainingCourseUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok {
		v := trainingcourse.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TrainingCourseUpdateOne) check() error {
	if v, ok := tcuo.mutation.Name(); ok {
		if err := trainingcourse.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TrainingCourse.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcuo *TrainingCourseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrainingCourseUpdateOne {
	tcuo.modifiers = append(tcuo.modifiers, modifiers...)
	return tcuo
}

func (tcuo *TrainingCourseUpdateOne) sqlSave(ctx context.Context) (_node *TrainingCourse, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trainingcourse.Table, trainingcourse.Columns, sqlgraph.NewFieldSpec(trainingcourse.FieldID, field.TypeString))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TrainingCourse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trainingcourse.FieldID)
		for _, f := range fields {
			if !trainingcourse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trainingcourse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trainingcourse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.SetField(trainingcourse.FieldName, field.TypeString, value)
	}
	if tcuo.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedTrainingVideosIDs(); len(nodes) > 0 && !tcuo.mutation.TrainingVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.TrainingVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trainingcourse.TrainingVideosTable,
			Columns: []string{trainingcourse.TrainingVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trainingcourse.CreatorTable,
			Columns: []string{trainingcourse.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trainingcourse.CreatorTable,
			Columns: []string{trainingcourse.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tcuo.modifiers...)
	_node = &TrainingCourse{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainingcourse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}

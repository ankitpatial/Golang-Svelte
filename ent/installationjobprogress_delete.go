// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/installationjobprogress"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobProgressDelete is the builder for deleting a InstallationJobProgress entity.
type InstallationJobProgressDelete struct {
	config
	hooks    []Hook
	mutation *InstallationJobProgressMutation
}

// Where appends a list predicates to the InstallationJobProgressDelete builder.
func (ijpd *InstallationJobProgressDelete) Where(ps ...predicate.InstallationJobProgress) *InstallationJobProgressDelete {
	ijpd.mutation.Where(ps...)
	return ijpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ijpd *InstallationJobProgressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ijpd.sqlExec, ijpd.mutation, ijpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ijpd *InstallationJobProgressDelete) ExecX(ctx context.Context) int {
	n, err := ijpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ijpd *InstallationJobProgressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(installationjobprogress.Table, sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString))
	if ps := ijpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ijpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ijpd.mutation.done = true
	return affected, err
}

// InstallationJobProgressDeleteOne is the builder for deleting a single InstallationJobProgress entity.
type InstallationJobProgressDeleteOne struct {
	ijpd *InstallationJobProgressDelete
}

// Where appends a list predicates to the InstallationJobProgressDelete builder.
func (ijpdo *InstallationJobProgressDeleteOne) Where(ps ...predicate.InstallationJobProgress) *InstallationJobProgressDeleteOne {
	ijpdo.ijpd.mutation.Where(ps...)
	return ijpdo
}

// Exec executes the deletion query.
func (ijpdo *InstallationJobProgressDeleteOne) Exec(ctx context.Context) error {
	n, err := ijpdo.ijpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{installationjobprogress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ijpdo *InstallationJobProgressDeleteOne) ExecX(ctx context.Context) {
	if err := ijpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

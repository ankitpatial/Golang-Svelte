// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/payment"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobQuery is the builder for querying Job entities.
type JobQuery struct {
	config
	ctx                        *QueryContext
	order                      []job.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Job
	withPayments               *PaymentQuery
	withActivities             *JobActivityQuery
	withAssignmentHistory      *JobAssignmentHistoryQuery
	withProgressHistory        *JobProgressHistoryQuery
	withNotes                  *JobNoteQuery
	withDocUrls                *JobDocURLQuery
	withEstimate               *EstimateQuery
	withCreatorAPI             *ApiUserQuery
	withCreator                *UserQuery
	withHomeOwner              *HomeOwnerQuery
	withSalesRep               *UserQuery
	withRequester              *PartnerQuery
	withRoofingPartner         *PartnerQuery
	withIntegrationPartner     *PartnerQuery
	withEpcPartner             *PartnerQuery
	withEpc                    *OptionListQuery
	withEstimatePdf            *DocumentQuery
	withFKs                    bool
	loadTotal                  []func(context.Context, []*Job) error
	modifiers                  []func(*sql.Selector)
	withNamedPayments          map[string]*PaymentQuery
	withNamedActivities        map[string]*JobActivityQuery
	withNamedAssignmentHistory map[string]*JobAssignmentHistoryQuery
	withNamedProgressHistory   map[string]*JobProgressHistoryQuery
	withNamedNotes             map[string]*JobNoteQuery
	withNamedDocUrls           map[string]*JobDocURLQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobQuery builder.
func (jq *JobQuery) Where(ps ...predicate.Job) *JobQuery {
	jq.predicates = append(jq.predicates, ps...)
	return jq
}

// Limit the number of records to be returned by this query.
func (jq *JobQuery) Limit(limit int) *JobQuery {
	jq.ctx.Limit = &limit
	return jq
}

// Offset to start from.
func (jq *JobQuery) Offset(offset int) *JobQuery {
	jq.ctx.Offset = &offset
	return jq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jq *JobQuery) Unique(unique bool) *JobQuery {
	jq.ctx.Unique = &unique
	return jq
}

// Order specifies how the records should be ordered.
func (jq *JobQuery) Order(o ...job.OrderOption) *JobQuery {
	jq.order = append(jq.order, o...)
	return jq
}

// QueryPayments chains the current query on the "payments" edge.
func (jq *JobQuery) QueryPayments() *PaymentQuery {
	query := (&PaymentClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.PaymentsTable, job.PaymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActivities chains the current query on the "activities" edge.
func (jq *JobQuery) QueryActivities() *JobActivityQuery {
	query := (&JobActivityClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(jobactivity.Table, jobactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.ActivitiesTable, job.ActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignmentHistory chains the current query on the "assignment_history" edge.
func (jq *JobQuery) QueryAssignmentHistory() *JobAssignmentHistoryQuery {
	query := (&JobAssignmentHistoryClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(jobassignmenthistory.Table, jobassignmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.AssignmentHistoryTable, job.AssignmentHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgressHistory chains the current query on the "progress_history" edge.
func (jq *JobQuery) QueryProgressHistory() *JobProgressHistoryQuery {
	query := (&JobProgressHistoryClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(jobprogresshistory.Table, jobprogresshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.ProgressHistoryTable, job.ProgressHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotes chains the current query on the "notes" edge.
func (jq *JobQuery) QueryNotes() *JobNoteQuery {
	query := (&JobNoteClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(jobnote.Table, jobnote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.NotesTable, job.NotesColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocUrls chains the current query on the "doc_urls" edge.
func (jq *JobQuery) QueryDocUrls() *JobDocURLQuery {
	query := (&JobDocURLClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(jobdocurl.Table, jobdocurl.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.DocUrlsTable, job.DocUrlsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEstimate chains the current query on the "estimate" edge.
func (jq *JobQuery) QueryEstimate() *EstimateQuery {
	query := (&EstimateClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, job.EstimateTable, job.EstimateColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatorAPI chains the current query on the "creator_api" edge.
func (jq *JobQuery) QueryCreatorAPI() *ApiUserQuery {
	query := (&ApiUserClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.CreatorAPITable, job.CreatorAPIColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (jq *JobQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.CreatorTable, job.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHomeOwner chains the current query on the "home_owner" edge.
func (jq *JobQuery) QueryHomeOwner() *HomeOwnerQuery {
	query := (&HomeOwnerClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(homeowner.Table, homeowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.HomeOwnerTable, job.HomeOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySalesRep chains the current query on the "sales_rep" edge.
func (jq *JobQuery) QuerySalesRep() *UserQuery {
	query := (&UserClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.SalesRepTable, job.SalesRepColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequester chains the current query on the "requester" edge.
func (jq *JobQuery) QueryRequester() *PartnerQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.RequesterTable, job.RequesterColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoofingPartner chains the current query on the "roofing_partner" edge.
func (jq *JobQuery) QueryRoofingPartner() *PartnerQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.RoofingPartnerTable, job.RoofingPartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrationPartner chains the current query on the "integration_partner" edge.
func (jq *JobQuery) QueryIntegrationPartner() *PartnerQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.IntegrationPartnerTable, job.IntegrationPartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpcPartner chains the current query on the "epc_partner" edge.
func (jq *JobQuery) QueryEpcPartner() *PartnerQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.EpcPartnerTable, job.EpcPartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpc chains the current query on the "epc" edge.
func (jq *JobQuery) QueryEpc() *OptionListQuery {
	query := (&OptionListClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(optionlist.Table, optionlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.EpcTable, job.EpcColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEstimatePdf chains the current query on the "estimate_pdf" edge.
func (jq *JobQuery) QueryEstimatePdf() *DocumentQuery {
	query := (&DocumentClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, job.EstimatePdfTable, job.EstimatePdfColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Job entity from the query.
// Returns a *NotFoundError when no Job was found.
func (jq *JobQuery) First(ctx context.Context) (*Job, error) {
	nodes, err := jq.Limit(1).All(setContextOp(ctx, jq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{job.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jq *JobQuery) FirstX(ctx context.Context) *Job {
	node, err := jq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Job ID from the query.
// Returns a *NotFoundError when no Job ID was found.
func (jq *JobQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jq.Limit(1).IDs(setContextOp(ctx, jq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{job.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jq *JobQuery) FirstIDX(ctx context.Context) string {
	id, err := jq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Job entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Job entity is found.
// Returns a *NotFoundError when no Job entities are found.
func (jq *JobQuery) Only(ctx context.Context) (*Job, error) {
	nodes, err := jq.Limit(2).All(setContextOp(ctx, jq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{job.Label}
	default:
		return nil, &NotSingularError{job.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jq *JobQuery) OnlyX(ctx context.Context) *Job {
	node, err := jq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Job ID in the query.
// Returns a *NotSingularError when more than one Job ID is found.
// Returns a *NotFoundError when no entities are found.
func (jq *JobQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jq.Limit(2).IDs(setContextOp(ctx, jq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{job.Label}
	default:
		err = &NotSingularError{job.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jq *JobQuery) OnlyIDX(ctx context.Context) string {
	id, err := jq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Jobs.
func (jq *JobQuery) All(ctx context.Context) ([]*Job, error) {
	ctx = setContextOp(ctx, jq.ctx, "All")
	if err := jq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Job, *JobQuery]()
	return withInterceptors[[]*Job](ctx, jq, qr, jq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jq *JobQuery) AllX(ctx context.Context) []*Job {
	nodes, err := jq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Job IDs.
func (jq *JobQuery) IDs(ctx context.Context) (ids []string, err error) {
	if jq.ctx.Unique == nil && jq.path != nil {
		jq.Unique(true)
	}
	ctx = setContextOp(ctx, jq.ctx, "IDs")
	if err = jq.Select(job.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jq *JobQuery) IDsX(ctx context.Context) []string {
	ids, err := jq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jq *JobQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jq.ctx, "Count")
	if err := jq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jq, querierCount[*JobQuery](), jq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jq *JobQuery) CountX(ctx context.Context) int {
	count, err := jq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jq *JobQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jq.ctx, "Exist")
	switch _, err := jq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jq *JobQuery) ExistX(ctx context.Context) bool {
	exist, err := jq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jq *JobQuery) Clone() *JobQuery {
	if jq == nil {
		return nil
	}
	return &JobQuery{
		config:                 jq.config,
		ctx:                    jq.ctx.Clone(),
		order:                  append([]job.OrderOption{}, jq.order...),
		inters:                 append([]Interceptor{}, jq.inters...),
		predicates:             append([]predicate.Job{}, jq.predicates...),
		withPayments:           jq.withPayments.Clone(),
		withActivities:         jq.withActivities.Clone(),
		withAssignmentHistory:  jq.withAssignmentHistory.Clone(),
		withProgressHistory:    jq.withProgressHistory.Clone(),
		withNotes:              jq.withNotes.Clone(),
		withDocUrls:            jq.withDocUrls.Clone(),
		withEstimate:           jq.withEstimate.Clone(),
		withCreatorAPI:         jq.withCreatorAPI.Clone(),
		withCreator:            jq.withCreator.Clone(),
		withHomeOwner:          jq.withHomeOwner.Clone(),
		withSalesRep:           jq.withSalesRep.Clone(),
		withRequester:          jq.withRequester.Clone(),
		withRoofingPartner:     jq.withRoofingPartner.Clone(),
		withIntegrationPartner: jq.withIntegrationPartner.Clone(),
		withEpcPartner:         jq.withEpcPartner.Clone(),
		withEpc:                jq.withEpc.Clone(),
		withEstimatePdf:        jq.withEstimatePdf.Clone(),
		// clone intermediate query.
		sql:  jq.sql.Clone(),
		path: jq.path,
	}
}

// WithPayments tells the query-builder to eager-load the nodes that are connected to
// the "payments" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithPayments(opts ...func(*PaymentQuery)) *JobQuery {
	query := (&PaymentClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withPayments = query
	return jq
}

// WithActivities tells the query-builder to eager-load the nodes that are connected to
// the "activities" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithActivities(opts ...func(*JobActivityQuery)) *JobQuery {
	query := (&JobActivityClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withActivities = query
	return jq
}

// WithAssignmentHistory tells the query-builder to eager-load the nodes that are connected to
// the "assignment_history" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithAssignmentHistory(opts ...func(*JobAssignmentHistoryQuery)) *JobQuery {
	query := (&JobAssignmentHistoryClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withAssignmentHistory = query
	return jq
}

// WithProgressHistory tells the query-builder to eager-load the nodes that are connected to
// the "progress_history" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithProgressHistory(opts ...func(*JobProgressHistoryQuery)) *JobQuery {
	query := (&JobProgressHistoryClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withProgressHistory = query
	return jq
}

// WithNotes tells the query-builder to eager-load the nodes that are connected to
// the "notes" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNotes(opts ...func(*JobNoteQuery)) *JobQuery {
	query := (&JobNoteClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withNotes = query
	return jq
}

// WithDocUrls tells the query-builder to eager-load the nodes that are connected to
// the "doc_urls" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithDocUrls(opts ...func(*JobDocURLQuery)) *JobQuery {
	query := (&JobDocURLClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withDocUrls = query
	return jq
}

// WithEstimate tells the query-builder to eager-load the nodes that are connected to
// the "estimate" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithEstimate(opts ...func(*EstimateQuery)) *JobQuery {
	query := (&EstimateClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withEstimate = query
	return jq
}

// WithCreatorAPI tells the query-builder to eager-load the nodes that are connected to
// the "creator_api" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithCreatorAPI(opts ...func(*ApiUserQuery)) *JobQuery {
	query := (&ApiUserClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withCreatorAPI = query
	return jq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithCreator(opts ...func(*UserQuery)) *JobQuery {
	query := (&UserClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withCreator = query
	return jq
}

// WithHomeOwner tells the query-builder to eager-load the nodes that are connected to
// the "home_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithHomeOwner(opts ...func(*HomeOwnerQuery)) *JobQuery {
	query := (&HomeOwnerClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withHomeOwner = query
	return jq
}

// WithSalesRep tells the query-builder to eager-load the nodes that are connected to
// the "sales_rep" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithSalesRep(opts ...func(*UserQuery)) *JobQuery {
	query := (&UserClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withSalesRep = query
	return jq
}

// WithRequester tells the query-builder to eager-load the nodes that are connected to
// the "requester" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithRequester(opts ...func(*PartnerQuery)) *JobQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withRequester = query
	return jq
}

// WithRoofingPartner tells the query-builder to eager-load the nodes that are connected to
// the "roofing_partner" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithRoofingPartner(opts ...func(*PartnerQuery)) *JobQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withRoofingPartner = query
	return jq
}

// WithIntegrationPartner tells the query-builder to eager-load the nodes that are connected to
// the "integration_partner" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithIntegrationPartner(opts ...func(*PartnerQuery)) *JobQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withIntegrationPartner = query
	return jq
}

// WithEpcPartner tells the query-builder to eager-load the nodes that are connected to
// the "epc_partner" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithEpcPartner(opts ...func(*PartnerQuery)) *JobQuery {
	query := (&PartnerClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withEpcPartner = query
	return jq
}

// WithEpc tells the query-builder to eager-load the nodes that are connected to
// the "epc" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithEpc(opts ...func(*OptionListQuery)) *JobQuery {
	query := (&OptionListClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withEpc = query
	return jq
}

// WithEstimatePdf tells the query-builder to eager-load the nodes that are connected to
// the "estimate_pdf" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithEstimatePdf(opts ...func(*DocumentQuery)) *JobQuery {
	query := (&DocumentClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withEstimatePdf = query
	return jq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Job.Query().
//		GroupBy(job.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jq *JobQuery) GroupBy(field string, fields ...string) *JobGroupBy {
	jq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobGroupBy{build: jq}
	grbuild.flds = &jq.ctx.Fields
	grbuild.label = job.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.Job.Query().
//		Select(job.FieldCreatedAt).
//		Scan(ctx, &v)
func (jq *JobQuery) Select(fields ...string) *JobSelect {
	jq.ctx.Fields = append(jq.ctx.Fields, fields...)
	sbuild := &JobSelect{JobQuery: jq}
	sbuild.label = job.Label
	sbuild.flds, sbuild.scan = &jq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobSelect configured with the given aggregations.
func (jq *JobQuery) Aggregate(fns ...AggregateFunc) *JobSelect {
	return jq.Select().Aggregate(fns...)
}

func (jq *JobQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jq); err != nil {
				return err
			}
		}
	}
	for _, f := range jq.ctx.Fields {
		if !job.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jq.path != nil {
		prev, err := jq.path(ctx)
		if err != nil {
			return err
		}
		jq.sql = prev
	}
	return nil
}

func (jq *JobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Job, error) {
	var (
		nodes       = []*Job{}
		withFKs     = jq.withFKs
		_spec       = jq.querySpec()
		loadedTypes = [17]bool{
			jq.withPayments != nil,
			jq.withActivities != nil,
			jq.withAssignmentHistory != nil,
			jq.withProgressHistory != nil,
			jq.withNotes != nil,
			jq.withDocUrls != nil,
			jq.withEstimate != nil,
			jq.withCreatorAPI != nil,
			jq.withCreator != nil,
			jq.withHomeOwner != nil,
			jq.withSalesRep != nil,
			jq.withRequester != nil,
			jq.withRoofingPartner != nil,
			jq.withIntegrationPartner != nil,
			jq.withEpcPartner != nil,
			jq.withEpc != nil,
			jq.withEstimatePdf != nil,
		}
	)
	if jq.withEstimate != nil || jq.withCreatorAPI != nil || jq.withCreator != nil || jq.withHomeOwner != nil || jq.withSalesRep != nil || jq.withRequester != nil || jq.withRoofingPartner != nil || jq.withIntegrationPartner != nil || jq.withEpcPartner != nil || jq.withEpc != nil || jq.withEstimatePdf != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, job.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Job).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Job{config: jq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jq.modifiers) > 0 {
		_spec.Modifiers = jq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jq.withPayments; query != nil {
		if err := jq.loadPayments(ctx, query, nodes,
			func(n *Job) { n.Edges.Payments = []*Payment{} },
			func(n *Job, e *Payment) { n.Edges.Payments = append(n.Edges.Payments, e) }); err != nil {
			return nil, err
		}
	}
	if query := jq.withActivities; query != nil {
		if err := jq.loadActivities(ctx, query, nodes,
			func(n *Job) { n.Edges.Activities = []*JobActivity{} },
			func(n *Job, e *JobActivity) { n.Edges.Activities = append(n.Edges.Activities, e) }); err != nil {
			return nil, err
		}
	}
	if query := jq.withAssignmentHistory; query != nil {
		if err := jq.loadAssignmentHistory(ctx, query, nodes,
			func(n *Job) { n.Edges.AssignmentHistory = []*JobAssignmentHistory{} },
			func(n *Job, e *JobAssignmentHistory) {
				n.Edges.AssignmentHistory = append(n.Edges.AssignmentHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := jq.withProgressHistory; query != nil {
		if err := jq.loadProgressHistory(ctx, query, nodes,
			func(n *Job) { n.Edges.ProgressHistory = []*JobProgressHistory{} },
			func(n *Job, e *JobProgressHistory) { n.Edges.ProgressHistory = append(n.Edges.ProgressHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := jq.withNotes; query != nil {
		if err := jq.loadNotes(ctx, query, nodes,
			func(n *Job) { n.Edges.Notes = []*JobNote{} },
			func(n *Job, e *JobNote) { n.Edges.Notes = append(n.Edges.Notes, e) }); err != nil {
			return nil, err
		}
	}
	if query := jq.withDocUrls; query != nil {
		if err := jq.loadDocUrls(ctx, query, nodes,
			func(n *Job) { n.Edges.DocUrls = []*JobDocURL{} },
			func(n *Job, e *JobDocURL) { n.Edges.DocUrls = append(n.Edges.DocUrls, e) }); err != nil {
			return nil, err
		}
	}
	if query := jq.withEstimate; query != nil {
		if err := jq.loadEstimate(ctx, query, nodes, nil,
			func(n *Job, e *Estimate) { n.Edges.Estimate = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withCreatorAPI; query != nil {
		if err := jq.loadCreatorAPI(ctx, query, nodes, nil,
			func(n *Job, e *ApiUser) { n.Edges.CreatorAPI = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withCreator; query != nil {
		if err := jq.loadCreator(ctx, query, nodes, nil,
			func(n *Job, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withHomeOwner; query != nil {
		if err := jq.loadHomeOwner(ctx, query, nodes, nil,
			func(n *Job, e *HomeOwner) { n.Edges.HomeOwner = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withSalesRep; query != nil {
		if err := jq.loadSalesRep(ctx, query, nodes, nil,
			func(n *Job, e *User) { n.Edges.SalesRep = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withRequester; query != nil {
		if err := jq.loadRequester(ctx, query, nodes, nil,
			func(n *Job, e *Partner) { n.Edges.Requester = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withRoofingPartner; query != nil {
		if err := jq.loadRoofingPartner(ctx, query, nodes, nil,
			func(n *Job, e *Partner) { n.Edges.RoofingPartner = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withIntegrationPartner; query != nil {
		if err := jq.loadIntegrationPartner(ctx, query, nodes, nil,
			func(n *Job, e *Partner) { n.Edges.IntegrationPartner = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withEpcPartner; query != nil {
		if err := jq.loadEpcPartner(ctx, query, nodes, nil,
			func(n *Job, e *Partner) { n.Edges.EpcPartner = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withEpc; query != nil {
		if err := jq.loadEpc(ctx, query, nodes, nil,
			func(n *Job, e *OptionList) { n.Edges.Epc = e }); err != nil {
			return nil, err
		}
	}
	if query := jq.withEstimatePdf; query != nil {
		if err := jq.loadEstimatePdf(ctx, query, nodes, nil,
			func(n *Job, e *Document) { n.Edges.EstimatePdf = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range jq.withNamedPayments {
		if err := jq.loadPayments(ctx, query, nodes,
			func(n *Job) { n.appendNamedPayments(name) },
			func(n *Job, e *Payment) { n.appendNamedPayments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jq.withNamedActivities {
		if err := jq.loadActivities(ctx, query, nodes,
			func(n *Job) { n.appendNamedActivities(name) },
			func(n *Job, e *JobActivity) { n.appendNamedActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jq.withNamedAssignmentHistory {
		if err := jq.loadAssignmentHistory(ctx, query, nodes,
			func(n *Job) { n.appendNamedAssignmentHistory(name) },
			func(n *Job, e *JobAssignmentHistory) { n.appendNamedAssignmentHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jq.withNamedProgressHistory {
		if err := jq.loadProgressHistory(ctx, query, nodes,
			func(n *Job) { n.appendNamedProgressHistory(name) },
			func(n *Job, e *JobProgressHistory) { n.appendNamedProgressHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jq.withNamedNotes {
		if err := jq.loadNotes(ctx, query, nodes,
			func(n *Job) { n.appendNamedNotes(name) },
			func(n *Job, e *JobNote) { n.appendNamedNotes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jq.withNamedDocUrls {
		if err := jq.loadDocUrls(ctx, query, nodes,
			func(n *Job) { n.appendNamedDocUrls(name) },
			func(n *Job, e *JobDocURL) { n.appendNamedDocUrls(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range jq.loadTotal {
		if err := jq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jq *JobQuery) loadPayments(ctx context.Context, query *PaymentQuery, nodes []*Job, init func(*Job), assign func(*Job, *Payment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Job)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Payment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(job.PaymentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jq *JobQuery) loadActivities(ctx context.Context, query *JobActivityQuery, nodes []*Job, init func(*Job), assign func(*Job, *JobActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Job)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(job.ActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jq *JobQuery) loadAssignmentHistory(ctx context.Context, query *JobAssignmentHistoryQuery, nodes []*Job, init func(*Job), assign func(*Job, *JobAssignmentHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Job)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(job.AssignmentHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jq *JobQuery) loadProgressHistory(ctx context.Context, query *JobProgressHistoryQuery, nodes []*Job, init func(*Job), assign func(*Job, *JobProgressHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Job)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobProgressHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(job.ProgressHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jq *JobQuery) loadNotes(ctx context.Context, query *JobNoteQuery, nodes []*Job, init func(*Job), assign func(*Job, *JobNote)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Job)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobNote(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(job.NotesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jq *JobQuery) loadDocUrls(ctx context.Context, query *JobDocURLQuery, nodes []*Job, init func(*Job), assign func(*Job, *JobDocURL)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Job)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDocURL(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(job.DocUrlsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jq *JobQuery) loadEstimate(ctx context.Context, query *EstimateQuery, nodes []*Job, init func(*Job), assign func(*Job, *Estimate)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].estimate_id == nil {
			continue
		}
		fk := *nodes[i].estimate_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(estimate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "estimate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadCreatorAPI(ctx context.Context, query *ApiUserQuery, nodes []*Job, init func(*Job), assign func(*Job, *ApiUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].api_user_id == nil {
			continue
		}
		fk := *nodes[i].api_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apiuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "api_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*Job, init func(*Job), assign func(*Job, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].creator_id == nil {
			continue
		}
		fk := *nodes[i].creator_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadHomeOwner(ctx context.Context, query *HomeOwnerQuery, nodes []*Job, init func(*Job), assign func(*Job, *HomeOwner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].home_owner_id == nil {
			continue
		}
		fk := *nodes[i].home_owner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(homeowner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "home_owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadSalesRep(ctx context.Context, query *UserQuery, nodes []*Job, init func(*Job), assign func(*Job, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].sales_rep_id == nil {
			continue
		}
		fk := *nodes[i].sales_rep_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sales_rep_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadRequester(ctx context.Context, query *PartnerQuery, nodes []*Job, init func(*Job), assign func(*Job, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].requester_id == nil {
			continue
		}
		fk := *nodes[i].requester_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "requester_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadRoofingPartner(ctx context.Context, query *PartnerQuery, nodes []*Job, init func(*Job), assign func(*Job, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].roofing_partner_id == nil {
			continue
		}
		fk := *nodes[i].roofing_partner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "roofing_partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadIntegrationPartner(ctx context.Context, query *PartnerQuery, nodes []*Job, init func(*Job), assign func(*Job, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].integration_partner_id == nil {
			continue
		}
		fk := *nodes[i].integration_partner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "integration_partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadEpcPartner(ctx context.Context, query *PartnerQuery, nodes []*Job, init func(*Job), assign func(*Job, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].epc_partner_id == nil {
			continue
		}
		fk := *nodes[i].epc_partner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "epc_partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadEpc(ctx context.Context, query *OptionListQuery, nodes []*Job, init func(*Job), assign func(*Job, *OptionList)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].epc_id == nil {
			continue
		}
		fk := *nodes[i].epc_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(optionlist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "epc_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jq *JobQuery) loadEstimatePdf(ctx context.Context, query *DocumentQuery, nodes []*Job, init func(*Job), assign func(*Job, *Document)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Job)
	for i := range nodes {
		if nodes[i].estimate_pdf_id == nil {
			continue
		}
		fk := *nodes[i].estimate_pdf_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(document.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "estimate_pdf_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jq *JobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jq.querySpec()
	if len(jq.modifiers) > 0 {
		_spec.Modifiers = jq.modifiers
	}
	_spec.Node.Columns = jq.ctx.Fields
	if len(jq.ctx.Fields) > 0 {
		_spec.Unique = jq.ctx.Unique != nil && *jq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jq.driver, _spec)
}

func (jq *JobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	_spec.From = jq.sql
	if unique := jq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jq.path != nil {
		_spec.Unique = true
	}
	if fields := jq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for i := range fields {
			if fields[i] != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jq *JobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jq.driver.Dialect())
	t1 := builder.Table(job.Table)
	columns := jq.ctx.Fields
	if len(columns) == 0 {
		columns = job.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jq.sql != nil {
		selector = jq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jq.ctx.Unique != nil && *jq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jq.modifiers {
		m(selector)
	}
	for _, p := range jq.predicates {
		p(selector)
	}
	for _, p := range jq.order {
		p(selector)
	}
	if offset := jq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jq *JobQuery) Modify(modifiers ...func(s *sql.Selector)) *JobSelect {
	jq.modifiers = append(jq.modifiers, modifiers...)
	return jq.Select()
}

// WithNamedPayments tells the query-builder to eager-load the nodes that are connected to the "payments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNamedPayments(name string, opts ...func(*PaymentQuery)) *JobQuery {
	query := (&PaymentClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jq.withNamedPayments == nil {
		jq.withNamedPayments = make(map[string]*PaymentQuery)
	}
	jq.withNamedPayments[name] = query
	return jq
}

// WithNamedActivities tells the query-builder to eager-load the nodes that are connected to the "activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNamedActivities(name string, opts ...func(*JobActivityQuery)) *JobQuery {
	query := (&JobActivityClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jq.withNamedActivities == nil {
		jq.withNamedActivities = make(map[string]*JobActivityQuery)
	}
	jq.withNamedActivities[name] = query
	return jq
}

// WithNamedAssignmentHistory tells the query-builder to eager-load the nodes that are connected to the "assignment_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNamedAssignmentHistory(name string, opts ...func(*JobAssignmentHistoryQuery)) *JobQuery {
	query := (&JobAssignmentHistoryClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jq.withNamedAssignmentHistory == nil {
		jq.withNamedAssignmentHistory = make(map[string]*JobAssignmentHistoryQuery)
	}
	jq.withNamedAssignmentHistory[name] = query
	return jq
}

// WithNamedProgressHistory tells the query-builder to eager-load the nodes that are connected to the "progress_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNamedProgressHistory(name string, opts ...func(*JobProgressHistoryQuery)) *JobQuery {
	query := (&JobProgressHistoryClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jq.withNamedProgressHistory == nil {
		jq.withNamedProgressHistory = make(map[string]*JobProgressHistoryQuery)
	}
	jq.withNamedProgressHistory[name] = query
	return jq
}

// WithNamedNotes tells the query-builder to eager-load the nodes that are connected to the "notes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNamedNotes(name string, opts ...func(*JobNoteQuery)) *JobQuery {
	query := (&JobNoteClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jq.withNamedNotes == nil {
		jq.withNamedNotes = make(map[string]*JobNoteQuery)
	}
	jq.withNamedNotes[name] = query
	return jq
}

// WithNamedDocUrls tells the query-builder to eager-load the nodes that are connected to the "doc_urls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jq *JobQuery) WithNamedDocUrls(name string, opts ...func(*JobDocURLQuery)) *JobQuery {
	query := (&JobDocURLClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jq.withNamedDocUrls == nil {
		jq.withNamedDocUrls = make(map[string]*JobDocURLQuery)
	}
	jq.withNamedDocUrls[name] = query
	return jq
}

// JobGroupBy is the group-by builder for Job entities.
type JobGroupBy struct {
	selector
	build *JobQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jgb *JobGroupBy) Aggregate(fns ...AggregateFunc) *JobGroupBy {
	jgb.fns = append(jgb.fns, fns...)
	return jgb
}

// Scan applies the selector query and scans the result into the given value.
func (jgb *JobGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jgb.build.ctx, "GroupBy")
	if err := jgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobQuery, *JobGroupBy](ctx, jgb.build, jgb, jgb.build.inters, v)
}

func (jgb *JobGroupBy) sqlScan(ctx context.Context, root *JobQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jgb.fns))
	for _, fn := range jgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jgb.flds)+len(jgb.fns))
		for _, f := range *jgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobSelect is the builder for selecting fields of Job entities.
type JobSelect struct {
	*JobQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (js *JobSelect) Aggregate(fns ...AggregateFunc) *JobSelect {
	js.fns = append(js.fns, fns...)
	return js
}

// Scan applies the selector query and scans the result into the given value.
func (js *JobSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, js.ctx, "Select")
	if err := js.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobQuery, *JobSelect](ctx, js.JobQuery, js, js.inters, v)
}

func (js *JobSelect) sqlScan(ctx context.Context, root *JobQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(js.fns))
	for _, fn := range js.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*js.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := js.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (js *JobSelect) Modify(modifiers ...func(s *sql.Selector)) *JobSelect {
	js.modifiers = append(js.modifiers, modifiers...)
	return js
}

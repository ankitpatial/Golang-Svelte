// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/postalcode"
	"roofix/ent/pricing"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostalCodeCreate is the builder for creating a PostalCode entity.
type PostalCodeCreate struct {
	config
	mutation *PostalCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PostalCodeCreate) SetCreatedAt(t time.Time) *PostalCodeCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PostalCodeCreate) SetNillableCreatedAt(t *time.Time) *PostalCodeCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PostalCodeCreate) SetUpdatedAt(t time.Time) *PostalCodeCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PostalCodeCreate) SetNillableUpdatedAt(t *time.Time) *PostalCodeCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetCountry sets the "country" field.
func (pcc *PostalCodeCreate) SetCountry(s string) *PostalCodeCreate {
	pcc.mutation.SetCountry(s)
	return pcc
}

// SetCode sets the "code" field.
func (pcc *PostalCodeCreate) SetCode(s string) *PostalCodeCreate {
	pcc.mutation.SetCode(s)
	return pcc
}

// SetCity sets the "city" field.
func (pcc *PostalCodeCreate) SetCity(s string) *PostalCodeCreate {
	pcc.mutation.SetCity(s)
	return pcc
}

// SetState sets the "state" field.
func (pcc *PostalCodeCreate) SetState(s string) *PostalCodeCreate {
	pcc.mutation.SetState(s)
	return pcc
}

// SetStateAbr sets the "state_abr" field.
func (pcc *PostalCodeCreate) SetStateAbr(s string) *PostalCodeCreate {
	pcc.mutation.SetStateAbr(s)
	return pcc
}

// SetRegionID sets the "region_id" field.
func (pcc *PostalCodeCreate) SetRegionID(u uint8) *PostalCodeCreate {
	pcc.mutation.SetRegionID(u)
	return pcc
}

// SetLatitude sets the "latitude" field.
func (pcc *PostalCodeCreate) SetLatitude(f float64) *PostalCodeCreate {
	pcc.mutation.SetLatitude(f)
	return pcc
}

// SetLongitude sets the "longitude" field.
func (pcc *PostalCodeCreate) SetLongitude(f float64) *PostalCodeCreate {
	pcc.mutation.SetLongitude(f)
	return pcc
}

// SetAccuracy sets the "accuracy" field.
func (pcc *PostalCodeCreate) SetAccuracy(u uint8) *PostalCodeCreate {
	pcc.mutation.SetAccuracy(u)
	return pcc
}

// SetServiceArea sets the "service_area" field.
func (pcc *PostalCodeCreate) SetServiceArea(b bool) *PostalCodeCreate {
	pcc.mutation.SetServiceArea(b)
	return pcc
}

// SetNillableServiceArea sets the "service_area" field if the given value is not nil.
func (pcc *PostalCodeCreate) SetNillableServiceArea(b *bool) *PostalCodeCreate {
	if b != nil {
		pcc.SetServiceArea(*b)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PostalCodeCreate) SetID(s string) *PostalCodeCreate {
	pcc.mutation.SetID(s)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PostalCodeCreate) SetNillableID(s *string) *PostalCodeCreate {
	if s != nil {
		pcc.SetID(*s)
	}
	return pcc
}

// AddPricingIDs adds the "pricing" edge to the Pricing entity by IDs.
func (pcc *PostalCodeCreate) AddPricingIDs(ids ...string) *PostalCodeCreate {
	pcc.mutation.AddPricingIDs(ids...)
	return pcc
}

// AddPricing adds the "pricing" edges to the Pricing entity.
func (pcc *PostalCodeCreate) AddPricing(p ...*Pricing) *PostalCodeCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPricingIDs(ids...)
}

// Mutation returns the PostalCodeMutation object of the builder.
func (pcc *PostalCodeCreate) Mutation() *PostalCodeMutation {
	return pcc.mutation
}

// Save creates the PostalCode in the database.
func (pcc *PostalCodeCreate) Save(ctx context.Context) (*PostalCode, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PostalCodeCreate) SaveX(ctx context.Context) *PostalCode {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PostalCodeCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PostalCodeCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PostalCodeCreate) defaults() {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := postalcode.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := postalcode.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.ServiceArea(); !ok {
		v := postalcode.DefaultServiceArea
		pcc.mutation.SetServiceArea(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := postalcode.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PostalCodeCreate) check() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PostalCode.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PostalCode.updated_at"`)}
	}
	if _, ok := pcc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "PostalCode.country"`)}
	}
	if v, ok := pcc.mutation.Country(); ok {
		if err := postalcode.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "PostalCode.country": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "PostalCode.code"`)}
	}
	if v, ok := pcc.mutation.Code(); ok {
		if err := postalcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PostalCode.code": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "PostalCode.city"`)}
	}
	if v, ok := pcc.mutation.City(); ok {
		if err := postalcode.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "PostalCode.city": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "PostalCode.state"`)}
	}
	if v, ok := pcc.mutation.State(); ok {
		if err := postalcode.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PostalCode.state": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.StateAbr(); !ok {
		return &ValidationError{Name: "state_abr", err: errors.New(`ent: missing required field "PostalCode.state_abr"`)}
	}
	if v, ok := pcc.mutation.StateAbr(); ok {
		if err := postalcode.StateAbrValidator(v); err != nil {
			return &ValidationError{Name: "state_abr", err: fmt.Errorf(`ent: validator failed for field "PostalCode.state_abr": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.RegionID(); !ok {
		return &ValidationError{Name: "region_id", err: errors.New(`ent: missing required field "PostalCode.region_id"`)}
	}
	if _, ok := pcc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "PostalCode.latitude"`)}
	}
	if _, ok := pcc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "PostalCode.longitude"`)}
	}
	if _, ok := pcc.mutation.Accuracy(); !ok {
		return &ValidationError{Name: "accuracy", err: errors.New(`ent: missing required field "PostalCode.accuracy"`)}
	}
	if _, ok := pcc.mutation.ServiceArea(); !ok {
		return &ValidationError{Name: "service_area", err: errors.New(`ent: missing required field "PostalCode.service_area"`)}
	}
	if v, ok := pcc.mutation.ID(); ok {
		if err := postalcode.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PostalCode.id": %w`, err)}
		}
	}
	return nil
}

func (pcc *PostalCodeCreate) sqlSave(ctx context.Context) (*PostalCode, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostalCode.ID type: %T", _spec.ID.Value)
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PostalCodeCreate) createSpec() (*PostalCode, *sqlgraph.CreateSpec) {
	var (
		_node = &PostalCode{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(postalcode.Table, sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString))
	)
	_spec.OnConflict = pcc.conflict
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(postalcode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(postalcode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.Country(); ok {
		_spec.SetField(postalcode.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := pcc.mutation.Code(); ok {
		_spec.SetField(postalcode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pcc.mutation.City(); ok {
		_spec.SetField(postalcode.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := pcc.mutation.State(); ok {
		_spec.SetField(postalcode.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := pcc.mutation.StateAbr(); ok {
		_spec.SetField(postalcode.FieldStateAbr, field.TypeString, value)
		_node.StateAbr = value
	}
	if value, ok := pcc.mutation.RegionID(); ok {
		_spec.SetField(postalcode.FieldRegionID, field.TypeUint8, value)
		_node.RegionID = value
	}
	if value, ok := pcc.mutation.Latitude(); ok {
		_spec.SetField(postalcode.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := pcc.mutation.Longitude(); ok {
		_spec.SetField(postalcode.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := pcc.mutation.Accuracy(); ok {
		_spec.SetField(postalcode.FieldAccuracy, field.TypeUint8, value)
		_node.Accuracy = value
	}
	if value, ok := pcc.mutation.ServiceArea(); ok {
		_spec.SetField(postalcode.FieldServiceArea, field.TypeBool, value)
		_node.ServiceArea = value
	}
	if nodes := pcc.mutation.PricingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostalCode.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostalCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcc *PostalCodeCreate) OnConflict(opts ...sql.ConflictOption) *PostalCodeUpsertOne {
	pcc.conflict = opts
	return &PostalCodeUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostalCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PostalCodeCreate) OnConflictColumns(columns ...string) *PostalCodeUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PostalCodeUpsertOne{
		create: pcc,
	}
}

type (
	// PostalCodeUpsertOne is the builder for "upsert"-ing
	//  one PostalCode node.
	PostalCodeUpsertOne struct {
		create *PostalCodeCreate
	}

	// PostalCodeUpsert is the "OnConflict" setter.
	PostalCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PostalCodeUpsert) SetUpdatedAt(v time.Time) *PostalCodeUpsert {
	u.Set(postalcode.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateUpdatedAt() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldUpdatedAt)
	return u
}

// SetCountry sets the "country" field.
func (u *PostalCodeUpsert) SetCountry(v string) *PostalCodeUpsert {
	u.Set(postalcode.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateCountry() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldCountry)
	return u
}

// SetCode sets the "code" field.
func (u *PostalCodeUpsert) SetCode(v string) *PostalCodeUpsert {
	u.Set(postalcode.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateCode() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldCode)
	return u
}

// SetCity sets the "city" field.
func (u *PostalCodeUpsert) SetCity(v string) *PostalCodeUpsert {
	u.Set(postalcode.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateCity() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *PostalCodeUpsert) SetState(v string) *PostalCodeUpsert {
	u.Set(postalcode.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateState() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldState)
	return u
}

// SetStateAbr sets the "state_abr" field.
func (u *PostalCodeUpsert) SetStateAbr(v string) *PostalCodeUpsert {
	u.Set(postalcode.FieldStateAbr, v)
	return u
}

// UpdateStateAbr sets the "state_abr" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateStateAbr() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldStateAbr)
	return u
}

// SetRegionID sets the "region_id" field.
func (u *PostalCodeUpsert) SetRegionID(v uint8) *PostalCodeUpsert {
	u.Set(postalcode.FieldRegionID, v)
	return u
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateRegionID() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldRegionID)
	return u
}

// AddRegionID adds v to the "region_id" field.
func (u *PostalCodeUpsert) AddRegionID(v uint8) *PostalCodeUpsert {
	u.Add(postalcode.FieldRegionID, v)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *PostalCodeUpsert) SetLatitude(v float64) *PostalCodeUpsert {
	u.Set(postalcode.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateLatitude() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *PostalCodeUpsert) AddLatitude(v float64) *PostalCodeUpsert {
	u.Add(postalcode.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *PostalCodeUpsert) SetLongitude(v float64) *PostalCodeUpsert {
	u.Set(postalcode.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateLongitude() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *PostalCodeUpsert) AddLongitude(v float64) *PostalCodeUpsert {
	u.Add(postalcode.FieldLongitude, v)
	return u
}

// SetAccuracy sets the "accuracy" field.
func (u *PostalCodeUpsert) SetAccuracy(v uint8) *PostalCodeUpsert {
	u.Set(postalcode.FieldAccuracy, v)
	return u
}

// UpdateAccuracy sets the "accuracy" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateAccuracy() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldAccuracy)
	return u
}

// AddAccuracy adds v to the "accuracy" field.
func (u *PostalCodeUpsert) AddAccuracy(v uint8) *PostalCodeUpsert {
	u.Add(postalcode.FieldAccuracy, v)
	return u
}

// SetServiceArea sets the "service_area" field.
func (u *PostalCodeUpsert) SetServiceArea(v bool) *PostalCodeUpsert {
	u.Set(postalcode.FieldServiceArea, v)
	return u
}

// UpdateServiceArea sets the "service_area" field to the value that was provided on create.
func (u *PostalCodeUpsert) UpdateServiceArea() *PostalCodeUpsert {
	u.SetExcluded(postalcode.FieldServiceArea)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PostalCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(postalcode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostalCodeUpsertOne) UpdateNewValues() *PostalCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(postalcode.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(postalcode.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostalCode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostalCodeUpsertOne) Ignore() *PostalCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostalCodeUpsertOne) DoNothing() *PostalCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostalCodeCreate.OnConflict
// documentation for more info.
func (u *PostalCodeUpsertOne) Update(set func(*PostalCodeUpsert)) *PostalCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostalCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostalCodeUpsertOne) SetUpdatedAt(v time.Time) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateUpdatedAt() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCountry sets the "country" field.
func (u *PostalCodeUpsertOne) SetCountry(v string) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateCountry() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateCountry()
	})
}

// SetCode sets the "code" field.
func (u *PostalCodeUpsertOne) SetCode(v string) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateCode() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateCode()
	})
}

// SetCity sets the "city" field.
func (u *PostalCodeUpsertOne) SetCity(v string) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateCity() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *PostalCodeUpsertOne) SetState(v string) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateState() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateState()
	})
}

// SetStateAbr sets the "state_abr" field.
func (u *PostalCodeUpsertOne) SetStateAbr(v string) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetStateAbr(v)
	})
}

// UpdateStateAbr sets the "state_abr" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateStateAbr() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateStateAbr()
	})
}

// SetRegionID sets the "region_id" field.
func (u *PostalCodeUpsertOne) SetRegionID(v uint8) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *PostalCodeUpsertOne) AddRegionID(v uint8) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateRegionID() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateRegionID()
	})
}

// SetLatitude sets the "latitude" field.
func (u *PostalCodeUpsertOne) SetLatitude(v float64) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *PostalCodeUpsertOne) AddLatitude(v float64) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateLatitude() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *PostalCodeUpsertOne) SetLongitude(v float64) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *PostalCodeUpsertOne) AddLongitude(v float64) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateLongitude() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateLongitude()
	})
}

// SetAccuracy sets the "accuracy" field.
func (u *PostalCodeUpsertOne) SetAccuracy(v uint8) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetAccuracy(v)
	})
}

// AddAccuracy adds v to the "accuracy" field.
func (u *PostalCodeUpsertOne) AddAccuracy(v uint8) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddAccuracy(v)
	})
}

// UpdateAccuracy sets the "accuracy" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateAccuracy() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateAccuracy()
	})
}

// SetServiceArea sets the "service_area" field.
func (u *PostalCodeUpsertOne) SetServiceArea(v bool) *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetServiceArea(v)
	})
}

// UpdateServiceArea sets the "service_area" field to the value that was provided on create.
func (u *PostalCodeUpsertOne) UpdateServiceArea() *PostalCodeUpsertOne {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateServiceArea()
	})
}

// Exec executes the query.
func (u *PostalCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostalCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostalCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostalCodeUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PostalCodeUpsertOne.ID is not supported by MySQL driver. Use PostalCodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostalCodeUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostalCodeCreateBulk is the builder for creating many PostalCode entities in bulk.
type PostalCodeCreateBulk struct {
	config
	builders []*PostalCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the PostalCode entities in the database.
func (pccb *PostalCodeCreateBulk) Save(ctx context.Context) ([]*PostalCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PostalCode, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostalCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PostalCodeCreateBulk) SaveX(ctx context.Context) []*PostalCode {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PostalCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PostalCodeCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostalCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostalCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pccb *PostalCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostalCodeUpsertBulk {
	pccb.conflict = opts
	return &PostalCodeUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostalCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PostalCodeCreateBulk) OnConflictColumns(columns ...string) *PostalCodeUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PostalCodeUpsertBulk{
		create: pccb,
	}
}

// PostalCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of PostalCode nodes.
type PostalCodeUpsertBulk struct {
	create *PostalCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PostalCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(postalcode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostalCodeUpsertBulk) UpdateNewValues() *PostalCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(postalcode.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(postalcode.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostalCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostalCodeUpsertBulk) Ignore() *PostalCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostalCodeUpsertBulk) DoNothing() *PostalCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostalCodeCreateBulk.OnConflict
// documentation for more info.
func (u *PostalCodeUpsertBulk) Update(set func(*PostalCodeUpsert)) *PostalCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostalCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostalCodeUpsertBulk) SetUpdatedAt(v time.Time) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateUpdatedAt() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCountry sets the "country" field.
func (u *PostalCodeUpsertBulk) SetCountry(v string) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateCountry() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateCountry()
	})
}

// SetCode sets the "code" field.
func (u *PostalCodeUpsertBulk) SetCode(v string) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateCode() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateCode()
	})
}

// SetCity sets the "city" field.
func (u *PostalCodeUpsertBulk) SetCity(v string) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateCity() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *PostalCodeUpsertBulk) SetState(v string) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateState() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateState()
	})
}

// SetStateAbr sets the "state_abr" field.
func (u *PostalCodeUpsertBulk) SetStateAbr(v string) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetStateAbr(v)
	})
}

// UpdateStateAbr sets the "state_abr" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateStateAbr() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateStateAbr()
	})
}

// SetRegionID sets the "region_id" field.
func (u *PostalCodeUpsertBulk) SetRegionID(v uint8) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *PostalCodeUpsertBulk) AddRegionID(v uint8) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateRegionID() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateRegionID()
	})
}

// SetLatitude sets the "latitude" field.
func (u *PostalCodeUpsertBulk) SetLatitude(v float64) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *PostalCodeUpsertBulk) AddLatitude(v float64) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateLatitude() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *PostalCodeUpsertBulk) SetLongitude(v float64) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *PostalCodeUpsertBulk) AddLongitude(v float64) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateLongitude() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateLongitude()
	})
}

// SetAccuracy sets the "accuracy" field.
func (u *PostalCodeUpsertBulk) SetAccuracy(v uint8) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetAccuracy(v)
	})
}

// AddAccuracy adds v to the "accuracy" field.
func (u *PostalCodeUpsertBulk) AddAccuracy(v uint8) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.AddAccuracy(v)
	})
}

// UpdateAccuracy sets the "accuracy" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateAccuracy() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateAccuracy()
	})
}

// SetServiceArea sets the "service_area" field.
func (u *PostalCodeUpsertBulk) SetServiceArea(v bool) *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.SetServiceArea(v)
	})
}

// UpdateServiceArea sets the "service_area" field to the value that was provided on create.
func (u *PostalCodeUpsertBulk) UpdateServiceArea() *PostalCodeUpsertBulk {
	return u.Update(func(s *PostalCodeUpsert) {
		s.UpdateServiceArea()
	})
}

// Exec executes the query.
func (u *PostalCodeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostalCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostalCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostalCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

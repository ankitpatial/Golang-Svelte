// Code generated by ent, DO NOT EDIT.

package product

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldSpecialNote holds the string denoting the special_note field in the database.
	FieldSpecialNote = "special_note"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldUnitsInStock holds the string denoting the units_in_stock field in the database.
	FieldUnitsInStock = "units_in_stock"
	// FieldUnitsOnOrder holds the string denoting the units_on_order field in the database.
	FieldUnitsOnOrder = "units_on_order"
	// FieldDiscontinued holds the string denoting the discontinued field in the database.
	FieldDiscontinued = "discontinued"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// Table holds the table name of the product in the database.
	Table = "products"
	// PackageTable is the table that holds the package relation/edge. The primary key declared below.
	PackageTable = "product_package_items"
	// PackageInverseTable is the table name for the ProductPackage entity.
	// It exists in this package in order to avoid circular dependency with the "productpackage" package.
	PackageInverseTable = "product_packages"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "products"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "products"
	// ImageInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	ImageInverseTable = "documents"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "image_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldName,
	FieldDescription,
	FieldFeatures,
	FieldSpecialNote,
	FieldUnitPrice,
	FieldUnitsInStock,
	FieldUnitsOnOrder,
	FieldDiscontinued,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"image_id",
	"creator_id",
}

var (
	// PackagePrimaryKey and PackageColumn2 are the table columns denoting the
	// primary key for the package relation (M2M).
	PackagePrimaryKey = []string{"package_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultFeatures holds the default value on creation for the "features" field.
	DefaultFeatures []string
	// SpecialNoteValidator is a validator for the "special_note" field. It is called by the builders before save.
	SpecialNoteValidator func(string) error
	// DefaultUnitsInStock holds the default value on creation for the "units_in_stock" field.
	DefaultUnitsInStock int
	// DefaultUnitsOnOrder holds the default value on creation for the "units_on_order" field.
	DefaultUnitsOnOrder int
	// DefaultDiscontinued holds the default value on creation for the "discontinued" field.
	DefaultDiscontinued bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enum.Product) error {
	switch _type.String() {
	case "HVAC", "SMART_HOME":
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySpecialNote orders the results by the special_note field.
func BySpecialNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecialNote, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByUnitsInStock orders the results by the units_in_stock field.
func ByUnitsInStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitsInStock, opts...).ToFunc()
}

// ByUnitsOnOrder orders the results by the units_on_order field.
func ByUnitsOnOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitsOnOrder, opts...).ToFunc()
}

// ByDiscontinued orders the results by the discontinued field.
func ByDiscontinued(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscontinued, opts...).ToFunc()
}

// ByPackageCount orders the results by package count.
func ByPackageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPackageStep(), opts...)
	}
}

// ByPackage orders the results by package terms.
func ByPackage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByImageField orders the results by image field.
func ByImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), sql.OrderByField(field, opts...))
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PackageTable, PackagePrimaryKey...),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ImageTable, ImageColumn),
	)
}

var (
	// enum.Product must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.Product)(nil)
	// enum.Product must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.Product)(nil)
)

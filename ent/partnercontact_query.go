// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/partner"
	"roofix/ent/partnercontact"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"roofix/ent/usersession"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerContactQuery is the builder for querying PartnerContact entities.
type PartnerContactQuery struct {
	config
	ctx               *QueryContext
	order             []partnercontact.OrderOption
	inters            []Interceptor
	predicates        []predicate.PartnerContact
	withUser          *UserQuery
	withPartner       *PartnerQuery
	withSessions      *UserSessionQuery
	loadTotal         []func(context.Context, []*PartnerContact) error
	modifiers         []func(*sql.Selector)
	withNamedSessions map[string]*UserSessionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PartnerContactQuery builder.
func (pcq *PartnerContactQuery) Where(ps ...predicate.PartnerContact) *PartnerContactQuery {
	pcq.predicates = append(pcq.predicates, ps...)
	return pcq
}

// Limit the number of records to be returned by this query.
func (pcq *PartnerContactQuery) Limit(limit int) *PartnerContactQuery {
	pcq.ctx.Limit = &limit
	return pcq
}

// Offset to start from.
func (pcq *PartnerContactQuery) Offset(offset int) *PartnerContactQuery {
	pcq.ctx.Offset = &offset
	return pcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcq *PartnerContactQuery) Unique(unique bool) *PartnerContactQuery {
	pcq.ctx.Unique = &unique
	return pcq
}

// Order specifies how the records should be ordered.
func (pcq *PartnerContactQuery) Order(o ...partnercontact.OrderOption) *PartnerContactQuery {
	pcq.order = append(pcq.order, o...)
	return pcq
}

// QueryUser chains the current query on the "user" edge.
func (pcq *PartnerContactQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partnercontact.Table, partnercontact.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partnercontact.UserTable, partnercontact.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartner chains the current query on the "partner" edge.
func (pcq *PartnerContactQuery) QueryPartner() *PartnerQuery {
	query := (&PartnerClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partnercontact.Table, partnercontact.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partnercontact.PartnerTable, partnercontact.PartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (pcq *PartnerContactQuery) QuerySessions() *UserSessionQuery {
	query := (&UserSessionClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partnercontact.Table, partnercontact.FieldID, selector),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partnercontact.SessionsTable, partnercontact.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PartnerContact entity from the query.
// Returns a *NotFoundError when no PartnerContact was found.
func (pcq *PartnerContactQuery) First(ctx context.Context) (*PartnerContact, error) {
	nodes, err := pcq.Limit(1).All(setContextOp(ctx, pcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{partnercontact.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcq *PartnerContactQuery) FirstX(ctx context.Context) *PartnerContact {
	node, err := pcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PartnerContact ID from the query.
// Returns a *NotFoundError when no PartnerContact ID was found.
func (pcq *PartnerContactQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pcq.Limit(1).IDs(setContextOp(ctx, pcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{partnercontact.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcq *PartnerContactQuery) FirstIDX(ctx context.Context) string {
	id, err := pcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PartnerContact entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PartnerContact entity is found.
// Returns a *NotFoundError when no PartnerContact entities are found.
func (pcq *PartnerContactQuery) Only(ctx context.Context) (*PartnerContact, error) {
	nodes, err := pcq.Limit(2).All(setContextOp(ctx, pcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{partnercontact.Label}
	default:
		return nil, &NotSingularError{partnercontact.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcq *PartnerContactQuery) OnlyX(ctx context.Context) *PartnerContact {
	node, err := pcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PartnerContact ID in the query.
// Returns a *NotSingularError when more than one PartnerContact ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcq *PartnerContactQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pcq.Limit(2).IDs(setContextOp(ctx, pcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{partnercontact.Label}
	default:
		err = &NotSingularError{partnercontact.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcq *PartnerContactQuery) OnlyIDX(ctx context.Context) string {
	id, err := pcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PartnerContacts.
func (pcq *PartnerContactQuery) All(ctx context.Context) ([]*PartnerContact, error) {
	ctx = setContextOp(ctx, pcq.ctx, "All")
	if err := pcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PartnerContact, *PartnerContactQuery]()
	return withInterceptors[[]*PartnerContact](ctx, pcq, qr, pcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcq *PartnerContactQuery) AllX(ctx context.Context) []*PartnerContact {
	nodes, err := pcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PartnerContact IDs.
func (pcq *PartnerContactQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pcq.ctx.Unique == nil && pcq.path != nil {
		pcq.Unique(true)
	}
	ctx = setContextOp(ctx, pcq.ctx, "IDs")
	if err = pcq.Select(partnercontact.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcq *PartnerContactQuery) IDsX(ctx context.Context) []string {
	ids, err := pcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcq *PartnerContactQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcq.ctx, "Count")
	if err := pcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcq, querierCount[*PartnerContactQuery](), pcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcq *PartnerContactQuery) CountX(ctx context.Context) int {
	count, err := pcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcq *PartnerContactQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcq.ctx, "Exist")
	switch _, err := pcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcq *PartnerContactQuery) ExistX(ctx context.Context) bool {
	exist, err := pcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PartnerContactQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcq *PartnerContactQuery) Clone() *PartnerContactQuery {
	if pcq == nil {
		return nil
	}
	return &PartnerContactQuery{
		config:       pcq.config,
		ctx:          pcq.ctx.Clone(),
		order:        append([]partnercontact.OrderOption{}, pcq.order...),
		inters:       append([]Interceptor{}, pcq.inters...),
		predicates:   append([]predicate.PartnerContact{}, pcq.predicates...),
		withUser:     pcq.withUser.Clone(),
		withPartner:  pcq.withPartner.Clone(),
		withSessions: pcq.withSessions.Clone(),
		// clone intermediate query.
		sql:  pcq.sql.Clone(),
		path: pcq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PartnerContactQuery) WithUser(opts ...func(*UserQuery)) *PartnerContactQuery {
	query := (&UserClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withUser = query
	return pcq
}

// WithPartner tells the query-builder to eager-load the nodes that are connected to
// the "partner" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PartnerContactQuery) WithPartner(opts ...func(*PartnerQuery)) *PartnerContactQuery {
	query := (&PartnerClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withPartner = query
	return pcq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PartnerContactQuery) WithSessions(opts ...func(*UserSessionQuery)) *PartnerContactQuery {
	query := (&UserSessionClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withSessions = query
	return pcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PartnerContact.Query().
//		GroupBy(partnercontact.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcq *PartnerContactQuery) GroupBy(field string, fields ...string) *PartnerContactGroupBy {
	pcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PartnerContactGroupBy{build: pcq}
	grbuild.flds = &pcq.ctx.Fields
	grbuild.label = partnercontact.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.PartnerContact.Query().
//		Select(partnercontact.FieldCreatedAt).
//		Scan(ctx, &v)
func (pcq *PartnerContactQuery) Select(fields ...string) *PartnerContactSelect {
	pcq.ctx.Fields = append(pcq.ctx.Fields, fields...)
	sbuild := &PartnerContactSelect{PartnerContactQuery: pcq}
	sbuild.label = partnercontact.Label
	sbuild.flds, sbuild.scan = &pcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PartnerContactSelect configured with the given aggregations.
func (pcq *PartnerContactQuery) Aggregate(fns ...AggregateFunc) *PartnerContactSelect {
	return pcq.Select().Aggregate(fns...)
}

func (pcq *PartnerContactQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcq.ctx.Fields {
		if !partnercontact.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcq.path != nil {
		prev, err := pcq.path(ctx)
		if err != nil {
			return err
		}
		pcq.sql = prev
	}
	return nil
}

func (pcq *PartnerContactQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PartnerContact, error) {
	var (
		nodes       = []*PartnerContact{}
		_spec       = pcq.querySpec()
		loadedTypes = [3]bool{
			pcq.withUser != nil,
			pcq.withPartner != nil,
			pcq.withSessions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PartnerContact).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PartnerContact{config: pcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pcq.modifiers) > 0 {
		_spec.Modifiers = pcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcq.withUser; query != nil {
		if err := pcq.loadUser(ctx, query, nodes, nil,
			func(n *PartnerContact, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withPartner; query != nil {
		if err := pcq.loadPartner(ctx, query, nodes, nil,
			func(n *PartnerContact, e *Partner) { n.Edges.Partner = e }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withSessions; query != nil {
		if err := pcq.loadSessions(ctx, query, nodes,
			func(n *PartnerContact) { n.Edges.Sessions = []*UserSession{} },
			func(n *PartnerContact, e *UserSession) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pcq.withNamedSessions {
		if err := pcq.loadSessions(ctx, query, nodes,
			func(n *PartnerContact) { n.appendNamedSessions(name) },
			func(n *PartnerContact, e *UserSession) { n.appendNamedSessions(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pcq.loadTotal {
		if err := pcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcq *PartnerContactQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*PartnerContact, init func(*PartnerContact), assign func(*PartnerContact, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PartnerContact)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcq *PartnerContactQuery) loadPartner(ctx context.Context, query *PartnerQuery, nodes []*PartnerContact, init func(*PartnerContact), assign func(*PartnerContact, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PartnerContact)
	for i := range nodes {
		fk := nodes[i].PartnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcq *PartnerContactQuery) loadSessions(ctx context.Context, query *UserSessionQuery, nodes []*PartnerContact, init func(*PartnerContact), assign func(*PartnerContact, *UserSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PartnerContact)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(partnercontact.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.partner_contact_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "partner_contact_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "partner_contact_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pcq *PartnerContactQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcq.querySpec()
	if len(pcq.modifiers) > 0 {
		_spec.Modifiers = pcq.modifiers
	}
	_spec.Node.Columns = pcq.ctx.Fields
	if len(pcq.ctx.Fields) > 0 {
		_spec.Unique = pcq.ctx.Unique != nil && *pcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcq.driver, _spec)
}

func (pcq *PartnerContactQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(partnercontact.Table, partnercontact.Columns, sqlgraph.NewFieldSpec(partnercontact.FieldID, field.TypeString))
	_spec.From = pcq.sql
	if unique := pcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcq.path != nil {
		_spec.Unique = true
	}
	if fields := pcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnercontact.FieldID)
		for i := range fields {
			if fields[i] != partnercontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pcq.withUser != nil {
			_spec.Node.AddColumnOnce(partnercontact.FieldUserID)
		}
		if pcq.withPartner != nil {
			_spec.Node.AddColumnOnce(partnercontact.FieldPartnerID)
		}
	}
	if ps := pcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcq *PartnerContactQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcq.driver.Dialect())
	t1 := builder.Table(partnercontact.Table)
	columns := pcq.ctx.Fields
	if len(columns) == 0 {
		columns = partnercontact.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcq.sql != nil {
		selector = pcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcq.ctx.Unique != nil && *pcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pcq.modifiers {
		m(selector)
	}
	for _, p := range pcq.predicates {
		p(selector)
	}
	for _, p := range pcq.order {
		p(selector)
	}
	if offset := pcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pcq *PartnerContactQuery) Modify(modifiers ...func(s *sql.Selector)) *PartnerContactSelect {
	pcq.modifiers = append(pcq.modifiers, modifiers...)
	return pcq.Select()
}

// WithNamedSessions tells the query-builder to eager-load the nodes that are connected to the "sessions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pcq *PartnerContactQuery) WithNamedSessions(name string, opts ...func(*UserSessionQuery)) *PartnerContactQuery {
	query := (&UserSessionClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pcq.withNamedSessions == nil {
		pcq.withNamedSessions = make(map[string]*UserSessionQuery)
	}
	pcq.withNamedSessions[name] = query
	return pcq
}

// PartnerContactGroupBy is the group-by builder for PartnerContact entities.
type PartnerContactGroupBy struct {
	selector
	build *PartnerContactQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcgb *PartnerContactGroupBy) Aggregate(fns ...AggregateFunc) *PartnerContactGroupBy {
	pcgb.fns = append(pcgb.fns, fns...)
	return pcgb
}

// Scan applies the selector query and scans the result into the given value.
func (pcgb *PartnerContactGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcgb.build.ctx, "GroupBy")
	if err := pcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PartnerContactQuery, *PartnerContactGroupBy](ctx, pcgb.build, pcgb, pcgb.build.inters, v)
}

func (pcgb *PartnerContactGroupBy) sqlScan(ctx context.Context, root *PartnerContactQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcgb.fns))
	for _, fn := range pcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcgb.flds)+len(pcgb.fns))
		for _, f := range *pcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PartnerContactSelect is the builder for selecting fields of PartnerContact entities.
type PartnerContactSelect struct {
	*PartnerContactQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcs *PartnerContactSelect) Aggregate(fns ...AggregateFunc) *PartnerContactSelect {
	pcs.fns = append(pcs.fns, fns...)
	return pcs
}

// Scan applies the selector query and scans the result into the given value.
func (pcs *PartnerContactSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcs.ctx, "Select")
	if err := pcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PartnerContactQuery, *PartnerContactSelect](ctx, pcs.PartnerContactQuery, pcs, pcs.inters, v)
}

func (pcs *PartnerContactSelect) sqlScan(ctx context.Context, root *PartnerContactQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcs.fns))
	for _, fn := range pcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pcs *PartnerContactSelect) Modify(modifiers ...func(s *sql.Selector)) *PartnerContactSelect {
	pcs.modifiers = append(pcs.modifiers, modifiers...)
	return pcs
}

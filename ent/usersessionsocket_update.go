// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/predicate"
	"roofix/ent/usersession"
	"roofix/ent/usersessionsocket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSessionSocketUpdate is the builder for updating UserSessionSocket entities.
type UserSessionSocketUpdate struct {
	config
	hooks     []Hook
	mutation  *UserSessionSocketMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserSessionSocketUpdate builder.
func (ussu *UserSessionSocketUpdate) Where(ps ...predicate.UserSessionSocket) *UserSessionSocketUpdate {
	ussu.mutation.Where(ps...)
	return ussu
}

// SetUpdatedAt sets the "updated_at" field.
func (ussu *UserSessionSocketUpdate) SetUpdatedAt(t time.Time) *UserSessionSocketUpdate {
	ussu.mutation.SetUpdatedAt(t)
	return ussu
}

// SetSessionID sets the "session" edge to the UserSession entity by ID.
func (ussu *UserSessionSocketUpdate) SetSessionID(id string) *UserSessionSocketUpdate {
	ussu.mutation.SetSessionID(id)
	return ussu
}

// SetSession sets the "session" edge to the UserSession entity.
func (ussu *UserSessionSocketUpdate) SetSession(u *UserSession) *UserSessionSocketUpdate {
	return ussu.SetSessionID(u.ID)
}

// Mutation returns the UserSessionSocketMutation object of the builder.
func (ussu *UserSessionSocketUpdate) Mutation() *UserSessionSocketMutation {
	return ussu.mutation
}

// ClearSession clears the "session" edge to the UserSession entity.
func (ussu *UserSessionSocketUpdate) ClearSession() *UserSessionSocketUpdate {
	ussu.mutation.ClearSession()
	return ussu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ussu *UserSessionSocketUpdate) Save(ctx context.Context) (int, error) {
	ussu.defaults()
	return withHooks(ctx, ussu.sqlSave, ussu.mutation, ussu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ussu *UserSessionSocketUpdate) SaveX(ctx context.Context) int {
	affected, err := ussu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ussu *UserSessionSocketUpdate) Exec(ctx context.Context) error {
	_, err := ussu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ussu *UserSessionSocketUpdate) ExecX(ctx context.Context) {
	if err := ussu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ussu *UserSessionSocketUpdate) defaults() {
	if _, ok := ussu.mutation.UpdatedAt(); !ok {
		v := usersessionsocket.UpdateDefaultUpdatedAt()
		ussu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ussu *UserSessionSocketUpdate) check() error {
	if _, ok := ussu.mutation.SessionID(); ussu.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserSessionSocket.session"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ussu *UserSessionSocketUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserSessionSocketUpdate {
	ussu.modifiers = append(ussu.modifiers, modifiers...)
	return ussu
}

func (ussu *UserSessionSocketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ussu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersessionsocket.Table, usersessionsocket.Columns, sqlgraph.NewFieldSpec(usersessionsocket.FieldID, field.TypeString))
	if ps := ussu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ussu.mutation.UpdatedAt(); ok {
		_spec.SetField(usersessionsocket.FieldUpdatedAt, field.TypeTime, value)
	}
	if ussu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersessionsocket.SessionTable,
			Columns: []string{usersessionsocket.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ussu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersessionsocket.SessionTable,
			Columns: []string{usersessionsocket.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ussu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ussu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersessionsocket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ussu.mutation.done = true
	return n, nil
}

// UserSessionSocketUpdateOne is the builder for updating a single UserSessionSocket entity.
type UserSessionSocketUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserSessionSocketMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ussuo *UserSessionSocketUpdateOne) SetUpdatedAt(t time.Time) *UserSessionSocketUpdateOne {
	ussuo.mutation.SetUpdatedAt(t)
	return ussuo
}

// SetSessionID sets the "session" edge to the UserSession entity by ID.
func (ussuo *UserSessionSocketUpdateOne) SetSessionID(id string) *UserSessionSocketUpdateOne {
	ussuo.mutation.SetSessionID(id)
	return ussuo
}

// SetSession sets the "session" edge to the UserSession entity.
func (ussuo *UserSessionSocketUpdateOne) SetSession(u *UserSession) *UserSessionSocketUpdateOne {
	return ussuo.SetSessionID(u.ID)
}

// Mutation returns the UserSessionSocketMutation object of the builder.
func (ussuo *UserSessionSocketUpdateOne) Mutation() *UserSessionSocketMutation {
	return ussuo.mutation
}

// ClearSession clears the "session" edge to the UserSession entity.
func (ussuo *UserSessionSocketUpdateOne) ClearSession() *UserSessionSocketUpdateOne {
	ussuo.mutation.ClearSession()
	return ussuo
}

// Where appends a list predicates to the UserSessionSocketUpdate builder.
func (ussuo *UserSessionSocketUpdateOne) Where(ps ...predicate.UserSessionSocket) *UserSessionSocketUpdateOne {
	ussuo.mutation.Where(ps...)
	return ussuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ussuo *UserSessionSocketUpdateOne) Select(field string, fields ...string) *UserSessionSocketUpdateOne {
	ussuo.fields = append([]string{field}, fields...)
	return ussuo
}

// Save executes the query and returns the updated UserSessionSocket entity.
func (ussuo *UserSessionSocketUpdateOne) Save(ctx context.Context) (*UserSessionSocket, error) {
	ussuo.defaults()
	return withHooks(ctx, ussuo.sqlSave, ussuo.mutation, ussuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ussuo *UserSessionSocketUpdateOne) SaveX(ctx context.Context) *UserSessionSocket {
	node, err := ussuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ussuo *UserSessionSocketUpdateOne) Exec(ctx context.Context) error {
	_, err := ussuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ussuo *UserSessionSocketUpdateOne) ExecX(ctx context.Context) {
	if err := ussuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ussuo *UserSessionSocketUpdateOne) defaults() {
	if _, ok := ussuo.mutation.UpdatedAt(); !ok {
		v := usersessionsocket.UpdateDefaultUpdatedAt()
		ussuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ussuo *UserSessionSocketUpdateOne) check() error {
	if _, ok := ussuo.mutation.SessionID(); ussuo.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserSessionSocket.session"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ussuo *UserSessionSocketUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserSessionSocketUpdateOne {
	ussuo.modifiers = append(ussuo.modifiers, modifiers...)
	return ussuo
}

func (ussuo *UserSessionSocketUpdateOne) sqlSave(ctx context.Context) (_node *UserSessionSocket, err error) {
	if err := ussuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersessionsocket.Table, usersessionsocket.Columns, sqlgraph.NewFieldSpec(usersessionsocket.FieldID, field.TypeString))
	id, ok := ussuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSessionSocket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ussuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersessionsocket.FieldID)
		for _, f := range fields {
			if !usersessionsocket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersessionsocket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ussuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ussuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usersessionsocket.FieldUpdatedAt, field.TypeTime, value)
	}
	if ussuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersessionsocket.SessionTable,
			Columns: []string{usersessionsocket.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ussuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersessionsocket.SessionTable,
			Columns: []string{usersessionsocket.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ussuo.modifiers...)
	_node = &UserSessionSocket{config: ussuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ussuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersessionsocket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ussuo.mutation.done = true
	return _node, nil
}

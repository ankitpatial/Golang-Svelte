// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/channel"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Name holds the value of the "name" field.
	Name enum.Channel `json:"name,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic enum.Topic `json:"topic,omitempty"`
	// RefID holds the value of the "ref_id" field.
	RefID string `json:"ref_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges        ChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*ChannelSub `json:"subscriptions,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*ChannelMessage `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedSubscriptions map[string][]*ChannelSub
	namedMessages      map[string][]*ChannelMessage
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) SubscriptionsOrErr() ([]*ChannelSub, error) {
	if e.loadedTypes[0] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) MessagesOrErr() ([]*ChannelMessage, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldID, channel.FieldName, channel.FieldTopic, channel.FieldRefID:
			values[i] = new(sql.NullString)
		case channel.FieldCreatedAt, channel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case channel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case channel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case channel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = enum.Channel(value.String)
			}
		case channel.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				c.Topic = enum.Topic(value.String)
			}
		case channel.FieldRefID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_id", values[i])
			} else if value.Valid {
				c.RefID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Channel.
// This includes values selected through modifiers, order, etc.
func (c *Channel) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QuerySubscriptions queries the "subscriptions" edge of the Channel entity.
func (c *Channel) QuerySubscriptions() *ChannelSubQuery {
	return NewChannelClient(c.config).QuerySubscriptions(c)
}

// QueryMessages queries the "messages" edge of the Channel entity.
func (c *Channel) QueryMessages() *ChannelMessageQuery {
	return NewChannelClient(c.config).QueryMessages(c)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return NewChannelClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Channel is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", c.Name))
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(fmt.Sprintf("%v", c.Topic))
	builder.WriteString(", ")
	builder.WriteString("ref_id=")
	builder.WriteString(c.RefID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedSubscriptions returns the Subscriptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Channel) NamedSubscriptions(name string) ([]*ChannelSub, error) {
	if c.Edges.namedSubscriptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedSubscriptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Channel) appendNamedSubscriptions(name string, edges ...*ChannelSub) {
	if c.Edges.namedSubscriptions == nil {
		c.Edges.namedSubscriptions = make(map[string][]*ChannelSub)
	}
	if len(edges) == 0 {
		c.Edges.namedSubscriptions[name] = []*ChannelSub{}
	} else {
		c.Edges.namedSubscriptions[name] = append(c.Edges.namedSubscriptions[name], edges...)
	}
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Channel) NamedMessages(name string) ([]*ChannelMessage, error) {
	if c.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Channel) appendNamedMessages(name string, edges ...*ChannelMessage) {
	if c.Edges.namedMessages == nil {
		c.Edges.namedMessages = make(map[string][]*ChannelMessage)
	}
	if len(edges) == 0 {
		c.Edges.namedMessages[name] = []*ChannelMessage{}
	} else {
		c.Edges.namedMessages[name] = append(c.Edges.namedMessages[name], edges...)
	}
}

// Channels is a parsable slice of Channel.
type Channels []*Channel

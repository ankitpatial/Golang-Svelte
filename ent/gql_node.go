// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"roofix/ent/apiaccess"
	"roofix/ent/apiuser"
	"roofix/ent/apiusertoken"
	"roofix/ent/auditlog"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/channelsub"
	"roofix/ent/contactus"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/homeowner"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/installationjobprogress"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/notifysetting"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/partnercontact"
	"roofix/ent/partnerservice"
	"roofix/ent/partnerservicecity"
	"roofix/ent/partnerservicestate"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/payment"
	"roofix/ent/postalcode"
	"roofix/ent/pricing"
	"roofix/ent/product"
	"roofix/ent/productpackage"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/token"
	"roofix/ent/trainingcourse"
	"roofix/ent/trainingvideo"
	"roofix/ent/user"
	"roofix/ent/useractivity"
	"roofix/ent/userauth"
	"roofix/ent/usersession"
	"roofix/ent/usersessionsocket"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

// IsNode implements the Node interface check for GQLGen.
func (n *ApiAccess) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ApiUser) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ApiUserToken) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *AuditLog) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Channel) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ChannelMessage) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ChannelMessageRead) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ChannelSub) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ContactUs) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Document) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Estimate) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *EstimateActivity) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *HomeOwner) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *InstallationJob) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *InstallationJobItem) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *InstallationJobProgress) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Job) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *JobActivity) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *JobAssignmentHistory) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *JobDocURL) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *JobNote) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *JobProgressHistory) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *NotifySetting) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *OptionList) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Partner) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PartnerActivity) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PartnerContact) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PartnerService) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PartnerServiceCity) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PartnerServiceState) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PartnerTrainingVideo) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Payment) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PostalCode) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Pricing) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Product) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *ProductPackage) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Survey) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *SurveyProgress) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Token) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *TrainingCourse) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *TrainingVideo) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *User) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserActivity) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserAuth) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserSession) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserSessionSocket) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, string) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, string) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, string) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id string) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id string, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id string) (Noder, error) {
	switch table {
	case apiaccess.Table:
		query := c.ApiAccess.Query().
			Where(apiaccess.ID(id))
		query, err := query.CollectFields(ctx, "ApiAccess")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case apiuser.Table:
		query := c.ApiUser.Query().
			Where(apiuser.ID(id))
		query, err := query.CollectFields(ctx, "ApiUser")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case apiusertoken.Table:
		query := c.ApiUserToken.Query().
			Where(apiusertoken.ID(id))
		query, err := query.CollectFields(ctx, "ApiUserToken")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case auditlog.Table:
		query := c.AuditLog.Query().
			Where(auditlog.ID(id))
		query, err := query.CollectFields(ctx, "AuditLog")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case channel.Table:
		query := c.Channel.Query().
			Where(channel.ID(id))
		query, err := query.CollectFields(ctx, "Channel")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case channelmessage.Table:
		query := c.ChannelMessage.Query().
			Where(channelmessage.ID(id))
		query, err := query.CollectFields(ctx, "ChannelMessage")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case channelmessageread.Table:
		query := c.ChannelMessageRead.Query().
			Where(channelmessageread.ID(id))
		query, err := query.CollectFields(ctx, "ChannelMessageRead")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case channelsub.Table:
		query := c.ChannelSub.Query().
			Where(channelsub.ID(id))
		query, err := query.CollectFields(ctx, "ChannelSub")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case contactus.Table:
		query := c.ContactUs.Query().
			Where(contactus.ID(id))
		query, err := query.CollectFields(ctx, "ContactUs")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case document.Table:
		query := c.Document.Query().
			Where(document.ID(id))
		query, err := query.CollectFields(ctx, "Document")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case estimate.Table:
		query := c.Estimate.Query().
			Where(estimate.ID(id))
		query, err := query.CollectFields(ctx, "Estimate")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case estimateactivity.Table:
		query := c.EstimateActivity.Query().
			Where(estimateactivity.ID(id))
		query, err := query.CollectFields(ctx, "EstimateActivity")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case homeowner.Table:
		query := c.HomeOwner.Query().
			Where(homeowner.ID(id))
		query, err := query.CollectFields(ctx, "HomeOwner")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case installationjob.Table:
		query := c.InstallationJob.Query().
			Where(installationjob.ID(id))
		query, err := query.CollectFields(ctx, "InstallationJob")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case installationjobitem.Table:
		query := c.InstallationJobItem.Query().
			Where(installationjobitem.ID(id))
		query, err := query.CollectFields(ctx, "InstallationJobItem")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case installationjobprogress.Table:
		query := c.InstallationJobProgress.Query().
			Where(installationjobprogress.ID(id))
		query, err := query.CollectFields(ctx, "InstallationJobProgress")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case job.Table:
		query := c.Job.Query().
			Where(job.ID(id))
		query, err := query.CollectFields(ctx, "Job")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case jobactivity.Table:
		query := c.JobActivity.Query().
			Where(jobactivity.ID(id))
		query, err := query.CollectFields(ctx, "JobActivity")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case jobassignmenthistory.Table:
		query := c.JobAssignmentHistory.Query().
			Where(jobassignmenthistory.ID(id))
		query, err := query.CollectFields(ctx, "JobAssignmentHistory")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case jobdocurl.Table:
		query := c.JobDocURL.Query().
			Where(jobdocurl.ID(id))
		query, err := query.CollectFields(ctx, "JobDocURL")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case jobnote.Table:
		query := c.JobNote.Query().
			Where(jobnote.ID(id))
		query, err := query.CollectFields(ctx, "JobNote")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case jobprogresshistory.Table:
		query := c.JobProgressHistory.Query().
			Where(jobprogresshistory.ID(id))
		query, err := query.CollectFields(ctx, "JobProgressHistory")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case notifysetting.Table:
		query := c.NotifySetting.Query().
			Where(notifysetting.ID(id))
		query, err := query.CollectFields(ctx, "NotifySetting")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case optionlist.Table:
		query := c.OptionList.Query().
			Where(optionlist.ID(id))
		query, err := query.CollectFields(ctx, "OptionList")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partner.Table:
		query := c.Partner.Query().
			Where(partner.ID(id))
		query, err := query.CollectFields(ctx, "Partner")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partneractivity.Table:
		query := c.PartnerActivity.Query().
			Where(partneractivity.ID(id))
		query, err := query.CollectFields(ctx, "PartnerActivity")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partnercontact.Table:
		query := c.PartnerContact.Query().
			Where(partnercontact.ID(id))
		query, err := query.CollectFields(ctx, "PartnerContact")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partnerservice.Table:
		query := c.PartnerService.Query().
			Where(partnerservice.ID(id))
		query, err := query.CollectFields(ctx, "PartnerService")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partnerservicecity.Table:
		query := c.PartnerServiceCity.Query().
			Where(partnerservicecity.ID(id))
		query, err := query.CollectFields(ctx, "PartnerServiceCity")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partnerservicestate.Table:
		query := c.PartnerServiceState.Query().
			Where(partnerservicestate.ID(id))
		query, err := query.CollectFields(ctx, "PartnerServiceState")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case partnertrainingvideo.Table:
		query := c.PartnerTrainingVideo.Query().
			Where(partnertrainingvideo.ID(id))
		query, err := query.CollectFields(ctx, "PartnerTrainingVideo")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case payment.Table:
		query := c.Payment.Query().
			Where(payment.ID(id))
		query, err := query.CollectFields(ctx, "Payment")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case postalcode.Table:
		query := c.PostalCode.Query().
			Where(postalcode.ID(id))
		query, err := query.CollectFields(ctx, "PostalCode")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case pricing.Table:
		query := c.Pricing.Query().
			Where(pricing.ID(id))
		query, err := query.CollectFields(ctx, "Pricing")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case product.Table:
		query := c.Product.Query().
			Where(product.ID(id))
		query, err := query.CollectFields(ctx, "Product")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case productpackage.Table:
		query := c.ProductPackage.Query().
			Where(productpackage.ID(id))
		query, err := query.CollectFields(ctx, "ProductPackage")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case survey.Table:
		query := c.Survey.Query().
			Where(survey.ID(id))
		query, err := query.CollectFields(ctx, "Survey")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case surveyprogress.Table:
		query := c.SurveyProgress.Query().
			Where(surveyprogress.ID(id))
		query, err := query.CollectFields(ctx, "SurveyProgress")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case token.Table:
		query := c.Token.Query().
			Where(token.ID(id))
		query, err := query.CollectFields(ctx, "Token")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case trainingcourse.Table:
		query := c.TrainingCourse.Query().
			Where(trainingcourse.ID(id))
		query, err := query.CollectFields(ctx, "TrainingCourse")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case trainingvideo.Table:
		query := c.TrainingVideo.Query().
			Where(trainingvideo.ID(id))
		query, err := query.CollectFields(ctx, "TrainingVideo")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		query := c.User.Query().
			Where(user.ID(id))
		query, err := query.CollectFields(ctx, "User")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case useractivity.Table:
		query := c.UserActivity.Query().
			Where(useractivity.ID(id))
		query, err := query.CollectFields(ctx, "UserActivity")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case userauth.Table:
		query := c.UserAuth.Query().
			Where(userauth.ID(id))
		query, err := query.CollectFields(ctx, "UserAuth")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case usersession.Table:
		query := c.UserSession.Query().
			Where(usersession.ID(id))
		query, err := query.CollectFields(ctx, "UserSession")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case usersessionsocket.Table:
		query := c.UserSessionSocket.Query().
			Where(usersessionsocket.ID(id))
		query, err := query.CollectFields(ctx, "UserSessionSocket")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []string, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]string)
	id2idx := make(map[string][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []string) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[string][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case apiaccess.Table:
		query := c.ApiAccess.Query().
			Where(apiaccess.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ApiAccess")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case apiuser.Table:
		query := c.ApiUser.Query().
			Where(apiuser.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ApiUser")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case apiusertoken.Table:
		query := c.ApiUserToken.Query().
			Where(apiusertoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ApiUserToken")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case auditlog.Table:
		query := c.AuditLog.Query().
			Where(auditlog.IDIn(ids...))
		query, err := query.CollectFields(ctx, "AuditLog")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case channel.Table:
		query := c.Channel.Query().
			Where(channel.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Channel")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case channelmessage.Table:
		query := c.ChannelMessage.Query().
			Where(channelmessage.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ChannelMessage")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case channelmessageread.Table:
		query := c.ChannelMessageRead.Query().
			Where(channelmessageread.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ChannelMessageRead")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case channelsub.Table:
		query := c.ChannelSub.Query().
			Where(channelsub.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ChannelSub")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case contactus.Table:
		query := c.ContactUs.Query().
			Where(contactus.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ContactUs")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case document.Table:
		query := c.Document.Query().
			Where(document.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Document")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case estimate.Table:
		query := c.Estimate.Query().
			Where(estimate.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Estimate")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case estimateactivity.Table:
		query := c.EstimateActivity.Query().
			Where(estimateactivity.IDIn(ids...))
		query, err := query.CollectFields(ctx, "EstimateActivity")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case homeowner.Table:
		query := c.HomeOwner.Query().
			Where(homeowner.IDIn(ids...))
		query, err := query.CollectFields(ctx, "HomeOwner")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case installationjob.Table:
		query := c.InstallationJob.Query().
			Where(installationjob.IDIn(ids...))
		query, err := query.CollectFields(ctx, "InstallationJob")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case installationjobitem.Table:
		query := c.InstallationJobItem.Query().
			Where(installationjobitem.IDIn(ids...))
		query, err := query.CollectFields(ctx, "InstallationJobItem")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case installationjobprogress.Table:
		query := c.InstallationJobProgress.Query().
			Where(installationjobprogress.IDIn(ids...))
		query, err := query.CollectFields(ctx, "InstallationJobProgress")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case job.Table:
		query := c.Job.Query().
			Where(job.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Job")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case jobactivity.Table:
		query := c.JobActivity.Query().
			Where(jobactivity.IDIn(ids...))
		query, err := query.CollectFields(ctx, "JobActivity")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case jobassignmenthistory.Table:
		query := c.JobAssignmentHistory.Query().
			Where(jobassignmenthistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, "JobAssignmentHistory")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case jobdocurl.Table:
		query := c.JobDocURL.Query().
			Where(jobdocurl.IDIn(ids...))
		query, err := query.CollectFields(ctx, "JobDocURL")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case jobnote.Table:
		query := c.JobNote.Query().
			Where(jobnote.IDIn(ids...))
		query, err := query.CollectFields(ctx, "JobNote")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case jobprogresshistory.Table:
		query := c.JobProgressHistory.Query().
			Where(jobprogresshistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, "JobProgressHistory")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case notifysetting.Table:
		query := c.NotifySetting.Query().
			Where(notifysetting.IDIn(ids...))
		query, err := query.CollectFields(ctx, "NotifySetting")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case optionlist.Table:
		query := c.OptionList.Query().
			Where(optionlist.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OptionList")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partner.Table:
		query := c.Partner.Query().
			Where(partner.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Partner")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partneractivity.Table:
		query := c.PartnerActivity.Query().
			Where(partneractivity.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PartnerActivity")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partnercontact.Table:
		query := c.PartnerContact.Query().
			Where(partnercontact.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PartnerContact")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partnerservice.Table:
		query := c.PartnerService.Query().
			Where(partnerservice.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PartnerService")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partnerservicecity.Table:
		query := c.PartnerServiceCity.Query().
			Where(partnerservicecity.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PartnerServiceCity")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partnerservicestate.Table:
		query := c.PartnerServiceState.Query().
			Where(partnerservicestate.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PartnerServiceState")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case partnertrainingvideo.Table:
		query := c.PartnerTrainingVideo.Query().
			Where(partnertrainingvideo.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PartnerTrainingVideo")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case payment.Table:
		query := c.Payment.Query().
			Where(payment.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Payment")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case postalcode.Table:
		query := c.PostalCode.Query().
			Where(postalcode.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PostalCode")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case pricing.Table:
		query := c.Pricing.Query().
			Where(pricing.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Pricing")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case product.Table:
		query := c.Product.Query().
			Where(product.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Product")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case productpackage.Table:
		query := c.ProductPackage.Query().
			Where(productpackage.IDIn(ids...))
		query, err := query.CollectFields(ctx, "ProductPackage")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case survey.Table:
		query := c.Survey.Query().
			Where(survey.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Survey")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case surveyprogress.Table:
		query := c.SurveyProgress.Query().
			Where(surveyprogress.IDIn(ids...))
		query, err := query.CollectFields(ctx, "SurveyProgress")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case token.Table:
		query := c.Token.Query().
			Where(token.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Token")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case trainingcourse.Table:
		query := c.TrainingCourse.Query().
			Where(trainingcourse.IDIn(ids...))
		query, err := query.CollectFields(ctx, "TrainingCourse")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case trainingvideo.Table:
		query := c.TrainingVideo.Query().
			Where(trainingvideo.IDIn(ids...))
		query, err := query.CollectFields(ctx, "TrainingVideo")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		query := c.User.Query().
			Where(user.IDIn(ids...))
		query, err := query.CollectFields(ctx, "User")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case useractivity.Table:
		query := c.UserActivity.Query().
			Where(useractivity.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserActivity")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case userauth.Table:
		query := c.UserAuth.Query().
			Where(userauth.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserAuth")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case usersession.Table:
		query := c.UserSession.Query().
			Where(usersession.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserSession")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case usersessionsocket.Table:
		query := c.UserSessionSocket.Query().
			Where(usersessionsocket.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserSessionSocket")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

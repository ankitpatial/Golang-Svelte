// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/notifysetting"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotifySettingUpdate is the builder for updating NotifySetting entities.
type NotifySettingUpdate struct {
	config
	hooks     []Hook
	mutation  *NotifySettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotifySettingUpdate builder.
func (nsu *NotifySettingUpdate) Where(ps ...predicate.NotifySetting) *NotifySettingUpdate {
	nsu.mutation.Where(ps...)
	return nsu
}

// SetTopicID sets the "topic_id" field.
func (nsu *NotifySettingUpdate) SetTopicID(s string) *NotifySettingUpdate {
	nsu.mutation.SetTopicID(s)
	return nsu
}

// SetReceiveEmail sets the "receive_email" field.
func (nsu *NotifySettingUpdate) SetReceiveEmail(b bool) *NotifySettingUpdate {
	nsu.mutation.SetReceiveEmail(b)
	return nsu
}

// SetNillableReceiveEmail sets the "receive_email" field if the given value is not nil.
func (nsu *NotifySettingUpdate) SetNillableReceiveEmail(b *bool) *NotifySettingUpdate {
	if b != nil {
		nsu.SetReceiveEmail(*b)
	}
	return nsu
}

// ClearReceiveEmail clears the value of the "receive_email" field.
func (nsu *NotifySettingUpdate) ClearReceiveEmail() *NotifySettingUpdate {
	nsu.mutation.ClearReceiveEmail()
	return nsu
}

// SetReceiveSms sets the "receive_sms" field.
func (nsu *NotifySettingUpdate) SetReceiveSms(b bool) *NotifySettingUpdate {
	nsu.mutation.SetReceiveSms(b)
	return nsu
}

// SetNillableReceiveSms sets the "receive_sms" field if the given value is not nil.
func (nsu *NotifySettingUpdate) SetNillableReceiveSms(b *bool) *NotifySettingUpdate {
	if b != nil {
		nsu.SetReceiveSms(*b)
	}
	return nsu
}

// ClearReceiveSms clears the value of the "receive_sms" field.
func (nsu *NotifySettingUpdate) ClearReceiveSms() *NotifySettingUpdate {
	nsu.mutation.ClearReceiveSms()
	return nsu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nsu *NotifySettingUpdate) SetUserID(id string) *NotifySettingUpdate {
	nsu.mutation.SetUserID(id)
	return nsu
}

// SetUser sets the "user" edge to the User entity.
func (nsu *NotifySettingUpdate) SetUser(u *User) *NotifySettingUpdate {
	return nsu.SetUserID(u.ID)
}

// Mutation returns the NotifySettingMutation object of the builder.
func (nsu *NotifySettingUpdate) Mutation() *NotifySettingMutation {
	return nsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nsu *NotifySettingUpdate) ClearUser() *NotifySettingUpdate {
	nsu.mutation.ClearUser()
	return nsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nsu *NotifySettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nsu.sqlSave, nsu.mutation, nsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nsu *NotifySettingUpdate) SaveX(ctx context.Context) int {
	affected, err := nsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nsu *NotifySettingUpdate) Exec(ctx context.Context) error {
	_, err := nsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsu *NotifySettingUpdate) ExecX(ctx context.Context) {
	if err := nsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsu *NotifySettingUpdate) check() error {
	if v, ok := nsu.mutation.TopicID(); ok {
		if err := notifysetting.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "NotifySetting.topic_id": %w`, err)}
		}
	}
	if _, ok := nsu.mutation.UserID(); nsu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NotifySetting.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nsu *NotifySettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifySettingUpdate {
	nsu.modifiers = append(nsu.modifiers, modifiers...)
	return nsu
}

func (nsu *NotifySettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notifysetting.Table, notifysetting.Columns, sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString))
	if ps := nsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsu.mutation.TopicID(); ok {
		_spec.SetField(notifysetting.FieldTopicID, field.TypeString, value)
	}
	if value, ok := nsu.mutation.ReceiveEmail(); ok {
		_spec.SetField(notifysetting.FieldReceiveEmail, field.TypeBool, value)
	}
	if nsu.mutation.ReceiveEmailCleared() {
		_spec.ClearField(notifysetting.FieldReceiveEmail, field.TypeBool)
	}
	if value, ok := nsu.mutation.ReceiveSms(); ok {
		_spec.SetField(notifysetting.FieldReceiveSms, field.TypeBool, value)
	}
	if nsu.mutation.ReceiveSmsCleared() {
		_spec.ClearField(notifysetting.FieldReceiveSms, field.TypeBool)
	}
	if nsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysetting.UserTable,
			Columns: []string{notifysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysetting.UserTable,
			Columns: []string{notifysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifysetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nsu.mutation.done = true
	return n, nil
}

// NotifySettingUpdateOne is the builder for updating a single NotifySetting entity.
type NotifySettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotifySettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTopicID sets the "topic_id" field.
func (nsuo *NotifySettingUpdateOne) SetTopicID(s string) *NotifySettingUpdateOne {
	nsuo.mutation.SetTopicID(s)
	return nsuo
}

// SetReceiveEmail sets the "receive_email" field.
func (nsuo *NotifySettingUpdateOne) SetReceiveEmail(b bool) *NotifySettingUpdateOne {
	nsuo.mutation.SetReceiveEmail(b)
	return nsuo
}

// SetNillableReceiveEmail sets the "receive_email" field if the given value is not nil.
func (nsuo *NotifySettingUpdateOne) SetNillableReceiveEmail(b *bool) *NotifySettingUpdateOne {
	if b != nil {
		nsuo.SetReceiveEmail(*b)
	}
	return nsuo
}

// ClearReceiveEmail clears the value of the "receive_email" field.
func (nsuo *NotifySettingUpdateOne) ClearReceiveEmail() *NotifySettingUpdateOne {
	nsuo.mutation.ClearReceiveEmail()
	return nsuo
}

// SetReceiveSms sets the "receive_sms" field.
func (nsuo *NotifySettingUpdateOne) SetReceiveSms(b bool) *NotifySettingUpdateOne {
	nsuo.mutation.SetReceiveSms(b)
	return nsuo
}

// SetNillableReceiveSms sets the "receive_sms" field if the given value is not nil.
func (nsuo *NotifySettingUpdateOne) SetNillableReceiveSms(b *bool) *NotifySettingUpdateOne {
	if b != nil {
		nsuo.SetReceiveSms(*b)
	}
	return nsuo
}

// ClearReceiveSms clears the value of the "receive_sms" field.
func (nsuo *NotifySettingUpdateOne) ClearReceiveSms() *NotifySettingUpdateOne {
	nsuo.mutation.ClearReceiveSms()
	return nsuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nsuo *NotifySettingUpdateOne) SetUserID(id string) *NotifySettingUpdateOne {
	nsuo.mutation.SetUserID(id)
	return nsuo
}

// SetUser sets the "user" edge to the User entity.
func (nsuo *NotifySettingUpdateOne) SetUser(u *User) *NotifySettingUpdateOne {
	return nsuo.SetUserID(u.ID)
}

// Mutation returns the NotifySettingMutation object of the builder.
func (nsuo *NotifySettingUpdateOne) Mutation() *NotifySettingMutation {
	return nsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nsuo *NotifySettingUpdateOne) ClearUser() *NotifySettingUpdateOne {
	nsuo.mutation.ClearUser()
	return nsuo
}

// Where appends a list predicates to the NotifySettingUpdate builder.
func (nsuo *NotifySettingUpdateOne) Where(ps ...predicate.NotifySetting) *NotifySettingUpdateOne {
	nsuo.mutation.Where(ps...)
	return nsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nsuo *NotifySettingUpdateOne) Select(field string, fields ...string) *NotifySettingUpdateOne {
	nsuo.fields = append([]string{field}, fields...)
	return nsuo
}

// Save executes the query and returns the updated NotifySetting entity.
func (nsuo *NotifySettingUpdateOne) Save(ctx context.Context) (*NotifySetting, error) {
	return withHooks(ctx, nsuo.sqlSave, nsuo.mutation, nsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nsuo *NotifySettingUpdateOne) SaveX(ctx context.Context) *NotifySetting {
	node, err := nsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nsuo *NotifySettingUpdateOne) Exec(ctx context.Context) error {
	_, err := nsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsuo *NotifySettingUpdateOne) ExecX(ctx context.Context) {
	if err := nsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsuo *NotifySettingUpdateOne) check() error {
	if v, ok := nsuo.mutation.TopicID(); ok {
		if err := notifysetting.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "NotifySetting.topic_id": %w`, err)}
		}
	}
	if _, ok := nsuo.mutation.UserID(); nsuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NotifySetting.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nsuo *NotifySettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifySettingUpdateOne {
	nsuo.modifiers = append(nsuo.modifiers, modifiers...)
	return nsuo
}

func (nsuo *NotifySettingUpdateOne) sqlSave(ctx context.Context) (_node *NotifySetting, err error) {
	if err := nsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notifysetting.Table, notifysetting.Columns, sqlgraph.NewFieldSpec(notifysetting.FieldID, field.TypeString))
	id, ok := nsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifySetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifysetting.FieldID)
		for _, f := range fields {
			if !notifysetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifysetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsuo.mutation.TopicID(); ok {
		_spec.SetField(notifysetting.FieldTopicID, field.TypeString, value)
	}
	if value, ok := nsuo.mutation.ReceiveEmail(); ok {
		_spec.SetField(notifysetting.FieldReceiveEmail, field.TypeBool, value)
	}
	if nsuo.mutation.ReceiveEmailCleared() {
		_spec.ClearField(notifysetting.FieldReceiveEmail, field.TypeBool)
	}
	if value, ok := nsuo.mutation.ReceiveSms(); ok {
		_spec.SetField(notifysetting.FieldReceiveSms, field.TypeBool, value)
	}
	if nsuo.mutation.ReceiveSmsCleared() {
		_spec.ClearField(notifysetting.FieldReceiveSms, field.TypeBool)
	}
	if nsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysetting.UserTable,
			Columns: []string{notifysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysetting.UserTable,
			Columns: []string{notifysetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nsuo.modifiers...)
	_node = &NotifySetting{config: nsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifysetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nsuo.mutation.done = true
	return _node, nil
}

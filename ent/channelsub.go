// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/channel"
	"roofix/ent/channelsub"
	"roofix/ent/partner"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChannelSub is the model entity for the ChannelSub schema.
type ChannelSub struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Role holds the value of the "role" field.
	Role *enum.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelSubQuery when eager-loading is set.
	Edges        ChannelSubEdges `json:"edges"`
	channel_id   *string
	partner_id   *string
	user_id      *string
	selectValues sql.SelectValues
}

// ChannelSubEdges holds the relations/edges for other nodes in the graph.
type ChannelSubEdges struct {
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Partner holds the value of the partner edge.
	Partner *Partner `json:"partner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelSubEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[0] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelSubEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelSubEdges) PartnerOrErr() (*Partner, error) {
	if e.loadedTypes[2] {
		if e.Partner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChannelSub) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channelsub.FieldID, channelsub.FieldRole:
			values[i] = new(sql.NullString)
		case channelsub.FieldCreatedAt, channelsub.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case channelsub.ForeignKeys[0]: // channel_id
			values[i] = new(sql.NullString)
		case channelsub.ForeignKeys[1]: // partner_id
			values[i] = new(sql.NullString)
		case channelsub.ForeignKeys[2]: // user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChannelSub fields.
func (cs *ChannelSub) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channelsub.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cs.ID = value.String
			}
		case channelsub.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case channelsub.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case channelsub.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				cs.Role = new(enum.Role)
				*cs.Role = enum.Role(value.String)
			}
		case channelsub.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				cs.channel_id = new(string)
				*cs.channel_id = value.String
			}
		case channelsub.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				cs.partner_id = new(string)
				*cs.partner_id = value.String
			}
		case channelsub.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cs.user_id = new(string)
				*cs.user_id = value.String
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChannelSub.
// This includes values selected through modifiers, order, etc.
func (cs *ChannelSub) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryChannel queries the "channel" edge of the ChannelSub entity.
func (cs *ChannelSub) QueryChannel() *ChannelQuery {
	return NewChannelSubClient(cs.config).QueryChannel(cs)
}

// QueryUser queries the "user" edge of the ChannelSub entity.
func (cs *ChannelSub) QueryUser() *UserQuery {
	return NewChannelSubClient(cs.config).QueryUser(cs)
}

// QueryPartner queries the "partner" edge of the ChannelSub entity.
func (cs *ChannelSub) QueryPartner() *PartnerQuery {
	return NewChannelSubClient(cs.config).QueryPartner(cs)
}

// Update returns a builder for updating this ChannelSub.
// Note that you need to call ChannelSub.Unwrap() before calling this method if this ChannelSub
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ChannelSub) Update() *ChannelSubUpdateOne {
	return NewChannelSubClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ChannelSub entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ChannelSub) Unwrap() *ChannelSub {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChannelSub is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ChannelSub) String() string {
	var builder strings.Builder
	builder.WriteString("ChannelSub(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cs.Role; v != nil {
		builder.WriteString("role=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ChannelSubs is a parsable slice of ChannelSub.
type ChannelSubs []*ChannelSub

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobprogress"
	"roofix/ent/predicate"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobProgressUpdate is the builder for updating InstallationJobProgress entities.
type InstallationJobProgressUpdate struct {
	config
	hooks     []Hook
	mutation  *InstallationJobProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InstallationJobProgressUpdate builder.
func (ijpu *InstallationJobProgressUpdate) Where(ps ...predicate.InstallationJobProgress) *InstallationJobProgressUpdate {
	ijpu.mutation.Where(ps...)
	return ijpu
}

// SetUpdatedAt sets the "updated_at" field.
func (ijpu *InstallationJobProgressUpdate) SetUpdatedAt(t time.Time) *InstallationJobProgressUpdate {
	ijpu.mutation.SetUpdatedAt(t)
	return ijpu
}

// SetJobID sets the "job" edge to the InstallationJob entity by ID.
func (ijpu *InstallationJobProgressUpdate) SetJobID(id string) *InstallationJobProgressUpdate {
	ijpu.mutation.SetJobID(id)
	return ijpu
}

// SetNillableJobID sets the "job" edge to the InstallationJob entity by ID if the given value is not nil.
func (ijpu *InstallationJobProgressUpdate) SetNillableJobID(id *string) *InstallationJobProgressUpdate {
	if id != nil {
		ijpu = ijpu.SetJobID(*id)
	}
	return ijpu
}

// SetJob sets the "job" edge to the InstallationJob entity.
func (ijpu *InstallationJobProgressUpdate) SetJob(i *InstallationJob) *InstallationJobProgressUpdate {
	return ijpu.SetJobID(i.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ijpu *InstallationJobProgressUpdate) SetCreatorID(id string) *InstallationJobProgressUpdate {
	ijpu.mutation.SetCreatorID(id)
	return ijpu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ijpu *InstallationJobProgressUpdate) SetNillableCreatorID(id *string) *InstallationJobProgressUpdate {
	if id != nil {
		ijpu = ijpu.SetCreatorID(*id)
	}
	return ijpu
}

// SetCreator sets the "creator" edge to the User entity.
func (ijpu *InstallationJobProgressUpdate) SetCreator(u *User) *InstallationJobProgressUpdate {
	return ijpu.SetCreatorID(u.ID)
}

// Mutation returns the InstallationJobProgressMutation object of the builder.
func (ijpu *InstallationJobProgressUpdate) Mutation() *InstallationJobProgressMutation {
	return ijpu.mutation
}

// ClearJob clears the "job" edge to the InstallationJob entity.
func (ijpu *InstallationJobProgressUpdate) ClearJob() *InstallationJobProgressUpdate {
	ijpu.mutation.ClearJob()
	return ijpu
}

// ClearCreator clears the "creator" edge to the User entity.
func (ijpu *InstallationJobProgressUpdate) ClearCreator() *InstallationJobProgressUpdate {
	ijpu.mutation.ClearCreator()
	return ijpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ijpu *InstallationJobProgressUpdate) Save(ctx context.Context) (int, error) {
	ijpu.defaults()
	return withHooks(ctx, ijpu.sqlSave, ijpu.mutation, ijpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ijpu *InstallationJobProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := ijpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ijpu *InstallationJobProgressUpdate) Exec(ctx context.Context) error {
	_, err := ijpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijpu *InstallationJobProgressUpdate) ExecX(ctx context.Context) {
	if err := ijpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ijpu *InstallationJobProgressUpdate) defaults() {
	if _, ok := ijpu.mutation.UpdatedAt(); !ok {
		v := installationjobprogress.UpdateDefaultUpdatedAt()
		ijpu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ijpu *InstallationJobProgressUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstallationJobProgressUpdate {
	ijpu.modifiers = append(ijpu.modifiers, modifiers...)
	return ijpu
}

func (ijpu *InstallationJobProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(installationjobprogress.Table, installationjobprogress.Columns, sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString))
	if ps := ijpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ijpu.mutation.UpdatedAt(); ok {
		_spec.SetField(installationjobprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if ijpu.mutation.CompleteCleared() {
		_spec.ClearField(installationjobprogress.FieldComplete, field.TypeBool)
	}
	if ijpu.mutation.NoteCleared() {
		_spec.ClearField(installationjobprogress.FieldNote, field.TypeString)
	}
	if ijpu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.JobTable,
			Columns: []string{installationjobprogress.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijpu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.JobTable,
			Columns: []string{installationjobprogress.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijpu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.CreatorTable,
			Columns: []string{installationjobprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijpu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.CreatorTable,
			Columns: []string{installationjobprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ijpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ijpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installationjobprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ijpu.mutation.done = true
	return n, nil
}

// InstallationJobProgressUpdateOne is the builder for updating a single InstallationJobProgress entity.
type InstallationJobProgressUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InstallationJobProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ijpuo *InstallationJobProgressUpdateOne) SetUpdatedAt(t time.Time) *InstallationJobProgressUpdateOne {
	ijpuo.mutation.SetUpdatedAt(t)
	return ijpuo
}

// SetJobID sets the "job" edge to the InstallationJob entity by ID.
func (ijpuo *InstallationJobProgressUpdateOne) SetJobID(id string) *InstallationJobProgressUpdateOne {
	ijpuo.mutation.SetJobID(id)
	return ijpuo
}

// SetNillableJobID sets the "job" edge to the InstallationJob entity by ID if the given value is not nil.
func (ijpuo *InstallationJobProgressUpdateOne) SetNillableJobID(id *string) *InstallationJobProgressUpdateOne {
	if id != nil {
		ijpuo = ijpuo.SetJobID(*id)
	}
	return ijpuo
}

// SetJob sets the "job" edge to the InstallationJob entity.
func (ijpuo *InstallationJobProgressUpdateOne) SetJob(i *InstallationJob) *InstallationJobProgressUpdateOne {
	return ijpuo.SetJobID(i.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ijpuo *InstallationJobProgressUpdateOne) SetCreatorID(id string) *InstallationJobProgressUpdateOne {
	ijpuo.mutation.SetCreatorID(id)
	return ijpuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ijpuo *InstallationJobProgressUpdateOne) SetNillableCreatorID(id *string) *InstallationJobProgressUpdateOne {
	if id != nil {
		ijpuo = ijpuo.SetCreatorID(*id)
	}
	return ijpuo
}

// SetCreator sets the "creator" edge to the User entity.
func (ijpuo *InstallationJobProgressUpdateOne) SetCreator(u *User) *InstallationJobProgressUpdateOne {
	return ijpuo.SetCreatorID(u.ID)
}

// Mutation returns the InstallationJobProgressMutation object of the builder.
func (ijpuo *InstallationJobProgressUpdateOne) Mutation() *InstallationJobProgressMutation {
	return ijpuo.mutation
}

// ClearJob clears the "job" edge to the InstallationJob entity.
func (ijpuo *InstallationJobProgressUpdateOne) ClearJob() *InstallationJobProgressUpdateOne {
	ijpuo.mutation.ClearJob()
	return ijpuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (ijpuo *InstallationJobProgressUpdateOne) ClearCreator() *InstallationJobProgressUpdateOne {
	ijpuo.mutation.ClearCreator()
	return ijpuo
}

// Where appends a list predicates to the InstallationJobProgressUpdate builder.
func (ijpuo *InstallationJobProgressUpdateOne) Where(ps ...predicate.InstallationJobProgress) *InstallationJobProgressUpdateOne {
	ijpuo.mutation.Where(ps...)
	return ijpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ijpuo *InstallationJobProgressUpdateOne) Select(field string, fields ...string) *InstallationJobProgressUpdateOne {
	ijpuo.fields = append([]string{field}, fields...)
	return ijpuo
}

// Save executes the query and returns the updated InstallationJobProgress entity.
func (ijpuo *InstallationJobProgressUpdateOne) Save(ctx context.Context) (*InstallationJobProgress, error) {
	ijpuo.defaults()
	return withHooks(ctx, ijpuo.sqlSave, ijpuo.mutation, ijpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ijpuo *InstallationJobProgressUpdateOne) SaveX(ctx context.Context) *InstallationJobProgress {
	node, err := ijpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ijpuo *InstallationJobProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := ijpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijpuo *InstallationJobProgressUpdateOne) ExecX(ctx context.Context) {
	if err := ijpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ijpuo *InstallationJobProgressUpdateOne) defaults() {
	if _, ok := ijpuo.mutation.UpdatedAt(); !ok {
		v := installationjobprogress.UpdateDefaultUpdatedAt()
		ijpuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ijpuo *InstallationJobProgressUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstallationJobProgressUpdateOne {
	ijpuo.modifiers = append(ijpuo.modifiers, modifiers...)
	return ijpuo
}

func (ijpuo *InstallationJobProgressUpdateOne) sqlSave(ctx context.Context) (_node *InstallationJobProgress, err error) {
	_spec := sqlgraph.NewUpdateSpec(installationjobprogress.Table, installationjobprogress.Columns, sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString))
	id, ok := ijpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstallationJobProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ijpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installationjobprogress.FieldID)
		for _, f := range fields {
			if !installationjobprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != installationjobprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ijpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ijpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(installationjobprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if ijpuo.mutation.CompleteCleared() {
		_spec.ClearField(installationjobprogress.FieldComplete, field.TypeBool)
	}
	if ijpuo.mutation.NoteCleared() {
		_spec.ClearField(installationjobprogress.FieldNote, field.TypeString)
	}
	if ijpuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.JobTable,
			Columns: []string{installationjobprogress.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijpuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.JobTable,
			Columns: []string{installationjobprogress.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ijpuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.CreatorTable,
			Columns: []string{installationjobprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ijpuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjobprogress.CreatorTable,
			Columns: []string{installationjobprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ijpuo.modifiers...)
	_node = &InstallationJobProgress{config: ijpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ijpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installationjobprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ijpuo.mutation.done = true
	return _node, nil
}

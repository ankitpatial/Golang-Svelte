// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/postalcode"
	"roofix/ent/predicate"
	"roofix/ent/pricing"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostalCodeUpdate is the builder for updating PostalCode entities.
type PostalCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *PostalCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostalCodeUpdate builder.
func (pcu *PostalCodeUpdate) Where(ps ...predicate.PostalCode) *PostalCodeUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PostalCodeUpdate) SetUpdatedAt(t time.Time) *PostalCodeUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetCountry sets the "country" field.
func (pcu *PostalCodeUpdate) SetCountry(s string) *PostalCodeUpdate {
	pcu.mutation.SetCountry(s)
	return pcu
}

// SetCode sets the "code" field.
func (pcu *PostalCodeUpdate) SetCode(s string) *PostalCodeUpdate {
	pcu.mutation.SetCode(s)
	return pcu
}

// SetCity sets the "city" field.
func (pcu *PostalCodeUpdate) SetCity(s string) *PostalCodeUpdate {
	pcu.mutation.SetCity(s)
	return pcu
}

// SetState sets the "state" field.
func (pcu *PostalCodeUpdate) SetState(s string) *PostalCodeUpdate {
	pcu.mutation.SetState(s)
	return pcu
}

// SetStateAbr sets the "state_abr" field.
func (pcu *PostalCodeUpdate) SetStateAbr(s string) *PostalCodeUpdate {
	pcu.mutation.SetStateAbr(s)
	return pcu
}

// SetRegionID sets the "region_id" field.
func (pcu *PostalCodeUpdate) SetRegionID(u uint8) *PostalCodeUpdate {
	pcu.mutation.ResetRegionID()
	pcu.mutation.SetRegionID(u)
	return pcu
}

// AddRegionID adds u to the "region_id" field.
func (pcu *PostalCodeUpdate) AddRegionID(u int8) *PostalCodeUpdate {
	pcu.mutation.AddRegionID(u)
	return pcu
}

// SetLatitude sets the "latitude" field.
func (pcu *PostalCodeUpdate) SetLatitude(f float64) *PostalCodeUpdate {
	pcu.mutation.ResetLatitude()
	pcu.mutation.SetLatitude(f)
	return pcu
}

// AddLatitude adds f to the "latitude" field.
func (pcu *PostalCodeUpdate) AddLatitude(f float64) *PostalCodeUpdate {
	pcu.mutation.AddLatitude(f)
	return pcu
}

// SetLongitude sets the "longitude" field.
func (pcu *PostalCodeUpdate) SetLongitude(f float64) *PostalCodeUpdate {
	pcu.mutation.ResetLongitude()
	pcu.mutation.SetLongitude(f)
	return pcu
}

// AddLongitude adds f to the "longitude" field.
func (pcu *PostalCodeUpdate) AddLongitude(f float64) *PostalCodeUpdate {
	pcu.mutation.AddLongitude(f)
	return pcu
}

// SetAccuracy sets the "accuracy" field.
func (pcu *PostalCodeUpdate) SetAccuracy(u uint8) *PostalCodeUpdate {
	pcu.mutation.ResetAccuracy()
	pcu.mutation.SetAccuracy(u)
	return pcu
}

// AddAccuracy adds u to the "accuracy" field.
func (pcu *PostalCodeUpdate) AddAccuracy(u int8) *PostalCodeUpdate {
	pcu.mutation.AddAccuracy(u)
	return pcu
}

// SetServiceArea sets the "service_area" field.
func (pcu *PostalCodeUpdate) SetServiceArea(b bool) *PostalCodeUpdate {
	pcu.mutation.SetServiceArea(b)
	return pcu
}

// SetNillableServiceArea sets the "service_area" field if the given value is not nil.
func (pcu *PostalCodeUpdate) SetNillableServiceArea(b *bool) *PostalCodeUpdate {
	if b != nil {
		pcu.SetServiceArea(*b)
	}
	return pcu
}

// AddPricingIDs adds the "pricing" edge to the Pricing entity by IDs.
func (pcu *PostalCodeUpdate) AddPricingIDs(ids ...string) *PostalCodeUpdate {
	pcu.mutation.AddPricingIDs(ids...)
	return pcu
}

// AddPricing adds the "pricing" edges to the Pricing entity.
func (pcu *PostalCodeUpdate) AddPricing(p ...*Pricing) *PostalCodeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPricingIDs(ids...)
}

// Mutation returns the PostalCodeMutation object of the builder.
func (pcu *PostalCodeUpdate) Mutation() *PostalCodeMutation {
	return pcu.mutation
}

// ClearPricing clears all "pricing" edges to the Pricing entity.
func (pcu *PostalCodeUpdate) ClearPricing() *PostalCodeUpdate {
	pcu.mutation.ClearPricing()
	return pcu
}

// RemovePricingIDs removes the "pricing" edge to Pricing entities by IDs.
func (pcu *PostalCodeUpdate) RemovePricingIDs(ids ...string) *PostalCodeUpdate {
	pcu.mutation.RemovePricingIDs(ids...)
	return pcu
}

// RemovePricing removes "pricing" edges to Pricing entities.
func (pcu *PostalCodeUpdate) RemovePricing(p ...*Pricing) *PostalCodeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePricingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PostalCodeUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PostalCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PostalCodeUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PostalCodeUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PostalCodeUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := postalcode.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PostalCodeUpdate) check() error {
	if v, ok := pcu.mutation.Country(); ok {
		if err := postalcode.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "PostalCode.country": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.Code(); ok {
		if err := postalcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PostalCode.code": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.City(); ok {
		if err := postalcode.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "PostalCode.city": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.State(); ok {
		if err := postalcode.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PostalCode.state": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.StateAbr(); ok {
		if err := postalcode.StateAbrValidator(v); err != nil {
			return &ValidationError{Name: "state_abr", err: fmt.Errorf(`ent: validator failed for field "PostalCode.state_abr": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *PostalCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostalCodeUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *PostalCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(postalcode.Table, postalcode.Columns, sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(postalcode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.Country(); ok {
		_spec.SetField(postalcode.FieldCountry, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Code(); ok {
		_spec.SetField(postalcode.FieldCode, field.TypeString, value)
	}
	if value, ok := pcu.mutation.City(); ok {
		_spec.SetField(postalcode.FieldCity, field.TypeString, value)
	}
	if value, ok := pcu.mutation.State(); ok {
		_spec.SetField(postalcode.FieldState, field.TypeString, value)
	}
	if value, ok := pcu.mutation.StateAbr(); ok {
		_spec.SetField(postalcode.FieldStateAbr, field.TypeString, value)
	}
	if value, ok := pcu.mutation.RegionID(); ok {
		_spec.SetField(postalcode.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := pcu.mutation.AddedRegionID(); ok {
		_spec.AddField(postalcode.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := pcu.mutation.Latitude(); ok {
		_spec.SetField(postalcode.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedLatitude(); ok {
		_spec.AddField(postalcode.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.Longitude(); ok {
		_spec.SetField(postalcode.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedLongitude(); ok {
		_spec.AddField(postalcode.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.Accuracy(); ok {
		_spec.SetField(postalcode.FieldAccuracy, field.TypeUint8, value)
	}
	if value, ok := pcu.mutation.AddedAccuracy(); ok {
		_spec.AddField(postalcode.FieldAccuracy, field.TypeUint8, value)
	}
	if value, ok := pcu.mutation.ServiceArea(); ok {
		_spec.SetField(postalcode.FieldServiceArea, field.TypeBool, value)
	}
	if pcu.mutation.PricingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPricingIDs(); len(nodes) > 0 && !pcu.mutation.PricingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PricingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postalcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PostalCodeUpdateOne is the builder for updating a single PostalCode entity.
type PostalCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostalCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PostalCodeUpdateOne) SetUpdatedAt(t time.Time) *PostalCodeUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetCountry sets the "country" field.
func (pcuo *PostalCodeUpdateOne) SetCountry(s string) *PostalCodeUpdateOne {
	pcuo.mutation.SetCountry(s)
	return pcuo
}

// SetCode sets the "code" field.
func (pcuo *PostalCodeUpdateOne) SetCode(s string) *PostalCodeUpdateOne {
	pcuo.mutation.SetCode(s)
	return pcuo
}

// SetCity sets the "city" field.
func (pcuo *PostalCodeUpdateOne) SetCity(s string) *PostalCodeUpdateOne {
	pcuo.mutation.SetCity(s)
	return pcuo
}

// SetState sets the "state" field.
func (pcuo *PostalCodeUpdateOne) SetState(s string) *PostalCodeUpdateOne {
	pcuo.mutation.SetState(s)
	return pcuo
}

// SetStateAbr sets the "state_abr" field.
func (pcuo *PostalCodeUpdateOne) SetStateAbr(s string) *PostalCodeUpdateOne {
	pcuo.mutation.SetStateAbr(s)
	return pcuo
}

// SetRegionID sets the "region_id" field.
func (pcuo *PostalCodeUpdateOne) SetRegionID(u uint8) *PostalCodeUpdateOne {
	pcuo.mutation.ResetRegionID()
	pcuo.mutation.SetRegionID(u)
	return pcuo
}

// AddRegionID adds u to the "region_id" field.
func (pcuo *PostalCodeUpdateOne) AddRegionID(u int8) *PostalCodeUpdateOne {
	pcuo.mutation.AddRegionID(u)
	return pcuo
}

// SetLatitude sets the "latitude" field.
func (pcuo *PostalCodeUpdateOne) SetLatitude(f float64) *PostalCodeUpdateOne {
	pcuo.mutation.ResetLatitude()
	pcuo.mutation.SetLatitude(f)
	return pcuo
}

// AddLatitude adds f to the "latitude" field.
func (pcuo *PostalCodeUpdateOne) AddLatitude(f float64) *PostalCodeUpdateOne {
	pcuo.mutation.AddLatitude(f)
	return pcuo
}

// SetLongitude sets the "longitude" field.
func (pcuo *PostalCodeUpdateOne) SetLongitude(f float64) *PostalCodeUpdateOne {
	pcuo.mutation.ResetLongitude()
	pcuo.mutation.SetLongitude(f)
	return pcuo
}

// AddLongitude adds f to the "longitude" field.
func (pcuo *PostalCodeUpdateOne) AddLongitude(f float64) *PostalCodeUpdateOne {
	pcuo.mutation.AddLongitude(f)
	return pcuo
}

// SetAccuracy sets the "accuracy" field.
func (pcuo *PostalCodeUpdateOne) SetAccuracy(u uint8) *PostalCodeUpdateOne {
	pcuo.mutation.ResetAccuracy()
	pcuo.mutation.SetAccuracy(u)
	return pcuo
}

// AddAccuracy adds u to the "accuracy" field.
func (pcuo *PostalCodeUpdateOne) AddAccuracy(u int8) *PostalCodeUpdateOne {
	pcuo.mutation.AddAccuracy(u)
	return pcuo
}

// SetServiceArea sets the "service_area" field.
func (pcuo *PostalCodeUpdateOne) SetServiceArea(b bool) *PostalCodeUpdateOne {
	pcuo.mutation.SetServiceArea(b)
	return pcuo
}

// SetNillableServiceArea sets the "service_area" field if the given value is not nil.
func (pcuo *PostalCodeUpdateOne) SetNillableServiceArea(b *bool) *PostalCodeUpdateOne {
	if b != nil {
		pcuo.SetServiceArea(*b)
	}
	return pcuo
}

// AddPricingIDs adds the "pricing" edge to the Pricing entity by IDs.
func (pcuo *PostalCodeUpdateOne) AddPricingIDs(ids ...string) *PostalCodeUpdateOne {
	pcuo.mutation.AddPricingIDs(ids...)
	return pcuo
}

// AddPricing adds the "pricing" edges to the Pricing entity.
func (pcuo *PostalCodeUpdateOne) AddPricing(p ...*Pricing) *PostalCodeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPricingIDs(ids...)
}

// Mutation returns the PostalCodeMutation object of the builder.
func (pcuo *PostalCodeUpdateOne) Mutation() *PostalCodeMutation {
	return pcuo.mutation
}

// ClearPricing clears all "pricing" edges to the Pricing entity.
func (pcuo *PostalCodeUpdateOne) ClearPricing() *PostalCodeUpdateOne {
	pcuo.mutation.ClearPricing()
	return pcuo
}

// RemovePricingIDs removes the "pricing" edge to Pricing entities by IDs.
func (pcuo *PostalCodeUpdateOne) RemovePricingIDs(ids ...string) *PostalCodeUpdateOne {
	pcuo.mutation.RemovePricingIDs(ids...)
	return pcuo
}

// RemovePricing removes "pricing" edges to Pricing entities.
func (pcuo *PostalCodeUpdateOne) RemovePricing(p ...*Pricing) *PostalCodeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePricingIDs(ids...)
}

// Where appends a list predicates to the PostalCodeUpdate builder.
func (pcuo *PostalCodeUpdateOne) Where(ps ...predicate.PostalCode) *PostalCodeUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PostalCodeUpdateOne) Select(field string, fields ...string) *PostalCodeUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PostalCode entity.
func (pcuo *PostalCodeUpdateOne) Save(ctx context.Context) (*PostalCode, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PostalCodeUpdateOne) SaveX(ctx context.Context) *PostalCode {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PostalCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PostalCodeUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PostalCodeUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := postalcode.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PostalCodeUpdateOne) check() error {
	if v, ok := pcuo.mutation.Country(); ok {
		if err := postalcode.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "PostalCode.country": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.Code(); ok {
		if err := postalcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PostalCode.code": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.City(); ok {
		if err := postalcode.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "PostalCode.city": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.State(); ok {
		if err := postalcode.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PostalCode.state": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.StateAbr(); ok {
		if err := postalcode.StateAbrValidator(v); err != nil {
			return &ValidationError{Name: "state_abr", err: fmt.Errorf(`ent: validator failed for field "PostalCode.state_abr": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *PostalCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostalCodeUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *PostalCodeUpdateOne) sqlSave(ctx context.Context) (_node *PostalCode, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postalcode.Table, postalcode.Columns, sqlgraph.NewFieldSpec(postalcode.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostalCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postalcode.FieldID)
		for _, f := range fields {
			if !postalcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postalcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(postalcode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.Country(); ok {
		_spec.SetField(postalcode.FieldCountry, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Code(); ok {
		_spec.SetField(postalcode.FieldCode, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.City(); ok {
		_spec.SetField(postalcode.FieldCity, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.State(); ok {
		_spec.SetField(postalcode.FieldState, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.StateAbr(); ok {
		_spec.SetField(postalcode.FieldStateAbr, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.RegionID(); ok {
		_spec.SetField(postalcode.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := pcuo.mutation.AddedRegionID(); ok {
		_spec.AddField(postalcode.FieldRegionID, field.TypeUint8, value)
	}
	if value, ok := pcuo.mutation.Latitude(); ok {
		_spec.SetField(postalcode.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedLatitude(); ok {
		_spec.AddField(postalcode.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.Longitude(); ok {
		_spec.SetField(postalcode.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedLongitude(); ok {
		_spec.AddField(postalcode.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.Accuracy(); ok {
		_spec.SetField(postalcode.FieldAccuracy, field.TypeUint8, value)
	}
	if value, ok := pcuo.mutation.AddedAccuracy(); ok {
		_spec.AddField(postalcode.FieldAccuracy, field.TypeUint8, value)
	}
	if value, ok := pcuo.mutation.ServiceArea(); ok {
		_spec.SetField(postalcode.FieldServiceArea, field.TypeBool, value)
	}
	if pcuo.mutation.PricingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPricingIDs(); len(nodes) > 0 && !pcuo.mutation.PricingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PricingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postalcode.PricingTable,
			Columns: []string{postalcode.PricingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricing.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &PostalCode{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postalcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}

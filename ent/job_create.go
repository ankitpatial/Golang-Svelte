// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/jobdocurl"
	"roofix/ent/jobnote"
	"roofix/ent/jobprogresshistory"
	"roofix/ent/optionlist"
	"roofix/ent/partner"
	"roofix/ent/payment"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (jc *JobCreate) SetCreatedAt(t time.Time) *JobCreate {
	jc.mutation.SetCreatedAt(t)
	return jc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreatedAt(*t)
	}
	return jc
}

// SetUpdatedAt sets the "updated_at" field.
func (jc *JobCreate) SetUpdatedAt(t time.Time) *JobCreate {
	jc.mutation.SetUpdatedAt(t)
	return jc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableUpdatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetUpdatedAt(*t)
	}
	return jc
}

// SetProgress sets the "progress" field.
func (jc *JobCreate) SetProgress(ep enum.JobProgress) *JobCreate {
	jc.mutation.SetProgress(ep)
	return jc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (jc *JobCreate) SetNillableProgress(ep *enum.JobProgress) *JobCreate {
	if ep != nil {
		jc.SetProgress(*ep)
	}
	return jc
}

// SetProgressAt sets the "progress_at" field.
func (jc *JobCreate) SetProgressAt(t time.Time) *JobCreate {
	jc.mutation.SetProgressAt(t)
	return jc
}

// SetNillableProgressAt sets the "progress_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableProgressAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetProgressAt(*t)
	}
	return jc
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (jc *JobCreate) SetProgressFlagAt(t time.Time) *JobCreate {
	jc.mutation.SetProgressFlagAt(t)
	return jc
}

// SetNillableProgressFlagAt sets the "progress_flag_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableProgressFlagAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetProgressFlagAt(*t)
	}
	return jc
}

// SetRegionID sets the "region_id" field.
func (jc *JobCreate) SetRegionID(u uint8) *JobCreate {
	jc.mutation.SetRegionID(u)
	return jc
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (jc *JobCreate) SetNillableRegionID(u *uint8) *JobCreate {
	if u != nil {
		jc.SetRegionID(*u)
	}
	return jc
}

// SetCompanyRefID sets the "company_ref_id" field.
func (jc *JobCreate) SetCompanyRefID(s string) *JobCreate {
	jc.mutation.SetCompanyRefID(s)
	return jc
}

// SetNillableCompanyRefID sets the "company_ref_id" field if the given value is not nil.
func (jc *JobCreate) SetNillableCompanyRefID(s *string) *JobCreate {
	if s != nil {
		jc.SetCompanyRefID(*s)
	}
	return jc
}

// SetCompanyName sets the "company_name" field.
func (jc *JobCreate) SetCompanyName(s string) *JobCreate {
	jc.mutation.SetCompanyName(s)
	return jc
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (jc *JobCreate) SetNillableCompanyName(s *string) *JobCreate {
	if s != nil {
		jc.SetCompanyName(*s)
	}
	return jc
}

// SetPrice sets the "price" field.
func (jc *JobCreate) SetPrice(f float64) *JobCreate {
	jc.mutation.SetPrice(f)
	return jc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (jc *JobCreate) SetNillablePrice(f *float64) *JobCreate {
	if f != nil {
		jc.SetPrice(*f)
	}
	return jc
}

// SetWorkOrderPrice sets the "work_order_price" field.
func (jc *JobCreate) SetWorkOrderPrice(f float64) *JobCreate {
	jc.mutation.SetWorkOrderPrice(f)
	return jc
}

// SetNillableWorkOrderPrice sets the "work_order_price" field if the given value is not nil.
func (jc *JobCreate) SetNillableWorkOrderPrice(f *float64) *JobCreate {
	if f != nil {
		jc.SetWorkOrderPrice(*f)
	}
	return jc
}

// SetContractPrice sets the "contract_price" field.
func (jc *JobCreate) SetContractPrice(f float64) *JobCreate {
	jc.mutation.SetContractPrice(f)
	return jc
}

// SetNillableContractPrice sets the "contract_price" field if the given value is not nil.
func (jc *JobCreate) SetNillableContractPrice(f *float64) *JobCreate {
	if f != nil {
		jc.SetContractPrice(*f)
	}
	return jc
}

// SetChangeOrderPrice sets the "change_order_price" field.
func (jc *JobCreate) SetChangeOrderPrice(f float64) *JobCreate {
	jc.mutation.SetChangeOrderPrice(f)
	return jc
}

// SetNillableChangeOrderPrice sets the "change_order_price" field if the given value is not nil.
func (jc *JobCreate) SetNillableChangeOrderPrice(f *float64) *JobCreate {
	if f != nil {
		jc.SetChangeOrderPrice(*f)
	}
	return jc
}

// SetNote sets the "note" field.
func (jc *JobCreate) SetNote(s string) *JobCreate {
	jc.mutation.SetNote(s)
	return jc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (jc *JobCreate) SetNillableNote(s *string) *JobCreate {
	if s != nil {
		jc.SetNote(*s)
	}
	return jc
}

// SetShingleColor sets the "shingle_color" field.
func (jc *JobCreate) SetShingleColor(s string) *JobCreate {
	jc.mutation.SetShingleColor(s)
	return jc
}

// SetNillableShingleColor sets the "shingle_color" field if the given value is not nil.
func (jc *JobCreate) SetNillableShingleColor(s *string) *JobCreate {
	if s != nil {
		jc.SetShingleColor(*s)
	}
	return jc
}

// SetPermitRequired sets the "permit_required" field.
func (jc *JobCreate) SetPermitRequired(b bool) *JobCreate {
	jc.mutation.SetPermitRequired(b)
	return jc
}

// SetNillablePermitRequired sets the "permit_required" field if the given value is not nil.
func (jc *JobCreate) SetNillablePermitRequired(b *bool) *JobCreate {
	if b != nil {
		jc.SetPermitRequired(*b)
	}
	return jc
}

// SetInspectionRequired sets the "inspection_required" field.
func (jc *JobCreate) SetInspectionRequired(b bool) *JobCreate {
	jc.mutation.SetInspectionRequired(b)
	return jc
}

// SetNillableInspectionRequired sets the "inspection_required" field if the given value is not nil.
func (jc *JobCreate) SetNillableInspectionRequired(b *bool) *JobCreate {
	if b != nil {
		jc.SetInspectionRequired(*b)
	}
	return jc
}

// SetInspectionDate sets the "inspection_date" field.
func (jc *JobCreate) SetInspectionDate(t time.Time) *JobCreate {
	jc.mutation.SetInspectionDate(t)
	return jc
}

// SetNillableInspectionDate sets the "inspection_date" field if the given value is not nil.
func (jc *JobCreate) SetNillableInspectionDate(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetInspectionDate(*t)
	}
	return jc
}

// SetProgressInspectionDate sets the "progress_inspection_date" field.
func (jc *JobCreate) SetProgressInspectionDate(t time.Time) *JobCreate {
	jc.mutation.SetProgressInspectionDate(t)
	return jc
}

// SetNillableProgressInspectionDate sets the "progress_inspection_date" field if the given value is not nil.
func (jc *JobCreate) SetNillableProgressInspectionDate(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetProgressInspectionDate(*t)
	}
	return jc
}

// SetInstallDate sets the "install_date" field.
func (jc *JobCreate) SetInstallDate(t time.Time) *JobCreate {
	jc.mutation.SetInstallDate(t)
	return jc
}

// SetNillableInstallDate sets the "install_date" field if the given value is not nil.
func (jc *JobCreate) SetNillableInstallDate(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetInstallDate(*t)
	}
	return jc
}

// SetCompletionDate sets the "completion_date" field.
func (jc *JobCreate) SetCompletionDate(t time.Time) *JobCreate {
	jc.mutation.SetCompletionDate(t)
	return jc
}

// SetNillableCompletionDate sets the "completion_date" field if the given value is not nil.
func (jc *JobCreate) SetNillableCompletionDate(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCompletionDate(*t)
	}
	return jc
}

// SetMaterialDeliveryDate sets the "material_delivery_date" field.
func (jc *JobCreate) SetMaterialDeliveryDate(t time.Time) *JobCreate {
	jc.mutation.SetMaterialDeliveryDate(t)
	return jc
}

// SetNillableMaterialDeliveryDate sets the "material_delivery_date" field if the given value is not nil.
func (jc *JobCreate) SetNillableMaterialDeliveryDate(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetMaterialDeliveryDate(*t)
	}
	return jc
}

// SetAgree sets the "agree" field.
func (jc *JobCreate) SetAgree(b bool) *JobCreate {
	jc.mutation.SetAgree(b)
	return jc
}

// SetNillableAgree sets the "agree" field if the given value is not nil.
func (jc *JobCreate) SetNillableAgree(b *bool) *JobCreate {
	if b != nil {
		jc.SetAgree(*b)
	}
	return jc
}

// SetAgreeAt sets the "agree_at" field.
func (jc *JobCreate) SetAgreeAt(t time.Time) *JobCreate {
	jc.mutation.SetAgreeAt(t)
	return jc
}

// SetNillableAgreeAt sets the "agree_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableAgreeAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetAgreeAt(*t)
	}
	return jc
}

// SetPoNumber sets the "po_number" field.
func (jc *JobCreate) SetPoNumber(s string) *JobCreate {
	jc.mutation.SetPoNumber(s)
	return jc
}

// SetNillablePoNumber sets the "po_number" field if the given value is not nil.
func (jc *JobCreate) SetNillablePoNumber(s *string) *JobCreate {
	if s != nil {
		jc.SetPoNumber(*s)
	}
	return jc
}

// SetRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field.
func (jc *JobCreate) SetRoofingPartnerAssignedAt(t time.Time) *JobCreate {
	jc.mutation.SetRoofingPartnerAssignedAt(t)
	return jc
}

// SetNillableRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableRoofingPartnerAssignedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetRoofingPartnerAssignedAt(*t)
	}
	return jc
}

// SetRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field.
func (jc *JobCreate) SetRoofingPartnerFlagAt(t time.Time) *JobCreate {
	jc.mutation.SetRoofingPartnerFlagAt(t)
	return jc
}

// SetNillableRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableRoofingPartnerFlagAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetRoofingPartnerFlagAt(*t)
	}
	return jc
}

// SetID sets the "id" field.
func (jc *JobCreate) SetID(s string) *JobCreate {
	jc.mutation.SetID(s)
	return jc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jc *JobCreate) SetNillableID(s *string) *JobCreate {
	if s != nil {
		jc.SetID(*s)
	}
	return jc
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (jc *JobCreate) AddPaymentIDs(ids ...string) *JobCreate {
	jc.mutation.AddPaymentIDs(ids...)
	return jc
}

// AddPayments adds the "payments" edges to the Payment entity.
func (jc *JobCreate) AddPayments(p ...*Payment) *JobCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return jc.AddPaymentIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the JobActivity entity by IDs.
func (jc *JobCreate) AddActivityIDs(ids ...string) *JobCreate {
	jc.mutation.AddActivityIDs(ids...)
	return jc
}

// AddActivities adds the "activities" edges to the JobActivity entity.
func (jc *JobCreate) AddActivities(j ...*JobActivity) *JobCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jc.AddActivityIDs(ids...)
}

// AddAssignmentHistoryIDs adds the "assignment_history" edge to the JobAssignmentHistory entity by IDs.
func (jc *JobCreate) AddAssignmentHistoryIDs(ids ...string) *JobCreate {
	jc.mutation.AddAssignmentHistoryIDs(ids...)
	return jc
}

// AddAssignmentHistory adds the "assignment_history" edges to the JobAssignmentHistory entity.
func (jc *JobCreate) AddAssignmentHistory(j ...*JobAssignmentHistory) *JobCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jc.AddAssignmentHistoryIDs(ids...)
}

// AddProgressHistoryIDs adds the "progress_history" edge to the JobProgressHistory entity by IDs.
func (jc *JobCreate) AddProgressHistoryIDs(ids ...string) *JobCreate {
	jc.mutation.AddProgressHistoryIDs(ids...)
	return jc
}

// AddProgressHistory adds the "progress_history" edges to the JobProgressHistory entity.
func (jc *JobCreate) AddProgressHistory(j ...*JobProgressHistory) *JobCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jc.AddProgressHistoryIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the JobNote entity by IDs.
func (jc *JobCreate) AddNoteIDs(ids ...string) *JobCreate {
	jc.mutation.AddNoteIDs(ids...)
	return jc
}

// AddNotes adds the "notes" edges to the JobNote entity.
func (jc *JobCreate) AddNotes(j ...*JobNote) *JobCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jc.AddNoteIDs(ids...)
}

// AddDocURLIDs adds the "doc_urls" edge to the JobDocURL entity by IDs.
func (jc *JobCreate) AddDocURLIDs(ids ...string) *JobCreate {
	jc.mutation.AddDocURLIDs(ids...)
	return jc
}

// AddDocUrls adds the "doc_urls" edges to the JobDocURL entity.
func (jc *JobCreate) AddDocUrls(j ...*JobDocURL) *JobCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jc.AddDocURLIDs(ids...)
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (jc *JobCreate) SetEstimateID(id string) *JobCreate {
	jc.mutation.SetEstimateID(id)
	return jc
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableEstimateID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetEstimateID(*id)
	}
	return jc
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (jc *JobCreate) SetEstimate(e *Estimate) *JobCreate {
	return jc.SetEstimateID(e.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (jc *JobCreate) SetCreatorAPIID(id string) *JobCreate {
	jc.mutation.SetCreatorAPIID(id)
	return jc
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableCreatorAPIID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetCreatorAPIID(*id)
	}
	return jc
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (jc *JobCreate) SetCreatorAPI(a *ApiUser) *JobCreate {
	return jc.SetCreatorAPIID(a.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jc *JobCreate) SetCreatorID(id string) *JobCreate {
	jc.mutation.SetCreatorID(id)
	return jc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableCreatorID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetCreatorID(*id)
	}
	return jc
}

// SetCreator sets the "creator" edge to the User entity.
func (jc *JobCreate) SetCreator(u *User) *JobCreate {
	return jc.SetCreatorID(u.ID)
}

// SetHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID.
func (jc *JobCreate) SetHomeOwnerID(id string) *JobCreate {
	jc.mutation.SetHomeOwnerID(id)
	return jc
}

// SetNillableHomeOwnerID sets the "home_owner" edge to the HomeOwner entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableHomeOwnerID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetHomeOwnerID(*id)
	}
	return jc
}

// SetHomeOwner sets the "home_owner" edge to the HomeOwner entity.
func (jc *JobCreate) SetHomeOwner(h *HomeOwner) *JobCreate {
	return jc.SetHomeOwnerID(h.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (jc *JobCreate) SetSalesRepID(id string) *JobCreate {
	jc.mutation.SetSalesRepID(id)
	return jc
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableSalesRepID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetSalesRepID(*id)
	}
	return jc
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (jc *JobCreate) SetSalesRep(u *User) *JobCreate {
	return jc.SetSalesRepID(u.ID)
}

// SetRequesterID sets the "requester" edge to the Partner entity by ID.
func (jc *JobCreate) SetRequesterID(id string) *JobCreate {
	jc.mutation.SetRequesterID(id)
	return jc
}

// SetNillableRequesterID sets the "requester" edge to the Partner entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableRequesterID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetRequesterID(*id)
	}
	return jc
}

// SetRequester sets the "requester" edge to the Partner entity.
func (jc *JobCreate) SetRequester(p *Partner) *JobCreate {
	return jc.SetRequesterID(p.ID)
}

// SetRoofingPartnerID sets the "roofing_partner" edge to the Partner entity by ID.
func (jc *JobCreate) SetRoofingPartnerID(id string) *JobCreate {
	jc.mutation.SetRoofingPartnerID(id)
	return jc
}

// SetNillableRoofingPartnerID sets the "roofing_partner" edge to the Partner entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableRoofingPartnerID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetRoofingPartnerID(*id)
	}
	return jc
}

// SetRoofingPartner sets the "roofing_partner" edge to the Partner entity.
func (jc *JobCreate) SetRoofingPartner(p *Partner) *JobCreate {
	return jc.SetRoofingPartnerID(p.ID)
}

// SetIntegrationPartnerID sets the "integration_partner" edge to the Partner entity by ID.
func (jc *JobCreate) SetIntegrationPartnerID(id string) *JobCreate {
	jc.mutation.SetIntegrationPartnerID(id)
	return jc
}

// SetNillableIntegrationPartnerID sets the "integration_partner" edge to the Partner entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableIntegrationPartnerID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetIntegrationPartnerID(*id)
	}
	return jc
}

// SetIntegrationPartner sets the "integration_partner" edge to the Partner entity.
func (jc *JobCreate) SetIntegrationPartner(p *Partner) *JobCreate {
	return jc.SetIntegrationPartnerID(p.ID)
}

// SetEpcPartnerID sets the "epc_partner" edge to the Partner entity by ID.
func (jc *JobCreate) SetEpcPartnerID(id string) *JobCreate {
	jc.mutation.SetEpcPartnerID(id)
	return jc
}

// SetNillableEpcPartnerID sets the "epc_partner" edge to the Partner entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableEpcPartnerID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetEpcPartnerID(*id)
	}
	return jc
}

// SetEpcPartner sets the "epc_partner" edge to the Partner entity.
func (jc *JobCreate) SetEpcPartner(p *Partner) *JobCreate {
	return jc.SetEpcPartnerID(p.ID)
}

// SetEpcID sets the "epc" edge to the OptionList entity by ID.
func (jc *JobCreate) SetEpcID(id string) *JobCreate {
	jc.mutation.SetEpcID(id)
	return jc
}

// SetNillableEpcID sets the "epc" edge to the OptionList entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableEpcID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetEpcID(*id)
	}
	return jc
}

// SetEpc sets the "epc" edge to the OptionList entity.
func (jc *JobCreate) SetEpc(o *OptionList) *JobCreate {
	return jc.SetEpcID(o.ID)
}

// SetEstimatePdfID sets the "estimate_pdf" edge to the Document entity by ID.
func (jc *JobCreate) SetEstimatePdfID(id string) *JobCreate {
	jc.mutation.SetEstimatePdfID(id)
	return jc
}

// SetNillableEstimatePdfID sets the "estimate_pdf" edge to the Document entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableEstimatePdfID(id *string) *JobCreate {
	if id != nil {
		jc = jc.SetEstimatePdfID(*id)
	}
	return jc
}

// SetEstimatePdf sets the "estimate_pdf" edge to the Document entity.
func (jc *JobCreate) SetEstimatePdf(d *Document) *JobCreate {
	return jc.SetEstimatePdfID(d.ID)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	jc.defaults()
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		jc.mutation.SetCreatedAt(v)
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		v := job.DefaultUpdatedAt()
		jc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jc.mutation.RegionID(); !ok {
		v := job.DefaultRegionID
		jc.mutation.SetRegionID(v)
	}
	if _, ok := jc.mutation.Price(); !ok {
		v := job.DefaultPrice
		jc.mutation.SetPrice(v)
	}
	if _, ok := jc.mutation.WorkOrderPrice(); !ok {
		v := job.DefaultWorkOrderPrice
		jc.mutation.SetWorkOrderPrice(v)
	}
	if _, ok := jc.mutation.ContractPrice(); !ok {
		v := job.DefaultContractPrice
		jc.mutation.SetContractPrice(v)
	}
	if _, ok := jc.mutation.ChangeOrderPrice(); !ok {
		v := job.DefaultChangeOrderPrice
		jc.mutation.SetChangeOrderPrice(v)
	}
	if _, ok := jc.mutation.ID(); !ok {
		v := job.DefaultID()
		jc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Job.created_at"`)}
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Job.updated_at"`)}
	}
	if v, ok := jc.mutation.Progress(); ok {
		if err := job.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "Job.progress": %w`, err)}
		}
	}
	if v, ok := jc.mutation.CompanyRefID(); ok {
		if err := job.CompanyRefIDValidator(v); err != nil {
			return &ValidationError{Name: "company_ref_id", err: fmt.Errorf(`ent: validator failed for field "Job.company_ref_id": %w`, err)}
		}
	}
	if v, ok := jc.mutation.CompanyName(); ok {
		if err := job.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Job.company_name": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Job.price"`)}
	}
	if _, ok := jc.mutation.WorkOrderPrice(); !ok {
		return &ValidationError{Name: "work_order_price", err: errors.New(`ent: missing required field "Job.work_order_price"`)}
	}
	if v, ok := jc.mutation.ID(); ok {
		if err := job.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Job.id": %w`, err)}
		}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Job.ID type: %T", _spec.ID.Value)
		}
	}
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	)
	_spec.OnConflict = jc.conflict
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jc.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jc.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jc.mutation.Progress(); ok {
		_spec.SetField(job.FieldProgress, field.TypeEnum, value)
		_node.Progress = &value
	}
	if value, ok := jc.mutation.ProgressAt(); ok {
		_spec.SetField(job.FieldProgressAt, field.TypeTime, value)
		_node.ProgressAt = &value
	}
	if value, ok := jc.mutation.ProgressFlagAt(); ok {
		_spec.SetField(job.FieldProgressFlagAt, field.TypeTime, value)
		_node.ProgressFlagAt = &value
	}
	if value, ok := jc.mutation.RegionID(); ok {
		_spec.SetField(job.FieldRegionID, field.TypeUint8, value)
		_node.RegionID = value
	}
	if value, ok := jc.mutation.CompanyRefID(); ok {
		_spec.SetField(job.FieldCompanyRefID, field.TypeString, value)
		_node.CompanyRefID = &value
	}
	if value, ok := jc.mutation.CompanyName(); ok {
		_spec.SetField(job.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := jc.mutation.Price(); ok {
		_spec.SetField(job.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := jc.mutation.WorkOrderPrice(); ok {
		_spec.SetField(job.FieldWorkOrderPrice, field.TypeFloat64, value)
		_node.WorkOrderPrice = value
	}
	if value, ok := jc.mutation.ContractPrice(); ok {
		_spec.SetField(job.FieldContractPrice, field.TypeFloat64, value)
		_node.ContractPrice = value
	}
	if value, ok := jc.mutation.ChangeOrderPrice(); ok {
		_spec.SetField(job.FieldChangeOrderPrice, field.TypeFloat64, value)
		_node.ChangeOrderPrice = value
	}
	if value, ok := jc.mutation.Note(); ok {
		_spec.SetField(job.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := jc.mutation.ShingleColor(); ok {
		_spec.SetField(job.FieldShingleColor, field.TypeString, value)
		_node.ShingleColor = &value
	}
	if value, ok := jc.mutation.PermitRequired(); ok {
		_spec.SetField(job.FieldPermitRequired, field.TypeBool, value)
		_node.PermitRequired = &value
	}
	if value, ok := jc.mutation.InspectionRequired(); ok {
		_spec.SetField(job.FieldInspectionRequired, field.TypeBool, value)
		_node.InspectionRequired = &value
	}
	if value, ok := jc.mutation.InspectionDate(); ok {
		_spec.SetField(job.FieldInspectionDate, field.TypeTime, value)
		_node.InspectionDate = &value
	}
	if value, ok := jc.mutation.ProgressInspectionDate(); ok {
		_spec.SetField(job.FieldProgressInspectionDate, field.TypeTime, value)
		_node.ProgressInspectionDate = &value
	}
	if value, ok := jc.mutation.InstallDate(); ok {
		_spec.SetField(job.FieldInstallDate, field.TypeTime, value)
		_node.InstallDate = &value
	}
	if value, ok := jc.mutation.CompletionDate(); ok {
		_spec.SetField(job.FieldCompletionDate, field.TypeTime, value)
		_node.CompletionDate = &value
	}
	if value, ok := jc.mutation.MaterialDeliveryDate(); ok {
		_spec.SetField(job.FieldMaterialDeliveryDate, field.TypeTime, value)
		_node.MaterialDeliveryDate = &value
	}
	if value, ok := jc.mutation.Agree(); ok {
		_spec.SetField(job.FieldAgree, field.TypeBool, value)
		_node.Agree = &value
	}
	if value, ok := jc.mutation.AgreeAt(); ok {
		_spec.SetField(job.FieldAgreeAt, field.TypeTime, value)
		_node.AgreeAt = &value
	}
	if value, ok := jc.mutation.PoNumber(); ok {
		_spec.SetField(job.FieldPoNumber, field.TypeString, value)
		_node.PoNumber = value
	}
	if value, ok := jc.mutation.RoofingPartnerAssignedAt(); ok {
		_spec.SetField(job.FieldRoofingPartnerAssignedAt, field.TypeTime, value)
		_node.RoofingPartnerAssignedAt = &value
	}
	if value, ok := jc.mutation.RoofingPartnerFlagAt(); ok {
		_spec.SetField(job.FieldRoofingPartnerFlagAt, field.TypeTime, value)
		_node.RoofingPartnerFlagAt = &value
	}
	if nodes := jc.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.PaymentsTable,
			Columns: []string{job.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ActivitiesTable,
			Columns: []string{job.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.AssignmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.AssignmentHistoryTable,
			Columns: []string{job.AssignmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ProgressHistoryTable,
			Columns: []string{job.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogresshistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.NotesTable,
			Columns: []string{job.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.DocUrlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.DocUrlsTable,
			Columns: []string{job.DocUrlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimateTable,
			Columns: []string{job.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.estimate_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorAPITable,
			Columns: []string{job.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.CreatorTable,
			Columns: []string{job.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.HomeOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.HomeOwnerTable,
			Columns: []string{job.HomeOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.home_owner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.SalesRepTable,
			Columns: []string{job.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sales_rep_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RequesterTable,
			Columns: []string{job.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.requester_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.RoofingPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.RoofingPartnerTable,
			Columns: []string{job.RoofingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.roofing_partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.IntegrationPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.IntegrationPartnerTable,
			Columns: []string{job.IntegrationPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.integration_partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.EpcPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcPartnerTable,
			Columns: []string{job.EpcPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.epc_partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.EpcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EpcTable,
			Columns: []string{job.EpcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(optionlist.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.epc_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.EstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   job.EstimatePdfTable,
			Columns: []string{job.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.estimate_pdf_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Job.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jc *JobCreate) OnConflict(opts ...sql.ConflictOption) *JobUpsertOne {
	jc.conflict = opts
	return &JobUpsertOne{
		create: jc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jc *JobCreate) OnConflictColumns(columns ...string) *JobUpsertOne {
	jc.conflict = append(jc.conflict, sql.ConflictColumns(columns...))
	return &JobUpsertOne{
		create: jc,
	}
}

type (
	// JobUpsertOne is the builder for "upsert"-ing
	//  one Job node.
	JobUpsertOne struct {
		create *JobCreate
	}

	// JobUpsert is the "OnConflict" setter.
	JobUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *JobUpsert) SetUpdatedAt(v time.Time) *JobUpsert {
	u.Set(job.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateUpdatedAt() *JobUpsert {
	u.SetExcluded(job.FieldUpdatedAt)
	return u
}

// SetProgress sets the "progress" field.
func (u *JobUpsert) SetProgress(v enum.JobProgress) *JobUpsert {
	u.Set(job.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *JobUpsert) UpdateProgress() *JobUpsert {
	u.SetExcluded(job.FieldProgress)
	return u
}

// ClearProgress clears the value of the "progress" field.
func (u *JobUpsert) ClearProgress() *JobUpsert {
	u.SetNull(job.FieldProgress)
	return u
}

// SetProgressAt sets the "progress_at" field.
func (u *JobUpsert) SetProgressAt(v time.Time) *JobUpsert {
	u.Set(job.FieldProgressAt, v)
	return u
}

// UpdateProgressAt sets the "progress_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateProgressAt() *JobUpsert {
	u.SetExcluded(job.FieldProgressAt)
	return u
}

// ClearProgressAt clears the value of the "progress_at" field.
func (u *JobUpsert) ClearProgressAt() *JobUpsert {
	u.SetNull(job.FieldProgressAt)
	return u
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (u *JobUpsert) SetProgressFlagAt(v time.Time) *JobUpsert {
	u.Set(job.FieldProgressFlagAt, v)
	return u
}

// UpdateProgressFlagAt sets the "progress_flag_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateProgressFlagAt() *JobUpsert {
	u.SetExcluded(job.FieldProgressFlagAt)
	return u
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (u *JobUpsert) ClearProgressFlagAt() *JobUpsert {
	u.SetNull(job.FieldProgressFlagAt)
	return u
}

// SetRegionID sets the "region_id" field.
func (u *JobUpsert) SetRegionID(v uint8) *JobUpsert {
	u.Set(job.FieldRegionID, v)
	return u
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *JobUpsert) UpdateRegionID() *JobUpsert {
	u.SetExcluded(job.FieldRegionID)
	return u
}

// AddRegionID adds v to the "region_id" field.
func (u *JobUpsert) AddRegionID(v uint8) *JobUpsert {
	u.Add(job.FieldRegionID, v)
	return u
}

// ClearRegionID clears the value of the "region_id" field.
func (u *JobUpsert) ClearRegionID() *JobUpsert {
	u.SetNull(job.FieldRegionID)
	return u
}

// SetCompanyRefID sets the "company_ref_id" field.
func (u *JobUpsert) SetCompanyRefID(v string) *JobUpsert {
	u.Set(job.FieldCompanyRefID, v)
	return u
}

// UpdateCompanyRefID sets the "company_ref_id" field to the value that was provided on create.
func (u *JobUpsert) UpdateCompanyRefID() *JobUpsert {
	u.SetExcluded(job.FieldCompanyRefID)
	return u
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (u *JobUpsert) ClearCompanyRefID() *JobUpsert {
	u.SetNull(job.FieldCompanyRefID)
	return u
}

// SetCompanyName sets the "company_name" field.
func (u *JobUpsert) SetCompanyName(v string) *JobUpsert {
	u.Set(job.FieldCompanyName, v)
	return u
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *JobUpsert) UpdateCompanyName() *JobUpsert {
	u.SetExcluded(job.FieldCompanyName)
	return u
}

// ClearCompanyName clears the value of the "company_name" field.
func (u *JobUpsert) ClearCompanyName() *JobUpsert {
	u.SetNull(job.FieldCompanyName)
	return u
}

// SetPrice sets the "price" field.
func (u *JobUpsert) SetPrice(v float64) *JobUpsert {
	u.Set(job.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *JobUpsert) UpdatePrice() *JobUpsert {
	u.SetExcluded(job.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *JobUpsert) AddPrice(v float64) *JobUpsert {
	u.Add(job.FieldPrice, v)
	return u
}

// SetWorkOrderPrice sets the "work_order_price" field.
func (u *JobUpsert) SetWorkOrderPrice(v float64) *JobUpsert {
	u.Set(job.FieldWorkOrderPrice, v)
	return u
}

// UpdateWorkOrderPrice sets the "work_order_price" field to the value that was provided on create.
func (u *JobUpsert) UpdateWorkOrderPrice() *JobUpsert {
	u.SetExcluded(job.FieldWorkOrderPrice)
	return u
}

// AddWorkOrderPrice adds v to the "work_order_price" field.
func (u *JobUpsert) AddWorkOrderPrice(v float64) *JobUpsert {
	u.Add(job.FieldWorkOrderPrice, v)
	return u
}

// SetContractPrice sets the "contract_price" field.
func (u *JobUpsert) SetContractPrice(v float64) *JobUpsert {
	u.Set(job.FieldContractPrice, v)
	return u
}

// UpdateContractPrice sets the "contract_price" field to the value that was provided on create.
func (u *JobUpsert) UpdateContractPrice() *JobUpsert {
	u.SetExcluded(job.FieldContractPrice)
	return u
}

// AddContractPrice adds v to the "contract_price" field.
func (u *JobUpsert) AddContractPrice(v float64) *JobUpsert {
	u.Add(job.FieldContractPrice, v)
	return u
}

// ClearContractPrice clears the value of the "contract_price" field.
func (u *JobUpsert) ClearContractPrice() *JobUpsert {
	u.SetNull(job.FieldContractPrice)
	return u
}

// SetChangeOrderPrice sets the "change_order_price" field.
func (u *JobUpsert) SetChangeOrderPrice(v float64) *JobUpsert {
	u.Set(job.FieldChangeOrderPrice, v)
	return u
}

// UpdateChangeOrderPrice sets the "change_order_price" field to the value that was provided on create.
func (u *JobUpsert) UpdateChangeOrderPrice() *JobUpsert {
	u.SetExcluded(job.FieldChangeOrderPrice)
	return u
}

// AddChangeOrderPrice adds v to the "change_order_price" field.
func (u *JobUpsert) AddChangeOrderPrice(v float64) *JobUpsert {
	u.Add(job.FieldChangeOrderPrice, v)
	return u
}

// ClearChangeOrderPrice clears the value of the "change_order_price" field.
func (u *JobUpsert) ClearChangeOrderPrice() *JobUpsert {
	u.SetNull(job.FieldChangeOrderPrice)
	return u
}

// SetNote sets the "note" field.
func (u *JobUpsert) SetNote(v string) *JobUpsert {
	u.Set(job.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *JobUpsert) UpdateNote() *JobUpsert {
	u.SetExcluded(job.FieldNote)
	return u
}

// ClearNote clears the value of the "note" field.
func (u *JobUpsert) ClearNote() *JobUpsert {
	u.SetNull(job.FieldNote)
	return u
}

// SetShingleColor sets the "shingle_color" field.
func (u *JobUpsert) SetShingleColor(v string) *JobUpsert {
	u.Set(job.FieldShingleColor, v)
	return u
}

// UpdateShingleColor sets the "shingle_color" field to the value that was provided on create.
func (u *JobUpsert) UpdateShingleColor() *JobUpsert {
	u.SetExcluded(job.FieldShingleColor)
	return u
}

// ClearShingleColor clears the value of the "shingle_color" field.
func (u *JobUpsert) ClearShingleColor() *JobUpsert {
	u.SetNull(job.FieldShingleColor)
	return u
}

// SetPermitRequired sets the "permit_required" field.
func (u *JobUpsert) SetPermitRequired(v bool) *JobUpsert {
	u.Set(job.FieldPermitRequired, v)
	return u
}

// UpdatePermitRequired sets the "permit_required" field to the value that was provided on create.
func (u *JobUpsert) UpdatePermitRequired() *JobUpsert {
	u.SetExcluded(job.FieldPermitRequired)
	return u
}

// ClearPermitRequired clears the value of the "permit_required" field.
func (u *JobUpsert) ClearPermitRequired() *JobUpsert {
	u.SetNull(job.FieldPermitRequired)
	return u
}

// SetInspectionRequired sets the "inspection_required" field.
func (u *JobUpsert) SetInspectionRequired(v bool) *JobUpsert {
	u.Set(job.FieldInspectionRequired, v)
	return u
}

// UpdateInspectionRequired sets the "inspection_required" field to the value that was provided on create.
func (u *JobUpsert) UpdateInspectionRequired() *JobUpsert {
	u.SetExcluded(job.FieldInspectionRequired)
	return u
}

// ClearInspectionRequired clears the value of the "inspection_required" field.
func (u *JobUpsert) ClearInspectionRequired() *JobUpsert {
	u.SetNull(job.FieldInspectionRequired)
	return u
}

// SetInspectionDate sets the "inspection_date" field.
func (u *JobUpsert) SetInspectionDate(v time.Time) *JobUpsert {
	u.Set(job.FieldInspectionDate, v)
	return u
}

// UpdateInspectionDate sets the "inspection_date" field to the value that was provided on create.
func (u *JobUpsert) UpdateInspectionDate() *JobUpsert {
	u.SetExcluded(job.FieldInspectionDate)
	return u
}

// ClearInspectionDate clears the value of the "inspection_date" field.
func (u *JobUpsert) ClearInspectionDate() *JobUpsert {
	u.SetNull(job.FieldInspectionDate)
	return u
}

// SetProgressInspectionDate sets the "progress_inspection_date" field.
func (u *JobUpsert) SetProgressInspectionDate(v time.Time) *JobUpsert {
	u.Set(job.FieldProgressInspectionDate, v)
	return u
}

// UpdateProgressInspectionDate sets the "progress_inspection_date" field to the value that was provided on create.
func (u *JobUpsert) UpdateProgressInspectionDate() *JobUpsert {
	u.SetExcluded(job.FieldProgressInspectionDate)
	return u
}

// ClearProgressInspectionDate clears the value of the "progress_inspection_date" field.
func (u *JobUpsert) ClearProgressInspectionDate() *JobUpsert {
	u.SetNull(job.FieldProgressInspectionDate)
	return u
}

// SetInstallDate sets the "install_date" field.
func (u *JobUpsert) SetInstallDate(v time.Time) *JobUpsert {
	u.Set(job.FieldInstallDate, v)
	return u
}

// UpdateInstallDate sets the "install_date" field to the value that was provided on create.
func (u *JobUpsert) UpdateInstallDate() *JobUpsert {
	u.SetExcluded(job.FieldInstallDate)
	return u
}

// ClearInstallDate clears the value of the "install_date" field.
func (u *JobUpsert) ClearInstallDate() *JobUpsert {
	u.SetNull(job.FieldInstallDate)
	return u
}

// SetCompletionDate sets the "completion_date" field.
func (u *JobUpsert) SetCompletionDate(v time.Time) *JobUpsert {
	u.Set(job.FieldCompletionDate, v)
	return u
}

// UpdateCompletionDate sets the "completion_date" field to the value that was provided on create.
func (u *JobUpsert) UpdateCompletionDate() *JobUpsert {
	u.SetExcluded(job.FieldCompletionDate)
	return u
}

// ClearCompletionDate clears the value of the "completion_date" field.
func (u *JobUpsert) ClearCompletionDate() *JobUpsert {
	u.SetNull(job.FieldCompletionDate)
	return u
}

// SetMaterialDeliveryDate sets the "material_delivery_date" field.
func (u *JobUpsert) SetMaterialDeliveryDate(v time.Time) *JobUpsert {
	u.Set(job.FieldMaterialDeliveryDate, v)
	return u
}

// UpdateMaterialDeliveryDate sets the "material_delivery_date" field to the value that was provided on create.
func (u *JobUpsert) UpdateMaterialDeliveryDate() *JobUpsert {
	u.SetExcluded(job.FieldMaterialDeliveryDate)
	return u
}

// ClearMaterialDeliveryDate clears the value of the "material_delivery_date" field.
func (u *JobUpsert) ClearMaterialDeliveryDate() *JobUpsert {
	u.SetNull(job.FieldMaterialDeliveryDate)
	return u
}

// SetAgree sets the "agree" field.
func (u *JobUpsert) SetAgree(v bool) *JobUpsert {
	u.Set(job.FieldAgree, v)
	return u
}

// UpdateAgree sets the "agree" field to the value that was provided on create.
func (u *JobUpsert) UpdateAgree() *JobUpsert {
	u.SetExcluded(job.FieldAgree)
	return u
}

// ClearAgree clears the value of the "agree" field.
func (u *JobUpsert) ClearAgree() *JobUpsert {
	u.SetNull(job.FieldAgree)
	return u
}

// SetAgreeAt sets the "agree_at" field.
func (u *JobUpsert) SetAgreeAt(v time.Time) *JobUpsert {
	u.Set(job.FieldAgreeAt, v)
	return u
}

// UpdateAgreeAt sets the "agree_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateAgreeAt() *JobUpsert {
	u.SetExcluded(job.FieldAgreeAt)
	return u
}

// ClearAgreeAt clears the value of the "agree_at" field.
func (u *JobUpsert) ClearAgreeAt() *JobUpsert {
	u.SetNull(job.FieldAgreeAt)
	return u
}

// SetPoNumber sets the "po_number" field.
func (u *JobUpsert) SetPoNumber(v string) *JobUpsert {
	u.Set(job.FieldPoNumber, v)
	return u
}

// UpdatePoNumber sets the "po_number" field to the value that was provided on create.
func (u *JobUpsert) UpdatePoNumber() *JobUpsert {
	u.SetExcluded(job.FieldPoNumber)
	return u
}

// ClearPoNumber clears the value of the "po_number" field.
func (u *JobUpsert) ClearPoNumber() *JobUpsert {
	u.SetNull(job.FieldPoNumber)
	return u
}

// SetRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field.
func (u *JobUpsert) SetRoofingPartnerAssignedAt(v time.Time) *JobUpsert {
	u.Set(job.FieldRoofingPartnerAssignedAt, v)
	return u
}

// UpdateRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateRoofingPartnerAssignedAt() *JobUpsert {
	u.SetExcluded(job.FieldRoofingPartnerAssignedAt)
	return u
}

// ClearRoofingPartnerAssignedAt clears the value of the "roofing_partner_assigned_at" field.
func (u *JobUpsert) ClearRoofingPartnerAssignedAt() *JobUpsert {
	u.SetNull(job.FieldRoofingPartnerAssignedAt)
	return u
}

// SetRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field.
func (u *JobUpsert) SetRoofingPartnerFlagAt(v time.Time) *JobUpsert {
	u.Set(job.FieldRoofingPartnerFlagAt, v)
	return u
}

// UpdateRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateRoofingPartnerFlagAt() *JobUpsert {
	u.SetExcluded(job.FieldRoofingPartnerFlagAt)
	return u
}

// ClearRoofingPartnerFlagAt clears the value of the "roofing_partner_flag_at" field.
func (u *JobUpsert) ClearRoofingPartnerFlagAt() *JobUpsert {
	u.SetNull(job.FieldRoofingPartnerFlagAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(job.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobUpsertOne) UpdateNewValues() *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(job.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(job.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Job.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobUpsertOne) Ignore() *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobUpsertOne) DoNothing() *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobCreate.OnConflict
// documentation for more info.
func (u *JobUpsertOne) Update(set func(*JobUpsert)) *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobUpsertOne) SetUpdatedAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateUpdatedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProgress sets the "progress" field.
func (u *JobUpsertOne) SetProgress(v enum.JobProgress) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateProgress() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgress()
	})
}

// ClearProgress clears the value of the "progress" field.
func (u *JobUpsertOne) ClearProgress() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgress()
	})
}

// SetProgressAt sets the "progress_at" field.
func (u *JobUpsertOne) SetProgressAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetProgressAt(v)
	})
}

// UpdateProgressAt sets the "progress_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateProgressAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgressAt()
	})
}

// ClearProgressAt clears the value of the "progress_at" field.
func (u *JobUpsertOne) ClearProgressAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgressAt()
	})
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (u *JobUpsertOne) SetProgressFlagAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetProgressFlagAt(v)
	})
}

// UpdateProgressFlagAt sets the "progress_flag_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateProgressFlagAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgressFlagAt()
	})
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (u *JobUpsertOne) ClearProgressFlagAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgressFlagAt()
	})
}

// SetRegionID sets the "region_id" field.
func (u *JobUpsertOne) SetRegionID(v uint8) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *JobUpsertOne) AddRegionID(v uint8) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateRegionID() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateRegionID()
	})
}

// ClearRegionID clears the value of the "region_id" field.
func (u *JobUpsertOne) ClearRegionID() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearRegionID()
	})
}

// SetCompanyRefID sets the "company_ref_id" field.
func (u *JobUpsertOne) SetCompanyRefID(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetCompanyRefID(v)
	})
}

// UpdateCompanyRefID sets the "company_ref_id" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateCompanyRefID() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompanyRefID()
	})
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (u *JobUpsertOne) ClearCompanyRefID() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompanyRefID()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *JobUpsertOne) SetCompanyName(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateCompanyName() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompanyName()
	})
}

// ClearCompanyName clears the value of the "company_name" field.
func (u *JobUpsertOne) ClearCompanyName() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompanyName()
	})
}

// SetPrice sets the "price" field.
func (u *JobUpsertOne) SetPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *JobUpsertOne) AddPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *JobUpsertOne) UpdatePrice() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePrice()
	})
}

// SetWorkOrderPrice sets the "work_order_price" field.
func (u *JobUpsertOne) SetWorkOrderPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetWorkOrderPrice(v)
	})
}

// AddWorkOrderPrice adds v to the "work_order_price" field.
func (u *JobUpsertOne) AddWorkOrderPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddWorkOrderPrice(v)
	})
}

// UpdateWorkOrderPrice sets the "work_order_price" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateWorkOrderPrice() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateWorkOrderPrice()
	})
}

// SetContractPrice sets the "contract_price" field.
func (u *JobUpsertOne) SetContractPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetContractPrice(v)
	})
}

// AddContractPrice adds v to the "contract_price" field.
func (u *JobUpsertOne) AddContractPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddContractPrice(v)
	})
}

// UpdateContractPrice sets the "contract_price" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateContractPrice() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateContractPrice()
	})
}

// ClearContractPrice clears the value of the "contract_price" field.
func (u *JobUpsertOne) ClearContractPrice() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearContractPrice()
	})
}

// SetChangeOrderPrice sets the "change_order_price" field.
func (u *JobUpsertOne) SetChangeOrderPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetChangeOrderPrice(v)
	})
}

// AddChangeOrderPrice adds v to the "change_order_price" field.
func (u *JobUpsertOne) AddChangeOrderPrice(v float64) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddChangeOrderPrice(v)
	})
}

// UpdateChangeOrderPrice sets the "change_order_price" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateChangeOrderPrice() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateChangeOrderPrice()
	})
}

// ClearChangeOrderPrice clears the value of the "change_order_price" field.
func (u *JobUpsertOne) ClearChangeOrderPrice() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearChangeOrderPrice()
	})
}

// SetNote sets the "note" field.
func (u *JobUpsertOne) SetNote(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateNote() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *JobUpsertOne) ClearNote() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearNote()
	})
}

// SetShingleColor sets the "shingle_color" field.
func (u *JobUpsertOne) SetShingleColor(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetShingleColor(v)
	})
}

// UpdateShingleColor sets the "shingle_color" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateShingleColor() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateShingleColor()
	})
}

// ClearShingleColor clears the value of the "shingle_color" field.
func (u *JobUpsertOne) ClearShingleColor() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearShingleColor()
	})
}

// SetPermitRequired sets the "permit_required" field.
func (u *JobUpsertOne) SetPermitRequired(v bool) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetPermitRequired(v)
	})
}

// UpdatePermitRequired sets the "permit_required" field to the value that was provided on create.
func (u *JobUpsertOne) UpdatePermitRequired() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePermitRequired()
	})
}

// ClearPermitRequired clears the value of the "permit_required" field.
func (u *JobUpsertOne) ClearPermitRequired() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearPermitRequired()
	})
}

// SetInspectionRequired sets the "inspection_required" field.
func (u *JobUpsertOne) SetInspectionRequired(v bool) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetInspectionRequired(v)
	})
}

// UpdateInspectionRequired sets the "inspection_required" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateInspectionRequired() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInspectionRequired()
	})
}

// ClearInspectionRequired clears the value of the "inspection_required" field.
func (u *JobUpsertOne) ClearInspectionRequired() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearInspectionRequired()
	})
}

// SetInspectionDate sets the "inspection_date" field.
func (u *JobUpsertOne) SetInspectionDate(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetInspectionDate(v)
	})
}

// UpdateInspectionDate sets the "inspection_date" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateInspectionDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInspectionDate()
	})
}

// ClearInspectionDate clears the value of the "inspection_date" field.
func (u *JobUpsertOne) ClearInspectionDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearInspectionDate()
	})
}

// SetProgressInspectionDate sets the "progress_inspection_date" field.
func (u *JobUpsertOne) SetProgressInspectionDate(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetProgressInspectionDate(v)
	})
}

// UpdateProgressInspectionDate sets the "progress_inspection_date" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateProgressInspectionDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgressInspectionDate()
	})
}

// ClearProgressInspectionDate clears the value of the "progress_inspection_date" field.
func (u *JobUpsertOne) ClearProgressInspectionDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgressInspectionDate()
	})
}

// SetInstallDate sets the "install_date" field.
func (u *JobUpsertOne) SetInstallDate(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetInstallDate(v)
	})
}

// UpdateInstallDate sets the "install_date" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateInstallDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInstallDate()
	})
}

// ClearInstallDate clears the value of the "install_date" field.
func (u *JobUpsertOne) ClearInstallDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearInstallDate()
	})
}

// SetCompletionDate sets the "completion_date" field.
func (u *JobUpsertOne) SetCompletionDate(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetCompletionDate(v)
	})
}

// UpdateCompletionDate sets the "completion_date" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateCompletionDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompletionDate()
	})
}

// ClearCompletionDate clears the value of the "completion_date" field.
func (u *JobUpsertOne) ClearCompletionDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompletionDate()
	})
}

// SetMaterialDeliveryDate sets the "material_delivery_date" field.
func (u *JobUpsertOne) SetMaterialDeliveryDate(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetMaterialDeliveryDate(v)
	})
}

// UpdateMaterialDeliveryDate sets the "material_delivery_date" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateMaterialDeliveryDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateMaterialDeliveryDate()
	})
}

// ClearMaterialDeliveryDate clears the value of the "material_delivery_date" field.
func (u *JobUpsertOne) ClearMaterialDeliveryDate() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearMaterialDeliveryDate()
	})
}

// SetAgree sets the "agree" field.
func (u *JobUpsertOne) SetAgree(v bool) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetAgree(v)
	})
}

// UpdateAgree sets the "agree" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateAgree() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateAgree()
	})
}

// ClearAgree clears the value of the "agree" field.
func (u *JobUpsertOne) ClearAgree() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearAgree()
	})
}

// SetAgreeAt sets the "agree_at" field.
func (u *JobUpsertOne) SetAgreeAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetAgreeAt(v)
	})
}

// UpdateAgreeAt sets the "agree_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateAgreeAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateAgreeAt()
	})
}

// ClearAgreeAt clears the value of the "agree_at" field.
func (u *JobUpsertOne) ClearAgreeAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearAgreeAt()
	})
}

// SetPoNumber sets the "po_number" field.
func (u *JobUpsertOne) SetPoNumber(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetPoNumber(v)
	})
}

// UpdatePoNumber sets the "po_number" field to the value that was provided on create.
func (u *JobUpsertOne) UpdatePoNumber() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePoNumber()
	})
}

// ClearPoNumber clears the value of the "po_number" field.
func (u *JobUpsertOne) ClearPoNumber() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearPoNumber()
	})
}

// SetRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field.
func (u *JobUpsertOne) SetRoofingPartnerAssignedAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetRoofingPartnerAssignedAt(v)
	})
}

// UpdateRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateRoofingPartnerAssignedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateRoofingPartnerAssignedAt()
	})
}

// ClearRoofingPartnerAssignedAt clears the value of the "roofing_partner_assigned_at" field.
func (u *JobUpsertOne) ClearRoofingPartnerAssignedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearRoofingPartnerAssignedAt()
	})
}

// SetRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field.
func (u *JobUpsertOne) SetRoofingPartnerFlagAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetRoofingPartnerFlagAt(v)
	})
}

// UpdateRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateRoofingPartnerFlagAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateRoofingPartnerFlagAt()
	})
}

// ClearRoofingPartnerFlagAt clears the value of the "roofing_partner_flag_at" field.
func (u *JobUpsertOne) ClearRoofingPartnerFlagAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearRoofingPartnerFlagAt()
	})
}

// Exec executes the query.
func (u *JobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: JobUpsertOne.ID is not supported by MySQL driver. Use JobUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	builders []*JobCreate
	conflict []sql.ConflictOption
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Job.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jcb *JobCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobUpsertBulk {
	jcb.conflict = opts
	return &JobUpsertBulk{
		create: jcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jcb *JobCreateBulk) OnConflictColumns(columns ...string) *JobUpsertBulk {
	jcb.conflict = append(jcb.conflict, sql.ConflictColumns(columns...))
	return &JobUpsertBulk{
		create: jcb,
	}
}

// JobUpsertBulk is the builder for "upsert"-ing
// a bulk of Job nodes.
type JobUpsertBulk struct {
	create *JobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(job.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobUpsertBulk) UpdateNewValues() *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(job.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(job.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobUpsertBulk) Ignore() *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobUpsertBulk) DoNothing() *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobCreateBulk.OnConflict
// documentation for more info.
func (u *JobUpsertBulk) Update(set func(*JobUpsert)) *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobUpsertBulk) SetUpdatedAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateUpdatedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProgress sets the "progress" field.
func (u *JobUpsertBulk) SetProgress(v enum.JobProgress) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateProgress() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgress()
	})
}

// ClearProgress clears the value of the "progress" field.
func (u *JobUpsertBulk) ClearProgress() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgress()
	})
}

// SetProgressAt sets the "progress_at" field.
func (u *JobUpsertBulk) SetProgressAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetProgressAt(v)
	})
}

// UpdateProgressAt sets the "progress_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateProgressAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgressAt()
	})
}

// ClearProgressAt clears the value of the "progress_at" field.
func (u *JobUpsertBulk) ClearProgressAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgressAt()
	})
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (u *JobUpsertBulk) SetProgressFlagAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetProgressFlagAt(v)
	})
}

// UpdateProgressFlagAt sets the "progress_flag_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateProgressFlagAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgressFlagAt()
	})
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (u *JobUpsertBulk) ClearProgressFlagAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgressFlagAt()
	})
}

// SetRegionID sets the "region_id" field.
func (u *JobUpsertBulk) SetRegionID(v uint8) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *JobUpsertBulk) AddRegionID(v uint8) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateRegionID() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateRegionID()
	})
}

// ClearRegionID clears the value of the "region_id" field.
func (u *JobUpsertBulk) ClearRegionID() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearRegionID()
	})
}

// SetCompanyRefID sets the "company_ref_id" field.
func (u *JobUpsertBulk) SetCompanyRefID(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetCompanyRefID(v)
	})
}

// UpdateCompanyRefID sets the "company_ref_id" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateCompanyRefID() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompanyRefID()
	})
}

// ClearCompanyRefID clears the value of the "company_ref_id" field.
func (u *JobUpsertBulk) ClearCompanyRefID() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompanyRefID()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *JobUpsertBulk) SetCompanyName(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateCompanyName() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompanyName()
	})
}

// ClearCompanyName clears the value of the "company_name" field.
func (u *JobUpsertBulk) ClearCompanyName() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompanyName()
	})
}

// SetPrice sets the "price" field.
func (u *JobUpsertBulk) SetPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *JobUpsertBulk) AddPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdatePrice() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePrice()
	})
}

// SetWorkOrderPrice sets the "work_order_price" field.
func (u *JobUpsertBulk) SetWorkOrderPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetWorkOrderPrice(v)
	})
}

// AddWorkOrderPrice adds v to the "work_order_price" field.
func (u *JobUpsertBulk) AddWorkOrderPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddWorkOrderPrice(v)
	})
}

// UpdateWorkOrderPrice sets the "work_order_price" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateWorkOrderPrice() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateWorkOrderPrice()
	})
}

// SetContractPrice sets the "contract_price" field.
func (u *JobUpsertBulk) SetContractPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetContractPrice(v)
	})
}

// AddContractPrice adds v to the "contract_price" field.
func (u *JobUpsertBulk) AddContractPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddContractPrice(v)
	})
}

// UpdateContractPrice sets the "contract_price" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateContractPrice() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateContractPrice()
	})
}

// ClearContractPrice clears the value of the "contract_price" field.
func (u *JobUpsertBulk) ClearContractPrice() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearContractPrice()
	})
}

// SetChangeOrderPrice sets the "change_order_price" field.
func (u *JobUpsertBulk) SetChangeOrderPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetChangeOrderPrice(v)
	})
}

// AddChangeOrderPrice adds v to the "change_order_price" field.
func (u *JobUpsertBulk) AddChangeOrderPrice(v float64) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddChangeOrderPrice(v)
	})
}

// UpdateChangeOrderPrice sets the "change_order_price" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateChangeOrderPrice() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateChangeOrderPrice()
	})
}

// ClearChangeOrderPrice clears the value of the "change_order_price" field.
func (u *JobUpsertBulk) ClearChangeOrderPrice() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearChangeOrderPrice()
	})
}

// SetNote sets the "note" field.
func (u *JobUpsertBulk) SetNote(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateNote() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *JobUpsertBulk) ClearNote() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearNote()
	})
}

// SetShingleColor sets the "shingle_color" field.
func (u *JobUpsertBulk) SetShingleColor(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetShingleColor(v)
	})
}

// UpdateShingleColor sets the "shingle_color" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateShingleColor() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateShingleColor()
	})
}

// ClearShingleColor clears the value of the "shingle_color" field.
func (u *JobUpsertBulk) ClearShingleColor() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearShingleColor()
	})
}

// SetPermitRequired sets the "permit_required" field.
func (u *JobUpsertBulk) SetPermitRequired(v bool) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetPermitRequired(v)
	})
}

// UpdatePermitRequired sets the "permit_required" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdatePermitRequired() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePermitRequired()
	})
}

// ClearPermitRequired clears the value of the "permit_required" field.
func (u *JobUpsertBulk) ClearPermitRequired() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearPermitRequired()
	})
}

// SetInspectionRequired sets the "inspection_required" field.
func (u *JobUpsertBulk) SetInspectionRequired(v bool) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetInspectionRequired(v)
	})
}

// UpdateInspectionRequired sets the "inspection_required" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateInspectionRequired() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInspectionRequired()
	})
}

// ClearInspectionRequired clears the value of the "inspection_required" field.
func (u *JobUpsertBulk) ClearInspectionRequired() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearInspectionRequired()
	})
}

// SetInspectionDate sets the "inspection_date" field.
func (u *JobUpsertBulk) SetInspectionDate(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetInspectionDate(v)
	})
}

// UpdateInspectionDate sets the "inspection_date" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateInspectionDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInspectionDate()
	})
}

// ClearInspectionDate clears the value of the "inspection_date" field.
func (u *JobUpsertBulk) ClearInspectionDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearInspectionDate()
	})
}

// SetProgressInspectionDate sets the "progress_inspection_date" field.
func (u *JobUpsertBulk) SetProgressInspectionDate(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetProgressInspectionDate(v)
	})
}

// UpdateProgressInspectionDate sets the "progress_inspection_date" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateProgressInspectionDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateProgressInspectionDate()
	})
}

// ClearProgressInspectionDate clears the value of the "progress_inspection_date" field.
func (u *JobUpsertBulk) ClearProgressInspectionDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearProgressInspectionDate()
	})
}

// SetInstallDate sets the "install_date" field.
func (u *JobUpsertBulk) SetInstallDate(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetInstallDate(v)
	})
}

// UpdateInstallDate sets the "install_date" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateInstallDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInstallDate()
	})
}

// ClearInstallDate clears the value of the "install_date" field.
func (u *JobUpsertBulk) ClearInstallDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearInstallDate()
	})
}

// SetCompletionDate sets the "completion_date" field.
func (u *JobUpsertBulk) SetCompletionDate(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetCompletionDate(v)
	})
}

// UpdateCompletionDate sets the "completion_date" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateCompletionDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompletionDate()
	})
}

// ClearCompletionDate clears the value of the "completion_date" field.
func (u *JobUpsertBulk) ClearCompletionDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompletionDate()
	})
}

// SetMaterialDeliveryDate sets the "material_delivery_date" field.
func (u *JobUpsertBulk) SetMaterialDeliveryDate(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetMaterialDeliveryDate(v)
	})
}

// UpdateMaterialDeliveryDate sets the "material_delivery_date" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateMaterialDeliveryDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateMaterialDeliveryDate()
	})
}

// ClearMaterialDeliveryDate clears the value of the "material_delivery_date" field.
func (u *JobUpsertBulk) ClearMaterialDeliveryDate() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearMaterialDeliveryDate()
	})
}

// SetAgree sets the "agree" field.
func (u *JobUpsertBulk) SetAgree(v bool) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetAgree(v)
	})
}

// UpdateAgree sets the "agree" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateAgree() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateAgree()
	})
}

// ClearAgree clears the value of the "agree" field.
func (u *JobUpsertBulk) ClearAgree() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearAgree()
	})
}

// SetAgreeAt sets the "agree_at" field.
func (u *JobUpsertBulk) SetAgreeAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetAgreeAt(v)
	})
}

// UpdateAgreeAt sets the "agree_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateAgreeAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateAgreeAt()
	})
}

// ClearAgreeAt clears the value of the "agree_at" field.
func (u *JobUpsertBulk) ClearAgreeAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearAgreeAt()
	})
}

// SetPoNumber sets the "po_number" field.
func (u *JobUpsertBulk) SetPoNumber(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetPoNumber(v)
	})
}

// UpdatePoNumber sets the "po_number" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdatePoNumber() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePoNumber()
	})
}

// ClearPoNumber clears the value of the "po_number" field.
func (u *JobUpsertBulk) ClearPoNumber() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearPoNumber()
	})
}

// SetRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field.
func (u *JobUpsertBulk) SetRoofingPartnerAssignedAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetRoofingPartnerAssignedAt(v)
	})
}

// UpdateRoofingPartnerAssignedAt sets the "roofing_partner_assigned_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateRoofingPartnerAssignedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateRoofingPartnerAssignedAt()
	})
}

// ClearRoofingPartnerAssignedAt clears the value of the "roofing_partner_assigned_at" field.
func (u *JobUpsertBulk) ClearRoofingPartnerAssignedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearRoofingPartnerAssignedAt()
	})
}

// SetRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field.
func (u *JobUpsertBulk) SetRoofingPartnerFlagAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetRoofingPartnerFlagAt(v)
	})
}

// UpdateRoofingPartnerFlagAt sets the "roofing_partner_flag_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateRoofingPartnerFlagAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateRoofingPartnerFlagAt()
	})
}

// ClearRoofingPartnerFlagAt clears the value of the "roofing_partner_flag_at" field.
func (u *JobUpsertBulk) ClearRoofingPartnerFlagAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearRoofingPartnerFlagAt()
	})
}

// Exec executes the query.
func (u *JobUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

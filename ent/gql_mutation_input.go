// Code generated by ent, DO NOT EDIT.

package ent

import (
	"roofix/pkg/enum"
	"time"
)

// UpdateJobInput represents a mutation input for updating jobs.
type UpdateJobInput struct {
	UpdatedAt                     *time.Time
	ClearProgress                 bool
	Progress                      *enum.JobProgress
	ClearProgressAt               bool
	ProgressAt                    *time.Time
	ClearProgressFlagAt           bool
	ProgressFlagAt                *time.Time
	ClearRegionID                 bool
	RegionID                      *uint8
	ClearCompanyRefID             bool
	CompanyRefID                  *string
	ClearCompanyName              bool
	CompanyName                   *string
	Price                         *float64
	WorkOrderPrice                *float64
	ClearContractPrice            bool
	ContractPrice                 *float64
	ClearChangeOrderPrice         bool
	ChangeOrderPrice              *float64
	ClearNote                     bool
	Note                          *string
	ClearShingleColor             bool
	ShingleColor                  *string
	ClearPermitRequired           bool
	PermitRequired                *bool
	ClearInspectionRequired       bool
	InspectionRequired            *bool
	ClearInspectionDate           bool
	InspectionDate                *time.Time
	ClearProgressInspectionDate   bool
	ProgressInspectionDate        *time.Time
	ClearInstallDate              bool
	InstallDate                   *time.Time
	ClearCompletionDate           bool
	CompletionDate                *time.Time
	ClearMaterialDeliveryDate     bool
	MaterialDeliveryDate          *time.Time
	ClearAgree                    bool
	Agree                         *bool
	ClearAgreeAt                  bool
	AgreeAt                       *time.Time
	ClearPoNumber                 bool
	PoNumber                      *string
	ClearRoofingPartnerAssignedAt bool
	RoofingPartnerAssignedAt      *time.Time
	ClearRoofingPartnerFlagAt     bool
	RoofingPartnerFlagAt          *time.Time
	ClearPayments                 bool
	AddPaymentIDs                 []string
	RemovePaymentIDs              []string
	ClearActivities               bool
	AddActivityIDs                []string
	RemoveActivityIDs             []string
	ClearAssignmentHistory        bool
	AddAssignmentHistoryIDs       []string
	RemoveAssignmentHistoryIDs    []string
	ClearProgressHistory          bool
	AddProgressHistoryIDs         []string
	RemoveProgressHistoryIDs      []string
	ClearNotes                    bool
	AddNoteIDs                    []string
	RemoveNoteIDs                 []string
	ClearDocUrls                  bool
	AddDocURLIDs                  []string
	RemoveDocURLIDs               []string
	ClearEstimate                 bool
	EstimateID                    *string
	ClearCreatorAPI               bool
	CreatorAPIID                  *string
	ClearCreator                  bool
	CreatorID                     *string
	ClearHomeOwner                bool
	HomeOwnerID                   *string
	ClearSalesRep                 bool
	SalesRepID                    *string
	ClearRequester                bool
	RequesterID                   *string
	ClearRoofingPartner           bool
	RoofingPartnerID              *string
	ClearIntegrationPartner       bool
	IntegrationPartnerID          *string
	ClearEpcPartner               bool
	EpcPartnerID                  *string
	ClearEpc                      bool
	EpcID                         *string
	ClearEstimatePdf              bool
	EstimatePdfID                 *string
}

// Mutate applies the UpdateJobInput on the JobMutation builder.
func (i *UpdateJobInput) Mutate(m *JobMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearProgress {
		m.ClearProgress()
	}
	if v := i.Progress; v != nil {
		m.SetProgress(*v)
	}
	if i.ClearProgressAt {
		m.ClearProgressAt()
	}
	if v := i.ProgressAt; v != nil {
		m.SetProgressAt(*v)
	}
	if i.ClearProgressFlagAt {
		m.ClearProgressFlagAt()
	}
	if v := i.ProgressFlagAt; v != nil {
		m.SetProgressFlagAt(*v)
	}
	if i.ClearRegionID {
		m.ClearRegionID()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearCompanyRefID {
		m.ClearCompanyRefID()
	}
	if v := i.CompanyRefID; v != nil {
		m.SetCompanyRefID(*v)
	}
	if i.ClearCompanyName {
		m.ClearCompanyName()
	}
	if v := i.CompanyName; v != nil {
		m.SetCompanyName(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if v := i.WorkOrderPrice; v != nil {
		m.SetWorkOrderPrice(*v)
	}
	if i.ClearContractPrice {
		m.ClearContractPrice()
	}
	if v := i.ContractPrice; v != nil {
		m.SetContractPrice(*v)
	}
	if i.ClearChangeOrderPrice {
		m.ClearChangeOrderPrice()
	}
	if v := i.ChangeOrderPrice; v != nil {
		m.SetChangeOrderPrice(*v)
	}
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if i.ClearShingleColor {
		m.ClearShingleColor()
	}
	if v := i.ShingleColor; v != nil {
		m.SetShingleColor(*v)
	}
	if i.ClearPermitRequired {
		m.ClearPermitRequired()
	}
	if v := i.PermitRequired; v != nil {
		m.SetPermitRequired(*v)
	}
	if i.ClearInspectionRequired {
		m.ClearInspectionRequired()
	}
	if v := i.InspectionRequired; v != nil {
		m.SetInspectionRequired(*v)
	}
	if i.ClearInspectionDate {
		m.ClearInspectionDate()
	}
	if v := i.InspectionDate; v != nil {
		m.SetInspectionDate(*v)
	}
	if i.ClearProgressInspectionDate {
		m.ClearProgressInspectionDate()
	}
	if v := i.ProgressInspectionDate; v != nil {
		m.SetProgressInspectionDate(*v)
	}
	if i.ClearInstallDate {
		m.ClearInstallDate()
	}
	if v := i.InstallDate; v != nil {
		m.SetInstallDate(*v)
	}
	if i.ClearCompletionDate {
		m.ClearCompletionDate()
	}
	if v := i.CompletionDate; v != nil {
		m.SetCompletionDate(*v)
	}
	if i.ClearMaterialDeliveryDate {
		m.ClearMaterialDeliveryDate()
	}
	if v := i.MaterialDeliveryDate; v != nil {
		m.SetMaterialDeliveryDate(*v)
	}
	if i.ClearAgree {
		m.ClearAgree()
	}
	if v := i.Agree; v != nil {
		m.SetAgree(*v)
	}
	if i.ClearAgreeAt {
		m.ClearAgreeAt()
	}
	if v := i.AgreeAt; v != nil {
		m.SetAgreeAt(*v)
	}
	if i.ClearPoNumber {
		m.ClearPoNumber()
	}
	if v := i.PoNumber; v != nil {
		m.SetPoNumber(*v)
	}
	if i.ClearRoofingPartnerAssignedAt {
		m.ClearRoofingPartnerAssignedAt()
	}
	if v := i.RoofingPartnerAssignedAt; v != nil {
		m.SetRoofingPartnerAssignedAt(*v)
	}
	if i.ClearRoofingPartnerFlagAt {
		m.ClearRoofingPartnerFlagAt()
	}
	if v := i.RoofingPartnerFlagAt; v != nil {
		m.SetRoofingPartnerFlagAt(*v)
	}
	if i.ClearPayments {
		m.ClearPayments()
	}
	if v := i.AddPaymentIDs; len(v) > 0 {
		m.AddPaymentIDs(v...)
	}
	if v := i.RemovePaymentIDs; len(v) > 0 {
		m.RemovePaymentIDs(v...)
	}
	if i.ClearActivities {
		m.ClearActivities()
	}
	if v := i.AddActivityIDs; len(v) > 0 {
		m.AddActivityIDs(v...)
	}
	if v := i.RemoveActivityIDs; len(v) > 0 {
		m.RemoveActivityIDs(v...)
	}
	if i.ClearAssignmentHistory {
		m.ClearAssignmentHistory()
	}
	if v := i.AddAssignmentHistoryIDs; len(v) > 0 {
		m.AddAssignmentHistoryIDs(v...)
	}
	if v := i.RemoveAssignmentHistoryIDs; len(v) > 0 {
		m.RemoveAssignmentHistoryIDs(v...)
	}
	if i.ClearProgressHistory {
		m.ClearProgressHistory()
	}
	if v := i.AddProgressHistoryIDs; len(v) > 0 {
		m.AddProgressHistoryIDs(v...)
	}
	if v := i.RemoveProgressHistoryIDs; len(v) > 0 {
		m.RemoveProgressHistoryIDs(v...)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.AddNoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.RemoveNoteIDs; len(v) > 0 {
		m.RemoveNoteIDs(v...)
	}
	if i.ClearDocUrls {
		m.ClearDocUrls()
	}
	if v := i.AddDocURLIDs; len(v) > 0 {
		m.AddDocURLIDs(v...)
	}
	if v := i.RemoveDocURLIDs; len(v) > 0 {
		m.RemoveDocURLIDs(v...)
	}
	if i.ClearEstimate {
		m.ClearEstimate()
	}
	if v := i.EstimateID; v != nil {
		m.SetEstimateID(*v)
	}
	if i.ClearCreatorAPI {
		m.ClearCreatorAPI()
	}
	if v := i.CreatorAPIID; v != nil {
		m.SetCreatorAPIID(*v)
	}
	if i.ClearCreator {
		m.ClearCreator()
	}
	if v := i.CreatorID; v != nil {
		m.SetCreatorID(*v)
	}
	if i.ClearHomeOwner {
		m.ClearHomeOwner()
	}
	if v := i.HomeOwnerID; v != nil {
		m.SetHomeOwnerID(*v)
	}
	if i.ClearSalesRep {
		m.ClearSalesRep()
	}
	if v := i.SalesRepID; v != nil {
		m.SetSalesRepID(*v)
	}
	if i.ClearRequester {
		m.ClearRequester()
	}
	if v := i.RequesterID; v != nil {
		m.SetRequesterID(*v)
	}
	if i.ClearRoofingPartner {
		m.ClearRoofingPartner()
	}
	if v := i.RoofingPartnerID; v != nil {
		m.SetRoofingPartnerID(*v)
	}
	if i.ClearIntegrationPartner {
		m.ClearIntegrationPartner()
	}
	if v := i.IntegrationPartnerID; v != nil {
		m.SetIntegrationPartnerID(*v)
	}
	if i.ClearEpcPartner {
		m.ClearEpcPartner()
	}
	if v := i.EpcPartnerID; v != nil {
		m.SetEpcPartnerID(*v)
	}
	if i.ClearEpc {
		m.ClearEpc()
	}
	if v := i.EpcID; v != nil {
		m.SetEpcID(*v)
	}
	if i.ClearEstimatePdf {
		m.ClearEstimatePdf()
	}
	if v := i.EstimatePdfID; v != nil {
		m.SetEstimatePdfID(*v)
	}
}

// SetInput applies the change-set in the UpdateJobInput on the JobUpdate builder.
func (c *JobUpdate) SetInput(i UpdateJobInput) *JobUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateJobInput on the JobUpdateOne builder.
func (c *JobUpdateOne) SetInput(i UpdateJobInput) *JobUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePartnerServiceCityInput represents a mutation input for creating partnerservicecities.
type CreatePartnerServiceCityInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	PostalID   string
	Active     *bool
	Name       string
	NaicsCode  uint
	LicenseNo  *string
	ProofDocID *string
	PartnerID  string
}

// Mutate applies the CreatePartnerServiceCityInput on the PartnerServiceCityMutation builder.
func (i *CreatePartnerServiceCityInput) Mutate(m *PartnerServiceCityMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetPostalID(i.PostalID)
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	m.SetName(i.Name)
	m.SetNaicsCode(i.NaicsCode)
	if v := i.LicenseNo; v != nil {
		m.SetLicenseNo(*v)
	}
	if v := i.ProofDocID; v != nil {
		m.SetProofDocID(*v)
	}
	m.SetPartnerID(i.PartnerID)
}

// SetInput applies the change-set in the CreatePartnerServiceCityInput on the PartnerServiceCityCreate builder.
func (c *PartnerServiceCityCreate) SetInput(i CreatePartnerServiceCityInput) *PartnerServiceCityCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePartnerServiceCityInput represents a mutation input for updating partnerservicecities.
type UpdatePartnerServiceCityInput struct {
	UpdatedAt       *time.Time
	PostalID        *string
	Active          *bool
	Name            *string
	NaicsCode       *uint
	ClearLicenseNo  bool
	LicenseNo       *string
	ClearProofDocID bool
	ProofDocID      *string
	PartnerID       *string
}

// Mutate applies the UpdatePartnerServiceCityInput on the PartnerServiceCityMutation builder.
func (i *UpdatePartnerServiceCityInput) Mutate(m *PartnerServiceCityMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.PostalID; v != nil {
		m.SetPostalID(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.NaicsCode; v != nil {
		m.SetNaicsCode(*v)
	}
	if i.ClearLicenseNo {
		m.ClearLicenseNo()
	}
	if v := i.LicenseNo; v != nil {
		m.SetLicenseNo(*v)
	}
	if i.ClearProofDocID {
		m.ClearProofDocID()
	}
	if v := i.ProofDocID; v != nil {
		m.SetProofDocID(*v)
	}
	if v := i.PartnerID; v != nil {
		m.SetPartnerID(*v)
	}
}

// SetInput applies the change-set in the UpdatePartnerServiceCityInput on the PartnerServiceCityUpdate builder.
func (c *PartnerServiceCityUpdate) SetInput(i UpdatePartnerServiceCityInput) *PartnerServiceCityUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePartnerServiceCityInput on the PartnerServiceCityUpdateOne builder.
func (c *PartnerServiceCityUpdateOne) SetInput(i UpdatePartnerServiceCityInput) *PartnerServiceCityUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePartnerServiceStateInput represents a mutation input for creating partnerservicestates.
type CreatePartnerServiceStateInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	Country        string
	State          string
	LicenseNo      *string
	LicenseExpDate *time.Time
	ProofDocID     *string
	PartnerID      string
}

// Mutate applies the CreatePartnerServiceStateInput on the PartnerServiceStateMutation builder.
func (i *CreatePartnerServiceStateInput) Mutate(m *PartnerServiceStateMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCountry(i.Country)
	m.SetState(i.State)
	if v := i.LicenseNo; v != nil {
		m.SetLicenseNo(*v)
	}
	if v := i.LicenseExpDate; v != nil {
		m.SetLicenseExpDate(*v)
	}
	if v := i.ProofDocID; v != nil {
		m.SetProofDocID(*v)
	}
	m.SetPartnerID(i.PartnerID)
}

// SetInput applies the change-set in the CreatePartnerServiceStateInput on the PartnerServiceStateCreate builder.
func (c *PartnerServiceStateCreate) SetInput(i CreatePartnerServiceStateInput) *PartnerServiceStateCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePartnerServiceStateInput represents a mutation input for updating partnerservicestates.
type UpdatePartnerServiceStateInput struct {
	UpdatedAt           *time.Time
	Country             *string
	State               *string
	ClearLicenseNo      bool
	LicenseNo           *string
	ClearLicenseExpDate bool
	LicenseExpDate      *time.Time
	ClearProofDocID     bool
	ProofDocID          *string
	PartnerID           *string
}

// Mutate applies the UpdatePartnerServiceStateInput on the PartnerServiceStateMutation builder.
func (i *UpdatePartnerServiceStateInput) Mutate(m *PartnerServiceStateMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if i.ClearLicenseNo {
		m.ClearLicenseNo()
	}
	if v := i.LicenseNo; v != nil {
		m.SetLicenseNo(*v)
	}
	if i.ClearLicenseExpDate {
		m.ClearLicenseExpDate()
	}
	if v := i.LicenseExpDate; v != nil {
		m.SetLicenseExpDate(*v)
	}
	if i.ClearProofDocID {
		m.ClearProofDocID()
	}
	if v := i.ProofDocID; v != nil {
		m.SetProofDocID(*v)
	}
	if v := i.PartnerID; v != nil {
		m.SetPartnerID(*v)
	}
}

// SetInput applies the change-set in the UpdatePartnerServiceStateInput on the PartnerServiceStateUpdate builder.
func (c *PartnerServiceStateUpdate) SetInput(i UpdatePartnerServiceStateInput) *PartnerServiceStateUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePartnerServiceStateInput on the PartnerServiceStateUpdateOne builder.
func (c *PartnerServiceStateUpdateOne) SetInput(i UpdatePartnerServiceStateInput) *PartnerServiceStateUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

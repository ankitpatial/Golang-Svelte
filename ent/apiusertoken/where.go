// Code generated by ent, DO NOT EDIT.

package apiusertoken

import (
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldCreatedAt, v))
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldTokenType, v))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldTokenID, v))
}

// RefreshTokenID applies equality check predicate on the "refresh_token_id" field. It's identical to RefreshTokenIDEQ.
func RefreshTokenID(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldRefreshTokenID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLTE(FieldCreatedAt, v))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGT(FieldTokenType, v))
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGTE(FieldTokenType, v))
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLT(FieldTokenType, v))
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLTE(FieldTokenType, v))
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContains(FieldTokenType, v))
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldHasPrefix(FieldTokenType, v))
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldHasSuffix(FieldTokenType, v))
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEqualFold(FieldTokenType, v))
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContainsFold(FieldTokenType, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldTokenID, v))
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNEQ(FieldTokenID, v))
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldIn(FieldTokenID, vs...))
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNotIn(FieldTokenID, vs...))
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGT(FieldTokenID, v))
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGTE(FieldTokenID, v))
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLT(FieldTokenID, v))
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLTE(FieldTokenID, v))
}

// TokenIDContains applies the Contains predicate on the "token_id" field.
func TokenIDContains(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContains(FieldTokenID, v))
}

// TokenIDHasPrefix applies the HasPrefix predicate on the "token_id" field.
func TokenIDHasPrefix(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldHasPrefix(FieldTokenID, v))
}

// TokenIDHasSuffix applies the HasSuffix predicate on the "token_id" field.
func TokenIDHasSuffix(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldHasSuffix(FieldTokenID, v))
}

// TokenIDEqualFold applies the EqualFold predicate on the "token_id" field.
func TokenIDEqualFold(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEqualFold(FieldTokenID, v))
}

// TokenIDContainsFold applies the ContainsFold predicate on the "token_id" field.
func TokenIDContainsFold(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContainsFold(FieldTokenID, v))
}

// RefreshTokenIDEQ applies the EQ predicate on the "refresh_token_id" field.
func RefreshTokenIDEQ(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEQ(FieldRefreshTokenID, v))
}

// RefreshTokenIDNEQ applies the NEQ predicate on the "refresh_token_id" field.
func RefreshTokenIDNEQ(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNEQ(FieldRefreshTokenID, v))
}

// RefreshTokenIDIn applies the In predicate on the "refresh_token_id" field.
func RefreshTokenIDIn(vs ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldIn(FieldRefreshTokenID, vs...))
}

// RefreshTokenIDNotIn applies the NotIn predicate on the "refresh_token_id" field.
func RefreshTokenIDNotIn(vs ...string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldNotIn(FieldRefreshTokenID, vs...))
}

// RefreshTokenIDGT applies the GT predicate on the "refresh_token_id" field.
func RefreshTokenIDGT(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGT(FieldRefreshTokenID, v))
}

// RefreshTokenIDGTE applies the GTE predicate on the "refresh_token_id" field.
func RefreshTokenIDGTE(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldGTE(FieldRefreshTokenID, v))
}

// RefreshTokenIDLT applies the LT predicate on the "refresh_token_id" field.
func RefreshTokenIDLT(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLT(FieldRefreshTokenID, v))
}

// RefreshTokenIDLTE applies the LTE predicate on the "refresh_token_id" field.
func RefreshTokenIDLTE(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldLTE(FieldRefreshTokenID, v))
}

// RefreshTokenIDContains applies the Contains predicate on the "refresh_token_id" field.
func RefreshTokenIDContains(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContains(FieldRefreshTokenID, v))
}

// RefreshTokenIDHasPrefix applies the HasPrefix predicate on the "refresh_token_id" field.
func RefreshTokenIDHasPrefix(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldHasPrefix(FieldRefreshTokenID, v))
}

// RefreshTokenIDHasSuffix applies the HasSuffix predicate on the "refresh_token_id" field.
func RefreshTokenIDHasSuffix(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldHasSuffix(FieldRefreshTokenID, v))
}

// RefreshTokenIDEqualFold applies the EqualFold predicate on the "refresh_token_id" field.
func RefreshTokenIDEqualFold(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldEqualFold(FieldRefreshTokenID, v))
}

// RefreshTokenIDContainsFold applies the ContainsFold predicate on the "refresh_token_id" field.
func RefreshTokenIDContainsFold(v string) predicate.ApiUserToken {
	return predicate.ApiUserToken(sql.FieldContainsFold(FieldRefreshTokenID, v))
}

// HasAPIUser applies the HasEdge predicate on the "api_user" edge.
func HasAPIUser() predicate.ApiUserToken {
	return predicate.ApiUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, APIUserTable, APIUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIUserWith applies the HasEdge predicate on the "api_user" edge with a given conditions (other predicates).
func HasAPIUserWith(preds ...predicate.ApiUser) predicate.ApiUserToken {
	return predicate.ApiUserToken(func(s *sql.Selector) {
		step := newAPIUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiUserToken) predicate.ApiUserToken {
	return predicate.ApiUserToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiUserToken) predicate.ApiUserToken {
	return predicate.ApiUserToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiUserToken) predicate.ApiUserToken {
	return predicate.ApiUserToken(func(s *sql.Selector) {
		p(s.Not())
	})
}

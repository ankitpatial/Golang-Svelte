// Code generated by ent, DO NOT EDIT.

package apiusertoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apiusertoken type in the database.
	Label = "api_user_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldTokenType holds the string denoting the token_type field in the database.
	FieldTokenType = "token_type"
	// FieldTokenID holds the string denoting the token_id field in the database.
	FieldTokenID = "token_id"
	// FieldRefreshTokenID holds the string denoting the refresh_token_id field in the database.
	FieldRefreshTokenID = "refresh_token_id"
	// EdgeAPIUser holds the string denoting the api_user edge name in mutations.
	EdgeAPIUser = "api_user"
	// Table holds the table name of the apiusertoken in the database.
	Table = "api_user_tokens"
	// APIUserTable is the table that holds the api_user relation/edge.
	APIUserTable = "api_user_tokens"
	// APIUserInverseTable is the table name for the ApiUser entity.
	// It exists in this package in order to avoid circular dependency with the "apiuser" package.
	APIUserInverseTable = "api_users"
	// APIUserColumn is the table column denoting the api_user relation/edge.
	APIUserColumn = "api_user_id"
)

// Columns holds all SQL columns for apiusertoken fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldTokenType,
	FieldTokenID,
	FieldRefreshTokenID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "api_user_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"api_user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// TokenTypeValidator is a validator for the "token_type" field. It is called by the builders before save.
	TokenTypeValidator func(string) error
	// TokenIDValidator is a validator for the "token_id" field. It is called by the builders before save.
	TokenIDValidator func(string) error
	// RefreshTokenIDValidator is a validator for the "refresh_token_id" field. It is called by the builders before save.
	RefreshTokenIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the ApiUserToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTokenType orders the results by the token_type field.
func ByTokenType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenType, opts...).ToFunc()
}

// ByTokenID orders the results by the token_id field.
func ByTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenID, opts...).ToFunc()
}

// ByRefreshTokenID orders the results by the refresh_token_id field.
func ByRefreshTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshTokenID, opts...).ToFunc()
}

// ByAPIUserField orders the results by api_user field.
func ByAPIUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIUserStep(), sql.OrderByField(field, opts...))
	}
}
func newAPIUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, APIUserTable, APIUserColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package partner

import (
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldExternalID, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCreatorID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldAddress, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldWebsite, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldPhone, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldLongitude, v))
}

// IsNationWide applies equality check predicate on the "is_nation_wide" field. It's identical to IsNationWideEQ.
func IsNationWide(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldIsNationWide, v))
}

// CrewCount applies equality check predicate on the "crew_count" field. It's identical to CrewCountEQ.
func CrewCount(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCrewCount, v))
}

// YearsInBusiness applies equality check predicate on the "years_in_business" field. It's identical to YearsInBusinessEQ.
func YearsInBusiness(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldYearsInBusiness, v))
}

// JobCapacity applies equality check predicate on the "job_capacity" field. It's identical to JobCapacityEQ.
func JobCapacity(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldJobCapacity, v))
}

// AsphaltLeadT applies equality check predicate on the "asphalt_lead_t" field. It's identical to AsphaltLeadTEQ.
func AsphaltLeadT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldAsphaltLeadT, v))
}

// MetalLeadT applies equality check predicate on the "metal_lead_t" field. It's identical to MetalLeadTEQ.
func MetalLeadT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldMetalLeadT, v))
}

// TileLeadT applies equality check predicate on the "tile_lead_t" field. It's identical to TileLeadTEQ.
func TileLeadT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldTileLeadT, v))
}

// SetupStepsCompleted applies equality check predicate on the "setup_steps_completed" field. It's identical to SetupStepsCompletedEQ.
func SetupStepsCompleted(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldSetupStepsCompleted, v))
}

// SalesVolume applies equality check predicate on the "sales_volume" field. It's identical to SalesVolumeEQ.
func SalesVolume(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldSalesVolume, v))
}

// DownPayment applies equality check predicate on the "down_payment" field. It's identical to DownPaymentEQ.
func DownPayment(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldDownPayment, v))
}

// Pif applies equality check predicate on the "pif" field. It's identical to PifEQ.
func Pif(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldPif, v))
}

// InstallInHouse applies equality check predicate on the "install_in_house" field. It's identical to InstallInHouseEQ.
func InstallInHouse(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldInstallInHouse, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldUpdatedAt, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldExternalID, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldCreatorID, v))
}

// CreatorIDContains applies the Contains predicate on the "creator_id" field.
func CreatorIDContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldCreatorID, v))
}

// CreatorIDHasPrefix applies the HasPrefix predicate on the "creator_id" field.
func CreatorIDHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldCreatorID, v))
}

// CreatorIDHasSuffix applies the HasSuffix predicate on the "creator_id" field.
func CreatorIDHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldCreatorID, v))
}

// CreatorIDIsNil applies the IsNil predicate on the "creator_id" field.
func CreatorIDIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldCreatorID))
}

// CreatorIDNotNil applies the NotNil predicate on the "creator_id" field.
func CreatorIDNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldCreatorID))
}

// CreatorIDEqualFold applies the EqualFold predicate on the "creator_id" field.
func CreatorIDEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldCreatorID, v))
}

// CreatorIDContainsFold applies the ContainsFold predicate on the "creator_id" field.
func CreatorIDContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldCreatorID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enum.Partner) predicate.Partner {
	vc := v
	return predicate.Partner(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enum.Partner) predicate.Partner {
	vc := v
	return predicate.Partner(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enum.Partner) predicate.Partner {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Partner(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enum.Partner) predicate.Partner {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Partner(sql.FieldNotIn(FieldType, v...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldAddress, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldWebsite, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldPhone, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldLatitude, v))
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldLatitude))
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldLatitude))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldLongitude, v))
}

// LongitudeIsNil applies the IsNil predicate on the "longitude" field.
func LongitudeIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldLongitude))
}

// LongitudeNotNil applies the NotNil predicate on the "longitude" field.
func LongitudeNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldLongitude))
}

// IsNationWideEQ applies the EQ predicate on the "is_nation_wide" field.
func IsNationWideEQ(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldIsNationWide, v))
}

// IsNationWideNEQ applies the NEQ predicate on the "is_nation_wide" field.
func IsNationWideNEQ(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldIsNationWide, v))
}

// CrewCountEQ applies the EQ predicate on the "crew_count" field.
func CrewCountEQ(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCrewCount, v))
}

// CrewCountNEQ applies the NEQ predicate on the "crew_count" field.
func CrewCountNEQ(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldCrewCount, v))
}

// CrewCountIn applies the In predicate on the "crew_count" field.
func CrewCountIn(vs ...uint16) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldCrewCount, vs...))
}

// CrewCountNotIn applies the NotIn predicate on the "crew_count" field.
func CrewCountNotIn(vs ...uint16) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldCrewCount, vs...))
}

// CrewCountGT applies the GT predicate on the "crew_count" field.
func CrewCountGT(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldCrewCount, v))
}

// CrewCountGTE applies the GTE predicate on the "crew_count" field.
func CrewCountGTE(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldCrewCount, v))
}

// CrewCountLT applies the LT predicate on the "crew_count" field.
func CrewCountLT(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldCrewCount, v))
}

// CrewCountLTE applies the LTE predicate on the "crew_count" field.
func CrewCountLTE(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldCrewCount, v))
}

// YearsInBusinessEQ applies the EQ predicate on the "years_in_business" field.
func YearsInBusinessEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldYearsInBusiness, v))
}

// YearsInBusinessNEQ applies the NEQ predicate on the "years_in_business" field.
func YearsInBusinessNEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldYearsInBusiness, v))
}

// YearsInBusinessIn applies the In predicate on the "years_in_business" field.
func YearsInBusinessIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldYearsInBusiness, vs...))
}

// YearsInBusinessNotIn applies the NotIn predicate on the "years_in_business" field.
func YearsInBusinessNotIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldYearsInBusiness, vs...))
}

// YearsInBusinessGT applies the GT predicate on the "years_in_business" field.
func YearsInBusinessGT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldYearsInBusiness, v))
}

// YearsInBusinessGTE applies the GTE predicate on the "years_in_business" field.
func YearsInBusinessGTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldYearsInBusiness, v))
}

// YearsInBusinessLT applies the LT predicate on the "years_in_business" field.
func YearsInBusinessLT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldYearsInBusiness, v))
}

// YearsInBusinessLTE applies the LTE predicate on the "years_in_business" field.
func YearsInBusinessLTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldYearsInBusiness, v))
}

// YearsInBusinessIsNil applies the IsNil predicate on the "years_in_business" field.
func YearsInBusinessIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldYearsInBusiness))
}

// YearsInBusinessNotNil applies the NotNil predicate on the "years_in_business" field.
func YearsInBusinessNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldYearsInBusiness))
}

// JobCapacityEQ applies the EQ predicate on the "job_capacity" field.
func JobCapacityEQ(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldJobCapacity, v))
}

// JobCapacityNEQ applies the NEQ predicate on the "job_capacity" field.
func JobCapacityNEQ(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldJobCapacity, v))
}

// JobCapacityIn applies the In predicate on the "job_capacity" field.
func JobCapacityIn(vs ...uint16) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldJobCapacity, vs...))
}

// JobCapacityNotIn applies the NotIn predicate on the "job_capacity" field.
func JobCapacityNotIn(vs ...uint16) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldJobCapacity, vs...))
}

// JobCapacityGT applies the GT predicate on the "job_capacity" field.
func JobCapacityGT(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldJobCapacity, v))
}

// JobCapacityGTE applies the GTE predicate on the "job_capacity" field.
func JobCapacityGTE(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldJobCapacity, v))
}

// JobCapacityLT applies the LT predicate on the "job_capacity" field.
func JobCapacityLT(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldJobCapacity, v))
}

// JobCapacityLTE applies the LTE predicate on the "job_capacity" field.
func JobCapacityLTE(v uint16) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldJobCapacity, v))
}

// AsphaltLeadTEQ applies the EQ predicate on the "asphalt_lead_t" field.
func AsphaltLeadTEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldAsphaltLeadT, v))
}

// AsphaltLeadTNEQ applies the NEQ predicate on the "asphalt_lead_t" field.
func AsphaltLeadTNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldAsphaltLeadT, v))
}

// AsphaltLeadTIn applies the In predicate on the "asphalt_lead_t" field.
func AsphaltLeadTIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldAsphaltLeadT, vs...))
}

// AsphaltLeadTNotIn applies the NotIn predicate on the "asphalt_lead_t" field.
func AsphaltLeadTNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldAsphaltLeadT, vs...))
}

// AsphaltLeadTGT applies the GT predicate on the "asphalt_lead_t" field.
func AsphaltLeadTGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldAsphaltLeadT, v))
}

// AsphaltLeadTGTE applies the GTE predicate on the "asphalt_lead_t" field.
func AsphaltLeadTGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldAsphaltLeadT, v))
}

// AsphaltLeadTLT applies the LT predicate on the "asphalt_lead_t" field.
func AsphaltLeadTLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldAsphaltLeadT, v))
}

// AsphaltLeadTLTE applies the LTE predicate on the "asphalt_lead_t" field.
func AsphaltLeadTLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldAsphaltLeadT, v))
}

// AsphaltLeadTContains applies the Contains predicate on the "asphalt_lead_t" field.
func AsphaltLeadTContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldAsphaltLeadT, v))
}

// AsphaltLeadTHasPrefix applies the HasPrefix predicate on the "asphalt_lead_t" field.
func AsphaltLeadTHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldAsphaltLeadT, v))
}

// AsphaltLeadTHasSuffix applies the HasSuffix predicate on the "asphalt_lead_t" field.
func AsphaltLeadTHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldAsphaltLeadT, v))
}

// AsphaltLeadTIsNil applies the IsNil predicate on the "asphalt_lead_t" field.
func AsphaltLeadTIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldAsphaltLeadT))
}

// AsphaltLeadTNotNil applies the NotNil predicate on the "asphalt_lead_t" field.
func AsphaltLeadTNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldAsphaltLeadT))
}

// AsphaltLeadTEqualFold applies the EqualFold predicate on the "asphalt_lead_t" field.
func AsphaltLeadTEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldAsphaltLeadT, v))
}

// AsphaltLeadTContainsFold applies the ContainsFold predicate on the "asphalt_lead_t" field.
func AsphaltLeadTContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldAsphaltLeadT, v))
}

// MetalLeadTEQ applies the EQ predicate on the "metal_lead_t" field.
func MetalLeadTEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldMetalLeadT, v))
}

// MetalLeadTNEQ applies the NEQ predicate on the "metal_lead_t" field.
func MetalLeadTNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldMetalLeadT, v))
}

// MetalLeadTIn applies the In predicate on the "metal_lead_t" field.
func MetalLeadTIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldMetalLeadT, vs...))
}

// MetalLeadTNotIn applies the NotIn predicate on the "metal_lead_t" field.
func MetalLeadTNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldMetalLeadT, vs...))
}

// MetalLeadTGT applies the GT predicate on the "metal_lead_t" field.
func MetalLeadTGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldMetalLeadT, v))
}

// MetalLeadTGTE applies the GTE predicate on the "metal_lead_t" field.
func MetalLeadTGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldMetalLeadT, v))
}

// MetalLeadTLT applies the LT predicate on the "metal_lead_t" field.
func MetalLeadTLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldMetalLeadT, v))
}

// MetalLeadTLTE applies the LTE predicate on the "metal_lead_t" field.
func MetalLeadTLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldMetalLeadT, v))
}

// MetalLeadTContains applies the Contains predicate on the "metal_lead_t" field.
func MetalLeadTContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldMetalLeadT, v))
}

// MetalLeadTHasPrefix applies the HasPrefix predicate on the "metal_lead_t" field.
func MetalLeadTHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldMetalLeadT, v))
}

// MetalLeadTHasSuffix applies the HasSuffix predicate on the "metal_lead_t" field.
func MetalLeadTHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldMetalLeadT, v))
}

// MetalLeadTIsNil applies the IsNil predicate on the "metal_lead_t" field.
func MetalLeadTIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldMetalLeadT))
}

// MetalLeadTNotNil applies the NotNil predicate on the "metal_lead_t" field.
func MetalLeadTNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldMetalLeadT))
}

// MetalLeadTEqualFold applies the EqualFold predicate on the "metal_lead_t" field.
func MetalLeadTEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldMetalLeadT, v))
}

// MetalLeadTContainsFold applies the ContainsFold predicate on the "metal_lead_t" field.
func MetalLeadTContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldMetalLeadT, v))
}

// TileLeadTEQ applies the EQ predicate on the "tile_lead_t" field.
func TileLeadTEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldTileLeadT, v))
}

// TileLeadTNEQ applies the NEQ predicate on the "tile_lead_t" field.
func TileLeadTNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldTileLeadT, v))
}

// TileLeadTIn applies the In predicate on the "tile_lead_t" field.
func TileLeadTIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldTileLeadT, vs...))
}

// TileLeadTNotIn applies the NotIn predicate on the "tile_lead_t" field.
func TileLeadTNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldTileLeadT, vs...))
}

// TileLeadTGT applies the GT predicate on the "tile_lead_t" field.
func TileLeadTGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldTileLeadT, v))
}

// TileLeadTGTE applies the GTE predicate on the "tile_lead_t" field.
func TileLeadTGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldTileLeadT, v))
}

// TileLeadTLT applies the LT predicate on the "tile_lead_t" field.
func TileLeadTLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldTileLeadT, v))
}

// TileLeadTLTE applies the LTE predicate on the "tile_lead_t" field.
func TileLeadTLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldTileLeadT, v))
}

// TileLeadTContains applies the Contains predicate on the "tile_lead_t" field.
func TileLeadTContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldTileLeadT, v))
}

// TileLeadTHasPrefix applies the HasPrefix predicate on the "tile_lead_t" field.
func TileLeadTHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldTileLeadT, v))
}

// TileLeadTHasSuffix applies the HasSuffix predicate on the "tile_lead_t" field.
func TileLeadTHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldTileLeadT, v))
}

// TileLeadTIsNil applies the IsNil predicate on the "tile_lead_t" field.
func TileLeadTIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldTileLeadT))
}

// TileLeadTNotNil applies the NotNil predicate on the "tile_lead_t" field.
func TileLeadTNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldTileLeadT))
}

// TileLeadTEqualFold applies the EqualFold predicate on the "tile_lead_t" field.
func TileLeadTEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldTileLeadT, v))
}

// TileLeadTContainsFold applies the ContainsFold predicate on the "tile_lead_t" field.
func TileLeadTContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldTileLeadT, v))
}

// SetupStepsCompletedEQ applies the EQ predicate on the "setup_steps_completed" field.
func SetupStepsCompletedEQ(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldSetupStepsCompleted, v))
}

// SetupStepsCompletedNEQ applies the NEQ predicate on the "setup_steps_completed" field.
func SetupStepsCompletedNEQ(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldSetupStepsCompleted, v))
}

// SetupStepsCompletedIn applies the In predicate on the "setup_steps_completed" field.
func SetupStepsCompletedIn(vs ...uint8) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldSetupStepsCompleted, vs...))
}

// SetupStepsCompletedNotIn applies the NotIn predicate on the "setup_steps_completed" field.
func SetupStepsCompletedNotIn(vs ...uint8) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldSetupStepsCompleted, vs...))
}

// SetupStepsCompletedGT applies the GT predicate on the "setup_steps_completed" field.
func SetupStepsCompletedGT(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldSetupStepsCompleted, v))
}

// SetupStepsCompletedGTE applies the GTE predicate on the "setup_steps_completed" field.
func SetupStepsCompletedGTE(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldSetupStepsCompleted, v))
}

// SetupStepsCompletedLT applies the LT predicate on the "setup_steps_completed" field.
func SetupStepsCompletedLT(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldSetupStepsCompleted, v))
}

// SetupStepsCompletedLTE applies the LTE predicate on the "setup_steps_completed" field.
func SetupStepsCompletedLTE(v uint8) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldSetupStepsCompleted, v))
}

// SalesVolumeEQ applies the EQ predicate on the "sales_volume" field.
func SalesVolumeEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldSalesVolume, v))
}

// SalesVolumeNEQ applies the NEQ predicate on the "sales_volume" field.
func SalesVolumeNEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldSalesVolume, v))
}

// SalesVolumeIn applies the In predicate on the "sales_volume" field.
func SalesVolumeIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldSalesVolume, vs...))
}

// SalesVolumeNotIn applies the NotIn predicate on the "sales_volume" field.
func SalesVolumeNotIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldSalesVolume, vs...))
}

// SalesVolumeGT applies the GT predicate on the "sales_volume" field.
func SalesVolumeGT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldSalesVolume, v))
}

// SalesVolumeGTE applies the GTE predicate on the "sales_volume" field.
func SalesVolumeGTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldSalesVolume, v))
}

// SalesVolumeLT applies the LT predicate on the "sales_volume" field.
func SalesVolumeLT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldSalesVolume, v))
}

// SalesVolumeLTE applies the LTE predicate on the "sales_volume" field.
func SalesVolumeLTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldSalesVolume, v))
}

// SalesVolumeIsNil applies the IsNil predicate on the "sales_volume" field.
func SalesVolumeIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldSalesVolume))
}

// SalesVolumeNotNil applies the NotNil predicate on the "sales_volume" field.
func SalesVolumeNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldSalesVolume))
}

// DownPaymentEQ applies the EQ predicate on the "down_payment" field.
func DownPaymentEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldDownPayment, v))
}

// DownPaymentNEQ applies the NEQ predicate on the "down_payment" field.
func DownPaymentNEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldDownPayment, v))
}

// DownPaymentIn applies the In predicate on the "down_payment" field.
func DownPaymentIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldDownPayment, vs...))
}

// DownPaymentNotIn applies the NotIn predicate on the "down_payment" field.
func DownPaymentNotIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldDownPayment, vs...))
}

// DownPaymentGT applies the GT predicate on the "down_payment" field.
func DownPaymentGT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldDownPayment, v))
}

// DownPaymentGTE applies the GTE predicate on the "down_payment" field.
func DownPaymentGTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldDownPayment, v))
}

// DownPaymentLT applies the LT predicate on the "down_payment" field.
func DownPaymentLT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldDownPayment, v))
}

// DownPaymentLTE applies the LTE predicate on the "down_payment" field.
func DownPaymentLTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldDownPayment, v))
}

// DownPaymentIsNil applies the IsNil predicate on the "down_payment" field.
func DownPaymentIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldDownPayment))
}

// DownPaymentNotNil applies the NotNil predicate on the "down_payment" field.
func DownPaymentNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldDownPayment))
}

// PifEQ applies the EQ predicate on the "pif" field.
func PifEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldPif, v))
}

// PifNEQ applies the NEQ predicate on the "pif" field.
func PifNEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldPif, v))
}

// PifIn applies the In predicate on the "pif" field.
func PifIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldPif, vs...))
}

// PifNotIn applies the NotIn predicate on the "pif" field.
func PifNotIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldPif, vs...))
}

// PifGT applies the GT predicate on the "pif" field.
func PifGT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldPif, v))
}

// PifGTE applies the GTE predicate on the "pif" field.
func PifGTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldPif, v))
}

// PifLT applies the LT predicate on the "pif" field.
func PifLT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldPif, v))
}

// PifLTE applies the LTE predicate on the "pif" field.
func PifLTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldPif, v))
}

// PifIsNil applies the IsNil predicate on the "pif" field.
func PifIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldPif))
}

// PifNotNil applies the NotNil predicate on the "pif" field.
func PifNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldPif))
}

// InstallInHouseEQ applies the EQ predicate on the "install_in_house" field.
func InstallInHouseEQ(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldInstallInHouse, v))
}

// InstallInHouseNEQ applies the NEQ predicate on the "install_in_house" field.
func InstallInHouseNEQ(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldInstallInHouse, v))
}

// InstallInHouseIsNil applies the IsNil predicate on the "install_in_house" field.
func InstallInHouseIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldInstallInHouse))
}

// InstallInHouseNotNil applies the NotNil predicate on the "install_in_house" field.
func InstallInHouseNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldInstallInHouse))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enum.PartnerStatus) predicate.Partner {
	vc := v
	return predicate.Partner(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enum.PartnerStatus) predicate.Partner {
	vc := v
	return predicate.Partner(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enum.PartnerStatus) predicate.Partner {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Partner(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enum.PartnerStatus) predicate.Partner {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Partner(sql.FieldNotIn(FieldStatus, v...))
}

// EpcStatusEQ applies the EQ predicate on the "epc_status" field.
func EpcStatusEQ(v enum.EPCStatus) predicate.Partner {
	vc := v
	return predicate.Partner(sql.FieldEQ(FieldEpcStatus, vc))
}

// EpcStatusNEQ applies the NEQ predicate on the "epc_status" field.
func EpcStatusNEQ(v enum.EPCStatus) predicate.Partner {
	vc := v
	return predicate.Partner(sql.FieldNEQ(FieldEpcStatus, vc))
}

// EpcStatusIn applies the In predicate on the "epc_status" field.
func EpcStatusIn(vs ...enum.EPCStatus) predicate.Partner {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Partner(sql.FieldIn(FieldEpcStatus, v...))
}

// EpcStatusNotIn applies the NotIn predicate on the "epc_status" field.
func EpcStatusNotIn(vs ...enum.EPCStatus) predicate.Partner {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Partner(sql.FieldNotIn(FieldEpcStatus, v...))
}

// EpcStatusIsNil applies the IsNil predicate on the "epc_status" field.
func EpcStatusIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldEpcStatus))
}

// EpcStatusNotNil applies the NotNil predicate on the "epc_status" field.
func EpcStatusNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldEpcStatus))
}

// MobileAppSettingsIsNil applies the IsNil predicate on the "mobile_app_settings" field.
func MobileAppSettingsIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldMobileAppSettings))
}

// MobileAppSettingsNotNil applies the NotNil predicate on the "mobile_app_settings" field.
func MobileAppSettingsNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldMobileAppSettings))
}

// HasRequestedEstimates applies the HasEdge predicate on the "requested_estimates" edge.
func HasRequestedEstimates() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RequestedEstimatesTable, RequestedEstimatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestedEstimatesWith applies the HasEdge predicate on the "requested_estimates" edge with a given conditions (other predicates).
func HasRequestedEstimatesWith(preds ...predicate.Estimate) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newRequestedEstimatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEstimateHomeOwners applies the HasEdge predicate on the "estimate_home_owners" edge.
func HasEstimateHomeOwners() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EstimateHomeOwnersTable, EstimateHomeOwnersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimateHomeOwnersWith applies the HasEdge predicate on the "estimate_home_owners" edge with a given conditions (other predicates).
func HasEstimateHomeOwnersWith(preds ...predicate.HomeOwner) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newEstimateHomeOwnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoofingJobs applies the HasEdge predicate on the "roofing_jobs" edge.
func HasRoofingJobs() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoofingJobsTable, RoofingJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoofingJobsWith applies the HasEdge predicate on the "roofing_jobs" edge with a given conditions (other predicates).
func HasRoofingJobsWith(preds ...predicate.Job) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newRoofingJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIntegrationJobs applies the HasEdge predicate on the "integration_jobs" edge.
func HasIntegrationJobs() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IntegrationJobsTable, IntegrationJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIntegrationJobsWith applies the HasEdge predicate on the "integration_jobs" edge with a given conditions (other predicates).
func HasIntegrationJobsWith(preds ...predicate.Job) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newIntegrationJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpcJobs applies the HasEdge predicate on the "epc_jobs" edge.
func HasEpcJobs() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EpcJobsTable, EpcJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpcJobsWith applies the HasEdge predicate on the "epc_jobs" edge with a given conditions (other predicates).
func HasEpcJobsWith(preds ...predicate.Job) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newEpcJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobRequests applies the HasEdge predicate on the "job_requests" edge.
func HasJobRequests() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobRequestsTable, JobRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobRequestsWith applies the HasEdge predicate on the "job_requests" edge with a given conditions (other predicates).
func HasJobRequestsWith(preds ...predicate.Job) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newJobRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivities applies the HasEdge predicate on the "activities" edge.
func HasActivities() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitiesWith applies the HasEdge predicate on the "activities" edge with a given conditions (other predicates).
func HasActivitiesWith(preds ...predicate.PartnerActivity) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobAssignmentHistory applies the HasEdge predicate on the "job_assignment_history" edge.
func HasJobAssignmentHistory() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobAssignmentHistoryTable, JobAssignmentHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobAssignmentHistoryWith applies the HasEdge predicate on the "job_assignment_history" edge with a given conditions (other predicates).
func HasJobAssignmentHistoryWith(preds ...predicate.JobAssignmentHistory) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newJobAssignmentHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequestedInstallationJobs applies the HasEdge predicate on the "requested_installation_jobs" edge.
func HasRequestedInstallationJobs() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RequestedInstallationJobsTable, RequestedInstallationJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestedInstallationJobsWith applies the HasEdge predicate on the "requested_installation_jobs" edge with a given conditions (other predicates).
func HasRequestedInstallationJobsWith(preds ...predicate.InstallationJob) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newRequestedInstallationJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedInstallationJobs applies the HasEdge predicate on the "assigned_installation_jobs" edge.
func HasAssignedInstallationJobs() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignedInstallationJobsTable, AssignedInstallationJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedInstallationJobsWith applies the HasEdge predicate on the "assigned_installation_jobs" edge with a given conditions (other predicates).
func HasAssignedInstallationJobsWith(preds ...predicate.InstallationJob) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newAssignedInstallationJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContacts applies the HasEdge predicate on the "contacts" edge.
func HasContacts() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ContactsTable, ContactsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactsWith applies the HasEdge predicate on the "contacts" edge with a given conditions (other predicates).
func HasContactsWith(preds ...predicate.User) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatorAPI applies the HasEdge predicate on the "creator_api" edge.
func HasCreatorAPI() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPITable, CreatorAPIColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorAPIWith applies the HasEdge predicate on the "creator_api" edge with a given conditions (other predicates).
func HasCreatorAPIWith(preds ...predicate.ApiUser) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newCreatorAPIStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServices applies the HasEdge predicate on the "services" edge.
func HasServices() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServicesTable, ServicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServicesWith applies the HasEdge predicate on the "services" edge with a given conditions (other predicates).
func HasServicesWith(preds ...predicate.PartnerService) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newServicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceStates applies the HasEdge predicate on the "service_states" edge.
func HasServiceStates() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceStatesTable, ServiceStatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceStatesWith applies the HasEdge predicate on the "service_states" edge with a given conditions (other predicates).
func HasServiceStatesWith(preds ...predicate.PartnerServiceState) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newServiceStatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceCities applies the HasEdge predicate on the "service_cities" edge.
func HasServiceCities() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceCitiesTable, ServiceCitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceCitiesWith applies the HasEdge predicate on the "service_cities" edge with a given conditions (other predicates).
func HasServiceCitiesWith(preds ...predicate.PartnerServiceCity) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newServiceCitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrainingVideos applies the HasEdge predicate on the "training_videos" edge.
func HasTrainingVideos() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TrainingVideosTable, TrainingVideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrainingVideosWith applies the HasEdge predicate on the "training_videos" edge with a given conditions (other predicates).
func HasTrainingVideosWith(preds ...predicate.PartnerTrainingVideo) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newTrainingVideosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContactUsRequests applies the HasEdge predicate on the "contact_us_requests" edge.
func HasContactUsRequests() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactUsRequestsTable, ContactUsRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactUsRequestsWith applies the HasEdge predicate on the "contact_us_requests" edge with a given conditions (other predicates).
func HasContactUsRequestsWith(preds ...predicate.ContactUs) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newContactUsRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurveys applies the HasEdge predicate on the "surveys" edge.
func HasSurveys() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveysTable, SurveysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveysWith applies the HasEdge predicate on the "surveys" edge with a given conditions (other predicates).
func HasSurveysWith(preds ...predicate.Survey) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newSurveysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.UserSession) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobNotes applies the HasEdge predicate on the "job_notes" edge.
func HasJobNotes() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobNotesTable, JobNotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobNotesWith applies the HasEdge predicate on the "job_notes" edge with a given conditions (other predicates).
func HasJobNotesWith(preds ...predicate.JobNote) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newJobNotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannels applies the HasEdge predicate on the "channels" edge.
func HasChannels() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChannelsTable, ChannelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelsWith applies the HasEdge predicate on the "channels" edge with a given conditions (other predicates).
func HasChannelsWith(preds ...predicate.ChannelSub) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newChannelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFinanceOptions applies the HasEdge predicate on the "finance_options" edge.
func HasFinanceOptions() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FinanceOptionsTable, FinanceOptionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFinanceOptionsWith applies the HasEdge predicate on the "finance_options" edge with a given conditions (other predicates).
func HasFinanceOptionsWith(preds ...predicate.OptionList) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newFinanceOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpcOptions applies the HasEdge predicate on the "epc_options" edge.
func HasEpcOptions() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EpcOptionsTable, EpcOptionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpcOptionsWith applies the HasEdge predicate on the "epc_options" edge with a given conditions (other predicates).
func HasEpcOptionsWith(preds ...predicate.OptionList) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newEpcOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartnerContacts applies the HasEdge predicate on the "partner_contacts" edge.
func HasPartnerContacts() predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PartnerContactsTable, PartnerContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerContactsWith applies the HasEdge predicate on the "partner_contacts" edge with a given conditions (other predicates).
func HasPartnerContactsWith(preds ...predicate.PartnerContact) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		step := newPartnerContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Partner) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Partner) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Partner) predicate.Partner {
	return predicate.Partner(func(s *sql.Selector) {
		p(s.Not())
	})
}

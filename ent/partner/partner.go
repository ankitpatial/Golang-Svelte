// Code generated by ent, DO NOT EDIT.

package partner

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the partner type in the database.
	Label = "partner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldIsNationWide holds the string denoting the is_nation_wide field in the database.
	FieldIsNationWide = "is_nation_wide"
	// FieldCrewCount holds the string denoting the crew_count field in the database.
	FieldCrewCount = "crew_count"
	// FieldYearsInBusiness holds the string denoting the years_in_business field in the database.
	FieldYearsInBusiness = "years_in_business"
	// FieldJobCapacity holds the string denoting the job_capacity field in the database.
	FieldJobCapacity = "job_capacity"
	// FieldAsphaltLeadT holds the string denoting the asphalt_lead_t field in the database.
	FieldAsphaltLeadT = "asphalt_lead_t"
	// FieldMetalLeadT holds the string denoting the metal_lead_t field in the database.
	FieldMetalLeadT = "metal_lead_t"
	// FieldTileLeadT holds the string denoting the tile_lead_t field in the database.
	FieldTileLeadT = "tile_lead_t"
	// FieldSetupStepsCompleted holds the string denoting the setup_steps_completed field in the database.
	FieldSetupStepsCompleted = "setup_steps_completed"
	// FieldSalesVolume holds the string denoting the sales_volume field in the database.
	FieldSalesVolume = "sales_volume"
	// FieldDownPayment holds the string denoting the down_payment field in the database.
	FieldDownPayment = "down_payment"
	// FieldPif holds the string denoting the pif field in the database.
	FieldPif = "pif"
	// FieldInstallInHouse holds the string denoting the install_in_house field in the database.
	FieldInstallInHouse = "install_in_house"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEpcStatus holds the string denoting the epc_status field in the database.
	FieldEpcStatus = "epc_status"
	// FieldMobileAppSettings holds the string denoting the mobile_app_settings field in the database.
	FieldMobileAppSettings = "mobile_app_settings"
	// EdgeRequestedEstimates holds the string denoting the requested_estimates edge name in mutations.
	EdgeRequestedEstimates = "requested_estimates"
	// EdgeEstimateHomeOwners holds the string denoting the estimate_home_owners edge name in mutations.
	EdgeEstimateHomeOwners = "estimate_home_owners"
	// EdgeRoofingJobs holds the string denoting the roofing_jobs edge name in mutations.
	EdgeRoofingJobs = "roofing_jobs"
	// EdgeIntegrationJobs holds the string denoting the integration_jobs edge name in mutations.
	EdgeIntegrationJobs = "integration_jobs"
	// EdgeEpcJobs holds the string denoting the epc_jobs edge name in mutations.
	EdgeEpcJobs = "epc_jobs"
	// EdgeJobRequests holds the string denoting the job_requests edge name in mutations.
	EdgeJobRequests = "job_requests"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeJobAssignmentHistory holds the string denoting the job_assignment_history edge name in mutations.
	EdgeJobAssignmentHistory = "job_assignment_history"
	// EdgeRequestedInstallationJobs holds the string denoting the requested_installation_jobs edge name in mutations.
	EdgeRequestedInstallationJobs = "requested_installation_jobs"
	// EdgeAssignedInstallationJobs holds the string denoting the assigned_installation_jobs edge name in mutations.
	EdgeAssignedInstallationJobs = "assigned_installation_jobs"
	// EdgeContacts holds the string denoting the contacts edge name in mutations.
	EdgeContacts = "contacts"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeCreatorAPI holds the string denoting the creator_api edge name in mutations.
	EdgeCreatorAPI = "creator_api"
	// EdgeServices holds the string denoting the services edge name in mutations.
	EdgeServices = "services"
	// EdgeServiceStates holds the string denoting the service_states edge name in mutations.
	EdgeServiceStates = "service_states"
	// EdgeServiceCities holds the string denoting the service_cities edge name in mutations.
	EdgeServiceCities = "service_cities"
	// EdgeTrainingVideos holds the string denoting the training_videos edge name in mutations.
	EdgeTrainingVideos = "training_videos"
	// EdgeContactUsRequests holds the string denoting the contact_us_requests edge name in mutations.
	EdgeContactUsRequests = "contact_us_requests"
	// EdgeSurveys holds the string denoting the surveys edge name in mutations.
	EdgeSurveys = "surveys"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeJobNotes holds the string denoting the job_notes edge name in mutations.
	EdgeJobNotes = "job_notes"
	// EdgeChannels holds the string denoting the channels edge name in mutations.
	EdgeChannels = "channels"
	// EdgeFinanceOptions holds the string denoting the finance_options edge name in mutations.
	EdgeFinanceOptions = "finance_options"
	// EdgeEpcOptions holds the string denoting the epc_options edge name in mutations.
	EdgeEpcOptions = "epc_options"
	// EdgePartnerContacts holds the string denoting the partner_contacts edge name in mutations.
	EdgePartnerContacts = "partner_contacts"
	// Table holds the table name of the partner in the database.
	Table = "partners"
	// RequestedEstimatesTable is the table that holds the requested_estimates relation/edge.
	RequestedEstimatesTable = "estimates"
	// RequestedEstimatesInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	RequestedEstimatesInverseTable = "estimates"
	// RequestedEstimatesColumn is the table column denoting the requested_estimates relation/edge.
	RequestedEstimatesColumn = "partner_id"
	// EstimateHomeOwnersTable is the table that holds the estimate_home_owners relation/edge.
	EstimateHomeOwnersTable = "home_owners"
	// EstimateHomeOwnersInverseTable is the table name for the HomeOwner entity.
	// It exists in this package in order to avoid circular dependency with the "homeowner" package.
	EstimateHomeOwnersInverseTable = "home_owners"
	// EstimateHomeOwnersColumn is the table column denoting the estimate_home_owners relation/edge.
	EstimateHomeOwnersColumn = "partner_id"
	// RoofingJobsTable is the table that holds the roofing_jobs relation/edge.
	RoofingJobsTable = "jobs"
	// RoofingJobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	RoofingJobsInverseTable = "jobs"
	// RoofingJobsColumn is the table column denoting the roofing_jobs relation/edge.
	RoofingJobsColumn = "roofing_partner_id"
	// IntegrationJobsTable is the table that holds the integration_jobs relation/edge.
	IntegrationJobsTable = "jobs"
	// IntegrationJobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	IntegrationJobsInverseTable = "jobs"
	// IntegrationJobsColumn is the table column denoting the integration_jobs relation/edge.
	IntegrationJobsColumn = "integration_partner_id"
	// EpcJobsTable is the table that holds the epc_jobs relation/edge.
	EpcJobsTable = "jobs"
	// EpcJobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	EpcJobsInverseTable = "jobs"
	// EpcJobsColumn is the table column denoting the epc_jobs relation/edge.
	EpcJobsColumn = "epc_partner_id"
	// JobRequestsTable is the table that holds the job_requests relation/edge.
	JobRequestsTable = "jobs"
	// JobRequestsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobRequestsInverseTable = "jobs"
	// JobRequestsColumn is the table column denoting the job_requests relation/edge.
	JobRequestsColumn = "requester_id"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "partner_activities"
	// ActivitiesInverseTable is the table name for the PartnerActivity entity.
	// It exists in this package in order to avoid circular dependency with the "partneractivity" package.
	ActivitiesInverseTable = "partner_activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "partner_id"
	// JobAssignmentHistoryTable is the table that holds the job_assignment_history relation/edge.
	JobAssignmentHistoryTable = "job_assignment_history"
	// JobAssignmentHistoryInverseTable is the table name for the JobAssignmentHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobassignmenthistory" package.
	JobAssignmentHistoryInverseTable = "job_assignment_history"
	// JobAssignmentHistoryColumn is the table column denoting the job_assignment_history relation/edge.
	JobAssignmentHistoryColumn = "partner_id"
	// RequestedInstallationJobsTable is the table that holds the requested_installation_jobs relation/edge.
	RequestedInstallationJobsTable = "installation_jobs"
	// RequestedInstallationJobsInverseTable is the table name for the InstallationJob entity.
	// It exists in this package in order to avoid circular dependency with the "installationjob" package.
	RequestedInstallationJobsInverseTable = "installation_jobs"
	// RequestedInstallationJobsColumn is the table column denoting the requested_installation_jobs relation/edge.
	RequestedInstallationJobsColumn = "requesting_partner_id"
	// AssignedInstallationJobsTable is the table that holds the assigned_installation_jobs relation/edge.
	AssignedInstallationJobsTable = "installation_jobs"
	// AssignedInstallationJobsInverseTable is the table name for the InstallationJob entity.
	// It exists in this package in order to avoid circular dependency with the "installationjob" package.
	AssignedInstallationJobsInverseTable = "installation_jobs"
	// AssignedInstallationJobsColumn is the table column denoting the assigned_installation_jobs relation/edge.
	AssignedInstallationJobsColumn = "assigned_partner_id"
	// ContactsTable is the table that holds the contacts relation/edge. The primary key declared below.
	ContactsTable = "partner_contacts"
	// ContactsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ContactsInverseTable = "users"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "partners"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// CreatorAPITable is the table that holds the creator_api relation/edge.
	CreatorAPITable = "partners"
	// CreatorAPIInverseTable is the table name for the ApiUser entity.
	// It exists in this package in order to avoid circular dependency with the "apiuser" package.
	CreatorAPIInverseTable = "api_users"
	// CreatorAPIColumn is the table column denoting the creator_api relation/edge.
	CreatorAPIColumn = "api_user_id"
	// ServicesTable is the table that holds the services relation/edge.
	ServicesTable = "partner_services"
	// ServicesInverseTable is the table name for the PartnerService entity.
	// It exists in this package in order to avoid circular dependency with the "partnerservice" package.
	ServicesInverseTable = "partner_services"
	// ServicesColumn is the table column denoting the services relation/edge.
	ServicesColumn = "partner_id"
	// ServiceStatesTable is the table that holds the service_states relation/edge.
	ServiceStatesTable = "partner_service_states"
	// ServiceStatesInverseTable is the table name for the PartnerServiceState entity.
	// It exists in this package in order to avoid circular dependency with the "partnerservicestate" package.
	ServiceStatesInverseTable = "partner_service_states"
	// ServiceStatesColumn is the table column denoting the service_states relation/edge.
	ServiceStatesColumn = "partner_id"
	// ServiceCitiesTable is the table that holds the service_cities relation/edge.
	ServiceCitiesTable = "partner_service_cities"
	// ServiceCitiesInverseTable is the table name for the PartnerServiceCity entity.
	// It exists in this package in order to avoid circular dependency with the "partnerservicecity" package.
	ServiceCitiesInverseTable = "partner_service_cities"
	// ServiceCitiesColumn is the table column denoting the service_cities relation/edge.
	ServiceCitiesColumn = "partner_id"
	// TrainingVideosTable is the table that holds the training_videos relation/edge.
	TrainingVideosTable = "partner_training_videos"
	// TrainingVideosInverseTable is the table name for the PartnerTrainingVideo entity.
	// It exists in this package in order to avoid circular dependency with the "partnertrainingvideo" package.
	TrainingVideosInverseTable = "partner_training_videos"
	// TrainingVideosColumn is the table column denoting the training_videos relation/edge.
	TrainingVideosColumn = "partner_id"
	// ContactUsRequestsTable is the table that holds the contact_us_requests relation/edge.
	ContactUsRequestsTable = "contact_us"
	// ContactUsRequestsInverseTable is the table name for the ContactUs entity.
	// It exists in this package in order to avoid circular dependency with the "contactus" package.
	ContactUsRequestsInverseTable = "contact_us"
	// ContactUsRequestsColumn is the table column denoting the contact_us_requests relation/edge.
	ContactUsRequestsColumn = "partner_id"
	// SurveysTable is the table that holds the surveys relation/edge.
	SurveysTable = "surveys"
	// SurveysInverseTable is the table name for the Survey entity.
	// It exists in this package in order to avoid circular dependency with the "survey" package.
	SurveysInverseTable = "surveys"
	// SurveysColumn is the table column denoting the surveys relation/edge.
	SurveysColumn = "partner_id"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "user_sessions"
	// SessionsInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	SessionsInverseTable = "user_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "partner_id"
	// JobNotesTable is the table that holds the job_notes relation/edge.
	JobNotesTable = "job_notes"
	// JobNotesInverseTable is the table name for the JobNote entity.
	// It exists in this package in order to avoid circular dependency with the "jobnote" package.
	JobNotesInverseTable = "job_notes"
	// JobNotesColumn is the table column denoting the job_notes relation/edge.
	JobNotesColumn = "partner_id"
	// ChannelsTable is the table that holds the channels relation/edge.
	ChannelsTable = "channel_subs"
	// ChannelsInverseTable is the table name for the ChannelSub entity.
	// It exists in this package in order to avoid circular dependency with the "channelsub" package.
	ChannelsInverseTable = "channel_subs"
	// ChannelsColumn is the table column denoting the channels relation/edge.
	ChannelsColumn = "partner_id"
	// FinanceOptionsTable is the table that holds the finance_options relation/edge. The primary key declared below.
	FinanceOptionsTable = "partner_finance_options"
	// FinanceOptionsInverseTable is the table name for the OptionList entity.
	// It exists in this package in order to avoid circular dependency with the "optionlist" package.
	FinanceOptionsInverseTable = "option_list"
	// EpcOptionsTable is the table that holds the epc_options relation/edge. The primary key declared below.
	EpcOptionsTable = "partner_epc_options"
	// EpcOptionsInverseTable is the table name for the OptionList entity.
	// It exists in this package in order to avoid circular dependency with the "optionlist" package.
	EpcOptionsInverseTable = "option_list"
	// PartnerContactsTable is the table that holds the partner_contacts relation/edge.
	PartnerContactsTable = "partner_contacts"
	// PartnerContactsInverseTable is the table name for the PartnerContact entity.
	// It exists in this package in order to avoid circular dependency with the "partnercontact" package.
	PartnerContactsInverseTable = "partner_contacts"
	// PartnerContactsColumn is the table column denoting the partner_contacts relation/edge.
	PartnerContactsColumn = "partner_id"
)

// Columns holds all SQL columns for partner fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldExternalID,
	FieldCreatorID,
	FieldType,
	FieldName,
	FieldAddress,
	FieldWebsite,
	FieldPhone,
	FieldLatitude,
	FieldLongitude,
	FieldIsNationWide,
	FieldCrewCount,
	FieldYearsInBusiness,
	FieldJobCapacity,
	FieldAsphaltLeadT,
	FieldMetalLeadT,
	FieldTileLeadT,
	FieldSetupStepsCompleted,
	FieldSalesVolume,
	FieldDownPayment,
	FieldPif,
	FieldInstallInHouse,
	FieldStatus,
	FieldEpcStatus,
	FieldMobileAppSettings,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "partners"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"api_user_id",
}

var (
	// ContactsPrimaryKey and ContactsColumn2 are the table columns denoting the
	// primary key for the contacts relation (M2M).
	ContactsPrimaryKey = []string{"partner_id", "user_id"}
	// FinanceOptionsPrimaryKey and FinanceOptionsColumn2 are the table columns denoting the
	// primary key for the finance_options relation (M2M).
	FinanceOptionsPrimaryKey = []string{"option_id", "partner_id"}
	// EpcOptionsPrimaryKey and EpcOptionsColumn2 are the table columns denoting the
	// primary key for the epc_options relation (M2M).
	EpcOptionsPrimaryKey = []string{"option_id", "partner_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	ExternalIDValidator func(string) error
	// CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	CreatorIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultIsNationWide holds the default value on creation for the "is_nation_wide" field.
	DefaultIsNationWide bool
	// DefaultCrewCount holds the default value on creation for the "crew_count" field.
	DefaultCrewCount uint16
	// DefaultJobCapacity holds the default value on creation for the "job_capacity" field.
	DefaultJobCapacity uint16
	// DefaultSetupStepsCompleted holds the default value on creation for the "setup_steps_completed" field.
	DefaultSetupStepsCompleted uint8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enum.Partner) error {
	switch _type.String() {
	case "NONE", "RFX", "ROOFING", "SOLAR", "EPC", "INTEGRATION", "LENDER":
		return nil
	default:
		return fmt.Errorf("partner: invalid enum value for type field: %q", _type)
	}
}

const DefaultStatus enum.PartnerStatus = "InActive"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enum.PartnerStatus) error {
	switch s.String() {
	case "Active", "InActive", "Onboarding", "OnboardingDone":
		return nil
	default:
		return fmt.Errorf("partner: invalid enum value for status field: %q", s)
	}
}

// EpcStatusValidator is a validator for the "epc_status" field enum values. It is called by the builders before save.
func EpcStatusValidator(es enum.EPCStatus) error {
	switch es.String() {
	case "None", "Dealer", "MultipleDealers", "VerticallyIntegrated":
		return nil
	default:
		return fmt.Errorf("partner: invalid enum value for epc_status field: %q", es)
	}
}

// OrderOption defines the ordering options for the Partner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByIsNationWide orders the results by the is_nation_wide field.
func ByIsNationWide(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNationWide, opts...).ToFunc()
}

// ByCrewCount orders the results by the crew_count field.
func ByCrewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCrewCount, opts...).ToFunc()
}

// ByYearsInBusiness orders the results by the years_in_business field.
func ByYearsInBusiness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYearsInBusiness, opts...).ToFunc()
}

// ByJobCapacity orders the results by the job_capacity field.
func ByJobCapacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobCapacity, opts...).ToFunc()
}

// ByAsphaltLeadT orders the results by the asphalt_lead_t field.
func ByAsphaltLeadT(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAsphaltLeadT, opts...).ToFunc()
}

// ByMetalLeadT orders the results by the metal_lead_t field.
func ByMetalLeadT(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetalLeadT, opts...).ToFunc()
}

// ByTileLeadT orders the results by the tile_lead_t field.
func ByTileLeadT(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTileLeadT, opts...).ToFunc()
}

// BySetupStepsCompleted orders the results by the setup_steps_completed field.
func BySetupStepsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSetupStepsCompleted, opts...).ToFunc()
}

// BySalesVolume orders the results by the sales_volume field.
func BySalesVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesVolume, opts...).ToFunc()
}

// ByDownPayment orders the results by the down_payment field.
func ByDownPayment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownPayment, opts...).ToFunc()
}

// ByPif orders the results by the pif field.
func ByPif(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPif, opts...).ToFunc()
}

// ByInstallInHouse orders the results by the install_in_house field.
func ByInstallInHouse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallInHouse, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEpcStatus orders the results by the epc_status field.
func ByEpcStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpcStatus, opts...).ToFunc()
}

// ByRequestedEstimatesCount orders the results by requested_estimates count.
func ByRequestedEstimatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestedEstimatesStep(), opts...)
	}
}

// ByRequestedEstimates orders the results by requested_estimates terms.
func ByRequestedEstimates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestedEstimatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEstimateHomeOwnersCount orders the results by estimate_home_owners count.
func ByEstimateHomeOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEstimateHomeOwnersStep(), opts...)
	}
}

// ByEstimateHomeOwners orders the results by estimate_home_owners terms.
func ByEstimateHomeOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEstimateHomeOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoofingJobsCount orders the results by roofing_jobs count.
func ByRoofingJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoofingJobsStep(), opts...)
	}
}

// ByRoofingJobs orders the results by roofing_jobs terms.
func ByRoofingJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoofingJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIntegrationJobsCount orders the results by integration_jobs count.
func ByIntegrationJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIntegrationJobsStep(), opts...)
	}
}

// ByIntegrationJobs orders the results by integration_jobs terms.
func ByIntegrationJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEpcJobsCount orders the results by epc_jobs count.
func ByEpcJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpcJobsStep(), opts...)
	}
}

// ByEpcJobs orders the results by epc_jobs terms.
func ByEpcJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpcJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobRequestsCount orders the results by job_requests count.
func ByJobRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobRequestsStep(), opts...)
	}
}

// ByJobRequests orders the results by job_requests terms.
func ByJobRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobAssignmentHistoryCount orders the results by job_assignment_history count.
func ByJobAssignmentHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobAssignmentHistoryStep(), opts...)
	}
}

// ByJobAssignmentHistory orders the results by job_assignment_history terms.
func ByJobAssignmentHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobAssignmentHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequestedInstallationJobsCount orders the results by requested_installation_jobs count.
func ByRequestedInstallationJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestedInstallationJobsStep(), opts...)
	}
}

// ByRequestedInstallationJobs orders the results by requested_installation_jobs terms.
func ByRequestedInstallationJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestedInstallationJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignedInstallationJobsCount orders the results by assigned_installation_jobs count.
func ByAssignedInstallationJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedInstallationJobsStep(), opts...)
	}
}

// ByAssignedInstallationJobs orders the results by assigned_installation_jobs terms.
func ByAssignedInstallationJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedInstallationJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactsCount orders the results by contacts count.
func ByContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactsStep(), opts...)
	}
}

// ByContacts orders the results by contacts terms.
func ByContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorAPIField orders the results by creator_api field.
func ByCreatorAPIField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorAPIStep(), sql.OrderByField(field, opts...))
	}
}

// ByServicesCount orders the results by services count.
func ByServicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServicesStep(), opts...)
	}
}

// ByServices orders the results by services terms.
func ByServices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceStatesCount orders the results by service_states count.
func ByServiceStatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceStatesStep(), opts...)
	}
}

// ByServiceStates orders the results by service_states terms.
func ByServiceStates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceCitiesCount orders the results by service_cities count.
func ByServiceCitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceCitiesStep(), opts...)
	}
}

// ByServiceCities orders the results by service_cities terms.
func ByServiceCities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceCitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrainingVideosCount orders the results by training_videos count.
func ByTrainingVideosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrainingVideosStep(), opts...)
	}
}

// ByTrainingVideos orders the results by training_videos terms.
func ByTrainingVideos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrainingVideosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactUsRequestsCount orders the results by contact_us_requests count.
func ByContactUsRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactUsRequestsStep(), opts...)
	}
}

// ByContactUsRequests orders the results by contact_us_requests terms.
func ByContactUsRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactUsRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveysCount orders the results by surveys count.
func BySurveysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveysStep(), opts...)
	}
}

// BySurveys orders the results by surveys terms.
func BySurveys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobNotesCount orders the results by job_notes count.
func ByJobNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobNotesStep(), opts...)
	}
}

// ByJobNotes orders the results by job_notes terms.
func ByJobNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChannelsCount orders the results by channels count.
func ByChannelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChannelsStep(), opts...)
	}
}

// ByChannels orders the results by channels terms.
func ByChannels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChannelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFinanceOptionsCount orders the results by finance_options count.
func ByFinanceOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFinanceOptionsStep(), opts...)
	}
}

// ByFinanceOptions orders the results by finance_options terms.
func ByFinanceOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFinanceOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEpcOptionsCount orders the results by epc_options count.
func ByEpcOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpcOptionsStep(), opts...)
	}
}

// ByEpcOptions orders the results by epc_options terms.
func ByEpcOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpcOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnerContactsCount orders the results by partner_contacts count.
func ByPartnerContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerContactsStep(), opts...)
	}
}

// ByPartnerContacts orders the results by partner_contacts terms.
func ByPartnerContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequestedEstimatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestedEstimatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestedEstimatesTable, RequestedEstimatesColumn),
	)
}
func newEstimateHomeOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EstimateHomeOwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EstimateHomeOwnersTable, EstimateHomeOwnersColumn),
	)
}
func newRoofingJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoofingJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoofingJobsTable, RoofingJobsColumn),
	)
}
func newIntegrationJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IntegrationJobsTable, IntegrationJobsColumn),
	)
}
func newEpcJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpcJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EpcJobsTable, EpcJobsColumn),
	)
}
func newJobRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobRequestsTable, JobRequestsColumn),
	)
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newJobAssignmentHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobAssignmentHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobAssignmentHistoryTable, JobAssignmentHistoryColumn),
	)
}
func newRequestedInstallationJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestedInstallationJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestedInstallationJobsTable, RequestedInstallationJobsColumn),
	)
}
func newAssignedInstallationJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedInstallationJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignedInstallationJobsTable, AssignedInstallationJobsColumn),
	)
}
func newContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ContactsTable, ContactsPrimaryKey...),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
	)
}
func newCreatorAPIStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorAPIInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPITable, CreatorAPIColumn),
	)
}
func newServicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServicesTable, ServicesColumn),
	)
}
func newServiceStatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceStatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceStatesTable, ServiceStatesColumn),
	)
}
func newServiceCitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceCitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceCitiesTable, ServiceCitiesColumn),
	)
}
func newTrainingVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrainingVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrainingVideosTable, TrainingVideosColumn),
	)
}
func newContactUsRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactUsRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContactUsRequestsTable, ContactUsRequestsColumn),
	)
}
func newSurveysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveysTable, SurveysColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newJobNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobNotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobNotesTable, JobNotesColumn),
	)
}
func newChannelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChannelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChannelsTable, ChannelsColumn),
	)
}
func newFinanceOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FinanceOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FinanceOptionsTable, FinanceOptionsPrimaryKey...),
	)
}
func newEpcOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpcOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EpcOptionsTable, EpcOptionsPrimaryKey...),
	)
}
func newPartnerContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PartnerContactsTable, PartnerContactsColumn),
	)
}

var (
	// enum.Partner must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.Partner)(nil)
	// enum.Partner must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.Partner)(nil)
)

var (
	// enum.PartnerStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.PartnerStatus)(nil)
	// enum.PartnerStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.PartnerStatus)(nil)
)

var (
	// enum.EPCStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.EPCStatus)(nil)
	// enum.EPCStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.EPCStatus)(nil)
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiaccess"
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiAccessUpdate is the builder for updating ApiAccess entities.
type ApiAccessUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiAccessMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiAccessUpdate builder.
func (aau *ApiAccessUpdate) Where(ps ...predicate.ApiAccess) *ApiAccessUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *ApiAccessUpdate) SetUpdatedAt(t time.Time) *ApiAccessUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// SetURL sets the "url" field.
func (aau *ApiAccessUpdate) SetURL(s string) *ApiAccessUpdate {
	aau.mutation.SetURL(s)
	return aau
}

// SetUsername sets the "username" field.
func (aau *ApiAccessUpdate) SetUsername(s string) *ApiAccessUpdate {
	aau.mutation.SetUsername(s)
	return aau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillableUsername(s *string) *ApiAccessUpdate {
	if s != nil {
		aau.SetUsername(*s)
	}
	return aau
}

// SetPassword sets the "password" field.
func (aau *ApiAccessUpdate) SetPassword(s string) *ApiAccessUpdate {
	aau.mutation.SetPassword(s)
	return aau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillablePassword(s *string) *ApiAccessUpdate {
	if s != nil {
		aau.SetPassword(*s)
	}
	return aau
}

// SetKey sets the "key" field.
func (aau *ApiAccessUpdate) SetKey(s string) *ApiAccessUpdate {
	aau.mutation.SetKey(s)
	return aau
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillableKey(s *string) *ApiAccessUpdate {
	if s != nil {
		aau.SetKey(*s)
	}
	return aau
}

// SetSecret sets the "secret" field.
func (aau *ApiAccessUpdate) SetSecret(s string) *ApiAccessUpdate {
	aau.mutation.SetSecret(s)
	return aau
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillableSecret(s *string) *ApiAccessUpdate {
	if s != nil {
		aau.SetSecret(*s)
	}
	return aau
}

// SetAccessToken sets the "access_token" field.
func (aau *ApiAccessUpdate) SetAccessToken(s string) *ApiAccessUpdate {
	aau.mutation.SetAccessToken(s)
	return aau
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillableAccessToken(s *string) *ApiAccessUpdate {
	if s != nil {
		aau.SetAccessToken(*s)
	}
	return aau
}

// ClearAccessToken clears the value of the "access_token" field.
func (aau *ApiAccessUpdate) ClearAccessToken() *ApiAccessUpdate {
	aau.mutation.ClearAccessToken()
	return aau
}

// SetRefreshToken sets the "refresh_token" field.
func (aau *ApiAccessUpdate) SetRefreshToken(s string) *ApiAccessUpdate {
	aau.mutation.SetRefreshToken(s)
	return aau
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillableRefreshToken(s *string) *ApiAccessUpdate {
	if s != nil {
		aau.SetRefreshToken(*s)
	}
	return aau
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (aau *ApiAccessUpdate) ClearRefreshToken() *ApiAccessUpdate {
	aau.mutation.ClearRefreshToken()
	return aau
}

// SetExpiresAt sets the "expires_at" field.
func (aau *ApiAccessUpdate) SetExpiresAt(t time.Time) *ApiAccessUpdate {
	aau.mutation.SetExpiresAt(t)
	return aau
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (aau *ApiAccessUpdate) SetNillableExpiresAt(t *time.Time) *ApiAccessUpdate {
	if t != nil {
		aau.SetExpiresAt(*t)
	}
	return aau
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (aau *ApiAccessUpdate) ClearExpiresAt() *ApiAccessUpdate {
	aau.mutation.ClearExpiresAt()
	return aau
}

// Mutation returns the ApiAccessMutation object of the builder.
func (aau *ApiAccessUpdate) Mutation() *ApiAccessMutation {
	return aau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *ApiAccessUpdate) Save(ctx context.Context) (int, error) {
	aau.defaults()
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *ApiAccessUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *ApiAccessUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *ApiAccessUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *ApiAccessUpdate) defaults() {
	if _, ok := aau.mutation.UpdatedAt(); !ok {
		v := apiaccess.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *ApiAccessUpdate) check() error {
	if v, ok := aau.mutation.AccessToken(); ok {
		if err := apiaccess.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.access_token": %w`, err)}
		}
	}
	if v, ok := aau.mutation.RefreshToken(); ok {
		if err := apiaccess.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.refresh_token": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aau *ApiAccessUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiAccessUpdate {
	aau.modifiers = append(aau.modifiers, modifiers...)
	return aau
}

func (aau *ApiAccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiaccess.Table, apiaccess.Columns, sqlgraph.NewFieldSpec(apiaccess.FieldID, field.TypeString))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(apiaccess.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aau.mutation.URL(); ok {
		_spec.SetField(apiaccess.FieldURL, field.TypeString, value)
	}
	if value, ok := aau.mutation.Username(); ok {
		_spec.SetField(apiaccess.FieldUsername, field.TypeString, value)
	}
	if value, ok := aau.mutation.Password(); ok {
		_spec.SetField(apiaccess.FieldPassword, field.TypeString, value)
	}
	if value, ok := aau.mutation.Key(); ok {
		_spec.SetField(apiaccess.FieldKey, field.TypeString, value)
	}
	if value, ok := aau.mutation.Secret(); ok {
		_spec.SetField(apiaccess.FieldSecret, field.TypeString, value)
	}
	if value, ok := aau.mutation.AccessToken(); ok {
		_spec.SetField(apiaccess.FieldAccessToken, field.TypeString, value)
	}
	if aau.mutation.AccessTokenCleared() {
		_spec.ClearField(apiaccess.FieldAccessToken, field.TypeString)
	}
	if value, ok := aau.mutation.RefreshToken(); ok {
		_spec.SetField(apiaccess.FieldRefreshToken, field.TypeString, value)
	}
	if aau.mutation.RefreshTokenCleared() {
		_spec.ClearField(apiaccess.FieldRefreshToken, field.TypeString)
	}
	if value, ok := aau.mutation.ExpiresAt(); ok {
		_spec.SetField(apiaccess.FieldExpiresAt, field.TypeTime, value)
	}
	if aau.mutation.ExpiresAtCleared() {
		_spec.ClearField(apiaccess.FieldExpiresAt, field.TypeTime)
	}
	_spec.AddModifiers(aau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// ApiAccessUpdateOne is the builder for updating a single ApiAccess entity.
type ApiAccessUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiAccessMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *ApiAccessUpdateOne) SetUpdatedAt(t time.Time) *ApiAccessUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// SetURL sets the "url" field.
func (aauo *ApiAccessUpdateOne) SetURL(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetURL(s)
	return aauo
}

// SetUsername sets the "username" field.
func (aauo *ApiAccessUpdateOne) SetUsername(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetUsername(s)
	return aauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillableUsername(s *string) *ApiAccessUpdateOne {
	if s != nil {
		aauo.SetUsername(*s)
	}
	return aauo
}

// SetPassword sets the "password" field.
func (aauo *ApiAccessUpdateOne) SetPassword(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetPassword(s)
	return aauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillablePassword(s *string) *ApiAccessUpdateOne {
	if s != nil {
		aauo.SetPassword(*s)
	}
	return aauo
}

// SetKey sets the "key" field.
func (aauo *ApiAccessUpdateOne) SetKey(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetKey(s)
	return aauo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillableKey(s *string) *ApiAccessUpdateOne {
	if s != nil {
		aauo.SetKey(*s)
	}
	return aauo
}

// SetSecret sets the "secret" field.
func (aauo *ApiAccessUpdateOne) SetSecret(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetSecret(s)
	return aauo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillableSecret(s *string) *ApiAccessUpdateOne {
	if s != nil {
		aauo.SetSecret(*s)
	}
	return aauo
}

// SetAccessToken sets the "access_token" field.
func (aauo *ApiAccessUpdateOne) SetAccessToken(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetAccessToken(s)
	return aauo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillableAccessToken(s *string) *ApiAccessUpdateOne {
	if s != nil {
		aauo.SetAccessToken(*s)
	}
	return aauo
}

// ClearAccessToken clears the value of the "access_token" field.
func (aauo *ApiAccessUpdateOne) ClearAccessToken() *ApiAccessUpdateOne {
	aauo.mutation.ClearAccessToken()
	return aauo
}

// SetRefreshToken sets the "refresh_token" field.
func (aauo *ApiAccessUpdateOne) SetRefreshToken(s string) *ApiAccessUpdateOne {
	aauo.mutation.SetRefreshToken(s)
	return aauo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillableRefreshToken(s *string) *ApiAccessUpdateOne {
	if s != nil {
		aauo.SetRefreshToken(*s)
	}
	return aauo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (aauo *ApiAccessUpdateOne) ClearRefreshToken() *ApiAccessUpdateOne {
	aauo.mutation.ClearRefreshToken()
	return aauo
}

// SetExpiresAt sets the "expires_at" field.
func (aauo *ApiAccessUpdateOne) SetExpiresAt(t time.Time) *ApiAccessUpdateOne {
	aauo.mutation.SetExpiresAt(t)
	return aauo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (aauo *ApiAccessUpdateOne) SetNillableExpiresAt(t *time.Time) *ApiAccessUpdateOne {
	if t != nil {
		aauo.SetExpiresAt(*t)
	}
	return aauo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (aauo *ApiAccessUpdateOne) ClearExpiresAt() *ApiAccessUpdateOne {
	aauo.mutation.ClearExpiresAt()
	return aauo
}

// Mutation returns the ApiAccessMutation object of the builder.
func (aauo *ApiAccessUpdateOne) Mutation() *ApiAccessMutation {
	return aauo.mutation
}

// Where appends a list predicates to the ApiAccessUpdate builder.
func (aauo *ApiAccessUpdateOne) Where(ps ...predicate.ApiAccess) *ApiAccessUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *ApiAccessUpdateOne) Select(field string, fields ...string) *ApiAccessUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated ApiAccess entity.
func (aauo *ApiAccessUpdateOne) Save(ctx context.Context) (*ApiAccess, error) {
	aauo.defaults()
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *ApiAccessUpdateOne) SaveX(ctx context.Context) *ApiAccess {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *ApiAccessUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *ApiAccessUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *ApiAccessUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdatedAt(); !ok {
		v := apiaccess.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *ApiAccessUpdateOne) check() error {
	if v, ok := aauo.mutation.AccessToken(); ok {
		if err := apiaccess.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.access_token": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.RefreshToken(); ok {
		if err := apiaccess.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "ApiAccess.refresh_token": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aauo *ApiAccessUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiAccessUpdateOne {
	aauo.modifiers = append(aauo.modifiers, modifiers...)
	return aauo
}

func (aauo *ApiAccessUpdateOne) sqlSave(ctx context.Context) (_node *ApiAccess, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiaccess.Table, apiaccess.Columns, sqlgraph.NewFieldSpec(apiaccess.FieldID, field.TypeString))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiAccess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiaccess.FieldID)
		for _, f := range fields {
			if !apiaccess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apiaccess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(apiaccess.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aauo.mutation.URL(); ok {
		_spec.SetField(apiaccess.FieldURL, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Username(); ok {
		_spec.SetField(apiaccess.FieldUsername, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Password(); ok {
		_spec.SetField(apiaccess.FieldPassword, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Key(); ok {
		_spec.SetField(apiaccess.FieldKey, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Secret(); ok {
		_spec.SetField(apiaccess.FieldSecret, field.TypeString, value)
	}
	if value, ok := aauo.mutation.AccessToken(); ok {
		_spec.SetField(apiaccess.FieldAccessToken, field.TypeString, value)
	}
	if aauo.mutation.AccessTokenCleared() {
		_spec.ClearField(apiaccess.FieldAccessToken, field.TypeString)
	}
	if value, ok := aauo.mutation.RefreshToken(); ok {
		_spec.SetField(apiaccess.FieldRefreshToken, field.TypeString, value)
	}
	if aauo.mutation.RefreshTokenCleared() {
		_spec.ClearField(apiaccess.FieldRefreshToken, field.TypeString)
	}
	if value, ok := aauo.mutation.ExpiresAt(); ok {
		_spec.SetField(apiaccess.FieldExpiresAt, field.TypeTime, value)
	}
	if aauo.mutation.ExpiresAtCleared() {
		_spec.ClearField(apiaccess.FieldExpiresAt, field.TypeTime)
	}
	_spec.AddModifiers(aauo.modifiers...)
	_node = &ApiAccess{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}

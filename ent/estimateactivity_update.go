// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EstimateActivityUpdate is the builder for updating EstimateActivity entities.
type EstimateActivityUpdate struct {
	config
	hooks     []Hook
	mutation  *EstimateActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EstimateActivityUpdate builder.
func (eau *EstimateActivityUpdate) Where(ps ...predicate.EstimateActivity) *EstimateActivityUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetDescription sets the "description" field.
func (eau *EstimateActivityUpdate) SetDescription(s string) *EstimateActivityUpdate {
	eau.mutation.SetDescription(s)
	return eau
}

// SetRaw sets the "raw" field.
func (eau *EstimateActivityUpdate) SetRaw(m map[string]interface{}) *EstimateActivityUpdate {
	eau.mutation.SetRaw(m)
	return eau
}

// ClearRaw clears the value of the "raw" field.
func (eau *EstimateActivityUpdate) ClearRaw() *EstimateActivityUpdate {
	eau.mutation.ClearRaw()
	return eau
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (eau *EstimateActivityUpdate) SetEstimateID(id string) *EstimateActivityUpdate {
	eau.mutation.SetEstimateID(id)
	return eau
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (eau *EstimateActivityUpdate) SetNillableEstimateID(id *string) *EstimateActivityUpdate {
	if id != nil {
		eau = eau.SetEstimateID(*id)
	}
	return eau
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (eau *EstimateActivityUpdate) SetEstimate(e *Estimate) *EstimateActivityUpdate {
	return eau.SetEstimateID(e.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (eau *EstimateActivityUpdate) SetCreatorID(id string) *EstimateActivityUpdate {
	eau.mutation.SetCreatorID(id)
	return eau
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (eau *EstimateActivityUpdate) SetNillableCreatorID(id *string) *EstimateActivityUpdate {
	if id != nil {
		eau = eau.SetCreatorID(*id)
	}
	return eau
}

// SetCreator sets the "creator" edge to the User entity.
func (eau *EstimateActivityUpdate) SetCreator(u *User) *EstimateActivityUpdate {
	return eau.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (eau *EstimateActivityUpdate) SetCreatorAPIID(id string) *EstimateActivityUpdate {
	eau.mutation.SetCreatorAPIID(id)
	return eau
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (eau *EstimateActivityUpdate) SetNillableCreatorAPIID(id *string) *EstimateActivityUpdate {
	if id != nil {
		eau = eau.SetCreatorAPIID(*id)
	}
	return eau
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (eau *EstimateActivityUpdate) SetCreatorAPI(a *ApiUser) *EstimateActivityUpdate {
	return eau.SetCreatorAPIID(a.ID)
}

// Mutation returns the EstimateActivityMutation object of the builder.
func (eau *EstimateActivityUpdate) Mutation() *EstimateActivityMutation {
	return eau.mutation
}

// ClearEstimate clears the "estimate" edge to the Estimate entity.
func (eau *EstimateActivityUpdate) ClearEstimate() *EstimateActivityUpdate {
	eau.mutation.ClearEstimate()
	return eau
}

// ClearCreator clears the "creator" edge to the User entity.
func (eau *EstimateActivityUpdate) ClearCreator() *EstimateActivityUpdate {
	eau.mutation.ClearCreator()
	return eau
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (eau *EstimateActivityUpdate) ClearCreatorAPI() *EstimateActivityUpdate {
	eau.mutation.ClearCreatorAPI()
	return eau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EstimateActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EstimateActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EstimateActivityUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EstimateActivityUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eau *EstimateActivityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EstimateActivityUpdate {
	eau.modifiers = append(eau.modifiers, modifiers...)
	return eau
}

func (eau *EstimateActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(estimateactivity.Table, estimateactivity.Columns, sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.Description(); ok {
		_spec.SetField(estimateactivity.FieldDescription, field.TypeString, value)
	}
	if value, ok := eau.mutation.Raw(); ok {
		_spec.SetField(estimateactivity.FieldRaw, field.TypeJSON, value)
	}
	if eau.mutation.RawCleared() {
		_spec.ClearField(estimateactivity.FieldRaw, field.TypeJSON)
	}
	if eau.mutation.EstimateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.EstimateTable,
			Columns: []string{estimateactivity.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.EstimateTable,
			Columns: []string{estimateactivity.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorTable,
			Columns: []string{estimateactivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorTable,
			Columns: []string{estimateactivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorAPITable,
			Columns: []string{estimateactivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorAPITable,
			Columns: []string{estimateactivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{estimateactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EstimateActivityUpdateOne is the builder for updating a single EstimateActivity entity.
type EstimateActivityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EstimateActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDescription sets the "description" field.
func (eauo *EstimateActivityUpdateOne) SetDescription(s string) *EstimateActivityUpdateOne {
	eauo.mutation.SetDescription(s)
	return eauo
}

// SetRaw sets the "raw" field.
func (eauo *EstimateActivityUpdateOne) SetRaw(m map[string]interface{}) *EstimateActivityUpdateOne {
	eauo.mutation.SetRaw(m)
	return eauo
}

// ClearRaw clears the value of the "raw" field.
func (eauo *EstimateActivityUpdateOne) ClearRaw() *EstimateActivityUpdateOne {
	eauo.mutation.ClearRaw()
	return eauo
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (eauo *EstimateActivityUpdateOne) SetEstimateID(id string) *EstimateActivityUpdateOne {
	eauo.mutation.SetEstimateID(id)
	return eauo
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (eauo *EstimateActivityUpdateOne) SetNillableEstimateID(id *string) *EstimateActivityUpdateOne {
	if id != nil {
		eauo = eauo.SetEstimateID(*id)
	}
	return eauo
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (eauo *EstimateActivityUpdateOne) SetEstimate(e *Estimate) *EstimateActivityUpdateOne {
	return eauo.SetEstimateID(e.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (eauo *EstimateActivityUpdateOne) SetCreatorID(id string) *EstimateActivityUpdateOne {
	eauo.mutation.SetCreatorID(id)
	return eauo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (eauo *EstimateActivityUpdateOne) SetNillableCreatorID(id *string) *EstimateActivityUpdateOne {
	if id != nil {
		eauo = eauo.SetCreatorID(*id)
	}
	return eauo
}

// SetCreator sets the "creator" edge to the User entity.
func (eauo *EstimateActivityUpdateOne) SetCreator(u *User) *EstimateActivityUpdateOne {
	return eauo.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (eauo *EstimateActivityUpdateOne) SetCreatorAPIID(id string) *EstimateActivityUpdateOne {
	eauo.mutation.SetCreatorAPIID(id)
	return eauo
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (eauo *EstimateActivityUpdateOne) SetNillableCreatorAPIID(id *string) *EstimateActivityUpdateOne {
	if id != nil {
		eauo = eauo.SetCreatorAPIID(*id)
	}
	return eauo
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (eauo *EstimateActivityUpdateOne) SetCreatorAPI(a *ApiUser) *EstimateActivityUpdateOne {
	return eauo.SetCreatorAPIID(a.ID)
}

// Mutation returns the EstimateActivityMutation object of the builder.
func (eauo *EstimateActivityUpdateOne) Mutation() *EstimateActivityMutation {
	return eauo.mutation
}

// ClearEstimate clears the "estimate" edge to the Estimate entity.
func (eauo *EstimateActivityUpdateOne) ClearEstimate() *EstimateActivityUpdateOne {
	eauo.mutation.ClearEstimate()
	return eauo
}

// ClearCreator clears the "creator" edge to the User entity.
func (eauo *EstimateActivityUpdateOne) ClearCreator() *EstimateActivityUpdateOne {
	eauo.mutation.ClearCreator()
	return eauo
}

// ClearCreatorAPI clears the "creator_api" edge to the ApiUser entity.
func (eauo *EstimateActivityUpdateOne) ClearCreatorAPI() *EstimateActivityUpdateOne {
	eauo.mutation.ClearCreatorAPI()
	return eauo
}

// Where appends a list predicates to the EstimateActivityUpdate builder.
func (eauo *EstimateActivityUpdateOne) Where(ps ...predicate.EstimateActivity) *EstimateActivityUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EstimateActivityUpdateOne) Select(field string, fields ...string) *EstimateActivityUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EstimateActivity entity.
func (eauo *EstimateActivityUpdateOne) Save(ctx context.Context) (*EstimateActivity, error) {
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EstimateActivityUpdateOne) SaveX(ctx context.Context) *EstimateActivity {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EstimateActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EstimateActivityUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eauo *EstimateActivityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EstimateActivityUpdateOne {
	eauo.modifiers = append(eauo.modifiers, modifiers...)
	return eauo
}

func (eauo *EstimateActivityUpdateOne) sqlSave(ctx context.Context) (_node *EstimateActivity, err error) {
	_spec := sqlgraph.NewUpdateSpec(estimateactivity.Table, estimateactivity.Columns, sqlgraph.NewFieldSpec(estimateactivity.FieldID, field.TypeString))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EstimateActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, estimateactivity.FieldID)
		for _, f := range fields {
			if !estimateactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != estimateactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.Description(); ok {
		_spec.SetField(estimateactivity.FieldDescription, field.TypeString, value)
	}
	if value, ok := eauo.mutation.Raw(); ok {
		_spec.SetField(estimateactivity.FieldRaw, field.TypeJSON, value)
	}
	if eauo.mutation.RawCleared() {
		_spec.ClearField(estimateactivity.FieldRaw, field.TypeJSON)
	}
	if eauo.mutation.EstimateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.EstimateTable,
			Columns: []string{estimateactivity.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.EstimateTable,
			Columns: []string{estimateactivity.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorTable,
			Columns: []string{estimateactivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorTable,
			Columns: []string{estimateactivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.CreatorAPICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorAPITable,
			Columns: []string{estimateactivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimateactivity.CreatorAPITable,
			Columns: []string{estimateactivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eauo.modifiers...)
	_node = &EstimateActivity{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{estimateactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}

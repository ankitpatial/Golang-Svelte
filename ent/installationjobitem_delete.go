// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/installationjobitem"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobItemDelete is the builder for deleting a InstallationJobItem entity.
type InstallationJobItemDelete struct {
	config
	hooks    []Hook
	mutation *InstallationJobItemMutation
}

// Where appends a list predicates to the InstallationJobItemDelete builder.
func (ijid *InstallationJobItemDelete) Where(ps ...predicate.InstallationJobItem) *InstallationJobItemDelete {
	ijid.mutation.Where(ps...)
	return ijid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ijid *InstallationJobItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ijid.sqlExec, ijid.mutation, ijid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ijid *InstallationJobItemDelete) ExecX(ctx context.Context) int {
	n, err := ijid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ijid *InstallationJobItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(installationjobitem.Table, sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString))
	if ps := ijid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ijid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ijid.mutation.done = true
	return affected, err
}

// InstallationJobItemDeleteOne is the builder for deleting a single InstallationJobItem entity.
type InstallationJobItemDeleteOne struct {
	ijid *InstallationJobItemDelete
}

// Where appends a list predicates to the InstallationJobItemDelete builder.
func (ijido *InstallationJobItemDeleteOne) Where(ps ...predicate.InstallationJobItem) *InstallationJobItemDeleteOne {
	ijido.ijid.mutation.Where(ps...)
	return ijido
}

// Exec executes the deletion query.
func (ijido *InstallationJobItemDeleteOne) Exec(ctx context.Context) error {
	n, err := ijido.ijid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{installationjobitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ijido *InstallationJobItemDeleteOne) ExecX(ctx context.Context) {
	if err := ijido.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package survey

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the survey type in the database.
	Label = "survey"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldSlot holds the string denoting the slot field in the database.
	FieldSlot = "slot"
	// FieldSlotID holds the string denoting the slot_id field in the database.
	FieldSlotID = "slot_id"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldUntil holds the string denoting the until field in the database.
	FieldUntil = "until"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldProgressAt holds the string denoting the progress_at field in the database.
	FieldProgressAt = "progress_at"
	// FieldProgressFlagAt holds the string denoting the progress_flag_at field in the database.
	FieldProgressFlagAt = "progress_flag_at"
	// EdgeProgressHistory holds the string denoting the progress_history edge name in mutations.
	EdgeProgressHistory = "progress_history"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// Table holds the table name of the survey in the database.
	Table = "surveys"
	// ProgressHistoryTable is the table that holds the progress_history relation/edge.
	ProgressHistoryTable = "survey_progress"
	// ProgressHistoryInverseTable is the table name for the SurveyProgress entity.
	// It exists in this package in order to avoid circular dependency with the "surveyprogress" package.
	ProgressHistoryInverseTable = "survey_progress"
	// ProgressHistoryColumn is the table column denoting the progress_history relation/edge.
	ProgressHistoryColumn = "survey_id"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "surveys"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "user_id"
	// PartnerTable is the table that holds the partner relation/edge.
	PartnerTable = "surveys"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
	// PartnerColumn is the table column denoting the partner relation/edge.
	PartnerColumn = "partner_id"
)

// Columns holds all SQL columns for survey fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDate,
	FieldSlot,
	FieldSlotID,
	FieldFrom,
	FieldTo,
	FieldUntil,
	FieldName,
	FieldAddress,
	FieldPhone,
	FieldNotes,
	FieldStatus,
	FieldProgress,
	FieldProgressAt,
	FieldProgressFlagAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "surveys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partner_id",
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DateValidator is a validator for the "date" field. It is called by the builders before save.
	DateValidator func(string) error
	// SlotValidator is a validator for the "slot" field. It is called by the builders before save.
	SlotValidator func(string) error
	// SlotIDValidator is a validator for the "slot_id" field. It is called by the builders before save.
	SlotIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// NotesValidator is a validator for the "notes" field. It is called by the builders before save.
	NotesValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enum.SurveyStatus) error {
	switch s.String() {
	case "REQUESTING", "REQUESTED":
		return nil
	default:
		return fmt.Errorf("survey: invalid enum value for status field: %q", s)
	}
}

// ProgressValidator is a validator for the "progress" field enum values. It is called by the builders before save.
func ProgressValidator(pr enum.SurveyProgress) error {
	switch pr.String() {
	case "SCHEDULED", "EN_ROUTE", "ON_SITE", "COMPLETED", "DOCS_UPLOADED":
		return nil
	default:
		return fmt.Errorf("survey: invalid enum value for progress field: %q", pr)
	}
}

// OrderOption defines the ordering options for the Survey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// BySlot orders the results by the slot field.
func BySlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlot, opts...).ToFunc()
}

// BySlotID orders the results by the slot_id field.
func BySlotID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlotID, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByTo orders the results by the to field.
func ByTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTo, opts...).ToFunc()
}

// ByUntil orders the results by the until field.
func ByUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUntil, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByProgressAt orders the results by the progress_at field.
func ByProgressAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgressAt, opts...).ToFunc()
}

// ByProgressFlagAt orders the results by the progress_flag_at field.
func ByProgressFlagAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgressFlagAt, opts...).ToFunc()
}

// ByProgressHistoryCount orders the results by progress_history count.
func ByProgressHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressHistoryStep(), opts...)
	}
}

// ByProgressHistory orders the results by progress_history terms.
func ByProgressHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByPartnerField orders the results by partner field.
func ByPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), sql.OrderByField(field, opts...))
	}
}
func newProgressHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressHistoryTable, ProgressHistoryColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
	)
}

var (
	// enum.SurveyStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.SurveyStatus)(nil)
	// enum.SurveyStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.SurveyStatus)(nil)
)

var (
	// enum.SurveyProgress must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.SurveyProgress)(nil)
	// enum.SurveyProgress must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.SurveyProgress)(nil)
)

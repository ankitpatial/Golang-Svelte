// Code generated by ent, DO NOT EDIT.

package survey

import (
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldUpdatedAt, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldDate, v))
}

// Slot applies equality check predicate on the "slot" field. It's identical to SlotEQ.
func Slot(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldSlot, v))
}

// SlotID applies equality check predicate on the "slot_id" field. It's identical to SlotIDEQ.
func SlotID(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldSlotID, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldTo, v))
}

// Until applies equality check predicate on the "until" field. It's identical to UntilEQ.
func Until(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldUntil, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldAddress, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldPhone, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldNotes, v))
}

// ProgressAt applies equality check predicate on the "progress_at" field. It's identical to ProgressAtEQ.
func ProgressAt(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldProgressAt, v))
}

// ProgressFlagAt applies equality check predicate on the "progress_flag_at" field. It's identical to ProgressFlagAtEQ.
func ProgressFlagAt(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldProgressFlagAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldUpdatedAt, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldDate, v))
}

// SlotEQ applies the EQ predicate on the "slot" field.
func SlotEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldSlot, v))
}

// SlotNEQ applies the NEQ predicate on the "slot" field.
func SlotNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldSlot, v))
}

// SlotIn applies the In predicate on the "slot" field.
func SlotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldSlot, vs...))
}

// SlotNotIn applies the NotIn predicate on the "slot" field.
func SlotNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldSlot, vs...))
}

// SlotGT applies the GT predicate on the "slot" field.
func SlotGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldSlot, v))
}

// SlotGTE applies the GTE predicate on the "slot" field.
func SlotGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldSlot, v))
}

// SlotLT applies the LT predicate on the "slot" field.
func SlotLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldSlot, v))
}

// SlotLTE applies the LTE predicate on the "slot" field.
func SlotLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldSlot, v))
}

// SlotContains applies the Contains predicate on the "slot" field.
func SlotContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldSlot, v))
}

// SlotHasPrefix applies the HasPrefix predicate on the "slot" field.
func SlotHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldSlot, v))
}

// SlotHasSuffix applies the HasSuffix predicate on the "slot" field.
func SlotHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldSlot, v))
}

// SlotEqualFold applies the EqualFold predicate on the "slot" field.
func SlotEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldSlot, v))
}

// SlotContainsFold applies the ContainsFold predicate on the "slot" field.
func SlotContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldSlot, v))
}

// SlotIDEQ applies the EQ predicate on the "slot_id" field.
func SlotIDEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldSlotID, v))
}

// SlotIDNEQ applies the NEQ predicate on the "slot_id" field.
func SlotIDNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldSlotID, v))
}

// SlotIDIn applies the In predicate on the "slot_id" field.
func SlotIDIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldSlotID, vs...))
}

// SlotIDNotIn applies the NotIn predicate on the "slot_id" field.
func SlotIDNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldSlotID, vs...))
}

// SlotIDGT applies the GT predicate on the "slot_id" field.
func SlotIDGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldSlotID, v))
}

// SlotIDGTE applies the GTE predicate on the "slot_id" field.
func SlotIDGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldSlotID, v))
}

// SlotIDLT applies the LT predicate on the "slot_id" field.
func SlotIDLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldSlotID, v))
}

// SlotIDLTE applies the LTE predicate on the "slot_id" field.
func SlotIDLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldSlotID, v))
}

// SlotIDContains applies the Contains predicate on the "slot_id" field.
func SlotIDContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldSlotID, v))
}

// SlotIDHasPrefix applies the HasPrefix predicate on the "slot_id" field.
func SlotIDHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldSlotID, v))
}

// SlotIDHasSuffix applies the HasSuffix predicate on the "slot_id" field.
func SlotIDHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldSlotID, v))
}

// SlotIDEqualFold applies the EqualFold predicate on the "slot_id" field.
func SlotIDEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldSlotID, v))
}

// SlotIDContainsFold applies the ContainsFold predicate on the "slot_id" field.
func SlotIDContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldSlotID, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldTo, v))
}

// UntilEQ applies the EQ predicate on the "until" field.
func UntilEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldUntil, v))
}

// UntilNEQ applies the NEQ predicate on the "until" field.
func UntilNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldUntil, v))
}

// UntilIn applies the In predicate on the "until" field.
func UntilIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldUntil, vs...))
}

// UntilNotIn applies the NotIn predicate on the "until" field.
func UntilNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldUntil, vs...))
}

// UntilGT applies the GT predicate on the "until" field.
func UntilGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldUntil, v))
}

// UntilGTE applies the GTE predicate on the "until" field.
func UntilGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldUntil, v))
}

// UntilLT applies the LT predicate on the "until" field.
func UntilLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldUntil, v))
}

// UntilLTE applies the LTE predicate on the "until" field.
func UntilLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldUntil, v))
}

// UntilIsNil applies the IsNil predicate on the "until" field.
func UntilIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldUntil))
}

// UntilNotNil applies the NotNil predicate on the "until" field.
func UntilNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldUntil))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldAddress, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldPhone, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Survey {
	return predicate.Survey(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Survey {
	return predicate.Survey(sql.FieldContainsFold(FieldNotes, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enum.SurveyStatus) predicate.Survey {
	vc := v
	return predicate.Survey(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enum.SurveyStatus) predicate.Survey {
	vc := v
	return predicate.Survey(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enum.SurveyStatus) predicate.Survey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Survey(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enum.SurveyStatus) predicate.Survey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Survey(sql.FieldNotIn(FieldStatus, v...))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v enum.SurveyProgress) predicate.Survey {
	vc := v
	return predicate.Survey(sql.FieldEQ(FieldProgress, vc))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v enum.SurveyProgress) predicate.Survey {
	vc := v
	return predicate.Survey(sql.FieldNEQ(FieldProgress, vc))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...enum.SurveyProgress) predicate.Survey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Survey(sql.FieldIn(FieldProgress, v...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...enum.SurveyProgress) predicate.Survey {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Survey(sql.FieldNotIn(FieldProgress, v...))
}

// ProgressIsNil applies the IsNil predicate on the "progress" field.
func ProgressIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldProgress))
}

// ProgressNotNil applies the NotNil predicate on the "progress" field.
func ProgressNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldProgress))
}

// ProgressAtEQ applies the EQ predicate on the "progress_at" field.
func ProgressAtEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldProgressAt, v))
}

// ProgressAtNEQ applies the NEQ predicate on the "progress_at" field.
func ProgressAtNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldProgressAt, v))
}

// ProgressAtIn applies the In predicate on the "progress_at" field.
func ProgressAtIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldProgressAt, vs...))
}

// ProgressAtNotIn applies the NotIn predicate on the "progress_at" field.
func ProgressAtNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldProgressAt, vs...))
}

// ProgressAtGT applies the GT predicate on the "progress_at" field.
func ProgressAtGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldProgressAt, v))
}

// ProgressAtGTE applies the GTE predicate on the "progress_at" field.
func ProgressAtGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldProgressAt, v))
}

// ProgressAtLT applies the LT predicate on the "progress_at" field.
func ProgressAtLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldProgressAt, v))
}

// ProgressAtLTE applies the LTE predicate on the "progress_at" field.
func ProgressAtLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldProgressAt, v))
}

// ProgressAtIsNil applies the IsNil predicate on the "progress_at" field.
func ProgressAtIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldProgressAt))
}

// ProgressAtNotNil applies the NotNil predicate on the "progress_at" field.
func ProgressAtNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldProgressAt))
}

// ProgressFlagAtEQ applies the EQ predicate on the "progress_flag_at" field.
func ProgressFlagAtEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldEQ(FieldProgressFlagAt, v))
}

// ProgressFlagAtNEQ applies the NEQ predicate on the "progress_flag_at" field.
func ProgressFlagAtNEQ(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNEQ(FieldProgressFlagAt, v))
}

// ProgressFlagAtIn applies the In predicate on the "progress_flag_at" field.
func ProgressFlagAtIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldIn(FieldProgressFlagAt, vs...))
}

// ProgressFlagAtNotIn applies the NotIn predicate on the "progress_flag_at" field.
func ProgressFlagAtNotIn(vs ...time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldNotIn(FieldProgressFlagAt, vs...))
}

// ProgressFlagAtGT applies the GT predicate on the "progress_flag_at" field.
func ProgressFlagAtGT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGT(FieldProgressFlagAt, v))
}

// ProgressFlagAtGTE applies the GTE predicate on the "progress_flag_at" field.
func ProgressFlagAtGTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldGTE(FieldProgressFlagAt, v))
}

// ProgressFlagAtLT applies the LT predicate on the "progress_flag_at" field.
func ProgressFlagAtLT(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLT(FieldProgressFlagAt, v))
}

// ProgressFlagAtLTE applies the LTE predicate on the "progress_flag_at" field.
func ProgressFlagAtLTE(v time.Time) predicate.Survey {
	return predicate.Survey(sql.FieldLTE(FieldProgressFlagAt, v))
}

// ProgressFlagAtIsNil applies the IsNil predicate on the "progress_flag_at" field.
func ProgressFlagAtIsNil() predicate.Survey {
	return predicate.Survey(sql.FieldIsNull(FieldProgressFlagAt))
}

// ProgressFlagAtNotNil applies the NotNil predicate on the "progress_flag_at" field.
func ProgressFlagAtNotNil() predicate.Survey {
	return predicate.Survey(sql.FieldNotNull(FieldProgressFlagAt))
}

// HasProgressHistory applies the HasEdge predicate on the "progress_history" edge.
func HasProgressHistory() predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgressHistoryTable, ProgressHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressHistoryWith applies the HasEdge predicate on the "progress_history" edge with a given conditions (other predicates).
func HasProgressHistoryWith(preds ...predicate.SurveyProgress) predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		step := newProgressHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartner applies the HasEdge predicate on the "partner" edge.
func HasPartner() predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnerTable, PartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerWith applies the HasEdge predicate on the "partner" edge with a given conditions (other predicates).
func HasPartnerWith(preds ...predicate.Partner) predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		step := newPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Survey) predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Survey) predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Survey) predicate.Survey {
	return predicate.Survey(func(s *sql.Selector) {
		p(s.Not())
	})
}

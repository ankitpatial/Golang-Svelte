// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/job"
	"roofix/ent/jobactivity"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobActivityCreate is the builder for creating a JobActivity entity.
type JobActivityCreate struct {
	config
	mutation *JobActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (jac *JobActivityCreate) SetCreatedAt(t time.Time) *JobActivityCreate {
	jac.mutation.SetCreatedAt(t)
	return jac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jac *JobActivityCreate) SetNillableCreatedAt(t *time.Time) *JobActivityCreate {
	if t != nil {
		jac.SetCreatedAt(*t)
	}
	return jac
}

// SetDescription sets the "description" field.
func (jac *JobActivityCreate) SetDescription(s string) *JobActivityCreate {
	jac.mutation.SetDescription(s)
	return jac
}

// SetRaw sets the "raw" field.
func (jac *JobActivityCreate) SetRaw(m map[string]interface{}) *JobActivityCreate {
	jac.mutation.SetRaw(m)
	return jac
}

// SetID sets the "id" field.
func (jac *JobActivityCreate) SetID(s string) *JobActivityCreate {
	jac.mutation.SetID(s)
	return jac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jac *JobActivityCreate) SetNillableID(s *string) *JobActivityCreate {
	if s != nil {
		jac.SetID(*s)
	}
	return jac
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jac *JobActivityCreate) SetJobID(id string) *JobActivityCreate {
	jac.mutation.SetJobID(id)
	return jac
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jac *JobActivityCreate) SetNillableJobID(id *string) *JobActivityCreate {
	if id != nil {
		jac = jac.SetJobID(*id)
	}
	return jac
}

// SetJob sets the "job" edge to the Job entity.
func (jac *JobActivityCreate) SetJob(j *Job) *JobActivityCreate {
	return jac.SetJobID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jac *JobActivityCreate) SetCreatorID(id string) *JobActivityCreate {
	jac.mutation.SetCreatorID(id)
	return jac
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jac *JobActivityCreate) SetNillableCreatorID(id *string) *JobActivityCreate {
	if id != nil {
		jac = jac.SetCreatorID(*id)
	}
	return jac
}

// SetCreator sets the "creator" edge to the User entity.
func (jac *JobActivityCreate) SetCreator(u *User) *JobActivityCreate {
	return jac.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (jac *JobActivityCreate) SetCreatorAPIID(id string) *JobActivityCreate {
	jac.mutation.SetCreatorAPIID(id)
	return jac
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (jac *JobActivityCreate) SetNillableCreatorAPIID(id *string) *JobActivityCreate {
	if id != nil {
		jac = jac.SetCreatorAPIID(*id)
	}
	return jac
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (jac *JobActivityCreate) SetCreatorAPI(a *ApiUser) *JobActivityCreate {
	return jac.SetCreatorAPIID(a.ID)
}

// Mutation returns the JobActivityMutation object of the builder.
func (jac *JobActivityCreate) Mutation() *JobActivityMutation {
	return jac.mutation
}

// Save creates the JobActivity in the database.
func (jac *JobActivityCreate) Save(ctx context.Context) (*JobActivity, error) {
	jac.defaults()
	return withHooks(ctx, jac.sqlSave, jac.mutation, jac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jac *JobActivityCreate) SaveX(ctx context.Context) *JobActivity {
	v, err := jac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jac *JobActivityCreate) Exec(ctx context.Context) error {
	_, err := jac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jac *JobActivityCreate) ExecX(ctx context.Context) {
	if err := jac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jac *JobActivityCreate) defaults() {
	if _, ok := jac.mutation.CreatedAt(); !ok {
		v := jobactivity.DefaultCreatedAt()
		jac.mutation.SetCreatedAt(v)
	}
	if _, ok := jac.mutation.ID(); !ok {
		v := jobactivity.DefaultID()
		jac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jac *JobActivityCreate) check() error {
	if _, ok := jac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobActivity.created_at"`)}
	}
	if _, ok := jac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "JobActivity.description"`)}
	}
	if v, ok := jac.mutation.ID(); ok {
		if err := jobactivity.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "JobActivity.id": %w`, err)}
		}
	}
	return nil
}

func (jac *JobActivityCreate) sqlSave(ctx context.Context) (*JobActivity, error) {
	if err := jac.check(); err != nil {
		return nil, err
	}
	_node, _spec := jac.createSpec()
	if err := sqlgraph.CreateNode(ctx, jac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobActivity.ID type: %T", _spec.ID.Value)
		}
	}
	jac.mutation.id = &_node.ID
	jac.mutation.done = true
	return _node, nil
}

func (jac *JobActivityCreate) createSpec() (*JobActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &JobActivity{config: jac.config}
		_spec = sqlgraph.NewCreateSpec(jobactivity.Table, sqlgraph.NewFieldSpec(jobactivity.FieldID, field.TypeString))
	)
	_spec.OnConflict = jac.conflict
	if id, ok := jac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jac.mutation.CreatedAt(); ok {
		_spec.SetField(jobactivity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jac.mutation.Description(); ok {
		_spec.SetField(jobactivity.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := jac.mutation.Raw(); ok {
		_spec.SetField(jobactivity.FieldRaw, field.TypeJSON, value)
		_node.Raw = value
	}
	if nodes := jac.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobactivity.JobTable,
			Columns: []string{jobactivity.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobactivity.CreatorTable,
			Columns: []string{jobactivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jac.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobactivity.CreatorAPITable,
			Columns: []string{jobactivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobActivity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobActivityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jac *JobActivityCreate) OnConflict(opts ...sql.ConflictOption) *JobActivityUpsertOne {
	jac.conflict = opts
	return &JobActivityUpsertOne{
		create: jac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jac *JobActivityCreate) OnConflictColumns(columns ...string) *JobActivityUpsertOne {
	jac.conflict = append(jac.conflict, sql.ConflictColumns(columns...))
	return &JobActivityUpsertOne{
		create: jac,
	}
}

type (
	// JobActivityUpsertOne is the builder for "upsert"-ing
	//  one JobActivity node.
	JobActivityUpsertOne struct {
		create *JobActivityCreate
	}

	// JobActivityUpsert is the "OnConflict" setter.
	JobActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *JobActivityUpsert) SetDescription(v string) *JobActivityUpsert {
	u.Set(jobactivity.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *JobActivityUpsert) UpdateDescription() *JobActivityUpsert {
	u.SetExcluded(jobactivity.FieldDescription)
	return u
}

// SetRaw sets the "raw" field.
func (u *JobActivityUpsert) SetRaw(v map[string]interface{}) *JobActivityUpsert {
	u.Set(jobactivity.FieldRaw, v)
	return u
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *JobActivityUpsert) UpdateRaw() *JobActivityUpsert {
	u.SetExcluded(jobactivity.FieldRaw)
	return u
}

// ClearRaw clears the value of the "raw" field.
func (u *JobActivityUpsert) ClearRaw() *JobActivityUpsert {
	u.SetNull(jobactivity.FieldRaw)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobactivity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobActivityUpsertOne) UpdateNewValues() *JobActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobactivity.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobactivity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobActivity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobActivityUpsertOne) Ignore() *JobActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobActivityUpsertOne) DoNothing() *JobActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobActivityCreate.OnConflict
// documentation for more info.
func (u *JobActivityUpsertOne) Update(set func(*JobActivityUpsert)) *JobActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *JobActivityUpsertOne) SetDescription(v string) *JobActivityUpsertOne {
	return u.Update(func(s *JobActivityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *JobActivityUpsertOne) UpdateDescription() *JobActivityUpsertOne {
	return u.Update(func(s *JobActivityUpsert) {
		s.UpdateDescription()
	})
}

// SetRaw sets the "raw" field.
func (u *JobActivityUpsertOne) SetRaw(v map[string]interface{}) *JobActivityUpsertOne {
	return u.Update(func(s *JobActivityUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *JobActivityUpsertOne) UpdateRaw() *JobActivityUpsertOne {
	return u.Update(func(s *JobActivityUpsert) {
		s.UpdateRaw()
	})
}

// ClearRaw clears the value of the "raw" field.
func (u *JobActivityUpsertOne) ClearRaw() *JobActivityUpsertOne {
	return u.Update(func(s *JobActivityUpsert) {
		s.ClearRaw()
	})
}

// Exec executes the query.
func (u *JobActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobActivityUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: JobActivityUpsertOne.ID is not supported by MySQL driver. Use JobActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobActivityUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobActivityCreateBulk is the builder for creating many JobActivity entities in bulk.
type JobActivityCreateBulk struct {
	config
	builders []*JobActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the JobActivity entities in the database.
func (jacb *JobActivityCreateBulk) Save(ctx context.Context) ([]*JobActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jacb.builders))
	nodes := make([]*JobActivity, len(jacb.builders))
	mutators := make([]Mutator, len(jacb.builders))
	for i := range jacb.builders {
		func(i int, root context.Context) {
			builder := jacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jacb *JobActivityCreateBulk) SaveX(ctx context.Context) []*JobActivity {
	v, err := jacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jacb *JobActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := jacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jacb *JobActivityCreateBulk) ExecX(ctx context.Context) {
	if err := jacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobActivity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobActivityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jacb *JobActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobActivityUpsertBulk {
	jacb.conflict = opts
	return &JobActivityUpsertBulk{
		create: jacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jacb *JobActivityCreateBulk) OnConflictColumns(columns ...string) *JobActivityUpsertBulk {
	jacb.conflict = append(jacb.conflict, sql.ConflictColumns(columns...))
	return &JobActivityUpsertBulk{
		create: jacb,
	}
}

// JobActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of JobActivity nodes.
type JobActivityUpsertBulk struct {
	create *JobActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobactivity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobActivityUpsertBulk) UpdateNewValues() *JobActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobactivity.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobactivity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobActivity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobActivityUpsertBulk) Ignore() *JobActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobActivityUpsertBulk) DoNothing() *JobActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobActivityCreateBulk.OnConflict
// documentation for more info.
func (u *JobActivityUpsertBulk) Update(set func(*JobActivityUpsert)) *JobActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *JobActivityUpsertBulk) SetDescription(v string) *JobActivityUpsertBulk {
	return u.Update(func(s *JobActivityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *JobActivityUpsertBulk) UpdateDescription() *JobActivityUpsertBulk {
	return u.Update(func(s *JobActivityUpsert) {
		s.UpdateDescription()
	})
}

// SetRaw sets the "raw" field.
func (u *JobActivityUpsertBulk) SetRaw(v map[string]interface{}) *JobActivityUpsertBulk {
	return u.Update(func(s *JobActivityUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *JobActivityUpsertBulk) UpdateRaw() *JobActivityUpsertBulk {
	return u.Update(func(s *JobActivityUpsert) {
		s.UpdateRaw()
	})
}

// ClearRaw clears the value of the "raw" field.
func (u *JobActivityUpsertBulk) ClearRaw() *JobActivityUpsertBulk {
	return u.Update(func(s *JobActivityUpsert) {
		s.ClearRaw()
	})
}

// Exec executes the query.
func (u *JobActivityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

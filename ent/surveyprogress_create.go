// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyProgressCreate is the builder for creating a SurveyProgress entity.
type SurveyProgressCreate struct {
	config
	mutation *SurveyProgressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (spc *SurveyProgressCreate) SetCreatedAt(t time.Time) *SurveyProgressCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableCreatedAt(t *time.Time) *SurveyProgressCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetStatus sets the "status" field.
func (spc *SurveyProgressCreate) SetStatus(ep enum.SurveyProgress) *SurveyProgressCreate {
	spc.mutation.SetStatus(ep)
	return spc
}

// SetComplete sets the "complete" field.
func (spc *SurveyProgressCreate) SetComplete(b bool) *SurveyProgressCreate {
	spc.mutation.SetComplete(b)
	return spc
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableComplete(b *bool) *SurveyProgressCreate {
	if b != nil {
		spc.SetComplete(*b)
	}
	return spc
}

// SetNote sets the "note" field.
func (spc *SurveyProgressCreate) SetNote(s string) *SurveyProgressCreate {
	spc.mutation.SetNote(s)
	return spc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableNote(s *string) *SurveyProgressCreate {
	if s != nil {
		spc.SetNote(*s)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *SurveyProgressCreate) SetID(s string) *SurveyProgressCreate {
	spc.mutation.SetID(s)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableID(s *string) *SurveyProgressCreate {
	if s != nil {
		spc.SetID(*s)
	}
	return spc
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (spc *SurveyProgressCreate) SetSurveyID(id string) *SurveyProgressCreate {
	spc.mutation.SetSurveyID(id)
	return spc
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableSurveyID(id *string) *SurveyProgressCreate {
	if id != nil {
		spc = spc.SetSurveyID(*id)
	}
	return spc
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (spc *SurveyProgressCreate) SetSurvey(s *Survey) *SurveyProgressCreate {
	return spc.SetSurveyID(s.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (spc *SurveyProgressCreate) SetCreatorID(id string) *SurveyProgressCreate {
	spc.mutation.SetCreatorID(id)
	return spc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableCreatorID(id *string) *SurveyProgressCreate {
	if id != nil {
		spc = spc.SetCreatorID(*id)
	}
	return spc
}

// SetCreator sets the "creator" edge to the User entity.
func (spc *SurveyProgressCreate) SetCreator(u *User) *SurveyProgressCreate {
	return spc.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (spc *SurveyProgressCreate) SetCreatorAPIID(id string) *SurveyProgressCreate {
	spc.mutation.SetCreatorAPIID(id)
	return spc
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (spc *SurveyProgressCreate) SetNillableCreatorAPIID(id *string) *SurveyProgressCreate {
	if id != nil {
		spc = spc.SetCreatorAPIID(*id)
	}
	return spc
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (spc *SurveyProgressCreate) SetCreatorAPI(a *ApiUser) *SurveyProgressCreate {
	return spc.SetCreatorAPIID(a.ID)
}

// Mutation returns the SurveyProgressMutation object of the builder.
func (spc *SurveyProgressCreate) Mutation() *SurveyProgressMutation {
	return spc.mutation
}

// Save creates the SurveyProgress in the database.
func (spc *SurveyProgressCreate) Save(ctx context.Context) (*SurveyProgress, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SurveyProgressCreate) SaveX(ctx context.Context) *SurveyProgress {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SurveyProgressCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SurveyProgressCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SurveyProgressCreate) defaults() {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := surveyprogress.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.Complete(); !ok {
		v := surveyprogress.DefaultComplete
		spc.mutation.SetComplete(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		v := surveyprogress.DefaultID()
		spc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SurveyProgressCreate) check() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SurveyProgress.created_at"`)}
	}
	if _, ok := spc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SurveyProgress.status"`)}
	}
	if v, ok := spc.mutation.Status(); ok {
		if err := surveyprogress.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SurveyProgress.status": %w`, err)}
		}
	}
	if v, ok := spc.mutation.ID(); ok {
		if err := surveyprogress.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SurveyProgress.id": %w`, err)}
		}
	}
	return nil
}

func (spc *SurveyProgressCreate) sqlSave(ctx context.Context) (*SurveyProgress, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SurveyProgress.ID type: %T", _spec.ID.Value)
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SurveyProgressCreate) createSpec() (*SurveyProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyProgress{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(surveyprogress.Table, sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString))
	)
	_spec.OnConflict = spc.conflict
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(surveyprogress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.SetField(surveyprogress.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := spc.mutation.Complete(); ok {
		_spec.SetField(surveyprogress.FieldComplete, field.TypeBool, value)
		_node.Complete = value
	}
	if value, ok := spc.mutation.Note(); ok {
		_spec.SetField(surveyprogress.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := spc.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.SurveyTable,
			Columns: []string{surveyprogress.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.survey_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorTable,
			Columns: []string{surveyprogress.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyprogress.CreatorAPITable,
			Columns: []string{surveyprogress.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyProgress.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (spc *SurveyProgressCreate) OnConflict(opts ...sql.ConflictOption) *SurveyProgressUpsertOne {
	spc.conflict = opts
	return &SurveyProgressUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyProgress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spc *SurveyProgressCreate) OnConflictColumns(columns ...string) *SurveyProgressUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &SurveyProgressUpsertOne{
		create: spc,
	}
}

type (
	// SurveyProgressUpsertOne is the builder for "upsert"-ing
	//  one SurveyProgress node.
	SurveyProgressUpsertOne struct {
		create *SurveyProgressCreate
	}

	// SurveyProgressUpsert is the "OnConflict" setter.
	SurveyProgressUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SurveyProgress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyprogress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyProgressUpsertOne) UpdateNewValues() *SurveyProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(surveyprogress.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(surveyprogress.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Status(); exists {
			s.SetIgnore(surveyprogress.FieldStatus)
		}
		if _, exists := u.create.mutation.Complete(); exists {
			s.SetIgnore(surveyprogress.FieldComplete)
		}
		if _, exists := u.create.mutation.Note(); exists {
			s.SetIgnore(surveyprogress.FieldNote)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyProgress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyProgressUpsertOne) Ignore() *SurveyProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyProgressUpsertOne) DoNothing() *SurveyProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyProgressCreate.OnConflict
// documentation for more info.
func (u *SurveyProgressUpsertOne) Update(set func(*SurveyProgressUpsert)) *SurveyProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyProgressUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SurveyProgressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SurveyProgressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyProgressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyProgressUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SurveyProgressUpsertOne.ID is not supported by MySQL driver. Use SurveyProgressUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyProgressUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyProgressCreateBulk is the builder for creating many SurveyProgress entities in bulk.
type SurveyProgressCreateBulk struct {
	config
	builders []*SurveyProgressCreate
	conflict []sql.ConflictOption
}

// Save creates the SurveyProgress entities in the database.
func (spcb *SurveyProgressCreateBulk) Save(ctx context.Context) ([]*SurveyProgress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SurveyProgress, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SurveyProgressCreateBulk) SaveX(ctx context.Context) []*SurveyProgress {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SurveyProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SurveyProgressCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyProgress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (spcb *SurveyProgressCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyProgressUpsertBulk {
	spcb.conflict = opts
	return &SurveyProgressUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyProgress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spcb *SurveyProgressCreateBulk) OnConflictColumns(columns ...string) *SurveyProgressUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &SurveyProgressUpsertBulk{
		create: spcb,
	}
}

// SurveyProgressUpsertBulk is the builder for "upsert"-ing
// a bulk of SurveyProgress nodes.
type SurveyProgressUpsertBulk struct {
	create *SurveyProgressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SurveyProgress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyprogress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyProgressUpsertBulk) UpdateNewValues() *SurveyProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(surveyprogress.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(surveyprogress.FieldCreatedAt)
			}
			if _, exists := b.mutation.Status(); exists {
				s.SetIgnore(surveyprogress.FieldStatus)
			}
			if _, exists := b.mutation.Complete(); exists {
				s.SetIgnore(surveyprogress.FieldComplete)
			}
			if _, exists := b.mutation.Note(); exists {
				s.SetIgnore(surveyprogress.FieldNote)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyProgress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyProgressUpsertBulk) Ignore() *SurveyProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyProgressUpsertBulk) DoNothing() *SurveyProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyProgressCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyProgressUpsertBulk) Update(set func(*SurveyProgressUpsert)) *SurveyProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyProgressUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SurveyProgressUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SurveyProgressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SurveyProgressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyProgressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/partner"
	"roofix/ent/partneractivity"
	"roofix/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerActivityCreate is the builder for creating a PartnerActivity entity.
type PartnerActivityCreate struct {
	config
	mutation *PartnerActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pac *PartnerActivityCreate) SetCreatedAt(t time.Time) *PartnerActivityCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PartnerActivityCreate) SetNillableCreatedAt(t *time.Time) *PartnerActivityCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetDescription sets the "description" field.
func (pac *PartnerActivityCreate) SetDescription(s string) *PartnerActivityCreate {
	pac.mutation.SetDescription(s)
	return pac
}

// SetRaw sets the "raw" field.
func (pac *PartnerActivityCreate) SetRaw(m map[string]interface{}) *PartnerActivityCreate {
	pac.mutation.SetRaw(m)
	return pac
}

// SetID sets the "id" field.
func (pac *PartnerActivityCreate) SetID(s string) *PartnerActivityCreate {
	pac.mutation.SetID(s)
	return pac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pac *PartnerActivityCreate) SetNillableID(s *string) *PartnerActivityCreate {
	if s != nil {
		pac.SetID(*s)
	}
	return pac
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pac *PartnerActivityCreate) SetPartnerID(id string) *PartnerActivityCreate {
	pac.mutation.SetPartnerID(id)
	return pac
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (pac *PartnerActivityCreate) SetNillablePartnerID(id *string) *PartnerActivityCreate {
	if id != nil {
		pac = pac.SetPartnerID(*id)
	}
	return pac
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pac *PartnerActivityCreate) SetPartner(p *Partner) *PartnerActivityCreate {
	return pac.SetPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (pac *PartnerActivityCreate) SetCreatorID(id string) *PartnerActivityCreate {
	pac.mutation.SetCreatorID(id)
	return pac
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (pac *PartnerActivityCreate) SetNillableCreatorID(id *string) *PartnerActivityCreate {
	if id != nil {
		pac = pac.SetCreatorID(*id)
	}
	return pac
}

// SetCreator sets the "creator" edge to the User entity.
func (pac *PartnerActivityCreate) SetCreator(u *User) *PartnerActivityCreate {
	return pac.SetCreatorID(u.ID)
}

// SetCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID.
func (pac *PartnerActivityCreate) SetCreatorAPIID(id string) *PartnerActivityCreate {
	pac.mutation.SetCreatorAPIID(id)
	return pac
}

// SetNillableCreatorAPIID sets the "creator_api" edge to the ApiUser entity by ID if the given value is not nil.
func (pac *PartnerActivityCreate) SetNillableCreatorAPIID(id *string) *PartnerActivityCreate {
	if id != nil {
		pac = pac.SetCreatorAPIID(*id)
	}
	return pac
}

// SetCreatorAPI sets the "creator_api" edge to the ApiUser entity.
func (pac *PartnerActivityCreate) SetCreatorAPI(a *ApiUser) *PartnerActivityCreate {
	return pac.SetCreatorAPIID(a.ID)
}

// Mutation returns the PartnerActivityMutation object of the builder.
func (pac *PartnerActivityCreate) Mutation() *PartnerActivityMutation {
	return pac.mutation
}

// Save creates the PartnerActivity in the database.
func (pac *PartnerActivityCreate) Save(ctx context.Context) (*PartnerActivity, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PartnerActivityCreate) SaveX(ctx context.Context) *PartnerActivity {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PartnerActivityCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PartnerActivityCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PartnerActivityCreate) defaults() {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := partneractivity.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.ID(); !ok {
		v := partneractivity.DefaultID()
		pac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PartnerActivityCreate) check() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnerActivity.created_at"`)}
	}
	if _, ok := pac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PartnerActivity.description"`)}
	}
	if v, ok := pac.mutation.ID(); ok {
		if err := partneractivity.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PartnerActivity.id": %w`, err)}
		}
	}
	return nil
}

func (pac *PartnerActivityCreate) sqlSave(ctx context.Context) (*PartnerActivity, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PartnerActivity.ID type: %T", _spec.ID.Value)
		}
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PartnerActivityCreate) createSpec() (*PartnerActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnerActivity{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(partneractivity.Table, sqlgraph.NewFieldSpec(partneractivity.FieldID, field.TypeString))
	)
	_spec.OnConflict = pac.conflict
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(partneractivity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.Description(); ok {
		_spec.SetField(partneractivity.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pac.mutation.Raw(); ok {
		_spec.SetField(partneractivity.FieldRaw, field.TypeJSON, value)
		_node.Raw = value
	}
	if nodes := pac.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.PartnerTable,
			Columns: []string{partneractivity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorTable,
			Columns: []string{partneractivity.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.CreatorAPIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partneractivity.CreatorAPITable,
			Columns: []string{partneractivity.CreatorAPIColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apiuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.api_user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerActivity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerActivityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pac *PartnerActivityCreate) OnConflict(opts ...sql.ConflictOption) *PartnerActivityUpsertOne {
	pac.conflict = opts
	return &PartnerActivityUpsertOne{
		create: pac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pac *PartnerActivityCreate) OnConflictColumns(columns ...string) *PartnerActivityUpsertOne {
	pac.conflict = append(pac.conflict, sql.ConflictColumns(columns...))
	return &PartnerActivityUpsertOne{
		create: pac,
	}
}

type (
	// PartnerActivityUpsertOne is the builder for "upsert"-ing
	//  one PartnerActivity node.
	PartnerActivityUpsertOne struct {
		create *PartnerActivityCreate
	}

	// PartnerActivityUpsert is the "OnConflict" setter.
	PartnerActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *PartnerActivityUpsert) SetDescription(v string) *PartnerActivityUpsert {
	u.Set(partneractivity.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnerActivityUpsert) UpdateDescription() *PartnerActivityUpsert {
	u.SetExcluded(partneractivity.FieldDescription)
	return u
}

// SetRaw sets the "raw" field.
func (u *PartnerActivityUpsert) SetRaw(v map[string]interface{}) *PartnerActivityUpsert {
	u.Set(partneractivity.FieldRaw, v)
	return u
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *PartnerActivityUpsert) UpdateRaw() *PartnerActivityUpsert {
	u.SetExcluded(partneractivity.FieldRaw)
	return u
}

// ClearRaw clears the value of the "raw" field.
func (u *PartnerActivityUpsert) ClearRaw() *PartnerActivityUpsert {
	u.SetNull(partneractivity.FieldRaw)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PartnerActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partneractivity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerActivityUpsertOne) UpdateNewValues() *PartnerActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(partneractivity.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partneractivity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerActivity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnerActivityUpsertOne) Ignore() *PartnerActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerActivityUpsertOne) DoNothing() *PartnerActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerActivityCreate.OnConflict
// documentation for more info.
func (u *PartnerActivityUpsertOne) Update(set func(*PartnerActivityUpsert)) *PartnerActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *PartnerActivityUpsertOne) SetDescription(v string) *PartnerActivityUpsertOne {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnerActivityUpsertOne) UpdateDescription() *PartnerActivityUpsertOne {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.UpdateDescription()
	})
}

// SetRaw sets the "raw" field.
func (u *PartnerActivityUpsertOne) SetRaw(v map[string]interface{}) *PartnerActivityUpsertOne {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *PartnerActivityUpsertOne) UpdateRaw() *PartnerActivityUpsertOne {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.UpdateRaw()
	})
}

// ClearRaw clears the value of the "raw" field.
func (u *PartnerActivityUpsertOne) ClearRaw() *PartnerActivityUpsertOne {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.ClearRaw()
	})
}

// Exec executes the query.
func (u *PartnerActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnerActivityUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PartnerActivityUpsertOne.ID is not supported by MySQL driver. Use PartnerActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnerActivityUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnerActivityCreateBulk is the builder for creating many PartnerActivity entities in bulk.
type PartnerActivityCreateBulk struct {
	config
	builders []*PartnerActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnerActivity entities in the database.
func (pacb *PartnerActivityCreateBulk) Save(ctx context.Context) ([]*PartnerActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PartnerActivity, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PartnerActivityCreateBulk) SaveX(ctx context.Context) []*PartnerActivity {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PartnerActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PartnerActivityCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerActivity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerActivityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pacb *PartnerActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnerActivityUpsertBulk {
	pacb.conflict = opts
	return &PartnerActivityUpsertBulk{
		create: pacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pacb *PartnerActivityCreateBulk) OnConflictColumns(columns ...string) *PartnerActivityUpsertBulk {
	pacb.conflict = append(pacb.conflict, sql.ConflictColumns(columns...))
	return &PartnerActivityUpsertBulk{
		create: pacb,
	}
}

// PartnerActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnerActivity nodes.
type PartnerActivityUpsertBulk struct {
	create *PartnerActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnerActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(partneractivity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PartnerActivityUpsertBulk) UpdateNewValues() *PartnerActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(partneractivity.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partneractivity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerActivity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnerActivityUpsertBulk) Ignore() *PartnerActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerActivityUpsertBulk) DoNothing() *PartnerActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerActivityCreateBulk.OnConflict
// documentation for more info.
func (u *PartnerActivityUpsertBulk) Update(set func(*PartnerActivityUpsert)) *PartnerActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *PartnerActivityUpsertBulk) SetDescription(v string) *PartnerActivityUpsertBulk {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnerActivityUpsertBulk) UpdateDescription() *PartnerActivityUpsertBulk {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.UpdateDescription()
	})
}

// SetRaw sets the "raw" field.
func (u *PartnerActivityUpsertBulk) SetRaw(v map[string]interface{}) *PartnerActivityUpsertBulk {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *PartnerActivityUpsertBulk) UpdateRaw() *PartnerActivityUpsertBulk {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.UpdateRaw()
	})
}

// ClearRaw clears the value of the "raw" field.
func (u *PartnerActivityUpsertBulk) ClearRaw() *PartnerActivityUpsertBulk {
	return u.Update(func(s *PartnerActivityUpsert) {
		s.ClearRaw()
	})
}

// Exec executes the query.
func (u *PartnerActivityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnerActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

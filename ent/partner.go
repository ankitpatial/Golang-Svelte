// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/partner"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"roofix/pkg/model"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Partner is the model entity for the Partner schema.
type Partner struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID string `json:"creator_id,omitempty"`
	// Type holds the value of the "type" field.
	Type enum.Partner `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// IsNationWide holds the value of the "is_nation_wide" field.
	IsNationWide bool `json:"is_nation_wide,omitempty"`
	// CrewCount holds the value of the "crew_count" field.
	CrewCount uint16 `json:"crew_count,omitempty"`
	// YearsInBusiness holds the value of the "years_in_business" field.
	YearsInBusiness *int `json:"years_in_business,omitempty"`
	// weekly job capacity
	JobCapacity uint16 `json:"job_capacity,omitempty"`
	// times to completely complete a Asphalt project
	AsphaltLeadT string `json:"asphalt_lead_t,omitempty"`
	// times to completely complete a Metal project
	MetalLeadT string `json:"metal_lead_t,omitempty"`
	// times to completely complete a Tile project
	TileLeadT string `json:"tile_lead_t,omitempty"`
	// SetupStepsCompleted holds the value of the "setup_steps_completed" field.
	SetupStepsCompleted uint8 `json:"setup_steps_completed,omitempty"`
	// solar partner's monthly sales volume
	SalesVolume *int `json:"sales_volume,omitempty"`
	// solar partner's down payment %
	DownPayment *int `json:"down_payment,omitempty"`
	// solar partner's PIF date in days
	Pif *int `json:"pif,omitempty"`
	// solar partner's: Do you install your solar projects in house?
	InstallInHouse *bool `json:"install_in_house,omitempty"`
	// Status holds the value of the "status" field.
	Status enum.PartnerStatus `json:"status,omitempty"`
	// EpcStatus holds the value of the "epc_status" field.
	EpcStatus enum.EPCStatus `json:"epc_status,omitempty"`
	// MobileAppSettings holds the value of the "mobile_app_settings" field.
	MobileAppSettings model.MobileAppSettings `json:"mobile_app_settings,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnerQuery when eager-loading is set.
	Edges        PartnerEdges `json:"edges"`
	api_user_id  *string
	selectValues sql.SelectValues
}

// PartnerEdges holds the relations/edges for other nodes in the graph.
type PartnerEdges struct {
	// company that requested estimate
	RequestedEstimates []*Estimate `json:"requested_estimates,omitempty"`
	// requested estimate home owner
	EstimateHomeOwners []*HomeOwner `json:"estimate_home_owners,omitempty"`
	// RoofingJobs holds the value of the roofing_jobs edge.
	RoofingJobs []*Job `json:"roofing_jobs,omitempty"`
	// IntegrationJobs holds the value of the integration_jobs edge.
	IntegrationJobs []*Job `json:"integration_jobs,omitempty"`
	// EpcJobs holds the value of the epc_jobs edge.
	EpcJobs []*Job `json:"epc_jobs,omitempty"`
	// JobRequests holds the value of the job_requests edge.
	JobRequests []*Job `json:"job_requests,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*PartnerActivity `json:"activities,omitempty"`
	// JobAssignmentHistory holds the value of the job_assignment_history edge.
	JobAssignmentHistory []*JobAssignmentHistory `json:"job_assignment_history,omitempty"`
	// RequestedInstallationJobs holds the value of the requested_installation_jobs edge.
	RequestedInstallationJobs []*InstallationJob `json:"requested_installation_jobs,omitempty"`
	// AssignedInstallationJobs holds the value of the assigned_installation_jobs edge.
	AssignedInstallationJobs []*InstallationJob `json:"assigned_installation_jobs,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*User `json:"contacts,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// CreatorAPI holds the value of the creator_api edge.
	CreatorAPI *ApiUser `json:"creator_api,omitempty"`
	// Services holds the value of the services edge.
	Services []*PartnerService `json:"services,omitempty"`
	// ServiceStates holds the value of the service_states edge.
	ServiceStates []*PartnerServiceState `json:"service_states,omitempty"`
	// ServiceCities holds the value of the service_cities edge.
	ServiceCities []*PartnerServiceCity `json:"service_cities,omitempty"`
	// TrainingVideos holds the value of the training_videos edge.
	TrainingVideos []*PartnerTrainingVideo `json:"training_videos,omitempty"`
	// ContactUsRequests holds the value of the contact_us_requests edge.
	ContactUsRequests []*ContactUs `json:"contact_us_requests,omitempty"`
	// Surveys holds the value of the surveys edge.
	Surveys []*Survey `json:"surveys,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*UserSession `json:"sessions,omitempty"`
	// JobNotes holds the value of the job_notes edge.
	JobNotes []*JobNote `json:"job_notes,omitempty"`
	// Channels holds the value of the channels edge.
	Channels []*ChannelSub `json:"channels,omitempty"`
	// FinanceOptions holds the value of the finance_options edge.
	FinanceOptions []*OptionList `json:"finance_options,omitempty"`
	// EpcOptions holds the value of the epc_options edge.
	EpcOptions []*OptionList `json:"epc_options,omitempty"`
	// PartnerContacts holds the value of the partner_contacts edge.
	PartnerContacts []*PartnerContact `json:"partner_contacts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [25]bool
	// totalCount holds the count of the edges above.
	totalCount [25]map[string]int

	namedRequestedEstimates        map[string][]*Estimate
	namedEstimateHomeOwners        map[string][]*HomeOwner
	namedRoofingJobs               map[string][]*Job
	namedIntegrationJobs           map[string][]*Job
	namedEpcJobs                   map[string][]*Job
	namedJobRequests               map[string][]*Job
	namedActivities                map[string][]*PartnerActivity
	namedJobAssignmentHistory      map[string][]*JobAssignmentHistory
	namedRequestedInstallationJobs map[string][]*InstallationJob
	namedAssignedInstallationJobs  map[string][]*InstallationJob
	namedContacts                  map[string][]*User
	namedServices                  map[string][]*PartnerService
	namedServiceStates             map[string][]*PartnerServiceState
	namedServiceCities             map[string][]*PartnerServiceCity
	namedTrainingVideos            map[string][]*PartnerTrainingVideo
	namedContactUsRequests         map[string][]*ContactUs
	namedSurveys                   map[string][]*Survey
	namedSessions                  map[string][]*UserSession
	namedJobNotes                  map[string][]*JobNote
	namedChannels                  map[string][]*ChannelSub
	namedFinanceOptions            map[string][]*OptionList
	namedEpcOptions                map[string][]*OptionList
	namedPartnerContacts           map[string][]*PartnerContact
}

// RequestedEstimatesOrErr returns the RequestedEstimates value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) RequestedEstimatesOrErr() ([]*Estimate, error) {
	if e.loadedTypes[0] {
		return e.RequestedEstimates, nil
	}
	return nil, &NotLoadedError{edge: "requested_estimates"}
}

// EstimateHomeOwnersOrErr returns the EstimateHomeOwners value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) EstimateHomeOwnersOrErr() ([]*HomeOwner, error) {
	if e.loadedTypes[1] {
		return e.EstimateHomeOwners, nil
	}
	return nil, &NotLoadedError{edge: "estimate_home_owners"}
}

// RoofingJobsOrErr returns the RoofingJobs value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) RoofingJobsOrErr() ([]*Job, error) {
	if e.loadedTypes[2] {
		return e.RoofingJobs, nil
	}
	return nil, &NotLoadedError{edge: "roofing_jobs"}
}

// IntegrationJobsOrErr returns the IntegrationJobs value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) IntegrationJobsOrErr() ([]*Job, error) {
	if e.loadedTypes[3] {
		return e.IntegrationJobs, nil
	}
	return nil, &NotLoadedError{edge: "integration_jobs"}
}

// EpcJobsOrErr returns the EpcJobs value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) EpcJobsOrErr() ([]*Job, error) {
	if e.loadedTypes[4] {
		return e.EpcJobs, nil
	}
	return nil, &NotLoadedError{edge: "epc_jobs"}
}

// JobRequestsOrErr returns the JobRequests value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) JobRequestsOrErr() ([]*Job, error) {
	if e.loadedTypes[5] {
		return e.JobRequests, nil
	}
	return nil, &NotLoadedError{edge: "job_requests"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ActivitiesOrErr() ([]*PartnerActivity, error) {
	if e.loadedTypes[6] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// JobAssignmentHistoryOrErr returns the JobAssignmentHistory value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) JobAssignmentHistoryOrErr() ([]*JobAssignmentHistory, error) {
	if e.loadedTypes[7] {
		return e.JobAssignmentHistory, nil
	}
	return nil, &NotLoadedError{edge: "job_assignment_history"}
}

// RequestedInstallationJobsOrErr returns the RequestedInstallationJobs value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) RequestedInstallationJobsOrErr() ([]*InstallationJob, error) {
	if e.loadedTypes[8] {
		return e.RequestedInstallationJobs, nil
	}
	return nil, &NotLoadedError{edge: "requested_installation_jobs"}
}

// AssignedInstallationJobsOrErr returns the AssignedInstallationJobs value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) AssignedInstallationJobsOrErr() ([]*InstallationJob, error) {
	if e.loadedTypes[9] {
		return e.AssignedInstallationJobs, nil
	}
	return nil, &NotLoadedError{edge: "assigned_installation_jobs"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ContactsOrErr() ([]*User, error) {
	if e.loadedTypes[10] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnerEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[11] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CreatorAPIOrErr returns the CreatorAPI value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnerEdges) CreatorAPIOrErr() (*ApiUser, error) {
	if e.loadedTypes[12] {
		if e.CreatorAPI == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.CreatorAPI, nil
	}
	return nil, &NotLoadedError{edge: "creator_api"}
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ServicesOrErr() ([]*PartnerService, error) {
	if e.loadedTypes[13] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// ServiceStatesOrErr returns the ServiceStates value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ServiceStatesOrErr() ([]*PartnerServiceState, error) {
	if e.loadedTypes[14] {
		return e.ServiceStates, nil
	}
	return nil, &NotLoadedError{edge: "service_states"}
}

// ServiceCitiesOrErr returns the ServiceCities value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ServiceCitiesOrErr() ([]*PartnerServiceCity, error) {
	if e.loadedTypes[15] {
		return e.ServiceCities, nil
	}
	return nil, &NotLoadedError{edge: "service_cities"}
}

// TrainingVideosOrErr returns the TrainingVideos value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) TrainingVideosOrErr() ([]*PartnerTrainingVideo, error) {
	if e.loadedTypes[16] {
		return e.TrainingVideos, nil
	}
	return nil, &NotLoadedError{edge: "training_videos"}
}

// ContactUsRequestsOrErr returns the ContactUsRequests value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ContactUsRequestsOrErr() ([]*ContactUs, error) {
	if e.loadedTypes[17] {
		return e.ContactUsRequests, nil
	}
	return nil, &NotLoadedError{edge: "contact_us_requests"}
}

// SurveysOrErr returns the Surveys value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) SurveysOrErr() ([]*Survey, error) {
	if e.loadedTypes[18] {
		return e.Surveys, nil
	}
	return nil, &NotLoadedError{edge: "surveys"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) SessionsOrErr() ([]*UserSession, error) {
	if e.loadedTypes[19] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// JobNotesOrErr returns the JobNotes value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) JobNotesOrErr() ([]*JobNote, error) {
	if e.loadedTypes[20] {
		return e.JobNotes, nil
	}
	return nil, &NotLoadedError{edge: "job_notes"}
}

// ChannelsOrErr returns the Channels value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ChannelsOrErr() ([]*ChannelSub, error) {
	if e.loadedTypes[21] {
		return e.Channels, nil
	}
	return nil, &NotLoadedError{edge: "channels"}
}

// FinanceOptionsOrErr returns the FinanceOptions value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) FinanceOptionsOrErr() ([]*OptionList, error) {
	if e.loadedTypes[22] {
		return e.FinanceOptions, nil
	}
	return nil, &NotLoadedError{edge: "finance_options"}
}

// EpcOptionsOrErr returns the EpcOptions value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) EpcOptionsOrErr() ([]*OptionList, error) {
	if e.loadedTypes[23] {
		return e.EpcOptions, nil
	}
	return nil, &NotLoadedError{edge: "epc_options"}
}

// PartnerContactsOrErr returns the PartnerContacts value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) PartnerContactsOrErr() ([]*PartnerContact, error) {
	if e.loadedTypes[24] {
		return e.PartnerContacts, nil
	}
	return nil, &NotLoadedError{edge: "partner_contacts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Partner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partner.FieldMobileAppSettings:
			values[i] = new([]byte)
		case partner.FieldIsNationWide, partner.FieldInstallInHouse:
			values[i] = new(sql.NullBool)
		case partner.FieldLatitude, partner.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case partner.FieldCrewCount, partner.FieldYearsInBusiness, partner.FieldJobCapacity, partner.FieldSetupStepsCompleted, partner.FieldSalesVolume, partner.FieldDownPayment, partner.FieldPif:
			values[i] = new(sql.NullInt64)
		case partner.FieldID, partner.FieldExternalID, partner.FieldCreatorID, partner.FieldType, partner.FieldName, partner.FieldAddress, partner.FieldWebsite, partner.FieldPhone, partner.FieldAsphaltLeadT, partner.FieldMetalLeadT, partner.FieldTileLeadT, partner.FieldStatus, partner.FieldEpcStatus:
			values[i] = new(sql.NullString)
		case partner.FieldCreatedAt, partner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case partner.ForeignKeys[0]: // api_user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Partner fields.
func (pa *Partner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partner.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case partner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case partner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case partner.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				pa.ExternalID = value.String
			}
		case partner.FieldCreatorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				pa.CreatorID = value.String
			}
		case partner.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = enum.Partner(value.String)
			}
		case partner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case partner.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pa.Address = value.String
			}
		case partner.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				pa.Website = value.String
			}
		case partner.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pa.Phone = value.String
			}
		case partner.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				pa.Latitude = value.Float64
			}
		case partner.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				pa.Longitude = value.Float64
			}
		case partner.FieldIsNationWide:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_nation_wide", values[i])
			} else if value.Valid {
				pa.IsNationWide = value.Bool
			}
		case partner.FieldCrewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field crew_count", values[i])
			} else if value.Valid {
				pa.CrewCount = uint16(value.Int64)
			}
		case partner.FieldYearsInBusiness:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field years_in_business", values[i])
			} else if value.Valid {
				pa.YearsInBusiness = new(int)
				*pa.YearsInBusiness = int(value.Int64)
			}
		case partner.FieldJobCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field job_capacity", values[i])
			} else if value.Valid {
				pa.JobCapacity = uint16(value.Int64)
			}
		case partner.FieldAsphaltLeadT:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asphalt_lead_t", values[i])
			} else if value.Valid {
				pa.AsphaltLeadT = value.String
			}
		case partner.FieldMetalLeadT:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metal_lead_t", values[i])
			} else if value.Valid {
				pa.MetalLeadT = value.String
			}
		case partner.FieldTileLeadT:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tile_lead_t", values[i])
			} else if value.Valid {
				pa.TileLeadT = value.String
			}
		case partner.FieldSetupStepsCompleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field setup_steps_completed", values[i])
			} else if value.Valid {
				pa.SetupStepsCompleted = uint8(value.Int64)
			}
		case partner.FieldSalesVolume:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales_volume", values[i])
			} else if value.Valid {
				pa.SalesVolume = new(int)
				*pa.SalesVolume = int(value.Int64)
			}
		case partner.FieldDownPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field down_payment", values[i])
			} else if value.Valid {
				pa.DownPayment = new(int)
				*pa.DownPayment = int(value.Int64)
			}
		case partner.FieldPif:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pif", values[i])
			} else if value.Valid {
				pa.Pif = new(int)
				*pa.Pif = int(value.Int64)
			}
		case partner.FieldInstallInHouse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field install_in_house", values[i])
			} else if value.Valid {
				pa.InstallInHouse = new(bool)
				*pa.InstallInHouse = value.Bool
			}
		case partner.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = enum.PartnerStatus(value.String)
			}
		case partner.FieldEpcStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field epc_status", values[i])
			} else if value.Valid {
				pa.EpcStatus = enum.EPCStatus(value.String)
			}
		case partner.FieldMobileAppSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_app_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.MobileAppSettings); err != nil {
					return fmt.Errorf("unmarshal field mobile_app_settings: %w", err)
				}
			}
		case partner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_user_id", values[i])
			} else if value.Valid {
				pa.api_user_id = new(string)
				*pa.api_user_id = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Partner.
// This includes values selected through modifiers, order, etc.
func (pa *Partner) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryRequestedEstimates queries the "requested_estimates" edge of the Partner entity.
func (pa *Partner) QueryRequestedEstimates() *EstimateQuery {
	return NewPartnerClient(pa.config).QueryRequestedEstimates(pa)
}

// QueryEstimateHomeOwners queries the "estimate_home_owners" edge of the Partner entity.
func (pa *Partner) QueryEstimateHomeOwners() *HomeOwnerQuery {
	return NewPartnerClient(pa.config).QueryEstimateHomeOwners(pa)
}

// QueryRoofingJobs queries the "roofing_jobs" edge of the Partner entity.
func (pa *Partner) QueryRoofingJobs() *JobQuery {
	return NewPartnerClient(pa.config).QueryRoofingJobs(pa)
}

// QueryIntegrationJobs queries the "integration_jobs" edge of the Partner entity.
func (pa *Partner) QueryIntegrationJobs() *JobQuery {
	return NewPartnerClient(pa.config).QueryIntegrationJobs(pa)
}

// QueryEpcJobs queries the "epc_jobs" edge of the Partner entity.
func (pa *Partner) QueryEpcJobs() *JobQuery {
	return NewPartnerClient(pa.config).QueryEpcJobs(pa)
}

// QueryJobRequests queries the "job_requests" edge of the Partner entity.
func (pa *Partner) QueryJobRequests() *JobQuery {
	return NewPartnerClient(pa.config).QueryJobRequests(pa)
}

// QueryActivities queries the "activities" edge of the Partner entity.
func (pa *Partner) QueryActivities() *PartnerActivityQuery {
	return NewPartnerClient(pa.config).QueryActivities(pa)
}

// QueryJobAssignmentHistory queries the "job_assignment_history" edge of the Partner entity.
func (pa *Partner) QueryJobAssignmentHistory() *JobAssignmentHistoryQuery {
	return NewPartnerClient(pa.config).QueryJobAssignmentHistory(pa)
}

// QueryRequestedInstallationJobs queries the "requested_installation_jobs" edge of the Partner entity.
func (pa *Partner) QueryRequestedInstallationJobs() *InstallationJobQuery {
	return NewPartnerClient(pa.config).QueryRequestedInstallationJobs(pa)
}

// QueryAssignedInstallationJobs queries the "assigned_installation_jobs" edge of the Partner entity.
func (pa *Partner) QueryAssignedInstallationJobs() *InstallationJobQuery {
	return NewPartnerClient(pa.config).QueryAssignedInstallationJobs(pa)
}

// QueryContacts queries the "contacts" edge of the Partner entity.
func (pa *Partner) QueryContacts() *UserQuery {
	return NewPartnerClient(pa.config).QueryContacts(pa)
}

// QueryCreator queries the "creator" edge of the Partner entity.
func (pa *Partner) QueryCreator() *UserQuery {
	return NewPartnerClient(pa.config).QueryCreator(pa)
}

// QueryCreatorAPI queries the "creator_api" edge of the Partner entity.
func (pa *Partner) QueryCreatorAPI() *ApiUserQuery {
	return NewPartnerClient(pa.config).QueryCreatorAPI(pa)
}

// QueryServices queries the "services" edge of the Partner entity.
func (pa *Partner) QueryServices() *PartnerServiceQuery {
	return NewPartnerClient(pa.config).QueryServices(pa)
}

// QueryServiceStates queries the "service_states" edge of the Partner entity.
func (pa *Partner) QueryServiceStates() *PartnerServiceStateQuery {
	return NewPartnerClient(pa.config).QueryServiceStates(pa)
}

// QueryServiceCities queries the "service_cities" edge of the Partner entity.
func (pa *Partner) QueryServiceCities() *PartnerServiceCityQuery {
	return NewPartnerClient(pa.config).QueryServiceCities(pa)
}

// QueryTrainingVideos queries the "training_videos" edge of the Partner entity.
func (pa *Partner) QueryTrainingVideos() *PartnerTrainingVideoQuery {
	return NewPartnerClient(pa.config).QueryTrainingVideos(pa)
}

// QueryContactUsRequests queries the "contact_us_requests" edge of the Partner entity.
func (pa *Partner) QueryContactUsRequests() *ContactUsQuery {
	return NewPartnerClient(pa.config).QueryContactUsRequests(pa)
}

// QuerySurveys queries the "surveys" edge of the Partner entity.
func (pa *Partner) QuerySurveys() *SurveyQuery {
	return NewPartnerClient(pa.config).QuerySurveys(pa)
}

// QuerySessions queries the "sessions" edge of the Partner entity.
func (pa *Partner) QuerySessions() *UserSessionQuery {
	return NewPartnerClient(pa.config).QuerySessions(pa)
}

// QueryJobNotes queries the "job_notes" edge of the Partner entity.
func (pa *Partner) QueryJobNotes() *JobNoteQuery {
	return NewPartnerClient(pa.config).QueryJobNotes(pa)
}

// QueryChannels queries the "channels" edge of the Partner entity.
func (pa *Partner) QueryChannels() *ChannelSubQuery {
	return NewPartnerClient(pa.config).QueryChannels(pa)
}

// QueryFinanceOptions queries the "finance_options" edge of the Partner entity.
func (pa *Partner) QueryFinanceOptions() *OptionListQuery {
	return NewPartnerClient(pa.config).QueryFinanceOptions(pa)
}

// QueryEpcOptions queries the "epc_options" edge of the Partner entity.
func (pa *Partner) QueryEpcOptions() *OptionListQuery {
	return NewPartnerClient(pa.config).QueryEpcOptions(pa)
}

// QueryPartnerContacts queries the "partner_contacts" edge of the Partner entity.
func (pa *Partner) QueryPartnerContacts() *PartnerContactQuery {
	return NewPartnerClient(pa.config).QueryPartnerContacts(pa)
}

// Update returns a builder for updating this Partner.
// Note that you need to call Partner.Unwrap() before calling this method if this Partner
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Partner) Update() *PartnerUpdateOne {
	return NewPartnerClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Partner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Partner) Unwrap() *Partner {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Partner is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Partner) String() string {
	var builder strings.Builder
	builder.WriteString("Partner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(pa.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(pa.CreatorID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pa.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(pa.Address)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(pa.Website)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pa.Phone)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", pa.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", pa.Longitude))
	builder.WriteString(", ")
	builder.WriteString("is_nation_wide=")
	builder.WriteString(fmt.Sprintf("%v", pa.IsNationWide))
	builder.WriteString(", ")
	builder.WriteString("crew_count=")
	builder.WriteString(fmt.Sprintf("%v", pa.CrewCount))
	builder.WriteString(", ")
	if v := pa.YearsInBusiness; v != nil {
		builder.WriteString("years_in_business=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("job_capacity=")
	builder.WriteString(fmt.Sprintf("%v", pa.JobCapacity))
	builder.WriteString(", ")
	builder.WriteString("asphalt_lead_t=")
	builder.WriteString(pa.AsphaltLeadT)
	builder.WriteString(", ")
	builder.WriteString("metal_lead_t=")
	builder.WriteString(pa.MetalLeadT)
	builder.WriteString(", ")
	builder.WriteString("tile_lead_t=")
	builder.WriteString(pa.TileLeadT)
	builder.WriteString(", ")
	builder.WriteString("setup_steps_completed=")
	builder.WriteString(fmt.Sprintf("%v", pa.SetupStepsCompleted))
	builder.WriteString(", ")
	if v := pa.SalesVolume; v != nil {
		builder.WriteString("sales_volume=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pa.DownPayment; v != nil {
		builder.WriteString("down_payment=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pa.Pif; v != nil {
		builder.WriteString("pif=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pa.InstallInHouse; v != nil {
		builder.WriteString("install_in_house=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("epc_status=")
	builder.WriteString(fmt.Sprintf("%v", pa.EpcStatus))
	builder.WriteString(", ")
	builder.WriteString("mobile_app_settings=")
	builder.WriteString(fmt.Sprintf("%v", pa.MobileAppSettings))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRequestedEstimates returns the RequestedEstimates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedRequestedEstimates(name string) ([]*Estimate, error) {
	if pa.Edges.namedRequestedEstimates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedRequestedEstimates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedRequestedEstimates(name string, edges ...*Estimate) {
	if pa.Edges.namedRequestedEstimates == nil {
		pa.Edges.namedRequestedEstimates = make(map[string][]*Estimate)
	}
	if len(edges) == 0 {
		pa.Edges.namedRequestedEstimates[name] = []*Estimate{}
	} else {
		pa.Edges.namedRequestedEstimates[name] = append(pa.Edges.namedRequestedEstimates[name], edges...)
	}
}

// NamedEstimateHomeOwners returns the EstimateHomeOwners named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedEstimateHomeOwners(name string) ([]*HomeOwner, error) {
	if pa.Edges.namedEstimateHomeOwners == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedEstimateHomeOwners[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedEstimateHomeOwners(name string, edges ...*HomeOwner) {
	if pa.Edges.namedEstimateHomeOwners == nil {
		pa.Edges.namedEstimateHomeOwners = make(map[string][]*HomeOwner)
	}
	if len(edges) == 0 {
		pa.Edges.namedEstimateHomeOwners[name] = []*HomeOwner{}
	} else {
		pa.Edges.namedEstimateHomeOwners[name] = append(pa.Edges.namedEstimateHomeOwners[name], edges...)
	}
}

// NamedRoofingJobs returns the RoofingJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedRoofingJobs(name string) ([]*Job, error) {
	if pa.Edges.namedRoofingJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedRoofingJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedRoofingJobs(name string, edges ...*Job) {
	if pa.Edges.namedRoofingJobs == nil {
		pa.Edges.namedRoofingJobs = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		pa.Edges.namedRoofingJobs[name] = []*Job{}
	} else {
		pa.Edges.namedRoofingJobs[name] = append(pa.Edges.namedRoofingJobs[name], edges...)
	}
}

// NamedIntegrationJobs returns the IntegrationJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedIntegrationJobs(name string) ([]*Job, error) {
	if pa.Edges.namedIntegrationJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedIntegrationJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedIntegrationJobs(name string, edges ...*Job) {
	if pa.Edges.namedIntegrationJobs == nil {
		pa.Edges.namedIntegrationJobs = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		pa.Edges.namedIntegrationJobs[name] = []*Job{}
	} else {
		pa.Edges.namedIntegrationJobs[name] = append(pa.Edges.namedIntegrationJobs[name], edges...)
	}
}

// NamedEpcJobs returns the EpcJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedEpcJobs(name string) ([]*Job, error) {
	if pa.Edges.namedEpcJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedEpcJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedEpcJobs(name string, edges ...*Job) {
	if pa.Edges.namedEpcJobs == nil {
		pa.Edges.namedEpcJobs = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		pa.Edges.namedEpcJobs[name] = []*Job{}
	} else {
		pa.Edges.namedEpcJobs[name] = append(pa.Edges.namedEpcJobs[name], edges...)
	}
}

// NamedJobRequests returns the JobRequests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedJobRequests(name string) ([]*Job, error) {
	if pa.Edges.namedJobRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedJobRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedJobRequests(name string, edges ...*Job) {
	if pa.Edges.namedJobRequests == nil {
		pa.Edges.namedJobRequests = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		pa.Edges.namedJobRequests[name] = []*Job{}
	} else {
		pa.Edges.namedJobRequests[name] = append(pa.Edges.namedJobRequests[name], edges...)
	}
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedActivities(name string) ([]*PartnerActivity, error) {
	if pa.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedActivities(name string, edges ...*PartnerActivity) {
	if pa.Edges.namedActivities == nil {
		pa.Edges.namedActivities = make(map[string][]*PartnerActivity)
	}
	if len(edges) == 0 {
		pa.Edges.namedActivities[name] = []*PartnerActivity{}
	} else {
		pa.Edges.namedActivities[name] = append(pa.Edges.namedActivities[name], edges...)
	}
}

// NamedJobAssignmentHistory returns the JobAssignmentHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedJobAssignmentHistory(name string) ([]*JobAssignmentHistory, error) {
	if pa.Edges.namedJobAssignmentHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedJobAssignmentHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedJobAssignmentHistory(name string, edges ...*JobAssignmentHistory) {
	if pa.Edges.namedJobAssignmentHistory == nil {
		pa.Edges.namedJobAssignmentHistory = make(map[string][]*JobAssignmentHistory)
	}
	if len(edges) == 0 {
		pa.Edges.namedJobAssignmentHistory[name] = []*JobAssignmentHistory{}
	} else {
		pa.Edges.namedJobAssignmentHistory[name] = append(pa.Edges.namedJobAssignmentHistory[name], edges...)
	}
}

// NamedRequestedInstallationJobs returns the RequestedInstallationJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedRequestedInstallationJobs(name string) ([]*InstallationJob, error) {
	if pa.Edges.namedRequestedInstallationJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedRequestedInstallationJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedRequestedInstallationJobs(name string, edges ...*InstallationJob) {
	if pa.Edges.namedRequestedInstallationJobs == nil {
		pa.Edges.namedRequestedInstallationJobs = make(map[string][]*InstallationJob)
	}
	if len(edges) == 0 {
		pa.Edges.namedRequestedInstallationJobs[name] = []*InstallationJob{}
	} else {
		pa.Edges.namedRequestedInstallationJobs[name] = append(pa.Edges.namedRequestedInstallationJobs[name], edges...)
	}
}

// NamedAssignedInstallationJobs returns the AssignedInstallationJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedAssignedInstallationJobs(name string) ([]*InstallationJob, error) {
	if pa.Edges.namedAssignedInstallationJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedAssignedInstallationJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedAssignedInstallationJobs(name string, edges ...*InstallationJob) {
	if pa.Edges.namedAssignedInstallationJobs == nil {
		pa.Edges.namedAssignedInstallationJobs = make(map[string][]*InstallationJob)
	}
	if len(edges) == 0 {
		pa.Edges.namedAssignedInstallationJobs[name] = []*InstallationJob{}
	} else {
		pa.Edges.namedAssignedInstallationJobs[name] = append(pa.Edges.namedAssignedInstallationJobs[name], edges...)
	}
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedContacts(name string) ([]*User, error) {
	if pa.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedContacts(name string, edges ...*User) {
	if pa.Edges.namedContacts == nil {
		pa.Edges.namedContacts = make(map[string][]*User)
	}
	if len(edges) == 0 {
		pa.Edges.namedContacts[name] = []*User{}
	} else {
		pa.Edges.namedContacts[name] = append(pa.Edges.namedContacts[name], edges...)
	}
}

// NamedServices returns the Services named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedServices(name string) ([]*PartnerService, error) {
	if pa.Edges.namedServices == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedServices[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedServices(name string, edges ...*PartnerService) {
	if pa.Edges.namedServices == nil {
		pa.Edges.namedServices = make(map[string][]*PartnerService)
	}
	if len(edges) == 0 {
		pa.Edges.namedServices[name] = []*PartnerService{}
	} else {
		pa.Edges.namedServices[name] = append(pa.Edges.namedServices[name], edges...)
	}
}

// NamedServiceStates returns the ServiceStates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedServiceStates(name string) ([]*PartnerServiceState, error) {
	if pa.Edges.namedServiceStates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedServiceStates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedServiceStates(name string, edges ...*PartnerServiceState) {
	if pa.Edges.namedServiceStates == nil {
		pa.Edges.namedServiceStates = make(map[string][]*PartnerServiceState)
	}
	if len(edges) == 0 {
		pa.Edges.namedServiceStates[name] = []*PartnerServiceState{}
	} else {
		pa.Edges.namedServiceStates[name] = append(pa.Edges.namedServiceStates[name], edges...)
	}
}

// NamedServiceCities returns the ServiceCities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedServiceCities(name string) ([]*PartnerServiceCity, error) {
	if pa.Edges.namedServiceCities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedServiceCities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedServiceCities(name string, edges ...*PartnerServiceCity) {
	if pa.Edges.namedServiceCities == nil {
		pa.Edges.namedServiceCities = make(map[string][]*PartnerServiceCity)
	}
	if len(edges) == 0 {
		pa.Edges.namedServiceCities[name] = []*PartnerServiceCity{}
	} else {
		pa.Edges.namedServiceCities[name] = append(pa.Edges.namedServiceCities[name], edges...)
	}
}

// NamedTrainingVideos returns the TrainingVideos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedTrainingVideos(name string) ([]*PartnerTrainingVideo, error) {
	if pa.Edges.namedTrainingVideos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedTrainingVideos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedTrainingVideos(name string, edges ...*PartnerTrainingVideo) {
	if pa.Edges.namedTrainingVideos == nil {
		pa.Edges.namedTrainingVideos = make(map[string][]*PartnerTrainingVideo)
	}
	if len(edges) == 0 {
		pa.Edges.namedTrainingVideos[name] = []*PartnerTrainingVideo{}
	} else {
		pa.Edges.namedTrainingVideos[name] = append(pa.Edges.namedTrainingVideos[name], edges...)
	}
}

// NamedContactUsRequests returns the ContactUsRequests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedContactUsRequests(name string) ([]*ContactUs, error) {
	if pa.Edges.namedContactUsRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedContactUsRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedContactUsRequests(name string, edges ...*ContactUs) {
	if pa.Edges.namedContactUsRequests == nil {
		pa.Edges.namedContactUsRequests = make(map[string][]*ContactUs)
	}
	if len(edges) == 0 {
		pa.Edges.namedContactUsRequests[name] = []*ContactUs{}
	} else {
		pa.Edges.namedContactUsRequests[name] = append(pa.Edges.namedContactUsRequests[name], edges...)
	}
}

// NamedSurveys returns the Surveys named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedSurveys(name string) ([]*Survey, error) {
	if pa.Edges.namedSurveys == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedSurveys[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedSurveys(name string, edges ...*Survey) {
	if pa.Edges.namedSurveys == nil {
		pa.Edges.namedSurveys = make(map[string][]*Survey)
	}
	if len(edges) == 0 {
		pa.Edges.namedSurveys[name] = []*Survey{}
	} else {
		pa.Edges.namedSurveys[name] = append(pa.Edges.namedSurveys[name], edges...)
	}
}

// NamedSessions returns the Sessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedSessions(name string) ([]*UserSession, error) {
	if pa.Edges.namedSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedSessions(name string, edges ...*UserSession) {
	if pa.Edges.namedSessions == nil {
		pa.Edges.namedSessions = make(map[string][]*UserSession)
	}
	if len(edges) == 0 {
		pa.Edges.namedSessions[name] = []*UserSession{}
	} else {
		pa.Edges.namedSessions[name] = append(pa.Edges.namedSessions[name], edges...)
	}
}

// NamedJobNotes returns the JobNotes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedJobNotes(name string) ([]*JobNote, error) {
	if pa.Edges.namedJobNotes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedJobNotes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedJobNotes(name string, edges ...*JobNote) {
	if pa.Edges.namedJobNotes == nil {
		pa.Edges.namedJobNotes = make(map[string][]*JobNote)
	}
	if len(edges) == 0 {
		pa.Edges.namedJobNotes[name] = []*JobNote{}
	} else {
		pa.Edges.namedJobNotes[name] = append(pa.Edges.namedJobNotes[name], edges...)
	}
}

// NamedChannels returns the Channels named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedChannels(name string) ([]*ChannelSub, error) {
	if pa.Edges.namedChannels == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedChannels[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedChannels(name string, edges ...*ChannelSub) {
	if pa.Edges.namedChannels == nil {
		pa.Edges.namedChannels = make(map[string][]*ChannelSub)
	}
	if len(edges) == 0 {
		pa.Edges.namedChannels[name] = []*ChannelSub{}
	} else {
		pa.Edges.namedChannels[name] = append(pa.Edges.namedChannels[name], edges...)
	}
}

// NamedFinanceOptions returns the FinanceOptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedFinanceOptions(name string) ([]*OptionList, error) {
	if pa.Edges.namedFinanceOptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedFinanceOptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedFinanceOptions(name string, edges ...*OptionList) {
	if pa.Edges.namedFinanceOptions == nil {
		pa.Edges.namedFinanceOptions = make(map[string][]*OptionList)
	}
	if len(edges) == 0 {
		pa.Edges.namedFinanceOptions[name] = []*OptionList{}
	} else {
		pa.Edges.namedFinanceOptions[name] = append(pa.Edges.namedFinanceOptions[name], edges...)
	}
}

// NamedEpcOptions returns the EpcOptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedEpcOptions(name string) ([]*OptionList, error) {
	if pa.Edges.namedEpcOptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedEpcOptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedEpcOptions(name string, edges ...*OptionList) {
	if pa.Edges.namedEpcOptions == nil {
		pa.Edges.namedEpcOptions = make(map[string][]*OptionList)
	}
	if len(edges) == 0 {
		pa.Edges.namedEpcOptions[name] = []*OptionList{}
	} else {
		pa.Edges.namedEpcOptions[name] = append(pa.Edges.namedEpcOptions[name], edges...)
	}
}

// NamedPartnerContacts returns the PartnerContacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Partner) NamedPartnerContacts(name string) ([]*PartnerContact, error) {
	if pa.Edges.namedPartnerContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedPartnerContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Partner) appendNamedPartnerContacts(name string, edges ...*PartnerContact) {
	if pa.Edges.namedPartnerContacts == nil {
		pa.Edges.namedPartnerContacts = make(map[string][]*PartnerContact)
	}
	if len(edges) == 0 {
		pa.Edges.namedPartnerContacts[name] = []*PartnerContact{}
	} else {
		pa.Edges.namedPartnerContacts[name] = append(pa.Edges.namedPartnerContacts[name], edges...)
	}
}

// Partners is a parsable slice of Partner.
type Partners []*Partner

// Code generated by ent, DO NOT EDIT.

package installationjobitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the installationjobitem type in the database.
	Label = "installation_job_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldImgKey holds the string denoting the img_key field in the database.
	FieldImgKey = "img_key"
	// FieldSpecialNote holds the string denoting the special_note field in the database.
	FieldSpecialNote = "special_note"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// Table holds the table name of the installationjobitem in the database.
	Table = "installation_job_items"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "installation_job_items"
	// JobInverseTable is the table name for the InstallationJob entity.
	// It exists in this package in order to avoid circular dependency with the "installationjob" package.
	JobInverseTable = "installation_jobs"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_id"
)

// Columns holds all SQL columns for installationjobitem fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldFeatures,
	FieldPrice,
	FieldImgKey,
	FieldSpecialNote,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "installation_job_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultFeatures holds the default value on creation for the "features" field.
	DefaultFeatures []string
	// SpecialNoteValidator is a validator for the "special_note" field. It is called by the builders before save.
	SpecialNoteValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the InstallationJobItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByImgKey orders the results by the img_key field.
func ByImgKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgKey, opts...).ToFunc()
}

// BySpecialNote orders the results by the special_note field.
func BySpecialNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecialNote, opts...).ToFunc()
}

// ByJobField orders the results by job field.
func ByJobField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobStep(), sql.OrderByField(field, opts...))
	}
}
func newJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
	)
}

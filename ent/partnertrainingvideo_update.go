// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnertrainingvideo"
	"roofix/ent/predicate"
	"roofix/ent/trainingvideo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerTrainingVideoUpdate is the builder for updating PartnerTrainingVideo entities.
type PartnerTrainingVideoUpdate struct {
	config
	hooks     []Hook
	mutation  *PartnerTrainingVideoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartnerTrainingVideoUpdate builder.
func (ptvu *PartnerTrainingVideoUpdate) Where(ps ...predicate.PartnerTrainingVideo) *PartnerTrainingVideoUpdate {
	ptvu.mutation.Where(ps...)
	return ptvu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptvu *PartnerTrainingVideoUpdate) SetUpdatedAt(t time.Time) *PartnerTrainingVideoUpdate {
	ptvu.mutation.SetUpdatedAt(t)
	return ptvu
}

// SetEnabled sets the "enabled" field.
func (ptvu *PartnerTrainingVideoUpdate) SetEnabled(b bool) *PartnerTrainingVideoUpdate {
	ptvu.mutation.SetEnabled(b)
	return ptvu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ptvu *PartnerTrainingVideoUpdate) SetNillableEnabled(b *bool) *PartnerTrainingVideoUpdate {
	if b != nil {
		ptvu.SetEnabled(*b)
	}
	return ptvu
}

// SetVideoID sets the "video" edge to the TrainingVideo entity by ID.
func (ptvu *PartnerTrainingVideoUpdate) SetVideoID(id string) *PartnerTrainingVideoUpdate {
	ptvu.mutation.SetVideoID(id)
	return ptvu
}

// SetVideo sets the "video" edge to the TrainingVideo entity.
func (ptvu *PartnerTrainingVideoUpdate) SetVideo(t *TrainingVideo) *PartnerTrainingVideoUpdate {
	return ptvu.SetVideoID(t.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (ptvu *PartnerTrainingVideoUpdate) SetPartnerID(id string) *PartnerTrainingVideoUpdate {
	ptvu.mutation.SetPartnerID(id)
	return ptvu
}

// SetPartner sets the "partner" edge to the Partner entity.
func (ptvu *PartnerTrainingVideoUpdate) SetPartner(p *Partner) *PartnerTrainingVideoUpdate {
	return ptvu.SetPartnerID(p.ID)
}

// Mutation returns the PartnerTrainingVideoMutation object of the builder.
func (ptvu *PartnerTrainingVideoUpdate) Mutation() *PartnerTrainingVideoMutation {
	return ptvu.mutation
}

// ClearVideo clears the "video" edge to the TrainingVideo entity.
func (ptvu *PartnerTrainingVideoUpdate) ClearVideo() *PartnerTrainingVideoUpdate {
	ptvu.mutation.ClearVideo()
	return ptvu
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (ptvu *PartnerTrainingVideoUpdate) ClearPartner() *PartnerTrainingVideoUpdate {
	ptvu.mutation.ClearPartner()
	return ptvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptvu *PartnerTrainingVideoUpdate) Save(ctx context.Context) (int, error) {
	ptvu.defaults()
	return withHooks(ctx, ptvu.sqlSave, ptvu.mutation, ptvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptvu *PartnerTrainingVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := ptvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptvu *PartnerTrainingVideoUpdate) Exec(ctx context.Context) error {
	_, err := ptvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptvu *PartnerTrainingVideoUpdate) ExecX(ctx context.Context) {
	if err := ptvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptvu *PartnerTrainingVideoUpdate) defaults() {
	if _, ok := ptvu.mutation.UpdatedAt(); !ok {
		v := partnertrainingvideo.UpdateDefaultUpdatedAt()
		ptvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptvu *PartnerTrainingVideoUpdate) check() error {
	if _, ok := ptvu.mutation.VideoID(); ptvu.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerTrainingVideo.video"`)
	}
	if _, ok := ptvu.mutation.PartnerID(); ptvu.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerTrainingVideo.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptvu *PartnerTrainingVideoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerTrainingVideoUpdate {
	ptvu.modifiers = append(ptvu.modifiers, modifiers...)
	return ptvu
}

func (ptvu *PartnerTrainingVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnertrainingvideo.Table, partnertrainingvideo.Columns, sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString))
	if ps := ptvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptvu.mutation.UpdatedAt(); ok {
		_spec.SetField(partnertrainingvideo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptvu.mutation.Enabled(); ok {
		_spec.SetField(partnertrainingvideo.FieldEnabled, field.TypeBool, value)
	}
	if ptvu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.VideoTable,
			Columns: []string{partnertrainingvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptvu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.VideoTable,
			Columns: []string{partnertrainingvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptvu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.PartnerTable,
			Columns: []string{partnertrainingvideo.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptvu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.PartnerTable,
			Columns: []string{partnertrainingvideo.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptvu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnertrainingvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptvu.mutation.done = true
	return n, nil
}

// PartnerTrainingVideoUpdateOne is the builder for updating a single PartnerTrainingVideo entity.
type PartnerTrainingVideoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartnerTrainingVideoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetUpdatedAt(t time.Time) *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.SetUpdatedAt(t)
	return ptvuo
}

// SetEnabled sets the "enabled" field.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetEnabled(b bool) *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.SetEnabled(b)
	return ptvuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetNillableEnabled(b *bool) *PartnerTrainingVideoUpdateOne {
	if b != nil {
		ptvuo.SetEnabled(*b)
	}
	return ptvuo
}

// SetVideoID sets the "video" edge to the TrainingVideo entity by ID.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetVideoID(id string) *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.SetVideoID(id)
	return ptvuo
}

// SetVideo sets the "video" edge to the TrainingVideo entity.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetVideo(t *TrainingVideo) *PartnerTrainingVideoUpdateOne {
	return ptvuo.SetVideoID(t.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetPartnerID(id string) *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.SetPartnerID(id)
	return ptvuo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (ptvuo *PartnerTrainingVideoUpdateOne) SetPartner(p *Partner) *PartnerTrainingVideoUpdateOne {
	return ptvuo.SetPartnerID(p.ID)
}

// Mutation returns the PartnerTrainingVideoMutation object of the builder.
func (ptvuo *PartnerTrainingVideoUpdateOne) Mutation() *PartnerTrainingVideoMutation {
	return ptvuo.mutation
}

// ClearVideo clears the "video" edge to the TrainingVideo entity.
func (ptvuo *PartnerTrainingVideoUpdateOne) ClearVideo() *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.ClearVideo()
	return ptvuo
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (ptvuo *PartnerTrainingVideoUpdateOne) ClearPartner() *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.ClearPartner()
	return ptvuo
}

// Where appends a list predicates to the PartnerTrainingVideoUpdate builder.
func (ptvuo *PartnerTrainingVideoUpdateOne) Where(ps ...predicate.PartnerTrainingVideo) *PartnerTrainingVideoUpdateOne {
	ptvuo.mutation.Where(ps...)
	return ptvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptvuo *PartnerTrainingVideoUpdateOne) Select(field string, fields ...string) *PartnerTrainingVideoUpdateOne {
	ptvuo.fields = append([]string{field}, fields...)
	return ptvuo
}

// Save executes the query and returns the updated PartnerTrainingVideo entity.
func (ptvuo *PartnerTrainingVideoUpdateOne) Save(ctx context.Context) (*PartnerTrainingVideo, error) {
	ptvuo.defaults()
	return withHooks(ctx, ptvuo.sqlSave, ptvuo.mutation, ptvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptvuo *PartnerTrainingVideoUpdateOne) SaveX(ctx context.Context) *PartnerTrainingVideo {
	node, err := ptvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptvuo *PartnerTrainingVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := ptvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptvuo *PartnerTrainingVideoUpdateOne) ExecX(ctx context.Context) {
	if err := ptvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptvuo *PartnerTrainingVideoUpdateOne) defaults() {
	if _, ok := ptvuo.mutation.UpdatedAt(); !ok {
		v := partnertrainingvideo.UpdateDefaultUpdatedAt()
		ptvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptvuo *PartnerTrainingVideoUpdateOne) check() error {
	if _, ok := ptvuo.mutation.VideoID(); ptvuo.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerTrainingVideo.video"`)
	}
	if _, ok := ptvuo.mutation.PartnerID(); ptvuo.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerTrainingVideo.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptvuo *PartnerTrainingVideoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerTrainingVideoUpdateOne {
	ptvuo.modifiers = append(ptvuo.modifiers, modifiers...)
	return ptvuo
}

func (ptvuo *PartnerTrainingVideoUpdateOne) sqlSave(ctx context.Context) (_node *PartnerTrainingVideo, err error) {
	if err := ptvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnertrainingvideo.Table, partnertrainingvideo.Columns, sqlgraph.NewFieldSpec(partnertrainingvideo.FieldID, field.TypeString))
	id, ok := ptvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnerTrainingVideo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnertrainingvideo.FieldID)
		for _, f := range fields {
			if !partnertrainingvideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnertrainingvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(partnertrainingvideo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptvuo.mutation.Enabled(); ok {
		_spec.SetField(partnertrainingvideo.FieldEnabled, field.TypeBool, value)
	}
	if ptvuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.VideoTable,
			Columns: []string{partnertrainingvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptvuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.VideoTable,
			Columns: []string{partnertrainingvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptvuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.PartnerTable,
			Columns: []string{partnertrainingvideo.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptvuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnertrainingvideo.PartnerTable,
			Columns: []string{partnertrainingvideo.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptvuo.modifiers...)
	_node = &PartnerTrainingVideo{config: ptvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnertrainingvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptvuo.mutation.done = true
	return _node, nil
}

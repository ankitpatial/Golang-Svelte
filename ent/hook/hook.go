// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"roofix/ent"
)

// The ApiAccessFunc type is an adapter to allow the use of ordinary
// function as ApiAccess mutator.
type ApiAccessFunc func(context.Context, *ent.ApiAccessMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ApiAccessFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ApiAccessMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ApiAccessMutation", m)
}

// The ApiUserFunc type is an adapter to allow the use of ordinary
// function as ApiUser mutator.
type ApiUserFunc func(context.Context, *ent.ApiUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ApiUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ApiUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ApiUserMutation", m)
}

// The ApiUserTokenFunc type is an adapter to allow the use of ordinary
// function as ApiUserToken mutator.
type ApiUserTokenFunc func(context.Context, *ent.ApiUserTokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ApiUserTokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ApiUserTokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ApiUserTokenMutation", m)
}

// The AuditLogFunc type is an adapter to allow the use of ordinary
// function as AuditLog mutator.
type AuditLogFunc func(context.Context, *ent.AuditLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuditLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AuditLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuditLogMutation", m)
}

// The ChannelFunc type is an adapter to allow the use of ordinary
// function as Channel mutator.
type ChannelFunc func(context.Context, *ent.ChannelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ChannelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ChannelMutation", m)
}

// The ChannelMessageFunc type is an adapter to allow the use of ordinary
// function as ChannelMessage mutator.
type ChannelMessageFunc func(context.Context, *ent.ChannelMessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelMessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ChannelMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ChannelMessageMutation", m)
}

// The ChannelMessageReadFunc type is an adapter to allow the use of ordinary
// function as ChannelMessageRead mutator.
type ChannelMessageReadFunc func(context.Context, *ent.ChannelMessageReadMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelMessageReadFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ChannelMessageReadMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ChannelMessageReadMutation", m)
}

// The ChannelSubFunc type is an adapter to allow the use of ordinary
// function as ChannelSub mutator.
type ChannelSubFunc func(context.Context, *ent.ChannelSubMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelSubFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ChannelSubMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ChannelSubMutation", m)
}

// The ContactUsFunc type is an adapter to allow the use of ordinary
// function as ContactUs mutator.
type ContactUsFunc func(context.Context, *ent.ContactUsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContactUsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ContactUsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContactUsMutation", m)
}

// The DocumentFunc type is an adapter to allow the use of ordinary
// function as Document mutator.
type DocumentFunc func(context.Context, *ent.DocumentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DocumentMutation", m)
}

// The EstimateFunc type is an adapter to allow the use of ordinary
// function as Estimate mutator.
type EstimateFunc func(context.Context, *ent.EstimateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EstimateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EstimateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EstimateMutation", m)
}

// The EstimateActivityFunc type is an adapter to allow the use of ordinary
// function as EstimateActivity mutator.
type EstimateActivityFunc func(context.Context, *ent.EstimateActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EstimateActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EstimateActivityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EstimateActivityMutation", m)
}

// The HomeOwnerFunc type is an adapter to allow the use of ordinary
// function as HomeOwner mutator.
type HomeOwnerFunc func(context.Context, *ent.HomeOwnerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HomeOwnerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HomeOwnerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HomeOwnerMutation", m)
}

// The InstallationJobFunc type is an adapter to allow the use of ordinary
// function as InstallationJob mutator.
type InstallationJobFunc func(context.Context, *ent.InstallationJobMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InstallationJobFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InstallationJobMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InstallationJobMutation", m)
}

// The InstallationJobItemFunc type is an adapter to allow the use of ordinary
// function as InstallationJobItem mutator.
type InstallationJobItemFunc func(context.Context, *ent.InstallationJobItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InstallationJobItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InstallationJobItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InstallationJobItemMutation", m)
}

// The InstallationJobProgressFunc type is an adapter to allow the use of ordinary
// function as InstallationJobProgress mutator.
type InstallationJobProgressFunc func(context.Context, *ent.InstallationJobProgressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InstallationJobProgressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InstallationJobProgressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InstallationJobProgressMutation", m)
}

// The JobFunc type is an adapter to allow the use of ordinary
// function as Job mutator.
type JobFunc func(context.Context, *ent.JobMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobMutation", m)
}

// The JobActivityFunc type is an adapter to allow the use of ordinary
// function as JobActivity mutator.
type JobActivityFunc func(context.Context, *ent.JobActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobActivityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobActivityMutation", m)
}

// The JobAssignmentHistoryFunc type is an adapter to allow the use of ordinary
// function as JobAssignmentHistory mutator.
type JobAssignmentHistoryFunc func(context.Context, *ent.JobAssignmentHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobAssignmentHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobAssignmentHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobAssignmentHistoryMutation", m)
}

// The JobDocURLFunc type is an adapter to allow the use of ordinary
// function as JobDocURL mutator.
type JobDocURLFunc func(context.Context, *ent.JobDocURLMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobDocURLFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobDocURLMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobDocURLMutation", m)
}

// The JobNoteFunc type is an adapter to allow the use of ordinary
// function as JobNote mutator.
type JobNoteFunc func(context.Context, *ent.JobNoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobNoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobNoteMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobNoteMutation", m)
}

// The JobProgressHistoryFunc type is an adapter to allow the use of ordinary
// function as JobProgressHistory mutator.
type JobProgressHistoryFunc func(context.Context, *ent.JobProgressHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobProgressHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobProgressHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobProgressHistoryMutation", m)
}

// The NotifySettingFunc type is an adapter to allow the use of ordinary
// function as NotifySetting mutator.
type NotifySettingFunc func(context.Context, *ent.NotifySettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NotifySettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.NotifySettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NotifySettingMutation", m)
}

// The OptionListFunc type is an adapter to allow the use of ordinary
// function as OptionList mutator.
type OptionListFunc func(context.Context, *ent.OptionListMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OptionListFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OptionListMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OptionListMutation", m)
}

// The PartnerFunc type is an adapter to allow the use of ordinary
// function as Partner mutator.
type PartnerFunc func(context.Context, *ent.PartnerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerMutation", m)
}

// The PartnerActivityFunc type is an adapter to allow the use of ordinary
// function as PartnerActivity mutator.
type PartnerActivityFunc func(context.Context, *ent.PartnerActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerActivityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerActivityMutation", m)
}

// The PartnerContactFunc type is an adapter to allow the use of ordinary
// function as PartnerContact mutator.
type PartnerContactFunc func(context.Context, *ent.PartnerContactMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerContactFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerContactMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerContactMutation", m)
}

// The PartnerServiceFunc type is an adapter to allow the use of ordinary
// function as PartnerService mutator.
type PartnerServiceFunc func(context.Context, *ent.PartnerServiceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerServiceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerServiceMutation", m)
}

// The PartnerServiceCityFunc type is an adapter to allow the use of ordinary
// function as PartnerServiceCity mutator.
type PartnerServiceCityFunc func(context.Context, *ent.PartnerServiceCityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerServiceCityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerServiceCityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerServiceCityMutation", m)
}

// The PartnerServiceStateFunc type is an adapter to allow the use of ordinary
// function as PartnerServiceState mutator.
type PartnerServiceStateFunc func(context.Context, *ent.PartnerServiceStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerServiceStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerServiceStateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerServiceStateMutation", m)
}

// The PartnerTrainingVideoFunc type is an adapter to allow the use of ordinary
// function as PartnerTrainingVideo mutator.
type PartnerTrainingVideoFunc func(context.Context, *ent.PartnerTrainingVideoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerTrainingVideoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerTrainingVideoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerTrainingVideoMutation", m)
}

// The PaymentFunc type is an adapter to allow the use of ordinary
// function as Payment mutator.
type PaymentFunc func(context.Context, *ent.PaymentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PaymentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PaymentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PaymentMutation", m)
}

// The PostalCodeFunc type is an adapter to allow the use of ordinary
// function as PostalCode mutator.
type PostalCodeFunc func(context.Context, *ent.PostalCodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PostalCodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PostalCodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PostalCodeMutation", m)
}

// The PricingFunc type is an adapter to allow the use of ordinary
// function as Pricing mutator.
type PricingFunc func(context.Context, *ent.PricingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PricingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PricingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PricingMutation", m)
}

// The ProductFunc type is an adapter to allow the use of ordinary
// function as Product mutator.
type ProductFunc func(context.Context, *ent.ProductMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductMutation", m)
}

// The ProductPackageFunc type is an adapter to allow the use of ordinary
// function as ProductPackage mutator.
type ProductPackageFunc func(context.Context, *ent.ProductPackageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductPackageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductPackageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductPackageMutation", m)
}

// The SurveyFunc type is an adapter to allow the use of ordinary
// function as Survey mutator.
type SurveyFunc func(context.Context, *ent.SurveyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SurveyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyMutation", m)
}

// The SurveyProgressFunc type is an adapter to allow the use of ordinary
// function as SurveyProgress mutator.
type SurveyProgressFunc func(context.Context, *ent.SurveyProgressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyProgressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SurveyProgressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyProgressMutation", m)
}

// The TokenFunc type is an adapter to allow the use of ordinary
// function as Token mutator.
type TokenFunc func(context.Context, *ent.TokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TokenMutation", m)
}

// The TrainingCourseFunc type is an adapter to allow the use of ordinary
// function as TrainingCourse mutator.
type TrainingCourseFunc func(context.Context, *ent.TrainingCourseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TrainingCourseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TrainingCourseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TrainingCourseMutation", m)
}

// The TrainingVideoFunc type is an adapter to allow the use of ordinary
// function as TrainingVideo mutator.
type TrainingVideoFunc func(context.Context, *ent.TrainingVideoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TrainingVideoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TrainingVideoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TrainingVideoMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The UserActivityFunc type is an adapter to allow the use of ordinary
// function as UserActivity mutator.
type UserActivityFunc func(context.Context, *ent.UserActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserActivityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserActivityMutation", m)
}

// The UserAuthFunc type is an adapter to allow the use of ordinary
// function as UserAuth mutator.
type UserAuthFunc func(context.Context, *ent.UserAuthMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserAuthFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserAuthMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserAuthMutation", m)
}

// The UserSessionFunc type is an adapter to allow the use of ordinary
// function as UserSession mutator.
type UserSessionFunc func(context.Context, *ent.UserSessionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserSessionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserSessionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserSessionMutation", m)
}

// The UserSessionSocketFunc type is an adapter to allow the use of ordinary
// function as UserSessionSocket mutator.
type UserSessionSocketFunc func(context.Context, *ent.UserSessionSocketMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserSessionSocketFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserSessionSocketMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserSessionSocketMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

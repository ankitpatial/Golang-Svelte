// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/estimate"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/partner"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HomeOwnerCreate is the builder for creating a HomeOwner entity.
type HomeOwnerCreate struct {
	config
	mutation *HomeOwnerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hoc *HomeOwnerCreate) SetCreatedAt(t time.Time) *HomeOwnerCreate {
	hoc.mutation.SetCreatedAt(t)
	return hoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableCreatedAt(t *time.Time) *HomeOwnerCreate {
	if t != nil {
		hoc.SetCreatedAt(*t)
	}
	return hoc
}

// SetUpdatedAt sets the "updated_at" field.
func (hoc *HomeOwnerCreate) SetUpdatedAt(t time.Time) *HomeOwnerCreate {
	hoc.mutation.SetUpdatedAt(t)
	return hoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableUpdatedAt(t *time.Time) *HomeOwnerCreate {
	if t != nil {
		hoc.SetUpdatedAt(*t)
	}
	return hoc
}

// SetFirstName sets the "first_name" field.
func (hoc *HomeOwnerCreate) SetFirstName(s string) *HomeOwnerCreate {
	hoc.mutation.SetFirstName(s)
	return hoc
}

// SetLastName sets the "last_name" field.
func (hoc *HomeOwnerCreate) SetLastName(s string) *HomeOwnerCreate {
	hoc.mutation.SetLastName(s)
	return hoc
}

// SetEmail sets the "email" field.
func (hoc *HomeOwnerCreate) SetEmail(s string) *HomeOwnerCreate {
	hoc.mutation.SetEmail(s)
	return hoc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableEmail(s *string) *HomeOwnerCreate {
	if s != nil {
		hoc.SetEmail(*s)
	}
	return hoc
}

// SetPhone sets the "phone" field.
func (hoc *HomeOwnerCreate) SetPhone(s string) *HomeOwnerCreate {
	hoc.mutation.SetPhone(s)
	return hoc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillablePhone(s *string) *HomeOwnerCreate {
	if s != nil {
		hoc.SetPhone(*s)
	}
	return hoc
}

// SetStreetNumber sets the "street_number" field.
func (hoc *HomeOwnerCreate) SetStreetNumber(s string) *HomeOwnerCreate {
	hoc.mutation.SetStreetNumber(s)
	return hoc
}

// SetStreetName sets the "street_name" field.
func (hoc *HomeOwnerCreate) SetStreetName(s string) *HomeOwnerCreate {
	hoc.mutation.SetStreetName(s)
	return hoc
}

// SetCity sets the "city" field.
func (hoc *HomeOwnerCreate) SetCity(s string) *HomeOwnerCreate {
	hoc.mutation.SetCity(s)
	return hoc
}

// SetState sets the "state" field.
func (hoc *HomeOwnerCreate) SetState(s string) *HomeOwnerCreate {
	hoc.mutation.SetState(s)
	return hoc
}

// SetStateAbbr sets the "state_abbr" field.
func (hoc *HomeOwnerCreate) SetStateAbbr(s string) *HomeOwnerCreate {
	hoc.mutation.SetStateAbbr(s)
	return hoc
}

// SetNillableStateAbbr sets the "state_abbr" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableStateAbbr(s *string) *HomeOwnerCreate {
	if s != nil {
		hoc.SetStateAbbr(*s)
	}
	return hoc
}

// SetZip sets the "zip" field.
func (hoc *HomeOwnerCreate) SetZip(s string) *HomeOwnerCreate {
	hoc.mutation.SetZip(s)
	return hoc
}

// SetFormattedAddress sets the "formatted_address" field.
func (hoc *HomeOwnerCreate) SetFormattedAddress(s string) *HomeOwnerCreate {
	hoc.mutation.SetFormattedAddress(s)
	return hoc
}

// SetNillableFormattedAddress sets the "formatted_address" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableFormattedAddress(s *string) *HomeOwnerCreate {
	if s != nil {
		hoc.SetFormattedAddress(*s)
	}
	return hoc
}

// SetLatitude sets the "latitude" field.
func (hoc *HomeOwnerCreate) SetLatitude(f float64) *HomeOwnerCreate {
	hoc.mutation.SetLatitude(f)
	return hoc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableLatitude(f *float64) *HomeOwnerCreate {
	if f != nil {
		hoc.SetLatitude(*f)
	}
	return hoc
}

// SetLongitude sets the "longitude" field.
func (hoc *HomeOwnerCreate) SetLongitude(f float64) *HomeOwnerCreate {
	hoc.mutation.SetLongitude(f)
	return hoc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableLongitude(f *float64) *HomeOwnerCreate {
	if f != nil {
		hoc.SetLongitude(*f)
	}
	return hoc
}

// SetHash sets the "hash" field.
func (hoc *HomeOwnerCreate) SetHash(s string) *HomeOwnerCreate {
	hoc.mutation.SetHash(s)
	return hoc
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableHash(s *string) *HomeOwnerCreate {
	if s != nil {
		hoc.SetHash(*s)
	}
	return hoc
}

// SetID sets the "id" field.
func (hoc *HomeOwnerCreate) SetID(s string) *HomeOwnerCreate {
	hoc.mutation.SetID(s)
	return hoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillableID(s *string) *HomeOwnerCreate {
	if s != nil {
		hoc.SetID(*s)
	}
	return hoc
}

// AddEstimateIDs adds the "estimates" edge to the Estimate entity by IDs.
func (hoc *HomeOwnerCreate) AddEstimateIDs(ids ...string) *HomeOwnerCreate {
	hoc.mutation.AddEstimateIDs(ids...)
	return hoc
}

// AddEstimates adds the "estimates" edges to the Estimate entity.
func (hoc *HomeOwnerCreate) AddEstimates(e ...*Estimate) *HomeOwnerCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hoc.AddEstimateIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (hoc *HomeOwnerCreate) AddJobIDs(ids ...string) *HomeOwnerCreate {
	hoc.mutation.AddJobIDs(ids...)
	return hoc
}

// AddJobs adds the "jobs" edges to the Job entity.
func (hoc *HomeOwnerCreate) AddJobs(j ...*Job) *HomeOwnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return hoc.AddJobIDs(ids...)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (hoc *HomeOwnerCreate) SetPartnerID(id string) *HomeOwnerCreate {
	hoc.mutation.SetPartnerID(id)
	return hoc
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (hoc *HomeOwnerCreate) SetNillablePartnerID(id *string) *HomeOwnerCreate {
	if id != nil {
		hoc = hoc.SetPartnerID(*id)
	}
	return hoc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (hoc *HomeOwnerCreate) SetPartner(p *Partner) *HomeOwnerCreate {
	return hoc.SetPartnerID(p.ID)
}

// Mutation returns the HomeOwnerMutation object of the builder.
func (hoc *HomeOwnerCreate) Mutation() *HomeOwnerMutation {
	return hoc.mutation
}

// Save creates the HomeOwner in the database.
func (hoc *HomeOwnerCreate) Save(ctx context.Context) (*HomeOwner, error) {
	hoc.defaults()
	return withHooks(ctx, hoc.sqlSave, hoc.mutation, hoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hoc *HomeOwnerCreate) SaveX(ctx context.Context) *HomeOwner {
	v, err := hoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hoc *HomeOwnerCreate) Exec(ctx context.Context) error {
	_, err := hoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hoc *HomeOwnerCreate) ExecX(ctx context.Context) {
	if err := hoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hoc *HomeOwnerCreate) defaults() {
	if _, ok := hoc.mutation.CreatedAt(); !ok {
		v := homeowner.DefaultCreatedAt()
		hoc.mutation.SetCreatedAt(v)
	}
	if _, ok := hoc.mutation.UpdatedAt(); !ok {
		v := homeowner.DefaultUpdatedAt()
		hoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hoc.mutation.ID(); !ok {
		v := homeowner.DefaultID()
		hoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hoc *HomeOwnerCreate) check() error {
	if _, ok := hoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HomeOwner.created_at"`)}
	}
	if _, ok := hoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "HomeOwner.updated_at"`)}
	}
	if _, ok := hoc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "HomeOwner.first_name"`)}
	}
	if v, ok := hoc.mutation.FirstName(); ok {
		if err := homeowner.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.first_name": %w`, err)}
		}
	}
	if _, ok := hoc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "HomeOwner.last_name"`)}
	}
	if v, ok := hoc.mutation.LastName(); ok {
		if err := homeowner.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.last_name": %w`, err)}
		}
	}
	if v, ok := hoc.mutation.Phone(); ok {
		if err := homeowner.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.phone": %w`, err)}
		}
	}
	if _, ok := hoc.mutation.StreetNumber(); !ok {
		return &ValidationError{Name: "street_number", err: errors.New(`ent: missing required field "HomeOwner.street_number"`)}
	}
	if _, ok := hoc.mutation.StreetName(); !ok {
		return &ValidationError{Name: "street_name", err: errors.New(`ent: missing required field "HomeOwner.street_name"`)}
	}
	if _, ok := hoc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "HomeOwner.city"`)}
	}
	if v, ok := hoc.mutation.City(); ok {
		if err := homeowner.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.city": %w`, err)}
		}
	}
	if _, ok := hoc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "HomeOwner.state"`)}
	}
	if v, ok := hoc.mutation.State(); ok {
		if err := homeowner.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.state": %w`, err)}
		}
	}
	if v, ok := hoc.mutation.StateAbbr(); ok {
		if err := homeowner.StateAbbrValidator(v); err != nil {
			return &ValidationError{Name: "state_abbr", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.state_abbr": %w`, err)}
		}
	}
	if _, ok := hoc.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "HomeOwner.zip"`)}
	}
	if v, ok := hoc.mutation.Zip(); ok {
		if err := homeowner.ZipValidator(v); err != nil {
			return &ValidationError{Name: "zip", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.zip": %w`, err)}
		}
	}
	if v, ok := hoc.mutation.Hash(); ok {
		if err := homeowner.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.hash": %w`, err)}
		}
	}
	if v, ok := hoc.mutation.ID(); ok {
		if err := homeowner.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "HomeOwner.id": %w`, err)}
		}
	}
	return nil
}

func (hoc *HomeOwnerCreate) sqlSave(ctx context.Context) (*HomeOwner, error) {
	if err := hoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HomeOwner.ID type: %T", _spec.ID.Value)
		}
	}
	hoc.mutation.id = &_node.ID
	hoc.mutation.done = true
	return _node, nil
}

func (hoc *HomeOwnerCreate) createSpec() (*HomeOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &HomeOwner{config: hoc.config}
		_spec = sqlgraph.NewCreateSpec(homeowner.Table, sqlgraph.NewFieldSpec(homeowner.FieldID, field.TypeString))
	)
	_spec.OnConflict = hoc.conflict
	if id, ok := hoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hoc.mutation.CreatedAt(); ok {
		_spec.SetField(homeowner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hoc.mutation.UpdatedAt(); ok {
		_spec.SetField(homeowner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hoc.mutation.FirstName(); ok {
		_spec.SetField(homeowner.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := hoc.mutation.LastName(); ok {
		_spec.SetField(homeowner.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := hoc.mutation.Email(); ok {
		_spec.SetField(homeowner.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := hoc.mutation.Phone(); ok {
		_spec.SetField(homeowner.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := hoc.mutation.StreetNumber(); ok {
		_spec.SetField(homeowner.FieldStreetNumber, field.TypeString, value)
		_node.StreetNumber = value
	}
	if value, ok := hoc.mutation.StreetName(); ok {
		_spec.SetField(homeowner.FieldStreetName, field.TypeString, value)
		_node.StreetName = value
	}
	if value, ok := hoc.mutation.City(); ok {
		_spec.SetField(homeowner.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := hoc.mutation.State(); ok {
		_spec.SetField(homeowner.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := hoc.mutation.StateAbbr(); ok {
		_spec.SetField(homeowner.FieldStateAbbr, field.TypeString, value)
		_node.StateAbbr = value
	}
	if value, ok := hoc.mutation.Zip(); ok {
		_spec.SetField(homeowner.FieldZip, field.TypeString, value)
		_node.Zip = value
	}
	if value, ok := hoc.mutation.FormattedAddress(); ok {
		_spec.SetField(homeowner.FieldFormattedAddress, field.TypeString, value)
		_node.FormattedAddress = value
	}
	if value, ok := hoc.mutation.Latitude(); ok {
		_spec.SetField(homeowner.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := hoc.mutation.Longitude(); ok {
		_spec.SetField(homeowner.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := hoc.mutation.Hash(); ok {
		_spec.SetField(homeowner.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if nodes := hoc.mutation.EstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.EstimatesTable,
			Columns: []string{homeowner.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hoc.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   homeowner.JobsTable,
			Columns: []string{homeowner.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hoc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   homeowner.PartnerTable,
			Columns: []string{homeowner.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HomeOwner.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HomeOwnerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hoc *HomeOwnerCreate) OnConflict(opts ...sql.ConflictOption) *HomeOwnerUpsertOne {
	hoc.conflict = opts
	return &HomeOwnerUpsertOne{
		create: hoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HomeOwner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hoc *HomeOwnerCreate) OnConflictColumns(columns ...string) *HomeOwnerUpsertOne {
	hoc.conflict = append(hoc.conflict, sql.ConflictColumns(columns...))
	return &HomeOwnerUpsertOne{
		create: hoc,
	}
}

type (
	// HomeOwnerUpsertOne is the builder for "upsert"-ing
	//  one HomeOwner node.
	HomeOwnerUpsertOne struct {
		create *HomeOwnerCreate
	}

	// HomeOwnerUpsert is the "OnConflict" setter.
	HomeOwnerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HomeOwnerUpsert) SetUpdatedAt(v time.Time) *HomeOwnerUpsert {
	u.Set(homeowner.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateUpdatedAt() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldUpdatedAt)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *HomeOwnerUpsert) SetFirstName(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateFirstName() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *HomeOwnerUpsert) SetLastName(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateLastName() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldLastName)
	return u
}

// SetEmail sets the "email" field.
func (u *HomeOwnerUpsert) SetEmail(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateEmail() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *HomeOwnerUpsert) ClearEmail() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldEmail)
	return u
}

// SetPhone sets the "phone" field.
func (u *HomeOwnerUpsert) SetPhone(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdatePhone() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *HomeOwnerUpsert) ClearPhone() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldPhone)
	return u
}

// SetStreetNumber sets the "street_number" field.
func (u *HomeOwnerUpsert) SetStreetNumber(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldStreetNumber, v)
	return u
}

// UpdateStreetNumber sets the "street_number" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateStreetNumber() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldStreetNumber)
	return u
}

// SetStreetName sets the "street_name" field.
func (u *HomeOwnerUpsert) SetStreetName(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldStreetName, v)
	return u
}

// UpdateStreetName sets the "street_name" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateStreetName() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldStreetName)
	return u
}

// SetCity sets the "city" field.
func (u *HomeOwnerUpsert) SetCity(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateCity() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *HomeOwnerUpsert) SetState(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateState() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldState)
	return u
}

// SetStateAbbr sets the "state_abbr" field.
func (u *HomeOwnerUpsert) SetStateAbbr(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldStateAbbr, v)
	return u
}

// UpdateStateAbbr sets the "state_abbr" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateStateAbbr() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldStateAbbr)
	return u
}

// ClearStateAbbr clears the value of the "state_abbr" field.
func (u *HomeOwnerUpsert) ClearStateAbbr() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldStateAbbr)
	return u
}

// SetZip sets the "zip" field.
func (u *HomeOwnerUpsert) SetZip(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldZip, v)
	return u
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateZip() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldZip)
	return u
}

// SetFormattedAddress sets the "formatted_address" field.
func (u *HomeOwnerUpsert) SetFormattedAddress(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldFormattedAddress, v)
	return u
}

// UpdateFormattedAddress sets the "formatted_address" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateFormattedAddress() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldFormattedAddress)
	return u
}

// ClearFormattedAddress clears the value of the "formatted_address" field.
func (u *HomeOwnerUpsert) ClearFormattedAddress() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldFormattedAddress)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *HomeOwnerUpsert) SetLatitude(v float64) *HomeOwnerUpsert {
	u.Set(homeowner.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateLatitude() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *HomeOwnerUpsert) AddLatitude(v float64) *HomeOwnerUpsert {
	u.Add(homeowner.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *HomeOwnerUpsert) ClearLatitude() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *HomeOwnerUpsert) SetLongitude(v float64) *HomeOwnerUpsert {
	u.Set(homeowner.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateLongitude() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *HomeOwnerUpsert) AddLongitude(v float64) *HomeOwnerUpsert {
	u.Add(homeowner.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *HomeOwnerUpsert) ClearLongitude() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldLongitude)
	return u
}

// SetHash sets the "hash" field.
func (u *HomeOwnerUpsert) SetHash(v string) *HomeOwnerUpsert {
	u.Set(homeowner.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *HomeOwnerUpsert) UpdateHash() *HomeOwnerUpsert {
	u.SetExcluded(homeowner.FieldHash)
	return u
}

// ClearHash clears the value of the "hash" field.
func (u *HomeOwnerUpsert) ClearHash() *HomeOwnerUpsert {
	u.SetNull(homeowner.FieldHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HomeOwner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(homeowner.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HomeOwnerUpsertOne) UpdateNewValues() *HomeOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(homeowner.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(homeowner.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HomeOwner.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HomeOwnerUpsertOne) Ignore() *HomeOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HomeOwnerUpsertOne) DoNothing() *HomeOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HomeOwnerCreate.OnConflict
// documentation for more info.
func (u *HomeOwnerUpsertOne) Update(set func(*HomeOwnerUpsert)) *HomeOwnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HomeOwnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HomeOwnerUpsertOne) SetUpdatedAt(v time.Time) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateUpdatedAt() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFirstName sets the "first_name" field.
func (u *HomeOwnerUpsertOne) SetFirstName(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateFirstName() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *HomeOwnerUpsertOne) SetLastName(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateLastName() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateLastName()
	})
}

// SetEmail sets the "email" field.
func (u *HomeOwnerUpsertOne) SetEmail(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateEmail() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *HomeOwnerUpsertOne) ClearEmail() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *HomeOwnerUpsertOne) SetPhone(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdatePhone() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *HomeOwnerUpsertOne) ClearPhone() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearPhone()
	})
}

// SetStreetNumber sets the "street_number" field.
func (u *HomeOwnerUpsertOne) SetStreetNumber(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetStreetNumber(v)
	})
}

// UpdateStreetNumber sets the "street_number" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateStreetNumber() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateStreetNumber()
	})
}

// SetStreetName sets the "street_name" field.
func (u *HomeOwnerUpsertOne) SetStreetName(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetStreetName(v)
	})
}

// UpdateStreetName sets the "street_name" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateStreetName() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateStreetName()
	})
}

// SetCity sets the "city" field.
func (u *HomeOwnerUpsertOne) SetCity(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateCity() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *HomeOwnerUpsertOne) SetState(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateState() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateState()
	})
}

// SetStateAbbr sets the "state_abbr" field.
func (u *HomeOwnerUpsertOne) SetStateAbbr(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetStateAbbr(v)
	})
}

// UpdateStateAbbr sets the "state_abbr" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateStateAbbr() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateStateAbbr()
	})
}

// ClearStateAbbr clears the value of the "state_abbr" field.
func (u *HomeOwnerUpsertOne) ClearStateAbbr() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearStateAbbr()
	})
}

// SetZip sets the "zip" field.
func (u *HomeOwnerUpsertOne) SetZip(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateZip() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateZip()
	})
}

// SetFormattedAddress sets the "formatted_address" field.
func (u *HomeOwnerUpsertOne) SetFormattedAddress(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetFormattedAddress(v)
	})
}

// UpdateFormattedAddress sets the "formatted_address" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateFormattedAddress() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateFormattedAddress()
	})
}

// ClearFormattedAddress clears the value of the "formatted_address" field.
func (u *HomeOwnerUpsertOne) ClearFormattedAddress() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearFormattedAddress()
	})
}

// SetLatitude sets the "latitude" field.
func (u *HomeOwnerUpsertOne) SetLatitude(v float64) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *HomeOwnerUpsertOne) AddLatitude(v float64) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateLatitude() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *HomeOwnerUpsertOne) ClearLatitude() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *HomeOwnerUpsertOne) SetLongitude(v float64) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *HomeOwnerUpsertOne) AddLongitude(v float64) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateLongitude() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *HomeOwnerUpsertOne) ClearLongitude() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearLongitude()
	})
}

// SetHash sets the "hash" field.
func (u *HomeOwnerUpsertOne) SetHash(v string) *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *HomeOwnerUpsertOne) UpdateHash() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateHash()
	})
}

// ClearHash clears the value of the "hash" field.
func (u *HomeOwnerUpsertOne) ClearHash() *HomeOwnerUpsertOne {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearHash()
	})
}

// Exec executes the query.
func (u *HomeOwnerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HomeOwnerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HomeOwnerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HomeOwnerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HomeOwnerUpsertOne.ID is not supported by MySQL driver. Use HomeOwnerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HomeOwnerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HomeOwnerCreateBulk is the builder for creating many HomeOwner entities in bulk.
type HomeOwnerCreateBulk struct {
	config
	builders []*HomeOwnerCreate
	conflict []sql.ConflictOption
}

// Save creates the HomeOwner entities in the database.
func (hocb *HomeOwnerCreateBulk) Save(ctx context.Context) ([]*HomeOwner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hocb.builders))
	nodes := make([]*HomeOwner, len(hocb.builders))
	mutators := make([]Mutator, len(hocb.builders))
	for i := range hocb.builders {
		func(i int, root context.Context) {
			builder := hocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HomeOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hocb *HomeOwnerCreateBulk) SaveX(ctx context.Context) []*HomeOwner {
	v, err := hocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hocb *HomeOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := hocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hocb *HomeOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := hocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HomeOwner.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HomeOwnerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hocb *HomeOwnerCreateBulk) OnConflict(opts ...sql.ConflictOption) *HomeOwnerUpsertBulk {
	hocb.conflict = opts
	return &HomeOwnerUpsertBulk{
		create: hocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HomeOwner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hocb *HomeOwnerCreateBulk) OnConflictColumns(columns ...string) *HomeOwnerUpsertBulk {
	hocb.conflict = append(hocb.conflict, sql.ConflictColumns(columns...))
	return &HomeOwnerUpsertBulk{
		create: hocb,
	}
}

// HomeOwnerUpsertBulk is the builder for "upsert"-ing
// a bulk of HomeOwner nodes.
type HomeOwnerUpsertBulk struct {
	create *HomeOwnerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HomeOwner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(homeowner.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HomeOwnerUpsertBulk) UpdateNewValues() *HomeOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(homeowner.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(homeowner.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HomeOwner.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HomeOwnerUpsertBulk) Ignore() *HomeOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HomeOwnerUpsertBulk) DoNothing() *HomeOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HomeOwnerCreateBulk.OnConflict
// documentation for more info.
func (u *HomeOwnerUpsertBulk) Update(set func(*HomeOwnerUpsert)) *HomeOwnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HomeOwnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HomeOwnerUpsertBulk) SetUpdatedAt(v time.Time) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateUpdatedAt() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFirstName sets the "first_name" field.
func (u *HomeOwnerUpsertBulk) SetFirstName(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateFirstName() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *HomeOwnerUpsertBulk) SetLastName(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateLastName() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateLastName()
	})
}

// SetEmail sets the "email" field.
func (u *HomeOwnerUpsertBulk) SetEmail(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateEmail() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *HomeOwnerUpsertBulk) ClearEmail() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *HomeOwnerUpsertBulk) SetPhone(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdatePhone() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *HomeOwnerUpsertBulk) ClearPhone() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearPhone()
	})
}

// SetStreetNumber sets the "street_number" field.
func (u *HomeOwnerUpsertBulk) SetStreetNumber(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetStreetNumber(v)
	})
}

// UpdateStreetNumber sets the "street_number" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateStreetNumber() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateStreetNumber()
	})
}

// SetStreetName sets the "street_name" field.
func (u *HomeOwnerUpsertBulk) SetStreetName(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetStreetName(v)
	})
}

// UpdateStreetName sets the "street_name" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateStreetName() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateStreetName()
	})
}

// SetCity sets the "city" field.
func (u *HomeOwnerUpsertBulk) SetCity(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateCity() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *HomeOwnerUpsertBulk) SetState(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateState() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateState()
	})
}

// SetStateAbbr sets the "state_abbr" field.
func (u *HomeOwnerUpsertBulk) SetStateAbbr(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetStateAbbr(v)
	})
}

// UpdateStateAbbr sets the "state_abbr" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateStateAbbr() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateStateAbbr()
	})
}

// ClearStateAbbr clears the value of the "state_abbr" field.
func (u *HomeOwnerUpsertBulk) ClearStateAbbr() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearStateAbbr()
	})
}

// SetZip sets the "zip" field.
func (u *HomeOwnerUpsertBulk) SetZip(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateZip() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateZip()
	})
}

// SetFormattedAddress sets the "formatted_address" field.
func (u *HomeOwnerUpsertBulk) SetFormattedAddress(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetFormattedAddress(v)
	})
}

// UpdateFormattedAddress sets the "formatted_address" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateFormattedAddress() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateFormattedAddress()
	})
}

// ClearFormattedAddress clears the value of the "formatted_address" field.
func (u *HomeOwnerUpsertBulk) ClearFormattedAddress() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearFormattedAddress()
	})
}

// SetLatitude sets the "latitude" field.
func (u *HomeOwnerUpsertBulk) SetLatitude(v float64) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *HomeOwnerUpsertBulk) AddLatitude(v float64) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateLatitude() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *HomeOwnerUpsertBulk) ClearLatitude() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *HomeOwnerUpsertBulk) SetLongitude(v float64) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *HomeOwnerUpsertBulk) AddLongitude(v float64) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateLongitude() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *HomeOwnerUpsertBulk) ClearLongitude() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearLongitude()
	})
}

// SetHash sets the "hash" field.
func (u *HomeOwnerUpsertBulk) SetHash(v string) *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *HomeOwnerUpsertBulk) UpdateHash() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.UpdateHash()
	})
}

// ClearHash clears the value of the "hash" field.
func (u *HomeOwnerUpsertBulk) ClearHash() *HomeOwnerUpsertBulk {
	return u.Update(func(s *HomeOwnerUpsert) {
		s.ClearHash()
	})
}

// Exec executes the query.
func (u *HomeOwnerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HomeOwnerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HomeOwnerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HomeOwnerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

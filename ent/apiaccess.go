// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/apiaccess"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApiAccess is the model entity for the ApiAccess schema.
type ApiAccess struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt    time.Time `json:"expires_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiAccess) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apiaccess.FieldID, apiaccess.FieldURL, apiaccess.FieldUsername, apiaccess.FieldPassword, apiaccess.FieldKey, apiaccess.FieldSecret, apiaccess.FieldAccessToken, apiaccess.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case apiaccess.FieldCreatedAt, apiaccess.FieldUpdatedAt, apiaccess.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiAccess fields.
func (aa *ApiAccess) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apiaccess.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aa.ID = value.String
			}
		case apiaccess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case apiaccess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		case apiaccess.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				aa.URL = value.String
			}
		case apiaccess.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				aa.Username = value.String
			}
		case apiaccess.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				aa.Password = value.String
			}
		case apiaccess.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				aa.Key = value.String
			}
		case apiaccess.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				aa.Secret = value.String
			}
		case apiaccess.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				aa.AccessToken = value.String
			}
		case apiaccess.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				aa.RefreshToken = value.String
			}
		case apiaccess.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				aa.ExpiresAt = value.Time
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiAccess.
// This includes values selected through modifiers, order, etc.
func (aa *ApiAccess) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// Update returns a builder for updating this ApiAccess.
// Note that you need to call ApiAccess.Unwrap() before calling this method if this ApiAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *ApiAccess) Update() *ApiAccessUpdateOne {
	return NewApiAccessClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the ApiAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *ApiAccess) Unwrap() *ApiAccess {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiAccess is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *ApiAccess) String() string {
	var builder strings.Builder
	builder.WriteString("ApiAccess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(aa.URL)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(aa.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(aa.Password)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(aa.Key)
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(aa.Secret)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(aa.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(aa.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(aa.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ApiAccesses is a parsable slice of ApiAccess.
type ApiAccesses []*ApiAccess

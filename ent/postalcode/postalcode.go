// Code generated by ent, DO NOT EDIT.

package postalcode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the postalcode type in the database.
	Label = "postal_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldStateAbr holds the string denoting the state_abr field in the database.
	FieldStateAbr = "state_abr"
	// FieldRegionID holds the string denoting the region_id field in the database.
	FieldRegionID = "region_id"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldAccuracy holds the string denoting the accuracy field in the database.
	FieldAccuracy = "accuracy"
	// FieldServiceArea holds the string denoting the service_area field in the database.
	FieldServiceArea = "service_area"
	// EdgePricing holds the string denoting the pricing edge name in mutations.
	EdgePricing = "pricing"
	// Table holds the table name of the postalcode in the database.
	Table = "postal_codes"
	// PricingTable is the table that holds the pricing relation/edge.
	PricingTable = "pricing"
	// PricingInverseTable is the table name for the Pricing entity.
	// It exists in this package in order to avoid circular dependency with the "pricing" package.
	PricingInverseTable = "pricing"
	// PricingColumn is the table column denoting the pricing relation/edge.
	PricingColumn = "postal_id"
)

// Columns holds all SQL columns for postalcode fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCountry,
	FieldCode,
	FieldCity,
	FieldState,
	FieldStateAbr,
	FieldRegionID,
	FieldLatitude,
	FieldLongitude,
	FieldAccuracy,
	FieldServiceArea,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CountryValidator is a validator for the "country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// StateAbrValidator is a validator for the "state_abr" field. It is called by the builders before save.
	StateAbrValidator func(string) error
	// DefaultServiceArea holds the default value on creation for the "service_area" field.
	DefaultServiceArea bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the PostalCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByStateAbr orders the results by the state_abr field.
func ByStateAbr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateAbr, opts...).ToFunc()
}

// ByRegionID orders the results by the region_id field.
func ByRegionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionID, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByAccuracy orders the results by the accuracy field.
func ByAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccuracy, opts...).ToFunc()
}

// ByServiceArea orders the results by the service_area field.
func ByServiceArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceArea, opts...).ToFunc()
}

// ByPricingCount orders the results by pricing count.
func ByPricingCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPricingStep(), opts...)
	}
}

// ByPricing orders the results by pricing terms.
func ByPricing(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPricingStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPricingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PricingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PricingTable, PricingColumn),
	)
}

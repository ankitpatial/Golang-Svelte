// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/installationjob"
	"roofix/ent/installationjobitem"
	"roofix/ent/installationjobprogress"
	"roofix/ent/partner"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstallationJobCreate is the builder for creating a InstallationJob entity.
type InstallationJobCreate struct {
	config
	mutation *InstallationJobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ijc *InstallationJobCreate) SetCreatedAt(t time.Time) *InstallationJobCreate {
	ijc.mutation.SetCreatedAt(t)
	return ijc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableCreatedAt(t *time.Time) *InstallationJobCreate {
	if t != nil {
		ijc.SetCreatedAt(*t)
	}
	return ijc
}

// SetUpdatedAt sets the "updated_at" field.
func (ijc *InstallationJobCreate) SetUpdatedAt(t time.Time) *InstallationJobCreate {
	ijc.mutation.SetUpdatedAt(t)
	return ijc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableUpdatedAt(t *time.Time) *InstallationJobCreate {
	if t != nil {
		ijc.SetUpdatedAt(*t)
	}
	return ijc
}

// SetType sets the "type" field.
func (ijc *InstallationJobCreate) SetType(et enum.InstallationType) *InstallationJobCreate {
	ijc.mutation.SetType(et)
	return ijc
}

// SetOwnerName sets the "owner_name" field.
func (ijc *InstallationJobCreate) SetOwnerName(s string) *InstallationJobCreate {
	ijc.mutation.SetOwnerName(s)
	return ijc
}

// SetOwnerPhone sets the "owner_phone" field.
func (ijc *InstallationJobCreate) SetOwnerPhone(s string) *InstallationJobCreate {
	ijc.mutation.SetOwnerPhone(s)
	return ijc
}

// SetOwnerEmail sets the "owner_email" field.
func (ijc *InstallationJobCreate) SetOwnerEmail(s string) *InstallationJobCreate {
	ijc.mutation.SetOwnerEmail(s)
	return ijc
}

// SetNillableOwnerEmail sets the "owner_email" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableOwnerEmail(s *string) *InstallationJobCreate {
	if s != nil {
		ijc.SetOwnerEmail(*s)
	}
	return ijc
}

// SetOwnerAddress sets the "owner_address" field.
func (ijc *InstallationJobCreate) SetOwnerAddress(s string) *InstallationJobCreate {
	ijc.mutation.SetOwnerAddress(s)
	return ijc
}

// SetOwnerAddressLat sets the "owner_address_lat" field.
func (ijc *InstallationJobCreate) SetOwnerAddressLat(f float64) *InstallationJobCreate {
	ijc.mutation.SetOwnerAddressLat(f)
	return ijc
}

// SetNillableOwnerAddressLat sets the "owner_address_lat" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableOwnerAddressLat(f *float64) *InstallationJobCreate {
	if f != nil {
		ijc.SetOwnerAddressLat(*f)
	}
	return ijc
}

// SetOwnerAddressLng sets the "owner_address_lng" field.
func (ijc *InstallationJobCreate) SetOwnerAddressLng(f float64) *InstallationJobCreate {
	ijc.mutation.SetOwnerAddressLng(f)
	return ijc
}

// SetNillableOwnerAddressLng sets the "owner_address_lng" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableOwnerAddressLng(f *float64) *InstallationJobCreate {
	if f != nil {
		ijc.SetOwnerAddressLng(*f)
	}
	return ijc
}

// SetSpecialNote sets the "special_note" field.
func (ijc *InstallationJobCreate) SetSpecialNote(s string) *InstallationJobCreate {
	ijc.mutation.SetSpecialNote(s)
	return ijc
}

// SetNillableSpecialNote sets the "special_note" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableSpecialNote(s *string) *InstallationJobCreate {
	if s != nil {
		ijc.SetSpecialNote(*s)
	}
	return ijc
}

// SetPkg sets the "pkg" field.
func (ijc *InstallationJobCreate) SetPkg(s string) *InstallationJobCreate {
	ijc.mutation.SetPkg(s)
	return ijc
}

// SetPkgDescription sets the "pkg_description" field.
func (ijc *InstallationJobCreate) SetPkgDescription(s string) *InstallationJobCreate {
	ijc.mutation.SetPkgDescription(s)
	return ijc
}

// SetNillablePkgDescription sets the "pkg_description" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillablePkgDescription(s *string) *InstallationJobCreate {
	if s != nil {
		ijc.SetPkgDescription(*s)
	}
	return ijc
}

// SetPkgFeatures sets the "pkg_features" field.
func (ijc *InstallationJobCreate) SetPkgFeatures(s []string) *InstallationJobCreate {
	ijc.mutation.SetPkgFeatures(s)
	return ijc
}

// SetPrice sets the "price" field.
func (ijc *InstallationJobCreate) SetPrice(f float64) *InstallationJobCreate {
	ijc.mutation.SetPrice(f)
	return ijc
}

// SetApproval sets the "approval" field.
func (ijc *InstallationJobCreate) SetApproval(e enum.Approval) *InstallationJobCreate {
	ijc.mutation.SetApproval(e)
	return ijc
}

// SetNillableApproval sets the "approval" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableApproval(e *enum.Approval) *InstallationJobCreate {
	if e != nil {
		ijc.SetApproval(*e)
	}
	return ijc
}

// SetApprovalAt sets the "approval_at" field.
func (ijc *InstallationJobCreate) SetApprovalAt(t time.Time) *InstallationJobCreate {
	ijc.mutation.SetApprovalAt(t)
	return ijc
}

// SetNillableApprovalAt sets the "approval_at" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableApprovalAt(t *time.Time) *InstallationJobCreate {
	if t != nil {
		ijc.SetApprovalAt(*t)
	}
	return ijc
}

// SetDenyReason sets the "deny_reason" field.
func (ijc *InstallationJobCreate) SetDenyReason(s string) *InstallationJobCreate {
	ijc.mutation.SetDenyReason(s)
	return ijc
}

// SetNillableDenyReason sets the "deny_reason" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableDenyReason(s *string) *InstallationJobCreate {
	if s != nil {
		ijc.SetDenyReason(*s)
	}
	return ijc
}

// SetStatus sets the "status" field.
func (ijc *InstallationJobCreate) SetStatus(es enum.InstallationStatus) *InstallationJobCreate {
	ijc.mutation.SetStatus(es)
	return ijc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableStatus(es *enum.InstallationStatus) *InstallationJobCreate {
	if es != nil {
		ijc.SetStatus(*es)
	}
	return ijc
}

// SetStatusAt sets the "status_at" field.
func (ijc *InstallationJobCreate) SetStatusAt(t time.Time) *InstallationJobCreate {
	ijc.mutation.SetStatusAt(t)
	return ijc
}

// SetNillableStatusAt sets the "status_at" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableStatusAt(t *time.Time) *InstallationJobCreate {
	if t != nil {
		ijc.SetStatusAt(*t)
	}
	return ijc
}

// SetID sets the "id" field.
func (ijc *InstallationJobCreate) SetID(s string) *InstallationJobCreate {
	ijc.mutation.SetID(s)
	return ijc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableID(s *string) *InstallationJobCreate {
	if s != nil {
		ijc.SetID(*s)
	}
	return ijc
}

// AddItemIDs adds the "items" edge to the InstallationJobItem entity by IDs.
func (ijc *InstallationJobCreate) AddItemIDs(ids ...string) *InstallationJobCreate {
	ijc.mutation.AddItemIDs(ids...)
	return ijc
}

// AddItems adds the "items" edges to the InstallationJobItem entity.
func (ijc *InstallationJobCreate) AddItems(i ...*InstallationJobItem) *InstallationJobCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ijc.AddItemIDs(ids...)
}

// AddProgressHistoryIDs adds the "progress_history" edge to the InstallationJobProgress entity by IDs.
func (ijc *InstallationJobCreate) AddProgressHistoryIDs(ids ...string) *InstallationJobCreate {
	ijc.mutation.AddProgressHistoryIDs(ids...)
	return ijc
}

// AddProgressHistory adds the "progress_history" edges to the InstallationJobProgress entity.
func (ijc *InstallationJobCreate) AddProgressHistory(i ...*InstallationJobProgress) *InstallationJobCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ijc.AddProgressHistoryIDs(ids...)
}

// SetRequestingPartnerID sets the "requesting_partner" edge to the Partner entity by ID.
func (ijc *InstallationJobCreate) SetRequestingPartnerID(id string) *InstallationJobCreate {
	ijc.mutation.SetRequestingPartnerID(id)
	return ijc
}

// SetNillableRequestingPartnerID sets the "requesting_partner" edge to the Partner entity by ID if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableRequestingPartnerID(id *string) *InstallationJobCreate {
	if id != nil {
		ijc = ijc.SetRequestingPartnerID(*id)
	}
	return ijc
}

// SetRequestingPartner sets the "requesting_partner" edge to the Partner entity.
func (ijc *InstallationJobCreate) SetRequestingPartner(p *Partner) *InstallationJobCreate {
	return ijc.SetRequestingPartnerID(p.ID)
}

// SetAssignedPartnerID sets the "assigned_partner" edge to the Partner entity by ID.
func (ijc *InstallationJobCreate) SetAssignedPartnerID(id string) *InstallationJobCreate {
	ijc.mutation.SetAssignedPartnerID(id)
	return ijc
}

// SetNillableAssignedPartnerID sets the "assigned_partner" edge to the Partner entity by ID if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableAssignedPartnerID(id *string) *InstallationJobCreate {
	if id != nil {
		ijc = ijc.SetAssignedPartnerID(*id)
	}
	return ijc
}

// SetAssignedPartner sets the "assigned_partner" edge to the Partner entity.
func (ijc *InstallationJobCreate) SetAssignedPartner(p *Partner) *InstallationJobCreate {
	return ijc.SetAssignedPartnerID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ijc *InstallationJobCreate) SetCreatorID(id string) *InstallationJobCreate {
	ijc.mutation.SetCreatorID(id)
	return ijc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableCreatorID(id *string) *InstallationJobCreate {
	if id != nil {
		ijc = ijc.SetCreatorID(*id)
	}
	return ijc
}

// SetCreator sets the "creator" edge to the User entity.
func (ijc *InstallationJobCreate) SetCreator(u *User) *InstallationJobCreate {
	return ijc.SetCreatorID(u.ID)
}

// SetSalesRepID sets the "sales_rep" edge to the User entity by ID.
func (ijc *InstallationJobCreate) SetSalesRepID(id string) *InstallationJobCreate {
	ijc.mutation.SetSalesRepID(id)
	return ijc
}

// SetNillableSalesRepID sets the "sales_rep" edge to the User entity by ID if the given value is not nil.
func (ijc *InstallationJobCreate) SetNillableSalesRepID(id *string) *InstallationJobCreate {
	if id != nil {
		ijc = ijc.SetSalesRepID(*id)
	}
	return ijc
}

// SetSalesRep sets the "sales_rep" edge to the User entity.
func (ijc *InstallationJobCreate) SetSalesRep(u *User) *InstallationJobCreate {
	return ijc.SetSalesRepID(u.ID)
}

// Mutation returns the InstallationJobMutation object of the builder.
func (ijc *InstallationJobCreate) Mutation() *InstallationJobMutation {
	return ijc.mutation
}

// Save creates the InstallationJob in the database.
func (ijc *InstallationJobCreate) Save(ctx context.Context) (*InstallationJob, error) {
	ijc.defaults()
	return withHooks(ctx, ijc.sqlSave, ijc.mutation, ijc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ijc *InstallationJobCreate) SaveX(ctx context.Context) *InstallationJob {
	v, err := ijc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ijc *InstallationJobCreate) Exec(ctx context.Context) error {
	_, err := ijc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijc *InstallationJobCreate) ExecX(ctx context.Context) {
	if err := ijc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ijc *InstallationJobCreate) defaults() {
	if _, ok := ijc.mutation.CreatedAt(); !ok {
		v := installationjob.DefaultCreatedAt()
		ijc.mutation.SetCreatedAt(v)
	}
	if _, ok := ijc.mutation.UpdatedAt(); !ok {
		v := installationjob.DefaultUpdatedAt()
		ijc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ijc.mutation.PkgFeatures(); !ok {
		v := installationjob.DefaultPkgFeatures
		ijc.mutation.SetPkgFeatures(v)
	}
	if _, ok := ijc.mutation.Approval(); !ok {
		v := installationjob.DefaultApproval
		ijc.mutation.SetApproval(v)
	}
	if _, ok := ijc.mutation.ApprovalAt(); !ok {
		v := installationjob.DefaultApprovalAt
		ijc.mutation.SetApprovalAt(v)
	}
	if _, ok := ijc.mutation.Status(); !ok {
		v := installationjob.DefaultStatus
		ijc.mutation.SetStatus(v)
	}
	if _, ok := ijc.mutation.StatusAt(); !ok {
		v := installationjob.DefaultStatusAt
		ijc.mutation.SetStatusAt(v)
	}
	if _, ok := ijc.mutation.ID(); !ok {
		v := installationjob.DefaultID()
		ijc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ijc *InstallationJobCreate) check() error {
	if _, ok := ijc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InstallationJob.created_at"`)}
	}
	if _, ok := ijc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InstallationJob.updated_at"`)}
	}
	if _, ok := ijc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "InstallationJob.type"`)}
	}
	if v, ok := ijc.mutation.GetType(); ok {
		if err := installationjob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.type": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.OwnerName(); !ok {
		return &ValidationError{Name: "owner_name", err: errors.New(`ent: missing required field "InstallationJob.owner_name"`)}
	}
	if v, ok := ijc.mutation.OwnerName(); ok {
		if err := installationjob.OwnerNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_name", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_name": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.OwnerPhone(); !ok {
		return &ValidationError{Name: "owner_phone", err: errors.New(`ent: missing required field "InstallationJob.owner_phone"`)}
	}
	if v, ok := ijc.mutation.OwnerPhone(); ok {
		if err := installationjob.OwnerPhoneValidator(v); err != nil {
			return &ValidationError{Name: "owner_phone", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_phone": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.OwnerAddress(); !ok {
		return &ValidationError{Name: "owner_address", err: errors.New(`ent: missing required field "InstallationJob.owner_address"`)}
	}
	if v, ok := ijc.mutation.OwnerAddress(); ok {
		if err := installationjob.OwnerAddressValidator(v); err != nil {
			return &ValidationError{Name: "owner_address", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.owner_address": %w`, err)}
		}
	}
	if v, ok := ijc.mutation.SpecialNote(); ok {
		if err := installationjob.SpecialNoteValidator(v); err != nil {
			return &ValidationError{Name: "special_note", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.special_note": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.Pkg(); !ok {
		return &ValidationError{Name: "pkg", err: errors.New(`ent: missing required field "InstallationJob.pkg"`)}
	}
	if v, ok := ijc.mutation.Pkg(); ok {
		if err := installationjob.PkgValidator(v); err != nil {
			return &ValidationError{Name: "pkg", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.pkg": %w`, err)}
		}
	}
	if v, ok := ijc.mutation.PkgDescription(); ok {
		if err := installationjob.PkgDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "pkg_description", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.pkg_description": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "InstallationJob.price"`)}
	}
	if _, ok := ijc.mutation.Approval(); !ok {
		return &ValidationError{Name: "approval", err: errors.New(`ent: missing required field "InstallationJob.approval"`)}
	}
	if v, ok := ijc.mutation.Approval(); ok {
		if err := installationjob.ApprovalValidator(v); err != nil {
			return &ValidationError{Name: "approval", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.approval": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.ApprovalAt(); !ok {
		return &ValidationError{Name: "approval_at", err: errors.New(`ent: missing required field "InstallationJob.approval_at"`)}
	}
	if _, ok := ijc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "InstallationJob.status"`)}
	}
	if v, ok := ijc.mutation.Status(); ok {
		if err := installationjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.status": %w`, err)}
		}
	}
	if _, ok := ijc.mutation.StatusAt(); !ok {
		return &ValidationError{Name: "status_at", err: errors.New(`ent: missing required field "InstallationJob.status_at"`)}
	}
	if v, ok := ijc.mutation.ID(); ok {
		if err := installationjob.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InstallationJob.id": %w`, err)}
		}
	}
	return nil
}

func (ijc *InstallationJobCreate) sqlSave(ctx context.Context) (*InstallationJob, error) {
	if err := ijc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ijc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ijc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InstallationJob.ID type: %T", _spec.ID.Value)
		}
	}
	ijc.mutation.id = &_node.ID
	ijc.mutation.done = true
	return _node, nil
}

func (ijc *InstallationJobCreate) createSpec() (*InstallationJob, *sqlgraph.CreateSpec) {
	var (
		_node = &InstallationJob{config: ijc.config}
		_spec = sqlgraph.NewCreateSpec(installationjob.Table, sqlgraph.NewFieldSpec(installationjob.FieldID, field.TypeString))
	)
	_spec.OnConflict = ijc.conflict
	if id, ok := ijc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ijc.mutation.CreatedAt(); ok {
		_spec.SetField(installationjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ijc.mutation.UpdatedAt(); ok {
		_spec.SetField(installationjob.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ijc.mutation.GetType(); ok {
		_spec.SetField(installationjob.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ijc.mutation.OwnerName(); ok {
		_spec.SetField(installationjob.FieldOwnerName, field.TypeString, value)
		_node.OwnerName = value
	}
	if value, ok := ijc.mutation.OwnerPhone(); ok {
		_spec.SetField(installationjob.FieldOwnerPhone, field.TypeString, value)
		_node.OwnerPhone = value
	}
	if value, ok := ijc.mutation.OwnerEmail(); ok {
		_spec.SetField(installationjob.FieldOwnerEmail, field.TypeString, value)
		_node.OwnerEmail = value
	}
	if value, ok := ijc.mutation.OwnerAddress(); ok {
		_spec.SetField(installationjob.FieldOwnerAddress, field.TypeString, value)
		_node.OwnerAddress = value
	}
	if value, ok := ijc.mutation.OwnerAddressLat(); ok {
		_spec.SetField(installationjob.FieldOwnerAddressLat, field.TypeFloat64, value)
		_node.OwnerAddressLat = &value
	}
	if value, ok := ijc.mutation.OwnerAddressLng(); ok {
		_spec.SetField(installationjob.FieldOwnerAddressLng, field.TypeFloat64, value)
		_node.OwnerAddressLng = &value
	}
	if value, ok := ijc.mutation.SpecialNote(); ok {
		_spec.SetField(installationjob.FieldSpecialNote, field.TypeString, value)
		_node.SpecialNote = &value
	}
	if value, ok := ijc.mutation.Pkg(); ok {
		_spec.SetField(installationjob.FieldPkg, field.TypeString, value)
		_node.Pkg = value
	}
	if value, ok := ijc.mutation.PkgDescription(); ok {
		_spec.SetField(installationjob.FieldPkgDescription, field.TypeString, value)
		_node.PkgDescription = value
	}
	if value, ok := ijc.mutation.PkgFeatures(); ok {
		_spec.SetField(installationjob.FieldPkgFeatures, field.TypeJSON, value)
		_node.PkgFeatures = value
	}
	if value, ok := ijc.mutation.Price(); ok {
		_spec.SetField(installationjob.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ijc.mutation.Approval(); ok {
		_spec.SetField(installationjob.FieldApproval, field.TypeEnum, value)
		_node.Approval = value
	}
	if value, ok := ijc.mutation.ApprovalAt(); ok {
		_spec.SetField(installationjob.FieldApprovalAt, field.TypeTime, value)
		_node.ApprovalAt = value
	}
	if value, ok := ijc.mutation.DenyReason(); ok {
		_spec.SetField(installationjob.FieldDenyReason, field.TypeString, value)
		_node.DenyReason = value
	}
	if value, ok := ijc.mutation.Status(); ok {
		_spec.SetField(installationjob.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ijc.mutation.StatusAt(); ok {
		_spec.SetField(installationjob.FieldStatusAt, field.TypeTime, value)
		_node.StatusAt = value
	}
	if nodes := ijc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ItemsTable,
			Columns: []string{installationjob.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ijc.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   installationjob.ProgressHistoryTable,
			Columns: []string{installationjob.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ijc.mutation.RequestingPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.RequestingPartnerTable,
			Columns: []string{installationjob.RequestingPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.requesting_partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ijc.mutation.AssignedPartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.AssignedPartnerTable,
			Columns: []string{installationjob.AssignedPartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.assigned_partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ijc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.CreatorTable,
			Columns: []string{installationjob.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.creator_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ijc.mutation.SalesRepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installationjob.SalesRepTable,
			Columns: []string{installationjob.SalesRepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sales_rep_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstallationJob.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstallationJobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ijc *InstallationJobCreate) OnConflict(opts ...sql.ConflictOption) *InstallationJobUpsertOne {
	ijc.conflict = opts
	return &InstallationJobUpsertOne{
		create: ijc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstallationJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ijc *InstallationJobCreate) OnConflictColumns(columns ...string) *InstallationJobUpsertOne {
	ijc.conflict = append(ijc.conflict, sql.ConflictColumns(columns...))
	return &InstallationJobUpsertOne{
		create: ijc,
	}
}

type (
	// InstallationJobUpsertOne is the builder for "upsert"-ing
	//  one InstallationJob node.
	InstallationJobUpsertOne struct {
		create *InstallationJobCreate
	}

	// InstallationJobUpsert is the "OnConflict" setter.
	InstallationJobUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InstallationJobUpsert) SetUpdatedAt(v time.Time) *InstallationJobUpsert {
	u.Set(installationjob.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateUpdatedAt() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *InstallationJobUpsert) SetType(v enum.InstallationType) *InstallationJobUpsert {
	u.Set(installationjob.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateType() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldType)
	return u
}

// SetOwnerName sets the "owner_name" field.
func (u *InstallationJobUpsert) SetOwnerName(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldOwnerName, v)
	return u
}

// UpdateOwnerName sets the "owner_name" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateOwnerName() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldOwnerName)
	return u
}

// SetOwnerPhone sets the "owner_phone" field.
func (u *InstallationJobUpsert) SetOwnerPhone(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldOwnerPhone, v)
	return u
}

// UpdateOwnerPhone sets the "owner_phone" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateOwnerPhone() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldOwnerPhone)
	return u
}

// SetOwnerEmail sets the "owner_email" field.
func (u *InstallationJobUpsert) SetOwnerEmail(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldOwnerEmail, v)
	return u
}

// UpdateOwnerEmail sets the "owner_email" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateOwnerEmail() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldOwnerEmail)
	return u
}

// ClearOwnerEmail clears the value of the "owner_email" field.
func (u *InstallationJobUpsert) ClearOwnerEmail() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldOwnerEmail)
	return u
}

// SetOwnerAddress sets the "owner_address" field.
func (u *InstallationJobUpsert) SetOwnerAddress(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldOwnerAddress, v)
	return u
}

// UpdateOwnerAddress sets the "owner_address" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateOwnerAddress() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldOwnerAddress)
	return u
}

// SetOwnerAddressLat sets the "owner_address_lat" field.
func (u *InstallationJobUpsert) SetOwnerAddressLat(v float64) *InstallationJobUpsert {
	u.Set(installationjob.FieldOwnerAddressLat, v)
	return u
}

// UpdateOwnerAddressLat sets the "owner_address_lat" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateOwnerAddressLat() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldOwnerAddressLat)
	return u
}

// AddOwnerAddressLat adds v to the "owner_address_lat" field.
func (u *InstallationJobUpsert) AddOwnerAddressLat(v float64) *InstallationJobUpsert {
	u.Add(installationjob.FieldOwnerAddressLat, v)
	return u
}

// ClearOwnerAddressLat clears the value of the "owner_address_lat" field.
func (u *InstallationJobUpsert) ClearOwnerAddressLat() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldOwnerAddressLat)
	return u
}

// SetOwnerAddressLng sets the "owner_address_lng" field.
func (u *InstallationJobUpsert) SetOwnerAddressLng(v float64) *InstallationJobUpsert {
	u.Set(installationjob.FieldOwnerAddressLng, v)
	return u
}

// UpdateOwnerAddressLng sets the "owner_address_lng" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateOwnerAddressLng() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldOwnerAddressLng)
	return u
}

// AddOwnerAddressLng adds v to the "owner_address_lng" field.
func (u *InstallationJobUpsert) AddOwnerAddressLng(v float64) *InstallationJobUpsert {
	u.Add(installationjob.FieldOwnerAddressLng, v)
	return u
}

// ClearOwnerAddressLng clears the value of the "owner_address_lng" field.
func (u *InstallationJobUpsert) ClearOwnerAddressLng() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldOwnerAddressLng)
	return u
}

// SetSpecialNote sets the "special_note" field.
func (u *InstallationJobUpsert) SetSpecialNote(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldSpecialNote, v)
	return u
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateSpecialNote() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldSpecialNote)
	return u
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *InstallationJobUpsert) ClearSpecialNote() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldSpecialNote)
	return u
}

// SetPkg sets the "pkg" field.
func (u *InstallationJobUpsert) SetPkg(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldPkg, v)
	return u
}

// UpdatePkg sets the "pkg" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdatePkg() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldPkg)
	return u
}

// SetPkgDescription sets the "pkg_description" field.
func (u *InstallationJobUpsert) SetPkgDescription(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldPkgDescription, v)
	return u
}

// UpdatePkgDescription sets the "pkg_description" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdatePkgDescription() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldPkgDescription)
	return u
}

// ClearPkgDescription clears the value of the "pkg_description" field.
func (u *InstallationJobUpsert) ClearPkgDescription() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldPkgDescription)
	return u
}

// SetPkgFeatures sets the "pkg_features" field.
func (u *InstallationJobUpsert) SetPkgFeatures(v []string) *InstallationJobUpsert {
	u.Set(installationjob.FieldPkgFeatures, v)
	return u
}

// UpdatePkgFeatures sets the "pkg_features" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdatePkgFeatures() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldPkgFeatures)
	return u
}

// ClearPkgFeatures clears the value of the "pkg_features" field.
func (u *InstallationJobUpsert) ClearPkgFeatures() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldPkgFeatures)
	return u
}

// SetPrice sets the "price" field.
func (u *InstallationJobUpsert) SetPrice(v float64) *InstallationJobUpsert {
	u.Set(installationjob.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdatePrice() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *InstallationJobUpsert) AddPrice(v float64) *InstallationJobUpsert {
	u.Add(installationjob.FieldPrice, v)
	return u
}

// SetApproval sets the "approval" field.
func (u *InstallationJobUpsert) SetApproval(v enum.Approval) *InstallationJobUpsert {
	u.Set(installationjob.FieldApproval, v)
	return u
}

// UpdateApproval sets the "approval" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateApproval() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldApproval)
	return u
}

// SetApprovalAt sets the "approval_at" field.
func (u *InstallationJobUpsert) SetApprovalAt(v time.Time) *InstallationJobUpsert {
	u.Set(installationjob.FieldApprovalAt, v)
	return u
}

// UpdateApprovalAt sets the "approval_at" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateApprovalAt() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldApprovalAt)
	return u
}

// SetDenyReason sets the "deny_reason" field.
func (u *InstallationJobUpsert) SetDenyReason(v string) *InstallationJobUpsert {
	u.Set(installationjob.FieldDenyReason, v)
	return u
}

// UpdateDenyReason sets the "deny_reason" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateDenyReason() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldDenyReason)
	return u
}

// ClearDenyReason clears the value of the "deny_reason" field.
func (u *InstallationJobUpsert) ClearDenyReason() *InstallationJobUpsert {
	u.SetNull(installationjob.FieldDenyReason)
	return u
}

// SetStatus sets the "status" field.
func (u *InstallationJobUpsert) SetStatus(v enum.InstallationStatus) *InstallationJobUpsert {
	u.Set(installationjob.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateStatus() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldStatus)
	return u
}

// SetStatusAt sets the "status_at" field.
func (u *InstallationJobUpsert) SetStatusAt(v time.Time) *InstallationJobUpsert {
	u.Set(installationjob.FieldStatusAt, v)
	return u
}

// UpdateStatusAt sets the "status_at" field to the value that was provided on create.
func (u *InstallationJobUpsert) UpdateStatusAt() *InstallationJobUpsert {
	u.SetExcluded(installationjob.FieldStatusAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InstallationJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(installationjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstallationJobUpsertOne) UpdateNewValues() *InstallationJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(installationjob.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(installationjob.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstallationJob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InstallationJobUpsertOne) Ignore() *InstallationJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstallationJobUpsertOne) DoNothing() *InstallationJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstallationJobCreate.OnConflict
// documentation for more info.
func (u *InstallationJobUpsertOne) Update(set func(*InstallationJobUpsert)) *InstallationJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstallationJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InstallationJobUpsertOne) SetUpdatedAt(v time.Time) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateUpdatedAt() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *InstallationJobUpsertOne) SetType(v enum.InstallationType) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateType() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateType()
	})
}

// SetOwnerName sets the "owner_name" field.
func (u *InstallationJobUpsertOne) SetOwnerName(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerName(v)
	})
}

// UpdateOwnerName sets the "owner_name" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateOwnerName() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerName()
	})
}

// SetOwnerPhone sets the "owner_phone" field.
func (u *InstallationJobUpsertOne) SetOwnerPhone(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerPhone(v)
	})
}

// UpdateOwnerPhone sets the "owner_phone" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateOwnerPhone() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerPhone()
	})
}

// SetOwnerEmail sets the "owner_email" field.
func (u *InstallationJobUpsertOne) SetOwnerEmail(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerEmail(v)
	})
}

// UpdateOwnerEmail sets the "owner_email" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateOwnerEmail() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerEmail()
	})
}

// ClearOwnerEmail clears the value of the "owner_email" field.
func (u *InstallationJobUpsertOne) ClearOwnerEmail() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearOwnerEmail()
	})
}

// SetOwnerAddress sets the "owner_address" field.
func (u *InstallationJobUpsertOne) SetOwnerAddress(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerAddress(v)
	})
}

// UpdateOwnerAddress sets the "owner_address" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateOwnerAddress() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerAddress()
	})
}

// SetOwnerAddressLat sets the "owner_address_lat" field.
func (u *InstallationJobUpsertOne) SetOwnerAddressLat(v float64) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerAddressLat(v)
	})
}

// AddOwnerAddressLat adds v to the "owner_address_lat" field.
func (u *InstallationJobUpsertOne) AddOwnerAddressLat(v float64) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.AddOwnerAddressLat(v)
	})
}

// UpdateOwnerAddressLat sets the "owner_address_lat" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateOwnerAddressLat() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerAddressLat()
	})
}

// ClearOwnerAddressLat clears the value of the "owner_address_lat" field.
func (u *InstallationJobUpsertOne) ClearOwnerAddressLat() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearOwnerAddressLat()
	})
}

// SetOwnerAddressLng sets the "owner_address_lng" field.
func (u *InstallationJobUpsertOne) SetOwnerAddressLng(v float64) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerAddressLng(v)
	})
}

// AddOwnerAddressLng adds v to the "owner_address_lng" field.
func (u *InstallationJobUpsertOne) AddOwnerAddressLng(v float64) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.AddOwnerAddressLng(v)
	})
}

// UpdateOwnerAddressLng sets the "owner_address_lng" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateOwnerAddressLng() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerAddressLng()
	})
}

// ClearOwnerAddressLng clears the value of the "owner_address_lng" field.
func (u *InstallationJobUpsertOne) ClearOwnerAddressLng() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearOwnerAddressLng()
	})
}

// SetSpecialNote sets the "special_note" field.
func (u *InstallationJobUpsertOne) SetSpecialNote(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetSpecialNote(v)
	})
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateSpecialNote() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateSpecialNote()
	})
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *InstallationJobUpsertOne) ClearSpecialNote() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearSpecialNote()
	})
}

// SetPkg sets the "pkg" field.
func (u *InstallationJobUpsertOne) SetPkg(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPkg(v)
	})
}

// UpdatePkg sets the "pkg" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdatePkg() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePkg()
	})
}

// SetPkgDescription sets the "pkg_description" field.
func (u *InstallationJobUpsertOne) SetPkgDescription(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPkgDescription(v)
	})
}

// UpdatePkgDescription sets the "pkg_description" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdatePkgDescription() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePkgDescription()
	})
}

// ClearPkgDescription clears the value of the "pkg_description" field.
func (u *InstallationJobUpsertOne) ClearPkgDescription() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearPkgDescription()
	})
}

// SetPkgFeatures sets the "pkg_features" field.
func (u *InstallationJobUpsertOne) SetPkgFeatures(v []string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPkgFeatures(v)
	})
}

// UpdatePkgFeatures sets the "pkg_features" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdatePkgFeatures() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePkgFeatures()
	})
}

// ClearPkgFeatures clears the value of the "pkg_features" field.
func (u *InstallationJobUpsertOne) ClearPkgFeatures() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearPkgFeatures()
	})
}

// SetPrice sets the "price" field.
func (u *InstallationJobUpsertOne) SetPrice(v float64) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *InstallationJobUpsertOne) AddPrice(v float64) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdatePrice() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePrice()
	})
}

// SetApproval sets the "approval" field.
func (u *InstallationJobUpsertOne) SetApproval(v enum.Approval) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetApproval(v)
	})
}

// UpdateApproval sets the "approval" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateApproval() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateApproval()
	})
}

// SetApprovalAt sets the "approval_at" field.
func (u *InstallationJobUpsertOne) SetApprovalAt(v time.Time) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetApprovalAt(v)
	})
}

// UpdateApprovalAt sets the "approval_at" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateApprovalAt() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateApprovalAt()
	})
}

// SetDenyReason sets the "deny_reason" field.
func (u *InstallationJobUpsertOne) SetDenyReason(v string) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetDenyReason(v)
	})
}

// UpdateDenyReason sets the "deny_reason" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateDenyReason() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateDenyReason()
	})
}

// ClearDenyReason clears the value of the "deny_reason" field.
func (u *InstallationJobUpsertOne) ClearDenyReason() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearDenyReason()
	})
}

// SetStatus sets the "status" field.
func (u *InstallationJobUpsertOne) SetStatus(v enum.InstallationStatus) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateStatus() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateStatus()
	})
}

// SetStatusAt sets the "status_at" field.
func (u *InstallationJobUpsertOne) SetStatusAt(v time.Time) *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetStatusAt(v)
	})
}

// UpdateStatusAt sets the "status_at" field to the value that was provided on create.
func (u *InstallationJobUpsertOne) UpdateStatusAt() *InstallationJobUpsertOne {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateStatusAt()
	})
}

// Exec executes the query.
func (u *InstallationJobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstallationJobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstallationJobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InstallationJobUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InstallationJobUpsertOne.ID is not supported by MySQL driver. Use InstallationJobUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InstallationJobUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InstallationJobCreateBulk is the builder for creating many InstallationJob entities in bulk.
type InstallationJobCreateBulk struct {
	config
	builders []*InstallationJobCreate
	conflict []sql.ConflictOption
}

// Save creates the InstallationJob entities in the database.
func (ijcb *InstallationJobCreateBulk) Save(ctx context.Context) ([]*InstallationJob, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ijcb.builders))
	nodes := make([]*InstallationJob, len(ijcb.builders))
	mutators := make([]Mutator, len(ijcb.builders))
	for i := range ijcb.builders {
		func(i int, root context.Context) {
			builder := ijcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstallationJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ijcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ijcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ijcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ijcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ijcb *InstallationJobCreateBulk) SaveX(ctx context.Context) []*InstallationJob {
	v, err := ijcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ijcb *InstallationJobCreateBulk) Exec(ctx context.Context) error {
	_, err := ijcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ijcb *InstallationJobCreateBulk) ExecX(ctx context.Context) {
	if err := ijcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstallationJob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstallationJobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ijcb *InstallationJobCreateBulk) OnConflict(opts ...sql.ConflictOption) *InstallationJobUpsertBulk {
	ijcb.conflict = opts
	return &InstallationJobUpsertBulk{
		create: ijcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstallationJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ijcb *InstallationJobCreateBulk) OnConflictColumns(columns ...string) *InstallationJobUpsertBulk {
	ijcb.conflict = append(ijcb.conflict, sql.ConflictColumns(columns...))
	return &InstallationJobUpsertBulk{
		create: ijcb,
	}
}

// InstallationJobUpsertBulk is the builder for "upsert"-ing
// a bulk of InstallationJob nodes.
type InstallationJobUpsertBulk struct {
	create *InstallationJobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InstallationJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(installationjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstallationJobUpsertBulk) UpdateNewValues() *InstallationJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(installationjob.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(installationjob.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstallationJob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InstallationJobUpsertBulk) Ignore() *InstallationJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstallationJobUpsertBulk) DoNothing() *InstallationJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstallationJobCreateBulk.OnConflict
// documentation for more info.
func (u *InstallationJobUpsertBulk) Update(set func(*InstallationJobUpsert)) *InstallationJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstallationJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InstallationJobUpsertBulk) SetUpdatedAt(v time.Time) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateUpdatedAt() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *InstallationJobUpsertBulk) SetType(v enum.InstallationType) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateType() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateType()
	})
}

// SetOwnerName sets the "owner_name" field.
func (u *InstallationJobUpsertBulk) SetOwnerName(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerName(v)
	})
}

// UpdateOwnerName sets the "owner_name" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateOwnerName() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerName()
	})
}

// SetOwnerPhone sets the "owner_phone" field.
func (u *InstallationJobUpsertBulk) SetOwnerPhone(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerPhone(v)
	})
}

// UpdateOwnerPhone sets the "owner_phone" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateOwnerPhone() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerPhone()
	})
}

// SetOwnerEmail sets the "owner_email" field.
func (u *InstallationJobUpsertBulk) SetOwnerEmail(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerEmail(v)
	})
}

// UpdateOwnerEmail sets the "owner_email" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateOwnerEmail() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerEmail()
	})
}

// ClearOwnerEmail clears the value of the "owner_email" field.
func (u *InstallationJobUpsertBulk) ClearOwnerEmail() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearOwnerEmail()
	})
}

// SetOwnerAddress sets the "owner_address" field.
func (u *InstallationJobUpsertBulk) SetOwnerAddress(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerAddress(v)
	})
}

// UpdateOwnerAddress sets the "owner_address" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateOwnerAddress() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerAddress()
	})
}

// SetOwnerAddressLat sets the "owner_address_lat" field.
func (u *InstallationJobUpsertBulk) SetOwnerAddressLat(v float64) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerAddressLat(v)
	})
}

// AddOwnerAddressLat adds v to the "owner_address_lat" field.
func (u *InstallationJobUpsertBulk) AddOwnerAddressLat(v float64) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.AddOwnerAddressLat(v)
	})
}

// UpdateOwnerAddressLat sets the "owner_address_lat" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateOwnerAddressLat() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerAddressLat()
	})
}

// ClearOwnerAddressLat clears the value of the "owner_address_lat" field.
func (u *InstallationJobUpsertBulk) ClearOwnerAddressLat() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearOwnerAddressLat()
	})
}

// SetOwnerAddressLng sets the "owner_address_lng" field.
func (u *InstallationJobUpsertBulk) SetOwnerAddressLng(v float64) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetOwnerAddressLng(v)
	})
}

// AddOwnerAddressLng adds v to the "owner_address_lng" field.
func (u *InstallationJobUpsertBulk) AddOwnerAddressLng(v float64) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.AddOwnerAddressLng(v)
	})
}

// UpdateOwnerAddressLng sets the "owner_address_lng" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateOwnerAddressLng() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateOwnerAddressLng()
	})
}

// ClearOwnerAddressLng clears the value of the "owner_address_lng" field.
func (u *InstallationJobUpsertBulk) ClearOwnerAddressLng() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearOwnerAddressLng()
	})
}

// SetSpecialNote sets the "special_note" field.
func (u *InstallationJobUpsertBulk) SetSpecialNote(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetSpecialNote(v)
	})
}

// UpdateSpecialNote sets the "special_note" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateSpecialNote() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateSpecialNote()
	})
}

// ClearSpecialNote clears the value of the "special_note" field.
func (u *InstallationJobUpsertBulk) ClearSpecialNote() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearSpecialNote()
	})
}

// SetPkg sets the "pkg" field.
func (u *InstallationJobUpsertBulk) SetPkg(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPkg(v)
	})
}

// UpdatePkg sets the "pkg" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdatePkg() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePkg()
	})
}

// SetPkgDescription sets the "pkg_description" field.
func (u *InstallationJobUpsertBulk) SetPkgDescription(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPkgDescription(v)
	})
}

// UpdatePkgDescription sets the "pkg_description" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdatePkgDescription() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePkgDescription()
	})
}

// ClearPkgDescription clears the value of the "pkg_description" field.
func (u *InstallationJobUpsertBulk) ClearPkgDescription() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearPkgDescription()
	})
}

// SetPkgFeatures sets the "pkg_features" field.
func (u *InstallationJobUpsertBulk) SetPkgFeatures(v []string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPkgFeatures(v)
	})
}

// UpdatePkgFeatures sets the "pkg_features" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdatePkgFeatures() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePkgFeatures()
	})
}

// ClearPkgFeatures clears the value of the "pkg_features" field.
func (u *InstallationJobUpsertBulk) ClearPkgFeatures() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearPkgFeatures()
	})
}

// SetPrice sets the "price" field.
func (u *InstallationJobUpsertBulk) SetPrice(v float64) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *InstallationJobUpsertBulk) AddPrice(v float64) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdatePrice() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdatePrice()
	})
}

// SetApproval sets the "approval" field.
func (u *InstallationJobUpsertBulk) SetApproval(v enum.Approval) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetApproval(v)
	})
}

// UpdateApproval sets the "approval" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateApproval() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateApproval()
	})
}

// SetApprovalAt sets the "approval_at" field.
func (u *InstallationJobUpsertBulk) SetApprovalAt(v time.Time) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetApprovalAt(v)
	})
}

// UpdateApprovalAt sets the "approval_at" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateApprovalAt() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateApprovalAt()
	})
}

// SetDenyReason sets the "deny_reason" field.
func (u *InstallationJobUpsertBulk) SetDenyReason(v string) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetDenyReason(v)
	})
}

// UpdateDenyReason sets the "deny_reason" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateDenyReason() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateDenyReason()
	})
}

// ClearDenyReason clears the value of the "deny_reason" field.
func (u *InstallationJobUpsertBulk) ClearDenyReason() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.ClearDenyReason()
	})
}

// SetStatus sets the "status" field.
func (u *InstallationJobUpsertBulk) SetStatus(v enum.InstallationStatus) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateStatus() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateStatus()
	})
}

// SetStatusAt sets the "status_at" field.
func (u *InstallationJobUpsertBulk) SetStatusAt(v time.Time) *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.SetStatusAt(v)
	})
}

// UpdateStatusAt sets the "status_at" field to the value that was provided on create.
func (u *InstallationJobUpsertBulk) UpdateStatusAt() *InstallationJobUpsertBulk {
	return u.Update(func(s *InstallationJobUpsert) {
		s.UpdateStatusAt()
	})
}

// Exec executes the query.
func (u *InstallationJobUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InstallationJobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstallationJobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstallationJobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

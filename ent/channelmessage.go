// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/apiuser"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChannelMessage is the model entity for the ChannelMessage schema.
type ChannelMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// FromName holds the value of the "from_name" field.
	FromName string `json:"from_name,omitempty"`
	// ToName holds the value of the "to_name" field.
	ToName string `json:"to_name,omitempty"`
	// Private holds the value of the "private" field.
	Private bool `json:"private,omitempty"`
	// not to be used to save data, will be used in query in ORM
	Unread bool `json:"unread,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelMessageQuery when eager-loading is set.
	Edges            ChannelMessageEdges `json:"edges"`
	from_api_user_id *string
	channel_id       *string
	from_user_id     *string
	to_user_id       *string
	selectValues     sql.SelectValues
}

// ChannelMessageEdges holds the relations/edges for other nodes in the graph.
type ChannelMessageEdges struct {
	// Reads holds the value of the reads edge.
	Reads []*ChannelMessageRead `json:"reads,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// From holds the value of the from edge.
	From *User `json:"from,omitempty"`
	// FromAPIUser holds the value of the from_api_user edge.
	FromAPIUser *ApiUser `json:"from_api_user,omitempty"`
	// To holds the value of the to edge.
	To *User `json:"to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedReads map[string][]*ChannelMessageRead
}

// ReadsOrErr returns the Reads value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelMessageEdges) ReadsOrErr() ([]*ChannelMessageRead, error) {
	if e.loadedTypes[0] {
		return e.Reads, nil
	}
	return nil, &NotLoadedError{edge: "reads"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelMessageEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[1] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelMessageEdges) FromOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.From == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.From, nil
	}
	return nil, &NotLoadedError{edge: "from"}
}

// FromAPIUserOrErr returns the FromAPIUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelMessageEdges) FromAPIUserOrErr() (*ApiUser, error) {
	if e.loadedTypes[3] {
		if e.FromAPIUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apiuser.Label}
		}
		return e.FromAPIUser, nil
	}
	return nil, &NotLoadedError{edge: "from_api_user"}
}

// ToOrErr returns the To value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelMessageEdges) ToOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.To == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.To, nil
	}
	return nil, &NotLoadedError{edge: "to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChannelMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channelmessage.FieldPrivate, channelmessage.FieldUnread:
			values[i] = new(sql.NullBool)
		case channelmessage.FieldID, channelmessage.FieldTitle, channelmessage.FieldMessage, channelmessage.FieldFromName, channelmessage.FieldToName:
			values[i] = new(sql.NullString)
		case channelmessage.FieldCreatedAt, channelmessage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case channelmessage.ForeignKeys[0]: // from_api_user_id
			values[i] = new(sql.NullString)
		case channelmessage.ForeignKeys[1]: // channel_id
			values[i] = new(sql.NullString)
		case channelmessage.ForeignKeys[2]: // from_user_id
			values[i] = new(sql.NullString)
		case channelmessage.ForeignKeys[3]: // to_user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChannelMessage fields.
func (cm *ChannelMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channelmessage.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cm.ID = value.String
			}
		case channelmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case channelmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Time
			}
		case channelmessage.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cm.Title = value.String
			}
		case channelmessage.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cm.Message = value.String
			}
		case channelmessage.FieldFromName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_name", values[i])
			} else if value.Valid {
				cm.FromName = value.String
			}
		case channelmessage.FieldToName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_name", values[i])
			} else if value.Valid {
				cm.ToName = value.String
			}
		case channelmessage.FieldPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[i])
			} else if value.Valid {
				cm.Private = value.Bool
			}
		case channelmessage.FieldUnread:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field unread", values[i])
			} else if value.Valid {
				cm.Unread = value.Bool
			}
		case channelmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_api_user_id", values[i])
			} else if value.Valid {
				cm.from_api_user_id = new(string)
				*cm.from_api_user_id = value.String
			}
		case channelmessage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				cm.channel_id = new(string)
				*cm.channel_id = value.String
			}
		case channelmessage.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value.Valid {
				cm.from_user_id = new(string)
				*cm.from_user_id = value.String
			}
		case channelmessage.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value.Valid {
				cm.to_user_id = new(string)
				*cm.to_user_id = value.String
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChannelMessage.
// This includes values selected through modifiers, order, etc.
func (cm *ChannelMessage) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryReads queries the "reads" edge of the ChannelMessage entity.
func (cm *ChannelMessage) QueryReads() *ChannelMessageReadQuery {
	return NewChannelMessageClient(cm.config).QueryReads(cm)
}

// QueryChannel queries the "channel" edge of the ChannelMessage entity.
func (cm *ChannelMessage) QueryChannel() *ChannelQuery {
	return NewChannelMessageClient(cm.config).QueryChannel(cm)
}

// QueryFrom queries the "from" edge of the ChannelMessage entity.
func (cm *ChannelMessage) QueryFrom() *UserQuery {
	return NewChannelMessageClient(cm.config).QueryFrom(cm)
}

// QueryFromAPIUser queries the "from_api_user" edge of the ChannelMessage entity.
func (cm *ChannelMessage) QueryFromAPIUser() *ApiUserQuery {
	return NewChannelMessageClient(cm.config).QueryFromAPIUser(cm)
}

// QueryTo queries the "to" edge of the ChannelMessage entity.
func (cm *ChannelMessage) QueryTo() *UserQuery {
	return NewChannelMessageClient(cm.config).QueryTo(cm)
}

// Update returns a builder for updating this ChannelMessage.
// Note that you need to call ChannelMessage.Unwrap() before calling this method if this ChannelMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChannelMessage) Update() *ChannelMessageUpdateOne {
	return NewChannelMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChannelMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChannelMessage) Unwrap() *ChannelMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChannelMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChannelMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ChannelMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(cm.Title)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(cm.Message)
	builder.WriteString(", ")
	builder.WriteString("from_name=")
	builder.WriteString(cm.FromName)
	builder.WriteString(", ")
	builder.WriteString("to_name=")
	builder.WriteString(cm.ToName)
	builder.WriteString(", ")
	builder.WriteString("private=")
	builder.WriteString(fmt.Sprintf("%v", cm.Private))
	builder.WriteString(", ")
	builder.WriteString("unread=")
	builder.WriteString(fmt.Sprintf("%v", cm.Unread))
	builder.WriteByte(')')
	return builder.String()
}

// NamedReads returns the Reads named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cm *ChannelMessage) NamedReads(name string) ([]*ChannelMessageRead, error) {
	if cm.Edges.namedReads == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cm.Edges.namedReads[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cm *ChannelMessage) appendNamedReads(name string, edges ...*ChannelMessageRead) {
	if cm.Edges.namedReads == nil {
		cm.Edges.namedReads = make(map[string][]*ChannelMessageRead)
	}
	if len(edges) == 0 {
		cm.Edges.namedReads[name] = []*ChannelMessageRead{}
	} else {
		cm.Edges.namedReads[name] = append(cm.Edges.namedReads[name], edges...)
	}
}

// ChannelMessages is a parsable slice of ChannelMessage.
type ChannelMessages []*ChannelMessage

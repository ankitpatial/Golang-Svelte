// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/usersession"
	"roofix/ent/usersessionsocket"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSessionSocketCreate is the builder for creating a UserSessionSocket entity.
type UserSessionSocketCreate struct {
	config
	mutation *UserSessionSocketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ussc *UserSessionSocketCreate) SetCreatedAt(t time.Time) *UserSessionSocketCreate {
	ussc.mutation.SetCreatedAt(t)
	return ussc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ussc *UserSessionSocketCreate) SetNillableCreatedAt(t *time.Time) *UserSessionSocketCreate {
	if t != nil {
		ussc.SetCreatedAt(*t)
	}
	return ussc
}

// SetUpdatedAt sets the "updated_at" field.
func (ussc *UserSessionSocketCreate) SetUpdatedAt(t time.Time) *UserSessionSocketCreate {
	ussc.mutation.SetUpdatedAt(t)
	return ussc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ussc *UserSessionSocketCreate) SetNillableUpdatedAt(t *time.Time) *UserSessionSocketCreate {
	if t != nil {
		ussc.SetUpdatedAt(*t)
	}
	return ussc
}

// SetID sets the "id" field.
func (ussc *UserSessionSocketCreate) SetID(s string) *UserSessionSocketCreate {
	ussc.mutation.SetID(s)
	return ussc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ussc *UserSessionSocketCreate) SetNillableID(s *string) *UserSessionSocketCreate {
	if s != nil {
		ussc.SetID(*s)
	}
	return ussc
}

// SetSessionID sets the "session" edge to the UserSession entity by ID.
func (ussc *UserSessionSocketCreate) SetSessionID(id string) *UserSessionSocketCreate {
	ussc.mutation.SetSessionID(id)
	return ussc
}

// SetSession sets the "session" edge to the UserSession entity.
func (ussc *UserSessionSocketCreate) SetSession(u *UserSession) *UserSessionSocketCreate {
	return ussc.SetSessionID(u.ID)
}

// Mutation returns the UserSessionSocketMutation object of the builder.
func (ussc *UserSessionSocketCreate) Mutation() *UserSessionSocketMutation {
	return ussc.mutation
}

// Save creates the UserSessionSocket in the database.
func (ussc *UserSessionSocketCreate) Save(ctx context.Context) (*UserSessionSocket, error) {
	ussc.defaults()
	return withHooks(ctx, ussc.sqlSave, ussc.mutation, ussc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ussc *UserSessionSocketCreate) SaveX(ctx context.Context) *UserSessionSocket {
	v, err := ussc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ussc *UserSessionSocketCreate) Exec(ctx context.Context) error {
	_, err := ussc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ussc *UserSessionSocketCreate) ExecX(ctx context.Context) {
	if err := ussc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ussc *UserSessionSocketCreate) defaults() {
	if _, ok := ussc.mutation.CreatedAt(); !ok {
		v := usersessionsocket.DefaultCreatedAt()
		ussc.mutation.SetCreatedAt(v)
	}
	if _, ok := ussc.mutation.UpdatedAt(); !ok {
		v := usersessionsocket.DefaultUpdatedAt()
		ussc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ussc.mutation.ID(); !ok {
		v := usersessionsocket.DefaultID()
		ussc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ussc *UserSessionSocketCreate) check() error {
	if _, ok := ussc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserSessionSocket.created_at"`)}
	}
	if _, ok := ussc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserSessionSocket.updated_at"`)}
	}
	if v, ok := ussc.mutation.ID(); ok {
		if err := usersessionsocket.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserSessionSocket.id": %w`, err)}
		}
	}
	if _, ok := ussc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required edge "UserSessionSocket.session"`)}
	}
	return nil
}

func (ussc *UserSessionSocketCreate) sqlSave(ctx context.Context) (*UserSessionSocket, error) {
	if err := ussc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ussc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ussc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserSessionSocket.ID type: %T", _spec.ID.Value)
		}
	}
	ussc.mutation.id = &_node.ID
	ussc.mutation.done = true
	return _node, nil
}

func (ussc *UserSessionSocketCreate) createSpec() (*UserSessionSocket, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSessionSocket{config: ussc.config}
		_spec = sqlgraph.NewCreateSpec(usersessionsocket.Table, sqlgraph.NewFieldSpec(usersessionsocket.FieldID, field.TypeString))
	)
	_spec.OnConflict = ussc.conflict
	if id, ok := ussc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ussc.mutation.CreatedAt(); ok {
		_spec.SetField(usersessionsocket.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ussc.mutation.UpdatedAt(); ok {
		_spec.SetField(usersessionsocket.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ussc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersessionsocket.SessionTable,
			Columns: []string{usersessionsocket.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sessions_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSessionSocket.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSessionSocketUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ussc *UserSessionSocketCreate) OnConflict(opts ...sql.ConflictOption) *UserSessionSocketUpsertOne {
	ussc.conflict = opts
	return &UserSessionSocketUpsertOne{
		create: ussc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSessionSocket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ussc *UserSessionSocketCreate) OnConflictColumns(columns ...string) *UserSessionSocketUpsertOne {
	ussc.conflict = append(ussc.conflict, sql.ConflictColumns(columns...))
	return &UserSessionSocketUpsertOne{
		create: ussc,
	}
}

type (
	// UserSessionSocketUpsertOne is the builder for "upsert"-ing
	//  one UserSessionSocket node.
	UserSessionSocketUpsertOne struct {
		create *UserSessionSocketCreate
	}

	// UserSessionSocketUpsert is the "OnConflict" setter.
	UserSessionSocketUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserSessionSocketUpsert) SetUpdatedAt(v time.Time) *UserSessionSocketUpsert {
	u.Set(usersessionsocket.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserSessionSocketUpsert) UpdateUpdatedAt() *UserSessionSocketUpsert {
	u.SetExcluded(usersessionsocket.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserSessionSocket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersessionsocket.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSessionSocketUpsertOne) UpdateNewValues() *UserSessionSocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usersessionsocket.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usersessionsocket.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSessionSocket.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserSessionSocketUpsertOne) Ignore() *UserSessionSocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSessionSocketUpsertOne) DoNothing() *UserSessionSocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSessionSocketCreate.OnConflict
// documentation for more info.
func (u *UserSessionSocketUpsertOne) Update(set func(*UserSessionSocketUpsert)) *UserSessionSocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSessionSocketUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserSessionSocketUpsertOne) SetUpdatedAt(v time.Time) *UserSessionSocketUpsertOne {
	return u.Update(func(s *UserSessionSocketUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserSessionSocketUpsertOne) UpdateUpdatedAt() *UserSessionSocketUpsertOne {
	return u.Update(func(s *UserSessionSocketUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserSessionSocketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSessionSocketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSessionSocketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserSessionSocketUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserSessionSocketUpsertOne.ID is not supported by MySQL driver. Use UserSessionSocketUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserSessionSocketUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserSessionSocketCreateBulk is the builder for creating many UserSessionSocket entities in bulk.
type UserSessionSocketCreateBulk struct {
	config
	builders []*UserSessionSocketCreate
	conflict []sql.ConflictOption
}

// Save creates the UserSessionSocket entities in the database.
func (usscb *UserSessionSocketCreateBulk) Save(ctx context.Context) ([]*UserSessionSocket, error) {
	specs := make([]*sqlgraph.CreateSpec, len(usscb.builders))
	nodes := make([]*UserSessionSocket, len(usscb.builders))
	mutators := make([]Mutator, len(usscb.builders))
	for i := range usscb.builders {
		func(i int, root context.Context) {
			builder := usscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSessionSocketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, usscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = usscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, usscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, usscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (usscb *UserSessionSocketCreateBulk) SaveX(ctx context.Context) []*UserSessionSocket {
	v, err := usscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usscb *UserSessionSocketCreateBulk) Exec(ctx context.Context) error {
	_, err := usscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usscb *UserSessionSocketCreateBulk) ExecX(ctx context.Context) {
	if err := usscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSessionSocket.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSessionSocketUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (usscb *UserSessionSocketCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserSessionSocketUpsertBulk {
	usscb.conflict = opts
	return &UserSessionSocketUpsertBulk{
		create: usscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSessionSocket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usscb *UserSessionSocketCreateBulk) OnConflictColumns(columns ...string) *UserSessionSocketUpsertBulk {
	usscb.conflict = append(usscb.conflict, sql.ConflictColumns(columns...))
	return &UserSessionSocketUpsertBulk{
		create: usscb,
	}
}

// UserSessionSocketUpsertBulk is the builder for "upsert"-ing
// a bulk of UserSessionSocket nodes.
type UserSessionSocketUpsertBulk struct {
	create *UserSessionSocketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserSessionSocket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersessionsocket.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSessionSocketUpsertBulk) UpdateNewValues() *UserSessionSocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usersessionsocket.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usersessionsocket.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSessionSocket.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserSessionSocketUpsertBulk) Ignore() *UserSessionSocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSessionSocketUpsertBulk) DoNothing() *UserSessionSocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSessionSocketCreateBulk.OnConflict
// documentation for more info.
func (u *UserSessionSocketUpsertBulk) Update(set func(*UserSessionSocketUpsert)) *UserSessionSocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSessionSocketUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserSessionSocketUpsertBulk) SetUpdatedAt(v time.Time) *UserSessionSocketUpsertBulk {
	return u.Update(func(s *UserSessionSocketUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserSessionSocketUpsertBulk) UpdateUpdatedAt() *UserSessionSocketUpsertBulk {
	return u.Update(func(s *UserSessionSocketUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserSessionSocketUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserSessionSocketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSessionSocketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSessionSocketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/job"
	"roofix/ent/jobassignmenthistory"
	"roofix/ent/partner"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobAssignmentHistoryCreate is the builder for creating a JobAssignmentHistory entity.
type JobAssignmentHistoryCreate struct {
	config
	mutation *JobAssignmentHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (jahc *JobAssignmentHistoryCreate) SetCreatedAt(t time.Time) *JobAssignmentHistoryCreate {
	jahc.mutation.SetCreatedAt(t)
	return jahc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jahc *JobAssignmentHistoryCreate) SetNillableCreatedAt(t *time.Time) *JobAssignmentHistoryCreate {
	if t != nil {
		jahc.SetCreatedAt(*t)
	}
	return jahc
}

// SetStatus sets the "status" field.
func (jahc *JobAssignmentHistoryCreate) SetStatus(eas enum.JobAssignmentStatus) *JobAssignmentHistoryCreate {
	jahc.mutation.SetStatus(eas)
	return jahc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jahc *JobAssignmentHistoryCreate) SetNillableStatus(eas *enum.JobAssignmentStatus) *JobAssignmentHistoryCreate {
	if eas != nil {
		jahc.SetStatus(*eas)
	}
	return jahc
}

// SetNote sets the "Note" field.
func (jahc *JobAssignmentHistoryCreate) SetNote(s string) *JobAssignmentHistoryCreate {
	jahc.mutation.SetNote(s)
	return jahc
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (jahc *JobAssignmentHistoryCreate) SetNillableNote(s *string) *JobAssignmentHistoryCreate {
	if s != nil {
		jahc.SetNote(*s)
	}
	return jahc
}

// SetID sets the "id" field.
func (jahc *JobAssignmentHistoryCreate) SetID(s string) *JobAssignmentHistoryCreate {
	jahc.mutation.SetID(s)
	return jahc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jahc *JobAssignmentHistoryCreate) SetNillableID(s *string) *JobAssignmentHistoryCreate {
	if s != nil {
		jahc.SetID(*s)
	}
	return jahc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jahc *JobAssignmentHistoryCreate) SetJobID(id string) *JobAssignmentHistoryCreate {
	jahc.mutation.SetJobID(id)
	return jahc
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (jahc *JobAssignmentHistoryCreate) SetNillableJobID(id *string) *JobAssignmentHistoryCreate {
	if id != nil {
		jahc = jahc.SetJobID(*id)
	}
	return jahc
}

// SetJob sets the "job" edge to the Job entity.
func (jahc *JobAssignmentHistoryCreate) SetJob(j *Job) *JobAssignmentHistoryCreate {
	return jahc.SetJobID(j.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (jahc *JobAssignmentHistoryCreate) SetPartnerID(id string) *JobAssignmentHistoryCreate {
	jahc.mutation.SetPartnerID(id)
	return jahc
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (jahc *JobAssignmentHistoryCreate) SetNillablePartnerID(id *string) *JobAssignmentHistoryCreate {
	if id != nil {
		jahc = jahc.SetPartnerID(*id)
	}
	return jahc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (jahc *JobAssignmentHistoryCreate) SetPartner(p *Partner) *JobAssignmentHistoryCreate {
	return jahc.SetPartnerID(p.ID)
}

// Mutation returns the JobAssignmentHistoryMutation object of the builder.
func (jahc *JobAssignmentHistoryCreate) Mutation() *JobAssignmentHistoryMutation {
	return jahc.mutation
}

// Save creates the JobAssignmentHistory in the database.
func (jahc *JobAssignmentHistoryCreate) Save(ctx context.Context) (*JobAssignmentHistory, error) {
	jahc.defaults()
	return withHooks(ctx, jahc.sqlSave, jahc.mutation, jahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jahc *JobAssignmentHistoryCreate) SaveX(ctx context.Context) *JobAssignmentHistory {
	v, err := jahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jahc *JobAssignmentHistoryCreate) Exec(ctx context.Context) error {
	_, err := jahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jahc *JobAssignmentHistoryCreate) ExecX(ctx context.Context) {
	if err := jahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jahc *JobAssignmentHistoryCreate) defaults() {
	if _, ok := jahc.mutation.CreatedAt(); !ok {
		v := jobassignmenthistory.DefaultCreatedAt()
		jahc.mutation.SetCreatedAt(v)
	}
	if _, ok := jahc.mutation.Status(); !ok {
		v := jobassignmenthistory.DefaultStatus
		jahc.mutation.SetStatus(v)
	}
	if _, ok := jahc.mutation.ID(); !ok {
		v := jobassignmenthistory.DefaultID()
		jahc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jahc *JobAssignmentHistoryCreate) check() error {
	if _, ok := jahc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobAssignmentHistory.created_at"`)}
	}
	if _, ok := jahc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "JobAssignmentHistory.status"`)}
	}
	if v, ok := jahc.mutation.Status(); ok {
		if err := jobassignmenthistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "JobAssignmentHistory.status": %w`, err)}
		}
	}
	if v, ok := jahc.mutation.Note(); ok {
		if err := jobassignmenthistory.NoteValidator(v); err != nil {
			return &ValidationError{Name: "Note", err: fmt.Errorf(`ent: validator failed for field "JobAssignmentHistory.Note": %w`, err)}
		}
	}
	if v, ok := jahc.mutation.ID(); ok {
		if err := jobassignmenthistory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "JobAssignmentHistory.id": %w`, err)}
		}
	}
	return nil
}

func (jahc *JobAssignmentHistoryCreate) sqlSave(ctx context.Context) (*JobAssignmentHistory, error) {
	if err := jahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobAssignmentHistory.ID type: %T", _spec.ID.Value)
		}
	}
	jahc.mutation.id = &_node.ID
	jahc.mutation.done = true
	return _node, nil
}

func (jahc *JobAssignmentHistoryCreate) createSpec() (*JobAssignmentHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobAssignmentHistory{config: jahc.config}
		_spec = sqlgraph.NewCreateSpec(jobassignmenthistory.Table, sqlgraph.NewFieldSpec(jobassignmenthistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = jahc.conflict
	if id, ok := jahc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jahc.mutation.CreatedAt(); ok {
		_spec.SetField(jobassignmenthistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jahc.mutation.Status(); ok {
		_spec.SetField(jobassignmenthistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := jahc.mutation.Note(); ok {
		_spec.SetField(jobassignmenthistory.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := jahc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobassignmenthistory.JobTable,
			Columns: []string{jobassignmenthistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jahc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobassignmenthistory.PartnerTable,
			Columns: []string{jobassignmenthistory.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobAssignmentHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobAssignmentHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jahc *JobAssignmentHistoryCreate) OnConflict(opts ...sql.ConflictOption) *JobAssignmentHistoryUpsertOne {
	jahc.conflict = opts
	return &JobAssignmentHistoryUpsertOne{
		create: jahc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobAssignmentHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jahc *JobAssignmentHistoryCreate) OnConflictColumns(columns ...string) *JobAssignmentHistoryUpsertOne {
	jahc.conflict = append(jahc.conflict, sql.ConflictColumns(columns...))
	return &JobAssignmentHistoryUpsertOne{
		create: jahc,
	}
}

type (
	// JobAssignmentHistoryUpsertOne is the builder for "upsert"-ing
	//  one JobAssignmentHistory node.
	JobAssignmentHistoryUpsertOne struct {
		create *JobAssignmentHistoryCreate
	}

	// JobAssignmentHistoryUpsert is the "OnConflict" setter.
	JobAssignmentHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetNote sets the "Note" field.
func (u *JobAssignmentHistoryUpsert) SetNote(v string) *JobAssignmentHistoryUpsert {
	u.Set(jobassignmenthistory.FieldNote, v)
	return u
}

// UpdateNote sets the "Note" field to the value that was provided on create.
func (u *JobAssignmentHistoryUpsert) UpdateNote() *JobAssignmentHistoryUpsert {
	u.SetExcluded(jobassignmenthistory.FieldNote)
	return u
}

// ClearNote clears the value of the "Note" field.
func (u *JobAssignmentHistoryUpsert) ClearNote() *JobAssignmentHistoryUpsert {
	u.SetNull(jobassignmenthistory.FieldNote)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobAssignmentHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobassignmenthistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobAssignmentHistoryUpsertOne) UpdateNewValues() *JobAssignmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobassignmenthistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobassignmenthistory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Status(); exists {
			s.SetIgnore(jobassignmenthistory.FieldStatus)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobAssignmentHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobAssignmentHistoryUpsertOne) Ignore() *JobAssignmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobAssignmentHistoryUpsertOne) DoNothing() *JobAssignmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobAssignmentHistoryCreate.OnConflict
// documentation for more info.
func (u *JobAssignmentHistoryUpsertOne) Update(set func(*JobAssignmentHistoryUpsert)) *JobAssignmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobAssignmentHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetNote sets the "Note" field.
func (u *JobAssignmentHistoryUpsertOne) SetNote(v string) *JobAssignmentHistoryUpsertOne {
	return u.Update(func(s *JobAssignmentHistoryUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "Note" field to the value that was provided on create.
func (u *JobAssignmentHistoryUpsertOne) UpdateNote() *JobAssignmentHistoryUpsertOne {
	return u.Update(func(s *JobAssignmentHistoryUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "Note" field.
func (u *JobAssignmentHistoryUpsertOne) ClearNote() *JobAssignmentHistoryUpsertOne {
	return u.Update(func(s *JobAssignmentHistoryUpsert) {
		s.ClearNote()
	})
}

// Exec executes the query.
func (u *JobAssignmentHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobAssignmentHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobAssignmentHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobAssignmentHistoryUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: JobAssignmentHistoryUpsertOne.ID is not supported by MySQL driver. Use JobAssignmentHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobAssignmentHistoryUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobAssignmentHistoryCreateBulk is the builder for creating many JobAssignmentHistory entities in bulk.
type JobAssignmentHistoryCreateBulk struct {
	config
	builders []*JobAssignmentHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the JobAssignmentHistory entities in the database.
func (jahcb *JobAssignmentHistoryCreateBulk) Save(ctx context.Context) ([]*JobAssignmentHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jahcb.builders))
	nodes := make([]*JobAssignmentHistory, len(jahcb.builders))
	mutators := make([]Mutator, len(jahcb.builders))
	for i := range jahcb.builders {
		func(i int, root context.Context) {
			builder := jahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobAssignmentHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jahcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jahcb *JobAssignmentHistoryCreateBulk) SaveX(ctx context.Context) []*JobAssignmentHistory {
	v, err := jahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jahcb *JobAssignmentHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := jahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jahcb *JobAssignmentHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := jahcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobAssignmentHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobAssignmentHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (jahcb *JobAssignmentHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobAssignmentHistoryUpsertBulk {
	jahcb.conflict = opts
	return &JobAssignmentHistoryUpsertBulk{
		create: jahcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobAssignmentHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jahcb *JobAssignmentHistoryCreateBulk) OnConflictColumns(columns ...string) *JobAssignmentHistoryUpsertBulk {
	jahcb.conflict = append(jahcb.conflict, sql.ConflictColumns(columns...))
	return &JobAssignmentHistoryUpsertBulk{
		create: jahcb,
	}
}

// JobAssignmentHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of JobAssignmentHistory nodes.
type JobAssignmentHistoryUpsertBulk struct {
	create *JobAssignmentHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobAssignmentHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobassignmenthistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobAssignmentHistoryUpsertBulk) UpdateNewValues() *JobAssignmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobassignmenthistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobassignmenthistory.FieldCreatedAt)
			}
			if _, exists := b.mutation.Status(); exists {
				s.SetIgnore(jobassignmenthistory.FieldStatus)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobAssignmentHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobAssignmentHistoryUpsertBulk) Ignore() *JobAssignmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobAssignmentHistoryUpsertBulk) DoNothing() *JobAssignmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobAssignmentHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *JobAssignmentHistoryUpsertBulk) Update(set func(*JobAssignmentHistoryUpsert)) *JobAssignmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobAssignmentHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetNote sets the "Note" field.
func (u *JobAssignmentHistoryUpsertBulk) SetNote(v string) *JobAssignmentHistoryUpsertBulk {
	return u.Update(func(s *JobAssignmentHistoryUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "Note" field to the value that was provided on create.
func (u *JobAssignmentHistoryUpsertBulk) UpdateNote() *JobAssignmentHistoryUpsertBulk {
	return u.Update(func(s *JobAssignmentHistoryUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "Note" field.
func (u *JobAssignmentHistoryUpsertBulk) ClearNote() *JobAssignmentHistoryUpsertBulk {
	return u.Update(func(s *JobAssignmentHistoryUpsert) {
		s.ClearNote()
	})
}

// Exec executes the query.
func (u *JobAssignmentHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobAssignmentHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobAssignmentHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobAssignmentHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

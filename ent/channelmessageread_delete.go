// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/channelmessageread"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelMessageReadDelete is the builder for deleting a ChannelMessageRead entity.
type ChannelMessageReadDelete struct {
	config
	hooks    []Hook
	mutation *ChannelMessageReadMutation
}

// Where appends a list predicates to the ChannelMessageReadDelete builder.
func (cmrd *ChannelMessageReadDelete) Where(ps ...predicate.ChannelMessageRead) *ChannelMessageReadDelete {
	cmrd.mutation.Where(ps...)
	return cmrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cmrd *ChannelMessageReadDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cmrd.sqlExec, cmrd.mutation, cmrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cmrd *ChannelMessageReadDelete) ExecX(ctx context.Context) int {
	n, err := cmrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cmrd *ChannelMessageReadDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(channelmessageread.Table, sqlgraph.NewFieldSpec(channelmessageread.FieldID, field.TypeString))
	if ps := cmrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cmrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cmrd.mutation.done = true
	return affected, err
}

// ChannelMessageReadDeleteOne is the builder for deleting a single ChannelMessageRead entity.
type ChannelMessageReadDeleteOne struct {
	cmrd *ChannelMessageReadDelete
}

// Where appends a list predicates to the ChannelMessageReadDelete builder.
func (cmrdo *ChannelMessageReadDeleteOne) Where(ps ...predicate.ChannelMessageRead) *ChannelMessageReadDeleteOne {
	cmrdo.cmrd.mutation.Where(ps...)
	return cmrdo
}

// Exec executes the deletion query.
func (cmrdo *ChannelMessageReadDeleteOne) Exec(ctx context.Context) error {
	n, err := cmrdo.cmrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{channelmessageread.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cmrdo *ChannelMessageReadDeleteOne) ExecX(ctx context.Context) {
	if err := cmrdo.Exec(ctx); err != nil {
		panic(err)
	}
}

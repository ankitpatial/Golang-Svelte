// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyCreate is the builder for creating a Survey entity.
type SurveyCreate struct {
	config
	mutation *SurveyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SurveyCreate) SetCreatedAt(t time.Time) *SurveyCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableCreatedAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SurveyCreate) SetUpdatedAt(t time.Time) *SurveyCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableUpdatedAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDate sets the "date" field.
func (sc *SurveyCreate) SetDate(s string) *SurveyCreate {
	sc.mutation.SetDate(s)
	return sc
}

// SetSlot sets the "slot" field.
func (sc *SurveyCreate) SetSlot(s string) *SurveyCreate {
	sc.mutation.SetSlot(s)
	return sc
}

// SetSlotID sets the "slot_id" field.
func (sc *SurveyCreate) SetSlotID(s string) *SurveyCreate {
	sc.mutation.SetSlotID(s)
	return sc
}

// SetFrom sets the "from" field.
func (sc *SurveyCreate) SetFrom(t time.Time) *SurveyCreate {
	sc.mutation.SetFrom(t)
	return sc
}

// SetTo sets the "to" field.
func (sc *SurveyCreate) SetTo(t time.Time) *SurveyCreate {
	sc.mutation.SetTo(t)
	return sc
}

// SetUntil sets the "until" field.
func (sc *SurveyCreate) SetUntil(t time.Time) *SurveyCreate {
	sc.mutation.SetUntil(t)
	return sc
}

// SetNillableUntil sets the "until" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableUntil(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetUntil(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SurveyCreate) SetName(s string) *SurveyCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableName(s *string) *SurveyCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetAddress sets the "address" field.
func (sc *SurveyCreate) SetAddress(s string) *SurveyCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableAddress(s *string) *SurveyCreate {
	if s != nil {
		sc.SetAddress(*s)
	}
	return sc
}

// SetPhone sets the "phone" field.
func (sc *SurveyCreate) SetPhone(s string) *SurveyCreate {
	sc.mutation.SetPhone(s)
	return sc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sc *SurveyCreate) SetNillablePhone(s *string) *SurveyCreate {
	if s != nil {
		sc.SetPhone(*s)
	}
	return sc
}

// SetNotes sets the "notes" field.
func (sc *SurveyCreate) SetNotes(s string) *SurveyCreate {
	sc.mutation.SetNotes(s)
	return sc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableNotes(s *string) *SurveyCreate {
	if s != nil {
		sc.SetNotes(*s)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SurveyCreate) SetStatus(es enum.SurveyStatus) *SurveyCreate {
	sc.mutation.SetStatus(es)
	return sc
}

// SetProgress sets the "progress" field.
func (sc *SurveyCreate) SetProgress(ep enum.SurveyProgress) *SurveyCreate {
	sc.mutation.SetProgress(ep)
	return sc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableProgress(ep *enum.SurveyProgress) *SurveyCreate {
	if ep != nil {
		sc.SetProgress(*ep)
	}
	return sc
}

// SetProgressAt sets the "progress_at" field.
func (sc *SurveyCreate) SetProgressAt(t time.Time) *SurveyCreate {
	sc.mutation.SetProgressAt(t)
	return sc
}

// SetNillableProgressAt sets the "progress_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableProgressAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetProgressAt(*t)
	}
	return sc
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (sc *SurveyCreate) SetProgressFlagAt(t time.Time) *SurveyCreate {
	sc.mutation.SetProgressFlagAt(t)
	return sc
}

// SetNillableProgressFlagAt sets the "progress_flag_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableProgressFlagAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetProgressFlagAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SurveyCreate) SetID(s string) *SurveyCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableID(s *string) *SurveyCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddProgressHistoryIDs adds the "progress_history" edge to the SurveyProgress entity by IDs.
func (sc *SurveyCreate) AddProgressHistoryIDs(ids ...string) *SurveyCreate {
	sc.mutation.AddProgressHistoryIDs(ids...)
	return sc
}

// AddProgressHistory adds the "progress_history" edges to the SurveyProgress entity.
func (sc *SurveyCreate) AddProgressHistory(s ...*SurveyProgress) *SurveyCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddProgressHistoryIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (sc *SurveyCreate) SetCreatedByID(id string) *SurveyCreate {
	sc.mutation.SetCreatedByID(id)
	return sc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (sc *SurveyCreate) SetNillableCreatedByID(id *string) *SurveyCreate {
	if id != nil {
		sc = sc.SetCreatedByID(*id)
	}
	return sc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (sc *SurveyCreate) SetCreatedBy(u *User) *SurveyCreate {
	return sc.SetCreatedByID(u.ID)
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (sc *SurveyCreate) SetPartnerID(id string) *SurveyCreate {
	sc.mutation.SetPartnerID(id)
	return sc
}

// SetNillablePartnerID sets the "partner" edge to the Partner entity by ID if the given value is not nil.
func (sc *SurveyCreate) SetNillablePartnerID(id *string) *SurveyCreate {
	if id != nil {
		sc = sc.SetPartnerID(*id)
	}
	return sc
}

// SetPartner sets the "partner" edge to the Partner entity.
func (sc *SurveyCreate) SetPartner(p *Partner) *SurveyCreate {
	return sc.SetPartnerID(p.ID)
}

// Mutation returns the SurveyMutation object of the builder.
func (sc *SurveyCreate) Mutation() *SurveyMutation {
	return sc.mutation
}

// Save creates the Survey in the database.
func (sc *SurveyCreate) Save(ctx context.Context) (*Survey, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SurveyCreate) SaveX(ctx context.Context) *Survey {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SurveyCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SurveyCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SurveyCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := survey.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := survey.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := survey.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SurveyCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Survey.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Survey.updated_at"`)}
	}
	if _, ok := sc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Survey.date"`)}
	}
	if v, ok := sc.mutation.Date(); ok {
		if err := survey.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Survey.date": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Slot(); !ok {
		return &ValidationError{Name: "slot", err: errors.New(`ent: missing required field "Survey.slot"`)}
	}
	if v, ok := sc.mutation.Slot(); ok {
		if err := survey.SlotValidator(v); err != nil {
			return &ValidationError{Name: "slot", err: fmt.Errorf(`ent: validator failed for field "Survey.slot": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SlotID(); !ok {
		return &ValidationError{Name: "slot_id", err: errors.New(`ent: missing required field "Survey.slot_id"`)}
	}
	if v, ok := sc.mutation.SlotID(); ok {
		if err := survey.SlotIDValidator(v); err != nil {
			return &ValidationError{Name: "slot_id", err: fmt.Errorf(`ent: validator failed for field "Survey.slot_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Survey.from"`)}
	}
	if _, ok := sc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Survey.to"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := survey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Survey.name": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Address(); ok {
		if err := survey.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Survey.address": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Phone(); ok {
		if err := survey.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Survey.phone": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Notes(); ok {
		if err := survey.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "Survey.notes": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Survey.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := survey.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Survey.status": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Progress(); ok {
		if err := survey.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "Survey.progress": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := survey.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Survey.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SurveyCreate) sqlSave(ctx context.Context) (*Survey, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Survey.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SurveyCreate) createSpec() (*Survey, *sqlgraph.CreateSpec) {
	var (
		_node = &Survey{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(survey.Table, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(survey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Date(); ok {
		_spec.SetField(survey.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := sc.mutation.Slot(); ok {
		_spec.SetField(survey.FieldSlot, field.TypeString, value)
		_node.Slot = value
	}
	if value, ok := sc.mutation.SlotID(); ok {
		_spec.SetField(survey.FieldSlotID, field.TypeString, value)
		_node.SlotID = value
	}
	if value, ok := sc.mutation.From(); ok {
		_spec.SetField(survey.FieldFrom, field.TypeTime, value)
		_node.From = value
	}
	if value, ok := sc.mutation.To(); ok {
		_spec.SetField(survey.FieldTo, field.TypeTime, value)
		_node.To = value
	}
	if value, ok := sc.mutation.Until(); ok {
		_spec.SetField(survey.FieldUntil, field.TypeTime, value)
		_node.Until = &value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(survey.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.SetField(survey.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := sc.mutation.Phone(); ok {
		_spec.SetField(survey.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := sc.mutation.Notes(); ok {
		_spec.SetField(survey.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(survey.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Progress(); ok {
		_spec.SetField(survey.FieldProgress, field.TypeEnum, value)
		_node.Progress = &value
	}
	if value, ok := sc.mutation.ProgressAt(); ok {
		_spec.SetField(survey.FieldProgressAt, field.TypeTime, value)
		_node.ProgressAt = &value
	}
	if value, ok := sc.mutation.ProgressFlagAt(); ok {
		_spec.SetField(survey.FieldProgressFlagAt, field.TypeTime, value)
		_node.ProgressFlagAt = &value
	}
	if nodes := sc.mutation.ProgressHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.ProgressHistoryTable,
			Columns: []string{survey.ProgressHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyprogress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.CreatedByTable,
			Columns: []string{survey.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.PartnerTable,
			Columns: []string{survey.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Survey.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *SurveyCreate) OnConflict(opts ...sql.ConflictOption) *SurveyUpsertOne {
	sc.conflict = opts
	return &SurveyUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SurveyCreate) OnConflictColumns(columns ...string) *SurveyUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SurveyUpsertOne{
		create: sc,
	}
}

type (
	// SurveyUpsertOne is the builder for "upsert"-ing
	//  one Survey node.
	SurveyUpsertOne struct {
		create *SurveyCreate
	}

	// SurveyUpsert is the "OnConflict" setter.
	SurveyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyUpsert) SetUpdatedAt(v time.Time) *SurveyUpsert {
	u.Set(survey.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateUpdatedAt() *SurveyUpsert {
	u.SetExcluded(survey.FieldUpdatedAt)
	return u
}

// SetUntil sets the "until" field.
func (u *SurveyUpsert) SetUntil(v time.Time) *SurveyUpsert {
	u.Set(survey.FieldUntil, v)
	return u
}

// UpdateUntil sets the "until" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateUntil() *SurveyUpsert {
	u.SetExcluded(survey.FieldUntil)
	return u
}

// ClearUntil clears the value of the "until" field.
func (u *SurveyUpsert) ClearUntil() *SurveyUpsert {
	u.SetNull(survey.FieldUntil)
	return u
}

// SetName sets the "name" field.
func (u *SurveyUpsert) SetName(v string) *SurveyUpsert {
	u.Set(survey.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateName() *SurveyUpsert {
	u.SetExcluded(survey.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *SurveyUpsert) ClearName() *SurveyUpsert {
	u.SetNull(survey.FieldName)
	return u
}

// SetAddress sets the "address" field.
func (u *SurveyUpsert) SetAddress(v string) *SurveyUpsert {
	u.Set(survey.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateAddress() *SurveyUpsert {
	u.SetExcluded(survey.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *SurveyUpsert) ClearAddress() *SurveyUpsert {
	u.SetNull(survey.FieldAddress)
	return u
}

// SetPhone sets the "phone" field.
func (u *SurveyUpsert) SetPhone(v string) *SurveyUpsert {
	u.Set(survey.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SurveyUpsert) UpdatePhone() *SurveyUpsert {
	u.SetExcluded(survey.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *SurveyUpsert) ClearPhone() *SurveyUpsert {
	u.SetNull(survey.FieldPhone)
	return u
}

// SetNotes sets the "notes" field.
func (u *SurveyUpsert) SetNotes(v string) *SurveyUpsert {
	u.Set(survey.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateNotes() *SurveyUpsert {
	u.SetExcluded(survey.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *SurveyUpsert) ClearNotes() *SurveyUpsert {
	u.SetNull(survey.FieldNotes)
	return u
}

// SetStatus sets the "status" field.
func (u *SurveyUpsert) SetStatus(v enum.SurveyStatus) *SurveyUpsert {
	u.Set(survey.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateStatus() *SurveyUpsert {
	u.SetExcluded(survey.FieldStatus)
	return u
}

// SetProgress sets the "progress" field.
func (u *SurveyUpsert) SetProgress(v enum.SurveyProgress) *SurveyUpsert {
	u.Set(survey.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateProgress() *SurveyUpsert {
	u.SetExcluded(survey.FieldProgress)
	return u
}

// ClearProgress clears the value of the "progress" field.
func (u *SurveyUpsert) ClearProgress() *SurveyUpsert {
	u.SetNull(survey.FieldProgress)
	return u
}

// SetProgressAt sets the "progress_at" field.
func (u *SurveyUpsert) SetProgressAt(v time.Time) *SurveyUpsert {
	u.Set(survey.FieldProgressAt, v)
	return u
}

// UpdateProgressAt sets the "progress_at" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateProgressAt() *SurveyUpsert {
	u.SetExcluded(survey.FieldProgressAt)
	return u
}

// ClearProgressAt clears the value of the "progress_at" field.
func (u *SurveyUpsert) ClearProgressAt() *SurveyUpsert {
	u.SetNull(survey.FieldProgressAt)
	return u
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (u *SurveyUpsert) SetProgressFlagAt(v time.Time) *SurveyUpsert {
	u.Set(survey.FieldProgressFlagAt, v)
	return u
}

// UpdateProgressFlagAt sets the "progress_flag_at" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateProgressFlagAt() *SurveyUpsert {
	u.SetExcluded(survey.FieldProgressFlagAt)
	return u
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (u *SurveyUpsert) ClearProgressFlagAt() *SurveyUpsert {
	u.SetNull(survey.FieldProgressFlagAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(survey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyUpsertOne) UpdateNewValues() *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(survey.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(survey.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Date(); exists {
			s.SetIgnore(survey.FieldDate)
		}
		if _, exists := u.create.mutation.Slot(); exists {
			s.SetIgnore(survey.FieldSlot)
		}
		if _, exists := u.create.mutation.SlotID(); exists {
			s.SetIgnore(survey.FieldSlotID)
		}
		if _, exists := u.create.mutation.From(); exists {
			s.SetIgnore(survey.FieldFrom)
		}
		if _, exists := u.create.mutation.To(); exists {
			s.SetIgnore(survey.FieldTo)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Survey.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyUpsertOne) Ignore() *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyUpsertOne) DoNothing() *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyCreate.OnConflict
// documentation for more info.
func (u *SurveyUpsertOne) Update(set func(*SurveyUpsert)) *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyUpsertOne) SetUpdatedAt(v time.Time) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateUpdatedAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUntil sets the "until" field.
func (u *SurveyUpsertOne) SetUntil(v time.Time) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUntil(v)
	})
}

// UpdateUntil sets the "until" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateUntil() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUntil()
	})
}

// ClearUntil clears the value of the "until" field.
func (u *SurveyUpsertOne) ClearUntil() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearUntil()
	})
}

// SetName sets the "name" field.
func (u *SurveyUpsertOne) SetName(v string) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateName() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SurveyUpsertOne) ClearName() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearName()
	})
}

// SetAddress sets the "address" field.
func (u *SurveyUpsertOne) SetAddress(v string) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateAddress() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *SurveyUpsertOne) ClearAddress() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearAddress()
	})
}

// SetPhone sets the "phone" field.
func (u *SurveyUpsertOne) SetPhone(v string) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdatePhone() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *SurveyUpsertOne) ClearPhone() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearPhone()
	})
}

// SetNotes sets the "notes" field.
func (u *SurveyUpsertOne) SetNotes(v string) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateNotes() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *SurveyUpsertOne) ClearNotes() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearNotes()
	})
}

// SetStatus sets the "status" field.
func (u *SurveyUpsertOne) SetStatus(v enum.SurveyStatus) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateStatus() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateStatus()
	})
}

// SetProgress sets the "progress" field.
func (u *SurveyUpsertOne) SetProgress(v enum.SurveyProgress) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateProgress() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateProgress()
	})
}

// ClearProgress clears the value of the "progress" field.
func (u *SurveyUpsertOne) ClearProgress() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearProgress()
	})
}

// SetProgressAt sets the "progress_at" field.
func (u *SurveyUpsertOne) SetProgressAt(v time.Time) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetProgressAt(v)
	})
}

// UpdateProgressAt sets the "progress_at" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateProgressAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateProgressAt()
	})
}

// ClearProgressAt clears the value of the "progress_at" field.
func (u *SurveyUpsertOne) ClearProgressAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearProgressAt()
	})
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (u *SurveyUpsertOne) SetProgressFlagAt(v time.Time) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetProgressFlagAt(v)
	})
}

// UpdateProgressFlagAt sets the "progress_flag_at" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateProgressFlagAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateProgressFlagAt()
	})
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (u *SurveyUpsertOne) ClearProgressFlagAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearProgressFlagAt()
	})
}

// Exec executes the query.
func (u *SurveyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SurveyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SurveyUpsertOne.ID is not supported by MySQL driver. Use SurveyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyCreateBulk is the builder for creating many Survey entities in bulk.
type SurveyCreateBulk struct {
	config
	builders []*SurveyCreate
	conflict []sql.ConflictOption
}

// Save creates the Survey entities in the database.
func (scb *SurveyCreateBulk) Save(ctx context.Context) ([]*Survey, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Survey, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SurveyCreateBulk) SaveX(ctx context.Context) []*Survey {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SurveyCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SurveyCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Survey.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *SurveyCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyUpsertBulk {
	scb.conflict = opts
	return &SurveyUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SurveyCreateBulk) OnConflictColumns(columns ...string) *SurveyUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SurveyUpsertBulk{
		create: scb,
	}
}

// SurveyUpsertBulk is the builder for "upsert"-ing
// a bulk of Survey nodes.
type SurveyUpsertBulk struct {
	create *SurveyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(survey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyUpsertBulk) UpdateNewValues() *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(survey.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(survey.FieldCreatedAt)
			}
			if _, exists := b.mutation.Date(); exists {
				s.SetIgnore(survey.FieldDate)
			}
			if _, exists := b.mutation.Slot(); exists {
				s.SetIgnore(survey.FieldSlot)
			}
			if _, exists := b.mutation.SlotID(); exists {
				s.SetIgnore(survey.FieldSlotID)
			}
			if _, exists := b.mutation.From(); exists {
				s.SetIgnore(survey.FieldFrom)
			}
			if _, exists := b.mutation.To(); exists {
				s.SetIgnore(survey.FieldTo)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyUpsertBulk) Ignore() *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyUpsertBulk) DoNothing() *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyUpsertBulk) Update(set func(*SurveyUpsert)) *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyUpsertBulk) SetUpdatedAt(v time.Time) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateUpdatedAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUntil sets the "until" field.
func (u *SurveyUpsertBulk) SetUntil(v time.Time) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUntil(v)
	})
}

// UpdateUntil sets the "until" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateUntil() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUntil()
	})
}

// ClearUntil clears the value of the "until" field.
func (u *SurveyUpsertBulk) ClearUntil() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearUntil()
	})
}

// SetName sets the "name" field.
func (u *SurveyUpsertBulk) SetName(v string) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateName() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SurveyUpsertBulk) ClearName() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearName()
	})
}

// SetAddress sets the "address" field.
func (u *SurveyUpsertBulk) SetAddress(v string) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateAddress() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *SurveyUpsertBulk) ClearAddress() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearAddress()
	})
}

// SetPhone sets the "phone" field.
func (u *SurveyUpsertBulk) SetPhone(v string) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdatePhone() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *SurveyUpsertBulk) ClearPhone() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearPhone()
	})
}

// SetNotes sets the "notes" field.
func (u *SurveyUpsertBulk) SetNotes(v string) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateNotes() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *SurveyUpsertBulk) ClearNotes() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearNotes()
	})
}

// SetStatus sets the "status" field.
func (u *SurveyUpsertBulk) SetStatus(v enum.SurveyStatus) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateStatus() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateStatus()
	})
}

// SetProgress sets the "progress" field.
func (u *SurveyUpsertBulk) SetProgress(v enum.SurveyProgress) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateProgress() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateProgress()
	})
}

// ClearProgress clears the value of the "progress" field.
func (u *SurveyUpsertBulk) ClearProgress() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearProgress()
	})
}

// SetProgressAt sets the "progress_at" field.
func (u *SurveyUpsertBulk) SetProgressAt(v time.Time) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetProgressAt(v)
	})
}

// UpdateProgressAt sets the "progress_at" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateProgressAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateProgressAt()
	})
}

// ClearProgressAt clears the value of the "progress_at" field.
func (u *SurveyUpsertBulk) ClearProgressAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearProgressAt()
	})
}

// SetProgressFlagAt sets the "progress_flag_at" field.
func (u *SurveyUpsertBulk) SetProgressFlagAt(v time.Time) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetProgressFlagAt(v)
	})
}

// UpdateProgressFlagAt sets the "progress_flag_at" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateProgressFlagAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateProgressFlagAt()
	})
}

// ClearProgressFlagAt clears the value of the "progress_flag_at" field.
func (u *SurveyUpsertBulk) ClearProgressFlagAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.ClearProgressFlagAt()
	})
}

// Exec executes the query.
func (u *SurveyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SurveyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SurveyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

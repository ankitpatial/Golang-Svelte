// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/postalcode"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PostalCode is the model entity for the PostalCode schema.
type PostalCode struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// StateAbr holds the value of the "state_abr" field.
	StateAbr string `json:"state_abr,omitempty"`
	// RegionID holds the value of the "region_id" field.
	RegionID uint8 `json:"region_id,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// accuracy of lat/lng, 1=estimated, 4=geonameid, 6=centroid
	Accuracy uint8 `json:"accuracy,omitempty"`
	// roofix service area
	ServiceArea bool `json:"service_area,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostalCodeQuery when eager-loading is set.
	Edges        PostalCodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostalCodeEdges holds the relations/edges for other nodes in the graph.
type PostalCodeEdges struct {
	// Pricing holds the value of the pricing edge.
	Pricing []*Pricing `json:"pricing,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPricing map[string][]*Pricing
}

// PricingOrErr returns the Pricing value or an error if the edge
// was not loaded in eager-loading.
func (e PostalCodeEdges) PricingOrErr() ([]*Pricing, error) {
	if e.loadedTypes[0] {
		return e.Pricing, nil
	}
	return nil, &NotLoadedError{edge: "pricing"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostalCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postalcode.FieldServiceArea:
			values[i] = new(sql.NullBool)
		case postalcode.FieldLatitude, postalcode.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case postalcode.FieldRegionID, postalcode.FieldAccuracy:
			values[i] = new(sql.NullInt64)
		case postalcode.FieldID, postalcode.FieldCountry, postalcode.FieldCode, postalcode.FieldCity, postalcode.FieldState, postalcode.FieldStateAbr:
			values[i] = new(sql.NullString)
		case postalcode.FieldCreatedAt, postalcode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostalCode fields.
func (pc *PostalCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postalcode.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pc.ID = value.String
			}
		case postalcode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case postalcode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case postalcode.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				pc.Country = value.String
			}
		case postalcode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pc.Code = value.String
			}
		case postalcode.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				pc.City = value.String
			}
		case postalcode.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				pc.State = value.String
			}
		case postalcode.FieldStateAbr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_abr", values[i])
			} else if value.Valid {
				pc.StateAbr = value.String
			}
		case postalcode.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field region_id", values[i])
			} else if value.Valid {
				pc.RegionID = uint8(value.Int64)
			}
		case postalcode.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				pc.Latitude = value.Float64
			}
		case postalcode.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				pc.Longitude = value.Float64
			}
		case postalcode.FieldAccuracy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accuracy", values[i])
			} else if value.Valid {
				pc.Accuracy = uint8(value.Int64)
			}
		case postalcode.FieldServiceArea:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field service_area", values[i])
			} else if value.Valid {
				pc.ServiceArea = value.Bool
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostalCode.
// This includes values selected through modifiers, order, etc.
func (pc *PostalCode) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryPricing queries the "pricing" edge of the PostalCode entity.
func (pc *PostalCode) QueryPricing() *PricingQuery {
	return NewPostalCodeClient(pc.config).QueryPricing(pc)
}

// Update returns a builder for updating this PostalCode.
// Note that you need to call PostalCode.Unwrap() before calling this method if this PostalCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PostalCode) Update() *PostalCodeUpdateOne {
	return NewPostalCodeClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PostalCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PostalCode) Unwrap() *PostalCode {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostalCode is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PostalCode) String() string {
	var builder strings.Builder
	builder.WriteString("PostalCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(pc.Country)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(pc.Code)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(pc.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(pc.State)
	builder.WriteString(", ")
	builder.WriteString("state_abr=")
	builder.WriteString(pc.StateAbr)
	builder.WriteString(", ")
	builder.WriteString("region_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.RegionID))
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", pc.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", pc.Longitude))
	builder.WriteString(", ")
	builder.WriteString("accuracy=")
	builder.WriteString(fmt.Sprintf("%v", pc.Accuracy))
	builder.WriteString(", ")
	builder.WriteString("service_area=")
	builder.WriteString(fmt.Sprintf("%v", pc.ServiceArea))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPricing returns the Pricing named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PostalCode) NamedPricing(name string) ([]*Pricing, error) {
	if pc.Edges.namedPricing == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedPricing[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PostalCode) appendNamedPricing(name string, edges ...*Pricing) {
	if pc.Edges.namedPricing == nil {
		pc.Edges.namedPricing = make(map[string][]*Pricing)
	}
	if len(edges) == 0 {
		pc.Edges.namedPricing[name] = []*Pricing{}
	} else {
		pc.Edges.namedPricing[name] = append(pc.Edges.namedPricing[name], edges...)
	}
}

// PostalCodes is a parsable slice of PostalCode.
type PostalCodes []*PostalCode

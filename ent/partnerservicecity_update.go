// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnerservicecity"
	"roofix/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerServiceCityUpdate is the builder for updating PartnerServiceCity entities.
type PartnerServiceCityUpdate struct {
	config
	hooks     []Hook
	mutation  *PartnerServiceCityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartnerServiceCityUpdate builder.
func (pscu *PartnerServiceCityUpdate) Where(ps ...predicate.PartnerServiceCity) *PartnerServiceCityUpdate {
	pscu.mutation.Where(ps...)
	return pscu
}

// SetUpdatedAt sets the "updated_at" field.
func (pscu *PartnerServiceCityUpdate) SetUpdatedAt(t time.Time) *PartnerServiceCityUpdate {
	pscu.mutation.SetUpdatedAt(t)
	return pscu
}

// SetPostalID sets the "postal_id" field.
func (pscu *PartnerServiceCityUpdate) SetPostalID(s string) *PartnerServiceCityUpdate {
	pscu.mutation.SetPostalID(s)
	return pscu
}

// SetActive sets the "active" field.
func (pscu *PartnerServiceCityUpdate) SetActive(b bool) *PartnerServiceCityUpdate {
	pscu.mutation.SetActive(b)
	return pscu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pscu *PartnerServiceCityUpdate) SetNillableActive(b *bool) *PartnerServiceCityUpdate {
	if b != nil {
		pscu.SetActive(*b)
	}
	return pscu
}

// SetName sets the "name" field.
func (pscu *PartnerServiceCityUpdate) SetName(s string) *PartnerServiceCityUpdate {
	pscu.mutation.SetName(s)
	return pscu
}

// SetNaicsCode sets the "naics_code" field.
func (pscu *PartnerServiceCityUpdate) SetNaicsCode(u uint) *PartnerServiceCityUpdate {
	pscu.mutation.ResetNaicsCode()
	pscu.mutation.SetNaicsCode(u)
	return pscu
}

// AddNaicsCode adds u to the "naics_code" field.
func (pscu *PartnerServiceCityUpdate) AddNaicsCode(u int) *PartnerServiceCityUpdate {
	pscu.mutation.AddNaicsCode(u)
	return pscu
}

// SetLicenseNo sets the "license_no" field.
func (pscu *PartnerServiceCityUpdate) SetLicenseNo(s string) *PartnerServiceCityUpdate {
	pscu.mutation.SetLicenseNo(s)
	return pscu
}

// SetNillableLicenseNo sets the "license_no" field if the given value is not nil.
func (pscu *PartnerServiceCityUpdate) SetNillableLicenseNo(s *string) *PartnerServiceCityUpdate {
	if s != nil {
		pscu.SetLicenseNo(*s)
	}
	return pscu
}

// ClearLicenseNo clears the value of the "license_no" field.
func (pscu *PartnerServiceCityUpdate) ClearLicenseNo() *PartnerServiceCityUpdate {
	pscu.mutation.ClearLicenseNo()
	return pscu
}

// SetProofDocID sets the "proof_doc_id" field.
func (pscu *PartnerServiceCityUpdate) SetProofDocID(s string) *PartnerServiceCityUpdate {
	pscu.mutation.SetProofDocID(s)
	return pscu
}

// SetNillableProofDocID sets the "proof_doc_id" field if the given value is not nil.
func (pscu *PartnerServiceCityUpdate) SetNillableProofDocID(s *string) *PartnerServiceCityUpdate {
	if s != nil {
		pscu.SetProofDocID(*s)
	}
	return pscu
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (pscu *PartnerServiceCityUpdate) ClearProofDocID() *PartnerServiceCityUpdate {
	pscu.mutation.ClearProofDocID()
	return pscu
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pscu *PartnerServiceCityUpdate) SetPartnerID(id string) *PartnerServiceCityUpdate {
	pscu.mutation.SetPartnerID(id)
	return pscu
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pscu *PartnerServiceCityUpdate) SetPartner(p *Partner) *PartnerServiceCityUpdate {
	return pscu.SetPartnerID(p.ID)
}

// Mutation returns the PartnerServiceCityMutation object of the builder.
func (pscu *PartnerServiceCityUpdate) Mutation() *PartnerServiceCityMutation {
	return pscu.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pscu *PartnerServiceCityUpdate) ClearPartner() *PartnerServiceCityUpdate {
	pscu.mutation.ClearPartner()
	return pscu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pscu *PartnerServiceCityUpdate) Save(ctx context.Context) (int, error) {
	pscu.defaults()
	return withHooks(ctx, pscu.sqlSave, pscu.mutation, pscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pscu *PartnerServiceCityUpdate) SaveX(ctx context.Context) int {
	affected, err := pscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pscu *PartnerServiceCityUpdate) Exec(ctx context.Context) error {
	_, err := pscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscu *PartnerServiceCityUpdate) ExecX(ctx context.Context) {
	if err := pscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pscu *PartnerServiceCityUpdate) defaults() {
	if _, ok := pscu.mutation.UpdatedAt(); !ok {
		v := partnerservicecity.UpdateDefaultUpdatedAt()
		pscu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pscu *PartnerServiceCityUpdate) check() error {
	if v, ok := pscu.mutation.PostalID(); ok {
		if err := partnerservicecity.PostalIDValidator(v); err != nil {
			return &ValidationError{Name: "postal_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.postal_id": %w`, err)}
		}
	}
	if v, ok := pscu.mutation.Name(); ok {
		if err := partnerservicecity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.name": %w`, err)}
		}
	}
	if v, ok := pscu.mutation.LicenseNo(); ok {
		if err := partnerservicecity.LicenseNoValidator(v); err != nil {
			return &ValidationError{Name: "license_no", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.license_no": %w`, err)}
		}
	}
	if v, ok := pscu.mutation.ProofDocID(); ok {
		if err := partnerservicecity.ProofDocIDValidator(v); err != nil {
			return &ValidationError{Name: "proof_doc_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.proof_doc_id": %w`, err)}
		}
	}
	if _, ok := pscu.mutation.PartnerID(); pscu.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerServiceCity.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pscu *PartnerServiceCityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerServiceCityUpdate {
	pscu.modifiers = append(pscu.modifiers, modifiers...)
	return pscu
}

func (pscu *PartnerServiceCityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pscu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnerservicecity.Table, partnerservicecity.Columns, sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString))
	if ps := pscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pscu.mutation.UpdatedAt(); ok {
		_spec.SetField(partnerservicecity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pscu.mutation.PostalID(); ok {
		_spec.SetField(partnerservicecity.FieldPostalID, field.TypeString, value)
	}
	if value, ok := pscu.mutation.Active(); ok {
		_spec.SetField(partnerservicecity.FieldActive, field.TypeBool, value)
	}
	if value, ok := pscu.mutation.Name(); ok {
		_spec.SetField(partnerservicecity.FieldName, field.TypeString, value)
	}
	if value, ok := pscu.mutation.NaicsCode(); ok {
		_spec.SetField(partnerservicecity.FieldNaicsCode, field.TypeUint, value)
	}
	if value, ok := pscu.mutation.AddedNaicsCode(); ok {
		_spec.AddField(partnerservicecity.FieldNaicsCode, field.TypeUint, value)
	}
	if value, ok := pscu.mutation.LicenseNo(); ok {
		_spec.SetField(partnerservicecity.FieldLicenseNo, field.TypeString, value)
	}
	if pscu.mutation.LicenseNoCleared() {
		_spec.ClearField(partnerservicecity.FieldLicenseNo, field.TypeString)
	}
	if value, ok := pscu.mutation.ProofDocID(); ok {
		_spec.SetField(partnerservicecity.FieldProofDocID, field.TypeString, value)
	}
	if pscu.mutation.ProofDocIDCleared() {
		_spec.ClearField(partnerservicecity.FieldProofDocID, field.TypeString)
	}
	if pscu.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicecity.PartnerTable,
			Columns: []string{partnerservicecity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pscu.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicecity.PartnerTable,
			Columns: []string{partnerservicecity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pscu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnerservicecity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pscu.mutation.done = true
	return n, nil
}

// PartnerServiceCityUpdateOne is the builder for updating a single PartnerServiceCity entity.
type PartnerServiceCityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartnerServiceCityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pscuo *PartnerServiceCityUpdateOne) SetUpdatedAt(t time.Time) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetUpdatedAt(t)
	return pscuo
}

// SetPostalID sets the "postal_id" field.
func (pscuo *PartnerServiceCityUpdateOne) SetPostalID(s string) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetPostalID(s)
	return pscuo
}

// SetActive sets the "active" field.
func (pscuo *PartnerServiceCityUpdateOne) SetActive(b bool) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetActive(b)
	return pscuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pscuo *PartnerServiceCityUpdateOne) SetNillableActive(b *bool) *PartnerServiceCityUpdateOne {
	if b != nil {
		pscuo.SetActive(*b)
	}
	return pscuo
}

// SetName sets the "name" field.
func (pscuo *PartnerServiceCityUpdateOne) SetName(s string) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetName(s)
	return pscuo
}

// SetNaicsCode sets the "naics_code" field.
func (pscuo *PartnerServiceCityUpdateOne) SetNaicsCode(u uint) *PartnerServiceCityUpdateOne {
	pscuo.mutation.ResetNaicsCode()
	pscuo.mutation.SetNaicsCode(u)
	return pscuo
}

// AddNaicsCode adds u to the "naics_code" field.
func (pscuo *PartnerServiceCityUpdateOne) AddNaicsCode(u int) *PartnerServiceCityUpdateOne {
	pscuo.mutation.AddNaicsCode(u)
	return pscuo
}

// SetLicenseNo sets the "license_no" field.
func (pscuo *PartnerServiceCityUpdateOne) SetLicenseNo(s string) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetLicenseNo(s)
	return pscuo
}

// SetNillableLicenseNo sets the "license_no" field if the given value is not nil.
func (pscuo *PartnerServiceCityUpdateOne) SetNillableLicenseNo(s *string) *PartnerServiceCityUpdateOne {
	if s != nil {
		pscuo.SetLicenseNo(*s)
	}
	return pscuo
}

// ClearLicenseNo clears the value of the "license_no" field.
func (pscuo *PartnerServiceCityUpdateOne) ClearLicenseNo() *PartnerServiceCityUpdateOne {
	pscuo.mutation.ClearLicenseNo()
	return pscuo
}

// SetProofDocID sets the "proof_doc_id" field.
func (pscuo *PartnerServiceCityUpdateOne) SetProofDocID(s string) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetProofDocID(s)
	return pscuo
}

// SetNillableProofDocID sets the "proof_doc_id" field if the given value is not nil.
func (pscuo *PartnerServiceCityUpdateOne) SetNillableProofDocID(s *string) *PartnerServiceCityUpdateOne {
	if s != nil {
		pscuo.SetProofDocID(*s)
	}
	return pscuo
}

// ClearProofDocID clears the value of the "proof_doc_id" field.
func (pscuo *PartnerServiceCityUpdateOne) ClearProofDocID() *PartnerServiceCityUpdateOne {
	pscuo.mutation.ClearProofDocID()
	return pscuo
}

// SetPartnerID sets the "partner" edge to the Partner entity by ID.
func (pscuo *PartnerServiceCityUpdateOne) SetPartnerID(id string) *PartnerServiceCityUpdateOne {
	pscuo.mutation.SetPartnerID(id)
	return pscuo
}

// SetPartner sets the "partner" edge to the Partner entity.
func (pscuo *PartnerServiceCityUpdateOne) SetPartner(p *Partner) *PartnerServiceCityUpdateOne {
	return pscuo.SetPartnerID(p.ID)
}

// Mutation returns the PartnerServiceCityMutation object of the builder.
func (pscuo *PartnerServiceCityUpdateOne) Mutation() *PartnerServiceCityMutation {
	return pscuo.mutation
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (pscuo *PartnerServiceCityUpdateOne) ClearPartner() *PartnerServiceCityUpdateOne {
	pscuo.mutation.ClearPartner()
	return pscuo
}

// Where appends a list predicates to the PartnerServiceCityUpdate builder.
func (pscuo *PartnerServiceCityUpdateOne) Where(ps ...predicate.PartnerServiceCity) *PartnerServiceCityUpdateOne {
	pscuo.mutation.Where(ps...)
	return pscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pscuo *PartnerServiceCityUpdateOne) Select(field string, fields ...string) *PartnerServiceCityUpdateOne {
	pscuo.fields = append([]string{field}, fields...)
	return pscuo
}

// Save executes the query and returns the updated PartnerServiceCity entity.
func (pscuo *PartnerServiceCityUpdateOne) Save(ctx context.Context) (*PartnerServiceCity, error) {
	pscuo.defaults()
	return withHooks(ctx, pscuo.sqlSave, pscuo.mutation, pscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pscuo *PartnerServiceCityUpdateOne) SaveX(ctx context.Context) *PartnerServiceCity {
	node, err := pscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pscuo *PartnerServiceCityUpdateOne) Exec(ctx context.Context) error {
	_, err := pscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscuo *PartnerServiceCityUpdateOne) ExecX(ctx context.Context) {
	if err := pscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pscuo *PartnerServiceCityUpdateOne) defaults() {
	if _, ok := pscuo.mutation.UpdatedAt(); !ok {
		v := partnerservicecity.UpdateDefaultUpdatedAt()
		pscuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pscuo *PartnerServiceCityUpdateOne) check() error {
	if v, ok := pscuo.mutation.PostalID(); ok {
		if err := partnerservicecity.PostalIDValidator(v); err != nil {
			return &ValidationError{Name: "postal_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.postal_id": %w`, err)}
		}
	}
	if v, ok := pscuo.mutation.Name(); ok {
		if err := partnerservicecity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.name": %w`, err)}
		}
	}
	if v, ok := pscuo.mutation.LicenseNo(); ok {
		if err := partnerservicecity.LicenseNoValidator(v); err != nil {
			return &ValidationError{Name: "license_no", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.license_no": %w`, err)}
		}
	}
	if v, ok := pscuo.mutation.ProofDocID(); ok {
		if err := partnerservicecity.ProofDocIDValidator(v); err != nil {
			return &ValidationError{Name: "proof_doc_id", err: fmt.Errorf(`ent: validator failed for field "PartnerServiceCity.proof_doc_id": %w`, err)}
		}
	}
	if _, ok := pscuo.mutation.PartnerID(); pscuo.mutation.PartnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PartnerServiceCity.partner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pscuo *PartnerServiceCityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartnerServiceCityUpdateOne {
	pscuo.modifiers = append(pscuo.modifiers, modifiers...)
	return pscuo
}

func (pscuo *PartnerServiceCityUpdateOne) sqlSave(ctx context.Context) (_node *PartnerServiceCity, err error) {
	if err := pscuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnerservicecity.Table, partnerservicecity.Columns, sqlgraph.NewFieldSpec(partnerservicecity.FieldID, field.TypeString))
	id, ok := pscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnerServiceCity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnerservicecity.FieldID)
		for _, f := range fields {
			if !partnerservicecity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnerservicecity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pscuo.mutation.UpdatedAt(); ok {
		_spec.SetField(partnerservicecity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pscuo.mutation.PostalID(); ok {
		_spec.SetField(partnerservicecity.FieldPostalID, field.TypeString, value)
	}
	if value, ok := pscuo.mutation.Active(); ok {
		_spec.SetField(partnerservicecity.FieldActive, field.TypeBool, value)
	}
	if value, ok := pscuo.mutation.Name(); ok {
		_spec.SetField(partnerservicecity.FieldName, field.TypeString, value)
	}
	if value, ok := pscuo.mutation.NaicsCode(); ok {
		_spec.SetField(partnerservicecity.FieldNaicsCode, field.TypeUint, value)
	}
	if value, ok := pscuo.mutation.AddedNaicsCode(); ok {
		_spec.AddField(partnerservicecity.FieldNaicsCode, field.TypeUint, value)
	}
	if value, ok := pscuo.mutation.LicenseNo(); ok {
		_spec.SetField(partnerservicecity.FieldLicenseNo, field.TypeString, value)
	}
	if pscuo.mutation.LicenseNoCleared() {
		_spec.ClearField(partnerservicecity.FieldLicenseNo, field.TypeString)
	}
	if value, ok := pscuo.mutation.ProofDocID(); ok {
		_spec.SetField(partnerservicecity.FieldProofDocID, field.TypeString, value)
	}
	if pscuo.mutation.ProofDocIDCleared() {
		_spec.ClearField(partnerservicecity.FieldProofDocID, field.TypeString)
	}
	if pscuo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicecity.PartnerTable,
			Columns: []string{partnerservicecity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pscuo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerservicecity.PartnerTable,
			Columns: []string{partnerservicecity.PartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pscuo.modifiers...)
	_node = &PartnerServiceCity{config: pscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnerservicecity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pscuo.mutation.done = true
	return _node, nil
}

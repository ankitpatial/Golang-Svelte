// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/predicate"
	"roofix/ent/trainingvideo"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrainingVideoDelete is the builder for deleting a TrainingVideo entity.
type TrainingVideoDelete struct {
	config
	hooks    []Hook
	mutation *TrainingVideoMutation
}

// Where appends a list predicates to the TrainingVideoDelete builder.
func (tvd *TrainingVideoDelete) Where(ps ...predicate.TrainingVideo) *TrainingVideoDelete {
	tvd.mutation.Where(ps...)
	return tvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tvd *TrainingVideoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tvd.sqlExec, tvd.mutation, tvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tvd *TrainingVideoDelete) ExecX(ctx context.Context) int {
	n, err := tvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tvd *TrainingVideoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(trainingvideo.Table, sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString))
	if ps := tvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tvd.mutation.done = true
	return affected, err
}

// TrainingVideoDeleteOne is the builder for deleting a single TrainingVideo entity.
type TrainingVideoDeleteOne struct {
	tvd *TrainingVideoDelete
}

// Where appends a list predicates to the TrainingVideoDelete builder.
func (tvdo *TrainingVideoDeleteOne) Where(ps ...predicate.TrainingVideo) *TrainingVideoDeleteOne {
	tvdo.tvd.mutation.Where(ps...)
	return tvdo
}

// Exec executes the deletion query.
func (tvdo *TrainingVideoDeleteOne) Exec(ctx context.Context) error {
	n, err := tvdo.tvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{trainingvideo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tvdo *TrainingVideoDeleteOne) ExecX(ctx context.Context) {
	if err := tvdo.Exec(ctx); err != nil {
		panic(err)
	}
}

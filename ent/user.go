// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/user"
	"roofix/ent/userauth"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Pwd holds the value of the "pwd" field.
	Pwd string `json:"-"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// EmailVerified holds the value of the "email_verified" field.
	EmailVerified bool `json:"email_verified,omitempty"`
	// PhoneVerified holds the value of the "phone_verified" field.
	PhoneVerified bool `json:"phone_verified,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture *string `json:"picture,omitempty"`
	// Status holds the value of the "status" field.
	Status enum.AccountStatus `json:"status,omitempty"`
	// Role holds the value of the "role" field.
	Role enum.Role `json:"role,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// WrongAttempts holds the value of the "wrong_attempts" field.
	WrongAttempts uint8 `json:"wrong_attempts,omitempty"`
	// WrongAttemptAt holds the value of the "wrong_attempt_at" field.
	WrongAttemptAt *time.Time `json:"wrong_attempt_at,omitempty"`
	// LockedUntil holds the value of the "locked_until" field.
	LockedUntil *time.Time `json:"locked_until,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// AcceptedGeneralTerms holds the value of the "accepted_general_terms" field.
	AcceptedGeneralTerms bool `json:"accepted_general_terms,omitempty"`
	// AcceptedTermsNPrivacy holds the value of the "accepted_terms_n_privacy" field.
	AcceptedTermsNPrivacy bool `json:"accepted_terms_n_privacy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Auths holds the value of the auths edge.
	Auths *UserAuth `json:"auths,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*UserSession `json:"sessions,omitempty"`
	// AuditLogs holds the value of the audit_logs edge.
	AuditLogs []*AuditLog `json:"audit_logs,omitempty"`
	// Notify holds the value of the notify edge.
	Notify []*NotifySetting `json:"notify,omitempty"`
	// CreatedJobs holds the value of the created_jobs edge.
	CreatedJobs []*Job `json:"created_jobs,omitempty"`
	// CreatedEstimates holds the value of the created_estimates edge.
	CreatedEstimates []*Estimate `json:"created_estimates,omitempty"`
	// SalesRepEstimates holds the value of the sales_rep_estimates edge.
	SalesRepEstimates []*Estimate `json:"sales_rep_estimates,omitempty"`
	// Sales holds the value of the sales edge.
	Sales []*Job `json:"sales,omitempty"`
	// CreatedInstallationJobs holds the value of the created_installation_jobs edge.
	CreatedInstallationJobs []*InstallationJob `json:"created_installation_jobs,omitempty"`
	// InstallationLeads holds the value of the installation_leads edge.
	InstallationLeads []*InstallationJob `json:"installation_leads,omitempty"`
	// EstimateActivities holds the value of the estimate_activities edge.
	EstimateActivities []*EstimateActivity `json:"estimate_activities,omitempty"`
	// JobActivities holds the value of the job_activities edge.
	JobActivities []*JobActivity `json:"job_activities,omitempty"`
	// PartnerActivities holds the value of the partner_activities edge.
	PartnerActivities []*PartnerActivity `json:"partner_activities,omitempty"`
	// UserActivities holds the value of the user_activities edge.
	UserActivities []*UserActivity `json:"user_activities,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*UserActivity `json:"activities,omitempty"`
	// JobProgressHistory holds the value of the job_progress_history edge.
	JobProgressHistory []*JobProgressHistory `json:"job_progress_history,omitempty"`
	// InstallationJobStatusChanger holds the value of the installation_job_status_changer edge.
	InstallationJobStatusChanger []*InstallationJobProgress `json:"installation_job_status_changer,omitempty"`
	// ContactUsRequests holds the value of the contact_us_requests edge.
	ContactUsRequests []*ContactUs `json:"contact_us_requests,omitempty"`
	// Partner holds the value of the partner edge.
	Partner []*Partner `json:"partner,omitempty"`
	// Surveys holds the value of the surveys edge.
	Surveys []*Survey `json:"surveys,omitempty"`
	// SurveyProgress holds the value of the survey_progress edge.
	SurveyProgress []*SurveyProgress `json:"survey_progress,omitempty"`
	// CreatedTrainingVideos holds the value of the created_training_videos edge.
	CreatedTrainingVideos []*TrainingVideo `json:"created_training_videos,omitempty"`
	// CreatedTrainingCourses holds the value of the created_training_courses edge.
	CreatedTrainingCourses []*TrainingCourse `json:"created_training_courses,omitempty"`
	// JobNotes holds the value of the job_notes edge.
	JobNotes []*JobNote `json:"job_notes,omitempty"`
	// ChatChannels holds the value of the chat_channels edge.
	ChatChannels []*ChannelSub `json:"chat_channels,omitempty"`
	// SentMessages holds the value of the sent_messages edge.
	SentMessages []*ChannelMessage `json:"sent_messages,omitempty"`
	// ReceivedMessages holds the value of the received_messages edge.
	ReceivedMessages []*ChannelMessage `json:"received_messages,omitempty"`
	// ChannelMessageRead holds the value of the channel_message_read edge.
	ChannelMessageRead []*ChannelMessageRead `json:"channel_message_read,omitempty"`
	// ProductsCreated holds the value of the products_created edge.
	ProductsCreated []*Product `json:"products_created,omitempty"`
	// ProductPkgCreated holds the value of the product_pkg_created edge.
	ProductPkgCreated []*ProductPackage `json:"product_pkg_created,omitempty"`
	// JobDocUrls holds the value of the job_doc_urls edge.
	JobDocUrls []*JobDocURL `json:"job_doc_urls,omitempty"`
	// PartnerContacts holds the value of the partner_contacts edge.
	PartnerContacts []*PartnerContact `json:"partner_contacts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [32]bool
	// totalCount holds the count of the edges above.
	totalCount [32]map[string]int

	namedSessions                     map[string][]*UserSession
	namedAuditLogs                    map[string][]*AuditLog
	namedNotify                       map[string][]*NotifySetting
	namedCreatedJobs                  map[string][]*Job
	namedCreatedEstimates             map[string][]*Estimate
	namedSalesRepEstimates            map[string][]*Estimate
	namedSales                        map[string][]*Job
	namedCreatedInstallationJobs      map[string][]*InstallationJob
	namedInstallationLeads            map[string][]*InstallationJob
	namedEstimateActivities           map[string][]*EstimateActivity
	namedJobActivities                map[string][]*JobActivity
	namedPartnerActivities            map[string][]*PartnerActivity
	namedUserActivities               map[string][]*UserActivity
	namedActivities                   map[string][]*UserActivity
	namedJobProgressHistory           map[string][]*JobProgressHistory
	namedInstallationJobStatusChanger map[string][]*InstallationJobProgress
	namedContactUsRequests            map[string][]*ContactUs
	namedPartner                      map[string][]*Partner
	namedSurveys                      map[string][]*Survey
	namedSurveyProgress               map[string][]*SurveyProgress
	namedCreatedTrainingVideos        map[string][]*TrainingVideo
	namedCreatedTrainingCourses       map[string][]*TrainingCourse
	namedJobNotes                     map[string][]*JobNote
	namedChatChannels                 map[string][]*ChannelSub
	namedSentMessages                 map[string][]*ChannelMessage
	namedReceivedMessages             map[string][]*ChannelMessage
	namedChannelMessageRead           map[string][]*ChannelMessageRead
	namedProductsCreated              map[string][]*Product
	namedProductPkgCreated            map[string][]*ProductPackage
	namedJobDocUrls                   map[string][]*JobDocURL
	namedPartnerContacts              map[string][]*PartnerContact
}

// AuthsOrErr returns the Auths value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AuthsOrErr() (*UserAuth, error) {
	if e.loadedTypes[0] {
		if e.Auths == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userauth.Label}
		}
		return e.Auths, nil
	}
	return nil, &NotLoadedError{edge: "auths"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*UserSession, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// AuditLogsOrErr returns the AuditLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuditLogsOrErr() ([]*AuditLog, error) {
	if e.loadedTypes[2] {
		return e.AuditLogs, nil
	}
	return nil, &NotLoadedError{edge: "audit_logs"}
}

// NotifyOrErr returns the Notify value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotifyOrErr() ([]*NotifySetting, error) {
	if e.loadedTypes[3] {
		return e.Notify, nil
	}
	return nil, &NotLoadedError{edge: "notify"}
}

// CreatedJobsOrErr returns the CreatedJobs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedJobsOrErr() ([]*Job, error) {
	if e.loadedTypes[4] {
		return e.CreatedJobs, nil
	}
	return nil, &NotLoadedError{edge: "created_jobs"}
}

// CreatedEstimatesOrErr returns the CreatedEstimates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedEstimatesOrErr() ([]*Estimate, error) {
	if e.loadedTypes[5] {
		return e.CreatedEstimates, nil
	}
	return nil, &NotLoadedError{edge: "created_estimates"}
}

// SalesRepEstimatesOrErr returns the SalesRepEstimates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SalesRepEstimatesOrErr() ([]*Estimate, error) {
	if e.loadedTypes[6] {
		return e.SalesRepEstimates, nil
	}
	return nil, &NotLoadedError{edge: "sales_rep_estimates"}
}

// SalesOrErr returns the Sales value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SalesOrErr() ([]*Job, error) {
	if e.loadedTypes[7] {
		return e.Sales, nil
	}
	return nil, &NotLoadedError{edge: "sales"}
}

// CreatedInstallationJobsOrErr returns the CreatedInstallationJobs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedInstallationJobsOrErr() ([]*InstallationJob, error) {
	if e.loadedTypes[8] {
		return e.CreatedInstallationJobs, nil
	}
	return nil, &NotLoadedError{edge: "created_installation_jobs"}
}

// InstallationLeadsOrErr returns the InstallationLeads value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InstallationLeadsOrErr() ([]*InstallationJob, error) {
	if e.loadedTypes[9] {
		return e.InstallationLeads, nil
	}
	return nil, &NotLoadedError{edge: "installation_leads"}
}

// EstimateActivitiesOrErr returns the EstimateActivities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EstimateActivitiesOrErr() ([]*EstimateActivity, error) {
	if e.loadedTypes[10] {
		return e.EstimateActivities, nil
	}
	return nil, &NotLoadedError{edge: "estimate_activities"}
}

// JobActivitiesOrErr returns the JobActivities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobActivitiesOrErr() ([]*JobActivity, error) {
	if e.loadedTypes[11] {
		return e.JobActivities, nil
	}
	return nil, &NotLoadedError{edge: "job_activities"}
}

// PartnerActivitiesOrErr returns the PartnerActivities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PartnerActivitiesOrErr() ([]*PartnerActivity, error) {
	if e.loadedTypes[12] {
		return e.PartnerActivities, nil
	}
	return nil, &NotLoadedError{edge: "partner_activities"}
}

// UserActivitiesOrErr returns the UserActivities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserActivitiesOrErr() ([]*UserActivity, error) {
	if e.loadedTypes[13] {
		return e.UserActivities, nil
	}
	return nil, &NotLoadedError{edge: "user_activities"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivitiesOrErr() ([]*UserActivity, error) {
	if e.loadedTypes[14] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// JobProgressHistoryOrErr returns the JobProgressHistory value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobProgressHistoryOrErr() ([]*JobProgressHistory, error) {
	if e.loadedTypes[15] {
		return e.JobProgressHistory, nil
	}
	return nil, &NotLoadedError{edge: "job_progress_history"}
}

// InstallationJobStatusChangerOrErr returns the InstallationJobStatusChanger value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InstallationJobStatusChangerOrErr() ([]*InstallationJobProgress, error) {
	if e.loadedTypes[16] {
		return e.InstallationJobStatusChanger, nil
	}
	return nil, &NotLoadedError{edge: "installation_job_status_changer"}
}

// ContactUsRequestsOrErr returns the ContactUsRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ContactUsRequestsOrErr() ([]*ContactUs, error) {
	if e.loadedTypes[17] {
		return e.ContactUsRequests, nil
	}
	return nil, &NotLoadedError{edge: "contact_us_requests"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PartnerOrErr() ([]*Partner, error) {
	if e.loadedTypes[18] {
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// SurveysOrErr returns the Surveys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SurveysOrErr() ([]*Survey, error) {
	if e.loadedTypes[19] {
		return e.Surveys, nil
	}
	return nil, &NotLoadedError{edge: "surveys"}
}

// SurveyProgressOrErr returns the SurveyProgress value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SurveyProgressOrErr() ([]*SurveyProgress, error) {
	if e.loadedTypes[20] {
		return e.SurveyProgress, nil
	}
	return nil, &NotLoadedError{edge: "survey_progress"}
}

// CreatedTrainingVideosOrErr returns the CreatedTrainingVideos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedTrainingVideosOrErr() ([]*TrainingVideo, error) {
	if e.loadedTypes[21] {
		return e.CreatedTrainingVideos, nil
	}
	return nil, &NotLoadedError{edge: "created_training_videos"}
}

// CreatedTrainingCoursesOrErr returns the CreatedTrainingCourses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedTrainingCoursesOrErr() ([]*TrainingCourse, error) {
	if e.loadedTypes[22] {
		return e.CreatedTrainingCourses, nil
	}
	return nil, &NotLoadedError{edge: "created_training_courses"}
}

// JobNotesOrErr returns the JobNotes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobNotesOrErr() ([]*JobNote, error) {
	if e.loadedTypes[23] {
		return e.JobNotes, nil
	}
	return nil, &NotLoadedError{edge: "job_notes"}
}

// ChatChannelsOrErr returns the ChatChannels value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ChatChannelsOrErr() ([]*ChannelSub, error) {
	if e.loadedTypes[24] {
		return e.ChatChannels, nil
	}
	return nil, &NotLoadedError{edge: "chat_channels"}
}

// SentMessagesOrErr returns the SentMessages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SentMessagesOrErr() ([]*ChannelMessage, error) {
	if e.loadedTypes[25] {
		return e.SentMessages, nil
	}
	return nil, &NotLoadedError{edge: "sent_messages"}
}

// ReceivedMessagesOrErr returns the ReceivedMessages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReceivedMessagesOrErr() ([]*ChannelMessage, error) {
	if e.loadedTypes[26] {
		return e.ReceivedMessages, nil
	}
	return nil, &NotLoadedError{edge: "received_messages"}
}

// ChannelMessageReadOrErr returns the ChannelMessageRead value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ChannelMessageReadOrErr() ([]*ChannelMessageRead, error) {
	if e.loadedTypes[27] {
		return e.ChannelMessageRead, nil
	}
	return nil, &NotLoadedError{edge: "channel_message_read"}
}

// ProductsCreatedOrErr returns the ProductsCreated value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProductsCreatedOrErr() ([]*Product, error) {
	if e.loadedTypes[28] {
		return e.ProductsCreated, nil
	}
	return nil, &NotLoadedError{edge: "products_created"}
}

// ProductPkgCreatedOrErr returns the ProductPkgCreated value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProductPkgCreatedOrErr() ([]*ProductPackage, error) {
	if e.loadedTypes[29] {
		return e.ProductPkgCreated, nil
	}
	return nil, &NotLoadedError{edge: "product_pkg_created"}
}

// JobDocUrlsOrErr returns the JobDocUrls value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobDocUrlsOrErr() ([]*JobDocURL, error) {
	if e.loadedTypes[30] {
		return e.JobDocUrls, nil
	}
	return nil, &NotLoadedError{edge: "job_doc_urls"}
}

// PartnerContactsOrErr returns the PartnerContacts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PartnerContactsOrErr() ([]*PartnerContact, error) {
	if e.loadedTypes[31] {
		return e.PartnerContacts, nil
	}
	return nil, &NotLoadedError{edge: "partner_contacts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldEmailVerified, user.FieldPhoneVerified, user.FieldAcceptedGeneralTerms, user.FieldAcceptedTermsNPrivacy:
			values[i] = new(sql.NullBool)
		case user.FieldWrongAttempts:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldExternalID, user.FieldEmail, user.FieldPhone, user.FieldPwd, user.FieldFirstName, user.FieldLastName, user.FieldPicture, user.FieldStatus, user.FieldRole, user.FieldNote, user.FieldLocation:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldDeletedAt, user.FieldUpdatedAt, user.FieldWrongAttemptAt, user.FieldLockedUntil:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				u.ExternalID = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldPwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd", values[i])
			} else if value.Valid {
				u.Pwd = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				u.EmailVerified = value.Bool
			}
		case user.FieldPhoneVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field phone_verified", values[i])
			} else if value.Valid {
				u.PhoneVerified = value.Bool
			}
		case user.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				u.Picture = new(string)
				*u.Picture = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = enum.AccountStatus(value.String)
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = enum.Role(value.String)
			}
		case user.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				u.Note = value.String
			}
		case user.FieldWrongAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wrong_attempts", values[i])
			} else if value.Valid {
				u.WrongAttempts = uint8(value.Int64)
			}
		case user.FieldWrongAttemptAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field wrong_attempt_at", values[i])
			} else if value.Valid {
				u.WrongAttemptAt = new(time.Time)
				*u.WrongAttemptAt = value.Time
			}
		case user.FieldLockedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field locked_until", values[i])
			} else if value.Valid {
				u.LockedUntil = new(time.Time)
				*u.LockedUntil = value.Time
			}
		case user.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				u.Location = value.String
			}
		case user.FieldAcceptedGeneralTerms:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accepted_general_terms", values[i])
			} else if value.Valid {
				u.AcceptedGeneralTerms = value.Bool
			}
		case user.FieldAcceptedTermsNPrivacy:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accepted_terms_n_privacy", values[i])
			} else if value.Valid {
				u.AcceptedTermsNPrivacy = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryAuths queries the "auths" edge of the User entity.
func (u *User) QueryAuths() *UserAuthQuery {
	return NewUserClient(u.config).QueryAuths(u)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (u *User) QuerySessions() *UserSessionQuery {
	return NewUserClient(u.config).QuerySessions(u)
}

// QueryAuditLogs queries the "audit_logs" edge of the User entity.
func (u *User) QueryAuditLogs() *AuditLogQuery {
	return NewUserClient(u.config).QueryAuditLogs(u)
}

// QueryNotify queries the "notify" edge of the User entity.
func (u *User) QueryNotify() *NotifySettingQuery {
	return NewUserClient(u.config).QueryNotify(u)
}

// QueryCreatedJobs queries the "created_jobs" edge of the User entity.
func (u *User) QueryCreatedJobs() *JobQuery {
	return NewUserClient(u.config).QueryCreatedJobs(u)
}

// QueryCreatedEstimates queries the "created_estimates" edge of the User entity.
func (u *User) QueryCreatedEstimates() *EstimateQuery {
	return NewUserClient(u.config).QueryCreatedEstimates(u)
}

// QuerySalesRepEstimates queries the "sales_rep_estimates" edge of the User entity.
func (u *User) QuerySalesRepEstimates() *EstimateQuery {
	return NewUserClient(u.config).QuerySalesRepEstimates(u)
}

// QuerySales queries the "sales" edge of the User entity.
func (u *User) QuerySales() *JobQuery {
	return NewUserClient(u.config).QuerySales(u)
}

// QueryCreatedInstallationJobs queries the "created_installation_jobs" edge of the User entity.
func (u *User) QueryCreatedInstallationJobs() *InstallationJobQuery {
	return NewUserClient(u.config).QueryCreatedInstallationJobs(u)
}

// QueryInstallationLeads queries the "installation_leads" edge of the User entity.
func (u *User) QueryInstallationLeads() *InstallationJobQuery {
	return NewUserClient(u.config).QueryInstallationLeads(u)
}

// QueryEstimateActivities queries the "estimate_activities" edge of the User entity.
func (u *User) QueryEstimateActivities() *EstimateActivityQuery {
	return NewUserClient(u.config).QueryEstimateActivities(u)
}

// QueryJobActivities queries the "job_activities" edge of the User entity.
func (u *User) QueryJobActivities() *JobActivityQuery {
	return NewUserClient(u.config).QueryJobActivities(u)
}

// QueryPartnerActivities queries the "partner_activities" edge of the User entity.
func (u *User) QueryPartnerActivities() *PartnerActivityQuery {
	return NewUserClient(u.config).QueryPartnerActivities(u)
}

// QueryUserActivities queries the "user_activities" edge of the User entity.
func (u *User) QueryUserActivities() *UserActivityQuery {
	return NewUserClient(u.config).QueryUserActivities(u)
}

// QueryActivities queries the "activities" edge of the User entity.
func (u *User) QueryActivities() *UserActivityQuery {
	return NewUserClient(u.config).QueryActivities(u)
}

// QueryJobProgressHistory queries the "job_progress_history" edge of the User entity.
func (u *User) QueryJobProgressHistory() *JobProgressHistoryQuery {
	return NewUserClient(u.config).QueryJobProgressHistory(u)
}

// QueryInstallationJobStatusChanger queries the "installation_job_status_changer" edge of the User entity.
func (u *User) QueryInstallationJobStatusChanger() *InstallationJobProgressQuery {
	return NewUserClient(u.config).QueryInstallationJobStatusChanger(u)
}

// QueryContactUsRequests queries the "contact_us_requests" edge of the User entity.
func (u *User) QueryContactUsRequests() *ContactUsQuery {
	return NewUserClient(u.config).QueryContactUsRequests(u)
}

// QueryPartner queries the "partner" edge of the User entity.
func (u *User) QueryPartner() *PartnerQuery {
	return NewUserClient(u.config).QueryPartner(u)
}

// QuerySurveys queries the "surveys" edge of the User entity.
func (u *User) QuerySurveys() *SurveyQuery {
	return NewUserClient(u.config).QuerySurveys(u)
}

// QuerySurveyProgress queries the "survey_progress" edge of the User entity.
func (u *User) QuerySurveyProgress() *SurveyProgressQuery {
	return NewUserClient(u.config).QuerySurveyProgress(u)
}

// QueryCreatedTrainingVideos queries the "created_training_videos" edge of the User entity.
func (u *User) QueryCreatedTrainingVideos() *TrainingVideoQuery {
	return NewUserClient(u.config).QueryCreatedTrainingVideos(u)
}

// QueryCreatedTrainingCourses queries the "created_training_courses" edge of the User entity.
func (u *User) QueryCreatedTrainingCourses() *TrainingCourseQuery {
	return NewUserClient(u.config).QueryCreatedTrainingCourses(u)
}

// QueryJobNotes queries the "job_notes" edge of the User entity.
func (u *User) QueryJobNotes() *JobNoteQuery {
	return NewUserClient(u.config).QueryJobNotes(u)
}

// QueryChatChannels queries the "chat_channels" edge of the User entity.
func (u *User) QueryChatChannels() *ChannelSubQuery {
	return NewUserClient(u.config).QueryChatChannels(u)
}

// QuerySentMessages queries the "sent_messages" edge of the User entity.
func (u *User) QuerySentMessages() *ChannelMessageQuery {
	return NewUserClient(u.config).QuerySentMessages(u)
}

// QueryReceivedMessages queries the "received_messages" edge of the User entity.
func (u *User) QueryReceivedMessages() *ChannelMessageQuery {
	return NewUserClient(u.config).QueryReceivedMessages(u)
}

// QueryChannelMessageRead queries the "channel_message_read" edge of the User entity.
func (u *User) QueryChannelMessageRead() *ChannelMessageReadQuery {
	return NewUserClient(u.config).QueryChannelMessageRead(u)
}

// QueryProductsCreated queries the "products_created" edge of the User entity.
func (u *User) QueryProductsCreated() *ProductQuery {
	return NewUserClient(u.config).QueryProductsCreated(u)
}

// QueryProductPkgCreated queries the "product_pkg_created" edge of the User entity.
func (u *User) QueryProductPkgCreated() *ProductPackageQuery {
	return NewUserClient(u.config).QueryProductPkgCreated(u)
}

// QueryJobDocUrls queries the "job_doc_urls" edge of the User entity.
func (u *User) QueryJobDocUrls() *JobDocURLQuery {
	return NewUserClient(u.config).QueryJobDocUrls(u)
}

// QueryPartnerContacts queries the "partner_contacts" edge of the User entity.
func (u *User) QueryPartnerContacts() *PartnerContactQuery {
	return NewUserClient(u.config).QueryPartnerContacts(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(u.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("pwd=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailVerified))
	builder.WriteString(", ")
	builder.WriteString("phone_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.PhoneVerified))
	builder.WriteString(", ")
	if v := u.Picture; v != nil {
		builder.WriteString("picture=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(u.Note)
	builder.WriteString(", ")
	builder.WriteString("wrong_attempts=")
	builder.WriteString(fmt.Sprintf("%v", u.WrongAttempts))
	builder.WriteString(", ")
	if v := u.WrongAttemptAt; v != nil {
		builder.WriteString("wrong_attempt_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.LockedUntil; v != nil {
		builder.WriteString("locked_until=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(u.Location)
	builder.WriteString(", ")
	builder.WriteString("accepted_general_terms=")
	builder.WriteString(fmt.Sprintf("%v", u.AcceptedGeneralTerms))
	builder.WriteString(", ")
	builder.WriteString("accepted_terms_n_privacy=")
	builder.WriteString(fmt.Sprintf("%v", u.AcceptedTermsNPrivacy))
	builder.WriteByte(')')
	return builder.String()
}

// NamedSessions returns the Sessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSessions(name string) ([]*UserSession, error) {
	if u.Edges.namedSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSessions(name string, edges ...*UserSession) {
	if u.Edges.namedSessions == nil {
		u.Edges.namedSessions = make(map[string][]*UserSession)
	}
	if len(edges) == 0 {
		u.Edges.namedSessions[name] = []*UserSession{}
	} else {
		u.Edges.namedSessions[name] = append(u.Edges.namedSessions[name], edges...)
	}
}

// NamedAuditLogs returns the AuditLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAuditLogs(name string) ([]*AuditLog, error) {
	if u.Edges.namedAuditLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAuditLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAuditLogs(name string, edges ...*AuditLog) {
	if u.Edges.namedAuditLogs == nil {
		u.Edges.namedAuditLogs = make(map[string][]*AuditLog)
	}
	if len(edges) == 0 {
		u.Edges.namedAuditLogs[name] = []*AuditLog{}
	} else {
		u.Edges.namedAuditLogs[name] = append(u.Edges.namedAuditLogs[name], edges...)
	}
}

// NamedNotify returns the Notify named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedNotify(name string) ([]*NotifySetting, error) {
	if u.Edges.namedNotify == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedNotify[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedNotify(name string, edges ...*NotifySetting) {
	if u.Edges.namedNotify == nil {
		u.Edges.namedNotify = make(map[string][]*NotifySetting)
	}
	if len(edges) == 0 {
		u.Edges.namedNotify[name] = []*NotifySetting{}
	} else {
		u.Edges.namedNotify[name] = append(u.Edges.namedNotify[name], edges...)
	}
}

// NamedCreatedJobs returns the CreatedJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCreatedJobs(name string) ([]*Job, error) {
	if u.Edges.namedCreatedJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCreatedJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCreatedJobs(name string, edges ...*Job) {
	if u.Edges.namedCreatedJobs == nil {
		u.Edges.namedCreatedJobs = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		u.Edges.namedCreatedJobs[name] = []*Job{}
	} else {
		u.Edges.namedCreatedJobs[name] = append(u.Edges.namedCreatedJobs[name], edges...)
	}
}

// NamedCreatedEstimates returns the CreatedEstimates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCreatedEstimates(name string) ([]*Estimate, error) {
	if u.Edges.namedCreatedEstimates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCreatedEstimates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCreatedEstimates(name string, edges ...*Estimate) {
	if u.Edges.namedCreatedEstimates == nil {
		u.Edges.namedCreatedEstimates = make(map[string][]*Estimate)
	}
	if len(edges) == 0 {
		u.Edges.namedCreatedEstimates[name] = []*Estimate{}
	} else {
		u.Edges.namedCreatedEstimates[name] = append(u.Edges.namedCreatedEstimates[name], edges...)
	}
}

// NamedSalesRepEstimates returns the SalesRepEstimates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSalesRepEstimates(name string) ([]*Estimate, error) {
	if u.Edges.namedSalesRepEstimates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSalesRepEstimates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSalesRepEstimates(name string, edges ...*Estimate) {
	if u.Edges.namedSalesRepEstimates == nil {
		u.Edges.namedSalesRepEstimates = make(map[string][]*Estimate)
	}
	if len(edges) == 0 {
		u.Edges.namedSalesRepEstimates[name] = []*Estimate{}
	} else {
		u.Edges.namedSalesRepEstimates[name] = append(u.Edges.namedSalesRepEstimates[name], edges...)
	}
}

// NamedSales returns the Sales named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSales(name string) ([]*Job, error) {
	if u.Edges.namedSales == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSales[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSales(name string, edges ...*Job) {
	if u.Edges.namedSales == nil {
		u.Edges.namedSales = make(map[string][]*Job)
	}
	if len(edges) == 0 {
		u.Edges.namedSales[name] = []*Job{}
	} else {
		u.Edges.namedSales[name] = append(u.Edges.namedSales[name], edges...)
	}
}

// NamedCreatedInstallationJobs returns the CreatedInstallationJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCreatedInstallationJobs(name string) ([]*InstallationJob, error) {
	if u.Edges.namedCreatedInstallationJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCreatedInstallationJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCreatedInstallationJobs(name string, edges ...*InstallationJob) {
	if u.Edges.namedCreatedInstallationJobs == nil {
		u.Edges.namedCreatedInstallationJobs = make(map[string][]*InstallationJob)
	}
	if len(edges) == 0 {
		u.Edges.namedCreatedInstallationJobs[name] = []*InstallationJob{}
	} else {
		u.Edges.namedCreatedInstallationJobs[name] = append(u.Edges.namedCreatedInstallationJobs[name], edges...)
	}
}

// NamedInstallationLeads returns the InstallationLeads named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedInstallationLeads(name string) ([]*InstallationJob, error) {
	if u.Edges.namedInstallationLeads == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedInstallationLeads[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedInstallationLeads(name string, edges ...*InstallationJob) {
	if u.Edges.namedInstallationLeads == nil {
		u.Edges.namedInstallationLeads = make(map[string][]*InstallationJob)
	}
	if len(edges) == 0 {
		u.Edges.namedInstallationLeads[name] = []*InstallationJob{}
	} else {
		u.Edges.namedInstallationLeads[name] = append(u.Edges.namedInstallationLeads[name], edges...)
	}
}

// NamedEstimateActivities returns the EstimateActivities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedEstimateActivities(name string) ([]*EstimateActivity, error) {
	if u.Edges.namedEstimateActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedEstimateActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedEstimateActivities(name string, edges ...*EstimateActivity) {
	if u.Edges.namedEstimateActivities == nil {
		u.Edges.namedEstimateActivities = make(map[string][]*EstimateActivity)
	}
	if len(edges) == 0 {
		u.Edges.namedEstimateActivities[name] = []*EstimateActivity{}
	} else {
		u.Edges.namedEstimateActivities[name] = append(u.Edges.namedEstimateActivities[name], edges...)
	}
}

// NamedJobActivities returns the JobActivities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedJobActivities(name string) ([]*JobActivity, error) {
	if u.Edges.namedJobActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedJobActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedJobActivities(name string, edges ...*JobActivity) {
	if u.Edges.namedJobActivities == nil {
		u.Edges.namedJobActivities = make(map[string][]*JobActivity)
	}
	if len(edges) == 0 {
		u.Edges.namedJobActivities[name] = []*JobActivity{}
	} else {
		u.Edges.namedJobActivities[name] = append(u.Edges.namedJobActivities[name], edges...)
	}
}

// NamedPartnerActivities returns the PartnerActivities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPartnerActivities(name string) ([]*PartnerActivity, error) {
	if u.Edges.namedPartnerActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPartnerActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPartnerActivities(name string, edges ...*PartnerActivity) {
	if u.Edges.namedPartnerActivities == nil {
		u.Edges.namedPartnerActivities = make(map[string][]*PartnerActivity)
	}
	if len(edges) == 0 {
		u.Edges.namedPartnerActivities[name] = []*PartnerActivity{}
	} else {
		u.Edges.namedPartnerActivities[name] = append(u.Edges.namedPartnerActivities[name], edges...)
	}
}

// NamedUserActivities returns the UserActivities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedUserActivities(name string) ([]*UserActivity, error) {
	if u.Edges.namedUserActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUserActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedUserActivities(name string, edges ...*UserActivity) {
	if u.Edges.namedUserActivities == nil {
		u.Edges.namedUserActivities = make(map[string][]*UserActivity)
	}
	if len(edges) == 0 {
		u.Edges.namedUserActivities[name] = []*UserActivity{}
	} else {
		u.Edges.namedUserActivities[name] = append(u.Edges.namedUserActivities[name], edges...)
	}
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedActivities(name string) ([]*UserActivity, error) {
	if u.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedActivities(name string, edges ...*UserActivity) {
	if u.Edges.namedActivities == nil {
		u.Edges.namedActivities = make(map[string][]*UserActivity)
	}
	if len(edges) == 0 {
		u.Edges.namedActivities[name] = []*UserActivity{}
	} else {
		u.Edges.namedActivities[name] = append(u.Edges.namedActivities[name], edges...)
	}
}

// NamedJobProgressHistory returns the JobProgressHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedJobProgressHistory(name string) ([]*JobProgressHistory, error) {
	if u.Edges.namedJobProgressHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedJobProgressHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedJobProgressHistory(name string, edges ...*JobProgressHistory) {
	if u.Edges.namedJobProgressHistory == nil {
		u.Edges.namedJobProgressHistory = make(map[string][]*JobProgressHistory)
	}
	if len(edges) == 0 {
		u.Edges.namedJobProgressHistory[name] = []*JobProgressHistory{}
	} else {
		u.Edges.namedJobProgressHistory[name] = append(u.Edges.namedJobProgressHistory[name], edges...)
	}
}

// NamedInstallationJobStatusChanger returns the InstallationJobStatusChanger named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedInstallationJobStatusChanger(name string) ([]*InstallationJobProgress, error) {
	if u.Edges.namedInstallationJobStatusChanger == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedInstallationJobStatusChanger[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedInstallationJobStatusChanger(name string, edges ...*InstallationJobProgress) {
	if u.Edges.namedInstallationJobStatusChanger == nil {
		u.Edges.namedInstallationJobStatusChanger = make(map[string][]*InstallationJobProgress)
	}
	if len(edges) == 0 {
		u.Edges.namedInstallationJobStatusChanger[name] = []*InstallationJobProgress{}
	} else {
		u.Edges.namedInstallationJobStatusChanger[name] = append(u.Edges.namedInstallationJobStatusChanger[name], edges...)
	}
}

// NamedContactUsRequests returns the ContactUsRequests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedContactUsRequests(name string) ([]*ContactUs, error) {
	if u.Edges.namedContactUsRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedContactUsRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedContactUsRequests(name string, edges ...*ContactUs) {
	if u.Edges.namedContactUsRequests == nil {
		u.Edges.namedContactUsRequests = make(map[string][]*ContactUs)
	}
	if len(edges) == 0 {
		u.Edges.namedContactUsRequests[name] = []*ContactUs{}
	} else {
		u.Edges.namedContactUsRequests[name] = append(u.Edges.namedContactUsRequests[name], edges...)
	}
}

// NamedPartner returns the Partner named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPartner(name string) ([]*Partner, error) {
	if u.Edges.namedPartner == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPartner[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPartner(name string, edges ...*Partner) {
	if u.Edges.namedPartner == nil {
		u.Edges.namedPartner = make(map[string][]*Partner)
	}
	if len(edges) == 0 {
		u.Edges.namedPartner[name] = []*Partner{}
	} else {
		u.Edges.namedPartner[name] = append(u.Edges.namedPartner[name], edges...)
	}
}

// NamedSurveys returns the Surveys named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSurveys(name string) ([]*Survey, error) {
	if u.Edges.namedSurveys == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSurveys[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSurveys(name string, edges ...*Survey) {
	if u.Edges.namedSurveys == nil {
		u.Edges.namedSurveys = make(map[string][]*Survey)
	}
	if len(edges) == 0 {
		u.Edges.namedSurveys[name] = []*Survey{}
	} else {
		u.Edges.namedSurveys[name] = append(u.Edges.namedSurveys[name], edges...)
	}
}

// NamedSurveyProgress returns the SurveyProgress named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSurveyProgress(name string) ([]*SurveyProgress, error) {
	if u.Edges.namedSurveyProgress == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSurveyProgress[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSurveyProgress(name string, edges ...*SurveyProgress) {
	if u.Edges.namedSurveyProgress == nil {
		u.Edges.namedSurveyProgress = make(map[string][]*SurveyProgress)
	}
	if len(edges) == 0 {
		u.Edges.namedSurveyProgress[name] = []*SurveyProgress{}
	} else {
		u.Edges.namedSurveyProgress[name] = append(u.Edges.namedSurveyProgress[name], edges...)
	}
}

// NamedCreatedTrainingVideos returns the CreatedTrainingVideos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCreatedTrainingVideos(name string) ([]*TrainingVideo, error) {
	if u.Edges.namedCreatedTrainingVideos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCreatedTrainingVideos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCreatedTrainingVideos(name string, edges ...*TrainingVideo) {
	if u.Edges.namedCreatedTrainingVideos == nil {
		u.Edges.namedCreatedTrainingVideos = make(map[string][]*TrainingVideo)
	}
	if len(edges) == 0 {
		u.Edges.namedCreatedTrainingVideos[name] = []*TrainingVideo{}
	} else {
		u.Edges.namedCreatedTrainingVideos[name] = append(u.Edges.namedCreatedTrainingVideos[name], edges...)
	}
}

// NamedCreatedTrainingCourses returns the CreatedTrainingCourses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCreatedTrainingCourses(name string) ([]*TrainingCourse, error) {
	if u.Edges.namedCreatedTrainingCourses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCreatedTrainingCourses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCreatedTrainingCourses(name string, edges ...*TrainingCourse) {
	if u.Edges.namedCreatedTrainingCourses == nil {
		u.Edges.namedCreatedTrainingCourses = make(map[string][]*TrainingCourse)
	}
	if len(edges) == 0 {
		u.Edges.namedCreatedTrainingCourses[name] = []*TrainingCourse{}
	} else {
		u.Edges.namedCreatedTrainingCourses[name] = append(u.Edges.namedCreatedTrainingCourses[name], edges...)
	}
}

// NamedJobNotes returns the JobNotes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedJobNotes(name string) ([]*JobNote, error) {
	if u.Edges.namedJobNotes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedJobNotes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedJobNotes(name string, edges ...*JobNote) {
	if u.Edges.namedJobNotes == nil {
		u.Edges.namedJobNotes = make(map[string][]*JobNote)
	}
	if len(edges) == 0 {
		u.Edges.namedJobNotes[name] = []*JobNote{}
	} else {
		u.Edges.namedJobNotes[name] = append(u.Edges.namedJobNotes[name], edges...)
	}
}

// NamedChatChannels returns the ChatChannels named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedChatChannels(name string) ([]*ChannelSub, error) {
	if u.Edges.namedChatChannels == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedChatChannels[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedChatChannels(name string, edges ...*ChannelSub) {
	if u.Edges.namedChatChannels == nil {
		u.Edges.namedChatChannels = make(map[string][]*ChannelSub)
	}
	if len(edges) == 0 {
		u.Edges.namedChatChannels[name] = []*ChannelSub{}
	} else {
		u.Edges.namedChatChannels[name] = append(u.Edges.namedChatChannels[name], edges...)
	}
}

// NamedSentMessages returns the SentMessages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSentMessages(name string) ([]*ChannelMessage, error) {
	if u.Edges.namedSentMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSentMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSentMessages(name string, edges ...*ChannelMessage) {
	if u.Edges.namedSentMessages == nil {
		u.Edges.namedSentMessages = make(map[string][]*ChannelMessage)
	}
	if len(edges) == 0 {
		u.Edges.namedSentMessages[name] = []*ChannelMessage{}
	} else {
		u.Edges.namedSentMessages[name] = append(u.Edges.namedSentMessages[name], edges...)
	}
}

// NamedReceivedMessages returns the ReceivedMessages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedReceivedMessages(name string) ([]*ChannelMessage, error) {
	if u.Edges.namedReceivedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedReceivedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedReceivedMessages(name string, edges ...*ChannelMessage) {
	if u.Edges.namedReceivedMessages == nil {
		u.Edges.namedReceivedMessages = make(map[string][]*ChannelMessage)
	}
	if len(edges) == 0 {
		u.Edges.namedReceivedMessages[name] = []*ChannelMessage{}
	} else {
		u.Edges.namedReceivedMessages[name] = append(u.Edges.namedReceivedMessages[name], edges...)
	}
}

// NamedChannelMessageRead returns the ChannelMessageRead named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedChannelMessageRead(name string) ([]*ChannelMessageRead, error) {
	if u.Edges.namedChannelMessageRead == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedChannelMessageRead[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedChannelMessageRead(name string, edges ...*ChannelMessageRead) {
	if u.Edges.namedChannelMessageRead == nil {
		u.Edges.namedChannelMessageRead = make(map[string][]*ChannelMessageRead)
	}
	if len(edges) == 0 {
		u.Edges.namedChannelMessageRead[name] = []*ChannelMessageRead{}
	} else {
		u.Edges.namedChannelMessageRead[name] = append(u.Edges.namedChannelMessageRead[name], edges...)
	}
}

// NamedProductsCreated returns the ProductsCreated named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedProductsCreated(name string) ([]*Product, error) {
	if u.Edges.namedProductsCreated == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedProductsCreated[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedProductsCreated(name string, edges ...*Product) {
	if u.Edges.namedProductsCreated == nil {
		u.Edges.namedProductsCreated = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		u.Edges.namedProductsCreated[name] = []*Product{}
	} else {
		u.Edges.namedProductsCreated[name] = append(u.Edges.namedProductsCreated[name], edges...)
	}
}

// NamedProductPkgCreated returns the ProductPkgCreated named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedProductPkgCreated(name string) ([]*ProductPackage, error) {
	if u.Edges.namedProductPkgCreated == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedProductPkgCreated[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedProductPkgCreated(name string, edges ...*ProductPackage) {
	if u.Edges.namedProductPkgCreated == nil {
		u.Edges.namedProductPkgCreated = make(map[string][]*ProductPackage)
	}
	if len(edges) == 0 {
		u.Edges.namedProductPkgCreated[name] = []*ProductPackage{}
	} else {
		u.Edges.namedProductPkgCreated[name] = append(u.Edges.namedProductPkgCreated[name], edges...)
	}
}

// NamedJobDocUrls returns the JobDocUrls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedJobDocUrls(name string) ([]*JobDocURL, error) {
	if u.Edges.namedJobDocUrls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedJobDocUrls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedJobDocUrls(name string, edges ...*JobDocURL) {
	if u.Edges.namedJobDocUrls == nil {
		u.Edges.namedJobDocUrls = make(map[string][]*JobDocURL)
	}
	if len(edges) == 0 {
		u.Edges.namedJobDocUrls[name] = []*JobDocURL{}
	} else {
		u.Edges.namedJobDocUrls[name] = append(u.Edges.namedJobDocUrls[name], edges...)
	}
}

// NamedPartnerContacts returns the PartnerContacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPartnerContacts(name string) ([]*PartnerContact, error) {
	if u.Edges.namedPartnerContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPartnerContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPartnerContacts(name string, edges ...*PartnerContact) {
	if u.Edges.namedPartnerContacts == nil {
		u.Edges.namedPartnerContacts = make(map[string][]*PartnerContact)
	}
	if len(edges) == 0 {
		u.Edges.namedPartnerContacts[name] = []*PartnerContact{}
	} else {
		u.Edges.namedPartnerContacts[name] = append(u.Edges.namedPartnerContacts[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/installationjobitem"
	"roofix/ent/job"
	"roofix/ent/predicate"
	"roofix/ent/product"
	"roofix/ent/trainingvideo"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks     []Hook
	mutation  *DocumentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DocumentUpdate builder.
func (du *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DocumentUpdate) SetUpdatedAt(t time.Time) *DocumentUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetBucket sets the "bucket" field.
func (du *DocumentUpdate) SetBucket(s string) *DocumentUpdate {
	du.mutation.SetBucket(s)
	return du
}

// SetKey sets the "key" field.
func (du *DocumentUpdate) SetKey(s string) *DocumentUpdate {
	du.mutation.SetKey(s)
	return du
}

// SetFolder sets the "folder" field.
func (du *DocumentUpdate) SetFolder(ef enum.DocFolder) *DocumentUpdate {
	du.mutation.SetFolder(ef)
	return du
}

// SetDir sets the "dir" field.
func (du *DocumentUpdate) SetDir(s string) *DocumentUpdate {
	du.mutation.SetDir(s)
	return du
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableDir(s *string) *DocumentUpdate {
	if s != nil {
		du.SetDir(*s)
	}
	return du
}

// ClearDir clears the value of the "dir" field.
func (du *DocumentUpdate) ClearDir() *DocumentUpdate {
	du.mutation.ClearDir()
	return du
}

// SetSection sets the "section" field.
func (du *DocumentUpdate) SetSection(es enum.DocSection) *DocumentUpdate {
	du.mutation.SetSection(es)
	return du
}

// SetName sets the "name" field.
func (du *DocumentUpdate) SetName(s string) *DocumentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetFilename sets the "filename" field.
func (du *DocumentUpdate) SetFilename(s string) *DocumentUpdate {
	du.mutation.SetFilename(s)
	return du
}

// SetContentType sets the "content_type" field.
func (du *DocumentUpdate) SetContentType(s string) *DocumentUpdate {
	du.mutation.SetContentType(s)
	return du
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableContentType(s *string) *DocumentUpdate {
	if s != nil {
		du.SetContentType(*s)
	}
	return du
}

// ClearContentType clears the value of the "content_type" field.
func (du *DocumentUpdate) ClearContentType() *DocumentUpdate {
	du.mutation.ClearContentType()
	return du
}

// SetContentSize sets the "content_size" field.
func (du *DocumentUpdate) SetContentSize(i int64) *DocumentUpdate {
	du.mutation.ResetContentSize()
	du.mutation.SetContentSize(i)
	return du
}

// AddContentSize adds i to the "content_size" field.
func (du *DocumentUpdate) AddContentSize(i int64) *DocumentUpdate {
	du.mutation.AddContentSize(i)
	return du
}

// SetReady sets the "ready" field.
func (du *DocumentUpdate) SetReady(b bool) *DocumentUpdate {
	du.mutation.SetReady(b)
	return du
}

// SetNillableReady sets the "ready" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableReady(b *bool) *DocumentUpdate {
	if b != nil {
		du.SetReady(*b)
	}
	return du
}

// SetCreatorID sets the "creator_id" field.
func (du *DocumentUpdate) SetCreatorID(s string) *DocumentUpdate {
	du.mutation.SetCreatorID(s)
	return du
}

// SetUpdaterID sets the "updater_id" field.
func (du *DocumentUpdate) SetUpdaterID(s string) *DocumentUpdate {
	du.mutation.SetUpdaterID(s)
	return du
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableUpdaterID(s *string) *DocumentUpdate {
	if s != nil {
		du.SetUpdaterID(*s)
	}
	return du
}

// ClearUpdaterID clears the value of the "updater_id" field.
func (du *DocumentUpdate) ClearUpdaterID() *DocumentUpdate {
	du.mutation.ClearUpdaterID()
	return du
}

// SetTrainingVideoID sets the "training_video" edge to the TrainingVideo entity by ID.
func (du *DocumentUpdate) SetTrainingVideoID(id string) *DocumentUpdate {
	du.mutation.SetTrainingVideoID(id)
	return du
}

// SetNillableTrainingVideoID sets the "training_video" edge to the TrainingVideo entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableTrainingVideoID(id *string) *DocumentUpdate {
	if id != nil {
		du = du.SetTrainingVideoID(*id)
	}
	return du
}

// SetTrainingVideo sets the "training_video" edge to the TrainingVideo entity.
func (du *DocumentUpdate) SetTrainingVideo(t *TrainingVideo) *DocumentUpdate {
	return du.SetTrainingVideoID(t.ID)
}

// SetTrainingVideoPosterID sets the "training_video_poster" edge to the TrainingVideo entity by ID.
func (du *DocumentUpdate) SetTrainingVideoPosterID(id string) *DocumentUpdate {
	du.mutation.SetTrainingVideoPosterID(id)
	return du
}

// SetNillableTrainingVideoPosterID sets the "training_video_poster" edge to the TrainingVideo entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableTrainingVideoPosterID(id *string) *DocumentUpdate {
	if id != nil {
		du = du.SetTrainingVideoPosterID(*id)
	}
	return du
}

// SetTrainingVideoPoster sets the "training_video_poster" edge to the TrainingVideo entity.
func (du *DocumentUpdate) SetTrainingVideoPoster(t *TrainingVideo) *DocumentUpdate {
	return du.SetTrainingVideoPosterID(t.ID)
}

// SetProductsImageID sets the "products_image" edge to the Product entity by ID.
func (du *DocumentUpdate) SetProductsImageID(id string) *DocumentUpdate {
	du.mutation.SetProductsImageID(id)
	return du
}

// SetNillableProductsImageID sets the "products_image" edge to the Product entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableProductsImageID(id *string) *DocumentUpdate {
	if id != nil {
		du = du.SetProductsImageID(*id)
	}
	return du
}

// SetProductsImage sets the "products_image" edge to the Product entity.
func (du *DocumentUpdate) SetProductsImage(p *Product) *DocumentUpdate {
	return du.SetProductsImageID(p.ID)
}

// SetInstallationJobItemImageID sets the "installation_job_item_image" edge to the InstallationJobItem entity by ID.
func (du *DocumentUpdate) SetInstallationJobItemImageID(id string) *DocumentUpdate {
	du.mutation.SetInstallationJobItemImageID(id)
	return du
}

// SetNillableInstallationJobItemImageID sets the "installation_job_item_image" edge to the InstallationJobItem entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableInstallationJobItemImageID(id *string) *DocumentUpdate {
	if id != nil {
		du = du.SetInstallationJobItemImageID(*id)
	}
	return du
}

// SetInstallationJobItemImage sets the "installation_job_item_image" edge to the InstallationJobItem entity.
func (du *DocumentUpdate) SetInstallationJobItemImage(i *InstallationJobItem) *DocumentUpdate {
	return du.SetInstallationJobItemImageID(i.ID)
}

// SetEstimatePdfID sets the "estimate_pdf" edge to the Estimate entity by ID.
func (du *DocumentUpdate) SetEstimatePdfID(id string) *DocumentUpdate {
	du.mutation.SetEstimatePdfID(id)
	return du
}

// SetNillableEstimatePdfID sets the "estimate_pdf" edge to the Estimate entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableEstimatePdfID(id *string) *DocumentUpdate {
	if id != nil {
		du = du.SetEstimatePdfID(*id)
	}
	return du
}

// SetEstimatePdf sets the "estimate_pdf" edge to the Estimate entity.
func (du *DocumentUpdate) SetEstimatePdf(e *Estimate) *DocumentUpdate {
	return du.SetEstimatePdfID(e.ID)
}

// SetJobEstimatePdfID sets the "job_estimate_pdf" edge to the Job entity by ID.
func (du *DocumentUpdate) SetJobEstimatePdfID(id string) *DocumentUpdate {
	du.mutation.SetJobEstimatePdfID(id)
	return du
}

// SetNillableJobEstimatePdfID sets the "job_estimate_pdf" edge to the Job entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableJobEstimatePdfID(id *string) *DocumentUpdate {
	if id != nil {
		du = du.SetJobEstimatePdfID(*id)
	}
	return du
}

// SetJobEstimatePdf sets the "job_estimate_pdf" edge to the Job entity.
func (du *DocumentUpdate) SetJobEstimatePdf(j *Job) *DocumentUpdate {
	return du.SetJobEstimatePdfID(j.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (du *DocumentUpdate) Mutation() *DocumentMutation {
	return du.mutation
}

// ClearTrainingVideo clears the "training_video" edge to the TrainingVideo entity.
func (du *DocumentUpdate) ClearTrainingVideo() *DocumentUpdate {
	du.mutation.ClearTrainingVideo()
	return du
}

// ClearTrainingVideoPoster clears the "training_video_poster" edge to the TrainingVideo entity.
func (du *DocumentUpdate) ClearTrainingVideoPoster() *DocumentUpdate {
	du.mutation.ClearTrainingVideoPoster()
	return du
}

// ClearProductsImage clears the "products_image" edge to the Product entity.
func (du *DocumentUpdate) ClearProductsImage() *DocumentUpdate {
	du.mutation.ClearProductsImage()
	return du
}

// ClearInstallationJobItemImage clears the "installation_job_item_image" edge to the InstallationJobItem entity.
func (du *DocumentUpdate) ClearInstallationJobItemImage() *DocumentUpdate {
	du.mutation.ClearInstallationJobItemImage()
	return du
}

// ClearEstimatePdf clears the "estimate_pdf" edge to the Estimate entity.
func (du *DocumentUpdate) ClearEstimatePdf() *DocumentUpdate {
	du.mutation.ClearEstimatePdf()
	return du
}

// ClearJobEstimatePdf clears the "job_estimate_pdf" edge to the Job entity.
func (du *DocumentUpdate) ClearJobEstimatePdf() *DocumentUpdate {
	du.mutation.ClearJobEstimatePdf()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DocumentUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DocumentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DocumentUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := document.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DocumentUpdate) check() error {
	if v, ok := du.mutation.Bucket(); ok {
		if err := document.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "Document.bucket": %w`, err)}
		}
	}
	if v, ok := du.mutation.Folder(); ok {
		if err := document.FolderValidator(v); err != nil {
			return &ValidationError{Name: "folder", err: fmt.Errorf(`ent: validator failed for field "Document.folder": %w`, err)}
		}
	}
	if v, ok := du.mutation.Dir(); ok {
		if err := document.DirValidator(v); err != nil {
			return &ValidationError{Name: "dir", err: fmt.Errorf(`ent: validator failed for field "Document.dir": %w`, err)}
		}
	}
	if v, ok := du.mutation.Section(); ok {
		if err := document.SectionValidator(v); err != nil {
			return &ValidationError{Name: "section", err: fmt.Errorf(`ent: validator failed for field "Document.section": %w`, err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := document.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Document.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Filename(); ok {
		if err := document.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Document.filename": %w`, err)}
		}
	}
	if v, ok := du.mutation.ContentType(); ok {
		if err := document.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Document.content_type": %w`, err)}
		}
	}
	if v, ok := du.mutation.CreatorID(); ok {
		if err := document.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Document.creator_id": %w`, err)}
		}
	}
	if v, ok := du.mutation.UpdaterID(); ok {
		if err := document.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`ent: validator failed for field "Document.updater_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DocumentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DocumentUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(document.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Bucket(); ok {
		_spec.SetField(document.FieldBucket, field.TypeString, value)
	}
	if value, ok := du.mutation.Key(); ok {
		_spec.SetField(document.FieldKey, field.TypeString, value)
	}
	if value, ok := du.mutation.Folder(); ok {
		_spec.SetField(document.FieldFolder, field.TypeEnum, value)
	}
	if value, ok := du.mutation.Dir(); ok {
		_spec.SetField(document.FieldDir, field.TypeString, value)
	}
	if du.mutation.DirCleared() {
		_spec.ClearField(document.FieldDir, field.TypeString)
	}
	if value, ok := du.mutation.Section(); ok {
		_spec.SetField(document.FieldSection, field.TypeEnum, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Filename(); ok {
		_spec.SetField(document.FieldFilename, field.TypeString, value)
	}
	if value, ok := du.mutation.ContentType(); ok {
		_spec.SetField(document.FieldContentType, field.TypeString, value)
	}
	if du.mutation.ContentTypeCleared() {
		_spec.ClearField(document.FieldContentType, field.TypeString)
	}
	if value, ok := du.mutation.ContentSize(); ok {
		_spec.SetField(document.FieldContentSize, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedContentSize(); ok {
		_spec.AddField(document.FieldContentSize, field.TypeInt64, value)
	}
	if value, ok := du.mutation.Ready(); ok {
		_spec.SetField(document.FieldReady, field.TypeBool, value)
	}
	if value, ok := du.mutation.CreatorID(); ok {
		_spec.SetField(document.FieldCreatorID, field.TypeString, value)
	}
	if value, ok := du.mutation.UpdaterID(); ok {
		_spec.SetField(document.FieldUpdaterID, field.TypeString, value)
	}
	if du.mutation.UpdaterIDCleared() {
		_spec.ClearField(document.FieldUpdaterID, field.TypeString)
	}
	if du.mutation.TrainingVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoTable,
			Columns: []string{document.TrainingVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TrainingVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoTable,
			Columns: []string{document.TrainingVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.TrainingVideoPosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoPosterTable,
			Columns: []string{document.TrainingVideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TrainingVideoPosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoPosterTable,
			Columns: []string{document.TrainingVideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ProductsImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.ProductsImageTable,
			Columns: []string{document.ProductsImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProductsImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.ProductsImageTable,
			Columns: []string{document.ProductsImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.InstallationJobItemImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.InstallationJobItemImageTable,
			Columns: []string{document.InstallationJobItemImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.InstallationJobItemImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.InstallationJobItemImageTable,
			Columns: []string{document.InstallationJobItemImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EstimatePdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.EstimatePdfTable,
			Columns: []string{document.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.EstimatePdfTable,
			Columns: []string{document.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.JobEstimatePdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.JobEstimatePdfTable,
			Columns: []string{document.JobEstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.JobEstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.JobEstimatePdfTable,
			Columns: []string{document.JobEstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DocumentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DocumentUpdateOne) SetUpdatedAt(t time.Time) *DocumentUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetBucket sets the "bucket" field.
func (duo *DocumentUpdateOne) SetBucket(s string) *DocumentUpdateOne {
	duo.mutation.SetBucket(s)
	return duo
}

// SetKey sets the "key" field.
func (duo *DocumentUpdateOne) SetKey(s string) *DocumentUpdateOne {
	duo.mutation.SetKey(s)
	return duo
}

// SetFolder sets the "folder" field.
func (duo *DocumentUpdateOne) SetFolder(ef enum.DocFolder) *DocumentUpdateOne {
	duo.mutation.SetFolder(ef)
	return duo
}

// SetDir sets the "dir" field.
func (duo *DocumentUpdateOne) SetDir(s string) *DocumentUpdateOne {
	duo.mutation.SetDir(s)
	return duo
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableDir(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetDir(*s)
	}
	return duo
}

// ClearDir clears the value of the "dir" field.
func (duo *DocumentUpdateOne) ClearDir() *DocumentUpdateOne {
	duo.mutation.ClearDir()
	return duo
}

// SetSection sets the "section" field.
func (duo *DocumentUpdateOne) SetSection(es enum.DocSection) *DocumentUpdateOne {
	duo.mutation.SetSection(es)
	return duo
}

// SetName sets the "name" field.
func (duo *DocumentUpdateOne) SetName(s string) *DocumentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetFilename sets the "filename" field.
func (duo *DocumentUpdateOne) SetFilename(s string) *DocumentUpdateOne {
	duo.mutation.SetFilename(s)
	return duo
}

// SetContentType sets the "content_type" field.
func (duo *DocumentUpdateOne) SetContentType(s string) *DocumentUpdateOne {
	duo.mutation.SetContentType(s)
	return duo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableContentType(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetContentType(*s)
	}
	return duo
}

// ClearContentType clears the value of the "content_type" field.
func (duo *DocumentUpdateOne) ClearContentType() *DocumentUpdateOne {
	duo.mutation.ClearContentType()
	return duo
}

// SetContentSize sets the "content_size" field.
func (duo *DocumentUpdateOne) SetContentSize(i int64) *DocumentUpdateOne {
	duo.mutation.ResetContentSize()
	duo.mutation.SetContentSize(i)
	return duo
}

// AddContentSize adds i to the "content_size" field.
func (duo *DocumentUpdateOne) AddContentSize(i int64) *DocumentUpdateOne {
	duo.mutation.AddContentSize(i)
	return duo
}

// SetReady sets the "ready" field.
func (duo *DocumentUpdateOne) SetReady(b bool) *DocumentUpdateOne {
	duo.mutation.SetReady(b)
	return duo
}

// SetNillableReady sets the "ready" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableReady(b *bool) *DocumentUpdateOne {
	if b != nil {
		duo.SetReady(*b)
	}
	return duo
}

// SetCreatorID sets the "creator_id" field.
func (duo *DocumentUpdateOne) SetCreatorID(s string) *DocumentUpdateOne {
	duo.mutation.SetCreatorID(s)
	return duo
}

// SetUpdaterID sets the "updater_id" field.
func (duo *DocumentUpdateOne) SetUpdaterID(s string) *DocumentUpdateOne {
	duo.mutation.SetUpdaterID(s)
	return duo
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableUpdaterID(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetUpdaterID(*s)
	}
	return duo
}

// ClearUpdaterID clears the value of the "updater_id" field.
func (duo *DocumentUpdateOne) ClearUpdaterID() *DocumentUpdateOne {
	duo.mutation.ClearUpdaterID()
	return duo
}

// SetTrainingVideoID sets the "training_video" edge to the TrainingVideo entity by ID.
func (duo *DocumentUpdateOne) SetTrainingVideoID(id string) *DocumentUpdateOne {
	duo.mutation.SetTrainingVideoID(id)
	return duo
}

// SetNillableTrainingVideoID sets the "training_video" edge to the TrainingVideo entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableTrainingVideoID(id *string) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetTrainingVideoID(*id)
	}
	return duo
}

// SetTrainingVideo sets the "training_video" edge to the TrainingVideo entity.
func (duo *DocumentUpdateOne) SetTrainingVideo(t *TrainingVideo) *DocumentUpdateOne {
	return duo.SetTrainingVideoID(t.ID)
}

// SetTrainingVideoPosterID sets the "training_video_poster" edge to the TrainingVideo entity by ID.
func (duo *DocumentUpdateOne) SetTrainingVideoPosterID(id string) *DocumentUpdateOne {
	duo.mutation.SetTrainingVideoPosterID(id)
	return duo
}

// SetNillableTrainingVideoPosterID sets the "training_video_poster" edge to the TrainingVideo entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableTrainingVideoPosterID(id *string) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetTrainingVideoPosterID(*id)
	}
	return duo
}

// SetTrainingVideoPoster sets the "training_video_poster" edge to the TrainingVideo entity.
func (duo *DocumentUpdateOne) SetTrainingVideoPoster(t *TrainingVideo) *DocumentUpdateOne {
	return duo.SetTrainingVideoPosterID(t.ID)
}

// SetProductsImageID sets the "products_image" edge to the Product entity by ID.
func (duo *DocumentUpdateOne) SetProductsImageID(id string) *DocumentUpdateOne {
	duo.mutation.SetProductsImageID(id)
	return duo
}

// SetNillableProductsImageID sets the "products_image" edge to the Product entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableProductsImageID(id *string) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetProductsImageID(*id)
	}
	return duo
}

// SetProductsImage sets the "products_image" edge to the Product entity.
func (duo *DocumentUpdateOne) SetProductsImage(p *Product) *DocumentUpdateOne {
	return duo.SetProductsImageID(p.ID)
}

// SetInstallationJobItemImageID sets the "installation_job_item_image" edge to the InstallationJobItem entity by ID.
func (duo *DocumentUpdateOne) SetInstallationJobItemImageID(id string) *DocumentUpdateOne {
	duo.mutation.SetInstallationJobItemImageID(id)
	return duo
}

// SetNillableInstallationJobItemImageID sets the "installation_job_item_image" edge to the InstallationJobItem entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableInstallationJobItemImageID(id *string) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetInstallationJobItemImageID(*id)
	}
	return duo
}

// SetInstallationJobItemImage sets the "installation_job_item_image" edge to the InstallationJobItem entity.
func (duo *DocumentUpdateOne) SetInstallationJobItemImage(i *InstallationJobItem) *DocumentUpdateOne {
	return duo.SetInstallationJobItemImageID(i.ID)
}

// SetEstimatePdfID sets the "estimate_pdf" edge to the Estimate entity by ID.
func (duo *DocumentUpdateOne) SetEstimatePdfID(id string) *DocumentUpdateOne {
	duo.mutation.SetEstimatePdfID(id)
	return duo
}

// SetNillableEstimatePdfID sets the "estimate_pdf" edge to the Estimate entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableEstimatePdfID(id *string) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetEstimatePdfID(*id)
	}
	return duo
}

// SetEstimatePdf sets the "estimate_pdf" edge to the Estimate entity.
func (duo *DocumentUpdateOne) SetEstimatePdf(e *Estimate) *DocumentUpdateOne {
	return duo.SetEstimatePdfID(e.ID)
}

// SetJobEstimatePdfID sets the "job_estimate_pdf" edge to the Job entity by ID.
func (duo *DocumentUpdateOne) SetJobEstimatePdfID(id string) *DocumentUpdateOne {
	duo.mutation.SetJobEstimatePdfID(id)
	return duo
}

// SetNillableJobEstimatePdfID sets the "job_estimate_pdf" edge to the Job entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableJobEstimatePdfID(id *string) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetJobEstimatePdfID(*id)
	}
	return duo
}

// SetJobEstimatePdf sets the "job_estimate_pdf" edge to the Job entity.
func (duo *DocumentUpdateOne) SetJobEstimatePdf(j *Job) *DocumentUpdateOne {
	return duo.SetJobEstimatePdfID(j.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (duo *DocumentUpdateOne) Mutation() *DocumentMutation {
	return duo.mutation
}

// ClearTrainingVideo clears the "training_video" edge to the TrainingVideo entity.
func (duo *DocumentUpdateOne) ClearTrainingVideo() *DocumentUpdateOne {
	duo.mutation.ClearTrainingVideo()
	return duo
}

// ClearTrainingVideoPoster clears the "training_video_poster" edge to the TrainingVideo entity.
func (duo *DocumentUpdateOne) ClearTrainingVideoPoster() *DocumentUpdateOne {
	duo.mutation.ClearTrainingVideoPoster()
	return duo
}

// ClearProductsImage clears the "products_image" edge to the Product entity.
func (duo *DocumentUpdateOne) ClearProductsImage() *DocumentUpdateOne {
	duo.mutation.ClearProductsImage()
	return duo
}

// ClearInstallationJobItemImage clears the "installation_job_item_image" edge to the InstallationJobItem entity.
func (duo *DocumentUpdateOne) ClearInstallationJobItemImage() *DocumentUpdateOne {
	duo.mutation.ClearInstallationJobItemImage()
	return duo
}

// ClearEstimatePdf clears the "estimate_pdf" edge to the Estimate entity.
func (duo *DocumentUpdateOne) ClearEstimatePdf() *DocumentUpdateOne {
	duo.mutation.ClearEstimatePdf()
	return duo
}

// ClearJobEstimatePdf clears the "job_estimate_pdf" edge to the Job entity.
func (duo *DocumentUpdateOne) ClearJobEstimatePdf() *DocumentUpdateOne {
	duo.mutation.ClearJobEstimatePdf()
	return duo
}

// Where appends a list predicates to the DocumentUpdate builder.
func (duo *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Document entity.
func (duo *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DocumentUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := document.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DocumentUpdateOne) check() error {
	if v, ok := duo.mutation.Bucket(); ok {
		if err := document.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "Document.bucket": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Folder(); ok {
		if err := document.FolderValidator(v); err != nil {
			return &ValidationError{Name: "folder", err: fmt.Errorf(`ent: validator failed for field "Document.folder": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Dir(); ok {
		if err := document.DirValidator(v); err != nil {
			return &ValidationError{Name: "dir", err: fmt.Errorf(`ent: validator failed for field "Document.dir": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Section(); ok {
		if err := document.SectionValidator(v); err != nil {
			return &ValidationError{Name: "section", err: fmt.Errorf(`ent: validator failed for field "Document.section": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := document.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Document.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Filename(); ok {
		if err := document.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Document.filename": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ContentType(); ok {
		if err := document.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Document.content_type": %w`, err)}
		}
	}
	if v, ok := duo.mutation.CreatorID(); ok {
		if err := document.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Document.creator_id": %w`, err)}
		}
	}
	if v, ok := duo.mutation.UpdaterID(); ok {
		if err := document.UpdaterIDValidator(v); err != nil {
			return &ValidationError{Name: "updater_id", err: fmt.Errorf(`ent: validator failed for field "Document.updater_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DocumentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DocumentUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(document.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Bucket(); ok {
		_spec.SetField(document.FieldBucket, field.TypeString, value)
	}
	if value, ok := duo.mutation.Key(); ok {
		_spec.SetField(document.FieldKey, field.TypeString, value)
	}
	if value, ok := duo.mutation.Folder(); ok {
		_spec.SetField(document.FieldFolder, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.Dir(); ok {
		_spec.SetField(document.FieldDir, field.TypeString, value)
	}
	if duo.mutation.DirCleared() {
		_spec.ClearField(document.FieldDir, field.TypeString)
	}
	if value, ok := duo.mutation.Section(); ok {
		_spec.SetField(document.FieldSection, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Filename(); ok {
		_spec.SetField(document.FieldFilename, field.TypeString, value)
	}
	if value, ok := duo.mutation.ContentType(); ok {
		_spec.SetField(document.FieldContentType, field.TypeString, value)
	}
	if duo.mutation.ContentTypeCleared() {
		_spec.ClearField(document.FieldContentType, field.TypeString)
	}
	if value, ok := duo.mutation.ContentSize(); ok {
		_spec.SetField(document.FieldContentSize, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedContentSize(); ok {
		_spec.AddField(document.FieldContentSize, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.Ready(); ok {
		_spec.SetField(document.FieldReady, field.TypeBool, value)
	}
	if value, ok := duo.mutation.CreatorID(); ok {
		_spec.SetField(document.FieldCreatorID, field.TypeString, value)
	}
	if value, ok := duo.mutation.UpdaterID(); ok {
		_spec.SetField(document.FieldUpdaterID, field.TypeString, value)
	}
	if duo.mutation.UpdaterIDCleared() {
		_spec.ClearField(document.FieldUpdaterID, field.TypeString)
	}
	if duo.mutation.TrainingVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoTable,
			Columns: []string{document.TrainingVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TrainingVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoTable,
			Columns: []string{document.TrainingVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.TrainingVideoPosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoPosterTable,
			Columns: []string{document.TrainingVideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TrainingVideoPosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.TrainingVideoPosterTable,
			Columns: []string{document.TrainingVideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainingvideo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ProductsImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.ProductsImageTable,
			Columns: []string{document.ProductsImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProductsImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.ProductsImageTable,
			Columns: []string{document.ProductsImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.InstallationJobItemImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.InstallationJobItemImageTable,
			Columns: []string{document.InstallationJobItemImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.InstallationJobItemImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.InstallationJobItemImageTable,
			Columns: []string{document.InstallationJobItemImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(installationjobitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EstimatePdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.EstimatePdfTable,
			Columns: []string{document.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.EstimatePdfTable,
			Columns: []string{document.EstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.JobEstimatePdfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.JobEstimatePdfTable,
			Columns: []string{document.JobEstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.JobEstimatePdfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   document.JobEstimatePdfTable,
			Columns: []string{document.JobEstimatePdfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Document{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"roofix/ent/partner"
	"roofix/ent/partnercontact"
	"roofix/ent/user"
	"roofix/ent/usersession"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSession is the model entity for the UserSession schema.
type UserSession struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSessionQuery when eager-loading is set.
	Edges              UserSessionEdges `json:"edges"`
	partner_id         *string
	partner_contact_id *string
	user_id            *string
	selectValues       sql.SelectValues
}

// UserSessionEdges holds the relations/edges for other nodes in the graph.
type UserSessionEdges struct {
	// Sockets holds the value of the sockets edge.
	Sockets []*UserSessionSocket `json:"sockets,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Partner holds the value of the partner edge.
	Partner *Partner `json:"partner,omitempty"`
	// PartnerContact holds the value of the partner_contact edge.
	PartnerContact *PartnerContact `json:"partner_contact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedSockets map[string][]*UserSessionSocket
}

// SocketsOrErr returns the Sockets value or an error if the edge
// was not loaded in eager-loading.
func (e UserSessionEdges) SocketsOrErr() ([]*UserSessionSocket, error) {
	if e.loadedTypes[0] {
		return e.Sockets, nil
	}
	return nil, &NotLoadedError{edge: "sockets"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSessionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSessionEdges) PartnerOrErr() (*Partner, error) {
	if e.loadedTypes[2] {
		if e.Partner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partner.Label}
		}
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// PartnerContactOrErr returns the PartnerContact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSessionEdges) PartnerContactOrErr() (*PartnerContact, error) {
	if e.loadedTypes[3] {
		if e.PartnerContact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: partnercontact.Label}
		}
		return e.PartnerContact, nil
	}
	return nil, &NotLoadedError{edge: "partner_contact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersession.FieldID, usersession.FieldIP:
			values[i] = new(sql.NullString)
		case usersession.FieldCreatedAt, usersession.FieldUpdatedAt, usersession.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case usersession.ForeignKeys[0]: // partner_id
			values[i] = new(sql.NullString)
		case usersession.ForeignKeys[1]: // partner_contact_id
			values[i] = new(sql.NullString)
		case usersession.ForeignKeys[2]: // user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSession fields.
func (us *UserSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersession.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				us.ID = value.String
			}
		case usersession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				us.CreatedAt = value.Time
			}
		case usersession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				us.UpdatedAt = value.Time
			}
		case usersession.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				us.ExpiresAt = value.Time
			}
		case usersession.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				us.IP = value.String
			}
		case usersession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				us.partner_id = new(string)
				*us.partner_id = value.String
			}
		case usersession.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_contact_id", values[i])
			} else if value.Valid {
				us.partner_contact_id = new(string)
				*us.partner_contact_id = value.String
			}
		case usersession.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.user_id = new(string)
				*us.user_id = value.String
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSession.
// This includes values selected through modifiers, order, etc.
func (us *UserSession) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QuerySockets queries the "sockets" edge of the UserSession entity.
func (us *UserSession) QuerySockets() *UserSessionSocketQuery {
	return NewUserSessionClient(us.config).QuerySockets(us)
}

// QueryUser queries the "user" edge of the UserSession entity.
func (us *UserSession) QueryUser() *UserQuery {
	return NewUserSessionClient(us.config).QueryUser(us)
}

// QueryPartner queries the "partner" edge of the UserSession entity.
func (us *UserSession) QueryPartner() *PartnerQuery {
	return NewUserSessionClient(us.config).QueryPartner(us)
}

// QueryPartnerContact queries the "partner_contact" edge of the UserSession entity.
func (us *UserSession) QueryPartnerContact() *PartnerContactQuery {
	return NewUserSessionClient(us.config).QueryPartnerContact(us)
}

// Update returns a builder for updating this UserSession.
// Note that you need to call UserSession.Unwrap() before calling this method if this UserSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSession) Update() *UserSessionUpdateOne {
	return NewUserSessionClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSession) Unwrap() *UserSession {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSession is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSession) String() string {
	var builder strings.Builder
	builder.WriteString("UserSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("created_at=")
	builder.WriteString(us.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(us.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(us.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(us.IP)
	builder.WriteByte(')')
	return builder.String()
}

// NamedSockets returns the Sockets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (us *UserSession) NamedSockets(name string) ([]*UserSessionSocket, error) {
	if us.Edges.namedSockets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := us.Edges.namedSockets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (us *UserSession) appendNamedSockets(name string, edges ...*UserSessionSocket) {
	if us.Edges.namedSockets == nil {
		us.Edges.namedSockets = make(map[string][]*UserSessionSocket)
	}
	if len(edges) == 0 {
		us.Edges.namedSockets[name] = []*UserSessionSocket{}
	} else {
		us.Edges.namedSockets[name] = append(us.Edges.namedSockets[name], edges...)
	}
}

// UserSessions is a parsable slice of UserSession.
type UserSessions []*UserSession

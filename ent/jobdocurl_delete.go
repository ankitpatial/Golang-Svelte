// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"roofix/ent/jobdocurl"
	"roofix/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobDocURLDelete is the builder for deleting a JobDocURL entity.
type JobDocURLDelete struct {
	config
	hooks    []Hook
	mutation *JobDocURLMutation
}

// Where appends a list predicates to the JobDocURLDelete builder.
func (jdud *JobDocURLDelete) Where(ps ...predicate.JobDocURL) *JobDocURLDelete {
	jdud.mutation.Where(ps...)
	return jdud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jdud *JobDocURLDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jdud.sqlExec, jdud.mutation, jdud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jdud *JobDocURLDelete) ExecX(ctx context.Context) int {
	n, err := jdud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jdud *JobDocURLDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobdocurl.Table, sqlgraph.NewFieldSpec(jobdocurl.FieldID, field.TypeString))
	if ps := jdud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jdud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jdud.mutation.done = true
	return affected, err
}

// JobDocURLDeleteOne is the builder for deleting a single JobDocURL entity.
type JobDocURLDeleteOne struct {
	jdud *JobDocURLDelete
}

// Where appends a list predicates to the JobDocURLDelete builder.
func (jdudo *JobDocURLDeleteOne) Where(ps ...predicate.JobDocURL) *JobDocURLDeleteOne {
	jdudo.jdud.mutation.Where(ps...)
	return jdudo
}

// Exec executes the deletion query.
func (jdudo *JobDocURLDeleteOne) Exec(ctx context.Context) error {
	n, err := jdudo.jdud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobdocurl.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jdudo *JobDocURLDeleteOne) ExecX(ctx context.Context) {
	if err := jdudo.Exec(ctx); err != nil {
		panic(err)
	}
}

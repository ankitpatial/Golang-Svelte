// Code generated by ent, DO NOT EDIT.

package installationjob

import (
	"roofix/ent/predicate"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldUpdatedAt, v))
}

// OwnerName applies equality check predicate on the "owner_name" field. It's identical to OwnerNameEQ.
func OwnerName(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerName, v))
}

// OwnerPhone applies equality check predicate on the "owner_phone" field. It's identical to OwnerPhoneEQ.
func OwnerPhone(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerPhone, v))
}

// OwnerEmail applies equality check predicate on the "owner_email" field. It's identical to OwnerEmailEQ.
func OwnerEmail(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerEmail, v))
}

// OwnerAddress applies equality check predicate on the "owner_address" field. It's identical to OwnerAddressEQ.
func OwnerAddress(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerAddressLat applies equality check predicate on the "owner_address_lat" field. It's identical to OwnerAddressLatEQ.
func OwnerAddressLat(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerAddressLat, v))
}

// OwnerAddressLng applies equality check predicate on the "owner_address_lng" field. It's identical to OwnerAddressLngEQ.
func OwnerAddressLng(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerAddressLng, v))
}

// SpecialNote applies equality check predicate on the "special_note" field. It's identical to SpecialNoteEQ.
func SpecialNote(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldSpecialNote, v))
}

// Pkg applies equality check predicate on the "pkg" field. It's identical to PkgEQ.
func Pkg(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldPkg, v))
}

// PkgDescription applies equality check predicate on the "pkg_description" field. It's identical to PkgDescriptionEQ.
func PkgDescription(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldPkgDescription, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldPrice, v))
}

// ApprovalAt applies equality check predicate on the "approval_at" field. It's identical to ApprovalAtEQ.
func ApprovalAt(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldApprovalAt, v))
}

// DenyReason applies equality check predicate on the "deny_reason" field. It's identical to DenyReasonEQ.
func DenyReason(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldDenyReason, v))
}

// StatusAt applies equality check predicate on the "status_at" field. It's identical to StatusAtEQ.
func StatusAt(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldStatusAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enum.InstallationType) predicate.InstallationJob {
	vc := v
	return predicate.InstallationJob(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enum.InstallationType) predicate.InstallationJob {
	vc := v
	return predicate.InstallationJob(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enum.InstallationType) predicate.InstallationJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstallationJob(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enum.InstallationType) predicate.InstallationJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstallationJob(sql.FieldNotIn(FieldType, v...))
}

// OwnerNameEQ applies the EQ predicate on the "owner_name" field.
func OwnerNameEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerName, v))
}

// OwnerNameNEQ applies the NEQ predicate on the "owner_name" field.
func OwnerNameNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldOwnerName, v))
}

// OwnerNameIn applies the In predicate on the "owner_name" field.
func OwnerNameIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldOwnerName, vs...))
}

// OwnerNameNotIn applies the NotIn predicate on the "owner_name" field.
func OwnerNameNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldOwnerName, vs...))
}

// OwnerNameGT applies the GT predicate on the "owner_name" field.
func OwnerNameGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldOwnerName, v))
}

// OwnerNameGTE applies the GTE predicate on the "owner_name" field.
func OwnerNameGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldOwnerName, v))
}

// OwnerNameLT applies the LT predicate on the "owner_name" field.
func OwnerNameLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldOwnerName, v))
}

// OwnerNameLTE applies the LTE predicate on the "owner_name" field.
func OwnerNameLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldOwnerName, v))
}

// OwnerNameContains applies the Contains predicate on the "owner_name" field.
func OwnerNameContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldOwnerName, v))
}

// OwnerNameHasPrefix applies the HasPrefix predicate on the "owner_name" field.
func OwnerNameHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldOwnerName, v))
}

// OwnerNameHasSuffix applies the HasSuffix predicate on the "owner_name" field.
func OwnerNameHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldOwnerName, v))
}

// OwnerNameEqualFold applies the EqualFold predicate on the "owner_name" field.
func OwnerNameEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldOwnerName, v))
}

// OwnerNameContainsFold applies the ContainsFold predicate on the "owner_name" field.
func OwnerNameContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldOwnerName, v))
}

// OwnerPhoneEQ applies the EQ predicate on the "owner_phone" field.
func OwnerPhoneEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerPhone, v))
}

// OwnerPhoneNEQ applies the NEQ predicate on the "owner_phone" field.
func OwnerPhoneNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldOwnerPhone, v))
}

// OwnerPhoneIn applies the In predicate on the "owner_phone" field.
func OwnerPhoneIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldOwnerPhone, vs...))
}

// OwnerPhoneNotIn applies the NotIn predicate on the "owner_phone" field.
func OwnerPhoneNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldOwnerPhone, vs...))
}

// OwnerPhoneGT applies the GT predicate on the "owner_phone" field.
func OwnerPhoneGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldOwnerPhone, v))
}

// OwnerPhoneGTE applies the GTE predicate on the "owner_phone" field.
func OwnerPhoneGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldOwnerPhone, v))
}

// OwnerPhoneLT applies the LT predicate on the "owner_phone" field.
func OwnerPhoneLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldOwnerPhone, v))
}

// OwnerPhoneLTE applies the LTE predicate on the "owner_phone" field.
func OwnerPhoneLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldOwnerPhone, v))
}

// OwnerPhoneContains applies the Contains predicate on the "owner_phone" field.
func OwnerPhoneContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldOwnerPhone, v))
}

// OwnerPhoneHasPrefix applies the HasPrefix predicate on the "owner_phone" field.
func OwnerPhoneHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldOwnerPhone, v))
}

// OwnerPhoneHasSuffix applies the HasSuffix predicate on the "owner_phone" field.
func OwnerPhoneHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldOwnerPhone, v))
}

// OwnerPhoneEqualFold applies the EqualFold predicate on the "owner_phone" field.
func OwnerPhoneEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldOwnerPhone, v))
}

// OwnerPhoneContainsFold applies the ContainsFold predicate on the "owner_phone" field.
func OwnerPhoneContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldOwnerPhone, v))
}

// OwnerEmailEQ applies the EQ predicate on the "owner_email" field.
func OwnerEmailEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerEmail, v))
}

// OwnerEmailNEQ applies the NEQ predicate on the "owner_email" field.
func OwnerEmailNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldOwnerEmail, v))
}

// OwnerEmailIn applies the In predicate on the "owner_email" field.
func OwnerEmailIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldOwnerEmail, vs...))
}

// OwnerEmailNotIn applies the NotIn predicate on the "owner_email" field.
func OwnerEmailNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldOwnerEmail, vs...))
}

// OwnerEmailGT applies the GT predicate on the "owner_email" field.
func OwnerEmailGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldOwnerEmail, v))
}

// OwnerEmailGTE applies the GTE predicate on the "owner_email" field.
func OwnerEmailGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldOwnerEmail, v))
}

// OwnerEmailLT applies the LT predicate on the "owner_email" field.
func OwnerEmailLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldOwnerEmail, v))
}

// OwnerEmailLTE applies the LTE predicate on the "owner_email" field.
func OwnerEmailLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldOwnerEmail, v))
}

// OwnerEmailContains applies the Contains predicate on the "owner_email" field.
func OwnerEmailContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldOwnerEmail, v))
}

// OwnerEmailHasPrefix applies the HasPrefix predicate on the "owner_email" field.
func OwnerEmailHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldOwnerEmail, v))
}

// OwnerEmailHasSuffix applies the HasSuffix predicate on the "owner_email" field.
func OwnerEmailHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldOwnerEmail, v))
}

// OwnerEmailIsNil applies the IsNil predicate on the "owner_email" field.
func OwnerEmailIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldOwnerEmail))
}

// OwnerEmailNotNil applies the NotNil predicate on the "owner_email" field.
func OwnerEmailNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldOwnerEmail))
}

// OwnerEmailEqualFold applies the EqualFold predicate on the "owner_email" field.
func OwnerEmailEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldOwnerEmail, v))
}

// OwnerEmailContainsFold applies the ContainsFold predicate on the "owner_email" field.
func OwnerEmailContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldOwnerEmail, v))
}

// OwnerAddressEQ applies the EQ predicate on the "owner_address" field.
func OwnerAddressEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerAddressNEQ applies the NEQ predicate on the "owner_address" field.
func OwnerAddressNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldOwnerAddress, v))
}

// OwnerAddressIn applies the In predicate on the "owner_address" field.
func OwnerAddressIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldOwnerAddress, vs...))
}

// OwnerAddressNotIn applies the NotIn predicate on the "owner_address" field.
func OwnerAddressNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldOwnerAddress, vs...))
}

// OwnerAddressGT applies the GT predicate on the "owner_address" field.
func OwnerAddressGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldOwnerAddress, v))
}

// OwnerAddressGTE applies the GTE predicate on the "owner_address" field.
func OwnerAddressGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldOwnerAddress, v))
}

// OwnerAddressLT applies the LT predicate on the "owner_address" field.
func OwnerAddressLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldOwnerAddress, v))
}

// OwnerAddressLTE applies the LTE predicate on the "owner_address" field.
func OwnerAddressLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldOwnerAddress, v))
}

// OwnerAddressContains applies the Contains predicate on the "owner_address" field.
func OwnerAddressContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldOwnerAddress, v))
}

// OwnerAddressHasPrefix applies the HasPrefix predicate on the "owner_address" field.
func OwnerAddressHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldOwnerAddress, v))
}

// OwnerAddressHasSuffix applies the HasSuffix predicate on the "owner_address" field.
func OwnerAddressHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldOwnerAddress, v))
}

// OwnerAddressEqualFold applies the EqualFold predicate on the "owner_address" field.
func OwnerAddressEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldOwnerAddress, v))
}

// OwnerAddressContainsFold applies the ContainsFold predicate on the "owner_address" field.
func OwnerAddressContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldOwnerAddress, v))
}

// OwnerAddressLatEQ applies the EQ predicate on the "owner_address_lat" field.
func OwnerAddressLatEQ(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerAddressLat, v))
}

// OwnerAddressLatNEQ applies the NEQ predicate on the "owner_address_lat" field.
func OwnerAddressLatNEQ(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldOwnerAddressLat, v))
}

// OwnerAddressLatIn applies the In predicate on the "owner_address_lat" field.
func OwnerAddressLatIn(vs ...float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldOwnerAddressLat, vs...))
}

// OwnerAddressLatNotIn applies the NotIn predicate on the "owner_address_lat" field.
func OwnerAddressLatNotIn(vs ...float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldOwnerAddressLat, vs...))
}

// OwnerAddressLatGT applies the GT predicate on the "owner_address_lat" field.
func OwnerAddressLatGT(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldOwnerAddressLat, v))
}

// OwnerAddressLatGTE applies the GTE predicate on the "owner_address_lat" field.
func OwnerAddressLatGTE(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldOwnerAddressLat, v))
}

// OwnerAddressLatLT applies the LT predicate on the "owner_address_lat" field.
func OwnerAddressLatLT(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldOwnerAddressLat, v))
}

// OwnerAddressLatLTE applies the LTE predicate on the "owner_address_lat" field.
func OwnerAddressLatLTE(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldOwnerAddressLat, v))
}

// OwnerAddressLatIsNil applies the IsNil predicate on the "owner_address_lat" field.
func OwnerAddressLatIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldOwnerAddressLat))
}

// OwnerAddressLatNotNil applies the NotNil predicate on the "owner_address_lat" field.
func OwnerAddressLatNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldOwnerAddressLat))
}

// OwnerAddressLngEQ applies the EQ predicate on the "owner_address_lng" field.
func OwnerAddressLngEQ(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldOwnerAddressLng, v))
}

// OwnerAddressLngNEQ applies the NEQ predicate on the "owner_address_lng" field.
func OwnerAddressLngNEQ(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldOwnerAddressLng, v))
}

// OwnerAddressLngIn applies the In predicate on the "owner_address_lng" field.
func OwnerAddressLngIn(vs ...float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldOwnerAddressLng, vs...))
}

// OwnerAddressLngNotIn applies the NotIn predicate on the "owner_address_lng" field.
func OwnerAddressLngNotIn(vs ...float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldOwnerAddressLng, vs...))
}

// OwnerAddressLngGT applies the GT predicate on the "owner_address_lng" field.
func OwnerAddressLngGT(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldOwnerAddressLng, v))
}

// OwnerAddressLngGTE applies the GTE predicate on the "owner_address_lng" field.
func OwnerAddressLngGTE(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldOwnerAddressLng, v))
}

// OwnerAddressLngLT applies the LT predicate on the "owner_address_lng" field.
func OwnerAddressLngLT(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldOwnerAddressLng, v))
}

// OwnerAddressLngLTE applies the LTE predicate on the "owner_address_lng" field.
func OwnerAddressLngLTE(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldOwnerAddressLng, v))
}

// OwnerAddressLngIsNil applies the IsNil predicate on the "owner_address_lng" field.
func OwnerAddressLngIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldOwnerAddressLng))
}

// OwnerAddressLngNotNil applies the NotNil predicate on the "owner_address_lng" field.
func OwnerAddressLngNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldOwnerAddressLng))
}

// SpecialNoteEQ applies the EQ predicate on the "special_note" field.
func SpecialNoteEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldSpecialNote, v))
}

// SpecialNoteNEQ applies the NEQ predicate on the "special_note" field.
func SpecialNoteNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldSpecialNote, v))
}

// SpecialNoteIn applies the In predicate on the "special_note" field.
func SpecialNoteIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldSpecialNote, vs...))
}

// SpecialNoteNotIn applies the NotIn predicate on the "special_note" field.
func SpecialNoteNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldSpecialNote, vs...))
}

// SpecialNoteGT applies the GT predicate on the "special_note" field.
func SpecialNoteGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldSpecialNote, v))
}

// SpecialNoteGTE applies the GTE predicate on the "special_note" field.
func SpecialNoteGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldSpecialNote, v))
}

// SpecialNoteLT applies the LT predicate on the "special_note" field.
func SpecialNoteLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldSpecialNote, v))
}

// SpecialNoteLTE applies the LTE predicate on the "special_note" field.
func SpecialNoteLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldSpecialNote, v))
}

// SpecialNoteContains applies the Contains predicate on the "special_note" field.
func SpecialNoteContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldSpecialNote, v))
}

// SpecialNoteHasPrefix applies the HasPrefix predicate on the "special_note" field.
func SpecialNoteHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldSpecialNote, v))
}

// SpecialNoteHasSuffix applies the HasSuffix predicate on the "special_note" field.
func SpecialNoteHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldSpecialNote, v))
}

// SpecialNoteIsNil applies the IsNil predicate on the "special_note" field.
func SpecialNoteIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldSpecialNote))
}

// SpecialNoteNotNil applies the NotNil predicate on the "special_note" field.
func SpecialNoteNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldSpecialNote))
}

// SpecialNoteEqualFold applies the EqualFold predicate on the "special_note" field.
func SpecialNoteEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldSpecialNote, v))
}

// SpecialNoteContainsFold applies the ContainsFold predicate on the "special_note" field.
func SpecialNoteContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldSpecialNote, v))
}

// PkgEQ applies the EQ predicate on the "pkg" field.
func PkgEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldPkg, v))
}

// PkgNEQ applies the NEQ predicate on the "pkg" field.
func PkgNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldPkg, v))
}

// PkgIn applies the In predicate on the "pkg" field.
func PkgIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldPkg, vs...))
}

// PkgNotIn applies the NotIn predicate on the "pkg" field.
func PkgNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldPkg, vs...))
}

// PkgGT applies the GT predicate on the "pkg" field.
func PkgGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldPkg, v))
}

// PkgGTE applies the GTE predicate on the "pkg" field.
func PkgGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldPkg, v))
}

// PkgLT applies the LT predicate on the "pkg" field.
func PkgLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldPkg, v))
}

// PkgLTE applies the LTE predicate on the "pkg" field.
func PkgLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldPkg, v))
}

// PkgContains applies the Contains predicate on the "pkg" field.
func PkgContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldPkg, v))
}

// PkgHasPrefix applies the HasPrefix predicate on the "pkg" field.
func PkgHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldPkg, v))
}

// PkgHasSuffix applies the HasSuffix predicate on the "pkg" field.
func PkgHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldPkg, v))
}

// PkgEqualFold applies the EqualFold predicate on the "pkg" field.
func PkgEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldPkg, v))
}

// PkgContainsFold applies the ContainsFold predicate on the "pkg" field.
func PkgContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldPkg, v))
}

// PkgDescriptionEQ applies the EQ predicate on the "pkg_description" field.
func PkgDescriptionEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldPkgDescription, v))
}

// PkgDescriptionNEQ applies the NEQ predicate on the "pkg_description" field.
func PkgDescriptionNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldPkgDescription, v))
}

// PkgDescriptionIn applies the In predicate on the "pkg_description" field.
func PkgDescriptionIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldPkgDescription, vs...))
}

// PkgDescriptionNotIn applies the NotIn predicate on the "pkg_description" field.
func PkgDescriptionNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldPkgDescription, vs...))
}

// PkgDescriptionGT applies the GT predicate on the "pkg_description" field.
func PkgDescriptionGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldPkgDescription, v))
}

// PkgDescriptionGTE applies the GTE predicate on the "pkg_description" field.
func PkgDescriptionGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldPkgDescription, v))
}

// PkgDescriptionLT applies the LT predicate on the "pkg_description" field.
func PkgDescriptionLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldPkgDescription, v))
}

// PkgDescriptionLTE applies the LTE predicate on the "pkg_description" field.
func PkgDescriptionLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldPkgDescription, v))
}

// PkgDescriptionContains applies the Contains predicate on the "pkg_description" field.
func PkgDescriptionContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldPkgDescription, v))
}

// PkgDescriptionHasPrefix applies the HasPrefix predicate on the "pkg_description" field.
func PkgDescriptionHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldPkgDescription, v))
}

// PkgDescriptionHasSuffix applies the HasSuffix predicate on the "pkg_description" field.
func PkgDescriptionHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldPkgDescription, v))
}

// PkgDescriptionIsNil applies the IsNil predicate on the "pkg_description" field.
func PkgDescriptionIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldPkgDescription))
}

// PkgDescriptionNotNil applies the NotNil predicate on the "pkg_description" field.
func PkgDescriptionNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldPkgDescription))
}

// PkgDescriptionEqualFold applies the EqualFold predicate on the "pkg_description" field.
func PkgDescriptionEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldPkgDescription, v))
}

// PkgDescriptionContainsFold applies the ContainsFold predicate on the "pkg_description" field.
func PkgDescriptionContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldPkgDescription, v))
}

// PkgFeaturesIsNil applies the IsNil predicate on the "pkg_features" field.
func PkgFeaturesIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldPkgFeatures))
}

// PkgFeaturesNotNil applies the NotNil predicate on the "pkg_features" field.
func PkgFeaturesNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldPkgFeatures))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldPrice, v))
}

// ApprovalEQ applies the EQ predicate on the "approval" field.
func ApprovalEQ(v enum.Approval) predicate.InstallationJob {
	vc := v
	return predicate.InstallationJob(sql.FieldEQ(FieldApproval, vc))
}

// ApprovalNEQ applies the NEQ predicate on the "approval" field.
func ApprovalNEQ(v enum.Approval) predicate.InstallationJob {
	vc := v
	return predicate.InstallationJob(sql.FieldNEQ(FieldApproval, vc))
}

// ApprovalIn applies the In predicate on the "approval" field.
func ApprovalIn(vs ...enum.Approval) predicate.InstallationJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstallationJob(sql.FieldIn(FieldApproval, v...))
}

// ApprovalNotIn applies the NotIn predicate on the "approval" field.
func ApprovalNotIn(vs ...enum.Approval) predicate.InstallationJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstallationJob(sql.FieldNotIn(FieldApproval, v...))
}

// ApprovalAtEQ applies the EQ predicate on the "approval_at" field.
func ApprovalAtEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldApprovalAt, v))
}

// ApprovalAtNEQ applies the NEQ predicate on the "approval_at" field.
func ApprovalAtNEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldApprovalAt, v))
}

// ApprovalAtIn applies the In predicate on the "approval_at" field.
func ApprovalAtIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldApprovalAt, vs...))
}

// ApprovalAtNotIn applies the NotIn predicate on the "approval_at" field.
func ApprovalAtNotIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldApprovalAt, vs...))
}

// ApprovalAtGT applies the GT predicate on the "approval_at" field.
func ApprovalAtGT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldApprovalAt, v))
}

// ApprovalAtGTE applies the GTE predicate on the "approval_at" field.
func ApprovalAtGTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldApprovalAt, v))
}

// ApprovalAtLT applies the LT predicate on the "approval_at" field.
func ApprovalAtLT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldApprovalAt, v))
}

// ApprovalAtLTE applies the LTE predicate on the "approval_at" field.
func ApprovalAtLTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldApprovalAt, v))
}

// DenyReasonEQ applies the EQ predicate on the "deny_reason" field.
func DenyReasonEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldDenyReason, v))
}

// DenyReasonNEQ applies the NEQ predicate on the "deny_reason" field.
func DenyReasonNEQ(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldDenyReason, v))
}

// DenyReasonIn applies the In predicate on the "deny_reason" field.
func DenyReasonIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldDenyReason, vs...))
}

// DenyReasonNotIn applies the NotIn predicate on the "deny_reason" field.
func DenyReasonNotIn(vs ...string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldDenyReason, vs...))
}

// DenyReasonGT applies the GT predicate on the "deny_reason" field.
func DenyReasonGT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldDenyReason, v))
}

// DenyReasonGTE applies the GTE predicate on the "deny_reason" field.
func DenyReasonGTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldDenyReason, v))
}

// DenyReasonLT applies the LT predicate on the "deny_reason" field.
func DenyReasonLT(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldDenyReason, v))
}

// DenyReasonLTE applies the LTE predicate on the "deny_reason" field.
func DenyReasonLTE(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldDenyReason, v))
}

// DenyReasonContains applies the Contains predicate on the "deny_reason" field.
func DenyReasonContains(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContains(FieldDenyReason, v))
}

// DenyReasonHasPrefix applies the HasPrefix predicate on the "deny_reason" field.
func DenyReasonHasPrefix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasPrefix(FieldDenyReason, v))
}

// DenyReasonHasSuffix applies the HasSuffix predicate on the "deny_reason" field.
func DenyReasonHasSuffix(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldHasSuffix(FieldDenyReason, v))
}

// DenyReasonIsNil applies the IsNil predicate on the "deny_reason" field.
func DenyReasonIsNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIsNull(FieldDenyReason))
}

// DenyReasonNotNil applies the NotNil predicate on the "deny_reason" field.
func DenyReasonNotNil() predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotNull(FieldDenyReason))
}

// DenyReasonEqualFold applies the EqualFold predicate on the "deny_reason" field.
func DenyReasonEqualFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEqualFold(FieldDenyReason, v))
}

// DenyReasonContainsFold applies the ContainsFold predicate on the "deny_reason" field.
func DenyReasonContainsFold(v string) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldContainsFold(FieldDenyReason, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enum.InstallationStatus) predicate.InstallationJob {
	vc := v
	return predicate.InstallationJob(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enum.InstallationStatus) predicate.InstallationJob {
	vc := v
	return predicate.InstallationJob(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enum.InstallationStatus) predicate.InstallationJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstallationJob(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enum.InstallationStatus) predicate.InstallationJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstallationJob(sql.FieldNotIn(FieldStatus, v...))
}

// StatusAtEQ applies the EQ predicate on the "status_at" field.
func StatusAtEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldEQ(FieldStatusAt, v))
}

// StatusAtNEQ applies the NEQ predicate on the "status_at" field.
func StatusAtNEQ(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNEQ(FieldStatusAt, v))
}

// StatusAtIn applies the In predicate on the "status_at" field.
func StatusAtIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldIn(FieldStatusAt, vs...))
}

// StatusAtNotIn applies the NotIn predicate on the "status_at" field.
func StatusAtNotIn(vs ...time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldNotIn(FieldStatusAt, vs...))
}

// StatusAtGT applies the GT predicate on the "status_at" field.
func StatusAtGT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGT(FieldStatusAt, v))
}

// StatusAtGTE applies the GTE predicate on the "status_at" field.
func StatusAtGTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldGTE(FieldStatusAt, v))
}

// StatusAtLT applies the LT predicate on the "status_at" field.
func StatusAtLT(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLT(FieldStatusAt, v))
}

// StatusAtLTE applies the LTE predicate on the "status_at" field.
func StatusAtLTE(v time.Time) predicate.InstallationJob {
	return predicate.InstallationJob(sql.FieldLTE(FieldStatusAt, v))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.InstallationJobItem) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgressHistory applies the HasEdge predicate on the "progress_history" edge.
func HasProgressHistory() predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgressHistoryTable, ProgressHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressHistoryWith applies the HasEdge predicate on the "progress_history" edge with a given conditions (other predicates).
func HasProgressHistoryWith(preds ...predicate.InstallationJobProgress) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := newProgressHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequestingPartner applies the HasEdge predicate on the "requesting_partner" edge.
func HasRequestingPartner() predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequestingPartnerTable, RequestingPartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestingPartnerWith applies the HasEdge predicate on the "requesting_partner" edge with a given conditions (other predicates).
func HasRequestingPartnerWith(preds ...predicate.Partner) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := newRequestingPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedPartner applies the HasEdge predicate on the "assigned_partner" edge.
func HasAssignedPartner() predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssignedPartnerTable, AssignedPartnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedPartnerWith applies the HasEdge predicate on the "assigned_partner" edge with a given conditions (other predicates).
func HasAssignedPartnerWith(preds ...predicate.Partner) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := newAssignedPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSalesRep applies the HasEdge predicate on the "sales_rep" edge.
func HasSalesRep() predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalesRepTable, SalesRepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesRepWith applies the HasEdge predicate on the "sales_rep" edge with a given conditions (other predicates).
func HasSalesRepWith(preds ...predicate.User) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		step := newSalesRepStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InstallationJob) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InstallationJob) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InstallationJob) predicate.InstallationJob {
	return predicate.InstallationJob(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package installationjob

import (
	"fmt"
	"roofix/pkg/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the installationjob type in the database.
	Label = "installation_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldOwnerName holds the string denoting the owner_name field in the database.
	FieldOwnerName = "owner_name"
	// FieldOwnerPhone holds the string denoting the owner_phone field in the database.
	FieldOwnerPhone = "owner_phone"
	// FieldOwnerEmail holds the string denoting the owner_email field in the database.
	FieldOwnerEmail = "owner_email"
	// FieldOwnerAddress holds the string denoting the owner_address field in the database.
	FieldOwnerAddress = "owner_address"
	// FieldOwnerAddressLat holds the string denoting the owner_address_lat field in the database.
	FieldOwnerAddressLat = "owner_address_lat"
	// FieldOwnerAddressLng holds the string denoting the owner_address_lng field in the database.
	FieldOwnerAddressLng = "owner_address_lng"
	// FieldSpecialNote holds the string denoting the special_note field in the database.
	FieldSpecialNote = "special_note"
	// FieldPkg holds the string denoting the pkg field in the database.
	FieldPkg = "pkg"
	// FieldPkgDescription holds the string denoting the pkg_description field in the database.
	FieldPkgDescription = "pkg_description"
	// FieldPkgFeatures holds the string denoting the pkg_features field in the database.
	FieldPkgFeatures = "pkg_features"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldApproval holds the string denoting the approval field in the database.
	FieldApproval = "approval"
	// FieldApprovalAt holds the string denoting the approval_at field in the database.
	FieldApprovalAt = "approval_at"
	// FieldDenyReason holds the string denoting the deny_reason field in the database.
	FieldDenyReason = "deny_reason"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusAt holds the string denoting the status_at field in the database.
	FieldStatusAt = "status_at"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeProgressHistory holds the string denoting the progress_history edge name in mutations.
	EdgeProgressHistory = "progress_history"
	// EdgeRequestingPartner holds the string denoting the requesting_partner edge name in mutations.
	EdgeRequestingPartner = "requesting_partner"
	// EdgeAssignedPartner holds the string denoting the assigned_partner edge name in mutations.
	EdgeAssignedPartner = "assigned_partner"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeSalesRep holds the string denoting the sales_rep edge name in mutations.
	EdgeSalesRep = "sales_rep"
	// Table holds the table name of the installationjob in the database.
	Table = "installation_jobs"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "installation_job_items"
	// ItemsInverseTable is the table name for the InstallationJobItem entity.
	// It exists in this package in order to avoid circular dependency with the "installationjobitem" package.
	ItemsInverseTable = "installation_job_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "job_id"
	// ProgressHistoryTable is the table that holds the progress_history relation/edge.
	ProgressHistoryTable = "installation_job_progress"
	// ProgressHistoryInverseTable is the table name for the InstallationJobProgress entity.
	// It exists in this package in order to avoid circular dependency with the "installationjobprogress" package.
	ProgressHistoryInverseTable = "installation_job_progress"
	// ProgressHistoryColumn is the table column denoting the progress_history relation/edge.
	ProgressHistoryColumn = "job_id"
	// RequestingPartnerTable is the table that holds the requesting_partner relation/edge.
	RequestingPartnerTable = "installation_jobs"
	// RequestingPartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	RequestingPartnerInverseTable = "partners"
	// RequestingPartnerColumn is the table column denoting the requesting_partner relation/edge.
	RequestingPartnerColumn = "requesting_partner_id"
	// AssignedPartnerTable is the table that holds the assigned_partner relation/edge.
	AssignedPartnerTable = "installation_jobs"
	// AssignedPartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	AssignedPartnerInverseTable = "partners"
	// AssignedPartnerColumn is the table column denoting the assigned_partner relation/edge.
	AssignedPartnerColumn = "assigned_partner_id"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "installation_jobs"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
	// SalesRepTable is the table that holds the sales_rep relation/edge.
	SalesRepTable = "installation_jobs"
	// SalesRepInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SalesRepInverseTable = "users"
	// SalesRepColumn is the table column denoting the sales_rep relation/edge.
	SalesRepColumn = "sales_rep_id"
)

// Columns holds all SQL columns for installationjob fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldOwnerName,
	FieldOwnerPhone,
	FieldOwnerEmail,
	FieldOwnerAddress,
	FieldOwnerAddressLat,
	FieldOwnerAddressLng,
	FieldSpecialNote,
	FieldPkg,
	FieldPkgDescription,
	FieldPkgFeatures,
	FieldPrice,
	FieldApproval,
	FieldApprovalAt,
	FieldDenyReason,
	FieldStatus,
	FieldStatusAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "installation_jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"requesting_partner_id",
	"assigned_partner_id",
	"creator_id",
	"sales_rep_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// OwnerNameValidator is a validator for the "owner_name" field. It is called by the builders before save.
	OwnerNameValidator func(string) error
	// OwnerPhoneValidator is a validator for the "owner_phone" field. It is called by the builders before save.
	OwnerPhoneValidator func(string) error
	// OwnerAddressValidator is a validator for the "owner_address" field. It is called by the builders before save.
	OwnerAddressValidator func(string) error
	// SpecialNoteValidator is a validator for the "special_note" field. It is called by the builders before save.
	SpecialNoteValidator func(string) error
	// PkgValidator is a validator for the "pkg" field. It is called by the builders before save.
	PkgValidator func(string) error
	// PkgDescriptionValidator is a validator for the "pkg_description" field. It is called by the builders before save.
	PkgDescriptionValidator func(string) error
	// DefaultPkgFeatures holds the default value on creation for the "pkg_features" field.
	DefaultPkgFeatures []string
	// DefaultApprovalAt holds the default value on creation for the "approval_at" field.
	DefaultApprovalAt time.Time
	// DefaultStatusAt holds the default value on creation for the "status_at" field.
	DefaultStatusAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enum.InstallationType) error {
	switch _type.String() {
	case "SMART_HOME", "HVAC":
		return nil
	default:
		return fmt.Errorf("installationjob: invalid enum value for type field: %q", _type)
	}
}

const DefaultApproval enum.Approval = "PENDING"

// ApprovalValidator is a validator for the "approval" field enum values. It is called by the builders before save.
func ApprovalValidator(a enum.Approval) error {
	switch a.String() {
	case "PENDING", "APPROVED", "DENIED":
		return nil
	default:
		return fmt.Errorf("installationjob: invalid enum value for approval field: %q", a)
	}
}

const DefaultStatus enum.InstallationStatus = "PENDING"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enum.InstallationStatus) error {
	switch s.String() {
	case "PENDING", "NEW", "SCHEDULED", "INSTALLED":
		return nil
	default:
		return fmt.Errorf("installationjob: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the InstallationJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByOwnerName orders the results by the owner_name field.
func ByOwnerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerName, opts...).ToFunc()
}

// ByOwnerPhone orders the results by the owner_phone field.
func ByOwnerPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerPhone, opts...).ToFunc()
}

// ByOwnerEmail orders the results by the owner_email field.
func ByOwnerEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerEmail, opts...).ToFunc()
}

// ByOwnerAddress orders the results by the owner_address field.
func ByOwnerAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerAddress, opts...).ToFunc()
}

// ByOwnerAddressLat orders the results by the owner_address_lat field.
func ByOwnerAddressLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerAddressLat, opts...).ToFunc()
}

// ByOwnerAddressLng orders the results by the owner_address_lng field.
func ByOwnerAddressLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerAddressLng, opts...).ToFunc()
}

// BySpecialNote orders the results by the special_note field.
func BySpecialNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecialNote, opts...).ToFunc()
}

// ByPkg orders the results by the pkg field.
func ByPkg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkg, opts...).ToFunc()
}

// ByPkgDescription orders the results by the pkg_description field.
func ByPkgDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkgDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByApproval orders the results by the approval field.
func ByApproval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproval, opts...).ToFunc()
}

// ByApprovalAt orders the results by the approval_at field.
func ByApprovalAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalAt, opts...).ToFunc()
}

// ByDenyReason orders the results by the deny_reason field.
func ByDenyReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenyReason, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatusAt orders the results by the status_at field.
func ByStatusAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusAt, opts...).ToFunc()
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgressHistoryCount orders the results by progress_history count.
func ByProgressHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressHistoryStep(), opts...)
	}
}

// ByProgressHistory orders the results by progress_history terms.
func ByProgressHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequestingPartnerField orders the results by requesting_partner field.
func ByRequestingPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestingPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignedPartnerField orders the results by assigned_partner field.
func ByAssignedPartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedPartnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// BySalesRepField orders the results by sales_rep field.
func BySalesRepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesRepStep(), sql.OrderByField(field, opts...))
	}
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newProgressHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressHistoryTable, ProgressHistoryColumn),
	)
}
func newRequestingPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestingPartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequestingPartnerTable, RequestingPartnerColumn),
	)
}
func newAssignedPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedPartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssignedPartnerTable, AssignedPartnerColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newSalesRepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesRepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SalesRepTable, SalesRepColumn),
	)
}

var (
	// enum.InstallationType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.InstallationType)(nil)
	// enum.InstallationType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.InstallationType)(nil)
)

var (
	// enum.Approval must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.Approval)(nil)
	// enum.Approval must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.Approval)(nil)
)

var (
	// enum.InstallationStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.InstallationStatus)(nil)
	// enum.InstallationStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.InstallationStatus)(nil)
)

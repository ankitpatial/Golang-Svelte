// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"roofix/ent/productpackage"
	"roofix/ent/user"
	"roofix/pkg/enum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductPackage is the model entity for the ProductPackage schema.
type ProductPackage struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Type holds the value of the "type" field.
	Type enum.Product `json:"type,omitempty"`
	// SoldAs holds the value of the "sold_as" field.
	SoldAs enum.SoldAs `json:"sold_as,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Features holds the value of the "features" field.
	Features []string `json:"features,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Discontinued holds the value of the "discontinued" field.
	Discontinued bool `json:"discontinued,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductPackageQuery when eager-loading is set.
	Edges        ProductPackageEdges `json:"edges"`
	creator_id   *string
	selectValues sql.SelectValues
}

// ProductPackageEdges holds the relations/edges for other nodes in the graph.
type ProductPackageEdges struct {
	// Items holds the value of the items edge.
	Items []*Product `json:"items,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedItems map[string][]*Product
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ProductPackageEdges) ItemsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPackageEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductPackage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productpackage.FieldFeatures:
			values[i] = new([]byte)
		case productpackage.FieldDiscontinued:
			values[i] = new(sql.NullBool)
		case productpackage.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case productpackage.FieldID, productpackage.FieldType, productpackage.FieldSoldAs, productpackage.FieldName, productpackage.FieldDescription:
			values[i] = new(sql.NullString)
		case productpackage.FieldCreatedAt, productpackage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case productpackage.ForeignKeys[0]: // creator_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductPackage fields.
func (pp *ProductPackage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productpackage.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pp.ID = value.String
			}
		case productpackage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pp.CreatedAt = value.Time
			}
		case productpackage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pp.UpdatedAt = value.Time
			}
		case productpackage.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pp.Type = enum.Product(value.String)
			}
		case productpackage.FieldSoldAs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sold_as", values[i])
			} else if value.Valid {
				pp.SoldAs = enum.SoldAs(value.String)
			}
		case productpackage.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pp.Name = value.String
			}
		case productpackage.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pp.Description = value.String
			}
		case productpackage.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case productpackage.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pp.Price = value.Float64
			}
		case productpackage.FieldDiscontinued:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field discontinued", values[i])
			} else if value.Valid {
				pp.Discontinued = value.Bool
			}
		case productpackage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				pp.creator_id = new(string)
				*pp.creator_id = value.String
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductPackage.
// This includes values selected through modifiers, order, etc.
func (pp *ProductPackage) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the ProductPackage entity.
func (pp *ProductPackage) QueryItems() *ProductQuery {
	return NewProductPackageClient(pp.config).QueryItems(pp)
}

// QueryCreator queries the "creator" edge of the ProductPackage entity.
func (pp *ProductPackage) QueryCreator() *UserQuery {
	return NewProductPackageClient(pp.config).QueryCreator(pp)
}

// Update returns a builder for updating this ProductPackage.
// Note that you need to call ProductPackage.Unwrap() before calling this method if this ProductPackage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *ProductPackage) Update() *ProductPackageUpdateOne {
	return NewProductPackageClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the ProductPackage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *ProductPackage) Unwrap() *ProductPackage {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductPackage is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *ProductPackage) String() string {
	var builder strings.Builder
	builder.WriteString("ProductPackage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pp.Type))
	builder.WriteString(", ")
	builder.WriteString("sold_as=")
	builder.WriteString(fmt.Sprintf("%v", pp.SoldAs))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pp.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pp.Description)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", pp.Features))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pp.Price))
	builder.WriteString(", ")
	builder.WriteString("discontinued=")
	builder.WriteString(fmt.Sprintf("%v", pp.Discontinued))
	builder.WriteByte(')')
	return builder.String()
}

// NamedItems returns the Items named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pp *ProductPackage) NamedItems(name string) ([]*Product, error) {
	if pp.Edges.namedItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pp.Edges.namedItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pp *ProductPackage) appendNamedItems(name string, edges ...*Product) {
	if pp.Edges.namedItems == nil {
		pp.Edges.namedItems = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		pp.Edges.namedItems[name] = []*Product{}
	} else {
		pp.Edges.namedItems[name] = append(pp.Edges.namedItems[name], edges...)
	}
}

// ProductPackages is a parsable slice of ProductPackage.
type ProductPackages []*ProductPackage

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/apiuser"
	"roofix/ent/document"
	"roofix/ent/estimate"
	"roofix/ent/estimateactivity"
	"roofix/ent/homeowner"
	"roofix/ent/job"
	"roofix/ent/partner"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EstimateQuery is the builder for querying Estimate entities.
type EstimateQuery struct {
	config
	ctx                 *QueryContext
	order               []estimate.OrderOption
	inters              []Interceptor
	predicates          []predicate.Estimate
	withActivities      *EstimateActivityQuery
	withJobInfo         *JobQuery
	withPartner         *PartnerQuery
	withHomeOwner       *HomeOwnerQuery
	withSalesRep        *UserQuery
	withCreator         *UserQuery
	withCreatorAPI      *ApiUserQuery
	withPdf             *DocumentQuery
	withFKs             bool
	loadTotal           []func(context.Context, []*Estimate) error
	modifiers           []func(*sql.Selector)
	withNamedActivities map[string]*EstimateActivityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EstimateQuery builder.
func (eq *EstimateQuery) Where(ps ...predicate.Estimate) *EstimateQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EstimateQuery) Limit(limit int) *EstimateQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EstimateQuery) Offset(offset int) *EstimateQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EstimateQuery) Unique(unique bool) *EstimateQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EstimateQuery) Order(o ...estimate.OrderOption) *EstimateQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryActivities chains the current query on the "activities" edge.
func (eq *EstimateQuery) QueryActivities() *EstimateActivityQuery {
	query := (&EstimateActivityClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(estimateactivity.Table, estimateactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, estimate.ActivitiesTable, estimate.ActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobInfo chains the current query on the "job_info" edge.
func (eq *EstimateQuery) QueryJobInfo() *JobQuery {
	query := (&JobClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, estimate.JobInfoTable, estimate.JobInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartner chains the current query on the "partner" edge.
func (eq *EstimateQuery) QueryPartner() *PartnerQuery {
	query := (&PartnerClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.PartnerTable, estimate.PartnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHomeOwner chains the current query on the "home_owner" edge.
func (eq *EstimateQuery) QueryHomeOwner() *HomeOwnerQuery {
	query := (&HomeOwnerClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(homeowner.Table, homeowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.HomeOwnerTable, estimate.HomeOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySalesRep chains the current query on the "sales_rep" edge.
func (eq *EstimateQuery) QuerySalesRep() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.SalesRepTable, estimate.SalesRepColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (eq *EstimateQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.CreatorTable, estimate.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatorAPI chains the current query on the "creator_api" edge.
func (eq *EstimateQuery) QueryCreatorAPI() *ApiUserQuery {
	query := (&ApiUserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.CreatorAPITable, estimate.CreatorAPIColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPdf chains the current query on the "pdf" edge.
func (eq *EstimateQuery) QueryPdf() *DocumentQuery {
	query := (&DocumentClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, estimate.PdfTable, estimate.PdfColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Estimate entity from the query.
// Returns a *NotFoundError when no Estimate was found.
func (eq *EstimateQuery) First(ctx context.Context) (*Estimate, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{estimate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EstimateQuery) FirstX(ctx context.Context) *Estimate {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Estimate ID from the query.
// Returns a *NotFoundError when no Estimate ID was found.
func (eq *EstimateQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{estimate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EstimateQuery) FirstIDX(ctx context.Context) string {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Estimate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Estimate entity is found.
// Returns a *NotFoundError when no Estimate entities are found.
func (eq *EstimateQuery) Only(ctx context.Context) (*Estimate, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{estimate.Label}
	default:
		return nil, &NotSingularError{estimate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EstimateQuery) OnlyX(ctx context.Context) *Estimate {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Estimate ID in the query.
// Returns a *NotSingularError when more than one Estimate ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EstimateQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{estimate.Label}
	default:
		err = &NotSingularError{estimate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EstimateQuery) OnlyIDX(ctx context.Context) string {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Estimates.
func (eq *EstimateQuery) All(ctx context.Context) ([]*Estimate, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Estimate, *EstimateQuery]()
	return withInterceptors[[]*Estimate](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EstimateQuery) AllX(ctx context.Context) []*Estimate {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Estimate IDs.
func (eq *EstimateQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(estimate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EstimateQuery) IDsX(ctx context.Context) []string {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EstimateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EstimateQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EstimateQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EstimateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EstimateQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EstimateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EstimateQuery) Clone() *EstimateQuery {
	if eq == nil {
		return nil
	}
	return &EstimateQuery{
		config:         eq.config,
		ctx:            eq.ctx.Clone(),
		order:          append([]estimate.OrderOption{}, eq.order...),
		inters:         append([]Interceptor{}, eq.inters...),
		predicates:     append([]predicate.Estimate{}, eq.predicates...),
		withActivities: eq.withActivities.Clone(),
		withJobInfo:    eq.withJobInfo.Clone(),
		withPartner:    eq.withPartner.Clone(),
		withHomeOwner:  eq.withHomeOwner.Clone(),
		withSalesRep:   eq.withSalesRep.Clone(),
		withCreator:    eq.withCreator.Clone(),
		withCreatorAPI: eq.withCreatorAPI.Clone(),
		withPdf:        eq.withPdf.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithActivities tells the query-builder to eager-load the nodes that are connected to
// the "activities" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithActivities(opts ...func(*EstimateActivityQuery)) *EstimateQuery {
	query := (&EstimateActivityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withActivities = query
	return eq
}

// WithJobInfo tells the query-builder to eager-load the nodes that are connected to
// the "job_info" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithJobInfo(opts ...func(*JobQuery)) *EstimateQuery {
	query := (&JobClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withJobInfo = query
	return eq
}

// WithPartner tells the query-builder to eager-load the nodes that are connected to
// the "partner" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithPartner(opts ...func(*PartnerQuery)) *EstimateQuery {
	query := (&PartnerClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPartner = query
	return eq
}

// WithHomeOwner tells the query-builder to eager-load the nodes that are connected to
// the "home_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithHomeOwner(opts ...func(*HomeOwnerQuery)) *EstimateQuery {
	query := (&HomeOwnerClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withHomeOwner = query
	return eq
}

// WithSalesRep tells the query-builder to eager-load the nodes that are connected to
// the "sales_rep" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithSalesRep(opts ...func(*UserQuery)) *EstimateQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSalesRep = query
	return eq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithCreator(opts ...func(*UserQuery)) *EstimateQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCreator = query
	return eq
}

// WithCreatorAPI tells the query-builder to eager-load the nodes that are connected to
// the "creator_api" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithCreatorAPI(opts ...func(*ApiUserQuery)) *EstimateQuery {
	query := (&ApiUserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCreatorAPI = query
	return eq
}

// WithPdf tells the query-builder to eager-load the nodes that are connected to
// the "pdf" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithPdf(opts ...func(*DocumentQuery)) *EstimateQuery {
	query := (&DocumentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPdf = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Estimate.Query().
//		GroupBy(estimate.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EstimateQuery) GroupBy(field string, fields ...string) *EstimateGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EstimateGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = estimate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.Estimate.Query().
//		Select(estimate.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EstimateQuery) Select(fields ...string) *EstimateSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EstimateSelect{EstimateQuery: eq}
	sbuild.label = estimate.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EstimateSelect configured with the given aggregations.
func (eq *EstimateQuery) Aggregate(fns ...AggregateFunc) *EstimateSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EstimateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !estimate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EstimateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Estimate, error) {
	var (
		nodes       = []*Estimate{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [8]bool{
			eq.withActivities != nil,
			eq.withJobInfo != nil,
			eq.withPartner != nil,
			eq.withHomeOwner != nil,
			eq.withSalesRep != nil,
			eq.withCreator != nil,
			eq.withCreatorAPI != nil,
			eq.withPdf != nil,
		}
	)
	if eq.withPartner != nil || eq.withHomeOwner != nil || eq.withSalesRep != nil || eq.withCreator != nil || eq.withCreatorAPI != nil || eq.withPdf != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, estimate.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Estimate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Estimate{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withActivities; query != nil {
		if err := eq.loadActivities(ctx, query, nodes,
			func(n *Estimate) { n.Edges.Activities = []*EstimateActivity{} },
			func(n *Estimate, e *EstimateActivity) { n.Edges.Activities = append(n.Edges.Activities, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withJobInfo; query != nil {
		if err := eq.loadJobInfo(ctx, query, nodes, nil,
			func(n *Estimate, e *Job) { n.Edges.JobInfo = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withPartner; query != nil {
		if err := eq.loadPartner(ctx, query, nodes, nil,
			func(n *Estimate, e *Partner) { n.Edges.Partner = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withHomeOwner; query != nil {
		if err := eq.loadHomeOwner(ctx, query, nodes, nil,
			func(n *Estimate, e *HomeOwner) { n.Edges.HomeOwner = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSalesRep; query != nil {
		if err := eq.loadSalesRep(ctx, query, nodes, nil,
			func(n *Estimate, e *User) { n.Edges.SalesRep = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCreator; query != nil {
		if err := eq.loadCreator(ctx, query, nodes, nil,
			func(n *Estimate, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCreatorAPI; query != nil {
		if err := eq.loadCreatorAPI(ctx, query, nodes, nil,
			func(n *Estimate, e *ApiUser) { n.Edges.CreatorAPI = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withPdf; query != nil {
		if err := eq.loadPdf(ctx, query, nodes, nil,
			func(n *Estimate, e *Document) { n.Edges.Pdf = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedActivities {
		if err := eq.loadActivities(ctx, query, nodes,
			func(n *Estimate) { n.appendNamedActivities(name) },
			func(n *Estimate, e *EstimateActivity) { n.appendNamedActivities(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eq.loadTotal {
		if err := eq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EstimateQuery) loadActivities(ctx context.Context, query *EstimateActivityQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *EstimateActivity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Estimate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EstimateActivity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(estimate.ActivitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.estimate_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "estimate_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "estimate_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EstimateQuery) loadJobInfo(ctx context.Context, query *JobQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Estimate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(estimate.JobInfoColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.estimate_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "estimate_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "estimate_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EstimateQuery) loadPartner(ctx context.Context, query *PartnerQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *Partner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Estimate)
	for i := range nodes {
		if nodes[i].partner_id == nil {
			continue
		}
		fk := *nodes[i].partner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(partner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "partner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EstimateQuery) loadHomeOwner(ctx context.Context, query *HomeOwnerQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *HomeOwner)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Estimate)
	for i := range nodes {
		if nodes[i].home_owner_id == nil {
			continue
		}
		fk := *nodes[i].home_owner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(homeowner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "home_owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EstimateQuery) loadSalesRep(ctx context.Context, query *UserQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Estimate)
	for i := range nodes {
		if nodes[i].sales_rep_id == nil {
			continue
		}
		fk := *nodes[i].sales_rep_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sales_rep_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EstimateQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Estimate)
	for i := range nodes {
		if nodes[i].creator_id == nil {
			continue
		}
		fk := *nodes[i].creator_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EstimateQuery) loadCreatorAPI(ctx context.Context, query *ApiUserQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *ApiUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Estimate)
	for i := range nodes {
		if nodes[i].api_user_id == nil {
			continue
		}
		fk := *nodes[i].api_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apiuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "api_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EstimateQuery) loadPdf(ctx context.Context, query *DocumentQuery, nodes []*Estimate, init func(*Estimate), assign func(*Estimate, *Document)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Estimate)
	for i := range nodes {
		if nodes[i].pdf_doc_id == nil {
			continue
		}
		fk := *nodes[i].pdf_doc_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(document.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pdf_doc_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eq *EstimateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EstimateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(estimate.Table, estimate.Columns, sqlgraph.NewFieldSpec(estimate.FieldID, field.TypeString))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, estimate.FieldID)
		for i := range fields {
			if fields[i] != estimate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EstimateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(estimate.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = estimate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EstimateQuery) Modify(modifiers ...func(s *sql.Selector)) *EstimateSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

// WithNamedActivities tells the query-builder to eager-load the nodes that are connected to the "activities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EstimateQuery) WithNamedActivities(name string, opts ...func(*EstimateActivityQuery)) *EstimateQuery {
	query := (&EstimateActivityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedActivities == nil {
		eq.withNamedActivities = make(map[string]*EstimateActivityQuery)
	}
	eq.withNamedActivities[name] = query
	return eq
}

// EstimateGroupBy is the group-by builder for Estimate entities.
type EstimateGroupBy struct {
	selector
	build *EstimateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EstimateGroupBy) Aggregate(fns ...AggregateFunc) *EstimateGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EstimateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EstimateQuery, *EstimateGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EstimateGroupBy) sqlScan(ctx context.Context, root *EstimateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EstimateSelect is the builder for selecting fields of Estimate entities.
type EstimateSelect struct {
	*EstimateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EstimateSelect) Aggregate(fns ...AggregateFunc) *EstimateSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EstimateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EstimateQuery, *EstimateSelect](ctx, es.EstimateQuery, es, es.inters, v)
}

func (es *EstimateSelect) sqlScan(ctx context.Context, root *EstimateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EstimateSelect) Modify(modifiers ...func(s *sql.Selector)) *EstimateSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}

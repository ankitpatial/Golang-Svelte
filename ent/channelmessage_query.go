// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"roofix/ent/apiuser"
	"roofix/ent/channel"
	"roofix/ent/channelmessage"
	"roofix/ent/channelmessageread"
	"roofix/ent/predicate"
	"roofix/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelMessageQuery is the builder for querying ChannelMessage entities.
type ChannelMessageQuery struct {
	config
	ctx             *QueryContext
	order           []channelmessage.OrderOption
	inters          []Interceptor
	predicates      []predicate.ChannelMessage
	withReads       *ChannelMessageReadQuery
	withChannel     *ChannelQuery
	withFrom        *UserQuery
	withFromAPIUser *ApiUserQuery
	withTo          *UserQuery
	withFKs         bool
	loadTotal       []func(context.Context, []*ChannelMessage) error
	modifiers       []func(*sql.Selector)
	withNamedReads  map[string]*ChannelMessageReadQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChannelMessageQuery builder.
func (cmq *ChannelMessageQuery) Where(ps ...predicate.ChannelMessage) *ChannelMessageQuery {
	cmq.predicates = append(cmq.predicates, ps...)
	return cmq
}

// Limit the number of records to be returned by this query.
func (cmq *ChannelMessageQuery) Limit(limit int) *ChannelMessageQuery {
	cmq.ctx.Limit = &limit
	return cmq
}

// Offset to start from.
func (cmq *ChannelMessageQuery) Offset(offset int) *ChannelMessageQuery {
	cmq.ctx.Offset = &offset
	return cmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cmq *ChannelMessageQuery) Unique(unique bool) *ChannelMessageQuery {
	cmq.ctx.Unique = &unique
	return cmq
}

// Order specifies how the records should be ordered.
func (cmq *ChannelMessageQuery) Order(o ...channelmessage.OrderOption) *ChannelMessageQuery {
	cmq.order = append(cmq.order, o...)
	return cmq
}

// QueryReads chains the current query on the "reads" edge.
func (cmq *ChannelMessageQuery) QueryReads() *ChannelMessageReadQuery {
	query := (&ChannelMessageReadClient{config: cmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, selector),
			sqlgraph.To(channelmessageread.Table, channelmessageread.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channelmessage.ReadsTable, channelmessage.ReadsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChannel chains the current query on the "channel" edge.
func (cmq *ChannelMessageQuery) QueryChannel() *ChannelQuery {
	query := (&ChannelClient{config: cmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, selector),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.ChannelTable, channelmessage.ChannelColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFrom chains the current query on the "from" edge.
func (cmq *ChannelMessageQuery) QueryFrom() *UserQuery {
	query := (&UserClient{config: cmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.FromTable, channelmessage.FromColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFromAPIUser chains the current query on the "from_api_user" edge.
func (cmq *ChannelMessageQuery) QueryFromAPIUser() *ApiUserQuery {
	query := (&ApiUserClient{config: cmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, selector),
			sqlgraph.To(apiuser.Table, apiuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.FromAPIUserTable, channelmessage.FromAPIUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTo chains the current query on the "to" edge.
func (cmq *ChannelMessageQuery) QueryTo() *UserQuery {
	query := (&UserClient{config: cmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(channelmessage.Table, channelmessage.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelmessage.ToTable, channelmessage.ToColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChannelMessage entity from the query.
// Returns a *NotFoundError when no ChannelMessage was found.
func (cmq *ChannelMessageQuery) First(ctx context.Context) (*ChannelMessage, error) {
	nodes, err := cmq.Limit(1).All(setContextOp(ctx, cmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{channelmessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cmq *ChannelMessageQuery) FirstX(ctx context.Context) *ChannelMessage {
	node, err := cmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChannelMessage ID from the query.
// Returns a *NotFoundError when no ChannelMessage ID was found.
func (cmq *ChannelMessageQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = cmq.Limit(1).IDs(setContextOp(ctx, cmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{channelmessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cmq *ChannelMessageQuery) FirstIDX(ctx context.Context) string {
	id, err := cmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChannelMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChannelMessage entity is found.
// Returns a *NotFoundError when no ChannelMessage entities are found.
func (cmq *ChannelMessageQuery) Only(ctx context.Context) (*ChannelMessage, error) {
	nodes, err := cmq.Limit(2).All(setContextOp(ctx, cmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{channelmessage.Label}
	default:
		return nil, &NotSingularError{channelmessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cmq *ChannelMessageQuery) OnlyX(ctx context.Context) *ChannelMessage {
	node, err := cmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChannelMessage ID in the query.
// Returns a *NotSingularError when more than one ChannelMessage ID is found.
// Returns a *NotFoundError when no entities are found.
func (cmq *ChannelMessageQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = cmq.Limit(2).IDs(setContextOp(ctx, cmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{channelmessage.Label}
	default:
		err = &NotSingularError{channelmessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cmq *ChannelMessageQuery) OnlyIDX(ctx context.Context) string {
	id, err := cmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChannelMessages.
func (cmq *ChannelMessageQuery) All(ctx context.Context) ([]*ChannelMessage, error) {
	ctx = setContextOp(ctx, cmq.ctx, "All")
	if err := cmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ChannelMessage, *ChannelMessageQuery]()
	return withInterceptors[[]*ChannelMessage](ctx, cmq, qr, cmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cmq *ChannelMessageQuery) AllX(ctx context.Context) []*ChannelMessage {
	nodes, err := cmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChannelMessage IDs.
func (cmq *ChannelMessageQuery) IDs(ctx context.Context) (ids []string, err error) {
	if cmq.ctx.Unique == nil && cmq.path != nil {
		cmq.Unique(true)
	}
	ctx = setContextOp(ctx, cmq.ctx, "IDs")
	if err = cmq.Select(channelmessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cmq *ChannelMessageQuery) IDsX(ctx context.Context) []string {
	ids, err := cmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cmq *ChannelMessageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cmq.ctx, "Count")
	if err := cmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cmq, querierCount[*ChannelMessageQuery](), cmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cmq *ChannelMessageQuery) CountX(ctx context.Context) int {
	count, err := cmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cmq *ChannelMessageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cmq.ctx, "Exist")
	switch _, err := cmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cmq *ChannelMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := cmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChannelMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cmq *ChannelMessageQuery) Clone() *ChannelMessageQuery {
	if cmq == nil {
		return nil
	}
	return &ChannelMessageQuery{
		config:          cmq.config,
		ctx:             cmq.ctx.Clone(),
		order:           append([]channelmessage.OrderOption{}, cmq.order...),
		inters:          append([]Interceptor{}, cmq.inters...),
		predicates:      append([]predicate.ChannelMessage{}, cmq.predicates...),
		withReads:       cmq.withReads.Clone(),
		withChannel:     cmq.withChannel.Clone(),
		withFrom:        cmq.withFrom.Clone(),
		withFromAPIUser: cmq.withFromAPIUser.Clone(),
		withTo:          cmq.withTo.Clone(),
		// clone intermediate query.
		sql:  cmq.sql.Clone(),
		path: cmq.path,
	}
}

// WithReads tells the query-builder to eager-load the nodes that are connected to
// the "reads" edge. The optional arguments are used to configure the query builder of the edge.
func (cmq *ChannelMessageQuery) WithReads(opts ...func(*ChannelMessageReadQuery)) *ChannelMessageQuery {
	query := (&ChannelMessageReadClient{config: cmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmq.withReads = query
	return cmq
}

// WithChannel tells the query-builder to eager-load the nodes that are connected to
// the "channel" edge. The optional arguments are used to configure the query builder of the edge.
func (cmq *ChannelMessageQuery) WithChannel(opts ...func(*ChannelQuery)) *ChannelMessageQuery {
	query := (&ChannelClient{config: cmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmq.withChannel = query
	return cmq
}

// WithFrom tells the query-builder to eager-load the nodes that are connected to
// the "from" edge. The optional arguments are used to configure the query builder of the edge.
func (cmq *ChannelMessageQuery) WithFrom(opts ...func(*UserQuery)) *ChannelMessageQuery {
	query := (&UserClient{config: cmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmq.withFrom = query
	return cmq
}

// WithFromAPIUser tells the query-builder to eager-load the nodes that are connected to
// the "from_api_user" edge. The optional arguments are used to configure the query builder of the edge.
func (cmq *ChannelMessageQuery) WithFromAPIUser(opts ...func(*ApiUserQuery)) *ChannelMessageQuery {
	query := (&ApiUserClient{config: cmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmq.withFromAPIUser = query
	return cmq
}

// WithTo tells the query-builder to eager-load the nodes that are connected to
// the "to" edge. The optional arguments are used to configure the query builder of the edge.
func (cmq *ChannelMessageQuery) WithTo(opts ...func(*UserQuery)) *ChannelMessageQuery {
	query := (&UserClient{config: cmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmq.withTo = query
	return cmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChannelMessage.Query().
//		GroupBy(channelmessage.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cmq *ChannelMessageQuery) GroupBy(field string, fields ...string) *ChannelMessageGroupBy {
	cmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ChannelMessageGroupBy{build: cmq}
	grbuild.flds = &cmq.ctx.Fields
	grbuild.label = channelmessage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.ChannelMessage.Query().
//		Select(channelmessage.FieldCreatedAt).
//		Scan(ctx, &v)
func (cmq *ChannelMessageQuery) Select(fields ...string) *ChannelMessageSelect {
	cmq.ctx.Fields = append(cmq.ctx.Fields, fields...)
	sbuild := &ChannelMessageSelect{ChannelMessageQuery: cmq}
	sbuild.label = channelmessage.Label
	sbuild.flds, sbuild.scan = &cmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ChannelMessageSelect configured with the given aggregations.
func (cmq *ChannelMessageQuery) Aggregate(fns ...AggregateFunc) *ChannelMessageSelect {
	return cmq.Select().Aggregate(fns...)
}

func (cmq *ChannelMessageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cmq); err != nil {
				return err
			}
		}
	}
	for _, f := range cmq.ctx.Fields {
		if !channelmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cmq.path != nil {
		prev, err := cmq.path(ctx)
		if err != nil {
			return err
		}
		cmq.sql = prev
	}
	return nil
}

func (cmq *ChannelMessageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChannelMessage, error) {
	var (
		nodes       = []*ChannelMessage{}
		withFKs     = cmq.withFKs
		_spec       = cmq.querySpec()
		loadedTypes = [5]bool{
			cmq.withReads != nil,
			cmq.withChannel != nil,
			cmq.withFrom != nil,
			cmq.withFromAPIUser != nil,
			cmq.withTo != nil,
		}
	)
	if cmq.withChannel != nil || cmq.withFrom != nil || cmq.withFromAPIUser != nil || cmq.withTo != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, channelmessage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChannelMessage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChannelMessage{config: cmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cmq.modifiers) > 0 {
		_spec.Modifiers = cmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cmq.withReads; query != nil {
		if err := cmq.loadReads(ctx, query, nodes,
			func(n *ChannelMessage) { n.Edges.Reads = []*ChannelMessageRead{} },
			func(n *ChannelMessage, e *ChannelMessageRead) { n.Edges.Reads = append(n.Edges.Reads, e) }); err != nil {
			return nil, err
		}
	}
	if query := cmq.withChannel; query != nil {
		if err := cmq.loadChannel(ctx, query, nodes, nil,
			func(n *ChannelMessage, e *Channel) { n.Edges.Channel = e }); err != nil {
			return nil, err
		}
	}
	if query := cmq.withFrom; query != nil {
		if err := cmq.loadFrom(ctx, query, nodes, nil,
			func(n *ChannelMessage, e *User) { n.Edges.From = e }); err != nil {
			return nil, err
		}
	}
	if query := cmq.withFromAPIUser; query != nil {
		if err := cmq.loadFromAPIUser(ctx, query, nodes, nil,
			func(n *ChannelMessage, e *ApiUser) { n.Edges.FromAPIUser = e }); err != nil {
			return nil, err
		}
	}
	if query := cmq.withTo; query != nil {
		if err := cmq.loadTo(ctx, query, nodes, nil,
			func(n *ChannelMessage, e *User) { n.Edges.To = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range cmq.withNamedReads {
		if err := cmq.loadReads(ctx, query, nodes,
			func(n *ChannelMessage) { n.appendNamedReads(name) },
			func(n *ChannelMessage, e *ChannelMessageRead) { n.appendNamedReads(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cmq.loadTotal {
		if err := cmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cmq *ChannelMessageQuery) loadReads(ctx context.Context, query *ChannelMessageReadQuery, nodes []*ChannelMessage, init func(*ChannelMessage), assign func(*ChannelMessage, *ChannelMessageRead)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ChannelMessage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ChannelMessageRead(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(channelmessage.ReadsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.channel_message_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "channel_message_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "channel_message_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cmq *ChannelMessageQuery) loadChannel(ctx context.Context, query *ChannelQuery, nodes []*ChannelMessage, init func(*ChannelMessage), assign func(*ChannelMessage, *Channel)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ChannelMessage)
	for i := range nodes {
		if nodes[i].channel_id == nil {
			continue
		}
		fk := *nodes[i].channel_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(channel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "channel_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cmq *ChannelMessageQuery) loadFrom(ctx context.Context, query *UserQuery, nodes []*ChannelMessage, init func(*ChannelMessage), assign func(*ChannelMessage, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ChannelMessage)
	for i := range nodes {
		if nodes[i].from_user_id == nil {
			continue
		}
		fk := *nodes[i].from_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cmq *ChannelMessageQuery) loadFromAPIUser(ctx context.Context, query *ApiUserQuery, nodes []*ChannelMessage, init func(*ChannelMessage), assign func(*ChannelMessage, *ApiUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ChannelMessage)
	for i := range nodes {
		if nodes[i].from_api_user_id == nil {
			continue
		}
		fk := *nodes[i].from_api_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apiuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_api_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cmq *ChannelMessageQuery) loadTo(ctx context.Context, query *UserQuery, nodes []*ChannelMessage, init func(*ChannelMessage), assign func(*ChannelMessage, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ChannelMessage)
	for i := range nodes {
		if nodes[i].to_user_id == nil {
			continue
		}
		fk := *nodes[i].to_user_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cmq *ChannelMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cmq.querySpec()
	if len(cmq.modifiers) > 0 {
		_spec.Modifiers = cmq.modifiers
	}
	_spec.Node.Columns = cmq.ctx.Fields
	if len(cmq.ctx.Fields) > 0 {
		_spec.Unique = cmq.ctx.Unique != nil && *cmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cmq.driver, _spec)
}

func (cmq *ChannelMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(channelmessage.Table, channelmessage.Columns, sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeString))
	_spec.From = cmq.sql
	if unique := cmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cmq.path != nil {
		_spec.Unique = true
	}
	if fields := cmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelmessage.FieldID)
		for i := range fields {
			if fields[i] != channelmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cmq *ChannelMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cmq.driver.Dialect())
	t1 := builder.Table(channelmessage.Table)
	columns := cmq.ctx.Fields
	if len(columns) == 0 {
		columns = channelmessage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cmq.sql != nil {
		selector = cmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cmq.ctx.Unique != nil && *cmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cmq.modifiers {
		m(selector)
	}
	for _, p := range cmq.predicates {
		p(selector)
	}
	for _, p := range cmq.order {
		p(selector)
	}
	if offset := cmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cmq *ChannelMessageQuery) Modify(modifiers ...func(s *sql.Selector)) *ChannelMessageSelect {
	cmq.modifiers = append(cmq.modifiers, modifiers...)
	return cmq.Select()
}

// WithNamedReads tells the query-builder to eager-load the nodes that are connected to the "reads"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cmq *ChannelMessageQuery) WithNamedReads(name string, opts ...func(*ChannelMessageReadQuery)) *ChannelMessageQuery {
	query := (&ChannelMessageReadClient{config: cmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cmq.withNamedReads == nil {
		cmq.withNamedReads = make(map[string]*ChannelMessageReadQuery)
	}
	cmq.withNamedReads[name] = query
	return cmq
}

// ChannelMessageGroupBy is the group-by builder for ChannelMessage entities.
type ChannelMessageGroupBy struct {
	selector
	build *ChannelMessageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cmgb *ChannelMessageGroupBy) Aggregate(fns ...AggregateFunc) *ChannelMessageGroupBy {
	cmgb.fns = append(cmgb.fns, fns...)
	return cmgb
}

// Scan applies the selector query and scans the result into the given value.
func (cmgb *ChannelMessageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmgb.build.ctx, "GroupBy")
	if err := cmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChannelMessageQuery, *ChannelMessageGroupBy](ctx, cmgb.build, cmgb, cmgb.build.inters, v)
}

func (cmgb *ChannelMessageGroupBy) sqlScan(ctx context.Context, root *ChannelMessageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cmgb.fns))
	for _, fn := range cmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cmgb.flds)+len(cmgb.fns))
		for _, f := range *cmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ChannelMessageSelect is the builder for selecting fields of ChannelMessage entities.
type ChannelMessageSelect struct {
	*ChannelMessageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cms *ChannelMessageSelect) Aggregate(fns ...AggregateFunc) *ChannelMessageSelect {
	cms.fns = append(cms.fns, fns...)
	return cms
}

// Scan applies the selector query and scans the result into the given value.
func (cms *ChannelMessageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cms.ctx, "Select")
	if err := cms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChannelMessageQuery, *ChannelMessageSelect](ctx, cms.ChannelMessageQuery, cms, cms.inters, v)
}

func (cms *ChannelMessageSelect) sqlScan(ctx context.Context, root *ChannelMessageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cms.fns))
	for _, fn := range cms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cms *ChannelMessageSelect) Modify(modifiers ...func(s *sql.Selector)) *ChannelMessageSelect {
	cms.modifiers = append(cms.modifiers, modifiers...)
	return cms
}

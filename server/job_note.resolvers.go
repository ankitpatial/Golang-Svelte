package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"roofix/ent"
	"roofix/ent/jobnote"
	"roofix/ent/user"
	"roofix/pkg/account"
	"roofix/pkg/job"
	"roofix/server/generated"

	"entgo.io/ent/dialect/sql"
)

// Creator is the resolver for the creator field.
func (r *jobNoteResolver) Creator(ctx context.Context, obj *ent.JobNote) (*ent.User, error) {
	if obj == nil || obj.Edges.User == nil {
		return nil, nil
	}

	return obj.Edges.User, nil
}

// CreatJobNote is the resolver for the creatJobNote field.
func (r *mutationResolver) CreatJobNote(ctx context.Context, jobID string, note string) (bool, error) {
	if err := job.AssertAssigned(ctx, jobID); err != nil {
		return false, err
	}

	db := ent.GetClient()
	defer db.CloseClient()

	u := account.CtxUser(ctx)
	err := db.JobNote.Create().SetNote(note).SetJobID(jobID).SetPartnerID(u.Partner.ID).SetUserID(u.ID).Exec(ctx)
	if err != nil {
		return false, err
	}

	job.NotifyNoteCreated(ctx, jobID)
	return true, nil
}

// EditJobNote is the resolver for the editJobNote field.
func (r *mutationResolver) EditJobNote(ctx context.Context, jobID string, noteID string, note string) (bool, error) {
	if err := job.AssertAssigned(ctx, jobID); err != nil {
		return false, err
	}

	db := ent.GetClient()
	defer db.CloseClient()

	qry := db.JobNote.Update().Where(func(jn *sql.Selector) {
		jn.Where(sql.EQ(jn.C(jobnote.FieldID), noteID))
		jn.Where(sql.EQ(jn.C(jobnote.JobColumn), jobID))
	})
	err := qry.SetNote(note).Exec(ctx)
	if err != nil {
		return false, err
	}

	job.NotifyNoteUpdated(ctx, jobID, noteID)
	return true, nil
}

// JobNotes is the resolver for the jobNotes field.
func (r *queryResolver) JobNotes(ctx context.Context, jobID string) ([]*ent.JobNote, error) {
	if err := job.AssertAccess(ctx, jobID); err != nil {
		return nil, err
	}

	db := ent.GetClient()
	defer db.CloseClient()

	qry := db.Debug().JobNote.Query().
		WithUser(func(u *ent.UserQuery) {
			u.Select(user.FieldFirstName, user.FieldLastName, user.FieldPicture)
		}).
		Where(func(jn *sql.Selector) {
			jn.Where(sql.EQ(jn.C(jobnote.JobColumn), jobID))
		})

	return qry.All(ctx)
}

// JobNote returns generated.JobNoteResolver implementation.
func (r *Resolver) JobNote() generated.JobNoteResolver { return &jobNoteResolver{r} }

type jobNoteResolver struct{ *Resolver }

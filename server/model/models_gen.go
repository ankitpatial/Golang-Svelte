// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"roofix/ent"
	"roofix/pkg/account"
	"roofix/pkg/document"
	"roofix/pkg/enum"
	"roofix/pkg/pricing"
	"strconv"
	"time"

	"entgo.io/contrib/entgql"
)

type APIUserInput struct {
	ID             string                 `json:"id"`
	CbAPIAuth      *APIUserCbAPIAuth      `json:"cbApiAuth,omitempty"`
	CbAPIURL       *string                `json:"cbApiUrl,omitempty"`
	CbAPIUser      *string                `json:"cbApiUser,omitempty"`
	CbAPIPwd       *string                `json:"cbApiPwd,omitempty"`
	CbAPIToken     *string                `json:"cbApiToken,omitempty"`
	CbAPIEndpoints map[string]interface{} `json:"cbApiEndpoints,omitempty"`
}

type ApproveEstimateInput struct {
	ID         string  `json:"id"`
	OwnerEmail *string `json:"ownerEmail,omitempty"`
	OwnerPhone *string `json:"ownerPhone,omitempty"`
	Epc        *string `json:"epc,omitempty"`
	Agree      *bool   `json:"agree,omitempty"`
}

type ApproveJobInput struct {
	OwnerEmail *string `json:"ownerEmail,omitempty"`
	OwnerPhone *string `json:"ownerPhone,omitempty"`
	Epc        *string `json:"epc,omitempty"`
	Agree      *bool   `json:"agree,omitempty"`
}

type City struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
	Zip  *string `json:"zip,omitempty"`
}

type ContactConnection struct {
	TotalCount int                       `json:"totalCount"`
	PageInfo   *entgql.PageInfo[string]  `json:"pageInfo"`
	Edges      []*ent.PartnerContactEdge `json:"edges,omitempty"`
}

type Counts struct {
	EstimateCount      int `json:"estimateCount"`
	UnassignedJobCount int `json:"unassignedJobCount"`
	AssignedJobCount   int `json:"assignedJobCount"`
	PaymentsPending    int `json:"paymentsPending"`
	PaymentsApproved   int `json:"paymentsApproved"`
	PaymentsCompleted  int `json:"paymentsCompleted"`
}

type CourseVideos struct {
	ID     string                       `json:"id"`
	Name   string                       `json:"name"`
	Videos *ent.TrainingVideoConnection `json:"videos"`
}

type CreateEstimateInput struct {
	ID                         *string  `json:"id,omitempty"`
	OwnerFirstName             string   `json:"ownerFirstName"`
	OwnerLastName              string   `json:"ownerLastName"`
	StreetNumber               string   `json:"streetNumber"`
	StreetName                 string   `json:"streetName"`
	City                       string   `json:"city"`
	State                      string   `json:"state"`
	Zip                        string   `json:"zip"`
	Latitude                   *float64 `json:"latitude,omitempty"`
	Longitude                  *float64 `json:"longitude,omitempty"`
	RepFirstName               string   `json:"repFirstName"`
	RepLastName                string   `json:"repLastName"`
	RepEmail                   string   `json:"repEmail"`
	RepMobile                  string   `json:"repMobile"`
	CompanyName                string   `json:"companyName"`
	CurrentMaterial            string   `json:"currentMaterial"`
	NewRoofingMaterial         *string  `json:"newRoofingMaterial,omitempty"`
	LowSlope                   bool     `json:"lowSlope"`
	CurrentMaterialLowSlope    *string  `json:"currentMaterialLowSlope,omitempty"`
	NewRoofingMaterialLowSlope *string  `json:"newRoofingMaterialLowSlope,omitempty"`
	Redeck                     bool     `json:"redeck"`
	Layers                     int      `json:"layers"`
	Layer2Material             *string  `json:"layer2Material,omitempty"`
	Layer3Material             *string  `json:"layer3Material,omitempty"`
	MeasurementType            string   `json:"measurementType"`
	Partial                    *int     `json:"partial,omitempty"`
}

type DenyEstimateInput struct {
	ID   string  `json:"id"`
	Note *string `json:"note,omitempty"`
}

type EstimateRequest struct {
	OwnerName                string          `json:"ownerName"`
	OwnerEmail               string          `json:"ownerEmail"`
	OwnerPhone               string          `json:"ownerPhone"`
	StreetNumber             string          `json:"streetNumber"`
	StreetName               string          `json:"streetName"`
	City                     string          `json:"city"`
	State                    string          `json:"state"`
	Zip                      string          `json:"zip"`
	Latitude                 float64         `json:"latitude"`
	Longitude                float64         `json:"longitude"`
	Layers                   int             `json:"layers"`
	CurrentMaterial          CurrentMaterial `json:"currentMaterial"`
	NewRoofingMaterial       NewMaterial     `json:"newRoofingMaterial"`
	Redeck                   bool            `json:"redeck"`
	Partial                  *int            `json:"partial,omitempty"`
	IncludeDetachedStructure *bool           `json:"includeDetachedStructure,omitempty"`
}

type EstimateResponse struct {
	ID          string                 `json:"id"`
	CreatedAt   time.Time              `json:"createdAt"`
	Description string                 `json:"description"`
	Need        bool                   `json:"need"`
	Raw         map[string]interface{} `json:"raw,omitempty"`
}

type InputFile struct {
	Name        string  `json:"name"`
	FileName    string  `json:"fileName"`
	ContentType *string `json:"contentType,omitempty"`
	ContentSize int64   `json:"contentSize"`
}

type InputMobileAppSettings struct {
	LogoURL      *string  `json:"logoURL,omitempty"`
	PrimaryColor *string  `json:"primaryColor,omitempty"`
	HideTabs     []string `json:"hideTabs,omitempty"`
}

type InputPoint struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type InputTrainingVideo struct {
	ID          string            `json:"id"`
	Kind        enum.TrainingType `json:"kind"`
	Title       string            `json:"title"`
	Description string            `json:"description"`
	CourseID    string            `json:"courseID"`
	PosterID    string            `json:"posterID"`
	VideoID     string            `json:"videoID"`
}

type InstallationApproveInput struct {
	ID         string  `json:"id"`
	OwnerEmail *string `json:"ownerEmail,omitempty"`
	OwnerPhone *string `json:"ownerPhone,omitempty"`
	Agree      *bool   `json:"agree,omitempty"`
}

type InstallationOwnerInput struct {
	Name        string   `json:"name"`
	Email       string   `json:"email"`
	Phone       string   `json:"phone"`
	Address     string   `json:"address"`
	Latitude    *float64 `json:"latitude,omitempty"`
	Longitude   *float64 `json:"longitude,omitempty"`
	SpecialNote *string  `json:"specialNote,omitempty"`
}

type InstallationPackageInput struct {
	Name        string                          `json:"name"`
	Description string                          `json:"description"`
	Features    []string                        `json:"features,omitempty"`
	Price       float64                         `json:"price"`
	Items       []*InstallationPackageItemInput `json:"items"`
}

type InstallationPackageItemInput struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Features    []string `json:"features,omitempty"`
	SpecialNote *string  `json:"specialNote,omitempty"`
}

type JobEstimates struct {
	ID        string          `json:"id"`
	Status    string          `json:"status"`
	Estimates []*ent.Estimate `json:"estimates,omitempty"`
}

type LoginResult struct {
	Token string        `json:"token"`
	User  *account.User `json:"user"`
}

type Options struct {
	Type    enum.OptionList `json:"type"`
	Options []*Entity       `json:"options,omitempty"`
}

type Overview struct {
	ID    Filter          `json:"id"`
	Total int             `json:"total"`
	Items []*OverviewItem `json:"items,omitempty"`
}

type OverviewItem struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Count int    `json:"count"`
}

type PartnerOperationInput struct {
	SalesVolume    *int     `json:"salesVolume,omitempty"`
	FinanceOptions []string `json:"financeOptions,omitempty"`
	EpcOptions     []string `json:"epcOptions,omitempty"`
	DownPayment    *int     `json:"downPayment,omitempty"`
	PifDate        *int     `json:"pifDate,omitempty"`
	InstallInHouse *bool    `json:"installInHouse,omitempty"`
}

type Point struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type PriceSummary struct {
	Total   float64 `json:"total"`
	Summary string  `json:"summary"`
}

type ProductInput struct {
	ID          string       `json:"id"`
	ImageID     string       `json:"imageID"`
	Category    enum.Product `json:"category"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Price       float64      `json:"price"`
	Features    []string     `json:"features"`
	SpecialNote *string      `json:"specialNote,omitempty"`
}

type ProductPackageInput struct {
	ID          string       `json:"id"`
	Category    enum.Product `json:"category"`
	SoldAs      enum.SoldAs  `json:"soldAs"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Price       float64      `json:"price"`
	Features    []string     `json:"features"`
	ProductIDs  []string     `json:"productIDs"`
}

type ProductPricing struct {
	ID       string                  `json:"id"`
	Items    []*pricing.ProductPrice `json:"items,omitempty"`
	Products []*pricing.ProductInfo  `json:"products,omitempty"`
}

type ProgressFlag struct {
	Status  enum.JobProgress `json:"status"`
	Flagged bool             `json:"flagged"`
}

type ProgressInput struct {
	ShingleColor       *string    `json:"shingleColor,omitempty"`
	PermitRequired     *bool      `json:"permitRequired,omitempty"`
	InspectionRequired *bool      `json:"inspectionRequired,omitempty"`
	InstallDate        *time.Time `json:"installDate,omitempty"`
	InspectionDate     *time.Time `json:"inspectionDate,omitempty"`
	CompletionDate     *time.Time `json:"completionDate,omitempty"`
}

type SectionDocs struct {
	Section enum.DocSection       `json:"section"`
	Docs    []*document.InfoShort `json:"docs"`
}

type ServiceCity struct {
	ID           string  `json:"id"`
	Active       bool    `json:"active"`
	LicenseNo    *string `json:"licenseNo,omitempty"`
	LicenseProof *string `json:"licenseProof,omitempty"`
	CityZip      string  `json:"cityZip"`
	CityName     string  `json:"cityName"`
}

type ServiceState struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	LicenseNo      *string        `json:"licenseNo,omitempty"`
	LicenseExpDate *time.Time     `json:"licenseExpDate,omitempty"`
	Cities         []*ServiceCity `json:"cities"`
	Expand         bool           `json:"expand"`
}

type State struct {
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Cities []*City `json:"cities"`
}

type SurveyInput struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	PhoneNumber string  `json:"phoneNumber"`
	Address     string  `json:"address"`
	Notes       *string `json:"notes,omitempty"`
}

type SurveySlot struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Available bool   `json:"available"`
}

type TrainingVideoAccess struct {
	VideoID string `json:"videoID"`
	Enabled bool   `json:"enabled"`
}

type UserSearchResult struct {
	ID                   string  `json:"id"`
	FirstName            string  `json:"firstName"`
	LastName             string  `json:"lastName"`
	Email                string  `json:"email"`
	Phone                *string `json:"phone,omitempty"`
	PartnerID            *string `json:"partnerID,omitempty"`
	PartnerName          *string `json:"partnerName,omitempty"`
	PartnerContactTypeID *int    `json:"partnerContactTypeID,omitempty"`
	PartnerContactTitle  *string `json:"partnerContactTitle,omitempty"`
}

func (UserSearchResult) IsNode() {}

type AdminNotifyTopic string

const (
	AdminNotifyTopicPartnerOnboardingDone     AdminNotifyTopic = "PARTNER_ONBOARDING_DONE"
	AdminNotifyTopicEagleViewEstimateProgress AdminNotifyTopic = "EAGLE_VIEW_ESTIMATE_PROGRESS"
	AdminNotifyTopicEagleViewEstimateNeed     AdminNotifyTopic = "EAGLE_VIEW_ESTIMATE_NEED"
	AdminNotifyTopicJobInvitationExpired      AdminNotifyTopic = "JOB_INVITATION_EXPIRED"
	AdminNotifyTopicContactUsRequest          AdminNotifyTopic = "CONTACT_US_REQUEST"
)

var AllAdminNotifyTopic = []AdminNotifyTopic{
	AdminNotifyTopicPartnerOnboardingDone,
	AdminNotifyTopicEagleViewEstimateProgress,
	AdminNotifyTopicEagleViewEstimateNeed,
	AdminNotifyTopicJobInvitationExpired,
	AdminNotifyTopicContactUsRequest,
}

func (e AdminNotifyTopic) IsValid() bool {
	switch e {
	case AdminNotifyTopicPartnerOnboardingDone, AdminNotifyTopicEagleViewEstimateProgress, AdminNotifyTopicEagleViewEstimateNeed, AdminNotifyTopicJobInvitationExpired, AdminNotifyTopicContactUsRequest:
		return true
	}
	return false
}

func (e AdminNotifyTopic) String() string {
	return string(e)
}

func (e *AdminNotifyTopic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdminNotifyTopic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdminNotifyTopic", str)
	}
	return nil
}

func (e AdminNotifyTopic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type APIUserCbAPIAuth string

const (
	APIUserCbAPIAuthNone  APIUserCbAPIAuth = "NONE"
	APIUserCbAPIAuthBasic APIUserCbAPIAuth = "BASIC"
	APIUserCbAPIAuthToken APIUserCbAPIAuth = "TOKEN"
	APIUserCbAPIAuthOauth APIUserCbAPIAuth = "OAUTH"
)

var AllAPIUserCbAPIAuth = []APIUserCbAPIAuth{
	APIUserCbAPIAuthNone,
	APIUserCbAPIAuthBasic,
	APIUserCbAPIAuthToken,
	APIUserCbAPIAuthOauth,
}

func (e APIUserCbAPIAuth) IsValid() bool {
	switch e {
	case APIUserCbAPIAuthNone, APIUserCbAPIAuthBasic, APIUserCbAPIAuthToken, APIUserCbAPIAuthOauth:
		return true
	}
	return false
}

func (e APIUserCbAPIAuth) String() string {
	return string(e)
}

func (e *APIUserCbAPIAuth) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APIUserCbAPIAuth(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApiUserCbAPIAuth", str)
	}
	return nil
}

func (e APIUserCbAPIAuth) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CompanyDocName string

const (
	CompanyDocNameW9                  CompanyDocName = "W9"
	CompanyDocNameGeneralLiability    CompanyDocName = "GENERAL_LIABILITY"
	CompanyDocNameWorkersCompensation CompanyDocName = "WORKERS_COMPENSATION"
)

var AllCompanyDocName = []CompanyDocName{
	CompanyDocNameW9,
	CompanyDocNameGeneralLiability,
	CompanyDocNameWorkersCompensation,
}

func (e CompanyDocName) IsValid() bool {
	switch e {
	case CompanyDocNameW9, CompanyDocNameGeneralLiability, CompanyDocNameWorkersCompensation:
		return true
	}
	return false
}

func (e CompanyDocName) String() string {
	return string(e)
}

func (e *CompanyDocName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyDocName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyDocName", str)
	}
	return nil
}

func (e CompanyDocName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CurrentMaterial string

const (
	CurrentMaterialThreeTabAsphaltShingles CurrentMaterial = "ThreeTabAsphaltShingles"
	CurrentMaterialArchAsphaltShingles     CurrentMaterial = "ArchAsphaltShingles"
	CurrentMaterialTileClay                CurrentMaterial = "TileClay"
	CurrentMaterialTileConcrete            CurrentMaterial = "TileConcrete"
	CurrentMaterialWoodShakes              CurrentMaterial = "WoodShakes"
	CurrentMaterialMetalShakes             CurrentMaterial = "MetalShakes"
	CurrentMaterialMetalTitle              CurrentMaterial = "MetalTitle"
	CurrentMaterialStandingSeamMetal       CurrentMaterial = "StandingSeamMetal"
	CurrentMaterialSlate                   CurrentMaterial = "Slate"
	CurrentMaterialMetalRPanelExpFastener  CurrentMaterial = "MetalRPanelExpFastener"
	CurrentMaterialLowSlopeOnly            CurrentMaterial = "LowSlopeOnly"
)

var AllCurrentMaterial = []CurrentMaterial{
	CurrentMaterialThreeTabAsphaltShingles,
	CurrentMaterialArchAsphaltShingles,
	CurrentMaterialTileClay,
	CurrentMaterialTileConcrete,
	CurrentMaterialWoodShakes,
	CurrentMaterialMetalShakes,
	CurrentMaterialMetalTitle,
	CurrentMaterialStandingSeamMetal,
	CurrentMaterialSlate,
	CurrentMaterialMetalRPanelExpFastener,
	CurrentMaterialLowSlopeOnly,
}

func (e CurrentMaterial) IsValid() bool {
	switch e {
	case CurrentMaterialThreeTabAsphaltShingles, CurrentMaterialArchAsphaltShingles, CurrentMaterialTileClay, CurrentMaterialTileConcrete, CurrentMaterialWoodShakes, CurrentMaterialMetalShakes, CurrentMaterialMetalTitle, CurrentMaterialStandingSeamMetal, CurrentMaterialSlate, CurrentMaterialMetalRPanelExpFastener, CurrentMaterialLowSlopeOnly:
		return true
	}
	return false
}

func (e CurrentMaterial) String() string {
	return string(e)
}

func (e *CurrentMaterial) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrentMaterial(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrentMaterial", str)
	}
	return nil
}

func (e CurrentMaterial) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DateRange string

const (
	DateRangeToday     DateRange = "TODAY"
	DateRangeYesterday DateRange = "YESTERDAY"
	DateRangeThisWeek  DateRange = "THIS_WEEK"
	DateRangeLastWeek  DateRange = "LAST_WEEK"
	DateRangeThisMonth DateRange = "THIS_MONTH"
	DateRangeLastMonth DateRange = "LAST_MONTH"
	DateRangeThisYear  DateRange = "THIS_YEAR"
	DateRangeLastYear  DateRange = "LAST_YEAR"
)

var AllDateRange = []DateRange{
	DateRangeToday,
	DateRangeYesterday,
	DateRangeThisWeek,
	DateRangeLastWeek,
	DateRangeThisMonth,
	DateRangeLastMonth,
	DateRangeThisYear,
	DateRangeLastYear,
}

func (e DateRange) IsValid() bool {
	switch e {
	case DateRangeToday, DateRangeYesterday, DateRangeThisWeek, DateRangeLastWeek, DateRangeThisMonth, DateRangeLastMonth, DateRangeThisYear, DateRangeLastYear:
		return true
	}
	return false
}

func (e DateRange) String() string {
	return string(e)
}

func (e *DateRange) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DateRange(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DateRange", str)
	}
	return nil
}

func (e DateRange) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EPCStatus string

const (
	EPCStatusNone                 EPCStatus = "None"
	EPCStatusDealer               EPCStatus = "Dealer"
	EPCStatusMultipleDealers      EPCStatus = "MultipleDealers"
	EPCStatusVerticallyIntegrated EPCStatus = "VerticallyIntegrated"
)

var AllEPCStatus = []EPCStatus{
	EPCStatusNone,
	EPCStatusDealer,
	EPCStatusMultipleDealers,
	EPCStatusVerticallyIntegrated,
}

func (e EPCStatus) IsValid() bool {
	switch e {
	case EPCStatusNone, EPCStatusDealer, EPCStatusMultipleDealers, EPCStatusVerticallyIntegrated:
		return true
	}
	return false
}

func (e EPCStatus) String() string {
	return string(e)
}

func (e *EPCStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EPCStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EPCStatus", str)
	}
	return nil
}

func (e EPCStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EstimateProvider string

const (
	EstimateProviderRoofixAPI EstimateProvider = "RoofixAPI"
	EstimateProviderEagleView EstimateProvider = "EagleView"
	EstimateProviderNearMap   EstimateProvider = "NearMap"
)

var AllEstimateProvider = []EstimateProvider{
	EstimateProviderRoofixAPI,
	EstimateProviderEagleView,
	EstimateProviderNearMap,
}

func (e EstimateProvider) IsValid() bool {
	switch e {
	case EstimateProviderRoofixAPI, EstimateProviderEagleView, EstimateProviderNearMap:
		return true
	}
	return false
}

func (e EstimateProvider) String() string {
	return string(e)
}

func (e *EstimateProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EstimateProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EstimateProvider", str)
	}
	return nil
}

func (e EstimateProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExtraCharge string

const (
	ExtraChargeNone    ExtraCharge = "NONE"
	ExtraChargeAmount  ExtraCharge = "AMOUNT"
	ExtraChargePercent ExtraCharge = "PERCENT"
	ExtraChargePerSq   ExtraCharge = "PER_SQ"
)

var AllExtraCharge = []ExtraCharge{
	ExtraChargeNone,
	ExtraChargeAmount,
	ExtraChargePercent,
	ExtraChargePerSq,
}

func (e ExtraCharge) IsValid() bool {
	switch e {
	case ExtraChargeNone, ExtraChargeAmount, ExtraChargePercent, ExtraChargePerSq:
		return true
	}
	return false
}

func (e ExtraCharge) String() string {
	return string(e)
}

func (e *ExtraCharge) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExtraCharge(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExtraCharge", str)
	}
	return nil
}

func (e ExtraCharge) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Filter string

const (
	FilterByRegion Filter = "BY_REGION"
	FilterByState  Filter = "BY_STATE"
)

var AllFilter = []Filter{
	FilterByRegion,
	FilterByState,
}

func (e Filter) IsValid() bool {
	switch e {
	case FilterByRegion, FilterByState:
		return true
	}
	return false
}

func (e Filter) String() string {
	return string(e)
}

func (e *Filter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Filter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Filter", str)
	}
	return nil
}

func (e Filter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobDocURLType string

const (
	JobDocURLTypeInspectionDocs JobDocURLType = "InspectionDocs"
	JobDocURLTypeProductionPics JobDocURLType = "ProductionPics"
)

var AllJobDocURLType = []JobDocURLType{
	JobDocURLTypeInspectionDocs,
	JobDocURLTypeProductionPics,
}

func (e JobDocURLType) IsValid() bool {
	switch e {
	case JobDocURLTypeInspectionDocs, JobDocURLTypeProductionPics:
		return true
	}
	return false
}

func (e JobDocURLType) String() string {
	return string(e)
}

func (e *JobDocURLType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobDocURLType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobDocUrlType", str)
	}
	return nil
}

func (e JobDocURLType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobInspectionRequired string

const (
	JobInspectionRequiredYes JobInspectionRequired = "Yes"
	JobInspectionRequiredNo  JobInspectionRequired = "No"
)

var AllJobInspectionRequired = []JobInspectionRequired{
	JobInspectionRequiredYes,
	JobInspectionRequiredNo,
}

func (e JobInspectionRequired) IsValid() bool {
	switch e {
	case JobInspectionRequiredYes, JobInspectionRequiredNo:
		return true
	}
	return false
}

func (e JobInspectionRequired) String() string {
	return string(e)
}

func (e *JobInspectionRequired) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobInspectionRequired(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobInspectionRequired", str)
	}
	return nil
}

func (e JobInspectionRequired) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobPermitRequired string

const (
	JobPermitRequiredYes JobPermitRequired = "Yes"
	JobPermitRequiredNo  JobPermitRequired = "No"
)

var AllJobPermitRequired = []JobPermitRequired{
	JobPermitRequiredYes,
	JobPermitRequiredNo,
}

func (e JobPermitRequired) IsValid() bool {
	switch e {
	case JobPermitRequiredYes, JobPermitRequiredNo:
		return true
	}
	return false
}

func (e JobPermitRequired) String() string {
	return string(e)
}

func (e *JobPermitRequired) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobPermitRequired(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobPermitRequired", str)
	}
	return nil
}

func (e JobPermitRequired) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobShingleColor string

const (
	JobShingleColorBrown     JobShingleColor = "Brown"
	JobShingleColorSandstorm JobShingleColor = "Sandstorm"
	JobShingleColorBlue      JobShingleColor = "Blue"
)

var AllJobShingleColor = []JobShingleColor{
	JobShingleColorBrown,
	JobShingleColorSandstorm,
	JobShingleColorBlue,
}

func (e JobShingleColor) IsValid() bool {
	switch e {
	case JobShingleColorBrown, JobShingleColorSandstorm, JobShingleColorBlue:
		return true
	}
	return false
}

func (e JobShingleColor) String() string {
	return string(e)
}

func (e *JobShingleColor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobShingleColor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobShingleColor", str)
	}
	return nil
}

func (e JobShingleColor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NewMaterial string

const (
	NewMaterialArchBestValue     NewMaterial = "ArchBestValue"
	NewMaterialArchMoreExpensive NewMaterial = "ArchMoreExpensive"
	NewMaterialStandingSeamMetal NewMaterial = "StandingSeamMetal"
	NewMaterialTileConcrete      NewMaterial = "TileConcrete"
	NewMaterialTileClayBarrel    NewMaterial = "TileClayBarrel"
	NewMaterialRepaper           NewMaterial = "Repaper"
	NewMaterialModBit            NewMaterial = "ModBit"
)

var AllNewMaterial = []NewMaterial{
	NewMaterialArchBestValue,
	NewMaterialArchMoreExpensive,
	NewMaterialStandingSeamMetal,
	NewMaterialTileConcrete,
	NewMaterialTileClayBarrel,
	NewMaterialRepaper,
	NewMaterialModBit,
}

func (e NewMaterial) IsValid() bool {
	switch e {
	case NewMaterialArchBestValue, NewMaterialArchMoreExpensive, NewMaterialStandingSeamMetal, NewMaterialTileConcrete, NewMaterialTileClayBarrel, NewMaterialRepaper, NewMaterialModBit:
		return true
	}
	return false
}

func (e NewMaterial) String() string {
	return string(e)
}

func (e *NewMaterial) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NewMaterial(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NewMaterial", str)
	}
	return nil
}

func (e NewMaterial) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotifyType string

const (
	NotifyTypeEmail NotifyType = "EMAIL"
	NotifyTypeSms   NotifyType = "SMS"
)

var AllNotifyType = []NotifyType{
	NotifyTypeEmail,
	NotifyTypeSms,
}

func (e NotifyType) IsValid() bool {
	switch e {
	case NotifyTypeEmail, NotifyTypeSms:
		return true
	}
	return false
}

func (e NotifyType) String() string {
	return string(e)
}

func (e *NotifyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotifyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotifyType", str)
	}
	return nil
}

func (e NotifyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserNotifyTopic string

const (
	UserNotifyTopicNewJobAlert UserNotifyTopic = "NEW_JOB_ALERT"
)

var AllUserNotifyTopic = []UserNotifyTopic{
	UserNotifyTopicNewJobAlert,
}

func (e UserNotifyTopic) IsValid() bool {
	switch e {
	case UserNotifyTopicNewJobAlert:
		return true
	}
	return false
}

func (e UserNotifyTopic) String() string {
	return string(e)
}

func (e *UserNotifyTopic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserNotifyTopic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserNotifyTopic", str)
	}
	return nil
}

func (e UserNotifyTopic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

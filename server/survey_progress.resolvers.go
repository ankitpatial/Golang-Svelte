package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"roofix/ent"
	entSurvey "roofix/ent/survey"
	"roofix/ent/surveyprogress"
	"roofix/pkg/survey"
	"roofix/server/generated"
	"roofix/server/model"
	"time"
)

// SurveyCompletedProgress is the resolver for the surveyCompletedProgress field.
func (r *queryResolver) SurveyCompletedProgress(ctx context.Context, id string) ([]*ent.SurveyProgress, error) {
	if err := survey.HasAccess(ctx, id); err != nil {
		return nil, err
	}

	db := ent.GetClient()
	defer db.CloseClient()

	return db.Debug().SurveyProgress.Query().
		Where(
			surveyprogress.HasSurveyWith(entSurvey.ID(id)),
			surveyprogress.Complete(true),
		).
		Order(ent.Asc(surveyprogress.FieldCreatedAt)).
		All(ctx)
}

// SurveyProgress is the resolver for the surveyProgress field.
func (r *queryResolver) SurveyProgress(ctx context.Context, id string, search *string, page model.PageInput) (*ent.SurveyProgressConnection, error) {
	if err := survey.HasAccess(ctx, id); err != nil {
		return nil, err
	}

	db := ent.GetClient()
	defer db.CloseClient()

	qry := db.SurveyProgress.Query().
		Where(surveyprogress.HasSurveyWith(entSurvey.ID(id))).
		Order(ent.Desc(surveyprogress.FieldCreatedAt))

	res, err := qry.Paginate(ctx, page.After, page.First, page.Before, page.Last)

	return res, err
}

// StatusAt is the resolver for the statusAt field.
func (r *surveyProgressDetailResolver) StatusAt(ctx context.Context, obj *ent.SurveyProgress) (*time.Time, error) {
	if obj == nil {
		return nil, nil
	}

	return &obj.CreatedAt, nil
}

// StatusAt is the resolver for the statusAt field.
func (r *surveyProgressHistoryResolver) StatusAt(ctx context.Context, obj *ent.SurveyProgress) (*time.Time, error) {
	if obj == nil {
		return nil, nil
	}

	return &obj.CreatedAt, nil
}

// SurveyProgressDetail returns generated.SurveyProgressDetailResolver implementation.
func (r *Resolver) SurveyProgressDetail() generated.SurveyProgressDetailResolver {
	return &surveyProgressDetailResolver{r}
}

// SurveyProgressHistory returns generated.SurveyProgressHistoryResolver implementation.
func (r *Resolver) SurveyProgressHistory() generated.SurveyProgressHistoryResolver {
	return &surveyProgressHistoryResolver{r}
}

type surveyProgressDetailResolver struct{ *Resolver }
type surveyProgressHistoryResolver struct{ *Resolver }

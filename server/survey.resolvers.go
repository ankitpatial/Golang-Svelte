package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"roofix/ent"
	"roofix/pkg/account"
	"roofix/pkg/enum"
	"roofix/pkg/survey"
	"roofix/pkg/util/ptr"
	"roofix/server/model"
)

// SurveyRequest is the resolver for the reserveSurveySlot field.
func (r *mutationResolver) SurveyRequest(ctx context.Context, date string, slotID string) (string, error) {
	uID := account.CtxUserID(ctx)
	return survey.Request(ctx, uID, date, slotID)
}

// SurveyReserve is the resolver for the createSurvey field.
func (r *mutationResolver) SurveyReserve(ctx context.Context, input model.SurveyInput) (*ent.Survey, error) {
	uID := account.CtxUserID(ctx)
	return survey.Reserve(ctx, uID, input)
}

// SurveySlotAvailability is the resolver for the availableSurveySlots field.
func (r *queryResolver) SurveySlotAvailability(ctx context.Context, date string) ([]*model.SurveySlot, error) {
	uID := account.CtxUserID(ctx)
	return survey.AvailableSlots(ctx, uID, date)
}

// SurveyDetails is the resolver for the surveyDetails field.
func (r *queryResolver) SurveyDetails(ctx context.Context, id string) (*ent.Survey, error) {
	u := account.CtxUser(ctx)
	return survey.ByID(ctx, u.ID, id)
}

// Surveys is the resolver for the surveys field.
func (r *queryResolver) Surveys(ctx context.Context, progress *enum.SurveyProgress, search *string, betweenDates []string, page model.PageInput, orderBy *ent.SurveyOrder) (*ent.SurveyConnection, error) {
	u := account.CtxUser(ctx)
	// ADMIN
	if u.Role == enum.RoleAdmin {
		return survey.List(ctx, nil, progress, search, betweenDates, page, orderBy)
	}

	// PARTNER ADMIN

	// CREATOR
	return survey.List(ctx, ptr.Str(u.ID), progress, search, betweenDates, page, orderBy)
}

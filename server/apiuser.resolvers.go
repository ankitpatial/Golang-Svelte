package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"roofix/ent"
	"roofix/pkg/audit"
	"roofix/pkg/external"
	"roofix/server/generated"
	"roofix/server/model"
)

// CbAPIAuth is the resolver for the cbApiAuth field.
func (r *apiUserResolver) CbAPIAuth(ctx context.Context, obj *ent.ApiUser) (*model.APIUserCbAPIAuth, error) {
	if obj == nil {
		return nil, nil
	}

	a := model.APIUserCbAPIAuth(obj.CbAPIAuth)
	return &a, nil
}

// CbAPIEndpoints is the resolver for the cbApiEndpoints field.
func (r *apiUserResolver) CbAPIEndpoints(ctx context.Context, obj *ent.ApiUser) (map[string]interface{}, error) {
	if obj == nil || obj.CbAPIEndpoints == nil {
		return map[string]interface{}{}, nil
	}

	var out map[string]interface{}
	buf := new(bytes.Buffer)
	json.NewEncoder(buf).Encode(obj.CbAPIEndpoints)
	json.NewDecoder(buf).Decode(&out)

	return out, nil
}

// AddAPIUser is the resolver for the addApiUser field.
func (r *mutationResolver) AddAPIUser(ctx context.Context, username string) (string, error) {
	id, err := external.CreateApiUser(ctx, username)
	audit.Operation(ctx, audit.ApiUserCreate, fmt.Sprintf("created api user: %s", id), err)
	return id, err
}

// EditAPIUser is the resolver for the editApiUser field.
func (r *mutationResolver) EditAPIUser(ctx context.Context, input model.APIUserInput) (bool, error) {
	err := external.Update(ctx, &input)
	return err == nil, err
}

// RefreshAPIUserPwd is the resolver for the refreshApiUserPwd field.
func (r *mutationResolver) RefreshAPIUserPwd(ctx context.Context, id string) (string, error) {
	pwd, err := external.SetNewApiUserPwd(ctx, id)
	audit.Operation(ctx, audit.ApiUserChangePwd, fmt.Sprintf("password changed for api user: %s", id), err)
	return pwd, err
}

// ChangeAPIUserStatus is the resolver for the changeApiUserStatus field.
func (r *mutationResolver) ChangeAPIUserStatus(ctx context.Context, id string, isActive bool) (bool, error) {
	success, err := external.ChangeApiUserStatus(ctx, id, isActive)
	desc := fmt.Sprintf("api user(%s) status changed to active: %v", id, isActive)
	audit.Operation(ctx, audit.ApiUserChangePwd, desc, err)
	return success, err
}

// APIUsers is the resolver for the apiUsers field.
func (r *queryResolver) APIUsers(ctx context.Context, page model.PageInput, where *ent.ApiUserWhereInput) (*ent.ApiUserConnection, error) {
	db := ent.GetClient()
	defer db.CloseClient()

	return db.ApiUser.Query().
		Paginate(ctx, page.After, page.First, page.Before, page.Last, ent.WithApiUserFilter(where.Filter))
}

// APIUser is the resolver for the apiUser field.
func (r *queryResolver) APIUser(ctx context.Context, id string) (*ent.ApiUser, error) {
	db := ent.GetClient()
	defer db.CloseClient()

	return db.ApiUser.Get(ctx, id)
}

// ApiUser returns generated.ApiUserResolver implementation.
func (r *Resolver) ApiUser() generated.ApiUserResolver { return &apiUserResolver{r} }

type apiUserResolver struct{ *Resolver }

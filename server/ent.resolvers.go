package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"fmt"
	"roofix/ent"
	"roofix/server/generated"
	"roofix/server/model"
)

// CbAPIAuth is the resolver for the cbAPIAuth field.
func (r *apiUserWhereInputResolver) CbAPIAuth(ctx context.Context, obj *ent.ApiUserWhereInput, data *model.APIUserCbAPIAuth) error {
	panic(fmt.Errorf("not implemented: CbAPIAuth - cbAPIAuth"))
}

// CbAPIAuthNeq is the resolver for the cbAPIAuthNEQ field.
func (r *apiUserWhereInputResolver) CbAPIAuthNeq(ctx context.Context, obj *ent.ApiUserWhereInput, data *model.APIUserCbAPIAuth) error {
	panic(fmt.Errorf("not implemented: CbAPIAuthNeq - cbAPIAuthNEQ"))
}

// CbAPIAuthIn is the resolver for the cbAPIAuthIn field.
func (r *apiUserWhereInputResolver) CbAPIAuthIn(ctx context.Context, obj *ent.ApiUserWhereInput, data []model.APIUserCbAPIAuth) error {
	panic(fmt.Errorf("not implemented: CbAPIAuthIn - cbAPIAuthIn"))
}

// CbAPIAuthNotIn is the resolver for the cbAPIAuthNotIn field.
func (r *apiUserWhereInputResolver) CbAPIAuthNotIn(ctx context.Context, obj *ent.ApiUserWhereInput, data []model.APIUserCbAPIAuth) error {
	panic(fmt.Errorf("not implemented: CbAPIAuthNotIn - cbAPIAuthNotIn"))
}

// NaicsCode is the resolver for the naicsCode field.
func (r *createPartnerServiceCityInputResolver) NaicsCode(ctx context.Context, obj *ent.CreatePartnerServiceCityInput, data int) error {
	panic(fmt.Errorf("not implemented: NaicsCode - naicsCode"))
}

// RegionID is the resolver for the regionID field.
func (r *estimateWhereInputResolver) RegionID(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionID - regionID"))
}

// RegionIDNeq is the resolver for the regionIDNEQ field.
func (r *estimateWhereInputResolver) RegionIDNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDNeq - regionIDNEQ"))
}

// RegionIDIn is the resolver for the regionIDIn field.
func (r *estimateWhereInputResolver) RegionIDIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RegionIDIn - regionIDIn"))
}

// RegionIDNotIn is the resolver for the regionIDNotIn field.
func (r *estimateWhereInputResolver) RegionIDNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RegionIDNotIn - regionIDNotIn"))
}

// RegionIDGt is the resolver for the regionIDGT field.
func (r *estimateWhereInputResolver) RegionIDGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDGt - regionIDGT"))
}

// RegionIDGte is the resolver for the regionIDGTE field.
func (r *estimateWhereInputResolver) RegionIDGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDGte - regionIDGTE"))
}

// RegionIDLt is the resolver for the regionIDLT field.
func (r *estimateWhereInputResolver) RegionIDLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDLt - regionIDLT"))
}

// RegionIDLte is the resolver for the regionIDLTE field.
func (r *estimateWhereInputResolver) RegionIDLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDLte - regionIDLTE"))
}

// Layers is the resolver for the layers field.
func (r *estimateWhereInputResolver) Layers(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Layers - layers"))
}

// LayersNeq is the resolver for the layersNEQ field.
func (r *estimateWhereInputResolver) LayersNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersNeq - layersNEQ"))
}

// LayersIn is the resolver for the layersIn field.
func (r *estimateWhereInputResolver) LayersIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: LayersIn - layersIn"))
}

// LayersNotIn is the resolver for the layersNotIn field.
func (r *estimateWhereInputResolver) LayersNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: LayersNotIn - layersNotIn"))
}

// LayersGt is the resolver for the layersGT field.
func (r *estimateWhereInputResolver) LayersGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersGt - layersGT"))
}

// LayersGte is the resolver for the layersGTE field.
func (r *estimateWhereInputResolver) LayersGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersGte - layersGTE"))
}

// LayersLt is the resolver for the layersLT field.
func (r *estimateWhereInputResolver) LayersLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersLt - layersLT"))
}

// LayersLte is the resolver for the layersLTE field.
func (r *estimateWhereInputResolver) LayersLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersLte - layersLTE"))
}

// ExtraChargeType is the resolver for the extraChargeType field.
func (r *estimateWhereInputResolver) ExtraChargeType(ctx context.Context, obj *ent.EstimateWhereInput, data *model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeType - extraChargeType"))
}

// ExtraChargeTypeNeq is the resolver for the extraChargeTypeNEQ field.
func (r *estimateWhereInputResolver) ExtraChargeTypeNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeTypeNeq - extraChargeTypeNEQ"))
}

// ExtraChargeTypeIn is the resolver for the extraChargeTypeIn field.
func (r *estimateWhereInputResolver) ExtraChargeTypeIn(ctx context.Context, obj *ent.EstimateWhereInput, data []model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeTypeIn - extraChargeTypeIn"))
}

// ExtraChargeTypeNotIn is the resolver for the extraChargeTypeNotIn field.
func (r *estimateWhereInputResolver) ExtraChargeTypeNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeTypeNotIn - extraChargeTypeNotIn"))
}

// EstimatorOrderID is the resolver for the estimatorOrderID field.
func (r *estimateWhereInputResolver) EstimatorOrderID(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderID - estimatorOrderID"))
}

// EstimatorOrderIDNeq is the resolver for the estimatorOrderIDNEQ field.
func (r *estimateWhereInputResolver) EstimatorOrderIDNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDNeq - estimatorOrderIDNEQ"))
}

// EstimatorOrderIDIn is the resolver for the estimatorOrderIDIn field.
func (r *estimateWhereInputResolver) EstimatorOrderIDIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDIn - estimatorOrderIDIn"))
}

// EstimatorOrderIDNotIn is the resolver for the estimatorOrderIDNotIn field.
func (r *estimateWhereInputResolver) EstimatorOrderIDNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDNotIn - estimatorOrderIDNotIn"))
}

// EstimatorOrderIDGt is the resolver for the estimatorOrderIDGT field.
func (r *estimateWhereInputResolver) EstimatorOrderIDGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDGt - estimatorOrderIDGT"))
}

// EstimatorOrderIDGte is the resolver for the estimatorOrderIDGTE field.
func (r *estimateWhereInputResolver) EstimatorOrderIDGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDGte - estimatorOrderIDGTE"))
}

// EstimatorOrderIDLt is the resolver for the estimatorOrderIDLT field.
func (r *estimateWhereInputResolver) EstimatorOrderIDLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDLt - estimatorOrderIDLT"))
}

// EstimatorOrderIDLte is the resolver for the estimatorOrderIDLTE field.
func (r *estimateWhereInputResolver) EstimatorOrderIDLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorOrderIDLte - estimatorOrderIDLTE"))
}

// EstimatorReportID is the resolver for the estimatorReportID field.
func (r *estimateWhereInputResolver) EstimatorReportID(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportID - estimatorReportID"))
}

// EstimatorReportIDNeq is the resolver for the estimatorReportIDNEQ field.
func (r *estimateWhereInputResolver) EstimatorReportIDNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDNeq - estimatorReportIDNEQ"))
}

// EstimatorReportIDIn is the resolver for the estimatorReportIDIn field.
func (r *estimateWhereInputResolver) EstimatorReportIDIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDIn - estimatorReportIDIn"))
}

// EstimatorReportIDNotIn is the resolver for the estimatorReportIDNotIn field.
func (r *estimateWhereInputResolver) EstimatorReportIDNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDNotIn - estimatorReportIDNotIn"))
}

// EstimatorReportIDGt is the resolver for the estimatorReportIDGT field.
func (r *estimateWhereInputResolver) EstimatorReportIDGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDGt - estimatorReportIDGT"))
}

// EstimatorReportIDGte is the resolver for the estimatorReportIDGTE field.
func (r *estimateWhereInputResolver) EstimatorReportIDGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDGte - estimatorReportIDGTE"))
}

// EstimatorReportIDLt is the resolver for the estimatorReportIDLT field.
func (r *estimateWhereInputResolver) EstimatorReportIDLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDLt - estimatorReportIDLT"))
}

// EstimatorReportIDLte is the resolver for the estimatorReportIDLTE field.
func (r *estimateWhereInputResolver) EstimatorReportIDLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: EstimatorReportIDLte - estimatorReportIDLTE"))
}

// Type is the resolver for the type field.
func (r *jobDocURLWhereInputResolver) Type(ctx context.Context, obj *ent.JobDocURLWhereInput, data *model.JobDocURLType) error {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// TypeNeq is the resolver for the typeNEQ field.
func (r *jobDocURLWhereInputResolver) TypeNeq(ctx context.Context, obj *ent.JobDocURLWhereInput, data *model.JobDocURLType) error {
	panic(fmt.Errorf("not implemented: TypeNeq - typeNEQ"))
}

// TypeIn is the resolver for the typeIn field.
func (r *jobDocURLWhereInputResolver) TypeIn(ctx context.Context, obj *ent.JobDocURLWhereInput, data []model.JobDocURLType) error {
	panic(fmt.Errorf("not implemented: TypeIn - typeIn"))
}

// TypeNotIn is the resolver for the typeNotIn field.
func (r *jobDocURLWhereInputResolver) TypeNotIn(ctx context.Context, obj *ent.JobDocURLWhereInput, data []model.JobDocURLType) error {
	panic(fmt.Errorf("not implemented: TypeNotIn - typeNotIn"))
}

// RegionID is the resolver for the regionID field.
func (r *jobWhereInputResolver) RegionID(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionID - regionID"))
}

// RegionIDNeq is the resolver for the regionIDNEQ field.
func (r *jobWhereInputResolver) RegionIDNeq(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDNeq - regionIDNEQ"))
}

// RegionIDIn is the resolver for the regionIDIn field.
func (r *jobWhereInputResolver) RegionIDIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RegionIDIn - regionIDIn"))
}

// RegionIDNotIn is the resolver for the regionIDNotIn field.
func (r *jobWhereInputResolver) RegionIDNotIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RegionIDNotIn - regionIDNotIn"))
}

// RegionIDGt is the resolver for the regionIDGT field.
func (r *jobWhereInputResolver) RegionIDGt(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDGt - regionIDGT"))
}

// RegionIDGte is the resolver for the regionIDGTE field.
func (r *jobWhereInputResolver) RegionIDGte(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDGte - regionIDGTE"))
}

// RegionIDLt is the resolver for the regionIDLT field.
func (r *jobWhereInputResolver) RegionIDLt(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDLt - regionIDLT"))
}

// RegionIDLte is the resolver for the regionIDLTE field.
func (r *jobWhereInputResolver) RegionIDLte(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDLte - regionIDLTE"))
}

// NaicsCode is the resolver for the naicsCode field.
func (r *partnerServiceCityWhereInputResolver) NaicsCode(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCode - naicsCode"))
}

// NaicsCodeNeq is the resolver for the naicsCodeNEQ field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeNeq(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeNeq - naicsCodeNEQ"))
}

// NaicsCodeIn is the resolver for the naicsCodeIn field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeIn(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeIn - naicsCodeIn"))
}

// NaicsCodeNotIn is the resolver for the naicsCodeNotIn field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeNotIn(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeNotIn - naicsCodeNotIn"))
}

// NaicsCodeGt is the resolver for the naicsCodeGT field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeGt(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeGt - naicsCodeGT"))
}

// NaicsCodeGte is the resolver for the naicsCodeGTE field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeGte(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeGte - naicsCodeGTE"))
}

// NaicsCodeLt is the resolver for the naicsCodeLT field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeLt(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeLt - naicsCodeLT"))
}

// NaicsCodeLte is the resolver for the naicsCodeLTE field.
func (r *partnerServiceCityWhereInputResolver) NaicsCodeLte(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCodeLte - naicsCodeLTE"))
}

// ServiceID is the resolver for the serviceID field.
func (r *partnerServiceWhereInputResolver) ServiceID(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ServiceID - serviceID"))
}

// ServiceIDNeq is the resolver for the serviceIDNEQ field.
func (r *partnerServiceWhereInputResolver) ServiceIDNeq(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ServiceIDNeq - serviceIDNEQ"))
}

// ServiceIDIn is the resolver for the serviceIDIn field.
func (r *partnerServiceWhereInputResolver) ServiceIDIn(ctx context.Context, obj *ent.PartnerServiceWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: ServiceIDIn - serviceIDIn"))
}

// ServiceIDNotIn is the resolver for the serviceIDNotIn field.
func (r *partnerServiceWhereInputResolver) ServiceIDNotIn(ctx context.Context, obj *ent.PartnerServiceWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: ServiceIDNotIn - serviceIDNotIn"))
}

// ServiceIDGt is the resolver for the serviceIDGT field.
func (r *partnerServiceWhereInputResolver) ServiceIDGt(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ServiceIDGt - serviceIDGT"))
}

// ServiceIDGte is the resolver for the serviceIDGTE field.
func (r *partnerServiceWhereInputResolver) ServiceIDGte(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ServiceIDGte - serviceIDGTE"))
}

// ServiceIDLt is the resolver for the serviceIDLT field.
func (r *partnerServiceWhereInputResolver) ServiceIDLt(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ServiceIDLt - serviceIDLT"))
}

// ServiceIDLte is the resolver for the serviceIDLTE field.
func (r *partnerServiceWhereInputResolver) ServiceIDLte(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ServiceIDLte - serviceIDLTE"))
}

// CrewCount is the resolver for the crewCount field.
func (r *partnerWhereInputResolver) CrewCount(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CrewCount - crewCount"))
}

// CrewCountNeq is the resolver for the crewCountNEQ field.
func (r *partnerWhereInputResolver) CrewCountNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CrewCountNeq - crewCountNEQ"))
}

// CrewCountIn is the resolver for the crewCountIn field.
func (r *partnerWhereInputResolver) CrewCountIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CrewCountIn - crewCountIn"))
}

// CrewCountNotIn is the resolver for the crewCountNotIn field.
func (r *partnerWhereInputResolver) CrewCountNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CrewCountNotIn - crewCountNotIn"))
}

// CrewCountGt is the resolver for the crewCountGT field.
func (r *partnerWhereInputResolver) CrewCountGt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CrewCountGt - crewCountGT"))
}

// CrewCountGte is the resolver for the crewCountGTE field.
func (r *partnerWhereInputResolver) CrewCountGte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CrewCountGte - crewCountGTE"))
}

// CrewCountLt is the resolver for the crewCountLT field.
func (r *partnerWhereInputResolver) CrewCountLt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CrewCountLt - crewCountLT"))
}

// CrewCountLte is the resolver for the crewCountLTE field.
func (r *partnerWhereInputResolver) CrewCountLte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CrewCountLte - crewCountLTE"))
}

// JobCapacity is the resolver for the jobCapacity field.
func (r *partnerWhereInputResolver) JobCapacity(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: JobCapacity - jobCapacity"))
}

// JobCapacityNeq is the resolver for the jobCapacityNEQ field.
func (r *partnerWhereInputResolver) JobCapacityNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: JobCapacityNeq - jobCapacityNEQ"))
}

// JobCapacityIn is the resolver for the jobCapacityIn field.
func (r *partnerWhereInputResolver) JobCapacityIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: JobCapacityIn - jobCapacityIn"))
}

// JobCapacityNotIn is the resolver for the jobCapacityNotIn field.
func (r *partnerWhereInputResolver) JobCapacityNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: JobCapacityNotIn - jobCapacityNotIn"))
}

// JobCapacityGt is the resolver for the jobCapacityGT field.
func (r *partnerWhereInputResolver) JobCapacityGt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: JobCapacityGt - jobCapacityGT"))
}

// JobCapacityGte is the resolver for the jobCapacityGTE field.
func (r *partnerWhereInputResolver) JobCapacityGte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: JobCapacityGte - jobCapacityGTE"))
}

// JobCapacityLt is the resolver for the jobCapacityLT field.
func (r *partnerWhereInputResolver) JobCapacityLt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: JobCapacityLt - jobCapacityLT"))
}

// JobCapacityLte is the resolver for the jobCapacityLTE field.
func (r *partnerWhereInputResolver) JobCapacityLte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: JobCapacityLte - jobCapacityLTE"))
}

// SetupStepsCompleted is the resolver for the setupStepsCompleted field.
func (r *partnerWhereInputResolver) SetupStepsCompleted(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompleted - setupStepsCompleted"))
}

// SetupStepsCompletedNeq is the resolver for the setupStepsCompletedNEQ field.
func (r *partnerWhereInputResolver) SetupStepsCompletedNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedNeq - setupStepsCompletedNEQ"))
}

// SetupStepsCompletedIn is the resolver for the setupStepsCompletedIn field.
func (r *partnerWhereInputResolver) SetupStepsCompletedIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedIn - setupStepsCompletedIn"))
}

// SetupStepsCompletedNotIn is the resolver for the setupStepsCompletedNotIn field.
func (r *partnerWhereInputResolver) SetupStepsCompletedNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedNotIn - setupStepsCompletedNotIn"))
}

// SetupStepsCompletedGt is the resolver for the setupStepsCompletedGT field.
func (r *partnerWhereInputResolver) SetupStepsCompletedGt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedGt - setupStepsCompletedGT"))
}

// SetupStepsCompletedGte is the resolver for the setupStepsCompletedGTE field.
func (r *partnerWhereInputResolver) SetupStepsCompletedGte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedGte - setupStepsCompletedGTE"))
}

// SetupStepsCompletedLt is the resolver for the setupStepsCompletedLT field.
func (r *partnerWhereInputResolver) SetupStepsCompletedLt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedLt - setupStepsCompletedLT"))
}

// SetupStepsCompletedLte is the resolver for the setupStepsCompletedLTE field.
func (r *partnerWhereInputResolver) SetupStepsCompletedLte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SetupStepsCompletedLte - setupStepsCompletedLTE"))
}

// EpcStatus is the resolver for the epcStatus field.
func (r *partnerWhereInputResolver) EpcStatus(ctx context.Context, obj *ent.PartnerWhereInput, data *model.EPCStatus) error {
	panic(fmt.Errorf("not implemented: EpcStatus - epcStatus"))
}

// EpcStatusNeq is the resolver for the epcStatusNEQ field.
func (r *partnerWhereInputResolver) EpcStatusNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *model.EPCStatus) error {
	panic(fmt.Errorf("not implemented: EpcStatusNeq - epcStatusNEQ"))
}

// EpcStatusIn is the resolver for the epcStatusIn field.
func (r *partnerWhereInputResolver) EpcStatusIn(ctx context.Context, obj *ent.PartnerWhereInput, data []model.EPCStatus) error {
	panic(fmt.Errorf("not implemented: EpcStatusIn - epcStatusIn"))
}

// EpcStatusNotIn is the resolver for the epcStatusNotIn field.
func (r *partnerWhereInputResolver) EpcStatusNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []model.EPCStatus) error {
	panic(fmt.Errorf("not implemented: EpcStatusNotIn - epcStatusNotIn"))
}

// StatusID is the resolver for the statusID field.
func (r *paymentWhereInputResolver) StatusID(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusID - statusID"))
}

// StatusIDNeq is the resolver for the statusIDNEQ field.
func (r *paymentWhereInputResolver) StatusIDNeq(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusIDNeq - statusIDNEQ"))
}

// StatusIDIn is the resolver for the statusIDIn field.
func (r *paymentWhereInputResolver) StatusIDIn(ctx context.Context, obj *ent.PaymentWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: StatusIDIn - statusIDIn"))
}

// StatusIDNotIn is the resolver for the statusIDNotIn field.
func (r *paymentWhereInputResolver) StatusIDNotIn(ctx context.Context, obj *ent.PaymentWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: StatusIDNotIn - statusIDNotIn"))
}

// StatusIDGt is the resolver for the statusIDGT field.
func (r *paymentWhereInputResolver) StatusIDGt(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusIDGt - statusIDGT"))
}

// StatusIDGte is the resolver for the statusIDGTE field.
func (r *paymentWhereInputResolver) StatusIDGte(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusIDGte - statusIDGTE"))
}

// StatusIDLt is the resolver for the statusIDLT field.
func (r *paymentWhereInputResolver) StatusIDLt(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusIDLt - statusIDLT"))
}

// StatusIDLte is the resolver for the statusIDLTE field.
func (r *paymentWhereInputResolver) StatusIDLte(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusIDLte - statusIDLTE"))
}

// RegionID is the resolver for the regionID field.
func (r *postalCodeWhereInputResolver) RegionID(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionID - regionID"))
}

// RegionIDNeq is the resolver for the regionIDNEQ field.
func (r *postalCodeWhereInputResolver) RegionIDNeq(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDNeq - regionIDNEQ"))
}

// RegionIDIn is the resolver for the regionIDIn field.
func (r *postalCodeWhereInputResolver) RegionIDIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RegionIDIn - regionIDIn"))
}

// RegionIDNotIn is the resolver for the regionIDNotIn field.
func (r *postalCodeWhereInputResolver) RegionIDNotIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RegionIDNotIn - regionIDNotIn"))
}

// RegionIDGt is the resolver for the regionIDGT field.
func (r *postalCodeWhereInputResolver) RegionIDGt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDGt - regionIDGT"))
}

// RegionIDGte is the resolver for the regionIDGTE field.
func (r *postalCodeWhereInputResolver) RegionIDGte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDGte - regionIDGTE"))
}

// RegionIDLt is the resolver for the regionIDLT field.
func (r *postalCodeWhereInputResolver) RegionIDLt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDLt - regionIDLT"))
}

// RegionIDLte is the resolver for the regionIDLTE field.
func (r *postalCodeWhereInputResolver) RegionIDLte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionIDLte - regionIDLTE"))
}

// Accuracy is the resolver for the accuracy field.
func (r *postalCodeWhereInputResolver) Accuracy(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Accuracy - accuracy"))
}

// AccuracyNeq is the resolver for the accuracyNEQ field.
func (r *postalCodeWhereInputResolver) AccuracyNeq(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AccuracyNeq - accuracyNEQ"))
}

// AccuracyIn is the resolver for the accuracyIn field.
func (r *postalCodeWhereInputResolver) AccuracyIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: AccuracyIn - accuracyIn"))
}

// AccuracyNotIn is the resolver for the accuracyNotIn field.
func (r *postalCodeWhereInputResolver) AccuracyNotIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: AccuracyNotIn - accuracyNotIn"))
}

// AccuracyGt is the resolver for the accuracyGT field.
func (r *postalCodeWhereInputResolver) AccuracyGt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AccuracyGt - accuracyGT"))
}

// AccuracyGte is the resolver for the accuracyGTE field.
func (r *postalCodeWhereInputResolver) AccuracyGte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AccuracyGte - accuracyGTE"))
}

// AccuracyLt is the resolver for the accuracyLT field.
func (r *postalCodeWhereInputResolver) AccuracyLt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AccuracyLt - accuracyLT"))
}

// AccuracyLte is the resolver for the accuracyLTE field.
func (r *postalCodeWhereInputResolver) AccuracyLte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AccuracyLte - accuracyLTE"))
}

// ProductID is the resolver for the productID field.
func (r *pricingWhereInputResolver) ProductID(ctx context.Context, obj *ent.PricingWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProductID - productID"))
}

// ProductIDNeq is the resolver for the productIDNEQ field.
func (r *pricingWhereInputResolver) ProductIDNeq(ctx context.Context, obj *ent.PricingWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProductIDNeq - productIDNEQ"))
}

// ProductIDIn is the resolver for the productIDIn field.
func (r *pricingWhereInputResolver) ProductIDIn(ctx context.Context, obj *ent.PricingWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: ProductIDIn - productIDIn"))
}

// ProductIDNotIn is the resolver for the productIDNotIn field.
func (r *pricingWhereInputResolver) ProductIDNotIn(ctx context.Context, obj *ent.PricingWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: ProductIDNotIn - productIDNotIn"))
}

// ProductIDGt is the resolver for the productIDGT field.
func (r *pricingWhereInputResolver) ProductIDGt(ctx context.Context, obj *ent.PricingWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProductIDGt - productIDGT"))
}

// ProductIDGte is the resolver for the productIDGTE field.
func (r *pricingWhereInputResolver) ProductIDGte(ctx context.Context, obj *ent.PricingWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProductIDGte - productIDGTE"))
}

// ProductIDLt is the resolver for the productIDLT field.
func (r *pricingWhereInputResolver) ProductIDLt(ctx context.Context, obj *ent.PricingWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProductIDLt - productIDLT"))
}

// ProductIDLte is the resolver for the productIDLTE field.
func (r *pricingWhereInputResolver) ProductIDLte(ctx context.Context, obj *ent.PricingWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProductIDLte - productIDLTE"))
}

// RegionID is the resolver for the regionID field.
func (r *updateJobInputResolver) RegionID(ctx context.Context, obj *ent.UpdateJobInput, data *int) error {
	panic(fmt.Errorf("not implemented: RegionID - regionID"))
}

// NaicsCode is the resolver for the naicsCode field.
func (r *updatePartnerServiceCityInputResolver) NaicsCode(ctx context.Context, obj *ent.UpdatePartnerServiceCityInput, data *int) error {
	panic(fmt.Errorf("not implemented: NaicsCode - naicsCode"))
}

// ProviderID is the resolver for the providerID field.
func (r *userAuthWhereInputResolver) ProviderID(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProviderID - providerID"))
}

// ProviderIDNeq is the resolver for the providerIDNEQ field.
func (r *userAuthWhereInputResolver) ProviderIDNeq(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProviderIDNeq - providerIDNEQ"))
}

// ProviderIDIn is the resolver for the providerIDIn field.
func (r *userAuthWhereInputResolver) ProviderIDIn(ctx context.Context, obj *ent.UserAuthWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: ProviderIDIn - providerIDIn"))
}

// ProviderIDNotIn is the resolver for the providerIDNotIn field.
func (r *userAuthWhereInputResolver) ProviderIDNotIn(ctx context.Context, obj *ent.UserAuthWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: ProviderIDNotIn - providerIDNotIn"))
}

// ProviderIDGt is the resolver for the providerIDGT field.
func (r *userAuthWhereInputResolver) ProviderIDGt(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProviderIDGt - providerIDGT"))
}

// ProviderIDGte is the resolver for the providerIDGTE field.
func (r *userAuthWhereInputResolver) ProviderIDGte(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProviderIDGte - providerIDGTE"))
}

// ProviderIDLt is the resolver for the providerIDLT field.
func (r *userAuthWhereInputResolver) ProviderIDLt(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProviderIDLt - providerIDLT"))
}

// ProviderIDLte is the resolver for the providerIDLTE field.
func (r *userAuthWhereInputResolver) ProviderIDLte(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: ProviderIDLte - providerIDLTE"))
}

// WrongAttempts is the resolver for the wrongAttempts field.
func (r *userWhereInputResolver) WrongAttempts(ctx context.Context, obj *ent.UserWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: WrongAttempts - wrongAttempts"))
}

// WrongAttemptsNeq is the resolver for the wrongAttemptsNEQ field.
func (r *userWhereInputResolver) WrongAttemptsNeq(ctx context.Context, obj *ent.UserWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsNeq - wrongAttemptsNEQ"))
}

// WrongAttemptsIn is the resolver for the wrongAttemptsIn field.
func (r *userWhereInputResolver) WrongAttemptsIn(ctx context.Context, obj *ent.UserWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsIn - wrongAttemptsIn"))
}

// WrongAttemptsNotIn is the resolver for the wrongAttemptsNotIn field.
func (r *userWhereInputResolver) WrongAttemptsNotIn(ctx context.Context, obj *ent.UserWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsNotIn - wrongAttemptsNotIn"))
}

// WrongAttemptsGt is the resolver for the wrongAttemptsGT field.
func (r *userWhereInputResolver) WrongAttemptsGt(ctx context.Context, obj *ent.UserWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsGt - wrongAttemptsGT"))
}

// WrongAttemptsGte is the resolver for the wrongAttemptsGTE field.
func (r *userWhereInputResolver) WrongAttemptsGte(ctx context.Context, obj *ent.UserWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsGte - wrongAttemptsGTE"))
}

// WrongAttemptsLt is the resolver for the wrongAttemptsLT field.
func (r *userWhereInputResolver) WrongAttemptsLt(ctx context.Context, obj *ent.UserWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsLt - wrongAttemptsLT"))
}

// WrongAttemptsLte is the resolver for the wrongAttemptsLTE field.
func (r *userWhereInputResolver) WrongAttemptsLte(ctx context.Context, obj *ent.UserWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: WrongAttemptsLte - wrongAttemptsLTE"))
}

// ApiUserWhereInput returns generated.ApiUserWhereInputResolver implementation.
func (r *Resolver) ApiUserWhereInput() generated.ApiUserWhereInputResolver {
	return &apiUserWhereInputResolver{r}
}

// CreatePartnerServiceCityInput returns generated.CreatePartnerServiceCityInputResolver implementation.
func (r *Resolver) CreatePartnerServiceCityInput() generated.CreatePartnerServiceCityInputResolver {
	return &createPartnerServiceCityInputResolver{r}
}

// EstimateWhereInput returns generated.EstimateWhereInputResolver implementation.
func (r *Resolver) EstimateWhereInput() generated.EstimateWhereInputResolver {
	return &estimateWhereInputResolver{r}
}

// JobDocURLWhereInput returns generated.JobDocURLWhereInputResolver implementation.
func (r *Resolver) JobDocURLWhereInput() generated.JobDocURLWhereInputResolver {
	return &jobDocURLWhereInputResolver{r}
}

// JobWhereInput returns generated.JobWhereInputResolver implementation.
func (r *Resolver) JobWhereInput() generated.JobWhereInputResolver { return &jobWhereInputResolver{r} }

// PartnerServiceCityWhereInput returns generated.PartnerServiceCityWhereInputResolver implementation.
func (r *Resolver) PartnerServiceCityWhereInput() generated.PartnerServiceCityWhereInputResolver {
	return &partnerServiceCityWhereInputResolver{r}
}

// PartnerServiceWhereInput returns generated.PartnerServiceWhereInputResolver implementation.
func (r *Resolver) PartnerServiceWhereInput() generated.PartnerServiceWhereInputResolver {
	return &partnerServiceWhereInputResolver{r}
}

// PartnerWhereInput returns generated.PartnerWhereInputResolver implementation.
func (r *Resolver) PartnerWhereInput() generated.PartnerWhereInputResolver {
	return &partnerWhereInputResolver{r}
}

// PaymentWhereInput returns generated.PaymentWhereInputResolver implementation.
func (r *Resolver) PaymentWhereInput() generated.PaymentWhereInputResolver {
	return &paymentWhereInputResolver{r}
}

// PostalCodeWhereInput returns generated.PostalCodeWhereInputResolver implementation.
func (r *Resolver) PostalCodeWhereInput() generated.PostalCodeWhereInputResolver {
	return &postalCodeWhereInputResolver{r}
}

// PricingWhereInput returns generated.PricingWhereInputResolver implementation.
func (r *Resolver) PricingWhereInput() generated.PricingWhereInputResolver {
	return &pricingWhereInputResolver{r}
}

// UpdateJobInput returns generated.UpdateJobInputResolver implementation.
func (r *Resolver) UpdateJobInput() generated.UpdateJobInputResolver {
	return &updateJobInputResolver{r}
}

// UpdatePartnerServiceCityInput returns generated.UpdatePartnerServiceCityInputResolver implementation.
func (r *Resolver) UpdatePartnerServiceCityInput() generated.UpdatePartnerServiceCityInputResolver {
	return &updatePartnerServiceCityInputResolver{r}
}

// UserAuthWhereInput returns generated.UserAuthWhereInputResolver implementation.
func (r *Resolver) UserAuthWhereInput() generated.UserAuthWhereInputResolver {
	return &userAuthWhereInputResolver{r}
}

// UserWhereInput returns generated.UserWhereInputResolver implementation.
func (r *Resolver) UserWhereInput() generated.UserWhereInputResolver {
	return &userWhereInputResolver{r}
}

type apiUserWhereInputResolver struct{ *Resolver }
type createPartnerServiceCityInputResolver struct{ *Resolver }
type estimateWhereInputResolver struct{ *Resolver }
type jobDocURLWhereInputResolver struct{ *Resolver }
type jobWhereInputResolver struct{ *Resolver }
type partnerServiceCityWhereInputResolver struct{ *Resolver }
type partnerServiceWhereInputResolver struct{ *Resolver }
type partnerWhereInputResolver struct{ *Resolver }
type paymentWhereInputResolver struct{ *Resolver }
type postalCodeWhereInputResolver struct{ *Resolver }
type pricingWhereInputResolver struct{ *Resolver }
type updateJobInputResolver struct{ *Resolver }
type updatePartnerServiceCityInputResolver struct{ *Resolver }
type userAuthWhereInputResolver struct{ *Resolver }
type userWhereInputResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *jobWhereInputResolver) Layers(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Layers - layers"))
}
func (r *jobWhereInputResolver) LayersNeq(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersNeq - layersNEQ"))
}
func (r *jobWhereInputResolver) LayersIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: LayersIn - layersIn"))
}
func (r *jobWhereInputResolver) LayersNotIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: LayersNotIn - layersNotIn"))
}
func (r *jobWhereInputResolver) LayersGt(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersGt - layersGT"))
}
func (r *jobWhereInputResolver) LayersGte(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersGte - layersGTE"))
}
func (r *jobWhereInputResolver) LayersLt(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersLt - layersLT"))
}
func (r *jobWhereInputResolver) LayersLte(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: LayersLte - layersLTE"))
}
func (r *jobWhereInputResolver) MeasurementType(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementType - measurementType"))
}
func (r *jobWhereInputResolver) MeasurementTypeNeq(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeNeq - measurementTypeNEQ"))
}
func (r *jobWhereInputResolver) MeasurementTypeIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeIn - measurementTypeIn"))
}
func (r *jobWhereInputResolver) MeasurementTypeNotIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeNotIn - measurementTypeNotIn"))
}
func (r *jobWhereInputResolver) MeasurementTypeGt(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeGt - measurementTypeGT"))
}
func (r *jobWhereInputResolver) MeasurementTypeGte(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeGte - measurementTypeGTE"))
}
func (r *jobWhereInputResolver) MeasurementTypeLt(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeLt - measurementTypeLT"))
}
func (r *jobWhereInputResolver) MeasurementTypeLte(ctx context.Context, obj *ent.JobWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementTypeLte - measurementTypeLTE"))
}
func (r *jobWhereInputResolver) ExtraChargeType(ctx context.Context, obj *ent.JobWhereInput, data *model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeType - extraChargeType"))
}
func (r *jobWhereInputResolver) ExtraChargeTypeNeq(ctx context.Context, obj *ent.JobWhereInput, data *model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeTypeNeq - extraChargeTypeNEQ"))
}
func (r *jobWhereInputResolver) ExtraChargeTypeIn(ctx context.Context, obj *ent.JobWhereInput, data []model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeTypeIn - extraChargeTypeIn"))
}
func (r *jobWhereInputResolver) ExtraChargeTypeNotIn(ctx context.Context, obj *ent.JobWhereInput, data []model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeTypeNotIn - extraChargeTypeNotIn"))
}
func (r *updateJobInputResolver) Layers(ctx context.Context, obj *ent.UpdateJobInput, data *int) error {
	panic(fmt.Errorf("not implemented: Layers - layers"))
}
func (r *updateJobInputResolver) MeasurementType(ctx context.Context, obj *ent.UpdateJobInput, data *int) error {
	panic(fmt.Errorf("not implemented: MeasurementType - measurementType"))
}
func (r *updateJobInputResolver) ExtraChargeType(ctx context.Context, obj *ent.UpdateJobInput, data *model.ExtraCharge) error {
	panic(fmt.Errorf("not implemented: ExtraChargeType - extraChargeType"))
}

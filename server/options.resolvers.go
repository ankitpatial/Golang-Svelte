package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"roofix/ent"
	"roofix/ent/optionlist"
	"roofix/pkg/enum"
	"roofix/pkg/msg"
	"roofix/pkg/util/log"
	"roofix/server/model"
)

// OptionList is the resolver for the optionList field.
func (r *queryResolver) OptionList(ctx context.Context, types []enum.OptionList) ([]*model.Options, error) {
	db := ent.GetClient()
	defer db.CloseClient()

	all, err := db.OptionList.Query().
		Where(optionlist.TypeIn(types...)).
		Order(optionlist.ByOrder()).
		All(ctx)
	if err != nil {
		log.Error(err)
		return nil, msg.AsError(msg.ServerError)
	}

	var res []*model.Options
	for _, opt := range all {
		var kl *model.Options
		for _, k := range res {
			if k.Type == opt.Type {
				kl = k
				break
			}
		}
		// add to kind list
		if kl != nil {
			kl.Options = append(kl.Options, &model.Entity{
				ID:   opt.ID,
				Name: opt.DisplayName,
			})
			continue
		}

		// create and add to kind list
		kl = &model.Options{
			Type: opt.Type,
			Options: []*model.Entity{
				{
					ID:   opt.ID,
					Name: opt.DisplayName,
				},
			},
		}

		res = append(res, kl)
	}

	return res, nil
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"roofix/ent"
	"roofix/server/model"

	"github.com/99designs/gqlgen/graphql"
)

// region    ************************** generated!.gotpl **************************

type ApiUserWhereInputResolver interface {
	CbAPIAuth(ctx context.Context, obj *ent.ApiUserWhereInput, data *model.APIUserCbAPIAuth) error
	CbAPIAuthNeq(ctx context.Context, obj *ent.ApiUserWhereInput, data *model.APIUserCbAPIAuth) error
	CbAPIAuthIn(ctx context.Context, obj *ent.ApiUserWhereInput, data []model.APIUserCbAPIAuth) error
	CbAPIAuthNotIn(ctx context.Context, obj *ent.ApiUserWhereInput, data []model.APIUserCbAPIAuth) error
}
type CreatePartnerServiceCityInputResolver interface {
	NaicsCode(ctx context.Context, obj *ent.CreatePartnerServiceCityInput, data int) error
}
type EstimateWhereInputResolver interface {
	RegionID(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	RegionIDNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	RegionIDIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	RegionIDNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	RegionIDGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	RegionIDGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	RegionIDLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	RegionIDLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error

	Layers(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	LayersNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	LayersIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	LayersNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	LayersGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	LayersGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	LayersLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	LayersLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error

	ExtraChargeType(ctx context.Context, obj *ent.EstimateWhereInput, data *model.ExtraCharge) error
	ExtraChargeTypeNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *model.ExtraCharge) error
	ExtraChargeTypeIn(ctx context.Context, obj *ent.EstimateWhereInput, data []model.ExtraCharge) error
	ExtraChargeTypeNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []model.ExtraCharge) error

	EstimatorOrderID(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorOrderIDNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorOrderIDIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	EstimatorOrderIDNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	EstimatorOrderIDGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorOrderIDGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorOrderIDLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorOrderIDLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error

	EstimatorReportID(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorReportIDNeq(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorReportIDIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	EstimatorReportIDNotIn(ctx context.Context, obj *ent.EstimateWhereInput, data []int) error
	EstimatorReportIDGt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorReportIDGte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorReportIDLt(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
	EstimatorReportIDLte(ctx context.Context, obj *ent.EstimateWhereInput, data *int) error
}
type JobDocURLWhereInputResolver interface {
	Type(ctx context.Context, obj *ent.JobDocURLWhereInput, data *model.JobDocURLType) error
	TypeNeq(ctx context.Context, obj *ent.JobDocURLWhereInput, data *model.JobDocURLType) error
	TypeIn(ctx context.Context, obj *ent.JobDocURLWhereInput, data []model.JobDocURLType) error
	TypeNotIn(ctx context.Context, obj *ent.JobDocURLWhereInput, data []model.JobDocURLType) error
}
type JobWhereInputResolver interface {
	RegionID(ctx context.Context, obj *ent.JobWhereInput, data *int) error
	RegionIDNeq(ctx context.Context, obj *ent.JobWhereInput, data *int) error
	RegionIDIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error
	RegionIDNotIn(ctx context.Context, obj *ent.JobWhereInput, data []int) error
	RegionIDGt(ctx context.Context, obj *ent.JobWhereInput, data *int) error
	RegionIDGte(ctx context.Context, obj *ent.JobWhereInput, data *int) error
	RegionIDLt(ctx context.Context, obj *ent.JobWhereInput, data *int) error
	RegionIDLte(ctx context.Context, obj *ent.JobWhereInput, data *int) error
}
type PartnerServiceCityWhereInputResolver interface {
	NaicsCode(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error
	NaicsCodeNeq(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error
	NaicsCodeIn(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data []int) error
	NaicsCodeNotIn(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data []int) error
	NaicsCodeGt(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error
	NaicsCodeGte(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error
	NaicsCodeLt(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error
	NaicsCodeLte(ctx context.Context, obj *ent.PartnerServiceCityWhereInput, data *int) error
}
type PartnerServiceWhereInputResolver interface {
	ServiceID(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error
	ServiceIDNeq(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error
	ServiceIDIn(ctx context.Context, obj *ent.PartnerServiceWhereInput, data []int) error
	ServiceIDNotIn(ctx context.Context, obj *ent.PartnerServiceWhereInput, data []int) error
	ServiceIDGt(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error
	ServiceIDGte(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error
	ServiceIDLt(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error
	ServiceIDLte(ctx context.Context, obj *ent.PartnerServiceWhereInput, data *int) error
}
type PartnerWhereInputResolver interface {
	CrewCount(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	CrewCountNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	CrewCountIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error
	CrewCountNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error
	CrewCountGt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	CrewCountGte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	CrewCountLt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	CrewCountLte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error

	JobCapacity(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	JobCapacityNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	JobCapacityIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error
	JobCapacityNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error
	JobCapacityGt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	JobCapacityGte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	JobCapacityLt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	JobCapacityLte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error

	SetupStepsCompleted(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	SetupStepsCompletedNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	SetupStepsCompletedIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error
	SetupStepsCompletedNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []int) error
	SetupStepsCompletedGt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	SetupStepsCompletedGte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	SetupStepsCompletedLt(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error
	SetupStepsCompletedLte(ctx context.Context, obj *ent.PartnerWhereInput, data *int) error

	EpcStatus(ctx context.Context, obj *ent.PartnerWhereInput, data *model.EPCStatus) error
	EpcStatusNeq(ctx context.Context, obj *ent.PartnerWhereInput, data *model.EPCStatus) error
	EpcStatusIn(ctx context.Context, obj *ent.PartnerWhereInput, data []model.EPCStatus) error
	EpcStatusNotIn(ctx context.Context, obj *ent.PartnerWhereInput, data []model.EPCStatus) error
}
type PaymentWhereInputResolver interface {
	StatusID(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error
	StatusIDNeq(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error
	StatusIDIn(ctx context.Context, obj *ent.PaymentWhereInput, data []int) error
	StatusIDNotIn(ctx context.Context, obj *ent.PaymentWhereInput, data []int) error
	StatusIDGt(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error
	StatusIDGte(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error
	StatusIDLt(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error
	StatusIDLte(ctx context.Context, obj *ent.PaymentWhereInput, data *int) error
}
type PostalCodeWhereInputResolver interface {
	RegionID(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	RegionIDNeq(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	RegionIDIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error
	RegionIDNotIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error
	RegionIDGt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	RegionIDGte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	RegionIDLt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	RegionIDLte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error

	Accuracy(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	AccuracyNeq(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	AccuracyIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error
	AccuracyNotIn(ctx context.Context, obj *ent.PostalCodeWhereInput, data []int) error
	AccuracyGt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	AccuracyGte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	AccuracyLt(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
	AccuracyLte(ctx context.Context, obj *ent.PostalCodeWhereInput, data *int) error
}
type PricingWhereInputResolver interface {
	ProductID(ctx context.Context, obj *ent.PricingWhereInput, data *int) error
	ProductIDNeq(ctx context.Context, obj *ent.PricingWhereInput, data *int) error
	ProductIDIn(ctx context.Context, obj *ent.PricingWhereInput, data []int) error
	ProductIDNotIn(ctx context.Context, obj *ent.PricingWhereInput, data []int) error
	ProductIDGt(ctx context.Context, obj *ent.PricingWhereInput, data *int) error
	ProductIDGte(ctx context.Context, obj *ent.PricingWhereInput, data *int) error
	ProductIDLt(ctx context.Context, obj *ent.PricingWhereInput, data *int) error
	ProductIDLte(ctx context.Context, obj *ent.PricingWhereInput, data *int) error
}
type UpdateJobInputResolver interface {
	RegionID(ctx context.Context, obj *ent.UpdateJobInput, data *int) error
}
type UpdatePartnerServiceCityInputResolver interface {
	NaicsCode(ctx context.Context, obj *ent.UpdatePartnerServiceCityInput, data *int) error
}
type UserAuthWhereInputResolver interface {
	ProviderID(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error
	ProviderIDNeq(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error
	ProviderIDIn(ctx context.Context, obj *ent.UserAuthWhereInput, data []int) error
	ProviderIDNotIn(ctx context.Context, obj *ent.UserAuthWhereInput, data []int) error
	ProviderIDGt(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error
	ProviderIDGte(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error
	ProviderIDLt(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error
	ProviderIDLte(ctx context.Context, obj *ent.UserAuthWhereInput, data *int) error
}
type UserWhereInputResolver interface {
	WrongAttempts(ctx context.Context, obj *ent.UserWhereInput, data *int) error
	WrongAttemptsNeq(ctx context.Context, obj *ent.UserWhereInput, data *int) error
	WrongAttemptsIn(ctx context.Context, obj *ent.UserWhereInput, data []int) error
	WrongAttemptsNotIn(ctx context.Context, obj *ent.UserWhereInput, data []int) error
	WrongAttemptsGt(ctx context.Context, obj *ent.UserWhereInput, data *int) error
	WrongAttemptsGte(ctx context.Context, obj *ent.UserWhereInput, data *int) error
	WrongAttemptsLt(ctx context.Context, obj *ent.UserWhereInput, data *int) error
	WrongAttemptsLte(ctx context.Context, obj *ent.UserWhereInput, data *int) error
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputApiAccessWhereInput(ctx context.Context, obj interface{}) (ent.ApiAccessWhereInput, error) {
	var it ent.ApiAccessWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "url", "urlNEQ", "urlIn", "urlNotIn", "urlGT", "urlGTE", "urlLT", "urlLTE", "urlContains", "urlHasPrefix", "urlHasSuffix", "urlEqualFold", "urlContainsFold", "username", "usernameNEQ", "usernameIn", "usernameNotIn", "usernameGT", "usernameGTE", "usernameLT", "usernameLTE", "usernameContains", "usernameHasPrefix", "usernameHasSuffix", "usernameEqualFold", "usernameContainsFold", "password", "passwordNEQ", "passwordIn", "passwordNotIn", "passwordGT", "passwordGTE", "passwordLT", "passwordLTE", "passwordContains", "passwordHasPrefix", "passwordHasSuffix", "passwordEqualFold", "passwordContainsFold", "key", "keyNEQ", "keyIn", "keyNotIn", "keyGT", "keyGTE", "keyLT", "keyLTE", "keyContains", "keyHasPrefix", "keyHasSuffix", "keyEqualFold", "keyContainsFold", "secret", "secretNEQ", "secretIn", "secretNotIn", "secretGT", "secretGTE", "secretLT", "secretLTE", "secretContains", "secretHasPrefix", "secretHasSuffix", "secretEqualFold", "secretContainsFold", "accessToken", "accessTokenNEQ", "accessTokenIn", "accessTokenNotIn", "accessTokenGT", "accessTokenGTE", "accessTokenLT", "accessTokenLTE", "accessTokenContains", "accessTokenHasPrefix", "accessTokenHasSuffix", "accessTokenIsNil", "accessTokenNotNil", "accessTokenEqualFold", "accessTokenContainsFold", "refreshToken", "refreshTokenNEQ", "refreshTokenIn", "refreshTokenNotIn", "refreshTokenGT", "refreshTokenGTE", "refreshTokenLT", "refreshTokenLTE", "refreshTokenContains", "refreshTokenHasPrefix", "refreshTokenHasSuffix", "refreshTokenIsNil", "refreshTokenNotNil", "refreshTokenEqualFold", "refreshTokenContainsFold", "expiresAt", "expiresAtNEQ", "expiresAtIn", "expiresAtNotIn", "expiresAtGT", "expiresAtGTE", "expiresAtLT", "expiresAtLTE", "expiresAtIsNil", "expiresAtNotNil"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOApiAccessWhereInput2ᚖroofixᚋentᚐApiAccessWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOApiAccessWhereInput2ᚕᚖroofixᚋentᚐApiAccessWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOApiAccessWhereInput2ᚕᚖroofixᚋentᚐApiAccessWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "urlNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNEQ = data
		case "urlIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLIn = data
		case "urlNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNotIn = data
		case "urlGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGT = data
		case "urlGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGTE = data
		case "urlLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLT = data
		case "urlLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLTE = data
		case "urlContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContains = data
		case "urlHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasPrefix = data
		case "urlHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasSuffix = data
		case "urlEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLEqualFold = data
		case "urlContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContainsFold = data
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "usernameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNEQ = data
		case "usernameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameIn = data
		case "usernameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNotIn = data
		case "usernameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGT = data
		case "usernameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGTE = data
		case "usernameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLT = data
		case "usernameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLTE = data
		case "usernameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContains = data
		case "usernameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasPrefix = data
		case "usernameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasSuffix = data
		case "usernameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameEqualFold = data
		case "usernameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContainsFold = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "passwordNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordNEQ = data
		case "passwordIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordIn = data
		case "passwordNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordNotIn = data
		case "passwordGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordGT = data
		case "passwordGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordGTE = data
		case "passwordLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordLT = data
		case "passwordLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordLTE = data
		case "passwordContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordContains = data
		case "passwordHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordHasPrefix = data
		case "passwordHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordHasSuffix = data
		case "passwordEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordEqualFold = data
		case "passwordContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordContainsFold = data
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "keyNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyNEQ = data
		case "keyIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyIn = data
		case "keyNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyNotIn = data
		case "keyGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyGT = data
		case "keyGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyGTE = data
		case "keyLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyLT = data
		case "keyLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyLTE = data
		case "keyContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyContains = data
		case "keyHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyHasPrefix = data
		case "keyHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyHasSuffix = data
		case "keyEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyEqualFold = data
		case "keyContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyContainsFold = data
		case "secret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Secret = data
		case "secretNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretNEQ = data
		case "secretIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretIn = data
		case "secretNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretNotIn = data
		case "secretGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretGT = data
		case "secretGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretGTE = data
		case "secretLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretLT = data
		case "secretLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretLTE = data
		case "secretContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretContains = data
		case "secretHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretHasPrefix = data
		case "secretHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretHasSuffix = data
		case "secretEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretEqualFold = data
		case "secretContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretContainsFold = data
		case "accessToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessToken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessToken = data
		case "accessTokenNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenNEQ = data
		case "accessTokenIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenIn = data
		case "accessTokenNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenNotIn = data
		case "accessTokenGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenGT = data
		case "accessTokenGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenGTE = data
		case "accessTokenLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenLT = data
		case "accessTokenLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenLTE = data
		case "accessTokenContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenContains = data
		case "accessTokenHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenHasPrefix = data
		case "accessTokenHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenHasSuffix = data
		case "accessTokenIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenIsNil = data
		case "accessTokenNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenNotNil = data
		case "accessTokenEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenEqualFold = data
		case "accessTokenContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessTokenContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessTokenContainsFold = data
		case "refreshToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshToken = data
		case "refreshTokenNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenNEQ = data
		case "refreshTokenIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIn = data
		case "refreshTokenNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenNotIn = data
		case "refreshTokenGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenGT = data
		case "refreshTokenGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenGTE = data
		case "refreshTokenLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenLT = data
		case "refreshTokenLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenLTE = data
		case "refreshTokenContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenContains = data
		case "refreshTokenHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenHasPrefix = data
		case "refreshTokenHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenHasSuffix = data
		case "refreshTokenIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIsNil = data
		case "refreshTokenNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenNotNil = data
		case "refreshTokenEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenEqualFold = data
		case "refreshTokenContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenContainsFold = data
		case "expiresAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		case "expiresAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtNEQ = data
		case "expiresAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtIn = data
		case "expiresAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtNotIn = data
		case "expiresAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtGT = data
		case "expiresAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtGTE = data
		case "expiresAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtLT = data
		case "expiresAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtLTE = data
		case "expiresAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtIsNil = data
		case "expiresAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtNotNil = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApiUserTokenWhereInput(ctx context.Context, obj interface{}) (ent.ApiUserTokenWhereInput, error) {
	var it ent.ApiUserTokenWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "tokenType", "tokenTypeNEQ", "tokenTypeIn", "tokenTypeNotIn", "tokenTypeGT", "tokenTypeGTE", "tokenTypeLT", "tokenTypeLTE", "tokenTypeContains", "tokenTypeHasPrefix", "tokenTypeHasSuffix", "tokenTypeEqualFold", "tokenTypeContainsFold", "tokenID", "tokenIDNEQ", "tokenIDIn", "tokenIDNotIn", "tokenIDGT", "tokenIDGTE", "tokenIDLT", "tokenIDLTE", "tokenIDContains", "tokenIDHasPrefix", "tokenIDHasSuffix", "tokenIDEqualFold", "tokenIDContainsFold", "refreshTokenID", "refreshTokenIDNEQ", "refreshTokenIDIn", "refreshTokenIDNotIn", "refreshTokenIDGT", "refreshTokenIDGTE", "refreshTokenIDLT", "refreshTokenIDLTE", "refreshTokenIDContains", "refreshTokenIDHasPrefix", "refreshTokenIDHasSuffix", "refreshTokenIDEqualFold", "refreshTokenIDContainsFold", "hasAPIUser", "hasAPIUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOApiUserTokenWhereInput2ᚖroofixᚋentᚐApiUserTokenWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOApiUserTokenWhereInput2ᚕᚖroofixᚋentᚐApiUserTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOApiUserTokenWhereInput2ᚕᚖroofixᚋentᚐApiUserTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "tokenType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenType = data
		case "tokenTypeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeNEQ = data
		case "tokenTypeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeIn = data
		case "tokenTypeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeNotIn = data
		case "tokenTypeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeGT = data
		case "tokenTypeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeGTE = data
		case "tokenTypeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeLT = data
		case "tokenTypeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeLTE = data
		case "tokenTypeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeContains = data
		case "tokenTypeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeHasPrefix = data
		case "tokenTypeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeHasSuffix = data
		case "tokenTypeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeEqualFold = data
		case "tokenTypeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenTypeContainsFold = data
		case "tokenID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenID = data
		case "tokenIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDNEQ = data
		case "tokenIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDIn = data
		case "tokenIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDNotIn = data
		case "tokenIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDGT = data
		case "tokenIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDGTE = data
		case "tokenIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDLT = data
		case "tokenIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDLTE = data
		case "tokenIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDContains = data
		case "tokenIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDHasPrefix = data
		case "tokenIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDHasSuffix = data
		case "tokenIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDEqualFold = data
		case "tokenIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenIDContainsFold = data
		case "refreshTokenID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenID = data
		case "refreshTokenIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDNEQ = data
		case "refreshTokenIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDIn = data
		case "refreshTokenIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDNotIn = data
		case "refreshTokenIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDGT = data
		case "refreshTokenIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDGTE = data
		case "refreshTokenIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDLT = data
		case "refreshTokenIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDLTE = data
		case "refreshTokenIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDContains = data
		case "refreshTokenIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDHasPrefix = data
		case "refreshTokenIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDHasSuffix = data
		case "refreshTokenIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDEqualFold = data
		case "refreshTokenIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshTokenIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshTokenIDContainsFold = data
		case "hasAPIUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAPIUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAPIUser = data
		case "hasAPIUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAPIUserWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAPIUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApiUserWhereInput(ctx context.Context, obj interface{}) (ent.ApiUserWhereInput, error) {
	var it ent.ApiUserWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "username", "usernameNEQ", "usernameIn", "usernameNotIn", "usernameGT", "usernameGTE", "usernameLT", "usernameLTE", "usernameContains", "usernameHasPrefix", "usernameHasSuffix", "usernameEqualFold", "usernameContainsFold", "pwdHash", "pwdHashNEQ", "pwdHashIn", "pwdHashNotIn", "pwdHashGT", "pwdHashGTE", "pwdHashLT", "pwdHashLTE", "pwdHashContains", "pwdHashHasPrefix", "pwdHashHasSuffix", "pwdHashEqualFold", "pwdHashContainsFold", "active", "activeNEQ", "cbAPIURL", "cbAPIURLNEQ", "cbAPIURLIn", "cbAPIURLNotIn", "cbAPIURLGT", "cbAPIURLGTE", "cbAPIURLLT", "cbAPIURLLTE", "cbAPIURLContains", "cbAPIURLHasPrefix", "cbAPIURLHasSuffix", "cbAPIURLIsNil", "cbAPIURLNotNil", "cbAPIURLEqualFold", "cbAPIURLContainsFold", "cbAPIAuth", "cbAPIAuthNEQ", "cbAPIAuthIn", "cbAPIAuthNotIn", "cbAPIAuthIsNil", "cbAPIAuthNotNil", "cbAPIUser", "cbAPIUserNEQ", "cbAPIUserIn", "cbAPIUserNotIn", "cbAPIUserGT", "cbAPIUserGTE", "cbAPIUserLT", "cbAPIUserLTE", "cbAPIUserContains", "cbAPIUserHasPrefix", "cbAPIUserHasSuffix", "cbAPIUserIsNil", "cbAPIUserNotNil", "cbAPIUserEqualFold", "cbAPIUserContainsFold", "cbAPIPwd", "cbAPIPwdNEQ", "cbAPIPwdIn", "cbAPIPwdNotIn", "cbAPIPwdGT", "cbAPIPwdGTE", "cbAPIPwdLT", "cbAPIPwdLTE", "cbAPIPwdContains", "cbAPIPwdHasPrefix", "cbAPIPwdHasSuffix", "cbAPIPwdIsNil", "cbAPIPwdNotNil", "cbAPIPwdEqualFold", "cbAPIPwdContainsFold", "cbAPIToken", "cbAPITokenNEQ", "cbAPITokenIn", "cbAPITokenNotIn", "cbAPITokenGT", "cbAPITokenGTE", "cbAPITokenLT", "cbAPITokenLTE", "cbAPITokenContains", "cbAPITokenHasPrefix", "cbAPITokenHasSuffix", "cbAPITokenIsNil", "cbAPITokenNotNil", "cbAPITokenEqualFold", "cbAPITokenContainsFold", "hasTokens", "hasTokensWith", "hasAuditLogs", "hasAuditLogsWith", "hasCreatedEstimates", "hasCreatedEstimatesWith", "hasCreatedJobs", "hasCreatedJobsWith", "hasCreatedPartners", "hasCreatedPartnersWith", "hasSurveyProgress", "hasSurveyProgressWith", "hasEstimateActivities", "hasEstimateActivitiesWith", "hasUserActivities", "hasUserActivitiesWith", "hasPartnerActivities", "hasPartnerActivitiesWith", "hasJobActivities", "hasJobActivitiesWith", "hasNotifications", "hasNotificationsWith", "hasJobProgressHistory", "hasJobProgressHistoryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚖroofixᚋentᚐApiUserWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "usernameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNEQ = data
		case "usernameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameIn = data
		case "usernameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNotIn = data
		case "usernameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGT = data
		case "usernameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGTE = data
		case "usernameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLT = data
		case "usernameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLTE = data
		case "usernameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContains = data
		case "usernameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasPrefix = data
		case "usernameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasSuffix = data
		case "usernameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameEqualFold = data
		case "usernameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContainsFold = data
		case "pwdHash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHash"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHash = data
		case "pwdHashNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashNEQ = data
		case "pwdHashIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashIn = data
		case "pwdHashNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashNotIn = data
		case "pwdHashGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashGT = data
		case "pwdHashGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashGTE = data
		case "pwdHashLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashLT = data
		case "pwdHashLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashLTE = data
		case "pwdHashContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashContains = data
		case "pwdHashHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashHasPrefix = data
		case "pwdHashHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashHasSuffix = data
		case "pwdHashEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashEqualFold = data
		case "pwdHashContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwdHashContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PwdHashContainsFold = data
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "activeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActiveNEQ = data
		case "cbAPIURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURL = data
		case "cbAPIURLNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLNEQ = data
		case "cbAPIURLIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLIn = data
		case "cbAPIURLNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLNotIn = data
		case "cbAPIURLGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLGT = data
		case "cbAPIURLGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLGTE = data
		case "cbAPIURLLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLLT = data
		case "cbAPIURLLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLLTE = data
		case "cbAPIURLContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLContains = data
		case "cbAPIURLHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLHasPrefix = data
		case "cbAPIURLHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLHasSuffix = data
		case "cbAPIURLIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLIsNil = data
		case "cbAPIURLNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLNotNil = data
		case "cbAPIURLEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLEqualFold = data
		case "cbAPIURLContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIURLContainsFold = data
		case "cbAPIAuth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIAuth"))
			data, err := ec.unmarshalOApiUserCbAPIAuth2ᚖroofixᚋserverᚋmodelᚐAPIUserCbAPIAuth(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ApiUserWhereInput().CbAPIAuth(ctx, &it, data); err != nil {
				return it, err
			}
		case "cbAPIAuthNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIAuthNEQ"))
			data, err := ec.unmarshalOApiUserCbAPIAuth2ᚖroofixᚋserverᚋmodelᚐAPIUserCbAPIAuth(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ApiUserWhereInput().CbAPIAuthNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "cbAPIAuthIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIAuthIn"))
			data, err := ec.unmarshalOApiUserCbAPIAuth2ᚕroofixᚋserverᚋmodelᚐAPIUserCbAPIAuthᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ApiUserWhereInput().CbAPIAuthIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "cbAPIAuthNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIAuthNotIn"))
			data, err := ec.unmarshalOApiUserCbAPIAuth2ᚕroofixᚋserverᚋmodelᚐAPIUserCbAPIAuthᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ApiUserWhereInput().CbAPIAuthNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "cbAPIAuthIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIAuthIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIAuthIsNil = data
		case "cbAPIAuthNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIAuthNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIAuthNotNil = data
		case "cbAPIUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUser"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUser = data
		case "cbAPIUserNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserNEQ = data
		case "cbAPIUserIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserIn = data
		case "cbAPIUserNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserNotIn = data
		case "cbAPIUserGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserGT = data
		case "cbAPIUserGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserGTE = data
		case "cbAPIUserLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserLT = data
		case "cbAPIUserLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserLTE = data
		case "cbAPIUserContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserContains = data
		case "cbAPIUserHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserHasPrefix = data
		case "cbAPIUserHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserHasSuffix = data
		case "cbAPIUserIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserIsNil = data
		case "cbAPIUserNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserNotNil = data
		case "cbAPIUserEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserEqualFold = data
		case "cbAPIUserContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIUserContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIUserContainsFold = data
		case "cbAPIPwd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwd"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwd = data
		case "cbAPIPwdNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdNEQ = data
		case "cbAPIPwdIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdIn = data
		case "cbAPIPwdNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdNotIn = data
		case "cbAPIPwdGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdGT = data
		case "cbAPIPwdGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdGTE = data
		case "cbAPIPwdLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdLT = data
		case "cbAPIPwdLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdLTE = data
		case "cbAPIPwdContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdContains = data
		case "cbAPIPwdHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdHasPrefix = data
		case "cbAPIPwdHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdHasSuffix = data
		case "cbAPIPwdIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdIsNil = data
		case "cbAPIPwdNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdNotNil = data
		case "cbAPIPwdEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdEqualFold = data
		case "cbAPIPwdContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIPwdContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIPwdContainsFold = data
		case "cbAPIToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPIToken"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPIToken = data
		case "cbAPITokenNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenNEQ = data
		case "cbAPITokenIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenIn = data
		case "cbAPITokenNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenNotIn = data
		case "cbAPITokenGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenGT = data
		case "cbAPITokenGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenGTE = data
		case "cbAPITokenLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenLT = data
		case "cbAPITokenLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenLTE = data
		case "cbAPITokenContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenContains = data
		case "cbAPITokenHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenHasPrefix = data
		case "cbAPITokenHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenHasSuffix = data
		case "cbAPITokenIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenIsNil = data
		case "cbAPITokenNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenNotNil = data
		case "cbAPITokenEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenEqualFold = data
		case "cbAPITokenContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cbAPITokenContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CbAPITokenContainsFold = data
		case "hasTokens":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokens"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokens = data
		case "hasTokensWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTokensWith"))
			data, err := ec.unmarshalOApiUserTokenWhereInput2ᚕᚖroofixᚋentᚐApiUserTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTokensWith = data
		case "hasAuditLogs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAuditLogs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAuditLogs = data
		case "hasAuditLogsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAuditLogsWith"))
			data, err := ec.unmarshalOAuditLogWhereInput2ᚕᚖroofixᚋentᚐAuditLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAuditLogsWith = data
		case "hasCreatedEstimates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedEstimates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedEstimates = data
		case "hasCreatedEstimatesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedEstimatesWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedEstimatesWith = data
		case "hasCreatedJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedJobs = data
		case "hasCreatedJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedJobsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedJobsWith = data
		case "hasCreatedPartners":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedPartners"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedPartners = data
		case "hasCreatedPartnersWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedPartnersWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedPartnersWith = data
		case "hasSurveyProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveyProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveyProgress = data
		case "hasSurveyProgressWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveyProgressWith"))
			data, err := ec.unmarshalOSurveyProgressWhereInput2ᚕᚖroofixᚋentᚐSurveyProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveyProgressWith = data
		case "hasEstimateActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateActivities = data
		case "hasEstimateActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateActivitiesWith"))
			data, err := ec.unmarshalOEstimateActivityWhereInput2ᚕᚖroofixᚋentᚐEstimateActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateActivitiesWith = data
		case "hasUserActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserActivities = data
		case "hasUserActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserActivitiesWith"))
			data, err := ec.unmarshalOUserActivityWhereInput2ᚕᚖroofixᚋentᚐUserActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserActivitiesWith = data
		case "hasPartnerActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerActivities = data
		case "hasPartnerActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerActivitiesWith"))
			data, err := ec.unmarshalOPartnerActivityWhereInput2ᚕᚖroofixᚋentᚐPartnerActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerActivitiesWith = data
		case "hasJobActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobActivities = data
		case "hasJobActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobActivitiesWith"))
			data, err := ec.unmarshalOJobActivityWhereInput2ᚕᚖroofixᚋentᚐJobActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobActivitiesWith = data
		case "hasNotifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNotifications"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNotifications = data
		case "hasNotificationsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNotificationsWith"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNotificationsWith = data
		case "hasJobProgressHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobProgressHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobProgressHistory = data
		case "hasJobProgressHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobProgressHistoryWith"))
			data, err := ec.unmarshalOJobProgressHistoryWhereInput2ᚕᚖroofixᚋentᚐJobProgressHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobProgressHistoryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditLogWhereInput(ctx context.Context, obj interface{}) (ent.AuditLogWhereInput, error) {
	var it ent.AuditLogWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "action", "actionNEQ", "actionIn", "actionNotIn", "actionGT", "actionGTE", "actionLT", "actionLTE", "actionContains", "actionHasPrefix", "actionHasSuffix", "actionEqualFold", "actionContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "ip", "ipNEQ", "ipIn", "ipNotIn", "ipGT", "ipGTE", "ipLT", "ipLTE", "ipContains", "ipHasPrefix", "ipHasSuffix", "ipIsNil", "ipNotNil", "ipEqualFold", "ipContainsFold", "hasUser", "hasUserWith", "hasAPIUser", "hasAPIUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOAuditLogWhereInput2ᚖroofixᚋentᚐAuditLogWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOAuditLogWhereInput2ᚕᚖroofixᚋentᚐAuditLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOAuditLogWhereInput2ᚕᚖroofixᚋentᚐAuditLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Action = data
		case "actionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNEQ = data
		case "actionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionIn = data
		case "actionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNotIn = data
		case "actionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionGT = data
		case "actionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionGTE = data
		case "actionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLT = data
		case "actionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLTE = data
		case "actionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionContains = data
		case "actionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionHasPrefix = data
		case "actionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionHasSuffix = data
		case "actionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionEqualFold = data
		case "actionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionContainsFold = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IP = data
		case "ipNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPNEQ = data
		case "ipIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPIn = data
		case "ipNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPNotIn = data
		case "ipGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPGT = data
		case "ipGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPGTE = data
		case "ipLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPLT = data
		case "ipLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPLTE = data
		case "ipContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPContains = data
		case "ipHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPHasPrefix = data
		case "ipHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPHasSuffix = data
		case "ipIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPIsNil = data
		case "ipNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPNotNil = data
		case "ipEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPEqualFold = data
		case "ipContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPContainsFold = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasAPIUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAPIUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAPIUser = data
		case "hasAPIUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAPIUserWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAPIUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelMessageReadWhereInput(ctx context.Context, obj interface{}) (ent.ChannelMessageReadWhereInput, error) {
	var it ent.ChannelMessageReadWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "read", "readNEQ", "hasChannelMessage", "hasChannelMessageWith", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOChannelMessageReadWhereInput2ᚖroofixᚋentᚐChannelMessageReadWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOChannelMessageReadWhereInput2ᚕᚖroofixᚋentᚐChannelMessageReadWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOChannelMessageReadWhereInput2ᚕᚖroofixᚋentᚐChannelMessageReadWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "read":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("read"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Read = data
		case "readNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReadNEQ = data
		case "hasChannelMessage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelMessage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelMessage = data
		case "hasChannelMessageWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelMessageWith"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelMessageWith = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelMessageWhereInput(ctx context.Context, obj interface{}) (ent.ChannelMessageWhereInput, error) {
	var it ent.ChannelMessageWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "title", "titleNEQ", "titleIn", "titleNotIn", "titleGT", "titleGTE", "titleLT", "titleLTE", "titleContains", "titleHasPrefix", "titleHasSuffix", "titleIsNil", "titleNotNil", "titleEqualFold", "titleContainsFold", "message", "messageNEQ", "messageIn", "messageNotIn", "messageGT", "messageGTE", "messageLT", "messageLTE", "messageContains", "messageHasPrefix", "messageHasSuffix", "messageEqualFold", "messageContainsFold", "fromName", "fromNameNEQ", "fromNameIn", "fromNameNotIn", "fromNameGT", "fromNameGTE", "fromNameLT", "fromNameLTE", "fromNameContains", "fromNameHasPrefix", "fromNameHasSuffix", "fromNameEqualFold", "fromNameContainsFold", "toName", "toNameNEQ", "toNameIn", "toNameNotIn", "toNameGT", "toNameGTE", "toNameLT", "toNameLTE", "toNameContains", "toNameHasPrefix", "toNameHasSuffix", "toNameIsNil", "toNameNotNil", "toNameEqualFold", "toNameContainsFold", "private", "privateNEQ", "unread", "unreadNEQ", "unreadIsNil", "unreadNotNil", "hasReads", "hasReadsWith", "hasChannel", "hasChannelWith", "hasFrom", "hasFromWith", "hasFromAPIUser", "hasFromAPIUserWith", "hasTo", "hasToWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚖroofixᚋentᚐChannelMessageWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "titleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNEQ = data
		case "titleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIn = data
		case "titleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotIn = data
		case "titleGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGT = data
		case "titleGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGTE = data
		case "titleLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLT = data
		case "titleLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLTE = data
		case "titleContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContains = data
		case "titleHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasPrefix = data
		case "titleHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasSuffix = data
		case "titleIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIsNil = data
		case "titleNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotNil = data
		case "titleEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleEqualFold = data
		case "titleContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContainsFold = data
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Message = data
		case "messageNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageNEQ = data
		case "messageIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageIn = data
		case "messageNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageNotIn = data
		case "messageGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageGT = data
		case "messageGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageGTE = data
		case "messageLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageLT = data
		case "messageLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageLTE = data
		case "messageContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageContains = data
		case "messageHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageHasPrefix = data
		case "messageHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageHasSuffix = data
		case "messageEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageEqualFold = data
		case "messageContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageContainsFold = data
		case "fromName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromName = data
		case "fromNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameNEQ = data
		case "fromNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameIn = data
		case "fromNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameNotIn = data
		case "fromNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameGT = data
		case "fromNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameGTE = data
		case "fromNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameLT = data
		case "fromNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameLTE = data
		case "fromNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameContains = data
		case "fromNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameHasPrefix = data
		case "fromNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameHasSuffix = data
		case "fromNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameEqualFold = data
		case "fromNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNameContainsFold = data
		case "toName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToName = data
		case "toNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameNEQ = data
		case "toNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameIn = data
		case "toNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameNotIn = data
		case "toNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameGT = data
		case "toNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameGTE = data
		case "toNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameLT = data
		case "toNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameLTE = data
		case "toNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameContains = data
		case "toNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameHasPrefix = data
		case "toNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameHasSuffix = data
		case "toNameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameIsNil = data
		case "toNameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameNotNil = data
		case "toNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameEqualFold = data
		case "toNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNameContainsFold = data
		case "private":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("private"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Private = data
		case "privateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privateNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrivateNEQ = data
		case "unread":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unread"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Unread = data
		case "unreadNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unreadNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnreadNEQ = data
		case "unreadIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unreadIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnreadIsNil = data
		case "unreadNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unreadNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnreadNotNil = data
		case "hasReads":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReads"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReads = data
		case "hasReadsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReadsWith"))
			data, err := ec.unmarshalOChannelMessageReadWhereInput2ᚕᚖroofixᚋentᚐChannelMessageReadWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReadsWith = data
		case "hasChannel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannel"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannel = data
		case "hasChannelWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelWith"))
			data, err := ec.unmarshalOChannelWhereInput2ᚕᚖroofixᚋentᚐChannelWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelWith = data
		case "hasFrom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFrom"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFrom = data
		case "hasFromWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFromWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFromWith = data
		case "hasFromAPIUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFromAPIUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFromAPIUser = data
		case "hasFromAPIUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFromAPIUserWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFromAPIUserWith = data
		case "hasTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTo = data
		case "hasToWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasToWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasToWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelSubWhereInput(ctx context.Context, obj interface{}) (ent.ChannelSubWhereInput, error) {
	var it ent.ChannelSubWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "role", "roleNEQ", "roleIn", "roleNotIn", "roleIsNil", "roleNotNil", "hasChannel", "hasChannelWith", "hasUser", "hasUserWith", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOChannelSubWhereInput2ᚖroofixᚋentᚐChannelSubWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOChannelSubWhereInput2ᚕᚖroofixᚋentᚐChannelSubWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOChannelSubWhereInput2ᚕᚖroofixᚋentᚐChannelSubWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalORole2ᚖroofixᚋpkgᚋenumᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "roleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNEQ"))
			data, err := ec.unmarshalORole2ᚖroofixᚋpkgᚋenumᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNEQ = data
		case "roleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIn"))
			data, err := ec.unmarshalORole2ᚕroofixᚋpkgᚋenumᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIn = data
		case "roleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNotIn"))
			data, err := ec.unmarshalORole2ᚕroofixᚋpkgᚋenumᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNotIn = data
		case "roleIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIsNil = data
		case "roleNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNotNil = data
		case "hasChannel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannel"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannel = data
		case "hasChannelWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelWith"))
			data, err := ec.unmarshalOChannelWhereInput2ᚕᚖroofixᚋentᚐChannelWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelWith = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelWhereInput(ctx context.Context, obj interface{}) (ent.ChannelWhereInput, error) {
	var it ent.ChannelWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "topic", "topicNEQ", "topicIn", "topicNotIn", "refID", "refIDNEQ", "refIDIn", "refIDNotIn", "refIDGT", "refIDGTE", "refIDLT", "refIDLTE", "refIDContains", "refIDHasPrefix", "refIDHasSuffix", "refIDIsNil", "refIDNotNil", "refIDEqualFold", "refIDContainsFold", "hasSubscriptions", "hasSubscriptionsWith", "hasMessages", "hasMessagesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOChannelWhereInput2ᚖroofixᚋentᚐChannelWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOChannelWhereInput2ᚕᚖroofixᚋentᚐChannelWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOChannelWhereInput2ᚕᚖroofixᚋentᚐChannelWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOChannel2ᚖroofixᚋpkgᚋenumᚐChannel(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOChannel2ᚖroofixᚋpkgᚋenumᚐChannel(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOChannel2ᚕroofixᚋpkgᚋenumᚐChannelᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOChannel2ᚕroofixᚋpkgᚋenumᚐChannelᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "topic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic"))
			data, err := ec.unmarshalOTopic2ᚖroofixᚋpkgᚋenumᚐTopic(ctx, v)
			if err != nil {
				return it, err
			}
			it.Topic = data
		case "topicNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicNEQ"))
			data, err := ec.unmarshalOTopic2ᚖroofixᚋpkgᚋenumᚐTopic(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicNEQ = data
		case "topicIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIn"))
			data, err := ec.unmarshalOTopic2ᚕroofixᚋpkgᚋenumᚐTopicᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIn = data
		case "topicNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicNotIn"))
			data, err := ec.unmarshalOTopic2ᚕroofixᚋpkgᚋenumᚐTopicᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicNotIn = data
		case "refID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefID = data
		case "refIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDNEQ = data
		case "refIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDIn = data
		case "refIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDNotIn = data
		case "refIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDGT = data
		case "refIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDGTE = data
		case "refIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDLT = data
		case "refIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDLTE = data
		case "refIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDContains = data
		case "refIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDHasPrefix = data
		case "refIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDHasSuffix = data
		case "refIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDIsNil = data
		case "refIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDNotNil = data
		case "refIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDEqualFold = data
		case "refIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefIDContainsFold = data
		case "hasSubscriptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubscriptions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSubscriptions = data
		case "hasSubscriptionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubscriptionsWith"))
			data, err := ec.unmarshalOChannelSubWhereInput2ᚕᚖroofixᚋentᚐChannelSubWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSubscriptionsWith = data
		case "hasMessages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMessages"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMessages = data
		case "hasMessagesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMessagesWith"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMessagesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactUsWhereInput(ctx context.Context, obj interface{}) (ent.ContactUsWhereInput, error) {
	var it ent.ContactUsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "reason", "reasonNEQ", "reasonIn", "reasonNotIn", "reasonGT", "reasonGTE", "reasonLT", "reasonLTE", "reasonContains", "reasonHasPrefix", "reasonHasSuffix", "reasonEqualFold", "reasonContainsFold", "hasPartner", "hasPartnerWith", "hasCreator", "hasCreatorWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOContactUsWhereInput2ᚖroofixᚋentᚐContactUsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOContactUsWhereInput2ᚕᚖroofixᚋentᚐContactUsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOContactUsWhereInput2ᚕᚖroofixᚋentᚐContactUsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "reasonNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNEQ = data
		case "reasonIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIn = data
		case "reasonNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotIn = data
		case "reasonGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGT = data
		case "reasonGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGTE = data
		case "reasonLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLT = data
		case "reasonLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLTE = data
		case "reasonContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContains = data
		case "reasonHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasPrefix = data
		case "reasonHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasSuffix = data
		case "reasonEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonEqualFold = data
		case "reasonContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContainsFold = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePartnerServiceCityInput(ctx context.Context, obj interface{}) (ent.CreatePartnerServiceCityInput, error) {
	var it ent.CreatePartnerServiceCityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "postalID", "active", "name", "naicsCode", "licenseNo", "proofDocID", "partnerID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "postalID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalID = data
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "naicsCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CreatePartnerServiceCityInput().NaicsCode(ctx, &it, data); err != nil {
				return it, err
			}
		case "licenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNo = data
		case "proofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocID = data
		case "partnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partnerID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartnerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePartnerServiceStateInput(ctx context.Context, obj interface{}) (ent.CreatePartnerServiceStateInput, error) {
	var it ent.CreatePartnerServiceStateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "country", "state", "licenseNo", "licenseExpDate", "proofDocID", "partnerID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "licenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNo = data
		case "licenseExpDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDate = data
		case "proofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocID = data
		case "partnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partnerID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartnerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDocumentWhereInput(ctx context.Context, obj interface{}) (ent.DocumentWhereInput, error) {
	var it ent.DocumentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "bucket", "bucketNEQ", "bucketIn", "bucketNotIn", "bucketGT", "bucketGTE", "bucketLT", "bucketLTE", "bucketContains", "bucketHasPrefix", "bucketHasSuffix", "bucketEqualFold", "bucketContainsFold", "key", "keyNEQ", "keyIn", "keyNotIn", "keyGT", "keyGTE", "keyLT", "keyLTE", "keyContains", "keyHasPrefix", "keyHasSuffix", "keyEqualFold", "keyContainsFold", "folder", "folderNEQ", "folderIn", "folderNotIn", "dir", "dirNEQ", "dirIn", "dirNotIn", "dirGT", "dirGTE", "dirLT", "dirLTE", "dirContains", "dirHasPrefix", "dirHasSuffix", "dirIsNil", "dirNotNil", "dirEqualFold", "dirContainsFold", "section", "sectionNEQ", "sectionIn", "sectionNotIn", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "filename", "filenameNEQ", "filenameIn", "filenameNotIn", "filenameGT", "filenameGTE", "filenameLT", "filenameLTE", "filenameContains", "filenameHasPrefix", "filenameHasSuffix", "filenameEqualFold", "filenameContainsFold", "contentType", "contentTypeNEQ", "contentTypeIn", "contentTypeNotIn", "contentTypeGT", "contentTypeGTE", "contentTypeLT", "contentTypeLTE", "contentTypeContains", "contentTypeHasPrefix", "contentTypeHasSuffix", "contentTypeIsNil", "contentTypeNotNil", "contentTypeEqualFold", "contentTypeContainsFold", "contentSize", "contentSizeNEQ", "contentSizeIn", "contentSizeNotIn", "contentSizeGT", "contentSizeGTE", "contentSizeLT", "contentSizeLTE", "ready", "readyNEQ", "creatorID", "creatorIDNEQ", "creatorIDIn", "creatorIDNotIn", "creatorIDGT", "creatorIDGTE", "creatorIDLT", "creatorIDLTE", "creatorIDContains", "creatorIDHasPrefix", "creatorIDHasSuffix", "creatorIDEqualFold", "creatorIDContainsFold", "updaterID", "updaterIDNEQ", "updaterIDIn", "updaterIDNotIn", "updaterIDGT", "updaterIDGTE", "updaterIDLT", "updaterIDLTE", "updaterIDContains", "updaterIDHasPrefix", "updaterIDHasSuffix", "updaterIDIsNil", "updaterIDNotNil", "updaterIDEqualFold", "updaterIDContainsFold", "hasTrainingVideo", "hasTrainingVideoWith", "hasTrainingVideoPoster", "hasTrainingVideoPosterWith", "hasProductsImage", "hasProductsImageWith", "hasInstallationJobItemImage", "hasInstallationJobItemImageWith", "hasEstimatePdf", "hasEstimatePdfWith", "hasJobEstimatePdf", "hasJobEstimatePdfWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalODocumentWhereInput2ᚖroofixᚋentᚐDocumentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "bucket":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucket"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Bucket = data
		case "bucketNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketNEQ = data
		case "bucketIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketIn = data
		case "bucketNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketNotIn = data
		case "bucketGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketGT = data
		case "bucketGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketGTE = data
		case "bucketLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketLT = data
		case "bucketLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketLTE = data
		case "bucketContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketContains = data
		case "bucketHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketHasPrefix = data
		case "bucketHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketHasSuffix = data
		case "bucketEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketEqualFold = data
		case "bucketContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucketContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BucketContainsFold = data
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "keyNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyNEQ = data
		case "keyIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyIn = data
		case "keyNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyNotIn = data
		case "keyGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyGT = data
		case "keyGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyGTE = data
		case "keyLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyLT = data
		case "keyLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyLTE = data
		case "keyContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyContains = data
		case "keyHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyHasPrefix = data
		case "keyHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyHasSuffix = data
		case "keyEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyEqualFold = data
		case "keyContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyContainsFold = data
		case "folder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folder"))
			data, err := ec.unmarshalODocumentFolder2ᚖroofixᚋpkgᚋenumᚐDocFolder(ctx, v)
			if err != nil {
				return it, err
			}
			it.Folder = data
		case "folderNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderNEQ"))
			data, err := ec.unmarshalODocumentFolder2ᚖroofixᚋpkgᚋenumᚐDocFolder(ctx, v)
			if err != nil {
				return it, err
			}
			it.FolderNEQ = data
		case "folderIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderIn"))
			data, err := ec.unmarshalODocumentFolder2ᚕroofixᚋpkgᚋenumᚐDocFolderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FolderIn = data
		case "folderNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderNotIn"))
			data, err := ec.unmarshalODocumentFolder2ᚕroofixᚋpkgᚋenumᚐDocFolderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FolderNotIn = data
		case "dir":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dir"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dir = data
		case "dirNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirNEQ = data
		case "dirIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirIn = data
		case "dirNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirNotIn = data
		case "dirGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirGT = data
		case "dirGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirGTE = data
		case "dirLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirLT = data
		case "dirLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirLTE = data
		case "dirContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirContains = data
		case "dirHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirHasPrefix = data
		case "dirHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirHasSuffix = data
		case "dirIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirIsNil = data
		case "dirNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirNotNil = data
		case "dirEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirEqualFold = data
		case "dirContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dirContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirContainsFold = data
		case "section":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
			data, err := ec.unmarshalODocumentSection2ᚖroofixᚋpkgᚋenumᚐDocSection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Section = data
		case "sectionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectionNEQ"))
			data, err := ec.unmarshalODocumentSection2ᚖroofixᚋpkgᚋenumᚐDocSection(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectionNEQ = data
		case "sectionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectionIn"))
			data, err := ec.unmarshalODocumentSection2ᚕroofixᚋpkgᚋenumᚐDocSectionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectionIn = data
		case "sectionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sectionNotIn"))
			data, err := ec.unmarshalODocumentSection2ᚕroofixᚋpkgᚋenumᚐDocSectionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SectionNotIn = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "filename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filename = data
		case "filenameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameNEQ = data
		case "filenameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameIn = data
		case "filenameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameNotIn = data
		case "filenameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameGT = data
		case "filenameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameGTE = data
		case "filenameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameLT = data
		case "filenameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameLTE = data
		case "filenameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameContains = data
		case "filenameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameHasPrefix = data
		case "filenameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameHasSuffix = data
		case "filenameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameEqualFold = data
		case "filenameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filenameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FilenameContainsFold = data
		case "contentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "contentTypeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeNEQ = data
		case "contentTypeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeIn = data
		case "contentTypeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeNotIn = data
		case "contentTypeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeGT = data
		case "contentTypeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeGTE = data
		case "contentTypeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeLT = data
		case "contentTypeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeLTE = data
		case "contentTypeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeContains = data
		case "contentTypeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeHasPrefix = data
		case "contentTypeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeHasSuffix = data
		case "contentTypeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeIsNil = data
		case "contentTypeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeNotNil = data
		case "contentTypeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeEqualFold = data
		case "contentTypeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentTypeContainsFold = data
		case "contentSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSize"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSize = data
		case "contentSizeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeNEQ = data
		case "contentSizeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeIn = data
		case "contentSizeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeNotIn = data
		case "contentSizeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeGT = data
		case "contentSizeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeGTE = data
		case "contentSizeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeLT = data
		case "contentSizeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentSizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentSizeLTE = data
		case "ready":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ready"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ready = data
		case "readyNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readyNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReadyNEQ = data
		case "creatorID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorID = data
		case "creatorIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDNEQ = data
		case "creatorIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDIn = data
		case "creatorIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDNotIn = data
		case "creatorIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDGT = data
		case "creatorIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDGTE = data
		case "creatorIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDLT = data
		case "creatorIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDLTE = data
		case "creatorIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDContains = data
		case "creatorIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDHasPrefix = data
		case "creatorIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDHasSuffix = data
		case "creatorIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDEqualFold = data
		case "creatorIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDContainsFold = data
		case "updaterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterID = data
		case "updaterIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDNEQ = data
		case "updaterIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDIn = data
		case "updaterIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDNotIn = data
		case "updaterIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDGT = data
		case "updaterIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDGTE = data
		case "updaterIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDLT = data
		case "updaterIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDLTE = data
		case "updaterIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDContains = data
		case "updaterIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDHasPrefix = data
		case "updaterIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDHasSuffix = data
		case "updaterIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDIsNil = data
		case "updaterIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDNotNil = data
		case "updaterIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDEqualFold = data
		case "updaterIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updaterIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdaterIDContainsFold = data
		case "hasTrainingVideo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideo = data
		case "hasTrainingVideoWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideoWith"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideoWith = data
		case "hasTrainingVideoPoster":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideoPoster"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideoPoster = data
		case "hasTrainingVideoPosterWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideoPosterWith"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideoPosterWith = data
		case "hasProductsImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductsImage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductsImage = data
		case "hasProductsImageWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductsImageWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖroofixᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductsImageWith = data
		case "hasInstallationJobItemImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstallationJobItemImage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInstallationJobItemImage = data
		case "hasInstallationJobItemImageWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstallationJobItemImageWith"))
			data, err := ec.unmarshalOInstallationJobItemWhereInput2ᚕᚖroofixᚋentᚐInstallationJobItemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInstallationJobItemImageWith = data
		case "hasEstimatePdf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimatePdf"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimatePdf = data
		case "hasEstimatePdfWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimatePdfWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimatePdfWith = data
		case "hasJobEstimatePdf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobEstimatePdf"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobEstimatePdf = data
		case "hasJobEstimatePdfWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobEstimatePdfWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobEstimatePdfWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEstimateActivityWhereInput(ctx context.Context, obj interface{}) (ent.EstimateActivityWhereInput, error) {
	var it ent.EstimateActivityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasEstimate", "hasEstimateWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOEstimateActivityWhereInput2ᚖroofixᚋentᚐEstimateActivityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOEstimateActivityWhereInput2ᚕᚖroofixᚋentᚐEstimateActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOEstimateActivityWhereInput2ᚕᚖroofixᚋentᚐEstimateActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasEstimate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimate"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimate = data
		case "hasEstimateWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEstimateWhereInput(ctx context.Context, obj interface{}) (ent.EstimateWhereInput, error) {
	var it ent.EstimateWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "regionID", "regionIDNEQ", "regionIDIn", "regionIDNotIn", "regionIDGT", "regionIDGTE", "regionIDLT", "regionIDLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "currentMaterial", "currentMaterialNEQ", "currentMaterialIn", "currentMaterialNotIn", "currentMaterialGT", "currentMaterialGTE", "currentMaterialLT", "currentMaterialLTE", "currentMaterialContains", "currentMaterialHasPrefix", "currentMaterialHasSuffix", "currentMaterialIsNil", "currentMaterialNotNil", "currentMaterialEqualFold", "currentMaterialContainsFold", "newRoofingMaterial", "newRoofingMaterialNEQ", "newRoofingMaterialIn", "newRoofingMaterialNotIn", "newRoofingMaterialGT", "newRoofingMaterialGTE", "newRoofingMaterialLT", "newRoofingMaterialLTE", "newRoofingMaterialContains", "newRoofingMaterialHasPrefix", "newRoofingMaterialHasSuffix", "newRoofingMaterialIsNil", "newRoofingMaterialNotNil", "newRoofingMaterialEqualFold", "newRoofingMaterialContainsFold", "lowslope", "lowslopeNEQ", "currentMaterialLowSlope", "currentMaterialLowSlopeNEQ", "currentMaterialLowSlopeIn", "currentMaterialLowSlopeNotIn", "currentMaterialLowSlopeGT", "currentMaterialLowSlopeGTE", "currentMaterialLowSlopeLT", "currentMaterialLowSlopeLTE", "currentMaterialLowSlopeContains", "currentMaterialLowSlopeHasPrefix", "currentMaterialLowSlopeHasSuffix", "currentMaterialLowSlopeIsNil", "currentMaterialLowSlopeNotNil", "currentMaterialLowSlopeEqualFold", "currentMaterialLowSlopeContainsFold", "newRoofingMaterialLowSlope", "newRoofingMaterialLowSlopeNEQ", "newRoofingMaterialLowSlopeIn", "newRoofingMaterialLowSlopeNotIn", "newRoofingMaterialLowSlopeGT", "newRoofingMaterialLowSlopeGTE", "newRoofingMaterialLowSlopeLT", "newRoofingMaterialLowSlopeLTE", "newRoofingMaterialLowSlopeContains", "newRoofingMaterialLowSlopeHasPrefix", "newRoofingMaterialLowSlopeHasSuffix", "newRoofingMaterialLowSlopeIsNil", "newRoofingMaterialLowSlopeNotNil", "newRoofingMaterialLowSlopeEqualFold", "newRoofingMaterialLowSlopeContainsFold", "redeck", "redeckNEQ", "layers", "layersNEQ", "layersIn", "layersNotIn", "layersGT", "layersGTE", "layersLT", "layersLTE", "layer2Material", "layer2MaterialNEQ", "layer2MaterialIn", "layer2MaterialNotIn", "layer2MaterialGT", "layer2MaterialGTE", "layer2MaterialLT", "layer2MaterialLTE", "layer2MaterialContains", "layer2MaterialHasPrefix", "layer2MaterialHasSuffix", "layer2MaterialIsNil", "layer2MaterialNotNil", "layer2MaterialEqualFold", "layer2MaterialContainsFold", "layer3Material", "layer3MaterialNEQ", "layer3MaterialIn", "layer3MaterialNotIn", "layer3MaterialGT", "layer3MaterialGTE", "layer3MaterialLT", "layer3MaterialLTE", "layer3MaterialContains", "layer3MaterialHasPrefix", "layer3MaterialHasSuffix", "layer3MaterialIsNil", "layer3MaterialNotNil", "layer3MaterialEqualFold", "layer3MaterialContainsFold", "partialPercentage", "partialPercentageNEQ", "partialPercentageIn", "partialPercentageNotIn", "partialPercentageGT", "partialPercentageGTE", "partialPercentageLT", "partialPercentageLTE", "partialPercentageIsNil", "partialPercentageNotNil", "materialMappingNote", "materialMappingNoteNEQ", "materialMappingNoteIn", "materialMappingNoteNotIn", "materialMappingNoteGT", "materialMappingNoteGTE", "materialMappingNoteLT", "materialMappingNoteLTE", "materialMappingNoteContains", "materialMappingNoteHasPrefix", "materialMappingNoteHasSuffix", "materialMappingNoteIsNil", "materialMappingNoteNotNil", "materialMappingNoteEqualFold", "materialMappingNoteContainsFold", "measureType", "measureTypeNEQ", "measureTypeIn", "measureTypeNotIn", "extraChargeType", "extraChargeTypeNEQ", "extraChargeTypeIn", "extraChargeTypeNotIn", "extraChargeTypeIsNil", "extraChargeTypeNotNil", "extraCharges", "extraChargesNEQ", "extraChargesIn", "extraChargesNotIn", "extraChargesGT", "extraChargesGTE", "extraChargesLT", "extraChargesLTE", "extraChargesIsNil", "extraChargesNotNil", "extraChargeNote", "extraChargeNoteNEQ", "extraChargeNoteIn", "extraChargeNoteNotIn", "extraChargeNoteGT", "extraChargeNoteGTE", "extraChargeNoteLT", "extraChargeNoteLTE", "extraChargeNoteContains", "extraChargeNoteHasPrefix", "extraChargeNoteHasSuffix", "extraChargeNoteIsNil", "extraChargeNoteNotNil", "extraChargeNoteEqualFold", "extraChargeNoteContainsFold", "estimator", "estimatorNEQ", "estimatorIn", "estimatorNotIn", "estimatorGT", "estimatorGTE", "estimatorLT", "estimatorLTE", "estimatorContains", "estimatorHasPrefix", "estimatorHasSuffix", "estimatorIsNil", "estimatorNotNil", "estimatorEqualFold", "estimatorContainsFold", "estimatorOrderID", "estimatorOrderIDNEQ", "estimatorOrderIDIn", "estimatorOrderIDNotIn", "estimatorOrderIDGT", "estimatorOrderIDGTE", "estimatorOrderIDLT", "estimatorOrderIDLTE", "estimatorOrderIDIsNil", "estimatorOrderIDNotNil", "estimatorReportID", "estimatorReportIDNEQ", "estimatorReportIDIn", "estimatorReportIDNotIn", "estimatorReportIDGT", "estimatorReportIDGTE", "estimatorReportIDLT", "estimatorReportIDLTE", "estimatorReportIDIsNil", "estimatorReportIDNotNil", "totalSquares", "totalSquaresNEQ", "totalSquaresIn", "totalSquaresNotIn", "totalSquaresGT", "totalSquaresGTE", "totalSquaresLT", "totalSquaresLTE", "primaryPitch", "primaryPitchNEQ", "primaryPitchIn", "primaryPitchNotIn", "primaryPitchGT", "primaryPitchGTE", "primaryPitchLT", "primaryPitchLTE", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "priceSummary", "priceSummaryNEQ", "priceSummaryIn", "priceSummaryNotIn", "priceSummaryGT", "priceSummaryGTE", "priceSummaryLT", "priceSummaryLTE", "priceSummaryContains", "priceSummaryHasPrefix", "priceSummaryHasSuffix", "priceSummaryIsNil", "priceSummaryNotNil", "priceSummaryEqualFold", "priceSummaryContainsFold", "override", "overrideNEQ", "overrideIsNil", "overrideNotNil", "overrideTotalSquares", "overrideTotalSquaresNEQ", "overrideTotalSquaresIn", "overrideTotalSquaresNotIn", "overrideTotalSquaresGT", "overrideTotalSquaresGTE", "overrideTotalSquaresLT", "overrideTotalSquaresLTE", "overridePrimaryPitch", "overridePrimaryPitchNEQ", "overridePrimaryPitchIn", "overridePrimaryPitchNotIn", "overridePrimaryPitchGT", "overridePrimaryPitchGTE", "overridePrimaryPitchLT", "overridePrimaryPitchLTE", "overridePrice", "overridePriceNEQ", "overridePriceIn", "overridePriceNotIn", "overridePriceGT", "overridePriceGTE", "overridePriceLT", "overridePriceLTE", "overridePriceSummary", "overridePriceSummaryNEQ", "overridePriceSummaryIn", "overridePriceSummaryNotIn", "overridePriceSummaryGT", "overridePriceSummaryGTE", "overridePriceSummaryLT", "overridePriceSummaryLTE", "overridePriceSummaryContains", "overridePriceSummaryHasPrefix", "overridePriceSummaryHasSuffix", "overridePriceSummaryIsNil", "overridePriceSummaryNotNil", "overridePriceSummaryEqualFold", "overridePriceSummaryContainsFold", "companyRefID", "companyRefIDNEQ", "companyRefIDIn", "companyRefIDNotIn", "companyRefIDGT", "companyRefIDGTE", "companyRefIDLT", "companyRefIDLTE", "companyRefIDContains", "companyRefIDHasPrefix", "companyRefIDHasSuffix", "companyRefIDIsNil", "companyRefIDNotNil", "companyRefIDEqualFold", "companyRefIDContainsFold", "companyRefName", "companyRefNameNEQ", "companyRefNameIn", "companyRefNameNotIn", "companyRefNameGT", "companyRefNameGTE", "companyRefNameLT", "companyRefNameLTE", "companyRefNameContains", "companyRefNameHasPrefix", "companyRefNameHasSuffix", "companyRefNameIsNil", "companyRefNameNotNil", "companyRefNameEqualFold", "companyRefNameContainsFold", "failureReason", "failureReasonNEQ", "failureReasonIn", "failureReasonNotIn", "failureReasonGT", "failureReasonGTE", "failureReasonLT", "failureReasonLTE", "failureReasonContains", "failureReasonHasPrefix", "failureReasonHasSuffix", "failureReasonIsNil", "failureReasonNotNil", "failureReasonEqualFold", "failureReasonContainsFold", "hasActivities", "hasActivitiesWith", "hasJobInfo", "hasJobInfoWith", "hasPartner", "hasPartnerWith", "hasHomeOwner", "hasHomeOwnerWith", "hasSalesRep", "hasSalesRepWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith", "hasPdf", "hasPdfWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚖroofixᚋentᚐEstimateWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "regionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionID(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().RegionIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOEstimateStatus2ᚖroofixᚋpkgᚋenumᚐEstimateStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOEstimateStatus2ᚖroofixᚋpkgᚋenumᚐEstimateStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOEstimateStatus2ᚕroofixᚋpkgᚋenumᚐEstimateStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOEstimateStatus2ᚕroofixᚋpkgᚋenumᚐEstimateStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "currentMaterial":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterial"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterial = data
		case "currentMaterialNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialNEQ = data
		case "currentMaterialIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialIn = data
		case "currentMaterialNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialNotIn = data
		case "currentMaterialGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialGT = data
		case "currentMaterialGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialGTE = data
		case "currentMaterialLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLT = data
		case "currentMaterialLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLTE = data
		case "currentMaterialContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialContains = data
		case "currentMaterialHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialHasPrefix = data
		case "currentMaterialHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialHasSuffix = data
		case "currentMaterialIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialIsNil = data
		case "currentMaterialNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialNotNil = data
		case "currentMaterialEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialEqualFold = data
		case "currentMaterialContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialContainsFold = data
		case "newRoofingMaterial":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterial"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterial = data
		case "newRoofingMaterialNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialNEQ = data
		case "newRoofingMaterialIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialIn = data
		case "newRoofingMaterialNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialNotIn = data
		case "newRoofingMaterialGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialGT = data
		case "newRoofingMaterialGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialGTE = data
		case "newRoofingMaterialLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLT = data
		case "newRoofingMaterialLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLTE = data
		case "newRoofingMaterialContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialContains = data
		case "newRoofingMaterialHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialHasPrefix = data
		case "newRoofingMaterialHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialHasSuffix = data
		case "newRoofingMaterialIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialIsNil = data
		case "newRoofingMaterialNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialNotNil = data
		case "newRoofingMaterialEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialEqualFold = data
		case "newRoofingMaterialContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialContainsFold = data
		case "lowslope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lowslope"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LowSlope = data
		case "lowslopeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lowslopeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LowSlopeNEQ = data
		case "currentMaterialLowSlope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlope"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlope = data
		case "currentMaterialLowSlopeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeNEQ = data
		case "currentMaterialLowSlopeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeIn = data
		case "currentMaterialLowSlopeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeNotIn = data
		case "currentMaterialLowSlopeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeGT = data
		case "currentMaterialLowSlopeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeGTE = data
		case "currentMaterialLowSlopeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeLT = data
		case "currentMaterialLowSlopeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeLTE = data
		case "currentMaterialLowSlopeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeContains = data
		case "currentMaterialLowSlopeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeHasPrefix = data
		case "currentMaterialLowSlopeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeHasSuffix = data
		case "currentMaterialLowSlopeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeIsNil = data
		case "currentMaterialLowSlopeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeNotNil = data
		case "currentMaterialLowSlopeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeEqualFold = data
		case "currentMaterialLowSlopeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentMaterialLowSlopeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentMaterialLowSlopeContainsFold = data
		case "newRoofingMaterialLowSlope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlope"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlope = data
		case "newRoofingMaterialLowSlopeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeNEQ = data
		case "newRoofingMaterialLowSlopeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeIn = data
		case "newRoofingMaterialLowSlopeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeNotIn = data
		case "newRoofingMaterialLowSlopeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeGT = data
		case "newRoofingMaterialLowSlopeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeGTE = data
		case "newRoofingMaterialLowSlopeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeLT = data
		case "newRoofingMaterialLowSlopeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeLTE = data
		case "newRoofingMaterialLowSlopeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeContains = data
		case "newRoofingMaterialLowSlopeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeHasPrefix = data
		case "newRoofingMaterialLowSlopeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeHasSuffix = data
		case "newRoofingMaterialLowSlopeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeIsNil = data
		case "newRoofingMaterialLowSlopeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeNotNil = data
		case "newRoofingMaterialLowSlopeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeEqualFold = data
		case "newRoofingMaterialLowSlopeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRoofingMaterialLowSlopeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewRoofingMaterialLowSlopeContainsFold = data
		case "redeck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redeck"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Redeck = data
		case "redeckNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redeckNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RedeckNEQ = data
		case "layers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layers"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().Layers(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "layersLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layersLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().LayersLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "layer2Material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2Material"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2Material = data
		case "layer2MaterialNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialNEQ = data
		case "layer2MaterialIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialIn = data
		case "layer2MaterialNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialNotIn = data
		case "layer2MaterialGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialGT = data
		case "layer2MaterialGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialGTE = data
		case "layer2MaterialLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialLT = data
		case "layer2MaterialLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialLTE = data
		case "layer2MaterialContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialContains = data
		case "layer2MaterialHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialHasPrefix = data
		case "layer2MaterialHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialHasSuffix = data
		case "layer2MaterialIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialIsNil = data
		case "layer2MaterialNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialNotNil = data
		case "layer2MaterialEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialEqualFold = data
		case "layer2MaterialContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer2MaterialContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer2MaterialContainsFold = data
		case "layer3Material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3Material"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3Material = data
		case "layer3MaterialNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialNEQ = data
		case "layer3MaterialIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialIn = data
		case "layer3MaterialNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialNotIn = data
		case "layer3MaterialGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialGT = data
		case "layer3MaterialGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialGTE = data
		case "layer3MaterialLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialLT = data
		case "layer3MaterialLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialLTE = data
		case "layer3MaterialContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialContains = data
		case "layer3MaterialHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialHasPrefix = data
		case "layer3MaterialHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialHasSuffix = data
		case "layer3MaterialIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialIsNil = data
		case "layer3MaterialNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialNotNil = data
		case "layer3MaterialEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialEqualFold = data
		case "layer3MaterialContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer3MaterialContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Layer3MaterialContainsFold = data
		case "partialPercentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentage = data
		case "partialPercentageNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageNEQ = data
		case "partialPercentageIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageIn = data
		case "partialPercentageNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageNotIn = data
		case "partialPercentageGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageGT = data
		case "partialPercentageGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageGTE = data
		case "partialPercentageLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageLT = data
		case "partialPercentageLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageLTE = data
		case "partialPercentageIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageIsNil = data
		case "partialPercentageNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partialPercentageNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartialPercentageNotNil = data
		case "materialMappingNote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNote = data
		case "materialMappingNoteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteNEQ = data
		case "materialMappingNoteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteIn = data
		case "materialMappingNoteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteNotIn = data
		case "materialMappingNoteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteGT = data
		case "materialMappingNoteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteGTE = data
		case "materialMappingNoteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteLT = data
		case "materialMappingNoteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteLTE = data
		case "materialMappingNoteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteContains = data
		case "materialMappingNoteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteHasPrefix = data
		case "materialMappingNoteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteHasSuffix = data
		case "materialMappingNoteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteIsNil = data
		case "materialMappingNoteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteNotNil = data
		case "materialMappingNoteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteEqualFold = data
		case "materialMappingNoteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialMappingNoteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialMappingNoteContainsFold = data
		case "measureType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measureType"))
			data, err := ec.unmarshalOMeasure2ᚖroofixᚋpkgᚋenumᚐMeasure(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeasureType = data
		case "measureTypeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measureTypeNEQ"))
			data, err := ec.unmarshalOMeasure2ᚖroofixᚋpkgᚋenumᚐMeasure(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeasureTypeNEQ = data
		case "measureTypeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measureTypeIn"))
			data, err := ec.unmarshalOMeasure2ᚕroofixᚋpkgᚋenumᚐMeasureᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeasureTypeIn = data
		case "measureTypeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measureTypeNotIn"))
			data, err := ec.unmarshalOMeasure2ᚕroofixᚋpkgᚋenumᚐMeasureᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeasureTypeNotIn = data
		case "extraChargeType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeType"))
			data, err := ec.unmarshalOExtraCharge2ᚖroofixᚋserverᚋmodelᚐExtraCharge(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().ExtraChargeType(ctx, &it, data); err != nil {
				return it, err
			}
		case "extraChargeTypeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeTypeNEQ"))
			data, err := ec.unmarshalOExtraCharge2ᚖroofixᚋserverᚋmodelᚐExtraCharge(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().ExtraChargeTypeNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "extraChargeTypeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeTypeIn"))
			data, err := ec.unmarshalOExtraCharge2ᚕroofixᚋserverᚋmodelᚐExtraChargeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().ExtraChargeTypeIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "extraChargeTypeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeTypeNotIn"))
			data, err := ec.unmarshalOExtraCharge2ᚕroofixᚋserverᚋmodelᚐExtraChargeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().ExtraChargeTypeNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "extraChargeTypeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeTypeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeTypeIsNil = data
		case "extraChargeTypeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeTypeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeTypeNotNil = data
		case "extraCharges":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraCharges"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraCharges = data
		case "extraChargesNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesNEQ = data
		case "extraChargesIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesIn = data
		case "extraChargesNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesNotIn = data
		case "extraChargesGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesGT = data
		case "extraChargesGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesGTE = data
		case "extraChargesLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesLT = data
		case "extraChargesLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesLTE = data
		case "extraChargesIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesIsNil = data
		case "extraChargesNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargesNotNil = data
		case "extraChargeNote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNote = data
		case "extraChargeNoteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteNEQ = data
		case "extraChargeNoteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteIn = data
		case "extraChargeNoteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteNotIn = data
		case "extraChargeNoteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteGT = data
		case "extraChargeNoteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteGTE = data
		case "extraChargeNoteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteLT = data
		case "extraChargeNoteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteLTE = data
		case "extraChargeNoteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteContains = data
		case "extraChargeNoteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteHasPrefix = data
		case "extraChargeNoteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteHasSuffix = data
		case "extraChargeNoteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteIsNil = data
		case "extraChargeNoteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteNotNil = data
		case "extraChargeNoteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteEqualFold = data
		case "extraChargeNoteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraChargeNoteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExtraChargeNoteContainsFold = data
		case "estimator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimator"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Estimator = data
		case "estimatorNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorNEQ = data
		case "estimatorIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorIn = data
		case "estimatorNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorNotIn = data
		case "estimatorGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorGT = data
		case "estimatorGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorGTE = data
		case "estimatorLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorLT = data
		case "estimatorLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorLTE = data
		case "estimatorContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorContains = data
		case "estimatorHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorHasPrefix = data
		case "estimatorHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorHasSuffix = data
		case "estimatorIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorIsNil = data
		case "estimatorNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorNotNil = data
		case "estimatorEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorEqualFold = data
		case "estimatorContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorContainsFold = data
		case "estimatorOrderID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderID(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorOrderIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorOrderIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorOrderIDIsNil = data
		case "estimatorOrderIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorOrderIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorOrderIDNotNil = data
		case "estimatorReportID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportID(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EstimateWhereInput().EstimatorReportIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "estimatorReportIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorReportIDIsNil = data
		case "estimatorReportIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatorReportIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatorReportIDNotNil = data
		case "totalSquares":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquares"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquares = data
		case "totalSquaresNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresNEQ = data
		case "totalSquaresIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresIn = data
		case "totalSquaresNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresNotIn = data
		case "totalSquaresGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresGT = data
		case "totalSquaresGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresGTE = data
		case "totalSquaresLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresLT = data
		case "totalSquaresLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSquaresLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSquaresLTE = data
		case "primaryPitch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitch"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitch = data
		case "primaryPitchNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchNEQ = data
		case "primaryPitchIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchIn = data
		case "primaryPitchNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchNotIn = data
		case "primaryPitchGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchGT = data
		case "primaryPitchGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchGTE = data
		case "primaryPitchLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchLT = data
		case "primaryPitchLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryPitchLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrimaryPitchLTE = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "priceSummary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummary"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummary = data
		case "priceSummaryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryNEQ = data
		case "priceSummaryIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryIn = data
		case "priceSummaryNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryNotIn = data
		case "priceSummaryGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryGT = data
		case "priceSummaryGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryGTE = data
		case "priceSummaryLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryLT = data
		case "priceSummaryLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryLTE = data
		case "priceSummaryContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryContains = data
		case "priceSummaryHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryHasPrefix = data
		case "priceSummaryHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryHasSuffix = data
		case "priceSummaryIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryIsNil = data
		case "priceSummaryNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryNotNil = data
		case "priceSummaryEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryEqualFold = data
		case "priceSummaryContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceSummaryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceSummaryContainsFold = data
		case "override":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("override"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Override = data
		case "overrideNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideNEQ = data
		case "overrideIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideIsNil = data
		case "overrideNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideNotNil = data
		case "overrideTotalSquares":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquares"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquares = data
		case "overrideTotalSquaresNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresNEQ = data
		case "overrideTotalSquaresIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresIn = data
		case "overrideTotalSquaresNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresNotIn = data
		case "overrideTotalSquaresGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresGT = data
		case "overrideTotalSquaresGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresGTE = data
		case "overrideTotalSquaresLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresLT = data
		case "overrideTotalSquaresLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overrideTotalSquaresLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverrideTotalSquaresLTE = data
		case "overridePrimaryPitch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitch"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitch = data
		case "overridePrimaryPitchNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchNEQ = data
		case "overridePrimaryPitchIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchIn = data
		case "overridePrimaryPitchNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchNotIn = data
		case "overridePrimaryPitchGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchGT = data
		case "overridePrimaryPitchGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchGTE = data
		case "overridePrimaryPitchLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchLT = data
		case "overridePrimaryPitchLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrimaryPitchLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrimaryPitchLTE = data
		case "overridePrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePrice = data
		case "overridePriceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceNEQ = data
		case "overridePriceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceIn = data
		case "overridePriceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceNotIn = data
		case "overridePriceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceGT = data
		case "overridePriceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceGTE = data
		case "overridePriceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceLT = data
		case "overridePriceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceLTE = data
		case "overridePriceSummary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummary"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummary = data
		case "overridePriceSummaryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryNEQ = data
		case "overridePriceSummaryIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryIn = data
		case "overridePriceSummaryNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryNotIn = data
		case "overridePriceSummaryGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryGT = data
		case "overridePriceSummaryGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryGTE = data
		case "overridePriceSummaryLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryLT = data
		case "overridePriceSummaryLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryLTE = data
		case "overridePriceSummaryContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryContains = data
		case "overridePriceSummaryHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryHasPrefix = data
		case "overridePriceSummaryHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryHasSuffix = data
		case "overridePriceSummaryIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryIsNil = data
		case "overridePriceSummaryNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryNotNil = data
		case "overridePriceSummaryEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryEqualFold = data
		case "overridePriceSummaryContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overridePriceSummaryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverridePriceSummaryContainsFold = data
		case "companyRefID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefID = data
		case "companyRefIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDNEQ = data
		case "companyRefIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDIn = data
		case "companyRefIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDNotIn = data
		case "companyRefIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDGT = data
		case "companyRefIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDGTE = data
		case "companyRefIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDLT = data
		case "companyRefIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDLTE = data
		case "companyRefIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDContains = data
		case "companyRefIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDHasPrefix = data
		case "companyRefIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDHasSuffix = data
		case "companyRefIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDIsNil = data
		case "companyRefIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDNotNil = data
		case "companyRefIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDEqualFold = data
		case "companyRefIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDContainsFold = data
		case "companyRefName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefName = data
		case "companyRefNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameNEQ = data
		case "companyRefNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameIn = data
		case "companyRefNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameNotIn = data
		case "companyRefNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameGT = data
		case "companyRefNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameGTE = data
		case "companyRefNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameLT = data
		case "companyRefNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameLTE = data
		case "companyRefNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameContains = data
		case "companyRefNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameHasPrefix = data
		case "companyRefNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameHasSuffix = data
		case "companyRefNameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameIsNil = data
		case "companyRefNameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameNotNil = data
		case "companyRefNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameEqualFold = data
		case "companyRefNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefNameContainsFold = data
		case "failureReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReason"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReason = data
		case "failureReasonNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonNEQ = data
		case "failureReasonIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonIn = data
		case "failureReasonNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonNotIn = data
		case "failureReasonGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonGT = data
		case "failureReasonGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonGTE = data
		case "failureReasonLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonLT = data
		case "failureReasonLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonLTE = data
		case "failureReasonContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonContains = data
		case "failureReasonHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonHasPrefix = data
		case "failureReasonHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonHasSuffix = data
		case "failureReasonIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonIsNil = data
		case "failureReasonNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonNotNil = data
		case "failureReasonEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonEqualFold = data
		case "failureReasonContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failureReasonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FailureReasonContainsFold = data
		case "hasActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivities = data
		case "hasActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivitiesWith"))
			data, err := ec.unmarshalOEstimateActivityWhereInput2ᚕᚖroofixᚋentᚐEstimateActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivitiesWith = data
		case "hasJobInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobInfo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobInfo = data
		case "hasJobInfoWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobInfoWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobInfoWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		case "hasHomeOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHomeOwner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasHomeOwner = data
		case "hasHomeOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHomeOwnerWith"))
			data, err := ec.unmarshalOHomeOwnerWhereInput2ᚕᚖroofixᚋentᚐHomeOwnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasHomeOwnerWith = data
		case "hasSalesRep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRep"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRep = data
		case "hasSalesRepWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRepWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRepWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		case "hasPdf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPdf"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPdf = data
		case "hasPdfWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPdfWith"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPdfWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHomeOwnerWhereInput(ctx context.Context, obj interface{}) (ent.HomeOwnerWhereInput, error) {
	var it ent.HomeOwnerWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "firstName", "firstNameNEQ", "firstNameIn", "firstNameNotIn", "firstNameGT", "firstNameGTE", "firstNameLT", "firstNameLTE", "firstNameContains", "firstNameHasPrefix", "firstNameHasSuffix", "firstNameEqualFold", "firstNameContainsFold", "lastName", "lastNameNEQ", "lastNameIn", "lastNameNotIn", "lastNameGT", "lastNameGTE", "lastNameLT", "lastNameLTE", "lastNameContains", "lastNameHasPrefix", "lastNameHasSuffix", "lastNameEqualFold", "lastNameContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "streetNumber", "streetNumberNEQ", "streetNumberIn", "streetNumberNotIn", "streetNumberGT", "streetNumberGTE", "streetNumberLT", "streetNumberLTE", "streetNumberContains", "streetNumberHasPrefix", "streetNumberHasSuffix", "streetNumberEqualFold", "streetNumberContainsFold", "streetName", "streetNameNEQ", "streetNameIn", "streetNameNotIn", "streetNameGT", "streetNameGTE", "streetNameLT", "streetNameLTE", "streetNameContains", "streetNameHasPrefix", "streetNameHasSuffix", "streetNameEqualFold", "streetNameContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "state", "stateNEQ", "stateIn", "stateNotIn", "stateGT", "stateGTE", "stateLT", "stateLTE", "stateContains", "stateHasPrefix", "stateHasSuffix", "stateEqualFold", "stateContainsFold", "stateAbbr", "stateAbbrNEQ", "stateAbbrIn", "stateAbbrNotIn", "stateAbbrGT", "stateAbbrGTE", "stateAbbrLT", "stateAbbrLTE", "stateAbbrContains", "stateAbbrHasPrefix", "stateAbbrHasSuffix", "stateAbbrIsNil", "stateAbbrNotNil", "stateAbbrEqualFold", "stateAbbrContainsFold", "zip", "zipNEQ", "zipIn", "zipNotIn", "zipGT", "zipGTE", "zipLT", "zipLTE", "zipContains", "zipHasPrefix", "zipHasSuffix", "zipEqualFold", "zipContainsFold", "formattedAddress", "formattedAddressNEQ", "formattedAddressIn", "formattedAddressNotIn", "formattedAddressGT", "formattedAddressGTE", "formattedAddressLT", "formattedAddressLTE", "formattedAddressContains", "formattedAddressHasPrefix", "formattedAddressHasSuffix", "formattedAddressIsNil", "formattedAddressNotNil", "formattedAddressEqualFold", "formattedAddressContainsFold", "latitude", "latitudeNEQ", "latitudeIn", "latitudeNotIn", "latitudeGT", "latitudeGTE", "latitudeLT", "latitudeLTE", "latitudeIsNil", "latitudeNotNil", "longitude", "longitudeNEQ", "longitudeIn", "longitudeNotIn", "longitudeGT", "longitudeGTE", "longitudeLT", "longitudeLTE", "longitudeIsNil", "longitudeNotNil", "hash", "hashNEQ", "hashIn", "hashNotIn", "hashGT", "hashGTE", "hashLT", "hashLTE", "hashContains", "hashHasPrefix", "hashHasSuffix", "hashIsNil", "hashNotNil", "hashEqualFold", "hashContainsFold", "hasEstimates", "hasEstimatesWith", "hasJobs", "hasJobsWith", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOHomeOwnerWhereInput2ᚖroofixᚋentᚐHomeOwnerWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOHomeOwnerWhereInput2ᚕᚖroofixᚋentᚐHomeOwnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOHomeOwnerWhereInput2ᚕᚖroofixᚋentᚐHomeOwnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "firstNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameNEQ = data
		case "firstNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameIn = data
		case "firstNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameNotIn = data
		case "firstNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameGT = data
		case "firstNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameGTE = data
		case "firstNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameLT = data
		case "firstNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameLTE = data
		case "firstNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameContains = data
		case "firstNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameHasPrefix = data
		case "firstNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameHasSuffix = data
		case "firstNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameEqualFold = data
		case "firstNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameContainsFold = data
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "lastNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameNEQ = data
		case "lastNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameIn = data
		case "lastNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameNotIn = data
		case "lastNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameGT = data
		case "lastNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameGTE = data
		case "lastNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameLT = data
		case "lastNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameLTE = data
		case "lastNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameContains = data
		case "lastNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameHasPrefix = data
		case "lastNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameHasSuffix = data
		case "lastNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameEqualFold = data
		case "lastNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameContainsFold = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "streetNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumber = data
		case "streetNumberNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberNEQ = data
		case "streetNumberIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberIn = data
		case "streetNumberNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberNotIn = data
		case "streetNumberGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberGT = data
		case "streetNumberGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberGTE = data
		case "streetNumberLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberLT = data
		case "streetNumberLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberLTE = data
		case "streetNumberContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberContains = data
		case "streetNumberHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberHasPrefix = data
		case "streetNumberHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberHasSuffix = data
		case "streetNumberEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberEqualFold = data
		case "streetNumberContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNumberContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNumberContainsFold = data
		case "streetName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetName = data
		case "streetNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameNEQ = data
		case "streetNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameIn = data
		case "streetNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameNotIn = data
		case "streetNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameGT = data
		case "streetNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameGTE = data
		case "streetNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameLT = data
		case "streetNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameLTE = data
		case "streetNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameContains = data
		case "streetNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameHasPrefix = data
		case "streetNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameHasSuffix = data
		case "streetNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameEqualFold = data
		case "streetNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNameContainsFold = data
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "stateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateNEQ = data
		case "stateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateIn = data
		case "stateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateNotIn = data
		case "stateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateGT = data
		case "stateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateGTE = data
		case "stateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateLT = data
		case "stateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateLTE = data
		case "stateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateContains = data
		case "stateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateHasPrefix = data
		case "stateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateHasSuffix = data
		case "stateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateEqualFold = data
		case "stateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateContainsFold = data
		case "stateAbbr":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbr"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbr = data
		case "stateAbbrNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrNEQ = data
		case "stateAbbrIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrIn = data
		case "stateAbbrNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrNotIn = data
		case "stateAbbrGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrGT = data
		case "stateAbbrGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrGTE = data
		case "stateAbbrLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrLT = data
		case "stateAbbrLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrLTE = data
		case "stateAbbrContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrContains = data
		case "stateAbbrHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrHasPrefix = data
		case "stateAbbrHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrHasSuffix = data
		case "stateAbbrIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrIsNil = data
		case "stateAbbrNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrNotNil = data
		case "stateAbbrEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrEqualFold = data
		case "stateAbbrContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbbrContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbbrContainsFold = data
		case "zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		case "zipNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipNEQ = data
		case "zipIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipIn = data
		case "zipNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipNotIn = data
		case "zipGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipGT = data
		case "zipGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipGTE = data
		case "zipLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipLT = data
		case "zipLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipLTE = data
		case "zipContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipContains = data
		case "zipHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipHasPrefix = data
		case "zipHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipHasSuffix = data
		case "zipEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipEqualFold = data
		case "zipContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zipContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ZipContainsFold = data
		case "formattedAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddress = data
		case "formattedAddressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressNEQ = data
		case "formattedAddressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressIn = data
		case "formattedAddressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressNotIn = data
		case "formattedAddressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressGT = data
		case "formattedAddressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressGTE = data
		case "formattedAddressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressLT = data
		case "formattedAddressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressLTE = data
		case "formattedAddressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressContains = data
		case "formattedAddressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressHasPrefix = data
		case "formattedAddressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressHasSuffix = data
		case "formattedAddressIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressIsNil = data
		case "formattedAddressNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressNotNil = data
		case "formattedAddressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressEqualFold = data
		case "formattedAddressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formattedAddressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FormattedAddressContainsFold = data
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "latitudeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNEQ = data
		case "latitudeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeIn = data
		case "latitudeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNotIn = data
		case "latitudeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeGT = data
		case "latitudeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeGTE = data
		case "latitudeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeLT = data
		case "latitudeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeLTE = data
		case "latitudeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeIsNil = data
		case "latitudeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNotNil = data
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		case "longitudeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNEQ = data
		case "longitudeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeIn = data
		case "longitudeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNotIn = data
		case "longitudeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeGT = data
		case "longitudeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeGTE = data
		case "longitudeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeLT = data
		case "longitudeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeLTE = data
		case "longitudeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeIsNil = data
		case "longitudeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNotNil = data
		case "hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hash = data
		case "hashNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashNEQ = data
		case "hashIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashIn = data
		case "hashNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashNotIn = data
		case "hashGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashGT = data
		case "hashGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashGTE = data
		case "hashLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashLT = data
		case "hashLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashLTE = data
		case "hashContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashContains = data
		case "hashHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashHasPrefix = data
		case "hashHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashHasSuffix = data
		case "hashIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashIsNil = data
		case "hashNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashNotNil = data
		case "hashEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashEqualFold = data
		case "hashContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HashContainsFold = data
		case "hasEstimates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimates = data
		case "hasEstimatesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimatesWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimatesWith = data
		case "hasJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobs = data
		case "hasJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobsWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInstallationJobItemWhereInput(ctx context.Context, obj interface{}) (ent.InstallationJobItemWhereInput, error) {
	var it ent.InstallationJobItemWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "imgKey", "imgKeyNEQ", "imgKeyIn", "imgKeyNotIn", "imgKeyGT", "imgKeyGTE", "imgKeyLT", "imgKeyLTE", "imgKeyContains", "imgKeyHasPrefix", "imgKeyHasSuffix", "imgKeyEqualFold", "imgKeyContainsFold", "specialNote", "specialNoteNEQ", "specialNoteIn", "specialNoteNotIn", "specialNoteGT", "specialNoteGTE", "specialNoteLT", "specialNoteLTE", "specialNoteContains", "specialNoteHasPrefix", "specialNoteHasSuffix", "specialNoteIsNil", "specialNoteNotNil", "specialNoteEqualFold", "specialNoteContainsFold", "hasJob", "hasJobWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOInstallationJobItemWhereInput2ᚖroofixᚋentᚐInstallationJobItemWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOInstallationJobItemWhereInput2ᚕᚖroofixᚋentᚐInstallationJobItemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOInstallationJobItemWhereInput2ᚕᚖroofixᚋentᚐInstallationJobItemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "imgKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKey = data
		case "imgKeyNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyNEQ = data
		case "imgKeyIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyIn = data
		case "imgKeyNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyNotIn = data
		case "imgKeyGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyGT = data
		case "imgKeyGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyGTE = data
		case "imgKeyLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyLT = data
		case "imgKeyLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyLTE = data
		case "imgKeyContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyContains = data
		case "imgKeyHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyHasPrefix = data
		case "imgKeyHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyHasSuffix = data
		case "imgKeyEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyEqualFold = data
		case "imgKeyContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imgKeyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImgKeyContainsFold = data
		case "specialNote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNote = data
		case "specialNoteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNEQ = data
		case "specialNoteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteIn = data
		case "specialNoteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNotIn = data
		case "specialNoteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteGT = data
		case "specialNoteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteGTE = data
		case "specialNoteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteLT = data
		case "specialNoteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteLTE = data
		case "specialNoteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteContains = data
		case "specialNoteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteHasPrefix = data
		case "specialNoteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteHasSuffix = data
		case "specialNoteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteIsNil = data
		case "specialNoteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNotNil = data
		case "specialNoteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteEqualFold = data
		case "specialNoteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInstallationJobProgressWhereInput(ctx context.Context, obj interface{}) (ent.InstallationJobProgressWhereInput, error) {
	var it ent.InstallationJobProgressWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "complete", "completeNEQ", "completeIsNil", "completeNotNil", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "hasJob", "hasJobWith", "hasCreator", "hasCreatorWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOInstallationJobProgressWhereInput2ᚖroofixᚋentᚐInstallationJobProgressWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOInstallationJobProgressWhereInput2ᚕᚖroofixᚋentᚐInstallationJobProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOInstallationJobProgressWhereInput2ᚕᚖroofixᚋentᚐInstallationJobProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInstallationStatus2ᚖroofixᚋpkgᚋenumᚐInstallationStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOInstallationStatus2ᚖroofixᚋpkgᚋenumᚐInstallationStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOInstallationStatus2ᚕroofixᚋpkgᚋenumᚐInstallationStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOInstallationStatus2ᚕroofixᚋpkgᚋenumᚐInstallationStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complete"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Complete = data
		case "completeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteNEQ = data
		case "completeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteIsNil = data
		case "completeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteNotNil = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInstallationJobWhereInput(ctx context.Context, obj interface{}) (ent.InstallationJobWhereInput, error) {
	var it ent.InstallationJobWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "ownerName", "ownerNameNEQ", "ownerNameIn", "ownerNameNotIn", "ownerNameGT", "ownerNameGTE", "ownerNameLT", "ownerNameLTE", "ownerNameContains", "ownerNameHasPrefix", "ownerNameHasSuffix", "ownerNameEqualFold", "ownerNameContainsFold", "ownerPhone", "ownerPhoneNEQ", "ownerPhoneIn", "ownerPhoneNotIn", "ownerPhoneGT", "ownerPhoneGTE", "ownerPhoneLT", "ownerPhoneLTE", "ownerPhoneContains", "ownerPhoneHasPrefix", "ownerPhoneHasSuffix", "ownerPhoneEqualFold", "ownerPhoneContainsFold", "ownerEmail", "ownerEmailNEQ", "ownerEmailIn", "ownerEmailNotIn", "ownerEmailGT", "ownerEmailGTE", "ownerEmailLT", "ownerEmailLTE", "ownerEmailContains", "ownerEmailHasPrefix", "ownerEmailHasSuffix", "ownerEmailIsNil", "ownerEmailNotNil", "ownerEmailEqualFold", "ownerEmailContainsFold", "ownerAddress", "ownerAddressNEQ", "ownerAddressIn", "ownerAddressNotIn", "ownerAddressGT", "ownerAddressGTE", "ownerAddressLT", "ownerAddressLTE", "ownerAddressContains", "ownerAddressHasPrefix", "ownerAddressHasSuffix", "ownerAddressEqualFold", "ownerAddressContainsFold", "ownerAddressLat", "ownerAddressLatNEQ", "ownerAddressLatIn", "ownerAddressLatNotIn", "ownerAddressLatGT", "ownerAddressLatGTE", "ownerAddressLatLT", "ownerAddressLatLTE", "ownerAddressLatIsNil", "ownerAddressLatNotNil", "ownerAddressLng", "ownerAddressLngNEQ", "ownerAddressLngIn", "ownerAddressLngNotIn", "ownerAddressLngGT", "ownerAddressLngGTE", "ownerAddressLngLT", "ownerAddressLngLTE", "ownerAddressLngIsNil", "ownerAddressLngNotNil", "specialNote", "specialNoteNEQ", "specialNoteIn", "specialNoteNotIn", "specialNoteGT", "specialNoteGTE", "specialNoteLT", "specialNoteLTE", "specialNoteContains", "specialNoteHasPrefix", "specialNoteHasSuffix", "specialNoteIsNil", "specialNoteNotNil", "specialNoteEqualFold", "specialNoteContainsFold", "pkg", "pkgNEQ", "pkgIn", "pkgNotIn", "pkgGT", "pkgGTE", "pkgLT", "pkgLTE", "pkgContains", "pkgHasPrefix", "pkgHasSuffix", "pkgEqualFold", "pkgContainsFold", "pkgDescription", "pkgDescriptionNEQ", "pkgDescriptionIn", "pkgDescriptionNotIn", "pkgDescriptionGT", "pkgDescriptionGTE", "pkgDescriptionLT", "pkgDescriptionLTE", "pkgDescriptionContains", "pkgDescriptionHasPrefix", "pkgDescriptionHasSuffix", "pkgDescriptionIsNil", "pkgDescriptionNotNil", "pkgDescriptionEqualFold", "pkgDescriptionContainsFold", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "approval", "approvalNEQ", "approvalIn", "approvalNotIn", "approvalAt", "approvalAtNEQ", "approvalAtIn", "approvalAtNotIn", "approvalAtGT", "approvalAtGTE", "approvalAtLT", "approvalAtLTE", "denyReason", "denyReasonNEQ", "denyReasonIn", "denyReasonNotIn", "denyReasonGT", "denyReasonGTE", "denyReasonLT", "denyReasonLTE", "denyReasonContains", "denyReasonHasPrefix", "denyReasonHasSuffix", "denyReasonIsNil", "denyReasonNotNil", "denyReasonEqualFold", "denyReasonContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "statusAt", "statusAtNEQ", "statusAtIn", "statusAtNotIn", "statusAtGT", "statusAtGTE", "statusAtLT", "statusAtLTE", "hasItems", "hasItemsWith", "hasProgressHistory", "hasProgressHistoryWith", "hasRequestingPartner", "hasRequestingPartnerWith", "hasAssignedPartner", "hasAssignedPartnerWith", "hasCreator", "hasCreatorWith", "hasSalesRep", "hasSalesRepWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚖroofixᚋentᚐInstallationJobWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOInstallationType2ᚖroofixᚋpkgᚋenumᚐInstallationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOInstallationType2ᚖroofixᚋpkgᚋenumᚐInstallationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOInstallationType2ᚕroofixᚋpkgᚋenumᚐInstallationTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOInstallationType2ᚕroofixᚋpkgᚋenumᚐInstallationTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "ownerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerName = data
		case "ownerNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameNEQ = data
		case "ownerNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameIn = data
		case "ownerNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameNotIn = data
		case "ownerNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameGT = data
		case "ownerNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameGTE = data
		case "ownerNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameLT = data
		case "ownerNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameLTE = data
		case "ownerNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameContains = data
		case "ownerNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameHasPrefix = data
		case "ownerNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameHasSuffix = data
		case "ownerNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameEqualFold = data
		case "ownerNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNameContainsFold = data
		case "ownerPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhone = data
		case "ownerPhoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneNEQ = data
		case "ownerPhoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneIn = data
		case "ownerPhoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneNotIn = data
		case "ownerPhoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneGT = data
		case "ownerPhoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneGTE = data
		case "ownerPhoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneLT = data
		case "ownerPhoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneLTE = data
		case "ownerPhoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneContains = data
		case "ownerPhoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneHasPrefix = data
		case "ownerPhoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneHasSuffix = data
		case "ownerPhoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneEqualFold = data
		case "ownerPhoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerPhoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerPhoneContainsFold = data
		case "ownerEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmail = data
		case "ownerEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailNEQ = data
		case "ownerEmailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailIn = data
		case "ownerEmailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailNotIn = data
		case "ownerEmailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailGT = data
		case "ownerEmailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailGTE = data
		case "ownerEmailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailLT = data
		case "ownerEmailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailLTE = data
		case "ownerEmailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailContains = data
		case "ownerEmailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailHasPrefix = data
		case "ownerEmailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailHasSuffix = data
		case "ownerEmailIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailIsNil = data
		case "ownerEmailNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailNotNil = data
		case "ownerEmailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailEqualFold = data
		case "ownerEmailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEmailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEmailContainsFold = data
		case "ownerAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddress = data
		case "ownerAddressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressNEQ = data
		case "ownerAddressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressIn = data
		case "ownerAddressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressNotIn = data
		case "ownerAddressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressGT = data
		case "ownerAddressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressGTE = data
		case "ownerAddressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLT = data
		case "ownerAddressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLTE = data
		case "ownerAddressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressContains = data
		case "ownerAddressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressHasPrefix = data
		case "ownerAddressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressHasSuffix = data
		case "ownerAddressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressEqualFold = data
		case "ownerAddressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressContainsFold = data
		case "ownerAddressLat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLat"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLat = data
		case "ownerAddressLatNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatNEQ = data
		case "ownerAddressLatIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatIn = data
		case "ownerAddressLatNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatNotIn = data
		case "ownerAddressLatGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatGT = data
		case "ownerAddressLatGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatGTE = data
		case "ownerAddressLatLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatLT = data
		case "ownerAddressLatLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatLTE = data
		case "ownerAddressLatIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatIsNil = data
		case "ownerAddressLatNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLatNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLatNotNil = data
		case "ownerAddressLng":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLng"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLng = data
		case "ownerAddressLngNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngNEQ = data
		case "ownerAddressLngIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngIn = data
		case "ownerAddressLngNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngNotIn = data
		case "ownerAddressLngGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngGT = data
		case "ownerAddressLngGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngGTE = data
		case "ownerAddressLngLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngLT = data
		case "ownerAddressLngLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngLTE = data
		case "ownerAddressLngIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngIsNil = data
		case "ownerAddressLngNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAddressLngNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerAddressLngNotNil = data
		case "specialNote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNote = data
		case "specialNoteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNEQ = data
		case "specialNoteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteIn = data
		case "specialNoteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNotIn = data
		case "specialNoteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteGT = data
		case "specialNoteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteGTE = data
		case "specialNoteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteLT = data
		case "specialNoteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteLTE = data
		case "specialNoteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteContains = data
		case "specialNoteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteHasPrefix = data
		case "specialNoteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteHasSuffix = data
		case "specialNoteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteIsNil = data
		case "specialNoteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNotNil = data
		case "specialNoteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteEqualFold = data
		case "specialNoteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteContainsFold = data
		case "pkg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkg"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pkg = data
		case "pkgNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgNEQ = data
		case "pkgIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgIn = data
		case "pkgNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgNotIn = data
		case "pkgGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgGT = data
		case "pkgGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgGTE = data
		case "pkgLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgLT = data
		case "pkgLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgLTE = data
		case "pkgContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgContains = data
		case "pkgHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgHasPrefix = data
		case "pkgHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgHasSuffix = data
		case "pkgEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgEqualFold = data
		case "pkgContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgContainsFold = data
		case "pkgDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescription = data
		case "pkgDescriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionNEQ = data
		case "pkgDescriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionIn = data
		case "pkgDescriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionNotIn = data
		case "pkgDescriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionGT = data
		case "pkgDescriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionGTE = data
		case "pkgDescriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionLT = data
		case "pkgDescriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionLTE = data
		case "pkgDescriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionContains = data
		case "pkgDescriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionHasPrefix = data
		case "pkgDescriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionHasSuffix = data
		case "pkgDescriptionIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionIsNil = data
		case "pkgDescriptionNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionNotNil = data
		case "pkgDescriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionEqualFold = data
		case "pkgDescriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgDescriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PkgDescriptionContainsFold = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "approval":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approval"))
			data, err := ec.unmarshalOApproval2ᚖroofixᚋpkgᚋenumᚐApproval(ctx, v)
			if err != nil {
				return it, err
			}
			it.Approval = data
		case "approvalNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalNEQ"))
			data, err := ec.unmarshalOApproval2ᚖroofixᚋpkgᚋenumᚐApproval(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalNEQ = data
		case "approvalIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalIn"))
			data, err := ec.unmarshalOApproval2ᚕroofixᚋpkgᚋenumᚐApprovalᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalIn = data
		case "approvalNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalNotIn"))
			data, err := ec.unmarshalOApproval2ᚕroofixᚋpkgᚋenumᚐApprovalᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalNotIn = data
		case "approvalAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAt = data
		case "approvalAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtNEQ = data
		case "approvalAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtIn = data
		case "approvalAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtNotIn = data
		case "approvalAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtGT = data
		case "approvalAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtGTE = data
		case "approvalAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtLT = data
		case "approvalAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalAtLTE = data
		case "denyReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReason"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReason = data
		case "denyReasonNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonNEQ = data
		case "denyReasonIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonIn = data
		case "denyReasonNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonNotIn = data
		case "denyReasonGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonGT = data
		case "denyReasonGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonGTE = data
		case "denyReasonLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonLT = data
		case "denyReasonLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonLTE = data
		case "denyReasonContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonContains = data
		case "denyReasonHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonHasPrefix = data
		case "denyReasonHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonHasSuffix = data
		case "denyReasonIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonIsNil = data
		case "denyReasonNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonNotNil = data
		case "denyReasonEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonEqualFold = data
		case "denyReasonContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReasonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReasonContainsFold = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInstallationStatus2ᚖroofixᚋpkgᚋenumᚐInstallationStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOInstallationStatus2ᚖroofixᚋpkgᚋenumᚐInstallationStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOInstallationStatus2ᚕroofixᚋpkgᚋenumᚐInstallationStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOInstallationStatus2ᚕroofixᚋpkgᚋenumᚐInstallationStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "statusAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAt = data
		case "statusAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtNEQ = data
		case "statusAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtIn = data
		case "statusAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtNotIn = data
		case "statusAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtGT = data
		case "statusAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtGTE = data
		case "statusAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtLT = data
		case "statusAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusAtLTE = data
		case "hasItems":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasItems"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasItems = data
		case "hasItemsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasItemsWith"))
			data, err := ec.unmarshalOInstallationJobItemWhereInput2ᚕᚖroofixᚋentᚐInstallationJobItemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasItemsWith = data
		case "hasProgressHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProgressHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProgressHistory = data
		case "hasProgressHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProgressHistoryWith"))
			data, err := ec.unmarshalOInstallationJobProgressWhereInput2ᚕᚖroofixᚋentᚐInstallationJobProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProgressHistoryWith = data
		case "hasRequestingPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequestingPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequestingPartner = data
		case "hasRequestingPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequestingPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequestingPartnerWith = data
		case "hasAssignedPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedPartner = data
		case "hasAssignedPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedPartnerWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasSalesRep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRep"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRep = data
		case "hasSalesRepWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRepWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRepWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobActivityWhereInput(ctx context.Context, obj interface{}) (ent.JobActivityWhereInput, error) {
	var it ent.JobActivityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasJob", "hasJobWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOJobActivityWhereInput2ᚖroofixᚋentᚐJobActivityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOJobActivityWhereInput2ᚕᚖroofixᚋentᚐJobActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOJobActivityWhereInput2ᚕᚖroofixᚋentᚐJobActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobAssignmentHistoryWhereInput(ctx context.Context, obj interface{}) (ent.JobAssignmentHistoryWhereInput, error) {
	var it ent.JobAssignmentHistoryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "hasJob", "hasJobWith", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOJobAssignmentHistoryWhereInput2ᚖroofixᚋentᚐJobAssignmentHistoryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOJobAssignmentHistoryWhereInput2ᚕᚖroofixᚋentᚐJobAssignmentHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOJobAssignmentHistoryWhereInput2ᚕᚖroofixᚋentᚐJobAssignmentHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOJobAssignmentStatus2ᚖroofixᚋpkgᚋenumᚐJobAssignmentStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOJobAssignmentStatus2ᚖroofixᚋpkgᚋenumᚐJobAssignmentStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOJobAssignmentStatus2ᚕroofixᚋpkgᚋenumᚐJobAssignmentStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOJobAssignmentStatus2ᚕroofixᚋpkgᚋenumᚐJobAssignmentStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobDocURLWhereInput(ctx context.Context, obj interface{}) (ent.JobDocURLWhereInput, error) {
	var it ent.JobDocURLWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "url", "urlNEQ", "urlIn", "urlNotIn", "urlGT", "urlGTE", "urlLT", "urlLTE", "urlContains", "urlHasPrefix", "urlHasSuffix", "urlEqualFold", "urlContainsFold", "hasJob", "hasJobWith", "hasCreator", "hasCreatorWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOJobDocURLWhereInput2ᚖroofixᚋentᚐJobDocURLWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOJobDocURLWhereInput2ᚕᚖroofixᚋentᚐJobDocURLWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOJobDocURLWhereInput2ᚕᚖroofixᚋentᚐJobDocURLWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOJobDocUrlType2ᚖroofixᚋserverᚋmodelᚐJobDocURLType(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobDocURLWhereInput().Type(ctx, &it, data); err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOJobDocUrlType2ᚖroofixᚋserverᚋmodelᚐJobDocURLType(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobDocURLWhereInput().TypeNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOJobDocUrlType2ᚕroofixᚋserverᚋmodelᚐJobDocURLTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobDocURLWhereInput().TypeIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOJobDocUrlType2ᚕroofixᚋserverᚋmodelᚐJobDocURLTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobDocURLWhereInput().TypeNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "urlNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNEQ = data
		case "urlIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLIn = data
		case "urlNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNotIn = data
		case "urlGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGT = data
		case "urlGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGTE = data
		case "urlLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLT = data
		case "urlLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLTE = data
		case "urlContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContains = data
		case "urlHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasPrefix = data
		case "urlHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasSuffix = data
		case "urlEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLEqualFold = data
		case "urlContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobNoteWhereInput(ctx context.Context, obj interface{}) (ent.JobNoteWhereInput, error) {
	var it ent.JobNoteWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteEqualFold", "noteContainsFold", "hasJob", "hasJobWith", "hasUser", "hasUserWith", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOJobNoteWhereInput2ᚖroofixᚋentᚐJobNoteWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOJobNoteWhereInput2ᚕᚖroofixᚋentᚐJobNoteWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOJobNoteWhereInput2ᚕᚖroofixᚋentᚐJobNoteWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobProgressHistoryWhereInput(ctx context.Context, obj interface{}) (ent.JobProgressHistoryWhereInput, error) {
	var it ent.JobProgressHistoryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "complete", "completeNEQ", "completeIsNil", "completeNotNil", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "hasJob", "hasJobWith", "hasCreator", "hasCreatorWith", "hasCreatorAPIUser", "hasCreatorAPIUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOJobProgressHistoryWhereInput2ᚖroofixᚋentᚐJobProgressHistoryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOJobProgressHistoryWhereInput2ᚕᚖroofixᚋentᚐJobProgressHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOJobProgressHistoryWhereInput2ᚕᚖroofixᚋentᚐJobProgressHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOJobProgress2ᚖroofixᚋpkgᚋenumᚐJobProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOJobProgress2ᚖroofixᚋpkgᚋenumᚐJobProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOJobProgress2ᚕroofixᚋpkgᚋenumᚐJobProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOJobProgress2ᚕroofixᚋpkgᚋenumᚐJobProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complete"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Complete = data
		case "completeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteNEQ = data
		case "completeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteIsNil = data
		case "completeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteNotNil = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPIUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIUser = data
		case "hasCreatorAPIUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIUserWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobWhereInput(ctx context.Context, obj interface{}) (ent.JobWhereInput, error) {
	var it ent.JobWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "progress", "progressNEQ", "progressIn", "progressNotIn", "progressIsNil", "progressNotNil", "progressAt", "progressAtNEQ", "progressAtIn", "progressAtNotIn", "progressAtGT", "progressAtGTE", "progressAtLT", "progressAtLTE", "progressAtIsNil", "progressAtNotNil", "progressFlagAt", "progressFlagAtNEQ", "progressFlagAtIn", "progressFlagAtNotIn", "progressFlagAtGT", "progressFlagAtGTE", "progressFlagAtLT", "progressFlagAtLTE", "progressFlagAtIsNil", "progressFlagAtNotNil", "regionID", "regionIDNEQ", "regionIDIn", "regionIDNotIn", "regionIDGT", "regionIDGTE", "regionIDLT", "regionIDLTE", "regionIDIsNil", "regionIDNotNil", "companyRefID", "companyRefIDNEQ", "companyRefIDIn", "companyRefIDNotIn", "companyRefIDGT", "companyRefIDGTE", "companyRefIDLT", "companyRefIDLTE", "companyRefIDContains", "companyRefIDHasPrefix", "companyRefIDHasSuffix", "companyRefIDIsNil", "companyRefIDNotNil", "companyRefIDEqualFold", "companyRefIDContainsFold", "companyName", "companyNameNEQ", "companyNameIn", "companyNameNotIn", "companyNameGT", "companyNameGTE", "companyNameLT", "companyNameLTE", "companyNameContains", "companyNameHasPrefix", "companyNameHasSuffix", "companyNameIsNil", "companyNameNotNil", "companyNameEqualFold", "companyNameContainsFold", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "workOrderPrice", "workOrderPriceNEQ", "workOrderPriceIn", "workOrderPriceNotIn", "workOrderPriceGT", "workOrderPriceGTE", "workOrderPriceLT", "workOrderPriceLTE", "contractPrice", "contractPriceNEQ", "contractPriceIn", "contractPriceNotIn", "contractPriceGT", "contractPriceGTE", "contractPriceLT", "contractPriceLTE", "contractPriceIsNil", "contractPriceNotNil", "changeOrderPrice", "changeOrderPriceNEQ", "changeOrderPriceIn", "changeOrderPriceNotIn", "changeOrderPriceGT", "changeOrderPriceGTE", "changeOrderPriceLT", "changeOrderPriceLTE", "changeOrderPriceIsNil", "changeOrderPriceNotNil", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "shingleColor", "shingleColorNEQ", "shingleColorIn", "shingleColorNotIn", "shingleColorGT", "shingleColorGTE", "shingleColorLT", "shingleColorLTE", "shingleColorContains", "shingleColorHasPrefix", "shingleColorHasSuffix", "shingleColorIsNil", "shingleColorNotNil", "shingleColorEqualFold", "shingleColorContainsFold", "permitRequired", "permitRequiredNEQ", "permitRequiredIsNil", "permitRequiredNotNil", "inspectionRequired", "inspectionRequiredNEQ", "inspectionRequiredIsNil", "inspectionRequiredNotNil", "inspectionDate", "inspectionDateNEQ", "inspectionDateIn", "inspectionDateNotIn", "inspectionDateGT", "inspectionDateGTE", "inspectionDateLT", "inspectionDateLTE", "inspectionDateIsNil", "inspectionDateNotNil", "progressInspectionDate", "progressInspectionDateNEQ", "progressInspectionDateIn", "progressInspectionDateNotIn", "progressInspectionDateGT", "progressInspectionDateGTE", "progressInspectionDateLT", "progressInspectionDateLTE", "progressInspectionDateIsNil", "progressInspectionDateNotNil", "installDate", "installDateNEQ", "installDateIn", "installDateNotIn", "installDateGT", "installDateGTE", "installDateLT", "installDateLTE", "installDateIsNil", "installDateNotNil", "completionDate", "completionDateNEQ", "completionDateIn", "completionDateNotIn", "completionDateGT", "completionDateGTE", "completionDateLT", "completionDateLTE", "completionDateIsNil", "completionDateNotNil", "materialDeliveryDate", "materialDeliveryDateNEQ", "materialDeliveryDateIn", "materialDeliveryDateNotIn", "materialDeliveryDateGT", "materialDeliveryDateGTE", "materialDeliveryDateLT", "materialDeliveryDateLTE", "materialDeliveryDateIsNil", "materialDeliveryDateNotNil", "agree", "agreeNEQ", "agreeIsNil", "agreeNotNil", "agreeAt", "agreeAtNEQ", "agreeAtIn", "agreeAtNotIn", "agreeAtGT", "agreeAtGTE", "agreeAtLT", "agreeAtLTE", "agreeAtIsNil", "agreeAtNotNil", "poNumber", "poNumberNEQ", "poNumberIn", "poNumberNotIn", "poNumberGT", "poNumberGTE", "poNumberLT", "poNumberLTE", "poNumberContains", "poNumberHasPrefix", "poNumberHasSuffix", "poNumberIsNil", "poNumberNotNil", "poNumberEqualFold", "poNumberContainsFold", "roofingPartnerAssignedAt", "roofingPartnerAssignedAtNEQ", "roofingPartnerAssignedAtIn", "roofingPartnerAssignedAtNotIn", "roofingPartnerAssignedAtGT", "roofingPartnerAssignedAtGTE", "roofingPartnerAssignedAtLT", "roofingPartnerAssignedAtLTE", "roofingPartnerAssignedAtIsNil", "roofingPartnerAssignedAtNotNil", "roofingPartnerFlagAt", "roofingPartnerFlagAtNEQ", "roofingPartnerFlagAtIn", "roofingPartnerFlagAtNotIn", "roofingPartnerFlagAtGT", "roofingPartnerFlagAtGTE", "roofingPartnerFlagAtLT", "roofingPartnerFlagAtLTE", "roofingPartnerFlagAtIsNil", "roofingPartnerFlagAtNotNil", "hasPayments", "hasPaymentsWith", "hasActivities", "hasActivitiesWith", "hasAssignmentHistory", "hasAssignmentHistoryWith", "hasProgressHistory", "hasProgressHistoryWith", "hasNotes", "hasNotesWith", "hasDocUrls", "hasDocUrlsWith", "hasEstimate", "hasEstimateWith", "hasCreatorAPI", "hasCreatorAPIWith", "hasCreator", "hasCreatorWith", "hasHomeOwner", "hasHomeOwnerWith", "hasSalesRep", "hasSalesRepWith", "hasRequester", "hasRequesterWith", "hasRoofingPartner", "hasRoofingPartnerWith", "hasIntegrationPartner", "hasIntegrationPartnerWith", "hasEpcPartner", "hasEpcPartnerWith", "hasEpc", "hasEpcWith", "hasEstimatePdf", "hasEstimatePdfWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOJobWhereInput2ᚖroofixᚋentᚐJobWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			data, err := ec.unmarshalOJobProgress2ᚖroofixᚋpkgᚋenumᚐJobProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.Progress = data
		case "progressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNEQ"))
			data, err := ec.unmarshalOJobProgress2ᚖroofixᚋpkgᚋenumᚐJobProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNEQ = data
		case "progressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressIn"))
			data, err := ec.unmarshalOJobProgress2ᚕroofixᚋpkgᚋenumᚐJobProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressIn = data
		case "progressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNotIn"))
			data, err := ec.unmarshalOJobProgress2ᚕroofixᚋpkgᚋenumᚐJobProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNotIn = data
		case "progressIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressIsNil = data
		case "progressNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNotNil = data
		case "progressAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAt = data
		case "progressAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtNEQ = data
		case "progressAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtIn = data
		case "progressAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtNotIn = data
		case "progressAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtGT = data
		case "progressAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtGTE = data
		case "progressAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtLT = data
		case "progressAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtLTE = data
		case "progressAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtIsNil = data
		case "progressAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtNotNil = data
		case "progressFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAt = data
		case "progressFlagAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtNEQ = data
		case "progressFlagAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtIn = data
		case "progressFlagAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtNotIn = data
		case "progressFlagAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtGT = data
		case "progressFlagAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtGTE = data
		case "progressFlagAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtLT = data
		case "progressFlagAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtLTE = data
		case "progressFlagAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtIsNil = data
		case "progressFlagAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtNotNil = data
		case "regionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionID(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.JobWhereInput().RegionIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RegionIDIsNil = data
		case "regionIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RegionIDNotNil = data
		case "companyRefID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefID = data
		case "companyRefIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDNEQ = data
		case "companyRefIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDIn = data
		case "companyRefIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDNotIn = data
		case "companyRefIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDGT = data
		case "companyRefIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDGTE = data
		case "companyRefIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDLT = data
		case "companyRefIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDLTE = data
		case "companyRefIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDContains = data
		case "companyRefIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDHasPrefix = data
		case "companyRefIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDHasSuffix = data
		case "companyRefIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDIsNil = data
		case "companyRefIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDNotNil = data
		case "companyRefIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDEqualFold = data
		case "companyRefIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefIDContainsFold = data
		case "companyName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyName = data
		case "companyNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameNEQ = data
		case "companyNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameIn = data
		case "companyNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameNotIn = data
		case "companyNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameGT = data
		case "companyNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameGTE = data
		case "companyNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameLT = data
		case "companyNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameLTE = data
		case "companyNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameContains = data
		case "companyNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameHasPrefix = data
		case "companyNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameHasSuffix = data
		case "companyNameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameIsNil = data
		case "companyNameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameNotNil = data
		case "companyNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameEqualFold = data
		case "companyNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyNameContainsFold = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "workOrderPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPrice = data
		case "workOrderPriceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceNEQ = data
		case "workOrderPriceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceIn = data
		case "workOrderPriceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceNotIn = data
		case "workOrderPriceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceGT = data
		case "workOrderPriceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceGTE = data
		case "workOrderPriceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceLT = data
		case "workOrderPriceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPriceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPriceLTE = data
		case "contractPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPrice = data
		case "contractPriceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceNEQ = data
		case "contractPriceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceIn = data
		case "contractPriceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceNotIn = data
		case "contractPriceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceGT = data
		case "contractPriceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceGTE = data
		case "contractPriceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceLT = data
		case "contractPriceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceLTE = data
		case "contractPriceIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceIsNil = data
		case "contractPriceNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPriceNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPriceNotNil = data
		case "changeOrderPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPrice = data
		case "changeOrderPriceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceNEQ = data
		case "changeOrderPriceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceIn = data
		case "changeOrderPriceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceNotIn = data
		case "changeOrderPriceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceGT = data
		case "changeOrderPriceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceGTE = data
		case "changeOrderPriceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceLT = data
		case "changeOrderPriceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceLTE = data
		case "changeOrderPriceIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceIsNil = data
		case "changeOrderPriceNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPriceNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPriceNotNil = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "shingleColor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColor = data
		case "shingleColorNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorNEQ = data
		case "shingleColorIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorIn = data
		case "shingleColorNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorNotIn = data
		case "shingleColorGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorGT = data
		case "shingleColorGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorGTE = data
		case "shingleColorLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorLT = data
		case "shingleColorLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorLTE = data
		case "shingleColorContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorContains = data
		case "shingleColorHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorHasPrefix = data
		case "shingleColorHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorHasSuffix = data
		case "shingleColorIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorIsNil = data
		case "shingleColorNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorNotNil = data
		case "shingleColorEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorEqualFold = data
		case "shingleColorContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColorContainsFold = data
		case "permitRequired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permitRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PermitRequired = data
		case "permitRequiredNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permitRequiredNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PermitRequiredNEQ = data
		case "permitRequiredIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permitRequiredIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PermitRequiredIsNil = data
		case "permitRequiredNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permitRequiredNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PermitRequiredNotNil = data
		case "inspectionRequired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionRequired = data
		case "inspectionRequiredNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionRequiredNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionRequiredNEQ = data
		case "inspectionRequiredIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionRequiredIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionRequiredIsNil = data
		case "inspectionRequiredNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionRequiredNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionRequiredNotNil = data
		case "inspectionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDate = data
		case "inspectionDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateNEQ = data
		case "inspectionDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateIn = data
		case "inspectionDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateNotIn = data
		case "inspectionDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateGT = data
		case "inspectionDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateGTE = data
		case "inspectionDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateLT = data
		case "inspectionDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateLTE = data
		case "inspectionDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateIsNil = data
		case "inspectionDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDateNotNil = data
		case "progressInspectionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDate = data
		case "progressInspectionDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateNEQ = data
		case "progressInspectionDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateIn = data
		case "progressInspectionDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateNotIn = data
		case "progressInspectionDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateGT = data
		case "progressInspectionDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateGTE = data
		case "progressInspectionDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateLT = data
		case "progressInspectionDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateLTE = data
		case "progressInspectionDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateIsNil = data
		case "progressInspectionDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDateNotNil = data
		case "installDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDate = data
		case "installDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateNEQ = data
		case "installDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateIn = data
		case "installDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateNotIn = data
		case "installDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateGT = data
		case "installDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateGTE = data
		case "installDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateLT = data
		case "installDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateLTE = data
		case "installDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateIsNil = data
		case "installDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDateNotNil = data
		case "completionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDate = data
		case "completionDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateNEQ = data
		case "completionDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateIn = data
		case "completionDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateNotIn = data
		case "completionDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateGT = data
		case "completionDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateGTE = data
		case "completionDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateLT = data
		case "completionDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateLTE = data
		case "completionDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateIsNil = data
		case "completionDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDateNotNil = data
		case "materialDeliveryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDate = data
		case "materialDeliveryDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateNEQ = data
		case "materialDeliveryDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateIn = data
		case "materialDeliveryDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateNotIn = data
		case "materialDeliveryDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateGT = data
		case "materialDeliveryDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateGTE = data
		case "materialDeliveryDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateLT = data
		case "materialDeliveryDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateLTE = data
		case "materialDeliveryDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateIsNil = data
		case "materialDeliveryDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDateNotNil = data
		case "agree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agree"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Agree = data
		case "agreeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeNEQ = data
		case "agreeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeIsNil = data
		case "agreeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeNotNil = data
		case "agreeAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAt = data
		case "agreeAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtNEQ = data
		case "agreeAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtIn = data
		case "agreeAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtNotIn = data
		case "agreeAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtGT = data
		case "agreeAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtGTE = data
		case "agreeAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtLT = data
		case "agreeAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtLTE = data
		case "agreeAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtIsNil = data
		case "agreeAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAtNotNil = data
		case "poNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumber = data
		case "poNumberNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberNEQ = data
		case "poNumberIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberIn = data
		case "poNumberNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberNotIn = data
		case "poNumberGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberGT = data
		case "poNumberGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberGTE = data
		case "poNumberLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberLT = data
		case "poNumberLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberLTE = data
		case "poNumberContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberContains = data
		case "poNumberHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberHasPrefix = data
		case "poNumberHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberHasSuffix = data
		case "poNumberIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberIsNil = data
		case "poNumberNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberNotNil = data
		case "poNumberEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberEqualFold = data
		case "poNumberContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumberContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumberContainsFold = data
		case "roofingPartnerAssignedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAt = data
		case "roofingPartnerAssignedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtNEQ = data
		case "roofingPartnerAssignedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtIn = data
		case "roofingPartnerAssignedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtNotIn = data
		case "roofingPartnerAssignedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtGT = data
		case "roofingPartnerAssignedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtGTE = data
		case "roofingPartnerAssignedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtLT = data
		case "roofingPartnerAssignedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtLTE = data
		case "roofingPartnerAssignedAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtIsNil = data
		case "roofingPartnerAssignedAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAtNotNil = data
		case "roofingPartnerFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAt = data
		case "roofingPartnerFlagAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtNEQ = data
		case "roofingPartnerFlagAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtIn = data
		case "roofingPartnerFlagAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtNotIn = data
		case "roofingPartnerFlagAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtGT = data
		case "roofingPartnerFlagAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtGTE = data
		case "roofingPartnerFlagAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtLT = data
		case "roofingPartnerFlagAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtLTE = data
		case "roofingPartnerFlagAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtIsNil = data
		case "roofingPartnerFlagAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAtNotNil = data
		case "hasPayments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPayments"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPayments = data
		case "hasPaymentsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPaymentsWith"))
			data, err := ec.unmarshalOPaymentWhereInput2ᚕᚖroofixᚋentᚐPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPaymentsWith = data
		case "hasActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivities = data
		case "hasActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivitiesWith"))
			data, err := ec.unmarshalOJobActivityWhereInput2ᚕᚖroofixᚋentᚐJobActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivitiesWith = data
		case "hasAssignmentHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignmentHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignmentHistory = data
		case "hasAssignmentHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignmentHistoryWith"))
			data, err := ec.unmarshalOJobAssignmentHistoryWhereInput2ᚕᚖroofixᚋentᚐJobAssignmentHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignmentHistoryWith = data
		case "hasProgressHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProgressHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProgressHistory = data
		case "hasProgressHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProgressHistoryWith"))
			data, err := ec.unmarshalOJobProgressHistoryWhereInput2ᚕᚖroofixᚋentᚐJobProgressHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProgressHistoryWith = data
		case "hasNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNotes"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNotes = data
		case "hasNotesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNotesWith"))
			data, err := ec.unmarshalOJobNoteWhereInput2ᚕᚖroofixᚋentᚐJobNoteWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNotesWith = data
		case "hasDocUrls":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDocUrls"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDocUrls = data
		case "hasDocUrlsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDocUrlsWith"))
			data, err := ec.unmarshalOJobDocURLWhereInput2ᚕᚖroofixᚋentᚐJobDocURLWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDocUrlsWith = data
		case "hasEstimate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimate"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimate = data
		case "hasEstimateWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasHomeOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHomeOwner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasHomeOwner = data
		case "hasHomeOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHomeOwnerWith"))
			data, err := ec.unmarshalOHomeOwnerWhereInput2ᚕᚖroofixᚋentᚐHomeOwnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasHomeOwnerWith = data
		case "hasSalesRep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRep"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRep = data
		case "hasSalesRepWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRepWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRepWith = data
		case "hasRequester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequester"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequester = data
		case "hasRequesterWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequesterWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequesterWith = data
		case "hasRoofingPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRoofingPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRoofingPartner = data
		case "hasRoofingPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRoofingPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRoofingPartnerWith = data
		case "hasIntegrationPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIntegrationPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasIntegrationPartner = data
		case "hasIntegrationPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIntegrationPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasIntegrationPartnerWith = data
		case "hasEpcPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcPartner = data
		case "hasEpcPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcPartnerWith = data
		case "hasEpc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpc"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpc = data
		case "hasEpcWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcWith"))
			data, err := ec.unmarshalOOptionListWhereInput2ᚕᚖroofixᚋentᚐOptionListWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcWith = data
		case "hasEstimatePdf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimatePdf"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimatePdf = data
		case "hasEstimatePdfWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimatePdfWith"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimatePdfWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotifySettingWhereInput(ctx context.Context, obj interface{}) (ent.NotifySettingWhereInput, error) {
	var it ent.NotifySettingWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "topicID", "topicIDNEQ", "topicIDIn", "topicIDNotIn", "topicIDGT", "topicIDGTE", "topicIDLT", "topicIDLTE", "topicIDContains", "topicIDHasPrefix", "topicIDHasSuffix", "topicIDEqualFold", "topicIDContainsFold", "receiveEmail", "receiveEmailNEQ", "receiveEmailIsNil", "receiveEmailNotNil", "receiveSms", "receiveSmsNEQ", "receiveSmsIsNil", "receiveSmsNotNil", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalONotifySettingWhereInput2ᚖroofixᚋentᚐNotifySettingWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalONotifySettingWhereInput2ᚕᚖroofixᚋentᚐNotifySettingWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalONotifySettingWhereInput2ᚕᚖroofixᚋentᚐNotifySettingWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "topicID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "topicIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDNEQ = data
		case "topicIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDIn = data
		case "topicIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDNotIn = data
		case "topicIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDGT = data
		case "topicIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDGTE = data
		case "topicIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDLT = data
		case "topicIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDLTE = data
		case "topicIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDContains = data
		case "topicIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDHasPrefix = data
		case "topicIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDHasSuffix = data
		case "topicIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDEqualFold = data
		case "topicIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicIDContainsFold = data
		case "receiveEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveEmail"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveEmail = data
		case "receiveEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveEmailNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveEmailNEQ = data
		case "receiveEmailIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveEmailIsNil = data
		case "receiveEmailNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveEmailNotNil = data
		case "receiveSms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveSms"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveSms = data
		case "receiveSmsNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveSmsNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveSmsNEQ = data
		case "receiveSmsIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveSmsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveSmsIsNil = data
		case "receiveSmsNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiveSmsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiveSmsNotNil = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOptionListWhereInput(ctx context.Context, obj interface{}) (ent.OptionListWhereInput, error) {
	var it ent.OptionListWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "displayName", "displayNameNEQ", "displayNameIn", "displayNameNotIn", "displayNameGT", "displayNameGTE", "displayNameLT", "displayNameLTE", "displayNameContains", "displayNameHasPrefix", "displayNameHasSuffix", "displayNameEqualFold", "displayNameContainsFold", "active", "activeNEQ", "order", "orderNEQ", "orderIn", "orderNotIn", "orderGT", "orderGTE", "orderLT", "orderLTE", "hasFinanceOptions", "hasFinanceOptionsWith", "hasEpcOptions", "hasEpcOptionsWith", "hasEpc", "hasEpcWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOOptionListWhereInput2ᚖroofixᚋentᚐOptionListWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOOptionListWhereInput2ᚕᚖroofixᚋentᚐOptionListWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOOptionListWhereInput2ᚕᚖroofixᚋentᚐOptionListWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOOptionListType2ᚖroofixᚋpkgᚋenumᚐOptionList(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOOptionListType2ᚖroofixᚋpkgᚋenumᚐOptionList(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOOptionListType2ᚕroofixᚋpkgᚋenumᚐOptionListᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOOptionListType2ᚕroofixᚋpkgᚋenumᚐOptionListᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayName = data
		case "displayNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameNEQ = data
		case "displayNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameIn = data
		case "displayNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameNotIn = data
		case "displayNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameGT = data
		case "displayNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameGTE = data
		case "displayNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameLT = data
		case "displayNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameLTE = data
		case "displayNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameContains = data
		case "displayNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameHasPrefix = data
		case "displayNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameHasSuffix = data
		case "displayNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameEqualFold = data
		case "displayNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayNameContainsFold = data
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "activeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActiveNEQ = data
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "orderNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderNEQ = data
		case "orderIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderIn = data
		case "orderNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderNotIn = data
		case "orderGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderGT = data
		case "orderGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderGTE = data
		case "orderLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderLT = data
		case "orderLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderLTE = data
		case "hasFinanceOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinanceOptions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinanceOptions = data
		case "hasFinanceOptionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinanceOptionsWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinanceOptionsWith = data
		case "hasEpcOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcOptions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcOptions = data
		case "hasEpcOptionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcOptionsWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcOptionsWith = data
		case "hasEpc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpc"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpc = data
		case "hasEpcWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerActivityWhereInput(ctx context.Context, obj interface{}) (ent.PartnerActivityWhereInput, error) {
	var it ent.PartnerActivityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasPartner", "hasPartnerWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerActivityWhereInput2ᚖroofixᚋentᚐPartnerActivityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerActivityWhereInput2ᚕᚖroofixᚋentᚐPartnerActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerActivityWhereInput2ᚕᚖroofixᚋentᚐPartnerActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerContactWhereInput(ctx context.Context, obj interface{}) (ent.PartnerContactWhereInput, error) {
	var it ent.PartnerContactWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "role", "roleNEQ", "roleIn", "roleNotIn", "type", "typeNEQ", "typeIn", "typeNotIn", "title", "titleNEQ", "titleIn", "titleNotIn", "titleGT", "titleGTE", "titleLT", "titleLTE", "titleContains", "titleHasPrefix", "titleHasSuffix", "titleIsNil", "titleNotNil", "titleEqualFold", "titleContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "invoicingEmail", "invoicingEmailNEQ", "invoicingEmailIn", "invoicingEmailNotIn", "invoicingEmailGT", "invoicingEmailGTE", "invoicingEmailLT", "invoicingEmailLTE", "invoicingEmailContains", "invoicingEmailHasPrefix", "invoicingEmailHasSuffix", "invoicingEmailIsNil", "invoicingEmailNotNil", "invoicingEmailEqualFold", "invoicingEmailContainsFold"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerContactWhereInput2ᚖroofixᚋentᚐPartnerContactWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerContactWhereInput2ᚕᚖroofixᚋentᚐPartnerContactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerContactWhereInput2ᚕᚖroofixᚋentᚐPartnerContactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOPartnerContactRole2ᚖroofixᚋpkgᚋenumᚐPartnerContactRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "roleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNEQ"))
			data, err := ec.unmarshalOPartnerContactRole2ᚖroofixᚋpkgᚋenumᚐPartnerContactRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNEQ = data
		case "roleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIn"))
			data, err := ec.unmarshalOPartnerContactRole2ᚕroofixᚋpkgᚋenumᚐPartnerContactRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIn = data
		case "roleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNotIn"))
			data, err := ec.unmarshalOPartnerContactRole2ᚕroofixᚋpkgᚋenumᚐPartnerContactRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNotIn = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOPartnerContactType2ᚖroofixᚋpkgᚋenumᚐPartnerContact(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOPartnerContactType2ᚖroofixᚋpkgᚋenumᚐPartnerContact(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOPartnerContactType2ᚕroofixᚋpkgᚋenumᚐPartnerContactᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOPartnerContactType2ᚕroofixᚋpkgᚋenumᚐPartnerContactᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "titleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNEQ = data
		case "titleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIn = data
		case "titleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotIn = data
		case "titleGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGT = data
		case "titleGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGTE = data
		case "titleLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLT = data
		case "titleLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLTE = data
		case "titleContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContains = data
		case "titleHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasPrefix = data
		case "titleHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasSuffix = data
		case "titleIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIsNil = data
		case "titleNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotNil = data
		case "titleEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleEqualFold = data
		case "titleContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContainsFold = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "invoicingEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmail = data
		case "invoicingEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailNEQ = data
		case "invoicingEmailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailIn = data
		case "invoicingEmailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailNotIn = data
		case "invoicingEmailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailGT = data
		case "invoicingEmailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailGTE = data
		case "invoicingEmailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailLT = data
		case "invoicingEmailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailLTE = data
		case "invoicingEmailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailContains = data
		case "invoicingEmailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailHasPrefix = data
		case "invoicingEmailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailHasSuffix = data
		case "invoicingEmailIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailIsNil = data
		case "invoicingEmailNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailNotNil = data
		case "invoicingEmailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailEqualFold = data
		case "invoicingEmailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingEmailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingEmailContainsFold = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerServiceCityWhereInput(ctx context.Context, obj interface{}) (ent.PartnerServiceCityWhereInput, error) {
	var it ent.PartnerServiceCityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "postalID", "postalIDNEQ", "postalIDIn", "postalIDNotIn", "postalIDGT", "postalIDGTE", "postalIDLT", "postalIDLTE", "postalIDContains", "postalIDHasPrefix", "postalIDHasSuffix", "postalIDEqualFold", "postalIDContainsFold", "active", "activeNEQ", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "naicsCode", "naicsCodeNEQ", "naicsCodeIn", "naicsCodeNotIn", "naicsCodeGT", "naicsCodeGTE", "naicsCodeLT", "naicsCodeLTE", "licenseNo", "licenseNoNEQ", "licenseNoIn", "licenseNoNotIn", "licenseNoGT", "licenseNoGTE", "licenseNoLT", "licenseNoLTE", "licenseNoContains", "licenseNoHasPrefix", "licenseNoHasSuffix", "licenseNoIsNil", "licenseNoNotNil", "licenseNoEqualFold", "licenseNoContainsFold", "proofDocID", "proofDocIDNEQ", "proofDocIDIn", "proofDocIDNotIn", "proofDocIDGT", "proofDocIDGTE", "proofDocIDLT", "proofDocIDLTE", "proofDocIDContains", "proofDocIDHasPrefix", "proofDocIDHasSuffix", "proofDocIDIsNil", "proofDocIDNotNil", "proofDocIDEqualFold", "proofDocIDContainsFold", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerServiceCityWhereInput2ᚖroofixᚋentᚐPartnerServiceCityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerServiceCityWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerServiceCityWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "postalID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalID = data
		case "postalIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDNEQ = data
		case "postalIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDIn = data
		case "postalIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDNotIn = data
		case "postalIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDGT = data
		case "postalIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDGTE = data
		case "postalIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDLT = data
		case "postalIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDLTE = data
		case "postalIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDContains = data
		case "postalIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDHasPrefix = data
		case "postalIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDHasSuffix = data
		case "postalIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDEqualFold = data
		case "postalIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalIDContainsFold = data
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "activeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActiveNEQ = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "naicsCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCode(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "naicsCodeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceCityWhereInput().NaicsCodeLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "licenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNo = data
		case "licenseNoNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoNEQ = data
		case "licenseNoIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoIn = data
		case "licenseNoNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoNotIn = data
		case "licenseNoGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoGT = data
		case "licenseNoGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoGTE = data
		case "licenseNoLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoLT = data
		case "licenseNoLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoLTE = data
		case "licenseNoContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoContains = data
		case "licenseNoHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoHasPrefix = data
		case "licenseNoHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoHasSuffix = data
		case "licenseNoIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoIsNil = data
		case "licenseNoNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoNotNil = data
		case "licenseNoEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoEqualFold = data
		case "licenseNoContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoContainsFold = data
		case "proofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocID = data
		case "proofDocIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDNEQ = data
		case "proofDocIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDIn = data
		case "proofDocIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDNotIn = data
		case "proofDocIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDGT = data
		case "proofDocIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDGTE = data
		case "proofDocIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDLT = data
		case "proofDocIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDLTE = data
		case "proofDocIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDContains = data
		case "proofDocIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDHasPrefix = data
		case "proofDocIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDHasSuffix = data
		case "proofDocIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDIsNil = data
		case "proofDocIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDNotNil = data
		case "proofDocIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDEqualFold = data
		case "proofDocIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDContainsFold = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerServiceStateWhereInput(ctx context.Context, obj interface{}) (ent.PartnerServiceStateWhereInput, error) {
	var it ent.PartnerServiceStateWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "state", "stateNEQ", "stateIn", "stateNotIn", "stateGT", "stateGTE", "stateLT", "stateLTE", "stateContains", "stateHasPrefix", "stateHasSuffix", "stateEqualFold", "stateContainsFold", "licenseNo", "licenseNoNEQ", "licenseNoIn", "licenseNoNotIn", "licenseNoGT", "licenseNoGTE", "licenseNoLT", "licenseNoLTE", "licenseNoContains", "licenseNoHasPrefix", "licenseNoHasSuffix", "licenseNoIsNil", "licenseNoNotNil", "licenseNoEqualFold", "licenseNoContainsFold", "licenseExpDate", "licenseExpDateNEQ", "licenseExpDateIn", "licenseExpDateNotIn", "licenseExpDateGT", "licenseExpDateGTE", "licenseExpDateLT", "licenseExpDateLTE", "licenseExpDateIsNil", "licenseExpDateNotNil", "proofDocID", "proofDocIDNEQ", "proofDocIDIn", "proofDocIDNotIn", "proofDocIDGT", "proofDocIDGTE", "proofDocIDLT", "proofDocIDLTE", "proofDocIDContains", "proofDocIDHasPrefix", "proofDocIDHasSuffix", "proofDocIDIsNil", "proofDocIDNotNil", "proofDocIDEqualFold", "proofDocIDContainsFold", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerServiceStateWhereInput2ᚖroofixᚋentᚐPartnerServiceStateWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerServiceStateWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceStateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerServiceStateWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceStateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "stateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateNEQ = data
		case "stateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateIn = data
		case "stateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateNotIn = data
		case "stateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateGT = data
		case "stateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateGTE = data
		case "stateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateLT = data
		case "stateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateLTE = data
		case "stateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateContains = data
		case "stateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateHasPrefix = data
		case "stateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateHasSuffix = data
		case "stateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateEqualFold = data
		case "stateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateContainsFold = data
		case "licenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNo = data
		case "licenseNoNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoNEQ = data
		case "licenseNoIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoIn = data
		case "licenseNoNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoNotIn = data
		case "licenseNoGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoGT = data
		case "licenseNoGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoGTE = data
		case "licenseNoLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoLT = data
		case "licenseNoLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoLTE = data
		case "licenseNoContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoContains = data
		case "licenseNoHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoHasPrefix = data
		case "licenseNoHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoHasSuffix = data
		case "licenseNoIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoIsNil = data
		case "licenseNoNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoNotNil = data
		case "licenseNoEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoEqualFold = data
		case "licenseNoContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNoContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNoContainsFold = data
		case "licenseExpDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDate = data
		case "licenseExpDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateNEQ = data
		case "licenseExpDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateIn = data
		case "licenseExpDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateNotIn = data
		case "licenseExpDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateGT = data
		case "licenseExpDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateGTE = data
		case "licenseExpDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateLT = data
		case "licenseExpDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateLTE = data
		case "licenseExpDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateIsNil = data
		case "licenseExpDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDateNotNil = data
		case "proofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocID = data
		case "proofDocIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDNEQ = data
		case "proofDocIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDIn = data
		case "proofDocIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDNotIn = data
		case "proofDocIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDGT = data
		case "proofDocIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDGTE = data
		case "proofDocIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDLT = data
		case "proofDocIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDLTE = data
		case "proofDocIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDContains = data
		case "proofDocIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDHasPrefix = data
		case "proofDocIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDHasSuffix = data
		case "proofDocIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDIsNil = data
		case "proofDocIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDNotNil = data
		case "proofDocIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDEqualFold = data
		case "proofDocIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocIDContainsFold = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerServiceWhereInput(ctx context.Context, obj interface{}) (ent.PartnerServiceWhereInput, error) {
	var it ent.PartnerServiceWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "serviceID", "serviceIDNEQ", "serviceIDIn", "serviceIDNotIn", "serviceIDGT", "serviceIDGTE", "serviceIDLT", "serviceIDLTE", "active", "activeNEQ", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerServiceWhereInput2ᚖroofixᚋentᚐPartnerServiceWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerServiceWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerServiceWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "serviceID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceID(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerServiceWhereInput().ServiceIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "activeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActiveNEQ = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerTrainingVideoWhereInput(ctx context.Context, obj interface{}) (ent.PartnerTrainingVideoWhereInput, error) {
	var it ent.PartnerTrainingVideoWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "enabled", "enabledNEQ", "hasVideo", "hasVideoWith", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerTrainingVideoWhereInput2ᚖroofixᚋentᚐPartnerTrainingVideoWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐPartnerTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐPartnerTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "enabledNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnabledNEQ = data
		case "hasVideo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVideo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVideo = data
		case "hasVideoWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVideoWith"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVideoWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartnerWhereInput(ctx context.Context, obj interface{}) (ent.PartnerWhereInput, error) {
	var it ent.PartnerWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "externalID", "externalIDNEQ", "externalIDIn", "externalIDNotIn", "externalIDGT", "externalIDGTE", "externalIDLT", "externalIDLTE", "externalIDContains", "externalIDHasPrefix", "externalIDHasSuffix", "externalIDIsNil", "externalIDNotNil", "externalIDEqualFold", "externalIDContainsFold", "creatorID", "creatorIDNEQ", "creatorIDIn", "creatorIDNotIn", "creatorIDGT", "creatorIDGTE", "creatorIDLT", "creatorIDLTE", "creatorIDContains", "creatorIDHasPrefix", "creatorIDHasSuffix", "creatorIDIsNil", "creatorIDNotNil", "creatorIDEqualFold", "creatorIDContainsFold", "type", "typeNEQ", "typeIn", "typeNotIn", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "website", "websiteNEQ", "websiteIn", "websiteNotIn", "websiteGT", "websiteGTE", "websiteLT", "websiteLTE", "websiteContains", "websiteHasPrefix", "websiteHasSuffix", "websiteIsNil", "websiteNotNil", "websiteEqualFold", "websiteContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "latitude", "latitudeNEQ", "latitudeIn", "latitudeNotIn", "latitudeGT", "latitudeGTE", "latitudeLT", "latitudeLTE", "latitudeIsNil", "latitudeNotNil", "longitude", "longitudeNEQ", "longitudeIn", "longitudeNotIn", "longitudeGT", "longitudeGTE", "longitudeLT", "longitudeLTE", "longitudeIsNil", "longitudeNotNil", "isNationWide", "isNationWideNEQ", "crewCount", "crewCountNEQ", "crewCountIn", "crewCountNotIn", "crewCountGT", "crewCountGTE", "crewCountLT", "crewCountLTE", "yearsInBusiness", "yearsInBusinessNEQ", "yearsInBusinessIn", "yearsInBusinessNotIn", "yearsInBusinessGT", "yearsInBusinessGTE", "yearsInBusinessLT", "yearsInBusinessLTE", "yearsInBusinessIsNil", "yearsInBusinessNotNil", "jobCapacity", "jobCapacityNEQ", "jobCapacityIn", "jobCapacityNotIn", "jobCapacityGT", "jobCapacityGTE", "jobCapacityLT", "jobCapacityLTE", "asphaltLeadT", "asphaltLeadTNEQ", "asphaltLeadTIn", "asphaltLeadTNotIn", "asphaltLeadTGT", "asphaltLeadTGTE", "asphaltLeadTLT", "asphaltLeadTLTE", "asphaltLeadTContains", "asphaltLeadTHasPrefix", "asphaltLeadTHasSuffix", "asphaltLeadTIsNil", "asphaltLeadTNotNil", "asphaltLeadTEqualFold", "asphaltLeadTContainsFold", "metalLeadT", "metalLeadTNEQ", "metalLeadTIn", "metalLeadTNotIn", "metalLeadTGT", "metalLeadTGTE", "metalLeadTLT", "metalLeadTLTE", "metalLeadTContains", "metalLeadTHasPrefix", "metalLeadTHasSuffix", "metalLeadTIsNil", "metalLeadTNotNil", "metalLeadTEqualFold", "metalLeadTContainsFold", "tileLeadT", "tileLeadTNEQ", "tileLeadTIn", "tileLeadTNotIn", "tileLeadTGT", "tileLeadTGTE", "tileLeadTLT", "tileLeadTLTE", "tileLeadTContains", "tileLeadTHasPrefix", "tileLeadTHasSuffix", "tileLeadTIsNil", "tileLeadTNotNil", "tileLeadTEqualFold", "tileLeadTContainsFold", "setupStepsCompleted", "setupStepsCompletedNEQ", "setupStepsCompletedIn", "setupStepsCompletedNotIn", "setupStepsCompletedGT", "setupStepsCompletedGTE", "setupStepsCompletedLT", "setupStepsCompletedLTE", "salesVolume", "salesVolumeNEQ", "salesVolumeIn", "salesVolumeNotIn", "salesVolumeGT", "salesVolumeGTE", "salesVolumeLT", "salesVolumeLTE", "salesVolumeIsNil", "salesVolumeNotNil", "downPayment", "downPaymentNEQ", "downPaymentIn", "downPaymentNotIn", "downPaymentGT", "downPaymentGTE", "downPaymentLT", "downPaymentLTE", "downPaymentIsNil", "downPaymentNotNil", "pif", "pifNEQ", "pifIn", "pifNotIn", "pifGT", "pifGTE", "pifLT", "pifLTE", "pifIsNil", "pifNotNil", "installInHouse", "installInHouseNEQ", "installInHouseIsNil", "installInHouseNotNil", "status", "statusNEQ", "statusIn", "statusNotIn", "epcStatus", "epcStatusNEQ", "epcStatusIn", "epcStatusNotIn", "epcStatusIsNil", "epcStatusNotNil", "hasRequestedEstimates", "hasRequestedEstimatesWith", "hasEstimateHomeOwners", "hasEstimateHomeOwnersWith", "hasRoofingJobs", "hasRoofingJobsWith", "hasIntegrationJobs", "hasIntegrationJobsWith", "hasEpcJobs", "hasEpcJobsWith", "hasJobRequests", "hasJobRequestsWith", "hasActivities", "hasActivitiesWith", "hasJobAssignmentHistory", "hasJobAssignmentHistoryWith", "hasRequestedInstallationJobs", "hasRequestedInstallationJobsWith", "hasAssignedInstallationJobs", "hasAssignedInstallationJobsWith", "hasContacts", "hasContactsWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith", "hasServices", "hasServicesWith", "hasServiceStates", "hasServiceStatesWith", "hasServiceCities", "hasServiceCitiesWith", "hasTrainingVideos", "hasTrainingVideosWith", "hasContactUsRequests", "hasContactUsRequestsWith", "hasSurveys", "hasSurveysWith", "hasSessions", "hasSessionsWith", "hasJobNotes", "hasJobNotesWith", "hasChannels", "hasChannelsWith", "hasFinanceOptions", "hasFinanceOptionsWith", "hasEpcOptions", "hasEpcOptionsWith", "hasPartnerContacts", "hasPartnerContactsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚖroofixᚋentᚐPartnerWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "externalID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		case "externalIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDNEQ = data
		case "externalIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDIn = data
		case "externalIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDNotIn = data
		case "externalIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDGT = data
		case "externalIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDGTE = data
		case "externalIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDLT = data
		case "externalIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDLTE = data
		case "externalIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDContains = data
		case "externalIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDHasPrefix = data
		case "externalIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDHasSuffix = data
		case "externalIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDIsNil = data
		case "externalIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDNotNil = data
		case "externalIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDEqualFold = data
		case "externalIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDContainsFold = data
		case "creatorID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorID = data
		case "creatorIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDNEQ = data
		case "creatorIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDIn = data
		case "creatorIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDNotIn = data
		case "creatorIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDGT = data
		case "creatorIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDGTE = data
		case "creatorIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDLT = data
		case "creatorIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDLTE = data
		case "creatorIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDContains"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDContains = data
		case "creatorIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDHasPrefix = data
		case "creatorIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDHasSuffix = data
		case "creatorIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDIsNil = data
		case "creatorIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDNotNil = data
		case "creatorIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDEqualFold = data
		case "creatorIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorIDContainsFold = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOPartnerType2ᚖroofixᚋpkgᚋenumᚐPartner(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOPartnerType2ᚖroofixᚋpkgᚋenumᚐPartner(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOPartnerType2ᚕroofixᚋpkgᚋenumᚐPartnerᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOPartnerType2ᚕroofixᚋpkgᚋenumᚐPartnerᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "websiteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNEQ = data
		case "websiteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteIn = data
		case "websiteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNotIn = data
		case "websiteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteGT = data
		case "websiteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteGTE = data
		case "websiteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteLT = data
		case "websiteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteLTE = data
		case "websiteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteContains = data
		case "websiteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteHasPrefix = data
		case "websiteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteHasSuffix = data
		case "websiteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteIsNil = data
		case "websiteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteNotNil = data
		case "websiteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteEqualFold = data
		case "websiteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("websiteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebsiteContainsFold = data
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "latitudeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNEQ = data
		case "latitudeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeIn = data
		case "latitudeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNotIn = data
		case "latitudeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeGT = data
		case "latitudeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeGTE = data
		case "latitudeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeLT = data
		case "latitudeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeLTE = data
		case "latitudeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeIsNil = data
		case "latitudeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNotNil = data
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		case "longitudeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNEQ = data
		case "longitudeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeIn = data
		case "longitudeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNotIn = data
		case "longitudeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeGT = data
		case "longitudeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeGTE = data
		case "longitudeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeLT = data
		case "longitudeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeLTE = data
		case "longitudeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeIsNil = data
		case "longitudeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNotNil = data
		case "isNationWide":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNationWide"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNationWide = data
		case "isNationWideNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNationWideNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNationWideNEQ = data
		case "crewCount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCount(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "crewCountLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("crewCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().CrewCountLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "yearsInBusiness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusiness"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusiness = data
		case "yearsInBusinessNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessNEQ = data
		case "yearsInBusinessIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessIn = data
		case "yearsInBusinessNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessNotIn = data
		case "yearsInBusinessGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessGT = data
		case "yearsInBusinessGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessGTE = data
		case "yearsInBusinessLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessLT = data
		case "yearsInBusinessLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessLTE = data
		case "yearsInBusinessIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessIsNil = data
		case "yearsInBusinessNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearsInBusinessNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearsInBusinessNotNil = data
		case "jobCapacity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacity"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacity(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "jobCapacityLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobCapacityLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().JobCapacityLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "asphaltLeadT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadT = data
		case "asphaltLeadTNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTNEQ = data
		case "asphaltLeadTIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTIn = data
		case "asphaltLeadTNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTNotIn = data
		case "asphaltLeadTGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTGT = data
		case "asphaltLeadTGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTGTE = data
		case "asphaltLeadTLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTLT = data
		case "asphaltLeadTLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTLTE = data
		case "asphaltLeadTContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTContains = data
		case "asphaltLeadTHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTHasPrefix = data
		case "asphaltLeadTHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTHasSuffix = data
		case "asphaltLeadTIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTIsNil = data
		case "asphaltLeadTNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTNotNil = data
		case "asphaltLeadTEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTEqualFold = data
		case "asphaltLeadTContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asphaltLeadTContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AsphaltLeadTContainsFold = data
		case "metalLeadT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadT = data
		case "metalLeadTNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTNEQ = data
		case "metalLeadTIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTIn = data
		case "metalLeadTNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTNotIn = data
		case "metalLeadTGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTGT = data
		case "metalLeadTGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTGTE = data
		case "metalLeadTLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTLT = data
		case "metalLeadTLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTLTE = data
		case "metalLeadTContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTContains = data
		case "metalLeadTHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTHasPrefix = data
		case "metalLeadTHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTHasSuffix = data
		case "metalLeadTIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTIsNil = data
		case "metalLeadTNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTNotNil = data
		case "metalLeadTEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTEqualFold = data
		case "metalLeadTContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metalLeadTContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetalLeadTContainsFold = data
		case "tileLeadT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadT = data
		case "tileLeadTNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTNEQ = data
		case "tileLeadTIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTIn = data
		case "tileLeadTNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTNotIn = data
		case "tileLeadTGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTGT = data
		case "tileLeadTGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTGTE = data
		case "tileLeadTLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTLT = data
		case "tileLeadTLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTLTE = data
		case "tileLeadTContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTContains = data
		case "tileLeadTHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTHasPrefix = data
		case "tileLeadTHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTHasSuffix = data
		case "tileLeadTIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTIsNil = data
		case "tileLeadTNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTNotNil = data
		case "tileLeadTEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTEqualFold = data
		case "tileLeadTContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tileLeadTContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TileLeadTContainsFold = data
		case "setupStepsCompleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompleted"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompleted(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "setupStepsCompletedLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setupStepsCompletedLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().SetupStepsCompletedLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "salesVolume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolume"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolume = data
		case "salesVolumeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeNEQ = data
		case "salesVolumeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeIn = data
		case "salesVolumeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeNotIn = data
		case "salesVolumeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeGT = data
		case "salesVolumeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeGTE = data
		case "salesVolumeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeLT = data
		case "salesVolumeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeLTE = data
		case "salesVolumeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeIsNil = data
		case "salesVolumeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesVolumeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesVolumeNotNil = data
		case "downPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPayment"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPayment = data
		case "downPaymentNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentNEQ = data
		case "downPaymentIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentIn = data
		case "downPaymentNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentNotIn = data
		case "downPaymentGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentGT = data
		case "downPaymentGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentGTE = data
		case "downPaymentLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentLT = data
		case "downPaymentLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentLTE = data
		case "downPaymentIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentIsNil = data
		case "downPaymentNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downPaymentNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DownPaymentNotNil = data
		case "pif":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pif"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pif = data
		case "pifNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifNEQ = data
		case "pifIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifIn = data
		case "pifNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifNotIn = data
		case "pifGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifGT = data
		case "pifGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifGTE = data
		case "pifLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifLT = data
		case "pifLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifLTE = data
		case "pifIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifIsNil = data
		case "pifNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pifNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PifNotNil = data
		case "installInHouse":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installInHouse"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallInHouse = data
		case "installInHouseNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installInHouseNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallInHouseNEQ = data
		case "installInHouseIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installInHouseIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallInHouseIsNil = data
		case "installInHouseNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installInHouseNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallInHouseNotNil = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPartnerStatus2ᚖroofixᚋpkgᚋenumᚐPartnerStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOPartnerStatus2ᚖroofixᚋpkgᚋenumᚐPartnerStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOPartnerStatus2ᚕroofixᚋpkgᚋenumᚐPartnerStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOPartnerStatus2ᚕroofixᚋpkgᚋenumᚐPartnerStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "epcStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcStatus"))
			data, err := ec.unmarshalOEPCStatus2ᚖroofixᚋserverᚋmodelᚐEPCStatus(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().EpcStatus(ctx, &it, data); err != nil {
				return it, err
			}
		case "epcStatusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcStatusNEQ"))
			data, err := ec.unmarshalOEPCStatus2ᚖroofixᚋserverᚋmodelᚐEPCStatus(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().EpcStatusNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "epcStatusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcStatusIn"))
			data, err := ec.unmarshalOEPCStatus2ᚕroofixᚋserverᚋmodelᚐEPCStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().EpcStatusIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "epcStatusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcStatusNotIn"))
			data, err := ec.unmarshalOEPCStatus2ᚕroofixᚋserverᚋmodelᚐEPCStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PartnerWhereInput().EpcStatusNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "epcStatusIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcStatusIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EpcStatusIsNil = data
		case "epcStatusNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcStatusNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EpcStatusNotNil = data
		case "hasRequestedEstimates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequestedEstimates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequestedEstimates = data
		case "hasRequestedEstimatesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequestedEstimatesWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequestedEstimatesWith = data
		case "hasEstimateHomeOwners":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateHomeOwners"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateHomeOwners = data
		case "hasEstimateHomeOwnersWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateHomeOwnersWith"))
			data, err := ec.unmarshalOHomeOwnerWhereInput2ᚕᚖroofixᚋentᚐHomeOwnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateHomeOwnersWith = data
		case "hasRoofingJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRoofingJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRoofingJobs = data
		case "hasRoofingJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRoofingJobsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRoofingJobsWith = data
		case "hasIntegrationJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIntegrationJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasIntegrationJobs = data
		case "hasIntegrationJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIntegrationJobsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasIntegrationJobsWith = data
		case "hasEpcJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcJobs = data
		case "hasEpcJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcJobsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcJobsWith = data
		case "hasJobRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobRequests"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobRequests = data
		case "hasJobRequestsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobRequestsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobRequestsWith = data
		case "hasActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivities = data
		case "hasActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivitiesWith"))
			data, err := ec.unmarshalOPartnerActivityWhereInput2ᚕᚖroofixᚋentᚐPartnerActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivitiesWith = data
		case "hasJobAssignmentHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobAssignmentHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobAssignmentHistory = data
		case "hasJobAssignmentHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobAssignmentHistoryWith"))
			data, err := ec.unmarshalOJobAssignmentHistoryWhereInput2ᚕᚖroofixᚋentᚐJobAssignmentHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobAssignmentHistoryWith = data
		case "hasRequestedInstallationJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequestedInstallationJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequestedInstallationJobs = data
		case "hasRequestedInstallationJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRequestedInstallationJobsWith"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRequestedInstallationJobsWith = data
		case "hasAssignedInstallationJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedInstallationJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedInstallationJobs = data
		case "hasAssignedInstallationJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAssignedInstallationJobsWith"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAssignedInstallationJobsWith = data
		case "hasContacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContacts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContacts = data
		case "hasContactsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContactsWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContactsWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		case "hasServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasServices"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasServices = data
		case "hasServicesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasServicesWith"))
			data, err := ec.unmarshalOPartnerServiceWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasServicesWith = data
		case "hasServiceStates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasServiceStates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasServiceStates = data
		case "hasServiceStatesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasServiceStatesWith"))
			data, err := ec.unmarshalOPartnerServiceStateWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceStateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasServiceStatesWith = data
		case "hasServiceCities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasServiceCities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasServiceCities = data
		case "hasServiceCitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasServiceCitiesWith"))
			data, err := ec.unmarshalOPartnerServiceCityWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasServiceCitiesWith = data
		case "hasTrainingVideos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideos"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideos = data
		case "hasTrainingVideosWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideosWith"))
			data, err := ec.unmarshalOPartnerTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐPartnerTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideosWith = data
		case "hasContactUsRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContactUsRequests"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContactUsRequests = data
		case "hasContactUsRequestsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContactUsRequestsWith"))
			data, err := ec.unmarshalOContactUsWhereInput2ᚕᚖroofixᚋentᚐContactUsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContactUsRequestsWith = data
		case "hasSurveys":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveys"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveys = data
		case "hasSurveysWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveysWith"))
			data, err := ec.unmarshalOSurveyWhereInput2ᚕᚖroofixᚋentᚐSurveyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveysWith = data
		case "hasSessions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSessions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSessions = data
		case "hasSessionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSessionsWith"))
			data, err := ec.unmarshalOUserSessionWhereInput2ᚕᚖroofixᚋentᚐUserSessionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSessionsWith = data
		case "hasJobNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobNotes"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobNotes = data
		case "hasJobNotesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobNotesWith"))
			data, err := ec.unmarshalOJobNoteWhereInput2ᚕᚖroofixᚋentᚐJobNoteWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobNotesWith = data
		case "hasChannels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannels"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannels = data
		case "hasChannelsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelsWith"))
			data, err := ec.unmarshalOChannelSubWhereInput2ᚕᚖroofixᚋentᚐChannelSubWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelsWith = data
		case "hasFinanceOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinanceOptions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinanceOptions = data
		case "hasFinanceOptionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinanceOptionsWith"))
			data, err := ec.unmarshalOOptionListWhereInput2ᚕᚖroofixᚋentᚐOptionListWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinanceOptionsWith = data
		case "hasEpcOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcOptions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcOptions = data
		case "hasEpcOptionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEpcOptionsWith"))
			data, err := ec.unmarshalOOptionListWhereInput2ᚕᚖroofixᚋentᚐOptionListWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEpcOptionsWith = data
		case "hasPartnerContacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerContacts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerContacts = data
		case "hasPartnerContactsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerContactsWith"))
			data, err := ec.unmarshalOPartnerContactWhereInput2ᚕᚖroofixᚋentᚐPartnerContactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerContactsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentWhereInput(ctx context.Context, obj interface{}) (ent.PaymentWhereInput, error) {
	var it ent.PaymentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "amount", "amountNEQ", "amountIn", "amountNotIn", "amountGT", "amountGTE", "amountLT", "amountLTE", "statusID", "statusIDNEQ", "statusIDIn", "statusIDNotIn", "statusIDGT", "statusIDGTE", "statusIDLT", "statusIDLTE", "hasJob", "hasJobWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPaymentWhereInput2ᚖroofixᚋentᚐPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPaymentWhereInput2ᚕᚖroofixᚋentᚐPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPaymentWhereInput2ᚕᚖroofixᚋentᚐPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "amountNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNEQ = data
		case "amountIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIn = data
		case "amountNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotIn = data
		case "amountGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGT = data
		case "amountGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGTE = data
		case "amountLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLT = data
		case "amountLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLTE = data
		case "statusID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusID(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "statusIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PaymentWhereInput().StatusIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasJob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJob"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJob = data
		case "hasJobWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostalCodeWhereInput(ctx context.Context, obj interface{}) (ent.PostalCodeWhereInput, error) {
	var it ent.PostalCodeWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "country", "countryNEQ", "countryIn", "countryNotIn", "countryGT", "countryGTE", "countryLT", "countryLTE", "countryContains", "countryHasPrefix", "countryHasSuffix", "countryEqualFold", "countryContainsFold", "code", "codeNEQ", "codeIn", "codeNotIn", "codeGT", "codeGTE", "codeLT", "codeLTE", "codeContains", "codeHasPrefix", "codeHasSuffix", "codeEqualFold", "codeContainsFold", "city", "cityNEQ", "cityIn", "cityNotIn", "cityGT", "cityGTE", "cityLT", "cityLTE", "cityContains", "cityHasPrefix", "cityHasSuffix", "cityEqualFold", "cityContainsFold", "state", "stateNEQ", "stateIn", "stateNotIn", "stateGT", "stateGTE", "stateLT", "stateLTE", "stateContains", "stateHasPrefix", "stateHasSuffix", "stateEqualFold", "stateContainsFold", "stateAbr", "stateAbrNEQ", "stateAbrIn", "stateAbrNotIn", "stateAbrGT", "stateAbrGTE", "stateAbrLT", "stateAbrLTE", "stateAbrContains", "stateAbrHasPrefix", "stateAbrHasSuffix", "stateAbrEqualFold", "stateAbrContainsFold", "regionID", "regionIDNEQ", "regionIDIn", "regionIDNotIn", "regionIDGT", "regionIDGTE", "regionIDLT", "regionIDLTE", "latitude", "latitudeNEQ", "latitudeIn", "latitudeNotIn", "latitudeGT", "latitudeGTE", "latitudeLT", "latitudeLTE", "longitude", "longitudeNEQ", "longitudeIn", "longitudeNotIn", "longitudeGT", "longitudeGTE", "longitudeLT", "longitudeLTE", "accuracy", "accuracyNEQ", "accuracyIn", "accuracyNotIn", "accuracyGT", "accuracyGTE", "accuracyLT", "accuracyLTE", "serviceArea", "serviceAreaNEQ", "hasPricing", "hasPricingWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPostalCodeWhereInput2ᚖroofixᚋentᚐPostalCodeWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPostalCodeWhereInput2ᚕᚖroofixᚋentᚐPostalCodeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPostalCodeWhereInput2ᚕᚖroofixᚋentᚐPostalCodeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNEQ = data
		case "countryIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIn = data
		case "countryNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryNotIn = data
		case "countryGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGT = data
		case "countryGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryGTE = data
		case "countryLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLT = data
		case "countryLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryLTE = data
		case "countryContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContains = data
		case "countryHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasPrefix = data
		case "countryHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryHasSuffix = data
		case "countryEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryEqualFold = data
		case "countryContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryContainsFold = data
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "codeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNEQ = data
		case "codeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeIn = data
		case "codeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNotIn = data
		case "codeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGT = data
		case "codeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGTE = data
		case "codeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLT = data
		case "codeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLTE = data
		case "codeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContains = data
		case "codeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasPrefix = data
		case "codeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasSuffix = data
		case "codeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeEqualFold = data
		case "codeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContainsFold = data
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "cityNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNEQ = data
		case "cityIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIn = data
		case "cityNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityNotIn = data
		case "cityGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGT = data
		case "cityGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityGTE = data
		case "cityLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLT = data
		case "cityLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityLTE = data
		case "cityContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContains = data
		case "cityHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasPrefix = data
		case "cityHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityHasSuffix = data
		case "cityEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityEqualFold = data
		case "cityContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityContainsFold = data
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "stateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateNEQ = data
		case "stateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateIn = data
		case "stateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateNotIn = data
		case "stateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateGT = data
		case "stateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateGTE = data
		case "stateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateLT = data
		case "stateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateLTE = data
		case "stateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateContains = data
		case "stateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateHasPrefix = data
		case "stateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateHasSuffix = data
		case "stateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateEqualFold = data
		case "stateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateContainsFold = data
		case "stateAbr":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbr"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbr = data
		case "stateAbrNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrNEQ = data
		case "stateAbrIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrIn = data
		case "stateAbrNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrNotIn = data
		case "stateAbrGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrGT = data
		case "stateAbrGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrGTE = data
		case "stateAbrLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrLT = data
		case "stateAbrLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrLTE = data
		case "stateAbrContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrContains = data
		case "stateAbrHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrHasPrefix = data
		case "stateAbrHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrHasSuffix = data
		case "stateAbrEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrEqualFold = data
		case "stateAbrContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateAbrContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StateAbrContainsFold = data
		case "regionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionID(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "regionIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().RegionIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "latitudeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNEQ = data
		case "latitudeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeIn = data
		case "latitudeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeNotIn = data
		case "latitudeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeGT = data
		case "latitudeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeGTE = data
		case "latitudeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeLT = data
		case "latitudeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitudeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LatitudeLTE = data
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		case "longitudeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNEQ = data
		case "longitudeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeIn = data
		case "longitudeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeNotIn = data
		case "longitudeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeGT = data
		case "longitudeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeGTE = data
		case "longitudeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeLT = data
		case "longitudeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitudeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongitudeLTE = data
		case "accuracy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracy"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().Accuracy(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "accuracyLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accuracyLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PostalCodeWhereInput().AccuracyLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "serviceArea":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceArea"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceArea = data
		case "serviceAreaNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceAreaNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceAreaNEQ = data
		case "hasPricing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPricing"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPricing = data
		case "hasPricingWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPricingWith"))
			data, err := ec.unmarshalOPricingWhereInput2ᚕᚖroofixᚋentᚐPricingWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPricingWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPricingWhereInput(ctx context.Context, obj interface{}) (ent.PricingWhereInput, error) {
	var it ent.PricingWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "postalCountry", "postalCountryNEQ", "postalCountryIn", "postalCountryNotIn", "postalCountryGT", "postalCountryGTE", "postalCountryLT", "postalCountryLTE", "postalCountryContains", "postalCountryHasPrefix", "postalCountryHasSuffix", "postalCountryEqualFold", "postalCountryContainsFold", "postalCode", "postalCodeNEQ", "postalCodeIn", "postalCodeNotIn", "postalCodeGT", "postalCodeGTE", "postalCodeLT", "postalCodeLTE", "postalCodeContains", "postalCodeHasPrefix", "postalCodeHasSuffix", "postalCodeEqualFold", "postalCodeContainsFold", "productID", "productIDNEQ", "productIDIn", "productIDNotIn", "productIDGT", "productIDGTE", "productIDLT", "productIDLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "pricePer", "pricePerNEQ", "pricePerIn", "pricePerNotIn", "pricePerGT", "pricePerGTE", "pricePerLT", "pricePerLTE", "pricePerContains", "pricePerHasPrefix", "pricePerHasSuffix", "pricePerEqualFold", "pricePerContainsFold", "hasPostal", "hasPostalWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPricingWhereInput2ᚖroofixᚋentᚐPricingWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPricingWhereInput2ᚕᚖroofixᚋentᚐPricingWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPricingWhereInput2ᚕᚖroofixᚋentᚐPricingWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "postalCountry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountry = data
		case "postalCountryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryNEQ = data
		case "postalCountryIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryIn = data
		case "postalCountryNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryNotIn = data
		case "postalCountryGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryGT = data
		case "postalCountryGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryGTE = data
		case "postalCountryLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryLT = data
		case "postalCountryLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryLTE = data
		case "postalCountryContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryContains = data
		case "postalCountryHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryHasPrefix = data
		case "postalCountryHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryHasSuffix = data
		case "postalCountryEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryEqualFold = data
		case "postalCountryContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCountryContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCountryContainsFold = data
		case "postalCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCode = data
		case "postalCodeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeNEQ = data
		case "postalCodeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeIn = data
		case "postalCodeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeNotIn = data
		case "postalCodeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeGT = data
		case "postalCodeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeGTE = data
		case "postalCodeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeLT = data
		case "postalCodeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeLTE = data
		case "postalCodeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeContains = data
		case "postalCodeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeHasPrefix = data
		case "postalCodeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeHasSuffix = data
		case "postalCodeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeEqualFold = data
		case "postalCodeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCodeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCodeContainsFold = data
		case "productID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductID(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "productIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PricingWhereInput().ProductIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "pricePer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePer = data
		case "pricePerNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerNEQ = data
		case "pricePerIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerIn = data
		case "pricePerNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerNotIn = data
		case "pricePerGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerGT = data
		case "pricePerGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerGTE = data
		case "pricePerLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerLT = data
		case "pricePerLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerLTE = data
		case "pricePerContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerContains = data
		case "pricePerHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerHasPrefix = data
		case "pricePerHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerHasSuffix = data
		case "pricePerEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerEqualFold = data
		case "pricePerContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pricePerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PricePerContainsFold = data
		case "hasPostal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPostal"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPostal = data
		case "hasPostalWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPostalWith"))
			data, err := ec.unmarshalOPostalCodeWhereInput2ᚕᚖroofixᚋentᚐPostalCodeWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPostalWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductPackageWhereInput(ctx context.Context, obj interface{}) (ent.ProductPackageWhereInput, error) {
	var it ent.ProductPackageWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "soldAs", "soldAsNEQ", "soldAsIn", "soldAsNotIn", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "price", "priceNEQ", "priceIn", "priceNotIn", "priceGT", "priceGTE", "priceLT", "priceLTE", "discontinued", "discontinuedNEQ", "discontinuedIsNil", "discontinuedNotNil", "hasItems", "hasItemsWith", "hasCreator", "hasCreatorWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProductPackageWhereInput2ᚖroofixᚋentᚐProductPackageWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProductPackageWhereInput2ᚕᚖroofixᚋentᚐProductPackageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProductPackageWhereInput2ᚕᚖroofixᚋentᚐProductPackageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOProductType2ᚖroofixᚋpkgᚋenumᚐProduct(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOProductType2ᚖroofixᚋpkgᚋenumᚐProduct(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOProductType2ᚕroofixᚋpkgᚋenumᚐProductᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOProductType2ᚕroofixᚋpkgᚋenumᚐProductᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "soldAs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("soldAs"))
			data, err := ec.unmarshalOSoldAs2ᚖroofixᚋpkgᚋenumᚐSoldAs(ctx, v)
			if err != nil {
				return it, err
			}
			it.SoldAs = data
		case "soldAsNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("soldAsNEQ"))
			data, err := ec.unmarshalOSoldAs2ᚖroofixᚋpkgᚋenumᚐSoldAs(ctx, v)
			if err != nil {
				return it, err
			}
			it.SoldAsNEQ = data
		case "soldAsIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("soldAsIn"))
			data, err := ec.unmarshalOSoldAs2ᚕroofixᚋpkgᚋenumᚐSoldAsᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SoldAsIn = data
		case "soldAsNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("soldAsNotIn"))
			data, err := ec.unmarshalOSoldAs2ᚕroofixᚋpkgᚋenumᚐSoldAsᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SoldAsNotIn = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "priceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNEQ = data
		case "priceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceIn = data
		case "priceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceNotIn = data
		case "priceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGT = data
		case "priceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceGTE = data
		case "priceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLT = data
		case "priceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceLTE = data
		case "discontinued":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinued"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discontinued = data
		case "discontinuedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedNEQ = data
		case "discontinuedIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedIsNil = data
		case "discontinuedNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedNotNil = data
		case "hasItems":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasItems"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasItems = data
		case "hasItemsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasItemsWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖroofixᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasItemsWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductWhereInput(ctx context.Context, obj interface{}) (ent.ProductWhereInput, error) {
	var it ent.ProductWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "specialNote", "specialNoteNEQ", "specialNoteIn", "specialNoteNotIn", "specialNoteGT", "specialNoteGTE", "specialNoteLT", "specialNoteLTE", "specialNoteContains", "specialNoteHasPrefix", "specialNoteHasSuffix", "specialNoteIsNil", "specialNoteNotNil", "specialNoteEqualFold", "specialNoteContainsFold", "unitPrice", "unitPriceNEQ", "unitPriceIn", "unitPriceNotIn", "unitPriceGT", "unitPriceGTE", "unitPriceLT", "unitPriceLTE", "unitsInStock", "unitsInStockNEQ", "unitsInStockIn", "unitsInStockNotIn", "unitsInStockGT", "unitsInStockGTE", "unitsInStockLT", "unitsInStockLTE", "unitsInStockIsNil", "unitsInStockNotNil", "unitsOnOrder", "unitsOnOrderNEQ", "unitsOnOrderIn", "unitsOnOrderNotIn", "unitsOnOrderGT", "unitsOnOrderGTE", "unitsOnOrderLT", "unitsOnOrderLTE", "unitsOnOrderIsNil", "unitsOnOrderNotNil", "discontinued", "discontinuedNEQ", "discontinuedIsNil", "discontinuedNotNil", "hasPackage", "hasPackageWith", "hasCreator", "hasCreatorWith", "hasImage", "hasImageWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProductWhereInput2ᚖroofixᚋentᚐProductWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖroofixᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖroofixᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOProductType2ᚖroofixᚋpkgᚋenumᚐProduct(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOProductType2ᚖroofixᚋpkgᚋenumᚐProduct(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOProductType2ᚕroofixᚋpkgᚋenumᚐProductᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOProductType2ᚕroofixᚋpkgᚋenumᚐProductᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "specialNote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNote = data
		case "specialNoteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNEQ = data
		case "specialNoteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteIn = data
		case "specialNoteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNotIn = data
		case "specialNoteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteGT = data
		case "specialNoteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteGTE = data
		case "specialNoteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteLT = data
		case "specialNoteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteLTE = data
		case "specialNoteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteContains = data
		case "specialNoteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteHasPrefix = data
		case "specialNoteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteHasSuffix = data
		case "specialNoteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteIsNil = data
		case "specialNoteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteNotNil = data
		case "specialNoteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteEqualFold = data
		case "specialNoteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specialNoteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpecialNoteContainsFold = data
		case "unitPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPrice = data
		case "unitPriceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceNEQ = data
		case "unitPriceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceIn = data
		case "unitPriceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceNotIn = data
		case "unitPriceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceGT = data
		case "unitPriceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceGTE = data
		case "unitPriceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceLT = data
		case "unitPriceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPriceLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPriceLTE = data
		case "unitsInStock":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStock"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStock = data
		case "unitsInStockNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockNEQ = data
		case "unitsInStockIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockIn = data
		case "unitsInStockNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockNotIn = data
		case "unitsInStockGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockGT = data
		case "unitsInStockGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockGTE = data
		case "unitsInStockLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockLT = data
		case "unitsInStockLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockLTE = data
		case "unitsInStockIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockIsNil = data
		case "unitsInStockNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsInStockNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsInStockNotNil = data
		case "unitsOnOrder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrder"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrder = data
		case "unitsOnOrderNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderNEQ = data
		case "unitsOnOrderIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderIn = data
		case "unitsOnOrderNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderNotIn = data
		case "unitsOnOrderGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderGT = data
		case "unitsOnOrderGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderGTE = data
		case "unitsOnOrderLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderLT = data
		case "unitsOnOrderLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderLTE = data
		case "unitsOnOrderIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderIsNil = data
		case "unitsOnOrderNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitsOnOrderNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitsOnOrderNotNil = data
		case "discontinued":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinued"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discontinued = data
		case "discontinuedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedNEQ = data
		case "discontinuedIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedIsNil = data
		case "discontinuedNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedNotNil = data
		case "hasPackage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackage = data
		case "hasPackageWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageWith"))
			data, err := ec.unmarshalOProductPackageWhereInput2ᚕᚖroofixᚋentᚐProductPackageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasImage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasImage = data
		case "hasImageWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasImageWith"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasImageWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurveyProgressWhereInput(ctx context.Context, obj interface{}) (ent.SurveyProgressWhereInput, error) {
	var it ent.SurveyProgressWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "complete", "completeNEQ", "completeIsNil", "completeNotNil", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "hasSurvey", "hasSurveyWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSurveyProgressWhereInput2ᚖroofixᚋentᚐSurveyProgressWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSurveyProgressWhereInput2ᚕᚖroofixᚋentᚐSurveyProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSurveyProgressWhereInput2ᚕᚖroofixᚋentᚐSurveyProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOSurveyProgress2ᚖroofixᚋpkgᚋenumᚐSurveyProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOSurveyProgress2ᚖroofixᚋpkgᚋenumᚐSurveyProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOSurveyProgress2ᚕroofixᚋpkgᚋenumᚐSurveyProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOSurveyProgress2ᚕroofixᚋpkgᚋenumᚐSurveyProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complete"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Complete = data
		case "completeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteNEQ = data
		case "completeIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteIsNil = data
		case "completeNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompleteNotNil = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "hasSurvey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurvey"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurvey = data
		case "hasSurveyWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveyWith"))
			data, err := ec.unmarshalOSurveyWhereInput2ᚕᚖroofixᚋentᚐSurveyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveyWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurveyWhereInput(ctx context.Context, obj interface{}) (ent.SurveyWhereInput, error) {
	var it ent.SurveyWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "dateContains", "dateHasPrefix", "dateHasSuffix", "dateEqualFold", "dateContainsFold", "slot", "slotNEQ", "slotIn", "slotNotIn", "slotGT", "slotGTE", "slotLT", "slotLTE", "slotContains", "slotHasPrefix", "slotHasSuffix", "slotEqualFold", "slotContainsFold", "slotID", "slotIDNEQ", "slotIDIn", "slotIDNotIn", "slotIDGT", "slotIDGTE", "slotIDLT", "slotIDLTE", "slotIDContains", "slotIDHasPrefix", "slotIDHasSuffix", "slotIDEqualFold", "slotIDContainsFold", "from", "fromNEQ", "fromIn", "fromNotIn", "fromGT", "fromGTE", "fromLT", "fromLTE", "to", "toNEQ", "toIn", "toNotIn", "toGT", "toGTE", "toLT", "toLTE", "until", "untilNEQ", "untilIn", "untilNotIn", "untilGT", "untilGTE", "untilLT", "untilLTE", "untilIsNil", "untilNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "notes", "notesNEQ", "notesIn", "notesNotIn", "notesGT", "notesGTE", "notesLT", "notesLTE", "notesContains", "notesHasPrefix", "notesHasSuffix", "notesIsNil", "notesNotNil", "notesEqualFold", "notesContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "progress", "progressNEQ", "progressIn", "progressNotIn", "progressIsNil", "progressNotNil", "progressAt", "progressAtNEQ", "progressAtIn", "progressAtNotIn", "progressAtGT", "progressAtGTE", "progressAtLT", "progressAtLTE", "progressAtIsNil", "progressAtNotNil", "progressFlagAt", "progressFlagAtNEQ", "progressFlagAtIn", "progressFlagAtNotIn", "progressFlagAtGT", "progressFlagAtGTE", "progressFlagAtLT", "progressFlagAtLTE", "progressFlagAtIsNil", "progressFlagAtNotNil", "hasProgressHistory", "hasProgressHistoryWith", "hasCreatedBy", "hasCreatedByWith", "hasPartner", "hasPartnerWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSurveyWhereInput2ᚖroofixᚋentᚐSurveyWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSurveyWhereInput2ᚕᚖroofixᚋentᚐSurveyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSurveyWhereInput2ᚕᚖroofixᚋentᚐSurveyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "dateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateContains = data
		case "dateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateHasPrefix = data
		case "dateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateHasSuffix = data
		case "dateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateEqualFold = data
		case "dateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateContainsFold = data
		case "slot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "slotNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotNEQ = data
		case "slotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIn = data
		case "slotNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotNotIn = data
		case "slotGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotGT = data
		case "slotGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotGTE = data
		case "slotLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotLT = data
		case "slotLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotLTE = data
		case "slotContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotContains = data
		case "slotHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotHasPrefix = data
		case "slotHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotHasSuffix = data
		case "slotEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotEqualFold = data
		case "slotContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotContainsFold = data
		case "slotID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotID = data
		case "slotIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDNEQ = data
		case "slotIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDIn = data
		case "slotIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDNotIn = data
		case "slotIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDGT = data
		case "slotIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDGTE = data
		case "slotIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDLT = data
		case "slotIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDLTE = data
		case "slotIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDContains = data
		case "slotIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDHasPrefix = data
		case "slotIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDHasSuffix = data
		case "slotIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDEqualFold = data
		case "slotIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slotIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlotIDContainsFold = data
		case "from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.From = data
		case "fromNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNEQ = data
		case "fromIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromIn = data
		case "fromNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromNotIn = data
		case "fromGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromGT = data
		case "fromGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromGTE = data
		case "fromLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromLT = data
		case "fromLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromLTE = data
		case "to":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.To = data
		case "toNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNEQ = data
		case "toIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToIn = data
		case "toNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToNotIn = data
		case "toGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToGT = data
		case "toGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToGTE = data
		case "toLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToLT = data
		case "toLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ToLTE = data
		case "until":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("until"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Until = data
		case "untilNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilNEQ = data
		case "untilIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilIn = data
		case "untilNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilNotIn = data
		case "untilGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilGT = data
		case "untilGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilGTE = data
		case "untilLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilLT = data
		case "untilLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilLTE = data
		case "untilIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilIsNil = data
		case "untilNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilNotNil = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "notesNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesNEQ = data
		case "notesIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesIn = data
		case "notesNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesNotIn = data
		case "notesGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesGT = data
		case "notesGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesGTE = data
		case "notesLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesLT = data
		case "notesLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesLTE = data
		case "notesContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesContains = data
		case "notesHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesHasPrefix = data
		case "notesHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesHasSuffix = data
		case "notesIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesIsNil = data
		case "notesNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesNotNil = data
		case "notesEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesEqualFold = data
		case "notesContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notesContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotesContainsFold = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOSurveyStatus2ᚖroofixᚋpkgᚋenumᚐSurveyStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOSurveyStatus2ᚖroofixᚋpkgᚋenumᚐSurveyStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOSurveyStatus2ᚕroofixᚋpkgᚋenumᚐSurveyStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOSurveyStatus2ᚕroofixᚋpkgᚋenumᚐSurveyStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			data, err := ec.unmarshalOSurveyProgress2ᚖroofixᚋpkgᚋenumᚐSurveyProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.Progress = data
		case "progressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNEQ"))
			data, err := ec.unmarshalOSurveyProgress2ᚖroofixᚋpkgᚋenumᚐSurveyProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNEQ = data
		case "progressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressIn"))
			data, err := ec.unmarshalOSurveyProgress2ᚕroofixᚋpkgᚋenumᚐSurveyProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressIn = data
		case "progressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNotIn"))
			data, err := ec.unmarshalOSurveyProgress2ᚕroofixᚋpkgᚋenumᚐSurveyProgressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNotIn = data
		case "progressIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressIsNil = data
		case "progressNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressNotNil = data
		case "progressAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAt = data
		case "progressAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtNEQ = data
		case "progressAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtIn = data
		case "progressAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtNotIn = data
		case "progressAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtGT = data
		case "progressAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtGTE = data
		case "progressAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtLT = data
		case "progressAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtLTE = data
		case "progressAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtIsNil = data
		case "progressAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAtNotNil = data
		case "progressFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAt = data
		case "progressFlagAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtNEQ = data
		case "progressFlagAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtIn = data
		case "progressFlagAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtNotIn = data
		case "progressFlagAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtGT = data
		case "progressFlagAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtGTE = data
		case "progressFlagAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtLT = data
		case "progressFlagAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtLTE = data
		case "progressFlagAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtIsNil = data
		case "progressFlagAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAtNotNil = data
		case "hasProgressHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProgressHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProgressHistory = data
		case "hasProgressHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProgressHistoryWith"))
			data, err := ec.unmarshalOSurveyProgressWhereInput2ᚕᚖroofixᚋentᚐSurveyProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProgressHistoryWith = data
		case "hasCreatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTokenWhereInput(ctx context.Context, obj interface{}) (ent.TokenWhereInput, error) {
	var it ent.TokenWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "confirmedAt", "confirmedAtNEQ", "confirmedAtIn", "confirmedAtNotIn", "confirmedAtGT", "confirmedAtGTE", "confirmedAtLT", "confirmedAtLTE", "confirmedAtIsNil", "confirmedAtNotNil", "action", "actionNEQ", "actionIn", "actionNotIn", "actionGT", "actionGTE", "actionLT", "actionLTE", "actionContains", "actionHasPrefix", "actionHasSuffix", "actionEqualFold", "actionContainsFold"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTokenWhereInput2ᚖroofixᚋentᚐTokenWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖroofixᚋentᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTokenWhereInput2ᚕᚖroofixᚋentᚐTokenWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "confirmedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAt = data
		case "confirmedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtNEQ = data
		case "confirmedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtIn = data
		case "confirmedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtNotIn = data
		case "confirmedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtGT = data
		case "confirmedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtGTE = data
		case "confirmedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtLT = data
		case "confirmedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtLTE = data
		case "confirmedAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtIsNil = data
		case "confirmedAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmedAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmedAtNotNil = data
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Action = data
		case "actionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNEQ = data
		case "actionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionIn = data
		case "actionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNotIn = data
		case "actionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionGT = data
		case "actionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionGTE = data
		case "actionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLT = data
		case "actionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLTE = data
		case "actionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionContains = data
		case "actionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionHasPrefix = data
		case "actionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionHasSuffix = data
		case "actionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionEqualFold = data
		case "actionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionContainsFold = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingCourseWhereInput(ctx context.Context, obj interface{}) (ent.TrainingCourseWhereInput, error) {
	var it ent.TrainingCourseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "hasTrainingVideos", "hasTrainingVideosWith", "hasCreator", "hasCreatorWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTrainingCourseWhereInput2ᚖroofixᚋentᚐTrainingCourseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTrainingCourseWhereInput2ᚕᚖroofixᚋentᚐTrainingCourseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTrainingCourseWhereInput2ᚕᚖroofixᚋentᚐTrainingCourseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "hasTrainingVideos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideos"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideos = data
		case "hasTrainingVideosWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideosWith"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideosWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingVideoWhereInput(ctx context.Context, obj interface{}) (ent.TrainingVideoWhereInput, error) {
	var it ent.TrainingVideoWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "kind", "kindNEQ", "kindIn", "kindNotIn", "title", "titleNEQ", "titleIn", "titleNotIn", "titleGT", "titleGTE", "titleLT", "titleLTE", "titleContains", "titleHasPrefix", "titleHasSuffix", "titleEqualFold", "titleContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasTrainingVideos", "hasTrainingVideosWith", "hasCreator", "hasCreatorWith", "hasCourse", "hasCourseWith", "hasPoster", "hasPosterWith", "hasVideo", "hasVideoWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚖroofixᚋentᚐTrainingVideoWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			data, err := ec.unmarshalOTrainingType2ᚖroofixᚋpkgᚋenumᚐTrainingType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Kind = data
		case "kindNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kindNEQ"))
			data, err := ec.unmarshalOTrainingType2ᚖroofixᚋpkgᚋenumᚐTrainingType(ctx, v)
			if err != nil {
				return it, err
			}
			it.KindNEQ = data
		case "kindIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kindIn"))
			data, err := ec.unmarshalOTrainingType2ᚕroofixᚋpkgᚋenumᚐTrainingTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KindIn = data
		case "kindNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kindNotIn"))
			data, err := ec.unmarshalOTrainingType2ᚕroofixᚋpkgᚋenumᚐTrainingTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KindNotIn = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "titleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNEQ = data
		case "titleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIn = data
		case "titleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotIn = data
		case "titleGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGT = data
		case "titleGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGTE = data
		case "titleLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLT = data
		case "titleLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLTE = data
		case "titleContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContains = data
		case "titleHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasPrefix = data
		case "titleHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasSuffix = data
		case "titleEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleEqualFold = data
		case "titleContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContainsFold = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasTrainingVideos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideos"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideos = data
		case "hasTrainingVideosWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTrainingVideosWith"))
			data, err := ec.unmarshalOPartnerTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐPartnerTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTrainingVideosWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCourse":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCourse"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCourse = data
		case "hasCourseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCourseWith"))
			data, err := ec.unmarshalOTrainingCourseWhereInput2ᚕᚖroofixᚋentᚐTrainingCourseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCourseWith = data
		case "hasPoster":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPoster"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPoster = data
		case "hasPosterWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPosterWith"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPosterWith = data
		case "hasVideo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVideo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVideo = data
		case "hasVideoWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVideoWith"))
			data, err := ec.unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVideoWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateJobInput(ctx context.Context, obj interface{}) (ent.UpdateJobInput, error) {
	var it ent.UpdateJobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "progress", "clearProgress", "progressAt", "clearProgressAt", "progressFlagAt", "clearProgressFlagAt", "regionID", "clearRegionID", "companyRefID", "clearCompanyRefID", "companyName", "clearCompanyName", "price", "workOrderPrice", "contractPrice", "clearContractPrice", "changeOrderPrice", "clearChangeOrderPrice", "note", "clearNote", "shingleColor", "clearShingleColor", "permitRequired", "clearPermitRequired", "inspectionRequired", "clearInspectionRequired", "inspectionDate", "clearInspectionDate", "progressInspectionDate", "clearProgressInspectionDate", "installDate", "clearInstallDate", "completionDate", "clearCompletionDate", "materialDeliveryDate", "clearMaterialDeliveryDate", "agree", "clearAgree", "agreeAt", "clearAgreeAt", "poNumber", "clearPoNumber", "roofingPartnerAssignedAt", "clearRoofingPartnerAssignedAt", "roofingPartnerFlagAt", "clearRoofingPartnerFlagAt", "addPaymentIDs", "removePaymentIDs", "clearPayments", "addActivityIDs", "removeActivityIDs", "clearActivities", "addAssignmentHistoryIDs", "removeAssignmentHistoryIDs", "clearAssignmentHistory", "addProgressHistoryIDs", "removeProgressHistoryIDs", "clearProgressHistory", "addNoteIDs", "removeNoteIDs", "clearNotes", "addDocURLIDs", "removeDocURLIDs", "clearDocUrls", "estimateID", "clearEstimate", "creatorAPIID", "clearCreatorAPI", "creatorID", "clearCreator", "homeOwnerID", "clearHomeOwner", "salesRepID", "clearSalesRep", "requesterID", "clearRequester", "roofingPartnerID", "clearRoofingPartner", "integrationPartnerID", "clearIntegrationPartner", "epcPartnerID", "clearEpcPartner", "epcID", "clearEpc", "estimatePdfID", "clearEstimatePdf"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			data, err := ec.unmarshalOJobProgress2ᚖroofixᚋpkgᚋenumᚐJobProgress(ctx, v)
			if err != nil {
				return it, err
			}
			it.Progress = data
		case "clearProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProgress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProgress = data
		case "progressAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressAt = data
		case "clearProgressAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProgressAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProgressAt = data
		case "progressFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressFlagAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressFlagAt = data
		case "clearProgressFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProgressFlagAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProgressFlagAt = data
		case "regionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UpdateJobInput().RegionID(ctx, &it, data); err != nil {
				return it, err
			}
		case "clearRegionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRegionID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRegionID = data
		case "companyRefID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyRefID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyRefID = data
		case "clearCompanyRefID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompanyRefID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompanyRefID = data
		case "companyName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyName = data
		case "clearCompanyName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompanyName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompanyName = data
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "workOrderPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workOrderPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkOrderPrice = data
		case "contractPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractPrice = data
		case "clearContractPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractPrice"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractPrice = data
		case "changeOrderPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeOrderPrice"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeOrderPrice = data
		case "clearChangeOrderPrice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearChangeOrderPrice"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearChangeOrderPrice = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "clearNote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNote"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNote = data
		case "shingleColor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shingleColor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShingleColor = data
		case "clearShingleColor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearShingleColor"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearShingleColor = data
		case "permitRequired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permitRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PermitRequired = data
		case "clearPermitRequired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPermitRequired"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPermitRequired = data
		case "inspectionRequired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionRequired = data
		case "clearInspectionRequired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearInspectionRequired"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearInspectionRequired = data
		case "inspectionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspectionDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InspectionDate = data
		case "clearInspectionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearInspectionDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearInspectionDate = data
		case "progressInspectionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progressInspectionDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgressInspectionDate = data
		case "clearProgressInspectionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProgressInspectionDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProgressInspectionDate = data
		case "installDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallDate = data
		case "clearInstallDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearInstallDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearInstallDate = data
		case "completionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionDate = data
		case "clearCompletionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompletionDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompletionDate = data
		case "materialDeliveryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialDeliveryDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialDeliveryDate = data
		case "clearMaterialDeliveryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMaterialDeliveryDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMaterialDeliveryDate = data
		case "agree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agree"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Agree = data
		case "clearAgree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAgree"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAgree = data
		case "agreeAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreeAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgreeAt = data
		case "clearAgreeAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAgreeAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAgreeAt = data
		case "poNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoNumber = data
		case "clearPoNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPoNumber"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPoNumber = data
		case "roofingPartnerAssignedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerAssignedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerAssignedAt = data
		case "clearRoofingPartnerAssignedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRoofingPartnerAssignedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRoofingPartnerAssignedAt = data
		case "roofingPartnerFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerFlagAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerFlagAt = data
		case "clearRoofingPartnerFlagAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRoofingPartnerFlagAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRoofingPartnerFlagAt = data
		case "addPaymentIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addPaymentIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddPaymentIDs = data
		case "removePaymentIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removePaymentIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemovePaymentIDs = data
		case "clearPayments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPayments"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPayments = data
		case "addActivityIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addActivityIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddActivityIDs = data
		case "removeActivityIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeActivityIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveActivityIDs = data
		case "clearActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearActivities"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearActivities = data
		case "addAssignmentHistoryIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAssignmentHistoryIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAssignmentHistoryIDs = data
		case "removeAssignmentHistoryIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAssignmentHistoryIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAssignmentHistoryIDs = data
		case "clearAssignmentHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAssignmentHistory"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAssignmentHistory = data
		case "addProgressHistoryIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProgressHistoryIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProgressHistoryIDs = data
		case "removeProgressHistoryIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProgressHistoryIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProgressHistoryIDs = data
		case "clearProgressHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProgressHistory"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProgressHistory = data
		case "addNoteIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addNoteIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddNoteIDs = data
		case "removeNoteIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeNoteIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveNoteIDs = data
		case "clearNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNotes"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNotes = data
		case "addDocURLIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addDocURLIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddDocURLIDs = data
		case "removeDocURLIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeDocURLIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveDocURLIDs = data
		case "clearDocUrls":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDocUrls"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDocUrls = data
		case "estimateID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimateID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimateID = data
		case "clearEstimate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEstimate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEstimate = data
		case "creatorAPIID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorAPIID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorAPIID = data
		case "clearCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatorAPI"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatorAPI = data
		case "creatorID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorID = data
		case "clearCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreator"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreator = data
		case "homeOwnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("homeOwnerID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HomeOwnerID = data
		case "clearHomeOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearHomeOwner"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearHomeOwner = data
		case "salesRepID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesRepID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesRepID = data
		case "clearSalesRep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSalesRep"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSalesRep = data
		case "requesterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequesterID = data
		case "clearRequester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRequester"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRequester = data
		case "roofingPartnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roofingPartnerID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoofingPartnerID = data
		case "clearRoofingPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRoofingPartner"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRoofingPartner = data
		case "integrationPartnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("integrationPartnerID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IntegrationPartnerID = data
		case "clearIntegrationPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIntegrationPartner"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIntegrationPartner = data
		case "epcPartnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcPartnerID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EpcPartnerID = data
		case "clearEpcPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEpcPartner"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEpcPartner = data
		case "epcID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epcID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EpcID = data
		case "clearEpc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEpc"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEpc = data
		case "estimatePdfID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatePdfID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatePdfID = data
		case "clearEstimatePdf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEstimatePdf"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEstimatePdf = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePartnerServiceCityInput(ctx context.Context, obj interface{}) (ent.UpdatePartnerServiceCityInput, error) {
	var it ent.UpdatePartnerServiceCityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "postalID", "active", "name", "naicsCode", "licenseNo", "clearLicenseNo", "proofDocID", "clearProofDocID", "partnerID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "postalID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalID = data
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "naicsCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naicsCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UpdatePartnerServiceCityInput().NaicsCode(ctx, &it, data); err != nil {
				return it, err
			}
		case "licenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNo = data
		case "clearLicenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLicenseNo"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLicenseNo = data
		case "proofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocID = data
		case "clearProofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProofDocID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProofDocID = data
		case "partnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partnerID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartnerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePartnerServiceStateInput(ctx context.Context, obj interface{}) (ent.UpdatePartnerServiceStateInput, error) {
	var it ent.UpdatePartnerServiceStateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "country", "state", "licenseNo", "clearLicenseNo", "licenseExpDate", "clearLicenseExpDate", "proofDocID", "clearProofDocID", "partnerID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "licenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNo = data
		case "clearLicenseNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLicenseNo"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLicenseNo = data
		case "licenseExpDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseExpDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseExpDate = data
		case "clearLicenseExpDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLicenseExpDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLicenseExpDate = data
		case "proofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proofDocID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProofDocID = data
		case "clearProofDocID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProofDocID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProofDocID = data
		case "partnerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partnerID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartnerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserActivityWhereInput(ctx context.Context, obj interface{}) (ent.UserActivityWhereInput, error) {
	var it ent.UserActivityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionEqualFold", "descriptionContainsFold", "hasUser", "hasUserWith", "hasCreator", "hasCreatorWith", "hasCreatorAPI", "hasCreatorAPIWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserActivityWhereInput2ᚖroofixᚋentᚐUserActivityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserActivityWhereInput2ᚕᚖroofixᚋentᚐUserActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserActivityWhereInput2ᚕᚖroofixᚋentᚐUserActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasCreator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreator = data
		case "hasCreatorWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorWith = data
		case "hasCreatorAPI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPI"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPI = data
		case "hasCreatorAPIWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatorAPIWith"))
			data, err := ec.unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatorAPIWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserAuthWhereInput(ctx context.Context, obj interface{}) (ent.UserAuthWhereInput, error) {
	var it ent.UserAuthWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "providerID", "providerIDNEQ", "providerIDIn", "providerIDNotIn", "providerIDGT", "providerIDGTE", "providerIDLT", "providerIDLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "hasUser", "hasUserWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserAuthWhereInput2ᚖroofixᚋentᚐUserAuthWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserAuthWhereInput2ᚕᚖroofixᚋentᚐUserAuthWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserAuthWhereInput2ᚕᚖroofixᚋentᚐUserAuthWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "providerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderID(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "providerIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserAuthWhereInput().ProviderIDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserSessionSocketWhereInput(ctx context.Context, obj interface{}) (ent.UserSessionSocketWhereInput, error) {
	var it ent.UserSessionSocketWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "hasSession", "hasSessionWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserSessionSocketWhereInput2ᚖroofixᚋentᚐUserSessionSocketWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserSessionSocketWhereInput2ᚕᚖroofixᚋentᚐUserSessionSocketWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserSessionSocketWhereInput2ᚕᚖroofixᚋentᚐUserSessionSocketWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "hasSession":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSession"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSession = data
		case "hasSessionWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSessionWith"))
			data, err := ec.unmarshalOUserSessionWhereInput2ᚕᚖroofixᚋentᚐUserSessionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSessionWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserSessionWhereInput(ctx context.Context, obj interface{}) (ent.UserSessionWhereInput, error) {
	var it ent.UserSessionWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "expiresAt", "expiresAtNEQ", "expiresAtIn", "expiresAtNotIn", "expiresAtGT", "expiresAtGTE", "expiresAtLT", "expiresAtLTE", "ip", "ipNEQ", "ipIn", "ipNotIn", "ipGT", "ipGTE", "ipLT", "ipLTE", "ipContains", "ipHasPrefix", "ipHasSuffix", "ipEqualFold", "ipContainsFold", "hasSockets", "hasSocketsWith", "hasUser", "hasUserWith", "hasPartner", "hasPartnerWith", "hasPartnerContact", "hasPartnerContactWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserSessionWhereInput2ᚖroofixᚋentᚐUserSessionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserSessionWhereInput2ᚕᚖroofixᚋentᚐUserSessionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserSessionWhereInput2ᚕᚖroofixᚋentᚐUserSessionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "expiresAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		case "expiresAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtNEQ = data
		case "expiresAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtIn = data
		case "expiresAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtNotIn = data
		case "expiresAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtGT = data
		case "expiresAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtGTE = data
		case "expiresAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtLT = data
		case "expiresAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAtLTE = data
		case "ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IP = data
		case "ipNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPNEQ = data
		case "ipIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPIn = data
		case "ipNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPNotIn = data
		case "ipGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPGT = data
		case "ipGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPGTE = data
		case "ipLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPLT = data
		case "ipLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPLTE = data
		case "ipContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPContains = data
		case "ipHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPHasPrefix = data
		case "ipHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPHasSuffix = data
		case "ipEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPEqualFold = data
		case "ipContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPContainsFold = data
		case "hasSockets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSockets"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSockets = data
		case "hasSocketsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSocketsWith"))
			data, err := ec.unmarshalOUserSessionSocketWhereInput2ᚕᚖroofixᚋentᚐUserSessionSocketWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSocketsWith = data
		case "hasUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUser"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUser = data
		case "hasUserWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		case "hasPartnerContact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerContact"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerContact = data
		case "hasPartnerContactWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerContactWith"))
			data, err := ec.unmarshalOPartnerContactWhereInput2ᚕᚖroofixᚋentᚐPartnerContactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerContactWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhereInput(ctx context.Context, obj interface{}) (ent.UserWhereInput, error) {
	var it ent.UserWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "idEqualFold", "idContainsFold", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "deletedAt", "deletedAtNEQ", "deletedAtIn", "deletedAtNotIn", "deletedAtGT", "deletedAtGTE", "deletedAtLT", "deletedAtLTE", "deletedAtIsNil", "deletedAtNotNil", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "externalID", "externalIDNEQ", "externalIDIn", "externalIDNotIn", "externalIDGT", "externalIDGTE", "externalIDLT", "externalIDLTE", "externalIDContains", "externalIDHasPrefix", "externalIDHasSuffix", "externalIDIsNil", "externalIDNotNil", "externalIDEqualFold", "externalIDContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailEqualFold", "emailContainsFold", "phone", "phoneNEQ", "phoneIn", "phoneNotIn", "phoneGT", "phoneGTE", "phoneLT", "phoneLTE", "phoneContains", "phoneHasPrefix", "phoneHasSuffix", "phoneIsNil", "phoneNotNil", "phoneEqualFold", "phoneContainsFold", "firstName", "firstNameNEQ", "firstNameIn", "firstNameNotIn", "firstNameGT", "firstNameGTE", "firstNameLT", "firstNameLTE", "firstNameContains", "firstNameHasPrefix", "firstNameHasSuffix", "firstNameIsNil", "firstNameNotNil", "firstNameEqualFold", "firstNameContainsFold", "lastName", "lastNameNEQ", "lastNameIn", "lastNameNotIn", "lastNameGT", "lastNameGTE", "lastNameLT", "lastNameLTE", "lastNameContains", "lastNameHasPrefix", "lastNameHasSuffix", "lastNameIsNil", "lastNameNotNil", "lastNameEqualFold", "lastNameContainsFold", "emailVerified", "emailVerifiedNEQ", "phoneVerified", "phoneVerifiedNEQ", "picture", "pictureNEQ", "pictureIn", "pictureNotIn", "pictureGT", "pictureGTE", "pictureLT", "pictureLTE", "pictureContains", "pictureHasPrefix", "pictureHasSuffix", "pictureIsNil", "pictureNotNil", "pictureEqualFold", "pictureContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "role", "roleNEQ", "roleIn", "roleNotIn", "note", "noteNEQ", "noteIn", "noteNotIn", "noteGT", "noteGTE", "noteLT", "noteLTE", "noteContains", "noteHasPrefix", "noteHasSuffix", "noteIsNil", "noteNotNil", "noteEqualFold", "noteContainsFold", "wrongAttempts", "wrongAttemptsNEQ", "wrongAttemptsIn", "wrongAttemptsNotIn", "wrongAttemptsGT", "wrongAttemptsGTE", "wrongAttemptsLT", "wrongAttemptsLTE", "wrongAttemptsIsNil", "wrongAttemptsNotNil", "wrongAttemptAt", "wrongAttemptAtNEQ", "wrongAttemptAtIn", "wrongAttemptAtNotIn", "wrongAttemptAtGT", "wrongAttemptAtGTE", "wrongAttemptAtLT", "wrongAttemptAtLTE", "wrongAttemptAtIsNil", "wrongAttemptAtNotNil", "lockedUntil", "lockedUntilNEQ", "lockedUntilIn", "lockedUntilNotIn", "lockedUntilGT", "lockedUntilGTE", "lockedUntilLT", "lockedUntilLTE", "lockedUntilIsNil", "lockedUntilNotNil", "location", "locationNEQ", "locationIn", "locationNotIn", "locationGT", "locationGTE", "locationLT", "locationLTE", "locationContains", "locationHasPrefix", "locationHasSuffix", "locationIsNil", "locationNotNil", "locationEqualFold", "locationContainsFold", "acceptedGeneralTerms", "acceptedGeneralTermsNEQ", "acceptedGeneralTermsIsNil", "acceptedGeneralTermsNotNil", "acceptedTermsNPrivacy", "acceptedTermsNPrivacyNEQ", "acceptedTermsNPrivacyIsNil", "acceptedTermsNPrivacyNotNil", "hasAuths", "hasAuthsWith", "hasSessions", "hasSessionsWith", "hasAuditLogs", "hasAuditLogsWith", "hasNotify", "hasNotifyWith", "hasCreatedJobs", "hasCreatedJobsWith", "hasCreatedEstimates", "hasCreatedEstimatesWith", "hasSalesRepEstimates", "hasSalesRepEstimatesWith", "hasSales", "hasSalesWith", "hasCreatedInstallationJobs", "hasCreatedInstallationJobsWith", "hasInstallationLeads", "hasInstallationLeadsWith", "hasEstimateActivities", "hasEstimateActivitiesWith", "hasJobActivities", "hasJobActivitiesWith", "hasPartnerActivities", "hasPartnerActivitiesWith", "hasUserActivities", "hasUserActivitiesWith", "hasActivities", "hasActivitiesWith", "hasJobProgressHistory", "hasJobProgressHistoryWith", "hasInstallationJobStatusChanger", "hasInstallationJobStatusChangerWith", "hasContactUsRequests", "hasContactUsRequestsWith", "hasPartner", "hasPartnerWith", "hasSurveys", "hasSurveysWith", "hasSurveyProgress", "hasSurveyProgressWith", "hasCreatedTrainingVideos", "hasCreatedTrainingVideosWith", "hasCreatedTrainingCourses", "hasCreatedTrainingCoursesWith", "hasJobNotes", "hasJobNotesWith", "hasChatChannels", "hasChatChannelsWith", "hasSentMessages", "hasSentMessagesWith", "hasReceivedMessages", "hasReceivedMessagesWith", "hasChannelMessageRead", "hasChannelMessageReadWith", "hasProductsCreated", "hasProductsCreatedWith", "hasProductPkgCreated", "hasProductPkgCreatedWith", "hasJobDocUrls", "hasJobDocUrlsWith", "hasPartnerContacts", "hasPartnerContactsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserWhereInput2ᚖroofixᚋentᚐUserWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "idEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEqualFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDEqualFold = data
		case "idContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idContainsFold"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDContainsFold = data
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		case "deletedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNEQ = data
		case "deletedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIn = data
		case "deletedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotIn = data
		case "deletedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGT = data
		case "deletedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtGTE = data
		case "deletedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLT = data
		case "deletedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtLTE = data
		case "deletedAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtIsNil = data
		case "deletedAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAtNotNil = data
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "externalID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		case "externalIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDNEQ = data
		case "externalIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDIn = data
		case "externalIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDNotIn = data
		case "externalIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDGT = data
		case "externalIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDGTE = data
		case "externalIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDLT = data
		case "externalIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDLTE = data
		case "externalIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDContains = data
		case "externalIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDHasPrefix = data
		case "externalIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDHasSuffix = data
		case "externalIDIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDIsNil = data
		case "externalIDNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDNotNil = data
		case "externalIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDEqualFold = data
		case "externalIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIDContainsFold = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "phoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNEQ = data
		case "phoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIn = data
		case "phoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotIn = data
		case "phoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGT = data
		case "phoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneGTE = data
		case "phoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLT = data
		case "phoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneLTE = data
		case "phoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContains = data
		case "phoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasPrefix = data
		case "phoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneHasSuffix = data
		case "phoneIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneIsNil = data
		case "phoneNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNotNil = data
		case "phoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneEqualFold = data
		case "phoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneContainsFold = data
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "firstNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameNEQ = data
		case "firstNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameIn = data
		case "firstNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameNotIn = data
		case "firstNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameGT = data
		case "firstNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameGTE = data
		case "firstNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameLT = data
		case "firstNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameLTE = data
		case "firstNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameContains = data
		case "firstNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameHasPrefix = data
		case "firstNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameHasSuffix = data
		case "firstNameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameIsNil = data
		case "firstNameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameNotNil = data
		case "firstNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameEqualFold = data
		case "firstNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstNameContainsFold = data
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "lastNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameNEQ = data
		case "lastNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameIn = data
		case "lastNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameNotIn = data
		case "lastNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameGT = data
		case "lastNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameGTE = data
		case "lastNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameLT = data
		case "lastNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameLTE = data
		case "lastNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameContains = data
		case "lastNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameHasPrefix = data
		case "lastNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameHasSuffix = data
		case "lastNameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameIsNil = data
		case "lastNameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameNotNil = data
		case "lastNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameEqualFold = data
		case "lastNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastNameContainsFold = data
		case "emailVerified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailVerified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailVerified = data
		case "emailVerifiedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailVerifiedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailVerifiedNEQ = data
		case "phoneVerified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneVerified"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneVerified = data
		case "phoneVerifiedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneVerifiedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneVerifiedNEQ = data
		case "picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Picture = data
		case "pictureNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureNEQ = data
		case "pictureIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureIn = data
		case "pictureNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureNotIn = data
		case "pictureGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureGT = data
		case "pictureGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureGTE = data
		case "pictureLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureLT = data
		case "pictureLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureLTE = data
		case "pictureContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureContains = data
		case "pictureHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureHasPrefix = data
		case "pictureHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureHasSuffix = data
		case "pictureIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureIsNil = data
		case "pictureNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureNotNil = data
		case "pictureEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureEqualFold = data
		case "pictureContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pictureContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PictureContainsFold = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOAccountStatus2ᚖroofixᚋpkgᚋenumᚐAccountStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOAccountStatus2ᚖroofixᚋpkgᚋenumᚐAccountStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOAccountStatus2ᚕroofixᚋpkgᚋenumᚐAccountStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOAccountStatus2ᚕroofixᚋpkgᚋenumᚐAccountStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalORole2ᚖroofixᚋpkgᚋenumᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "roleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNEQ"))
			data, err := ec.unmarshalORole2ᚖroofixᚋpkgᚋenumᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNEQ = data
		case "roleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIn"))
			data, err := ec.unmarshalORole2ᚕroofixᚋpkgᚋenumᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIn = data
		case "roleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleNotIn"))
			data, err := ec.unmarshalORole2ᚕroofixᚋpkgᚋenumᚐRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleNotIn = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNEQ = data
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIn = data
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotIn = data
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGT = data
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteGTE = data
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLT = data
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteLTE = data
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContains = data
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasPrefix = data
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteHasSuffix = data
		case "noteIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteIsNil = data
		case "noteNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteNotNil = data
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteEqualFold = data
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteContainsFold = data
		case "wrongAttempts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttempts"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttempts(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.UserWhereInput().WrongAttemptsLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "wrongAttemptsIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptsIsNil = data
		case "wrongAttemptsNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptsNotNil = data
		case "wrongAttemptAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAt = data
		case "wrongAttemptAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtNEQ = data
		case "wrongAttemptAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtIn = data
		case "wrongAttemptAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtNotIn = data
		case "wrongAttemptAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtGT = data
		case "wrongAttemptAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtGTE = data
		case "wrongAttemptAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtLT = data
		case "wrongAttemptAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtLTE = data
		case "wrongAttemptAtIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtIsNil = data
		case "wrongAttemptAtNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrongAttemptAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WrongAttemptAtNotNil = data
		case "lockedUntil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntil"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntil = data
		case "lockedUntilNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilNEQ = data
		case "lockedUntilIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilIn = data
		case "lockedUntilNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilNotIn = data
		case "lockedUntilGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilGT = data
		case "lockedUntilGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilGTE = data
		case "lockedUntilLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilLT = data
		case "lockedUntilLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilLTE = data
		case "lockedUntilIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilIsNil = data
		case "lockedUntilNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedUntilNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedUntilNotNil = data
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "locationNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNEQ = data
		case "locationIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationIn = data
		case "locationNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNotIn = data
		case "locationGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationGT = data
		case "locationGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationGTE = data
		case "locationLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationLT = data
		case "locationLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationLTE = data
		case "locationContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationContains = data
		case "locationHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationHasPrefix = data
		case "locationHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationHasSuffix = data
		case "locationIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationIsNil = data
		case "locationNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNotNil = data
		case "locationEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationEqualFold = data
		case "locationContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationContainsFold = data
		case "acceptedGeneralTerms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedGeneralTerms"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedGeneralTerms = data
		case "acceptedGeneralTermsNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedGeneralTermsNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedGeneralTermsNEQ = data
		case "acceptedGeneralTermsIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedGeneralTermsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedGeneralTermsIsNil = data
		case "acceptedGeneralTermsNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedGeneralTermsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedGeneralTermsNotNil = data
		case "acceptedTermsNPrivacy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedTermsNPrivacy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedTermsNPrivacy = data
		case "acceptedTermsNPrivacyNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedTermsNPrivacyNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedTermsNPrivacyNEQ = data
		case "acceptedTermsNPrivacyIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedTermsNPrivacyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedTermsNPrivacyIsNil = data
		case "acceptedTermsNPrivacyNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedTermsNPrivacyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptedTermsNPrivacyNotNil = data
		case "hasAuths":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAuths"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAuths = data
		case "hasAuthsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAuthsWith"))
			data, err := ec.unmarshalOUserAuthWhereInput2ᚕᚖroofixᚋentᚐUserAuthWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAuthsWith = data
		case "hasSessions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSessions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSessions = data
		case "hasSessionsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSessionsWith"))
			data, err := ec.unmarshalOUserSessionWhereInput2ᚕᚖroofixᚋentᚐUserSessionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSessionsWith = data
		case "hasAuditLogs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAuditLogs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAuditLogs = data
		case "hasAuditLogsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAuditLogsWith"))
			data, err := ec.unmarshalOAuditLogWhereInput2ᚕᚖroofixᚋentᚐAuditLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAuditLogsWith = data
		case "hasNotify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNotify"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNotify = data
		case "hasNotifyWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNotifyWith"))
			data, err := ec.unmarshalONotifySettingWhereInput2ᚕᚖroofixᚋentᚐNotifySettingWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNotifyWith = data
		case "hasCreatedJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedJobs = data
		case "hasCreatedJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedJobsWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedJobsWith = data
		case "hasCreatedEstimates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedEstimates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedEstimates = data
		case "hasCreatedEstimatesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedEstimatesWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedEstimatesWith = data
		case "hasSalesRepEstimates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRepEstimates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRepEstimates = data
		case "hasSalesRepEstimatesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesRepEstimatesWith"))
			data, err := ec.unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesRepEstimatesWith = data
		case "hasSales":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSales"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSales = data
		case "hasSalesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesWith"))
			data, err := ec.unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesWith = data
		case "hasCreatedInstallationJobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedInstallationJobs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedInstallationJobs = data
		case "hasCreatedInstallationJobsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedInstallationJobsWith"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedInstallationJobsWith = data
		case "hasInstallationLeads":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstallationLeads"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInstallationLeads = data
		case "hasInstallationLeadsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstallationLeadsWith"))
			data, err := ec.unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInstallationLeadsWith = data
		case "hasEstimateActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateActivities = data
		case "hasEstimateActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEstimateActivitiesWith"))
			data, err := ec.unmarshalOEstimateActivityWhereInput2ᚕᚖroofixᚋentᚐEstimateActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEstimateActivitiesWith = data
		case "hasJobActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobActivities = data
		case "hasJobActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobActivitiesWith"))
			data, err := ec.unmarshalOJobActivityWhereInput2ᚕᚖroofixᚋentᚐJobActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobActivitiesWith = data
		case "hasPartnerActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerActivities = data
		case "hasPartnerActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerActivitiesWith"))
			data, err := ec.unmarshalOPartnerActivityWhereInput2ᚕᚖroofixᚋentᚐPartnerActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerActivitiesWith = data
		case "hasUserActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserActivities = data
		case "hasUserActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUserActivitiesWith"))
			data, err := ec.unmarshalOUserActivityWhereInput2ᚕᚖroofixᚋentᚐUserActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUserActivitiesWith = data
		case "hasActivities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivities = data
		case "hasActivitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActivitiesWith"))
			data, err := ec.unmarshalOUserActivityWhereInput2ᚕᚖroofixᚋentᚐUserActivityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActivitiesWith = data
		case "hasJobProgressHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobProgressHistory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobProgressHistory = data
		case "hasJobProgressHistoryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobProgressHistoryWith"))
			data, err := ec.unmarshalOJobProgressHistoryWhereInput2ᚕᚖroofixᚋentᚐJobProgressHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobProgressHistoryWith = data
		case "hasInstallationJobStatusChanger":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstallationJobStatusChanger"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInstallationJobStatusChanger = data
		case "hasInstallationJobStatusChangerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstallationJobStatusChangerWith"))
			data, err := ec.unmarshalOInstallationJobProgressWhereInput2ᚕᚖroofixᚋentᚐInstallationJobProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInstallationJobStatusChangerWith = data
		case "hasContactUsRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContactUsRequests"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContactUsRequests = data
		case "hasContactUsRequestsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContactUsRequestsWith"))
			data, err := ec.unmarshalOContactUsWhereInput2ᚕᚖroofixᚋentᚐContactUsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContactUsRequestsWith = data
		case "hasPartner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartner"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartner = data
		case "hasPartnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerWith"))
			data, err := ec.unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerWith = data
		case "hasSurveys":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveys"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveys = data
		case "hasSurveysWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveysWith"))
			data, err := ec.unmarshalOSurveyWhereInput2ᚕᚖroofixᚋentᚐSurveyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveysWith = data
		case "hasSurveyProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveyProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveyProgress = data
		case "hasSurveyProgressWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSurveyProgressWith"))
			data, err := ec.unmarshalOSurveyProgressWhereInput2ᚕᚖroofixᚋentᚐSurveyProgressWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSurveyProgressWith = data
		case "hasCreatedTrainingVideos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTrainingVideos"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTrainingVideos = data
		case "hasCreatedTrainingVideosWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTrainingVideosWith"))
			data, err := ec.unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTrainingVideosWith = data
		case "hasCreatedTrainingCourses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTrainingCourses"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTrainingCourses = data
		case "hasCreatedTrainingCoursesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedTrainingCoursesWith"))
			data, err := ec.unmarshalOTrainingCourseWhereInput2ᚕᚖroofixᚋentᚐTrainingCourseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedTrainingCoursesWith = data
		case "hasJobNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobNotes"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobNotes = data
		case "hasJobNotesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobNotesWith"))
			data, err := ec.unmarshalOJobNoteWhereInput2ᚕᚖroofixᚋentᚐJobNoteWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobNotesWith = data
		case "hasChatChannels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChatChannels"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChatChannels = data
		case "hasChatChannelsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChatChannelsWith"))
			data, err := ec.unmarshalOChannelSubWhereInput2ᚕᚖroofixᚋentᚐChannelSubWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChatChannelsWith = data
		case "hasSentMessages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSentMessages"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSentMessages = data
		case "hasSentMessagesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSentMessagesWith"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSentMessagesWith = data
		case "hasReceivedMessages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivedMessages"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivedMessages = data
		case "hasReceivedMessagesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReceivedMessagesWith"))
			data, err := ec.unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasReceivedMessagesWith = data
		case "hasChannelMessageRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelMessageRead"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelMessageRead = data
		case "hasChannelMessageReadWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChannelMessageReadWith"))
			data, err := ec.unmarshalOChannelMessageReadWhereInput2ᚕᚖroofixᚋentᚐChannelMessageReadWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChannelMessageReadWith = data
		case "hasProductsCreated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductsCreated"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductsCreated = data
		case "hasProductsCreatedWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductsCreatedWith"))
			data, err := ec.unmarshalOProductWhereInput2ᚕᚖroofixᚋentᚐProductWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductsCreatedWith = data
		case "hasProductPkgCreated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductPkgCreated"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductPkgCreated = data
		case "hasProductPkgCreatedWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProductPkgCreatedWith"))
			data, err := ec.unmarshalOProductPackageWhereInput2ᚕᚖroofixᚋentᚐProductPackageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProductPkgCreatedWith = data
		case "hasJobDocUrls":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobDocUrls"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobDocUrls = data
		case "hasJobDocUrlsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasJobDocUrlsWith"))
			data, err := ec.unmarshalOJobDocURLWhereInput2ᚕᚖroofixᚋentᚐJobDocURLWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasJobDocUrlsWith = data
		case "hasPartnerContacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerContacts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerContacts = data
		case "hasPartnerContactsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPartnerContactsWith"))
			data, err := ec.unmarshalOPartnerContactWhereInput2ᚕᚖroofixᚋentᚐPartnerContactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPartnerContactsWith = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNApiAccessWhereInput2ᚖroofixᚋentᚐApiAccessWhereInput(ctx context.Context, v interface{}) (*ent.ApiAccessWhereInput, error) {
	res, err := ec.unmarshalInputApiAccessWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNApiUserTokenWhereInput2ᚖroofixᚋentᚐApiUserTokenWhereInput(ctx context.Context, v interface{}) (*ent.ApiUserTokenWhereInput, error) {
	res, err := ec.unmarshalInputApiUserTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNApiUserWhereInput2ᚖroofixᚋentᚐApiUserWhereInput(ctx context.Context, v interface{}) (*ent.ApiUserWhereInput, error) {
	res, err := ec.unmarshalInputApiUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAuditLogWhereInput2ᚖroofixᚋentᚐAuditLogWhereInput(ctx context.Context, v interface{}) (*ent.AuditLogWhereInput, error) {
	res, err := ec.unmarshalInputAuditLogWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelMessageReadWhereInput2ᚖroofixᚋentᚐChannelMessageReadWhereInput(ctx context.Context, v interface{}) (*ent.ChannelMessageReadWhereInput, error) {
	res, err := ec.unmarshalInputChannelMessageReadWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelMessageWhereInput2ᚖroofixᚋentᚐChannelMessageWhereInput(ctx context.Context, v interface{}) (*ent.ChannelMessageWhereInput, error) {
	res, err := ec.unmarshalInputChannelMessageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelSubWhereInput2ᚖroofixᚋentᚐChannelSubWhereInput(ctx context.Context, v interface{}) (*ent.ChannelSubWhereInput, error) {
	res, err := ec.unmarshalInputChannelSubWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelWhereInput2ᚖroofixᚋentᚐChannelWhereInput(ctx context.Context, v interface{}) (*ent.ChannelWhereInput, error) {
	res, err := ec.unmarshalInputChannelWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContactUsWhereInput2ᚖroofixᚋentᚐContactUsWhereInput(ctx context.Context, v interface{}) (*ent.ContactUsWhereInput, error) {
	res, err := ec.unmarshalInputContactUsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDocumentWhereInput2ᚖroofixᚋentᚐDocumentWhereInput(ctx context.Context, v interface{}) (*ent.DocumentWhereInput, error) {
	res, err := ec.unmarshalInputDocumentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEstimateActivityWhereInput2ᚖroofixᚋentᚐEstimateActivityWhereInput(ctx context.Context, v interface{}) (*ent.EstimateActivityWhereInput, error) {
	res, err := ec.unmarshalInputEstimateActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEstimateWhereInput2ᚖroofixᚋentᚐEstimateWhereInput(ctx context.Context, v interface{}) (*ent.EstimateWhereInput, error) {
	res, err := ec.unmarshalInputEstimateWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHomeOwnerWhereInput2ᚖroofixᚋentᚐHomeOwnerWhereInput(ctx context.Context, v interface{}) (*ent.HomeOwnerWhereInput, error) {
	res, err := ec.unmarshalInputHomeOwnerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInstallationJobItemWhereInput2ᚖroofixᚋentᚐInstallationJobItemWhereInput(ctx context.Context, v interface{}) (*ent.InstallationJobItemWhereInput, error) {
	res, err := ec.unmarshalInputInstallationJobItemWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInstallationJobProgressWhereInput2ᚖroofixᚋentᚐInstallationJobProgressWhereInput(ctx context.Context, v interface{}) (*ent.InstallationJobProgressWhereInput, error) {
	res, err := ec.unmarshalInputInstallationJobProgressWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInstallationJobWhereInput2ᚖroofixᚋentᚐInstallationJobWhereInput(ctx context.Context, v interface{}) (*ent.InstallationJobWhereInput, error) {
	res, err := ec.unmarshalInputInstallationJobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobActivityWhereInput2ᚖroofixᚋentᚐJobActivityWhereInput(ctx context.Context, v interface{}) (*ent.JobActivityWhereInput, error) {
	res, err := ec.unmarshalInputJobActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobAssignmentHistoryWhereInput2ᚖroofixᚋentᚐJobAssignmentHistoryWhereInput(ctx context.Context, v interface{}) (*ent.JobAssignmentHistoryWhereInput, error) {
	res, err := ec.unmarshalInputJobAssignmentHistoryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobDocURLWhereInput2ᚖroofixᚋentᚐJobDocURLWhereInput(ctx context.Context, v interface{}) (*ent.JobDocURLWhereInput, error) {
	res, err := ec.unmarshalInputJobDocURLWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobNoteWhereInput2ᚖroofixᚋentᚐJobNoteWhereInput(ctx context.Context, v interface{}) (*ent.JobNoteWhereInput, error) {
	res, err := ec.unmarshalInputJobNoteWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobProgressHistoryWhereInput2ᚖroofixᚋentᚐJobProgressHistoryWhereInput(ctx context.Context, v interface{}) (*ent.JobProgressHistoryWhereInput, error) {
	res, err := ec.unmarshalInputJobProgressHistoryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobWhereInput2ᚖroofixᚋentᚐJobWhereInput(ctx context.Context, v interface{}) (*ent.JobWhereInput, error) {
	res, err := ec.unmarshalInputJobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNotifySettingWhereInput2ᚖroofixᚋentᚐNotifySettingWhereInput(ctx context.Context, v interface{}) (*ent.NotifySettingWhereInput, error) {
	res, err := ec.unmarshalInputNotifySettingWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOptionListWhereInput2ᚖroofixᚋentᚐOptionListWhereInput(ctx context.Context, v interface{}) (*ent.OptionListWhereInput, error) {
	res, err := ec.unmarshalInputOptionListWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerActivityWhereInput2ᚖroofixᚋentᚐPartnerActivityWhereInput(ctx context.Context, v interface{}) (*ent.PartnerActivityWhereInput, error) {
	res, err := ec.unmarshalInputPartnerActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerContactWhereInput2ᚖroofixᚋentᚐPartnerContactWhereInput(ctx context.Context, v interface{}) (*ent.PartnerContactWhereInput, error) {
	res, err := ec.unmarshalInputPartnerContactWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerServiceCityWhereInput2ᚖroofixᚋentᚐPartnerServiceCityWhereInput(ctx context.Context, v interface{}) (*ent.PartnerServiceCityWhereInput, error) {
	res, err := ec.unmarshalInputPartnerServiceCityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerServiceStateWhereInput2ᚖroofixᚋentᚐPartnerServiceStateWhereInput(ctx context.Context, v interface{}) (*ent.PartnerServiceStateWhereInput, error) {
	res, err := ec.unmarshalInputPartnerServiceStateWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerServiceWhereInput2ᚖroofixᚋentᚐPartnerServiceWhereInput(ctx context.Context, v interface{}) (*ent.PartnerServiceWhereInput, error) {
	res, err := ec.unmarshalInputPartnerServiceWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerTrainingVideoWhereInput2ᚖroofixᚋentᚐPartnerTrainingVideoWhereInput(ctx context.Context, v interface{}) (*ent.PartnerTrainingVideoWhereInput, error) {
	res, err := ec.unmarshalInputPartnerTrainingVideoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartnerWhereInput2ᚖroofixᚋentᚐPartnerWhereInput(ctx context.Context, v interface{}) (*ent.PartnerWhereInput, error) {
	res, err := ec.unmarshalInputPartnerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPaymentWhereInput2ᚖroofixᚋentᚐPaymentWhereInput(ctx context.Context, v interface{}) (*ent.PaymentWhereInput, error) {
	res, err := ec.unmarshalInputPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPostalCodeWhereInput2ᚖroofixᚋentᚐPostalCodeWhereInput(ctx context.Context, v interface{}) (*ent.PostalCodeWhereInput, error) {
	res, err := ec.unmarshalInputPostalCodeWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPricingWhereInput2ᚖroofixᚋentᚐPricingWhereInput(ctx context.Context, v interface{}) (*ent.PricingWhereInput, error) {
	res, err := ec.unmarshalInputPricingWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProductPackageWhereInput2ᚖroofixᚋentᚐProductPackageWhereInput(ctx context.Context, v interface{}) (*ent.ProductPackageWhereInput, error) {
	res, err := ec.unmarshalInputProductPackageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProductWhereInput2ᚖroofixᚋentᚐProductWhereInput(ctx context.Context, v interface{}) (*ent.ProductWhereInput, error) {
	res, err := ec.unmarshalInputProductWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSurveyProgressWhereInput2ᚖroofixᚋentᚐSurveyProgressWhereInput(ctx context.Context, v interface{}) (*ent.SurveyProgressWhereInput, error) {
	res, err := ec.unmarshalInputSurveyProgressWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSurveyWhereInput2ᚖroofixᚋentᚐSurveyWhereInput(ctx context.Context, v interface{}) (*ent.SurveyWhereInput, error) {
	res, err := ec.unmarshalInputSurveyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTokenWhereInput2ᚖroofixᚋentᚐTokenWhereInput(ctx context.Context, v interface{}) (*ent.TokenWhereInput, error) {
	res, err := ec.unmarshalInputTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTrainingCourseWhereInput2ᚖroofixᚋentᚐTrainingCourseWhereInput(ctx context.Context, v interface{}) (*ent.TrainingCourseWhereInput, error) {
	res, err := ec.unmarshalInputTrainingCourseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTrainingVideoWhereInput2ᚖroofixᚋentᚐTrainingVideoWhereInput(ctx context.Context, v interface{}) (*ent.TrainingVideoWhereInput, error) {
	res, err := ec.unmarshalInputTrainingVideoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserActivityWhereInput2ᚖroofixᚋentᚐUserActivityWhereInput(ctx context.Context, v interface{}) (*ent.UserActivityWhereInput, error) {
	res, err := ec.unmarshalInputUserActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserAuthWhereInput2ᚖroofixᚋentᚐUserAuthWhereInput(ctx context.Context, v interface{}) (*ent.UserAuthWhereInput, error) {
	res, err := ec.unmarshalInputUserAuthWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserSessionSocketWhereInput2ᚖroofixᚋentᚐUserSessionSocketWhereInput(ctx context.Context, v interface{}) (*ent.UserSessionSocketWhereInput, error) {
	res, err := ec.unmarshalInputUserSessionSocketWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserSessionWhereInput2ᚖroofixᚋentᚐUserSessionWhereInput(ctx context.Context, v interface{}) (*ent.UserSessionWhereInput, error) {
	res, err := ec.unmarshalInputUserSessionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhereInput2ᚖroofixᚋentᚐUserWhereInput(ctx context.Context, v interface{}) (*ent.UserWhereInput, error) {
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOApiAccessWhereInput2ᚕᚖroofixᚋentᚐApiAccessWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ApiAccessWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ApiAccessWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNApiAccessWhereInput2ᚖroofixᚋentᚐApiAccessWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOApiAccessWhereInput2ᚖroofixᚋentᚐApiAccessWhereInput(ctx context.Context, v interface{}) (*ent.ApiAccessWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApiAccessWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOApiUserTokenWhereInput2ᚕᚖroofixᚋentᚐApiUserTokenWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ApiUserTokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ApiUserTokenWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNApiUserTokenWhereInput2ᚖroofixᚋentᚐApiUserTokenWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOApiUserTokenWhereInput2ᚖroofixᚋentᚐApiUserTokenWhereInput(ctx context.Context, v interface{}) (*ent.ApiUserTokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApiUserTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOApiUserWhereInput2ᚕᚖroofixᚋentᚐApiUserWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ApiUserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ApiUserWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNApiUserWhereInput2ᚖroofixᚋentᚐApiUserWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOApiUserWhereInput2ᚖroofixᚋentᚐApiUserWhereInput(ctx context.Context, v interface{}) (*ent.ApiUserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApiUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditLogWhereInput2ᚕᚖroofixᚋentᚐAuditLogWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.AuditLogWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.AuditLogWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuditLogWhereInput2ᚖroofixᚋentᚐAuditLogWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuditLogWhereInput2ᚖroofixᚋentᚐAuditLogWhereInput(ctx context.Context, v interface{}) (*ent.AuditLogWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditLogWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChannelMessageReadWhereInput2ᚕᚖroofixᚋentᚐChannelMessageReadWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ChannelMessageReadWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ChannelMessageReadWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelMessageReadWhereInput2ᚖroofixᚋentᚐChannelMessageReadWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOChannelMessageReadWhereInput2ᚖroofixᚋentᚐChannelMessageReadWhereInput(ctx context.Context, v interface{}) (*ent.ChannelMessageReadWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChannelMessageReadWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChannelMessageWhereInput2ᚕᚖroofixᚋentᚐChannelMessageWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ChannelMessageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ChannelMessageWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelMessageWhereInput2ᚖroofixᚋentᚐChannelMessageWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOChannelMessageWhereInput2ᚖroofixᚋentᚐChannelMessageWhereInput(ctx context.Context, v interface{}) (*ent.ChannelMessageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChannelMessageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChannelSubWhereInput2ᚕᚖroofixᚋentᚐChannelSubWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ChannelSubWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ChannelSubWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelSubWhereInput2ᚖroofixᚋentᚐChannelSubWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOChannelSubWhereInput2ᚖroofixᚋentᚐChannelSubWhereInput(ctx context.Context, v interface{}) (*ent.ChannelSubWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChannelSubWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChannelWhereInput2ᚕᚖroofixᚋentᚐChannelWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ChannelWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ChannelWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelWhereInput2ᚖroofixᚋentᚐChannelWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOChannelWhereInput2ᚖroofixᚋentᚐChannelWhereInput(ctx context.Context, v interface{}) (*ent.ChannelWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChannelWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContactUsWhereInput2ᚕᚖroofixᚋentᚐContactUsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ContactUsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ContactUsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContactUsWhereInput2ᚖroofixᚋentᚐContactUsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContactUsWhereInput2ᚖroofixᚋentᚐContactUsWhereInput(ctx context.Context, v interface{}) (*ent.ContactUsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactUsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODocumentWhereInput2ᚕᚖroofixᚋentᚐDocumentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.DocumentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.DocumentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDocumentWhereInput2ᚖroofixᚋentᚐDocumentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODocumentWhereInput2ᚖroofixᚋentᚐDocumentWhereInput(ctx context.Context, v interface{}) (*ent.DocumentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDocumentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEstimateActivityWhereInput2ᚕᚖroofixᚋentᚐEstimateActivityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.EstimateActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.EstimateActivityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEstimateActivityWhereInput2ᚖroofixᚋentᚐEstimateActivityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEstimateActivityWhereInput2ᚖroofixᚋentᚐEstimateActivityWhereInput(ctx context.Context, v interface{}) (*ent.EstimateActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEstimateActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEstimateWhereInput2ᚕᚖroofixᚋentᚐEstimateWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.EstimateWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.EstimateWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEstimateWhereInput2ᚖroofixᚋentᚐEstimateWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEstimateWhereInput2ᚖroofixᚋentᚐEstimateWhereInput(ctx context.Context, v interface{}) (*ent.EstimateWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEstimateWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHomeOwnerWhereInput2ᚕᚖroofixᚋentᚐHomeOwnerWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.HomeOwnerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.HomeOwnerWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNHomeOwnerWhereInput2ᚖroofixᚋentᚐHomeOwnerWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOHomeOwnerWhereInput2ᚖroofixᚋentᚐHomeOwnerWhereInput(ctx context.Context, v interface{}) (*ent.HomeOwnerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHomeOwnerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInstallationJobItemWhereInput2ᚕᚖroofixᚋentᚐInstallationJobItemWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.InstallationJobItemWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.InstallationJobItemWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInstallationJobItemWhereInput2ᚖroofixᚋentᚐInstallationJobItemWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInstallationJobItemWhereInput2ᚖroofixᚋentᚐInstallationJobItemWhereInput(ctx context.Context, v interface{}) (*ent.InstallationJobItemWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInstallationJobItemWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInstallationJobProgressWhereInput2ᚕᚖroofixᚋentᚐInstallationJobProgressWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.InstallationJobProgressWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.InstallationJobProgressWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInstallationJobProgressWhereInput2ᚖroofixᚋentᚐInstallationJobProgressWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInstallationJobProgressWhereInput2ᚖroofixᚋentᚐInstallationJobProgressWhereInput(ctx context.Context, v interface{}) (*ent.InstallationJobProgressWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInstallationJobProgressWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInstallationJobWhereInput2ᚕᚖroofixᚋentᚐInstallationJobWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.InstallationJobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.InstallationJobWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInstallationJobWhereInput2ᚖroofixᚋentᚐInstallationJobWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInstallationJobWhereInput2ᚖroofixᚋentᚐInstallationJobWhereInput(ctx context.Context, v interface{}) (*ent.InstallationJobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInstallationJobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobActivityWhereInput2ᚕᚖroofixᚋentᚐJobActivityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.JobActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.JobActivityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobActivityWhereInput2ᚖroofixᚋentᚐJobActivityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobActivityWhereInput2ᚖroofixᚋentᚐJobActivityWhereInput(ctx context.Context, v interface{}) (*ent.JobActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobAssignmentHistoryWhereInput2ᚕᚖroofixᚋentᚐJobAssignmentHistoryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.JobAssignmentHistoryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.JobAssignmentHistoryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobAssignmentHistoryWhereInput2ᚖroofixᚋentᚐJobAssignmentHistoryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobAssignmentHistoryWhereInput2ᚖroofixᚋentᚐJobAssignmentHistoryWhereInput(ctx context.Context, v interface{}) (*ent.JobAssignmentHistoryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobAssignmentHistoryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobDocURLWhereInput2ᚕᚖroofixᚋentᚐJobDocURLWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.JobDocURLWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.JobDocURLWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobDocURLWhereInput2ᚖroofixᚋentᚐJobDocURLWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobDocURLWhereInput2ᚖroofixᚋentᚐJobDocURLWhereInput(ctx context.Context, v interface{}) (*ent.JobDocURLWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobDocURLWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobNoteWhereInput2ᚕᚖroofixᚋentᚐJobNoteWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.JobNoteWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.JobNoteWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobNoteWhereInput2ᚖroofixᚋentᚐJobNoteWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobNoteWhereInput2ᚖroofixᚋentᚐJobNoteWhereInput(ctx context.Context, v interface{}) (*ent.JobNoteWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobNoteWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobProgressHistoryWhereInput2ᚕᚖroofixᚋentᚐJobProgressHistoryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.JobProgressHistoryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.JobProgressHistoryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobProgressHistoryWhereInput2ᚖroofixᚋentᚐJobProgressHistoryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobProgressHistoryWhereInput2ᚖroofixᚋentᚐJobProgressHistoryWhereInput(ctx context.Context, v interface{}) (*ent.JobProgressHistoryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobProgressHistoryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJobWhereInput2ᚕᚖroofixᚋentᚐJobWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.JobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.JobWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobWhereInput2ᚖroofixᚋentᚐJobWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJobWhereInput2ᚖroofixᚋentᚐJobWhereInput(ctx context.Context, v interface{}) (*ent.JobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotifySettingWhereInput2ᚕᚖroofixᚋentᚐNotifySettingWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.NotifySettingWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.NotifySettingWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNotifySettingWhereInput2ᚖroofixᚋentᚐNotifySettingWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONotifySettingWhereInput2ᚖroofixᚋentᚐNotifySettingWhereInput(ctx context.Context, v interface{}) (*ent.NotifySettingWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotifySettingWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOptionListWhereInput2ᚕᚖroofixᚋentᚐOptionListWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.OptionListWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.OptionListWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOptionListWhereInput2ᚖroofixᚋentᚐOptionListWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOptionListWhereInput2ᚖroofixᚋentᚐOptionListWhereInput(ctx context.Context, v interface{}) (*ent.OptionListWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOptionListWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerActivityWhereInput2ᚕᚖroofixᚋentᚐPartnerActivityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerActivityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerActivityWhereInput2ᚖroofixᚋentᚐPartnerActivityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerActivityWhereInput2ᚖroofixᚋentᚐPartnerActivityWhereInput(ctx context.Context, v interface{}) (*ent.PartnerActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerContactWhereInput2ᚕᚖroofixᚋentᚐPartnerContactWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerContactWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerContactWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerContactWhereInput2ᚖroofixᚋentᚐPartnerContactWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerContactWhereInput2ᚖroofixᚋentᚐPartnerContactWhereInput(ctx context.Context, v interface{}) (*ent.PartnerContactWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerContactWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerServiceCityWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceCityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerServiceCityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerServiceCityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerServiceCityWhereInput2ᚖroofixᚋentᚐPartnerServiceCityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerServiceCityWhereInput2ᚖroofixᚋentᚐPartnerServiceCityWhereInput(ctx context.Context, v interface{}) (*ent.PartnerServiceCityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerServiceCityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerServiceStateWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceStateWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerServiceStateWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerServiceStateWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerServiceStateWhereInput2ᚖroofixᚋentᚐPartnerServiceStateWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerServiceStateWhereInput2ᚖroofixᚋentᚐPartnerServiceStateWhereInput(ctx context.Context, v interface{}) (*ent.PartnerServiceStateWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerServiceStateWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerServiceWhereInput2ᚕᚖroofixᚋentᚐPartnerServiceWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerServiceWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerServiceWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerServiceWhereInput2ᚖroofixᚋentᚐPartnerServiceWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerServiceWhereInput2ᚖroofixᚋentᚐPartnerServiceWhereInput(ctx context.Context, v interface{}) (*ent.PartnerServiceWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerServiceWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐPartnerTrainingVideoWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerTrainingVideoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerTrainingVideoWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerTrainingVideoWhereInput2ᚖroofixᚋentᚐPartnerTrainingVideoWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerTrainingVideoWhereInput2ᚖroofixᚋentᚐPartnerTrainingVideoWhereInput(ctx context.Context, v interface{}) (*ent.PartnerTrainingVideoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerTrainingVideoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPartnerWhereInput2ᚕᚖroofixᚋentᚐPartnerWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PartnerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PartnerWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPartnerWhereInput2ᚖroofixᚋentᚐPartnerWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPartnerWhereInput2ᚖroofixᚋentᚐPartnerWhereInput(ctx context.Context, v interface{}) (*ent.PartnerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartnerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPaymentWhereInput2ᚕᚖroofixᚋentᚐPaymentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PaymentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentWhereInput2ᚖroofixᚋentᚐPaymentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentWhereInput2ᚖroofixᚋentᚐPaymentWhereInput(ctx context.Context, v interface{}) (*ent.PaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPostalCodeWhereInput2ᚕᚖroofixᚋentᚐPostalCodeWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PostalCodeWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PostalCodeWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPostalCodeWhereInput2ᚖroofixᚋentᚐPostalCodeWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPostalCodeWhereInput2ᚖroofixᚋentᚐPostalCodeWhereInput(ctx context.Context, v interface{}) (*ent.PostalCodeWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPostalCodeWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPricingWhereInput2ᚕᚖroofixᚋentᚐPricingWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PricingWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PricingWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPricingWhereInput2ᚖroofixᚋentᚐPricingWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPricingWhereInput2ᚖroofixᚋentᚐPricingWhereInput(ctx context.Context, v interface{}) (*ent.PricingWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPricingWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProductPackageWhereInput2ᚕᚖroofixᚋentᚐProductPackageWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProductPackageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProductPackageWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductPackageWhereInput2ᚖroofixᚋentᚐProductPackageWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductPackageWhereInput2ᚖroofixᚋentᚐProductPackageWhereInput(ctx context.Context, v interface{}) (*ent.ProductPackageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductPackageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProductWhereInput2ᚕᚖroofixᚋentᚐProductWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProductWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProductWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductWhereInput2ᚖroofixᚋentᚐProductWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductWhereInput2ᚖroofixᚋentᚐProductWhereInput(ctx context.Context, v interface{}) (*ent.ProductWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSurveyProgressWhereInput2ᚕᚖroofixᚋentᚐSurveyProgressWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.SurveyProgressWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.SurveyProgressWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSurveyProgressWhereInput2ᚖroofixᚋentᚐSurveyProgressWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSurveyProgressWhereInput2ᚖroofixᚋentᚐSurveyProgressWhereInput(ctx context.Context, v interface{}) (*ent.SurveyProgressWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSurveyProgressWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSurveyWhereInput2ᚕᚖroofixᚋentᚐSurveyWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.SurveyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.SurveyWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSurveyWhereInput2ᚖroofixᚋentᚐSurveyWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSurveyWhereInput2ᚖroofixᚋentᚐSurveyWhereInput(ctx context.Context, v interface{}) (*ent.SurveyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSurveyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTokenWhereInput2ᚕᚖroofixᚋentᚐTokenWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TokenWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTokenWhereInput2ᚖroofixᚋentᚐTokenWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTokenWhereInput2ᚖroofixᚋentᚐTokenWhereInput(ctx context.Context, v interface{}) (*ent.TokenWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTokenWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTrainingCourseWhereInput2ᚕᚖroofixᚋentᚐTrainingCourseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TrainingCourseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TrainingCourseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTrainingCourseWhereInput2ᚖroofixᚋentᚐTrainingCourseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTrainingCourseWhereInput2ᚖroofixᚋentᚐTrainingCourseWhereInput(ctx context.Context, v interface{}) (*ent.TrainingCourseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTrainingCourseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTrainingVideoWhereInput2ᚕᚖroofixᚋentᚐTrainingVideoWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TrainingVideoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TrainingVideoWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTrainingVideoWhereInput2ᚖroofixᚋentᚐTrainingVideoWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTrainingVideoWhereInput2ᚖroofixᚋentᚐTrainingVideoWhereInput(ctx context.Context, v interface{}) (*ent.TrainingVideoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTrainingVideoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserActivityWhereInput2ᚕᚖroofixᚋentᚐUserActivityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserActivityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserActivityWhereInput2ᚖroofixᚋentᚐUserActivityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserActivityWhereInput2ᚖroofixᚋentᚐUserActivityWhereInput(ctx context.Context, v interface{}) (*ent.UserActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserAuthWhereInput2ᚕᚖroofixᚋentᚐUserAuthWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserAuthWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserAuthWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserAuthWhereInput2ᚖroofixᚋentᚐUserAuthWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserAuthWhereInput2ᚖroofixᚋentᚐUserAuthWhereInput(ctx context.Context, v interface{}) (*ent.UserAuthWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserAuthWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserSessionSocketWhereInput2ᚕᚖroofixᚋentᚐUserSessionSocketWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserSessionSocketWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserSessionSocketWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserSessionSocketWhereInput2ᚖroofixᚋentᚐUserSessionSocketWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserSessionSocketWhereInput2ᚖroofixᚋentᚐUserSessionSocketWhereInput(ctx context.Context, v interface{}) (*ent.UserSessionSocketWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserSessionSocketWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserSessionWhereInput2ᚕᚖroofixᚋentᚐUserSessionWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserSessionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserSessionWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserSessionWhereInput2ᚖroofixᚋentᚐUserSessionWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserSessionWhereInput2ᚖroofixᚋentᚐUserSessionWhereInput(ctx context.Context, v interface{}) (*ent.UserSessionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserSessionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚕᚖroofixᚋentᚐUserWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserWhereInput2ᚖroofixᚋentᚐUserWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚖroofixᚋentᚐUserWhereInput(ctx context.Context, v interface{}) (*ent.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"roofix/ent"
	"roofix/pkg/account"
	"roofix/pkg/apiaccess"
	"roofix/pkg/document"
	"roofix/pkg/enum"
	model1 "roofix/pkg/model"
	"roofix/pkg/partner"
	"roofix/pkg/pricing"
	"roofix/server/model"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	ApiUser() ApiUserResolver
	Document() DocumentResolver
	DocumentInfo() DocumentInfoResolver
	Estimate() EstimateResolver
	InstallationJob() InstallationJobResolver
	InstallationJobItem() InstallationJobItemResolver
	Job() JobResolver
	JobNote() JobNoteResolver
	JobProgressHistory() JobProgressHistoryResolver
	Mutation() MutationResolver
	Package() PackageResolver
	Partner() PartnerResolver
	PartnerContact() PartnerContactResolver
	PartnerJob() PartnerJobResolver
	PartnerService() PartnerServiceResolver
	Price() PriceResolver
	ProductDetail() ProductDetailResolver
	ProductInfo() ProductInfoResolver
	ProductPackage() ProductPackageResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
	SurveyProgressDetail() SurveyProgressDetailResolver
	SurveyProgressHistory() SurveyProgressHistoryResolver
	TrainingVideo() TrainingVideoResolver
	User() UserResolver
	ApiUserWhereInput() ApiUserWhereInputResolver
	CreatePartnerServiceCityInput() CreatePartnerServiceCityInputResolver
	EstimateWhereInput() EstimateWhereInputResolver
	JobDocURLWhereInput() JobDocURLWhereInputResolver
	JobWhereInput() JobWhereInputResolver
	Measurement() MeasurementResolver
	PartnerServiceCityWhereInput() PartnerServiceCityWhereInputResolver
	PartnerServiceWhereInput() PartnerServiceWhereInputResolver
	PartnerWhereInput() PartnerWhereInputResolver
	PaymentWhereInput() PaymentWhereInputResolver
	PostalCodeWhereInput() PostalCodeWhereInputResolver
	PricingWhereInput() PricingWhereInputResolver
	UpdateJobInput() UpdateJobInputResolver
	UpdatePartnerServiceCityInput() UpdatePartnerServiceCityInputResolver
	UserAuthWhereInput() UserAuthWhereInputResolver
	UserWhereInput() UserWhereInputResolver
}

type DirectiveRoot struct {
	Authorize func(ctx context.Context, obj interface{}, next graphql.Resolver, roles []*enum.Role) (res interface{}, err error)
	FloatFor  func(ctx context.Context, obj interface{}, next graphql.Resolver, roles []*enum.Role) (res interface{}, err error)
	StringFor func(ctx context.Context, obj interface{}, next graphql.Resolver, roles []*enum.Role) (res interface{}, err error)
}

type ComplexityRoot struct {
	ApiAccess struct {
		ID       func(childComplexity int) int
		Key      func(childComplexity int) int
		Password func(childComplexity int) int
		Secret   func(childComplexity int) int
		URL      func(childComplexity int) int
		Username func(childComplexity int) int
	}

	ApiAccessConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ApiAccessEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ApiUser struct {
		Active         func(childComplexity int) int
		CbAPIAuth      func(childComplexity int) int
		CbAPIEndpoints func(childComplexity int) int
		CbAPIPwd       func(childComplexity int) int
		CbAPIToken     func(childComplexity int) int
		CbAPIURL       func(childComplexity int) int
		CbAPIUser      func(childComplexity int) int
		ID             func(childComplexity int) int
		Username       func(childComplexity int) int
	}

	ApiUserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ApiUserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ApiUserInfo struct {
		ID       func(childComplexity int) int
		Username func(childComplexity int) int
	}

	AuditLog struct {
		APIUser     func(childComplexity int) int
		Action      func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IP          func(childComplexity int) int
		User        func(childComplexity int) int
	}

	AuditLogConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AuditLogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	City struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Zip  func(childComplexity int) int
	}

	ContactConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Counts struct {
		AssignedJobCount   func(childComplexity int) int
		EstimateCount      func(childComplexity int) int
		PaymentsApproved   func(childComplexity int) int
		PaymentsCompleted  func(childComplexity int) int
		PaymentsPending    func(childComplexity int) int
		UnassignedJobCount func(childComplexity int) int
	}

	CourseVideos struct {
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Videos func(childComplexity int) int
	}

	Document struct {
		ContentSize func(childComplexity int) int
		ContentType func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Filename    func(childComplexity int) int
		ID          func(childComplexity int) int
		Key         func(childComplexity int) int
		Meta        func(childComplexity int) int
		Name        func(childComplexity int) int
		PublicURL   func(childComplexity int) int
		Ready       func(childComplexity int) int
		Section     func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UploadUrl   func(childComplexity int) int
	}

	DocumentInfo struct {
		ContentSize func(childComplexity int) int
		ContentType func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Key         func(childComplexity int) int
		Name        func(childComplexity int) int
		Ready       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Entity struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Estimate struct {
		Bounds                     func(childComplexity int) int
		CompanyName                func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatorName                func(childComplexity int) int
		CurrentMaterial            func(childComplexity int) int
		CurrentMaterialLowSlope    func(childComplexity int) int
		EstimatorRawResponse       func(childComplexity int) int
		FailureReason              func(childComplexity int) int
		HomeOwner                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		Layer2Material             func(childComplexity int) int
		Layer3Material             func(childComplexity int) int
		Layers                     func(childComplexity int) int
		LowSlope                   func(childComplexity int) int
		MeasurementType            func(childComplexity int) int
		NewRoofingMaterial         func(childComplexity int) int
		NewRoofingMaterialLowSlope func(childComplexity int) int
		PDF                        func(childComplexity int) int
		Partial                    func(childComplexity int) int
		Price                      func(childComplexity int) int
		PriceSummary               func(childComplexity int) int
		PrimaryPitch               func(childComplexity int) int
		Redeck                     func(childComplexity int) int
		SalesRep                   func(childComplexity int) int
		Status                     func(childComplexity int) int
		TotalSquares               func(childComplexity int) int
	}

	EstimateConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EstimateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EstimateResponse struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Need        func(childComplexity int) int
		Raw         func(childComplexity int) int
	}

	HomeOwner struct {
		City         func(childComplexity int) int
		Email        func(childComplexity int) int
		FirstName    func(childComplexity int) int
		ID           func(childComplexity int) int
		LastName     func(childComplexity int) int
		Latitude     func(childComplexity int) int
		Longitude    func(childComplexity int) int
		Phone        func(childComplexity int) int
		State        func(childComplexity int) int
		StreetName   func(childComplexity int) int
		StreetNumber func(childComplexity int) int
		Zip          func(childComplexity int) int
	}

	InstallationJob struct {
		Approval        func(childComplexity int) int
		ApprovalAt      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		Items           func(childComplexity int) int
		OwnerAddress    func(childComplexity int) int
		OwnerAddressLat func(childComplexity int) int
		OwnerAddressLng func(childComplexity int) int
		OwnerEmail      func(childComplexity int) int
		OwnerName       func(childComplexity int) int
		OwnerPhone      func(childComplexity int) int
		Pkg             func(childComplexity int) int
		PkgDescription  func(childComplexity int) int
		PkgFeatures     func(childComplexity int) int
		Price           func(childComplexity int) int
		SalesRep        func(childComplexity int) int
		SpecialNote     func(childComplexity int) int
		Status          func(childComplexity int) int
		StatusAt        func(childComplexity int) int
	}

	InstallationJobConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InstallationJobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InstallationJobItem struct {
		Description func(childComplexity int) int
		Features    func(childComplexity int) int
		ImageURL    func(childComplexity int) int
		Name        func(childComplexity int) int
		Price       func(childComplexity int) int
		SpecialNote func(childComplexity int) int
	}

	Invite struct {
		CompanyName func(childComplexity int) int
		ContactID   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		FirstName   func(childComplexity int) int
		ID          func(childComplexity int) int
		LastName    func(childComplexity int) int
		Phone       func(childComplexity int) int
		Type        func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	Job struct {
		CompanyName        func(childComplexity int) int
		CompletionDate     func(childComplexity int) int
		Contractor         func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Creator            func(childComplexity int) int
		CreatorName        func(childComplexity int) int
		EpcName            func(childComplexity int) int
		Estimate           func(childComplexity int) int
		HomeOwner          func(childComplexity int) int
		ID                 func(childComplexity int) int
		InspectionDate     func(childComplexity int) int
		InspectionRequired func(childComplexity int) int
		InstallDate        func(childComplexity int) int
		Note               func(childComplexity int) int
		PermitRequired     func(childComplexity int) int
		Price              func(childComplexity int) int
		Progress           func(childComplexity int) int
		ProgressAt         func(childComplexity int) int
		ProgressFlagged    func(childComplexity int) int
		SalesRep           func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		WorkOrderPrice     func(childComplexity int) int
	}

	JobConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobEstimates struct {
		Estimates func(childComplexity int) int
		ID        func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	JobNote struct {
		CreatedAt func(childComplexity int) int
		Creator   func(childComplexity int) int
		ID        func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	JobProgressData struct {
		Answer   func(childComplexity int) int
		Order    func(childComplexity int) int
		Question func(childComplexity int) int
	}

	JobProgressHistory struct {
		Complete func(childComplexity int) int
		ID       func(childComplexity int) int
		Note     func(childComplexity int) int
		Status   func(childComplexity int) int
		StatusAt func(childComplexity int) int
	}

	JobProgressHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobProgressHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LoginResult struct {
		Token func(childComplexity int) int
		User  func(childComplexity int) int
	}

	MobileAppSettings struct {
		HideTabs     func(childComplexity int) int
		LogoURL      func(childComplexity int) int
		PrimaryColor func(childComplexity int) int
	}

	Mutation struct {
		AccForgotPwd                    func(childComplexity int, email string) int
		AddAPIUser                      func(childComplexity int, username string) int
		ApproveEstimate                 func(childComplexity int, input model.ApproveEstimateInput) int
		ApproveInstallation             func(childComplexity int, input model.InstallationApproveInput) int
		AssignPartnerToJob              func(childComplexity int, jobID string, partnerID string) int
		BookInstallation                func(childComplexity int, typeArg enum.InstallationType, pkgID string, productID *string, owner model.InstallationOwnerInput) int
		ChangeAPIUserStatus             func(childComplexity int, id string, isActive bool) int
		ContactUs                       func(childComplexity int, reason string) int
		CreatJobNote                    func(childComplexity int, jobID string, note string) int
		CreateEstimate                  func(childComplexity int, input model.CreateEstimateInput) int
		CreateTrainingCourse            func(childComplexity int, name string) int
		CreateUser                      func(childComplexity int, input *account.CreateUserInput) int
		DeleteDoc                       func(childComplexity int, id string) int
		DenyEstimate                    func(childComplexity int, input model.DenyEstimateInput) int
		DenyInstallation                func(childComplexity int, id string, reason string) int
		DocumentUploadURL               func(childComplexity int, doc document.Input) int
		EditAPIUser                     func(childComplexity int, input model.APIUserInput) int
		EditJobNote                     func(childComplexity int, jobID string, noteID string, note string) int
		InvitePartner                   func(childComplexity int, input partner.Invite) int
		JobDelay                        func(childComplexity int, id string, flag bool, reason string) int
		JobDocUploadURL                 func(childComplexity int, jobID string, section enum.DocSection, doc model.InputFile) int
		JobProgressUpdate               func(childComplexity int, id string, step enum.JobProgress, stepComplete bool, note string, data *model.ProgressInput) int
		Login                           func(childComplexity int, input *account.LoginInput) int
		Logout                          func(childComplexity int) int
		MarkServiceArea                 func(childComplexity int, id string, value bool) int
		NotificationRead                func(childComplexity int, messageID string) int
		PartnerContactSendPwdResetEmail func(childComplexity int, partnerID string, userID string) int
		PartnerDocUploadURL             func(childComplexity int, partnerID string, section enum.DocSection, doc model.InputFile) int
		PartnerTrainingVideoAccess      func(childComplexity int, partnerID string, videoID string, enabled bool) int
		PublicDataUploadURL             func(childComplexity int, entityID string, section enum.DocSection, doc model.InputFile) int
		RefreshAPIUserPwd               func(childComplexity int, id string) int
		RemoveDenied                    func(childComplexity int, id string) int
		RequestAnEstimate               func(childComplexity int, inp *model.EstimateRequest) int
		SaveAPIAccess                   func(childComplexity int, input apiaccess.Input) int
		SaveLeadTime                    func(childComplexity int, partnerID string, asphalt *string, metal *string, tile *string) int
		SaveNotifySettings              func(childComplexity int, userID string, topicID string, email bool) int
		SavePartner                     func(childComplexity int, input partner.BasicDetail) int
		SavePartnerCompletedSteps       func(childComplexity int, partnerID string, step int, done *bool) int
		SavePartnerContact              func(childComplexity int, partnerID string, contact partner.ContactUserInput) int
		SavePartnerContacts             func(childComplexity int, partnerID string, contacts []*partner.ContactUserInput) int
		SavePartnerMobileSettings       func(childComplexity int, id string, inp model.InputMobileAppSettings) int
		SavePartnerOperations           func(childComplexity int, partnerID string, inp model.PartnerOperationInput) int
		SaveProduct                     func(childComplexity int, input model.ProductInput) int
		SaveProductPackage              func(childComplexity int, input model.ProductPackageInput) int
		SaveService                     func(childComplexity int, id string, partnerID string, service partner.Service, active bool) int
		SaveServiceCity                 func(childComplexity int, partnerID string, postalID string, active *bool, licNo *string, proofDocID *string) int
		SaveServiceState                func(childComplexity int, partnerID string, state string, licNo *string, expDate *time.Time, proofDocID *string) int
		SaveTrainingVideo               func(childComplexity int, inp *model.InputTrainingVideo) int
		SetMyPwd                        func(childComplexity int, oldPwd string, pwd string, confirmPwd string) int
		SetPartnerActive                func(childComplexity int, partnerID string, value bool) int
		SetUserPwd                      func(childComplexity int, userID string, pwd string, confirmPwd string) int
		SurveyDocUploadURL              func(childComplexity int, surveyID string, section enum.DocSection, doc model.InputFile) int
		SurveyRequest                   func(childComplexity int, date string, slotID string) int
		SurveyReserve                   func(childComplexity int, input model.SurveyInput) int
		TestPricing                     func(childComplexity int, job model.CreateEstimateInput, measure []*pricing.Measurement) int
		UndoDenyInstallation            func(childComplexity int, id string) int
		UpdateAPIAccessKey              func(childComplexity int, id string, key string) int
		UpdateAPIAccessSecret           func(childComplexity int, id string, secret string) int
		UpdateProfile                   func(childComplexity int, input *model1.InputUserProfile) int
		UpdateUser                      func(childComplexity int, input *account.UpdateUserInput) int
	}

	NearmapEstimateDetail struct {
		DominantRoofMaterial              func(childComplexity int) int
		DominantRoofMaterialID            func(childComplexity int) int
		DutchGableArea                    func(childComplexity int) int
		DutchGableRatio                   func(childComplexity int) int
		FlatArea                          func(childComplexity int) int
		FlatRatio                         func(childComplexity int) int
		GableArea                         func(childComplexity int) int
		GableRatio                        func(childComplexity int) int
		HipArea                           func(childComplexity int) int
		HipRatio                          func(childComplexity int) int
		MetalArea                         func(childComplexity int) int
		MetalRatio                        func(childComplexity int) int
		Price                             func(childComplexity int) int
		PrimaryPitch                      func(childComplexity int) int
		PrimaryPitchInDegrees             func(childComplexity int) int
		RoofCount                         func(childComplexity int) int
		RoofMaterialRatioTotal            func(childComplexity int) int
		RoofMaterialSurfaceAreaTotal      func(childComplexity int) int
		RoofTypeRatioTotal                func(childComplexity int) int
		RoofTypeSurfaceAreaTotal          func(childComplexity int) int
		ShingleArea                       func(childComplexity int) int
		ShingleRatio                      func(childComplexity int) int
		TileArea                          func(childComplexity int) int
		TileRatio                         func(childComplexity int) int
		TotalUnclippedArea                func(childComplexity int) int
		TreeOverhangAreaPrimaryRoof       func(childComplexity int) int
		TreeOverhangConfidencePrimaryRoof func(childComplexity int) int
		TreeOverhangCount                 func(childComplexity int) int
		TreeOverhangPresenceConfidence    func(childComplexity int) int
		TreeOverhangPresent               func(childComplexity int) int
		TreeOverhangRatioPrimaryRoof      func(childComplexity int) int
		TreeOverhangTotalClippedArea      func(childComplexity int) int
		TreeOverhangTotalUnClippedArea    func(childComplexity int) int
		TurretArea                        func(childComplexity int) int
		TurretRatio                       func(childComplexity int) int
	}

	NearmapResponse struct {
		Detail func(childComplexity int) int
		Raw    func(childComplexity int) int
	}

	Notify struct {
		ID           func(childComplexity int) int
		ReceiveEmail func(childComplexity int) int
		ReceiveSms   func(childComplexity int) int
		Topic        func(childComplexity int) int
	}

	NotifyMessage struct {
		Channel   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		From      func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		RefID     func(childComplexity int) int
		Title     func(childComplexity int) int
		Topic     func(childComplexity int) int
		Unread    func(childComplexity int) int
	}

	NotifyMessageConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NotifyMessageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Options struct {
		Options func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	Overview struct {
		ID    func(childComplexity int) int
		Items func(childComplexity int) int
		Total func(childComplexity int) int
	}

	OverviewItem struct {
		Count func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	Package struct {
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		Features    func(childComplexity int) int
		ID          func(childComplexity int) int
		Items       func(childComplexity int) int
		Name        func(childComplexity int) int
		Price       func(childComplexity int) int
		SoldAs      func(childComplexity int) int
	}

	PackageConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PackageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Partner struct {
		Address             func(childComplexity int) int
		AsphaltLeadT        func(childComplexity int) int
		Contacts            func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CrewCount           func(childComplexity int) int
		DownPayment         func(childComplexity int) int
		EpcOptions          func(childComplexity int) int
		FinanceOptions      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstallInHouse      func(childComplexity int) int
		IsActive            func(childComplexity int) int
		IsNationWide        func(childComplexity int) int
		JobCapacity         func(childComplexity int) int
		MetalLeadT          func(childComplexity int) int
		Name                func(childComplexity int) int
		PifDate             func(childComplexity int) int
		SalesVolume         func(childComplexity int) int
		SetupStepsCompleted func(childComplexity int) int
		Status              func(childComplexity int) int
		TileLeadT           func(childComplexity int) int
		Type                func(childComplexity int) int
		Website             func(childComplexity int) int
		YearsInBusiness     func(childComplexity int) int
	}

	PartnerConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PartnerContact struct {
		AccountStatus func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		Email         func(childComplexity int) int
		FirstName     func(childComplexity int) int
		ID            func(childComplexity int) int
		LastName      func(childComplexity int) int
		OtherEmail    func(childComplexity int) int
		Phone         func(childComplexity int) int
		Picture       func(childComplexity int) int
		Role          func(childComplexity int) int
		Title         func(childComplexity int) int
		Type          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	PartnerContactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PartnerContactInfo struct {
		ContactType       func(childComplexity int) int
		ID                func(childComplexity int) int
		MobileAppSettings func(childComplexity int) int
		PartnerName       func(childComplexity int) int
		Role              func(childComplexity int) int
		Status            func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	PartnerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PartnerJob struct {
		City           func(childComplexity int) int
		CompanyName    func(childComplexity int) int
		ID             func(childComplexity int) int
		Latitude       func(childComplexity int) int
		Longitude      func(childComplexity int) int
		Notes          func(childComplexity int) int
		OwnerFirstName func(childComplexity int) int
		OwnerLastName  func(childComplexity int) int
		Price          func(childComplexity int) int
		Region         func(childComplexity int) int
		RepEmail       func(childComplexity int) int
		RepFirstName   func(childComplexity int) int
		RepLastName    func(childComplexity int) int
		RepMobile      func(childComplexity int) int
		State          func(childComplexity int) int
		Status         func(childComplexity int) int
		StatusAt       func(childComplexity int) int
		StreetName     func(childComplexity int) int
		StreetNumber   func(childComplexity int) int
		Zip            func(childComplexity int) int
	}

	PartnerJobStats struct {
		ConfirmedCount         func(childComplexity int) int
		ConfirmedCountFlagged  func(childComplexity int) int
		ContactedCount         func(childComplexity int) int
		ContactedCountFlagged  func(childComplexity int) int
		DelayedCount           func(childComplexity int) int
		ID                     func(childComplexity int) int
		InProgressCount        func(childComplexity int) int
		InProgressCountFlagged func(childComplexity int) int
		InstalledCount         func(childComplexity int) int
		InstalledCountFlagged  func(childComplexity int) int
		InvoicedCount          func(childComplexity int) int
		InvoicedCountFlagged   func(childComplexity int) int
		Name                   func(childComplexity int) int
		NewCount               func(childComplexity int) int
		NewCountFlagged        func(childComplexity int) int
		PermittingCount        func(childComplexity int) int
		PermittingCountFlagged func(childComplexity int) int
		ScheduledCount         func(childComplexity int) int
		ScheduledCountFlagged  func(childComplexity int) int
		Status                 func(childComplexity int) int
		Total                  func(childComplexity int) int
		TotalFlagged           func(childComplexity int) int
	}

	PartnerService struct {
		Active      func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Service     func(childComplexity int) int
	}

	PartnerUser struct {
		Email           func(childComplexity int) int
		FirstName       func(childComplexity int) int
		ID              func(childComplexity int) int
		LastName        func(childComplexity int) int
		PartnerName     func(childComplexity int) int
		PartnerUserRole func(childComplexity int) int
		PartnerUserType func(childComplexity int) int
		Phone           func(childComplexity int) int
		Picture         func(childComplexity int) int
	}

	Point struct {
		Lat func(childComplexity int) int
		Lng func(childComplexity int) int
	}

	Price struct {
		City      func(childComplexity int) int
		Country   func(childComplexity int) int
		ID        func(childComplexity int) int
		Price     func(childComplexity int) int
		PricePer  func(childComplexity int) int
		ProductID func(childComplexity int) int
		State     func(childComplexity int) int
		StateAbr  func(childComplexity int) int
		Zip       func(childComplexity int) int
	}

	PriceSummary struct {
		Summary func(childComplexity int) int
		Total   func(childComplexity int) int
	}

	Product struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	ProductConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductDetail struct {
		ID    func(childComplexity int) int
		Image func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	ProductEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductInfo struct {
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		Features    func(childComplexity int) int
		ID          func(childComplexity int) int
		Image       func(childComplexity int) int
		Name        func(childComplexity int) int
		Price       func(childComplexity int) int
		SpecialNote func(childComplexity int) int
	}

	ProductPackage struct {
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		Features    func(childComplexity int) int
		ID          func(childComplexity int) int
		Items       func(childComplexity int) int
		Name        func(childComplexity int) int
		Price       func(childComplexity int) int
		SoldAs      func(childComplexity int) int
	}

	ProductPackageConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductPackageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductPricing struct {
		ID       func(childComplexity int) int
		Items    func(childComplexity int) int
		Products func(childComplexity int) int
	}

	ProgressFlag struct {
		Flagged func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	Query struct {
		APIAccess                  func(childComplexity int, search *string, page model.PageInput) int
		APIUser                    func(childComplexity int, id string) int
		APIUserAuditLogs           func(childComplexity int, id string, search *string, page model.PageInput, orderBy *ent.AuditLogOrder) int
		APIUsers                   func(childComplexity int, page model.PageInput, where *ent.ApiUserWhereInput) int
		AllServiceAreas            func(childComplexity int) int
		ApprovedInstallations      func(childComplexity int, typeArg enum.InstallationType, status *enum.InstallationStatus, search *string, betweenDates []string, page model.PageInput) int
		ApprovedJobs               func(childComplexity int, search *string, progress *enum.JobProgress, dates []string, page model.PageInput) int
		AssignedJobs               func(childComplexity int, progress *enum.JobProgress, search *string, betweenDates []string, page model.PageInput, orderBy *ent.JobOrder) int
		AuditLogs                  func(childComplexity int, search *string, page model.PageInput, orderBy *ent.AuditLogOrder) int
		Cities                     func(childComplexity int, state string, q string, skip int, take int) int
		Counts                     func(childComplexity int) int
		Estimate                   func(childComplexity int, id string) int
		Estimates                  func(childComplexity int, status *enum.EstimateStatus, search *string, dtRange []string, page model.PageInput) int
		GetPricing                 func(childComplexity int) int
		HvacPackages               func(childComplexity int, page model.PageInput) int
		IosAppVersion              func(childComplexity int) int
		Job                        func(childComplexity int, id string) int
		JobCompletedProgress       func(childComplexity int, id string) int
		JobDocs                    func(childComplexity int, jobID string) int
		JobDocsBySection           func(childComplexity int, jobID string) int
		JobEstimates               func(childComplexity int, jobID string) int
		JobGeoCode                 func(childComplexity int, id string) int
		JobNotes                   func(childComplexity int, jobID string) int
		JobProgress                func(childComplexity int, id string, search *string, page model.PageInput) int
		JobsByProgress             func(childComplexity int, status enum.JobProgress, search *string, betweenDates []string, page model.PageInput, orderBy *ent.JobOrder) int
		Me                         func(childComplexity int) int
		MyCompanyUsers             func(childComplexity int, search *string, page model.PageInput) int
		MyJob                      func(childComplexity int, id string) int
		MyNotifications            func(childComplexity int, page model.PageInput) int
		MyTrainingVideoCourses     func(childComplexity int, kind enum.TrainingType, pageSize *int) int
		MyTrainingVideoKinds       func(childComplexity int) int
		MyTrainingVideos           func(childComplexity int, kind enum.TrainingType, courseID string, search *string, page model.PageInput) int
		MyUnreadNotificationsCount func(childComplexity int) int
		NearmapResponse            func(childComplexity int, id string, respID string) int
		NewUlid                    func(childComplexity int) int
		OptionList                 func(childComplexity int, types []enum.OptionList) int
		Overview                   func(childComplexity int, f model.Filter) int
		Partner                    func(childComplexity int, id string, typeArg *enum.Partner) int
		PartnerContacts            func(childComplexity int, partnerID string, search *string, page model.PageInput) int
		PartnerDocs                func(childComplexity int, partnerID string, section enum.DocSection) int
		PartnerJobStats            func(childComplexity int, search *string, partnerType enum.Partner, skip int, take int) int
		PartnerJobs                func(childComplexity int, partnerID string, search *string, flagged *bool, progress *enum.JobProgress, dates []string, page model.PageInput) int
		PartnerMobileSettings      func(childComplexity int, id string) int
		PartnerNameAvailable       func(childComplexity int, id string, name string, typeArg enum.Partner) int
		PartnerOptions             func(childComplexity int, partnerID string) int
		PartnerServiceStates       func(childComplexity int, partnerID string) int
		PartnerServices            func(childComplexity int, partnerID string) int
		Partners                   func(childComplexity int, search *string, partnerType *enum.Partner, status *string, page model.PageInput) int
		PendingInstallations       func(childComplexity int, typeArg enum.InstallationType, approval *enum.Approval, search *string, betweenDates []string, page model.PageInput) int
		ProductPackages            func(childComplexity int, category *enum.Product, search *string, page model.PageInput) int
		Products                   func(childComplexity int, category *enum.Product, search *string, page model.PageInput) int
		ServiceStates              func(childComplexity int, q string) int
		SessionAlive               func(childComplexity int) int
		SmartHomePackages          func(childComplexity int, page model.PageInput) int
		States                     func(childComplexity int, q string) int
		SurveyCompletedProgress    func(childComplexity int, id string) int
		SurveyDetails              func(childComplexity int, id string) int
		SurveyDocs                 func(childComplexity int, surveyID string) int
		SurveyProgress             func(childComplexity int, id string, search *string, page model.PageInput) int
		SurveySlotAvailability     func(childComplexity int, date string) int
		Surveys                    func(childComplexity int, progress *enum.SurveyProgress, search *string, betweenDates []string, page model.PageInput, orderBy *ent.SurveyOrder) int
		TrainingCourses            func(childComplexity int, search *string, page model.PageInput) int
		TrainingVideoCourses       func(childComplexity int, kind enum.TrainingType, partnerID *string, pageSize *int) int
		TrainingVideoKinds         func(childComplexity int) int
		TrainingVideos             func(childComplexity int, kind enum.TrainingType, courseID string, search *string, partnerID *string, page model.PageInput) int
		UnassignedJobs             func(childComplexity int, progress *enum.JobProgress, search *string, betweenDates []string, page model.PageInput, orderBy *ent.JobOrder) int
		User                       func(childComplexity int, id string) int
		UserEmailAvailable         func(childComplexity int, id string, email string) int
		UserNotifySettings         func(childComplexity int, id string) int
		Users                      func(childComplexity int, page model.PageInput, where *ent.UserWhereInput) int
		UsersSearch                func(childComplexity int, search *string) int
		ViewDocURL                 func(childComplexity int, docID string) int
	}

	SectionDocs struct {
		Docs    func(childComplexity int) int
		Section func(childComplexity int) int
	}

	ServiceCity struct {
		Active       func(childComplexity int) int
		CityName     func(childComplexity int) int
		CityZip      func(childComplexity int) int
		ID           func(childComplexity int) int
		LicenseNo    func(childComplexity int) int
		LicenseProof func(childComplexity int) int
	}

	ServiceState struct {
		Cities         func(childComplexity int) int
		Expand         func(childComplexity int) int
		ID             func(childComplexity int) int
		LicenseExpDate func(childComplexity int) int
		LicenseNo      func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	SessionUser struct {
		Email          func(childComplexity int) int
		FirstName      func(childComplexity int) int
		ID             func(childComplexity int) int
		IsAdmin        func(childComplexity int) int
		IsCompanyAdmin func(childComplexity int) int
		LastName       func(childComplexity int) int
		Partner        func(childComplexity int) int
		Phone          func(childComplexity int) int
		Picture        func(childComplexity int) int
		Role           func(childComplexity int) int
		Status         func(childComplexity int) int
		Token          func(childComplexity int) int
	}

	State struct {
		Cities func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Subscription struct {
		CurrentTime func(childComplexity int) int
	}

	Survey struct {
		Address  func(childComplexity int) int
		Date     func(childComplexity int) int
		From     func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Notes    func(childComplexity int) int
		Phone    func(childComplexity int) int
		Progress func(childComplexity int) int
		Slot     func(childComplexity int) int
		Status   func(childComplexity int) int
		To       func(childComplexity int) int
	}

	SurveyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SurveyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SurveyProgressConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SurveyProgressDetail struct {
		ID       func(childComplexity int) int
		Note     func(childComplexity int) int
		Status   func(childComplexity int) int
		StatusAt func(childComplexity int) int
	}

	SurveyProgressEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SurveyProgressHistory struct {
		Complete func(childComplexity int) int
		ID       func(childComplexity int) int
		Note     func(childComplexity int) int
		Status   func(childComplexity int) int
		StatusAt func(childComplexity int) int
	}

	SurveySlot struct {
		Available func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	TrainingCourse struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	TrainingCourseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrainingCourseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrainingVideo struct {
		Assigned    func(childComplexity int) int
		Course      func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Kind        func(childComplexity int) int
		PosterURL   func(childComplexity int) int
		Title       func(childComplexity int) int
		VideoURL    func(childComplexity int) int
	}

	TrainingVideoAccess struct {
		Enabled func(childComplexity int) int
		VideoID func(childComplexity int) int
	}

	TrainingVideoConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrainingVideoEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UpdateProfileResponse struct {
		Picture func(childComplexity int) int
	}

	User struct {
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		Partner   func(childComplexity int) int
		Phone     func(childComplexity int) int
		Picture   func(childComplexity int) int
		Role      func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserInfo struct {
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Phone     func(childComplexity int) int
		Picture   func(childComplexity int) int
	}

	UserSearchResult struct {
		Email                func(childComplexity int) int
		FirstName            func(childComplexity int) int
		ID                   func(childComplexity int) int
		LastName             func(childComplexity int) int
		PartnerContactTitle  func(childComplexity int) int
		PartnerContactTypeID func(childComplexity int) int
		PartnerID            func(childComplexity int) int
		PartnerName          func(childComplexity int) int
		Phone                func(childComplexity int) int
	}
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ApiAccess.id":
		if e.complexity.ApiAccess.ID == nil {
			break
		}

		return e.complexity.ApiAccess.ID(childComplexity), true

	case "ApiAccess.key":
		if e.complexity.ApiAccess.Key == nil {
			break
		}

		return e.complexity.ApiAccess.Key(childComplexity), true

	case "ApiAccess.password":
		if e.complexity.ApiAccess.Password == nil {
			break
		}

		return e.complexity.ApiAccess.Password(childComplexity), true

	case "ApiAccess.secret":
		if e.complexity.ApiAccess.Secret == nil {
			break
		}

		return e.complexity.ApiAccess.Secret(childComplexity), true

	case "ApiAccess.url":
		if e.complexity.ApiAccess.URL == nil {
			break
		}

		return e.complexity.ApiAccess.URL(childComplexity), true

	case "ApiAccess.username":
		if e.complexity.ApiAccess.Username == nil {
			break
		}

		return e.complexity.ApiAccess.Username(childComplexity), true

	case "ApiAccessConnection.edges":
		if e.complexity.ApiAccessConnection.Edges == nil {
			break
		}

		return e.complexity.ApiAccessConnection.Edges(childComplexity), true

	case "ApiAccessConnection.pageInfo":
		if e.complexity.ApiAccessConnection.PageInfo == nil {
			break
		}

		return e.complexity.ApiAccessConnection.PageInfo(childComplexity), true

	case "ApiAccessConnection.totalCount":
		if e.complexity.ApiAccessConnection.TotalCount == nil {
			break
		}

		return e.complexity.ApiAccessConnection.TotalCount(childComplexity), true

	case "ApiAccessEdge.cursor":
		if e.complexity.ApiAccessEdge.Cursor == nil {
			break
		}

		return e.complexity.ApiAccessEdge.Cursor(childComplexity), true

	case "ApiAccessEdge.node":
		if e.complexity.ApiAccessEdge.Node == nil {
			break
		}

		return e.complexity.ApiAccessEdge.Node(childComplexity), true

	case "ApiUser.active":
		if e.complexity.ApiUser.Active == nil {
			break
		}

		return e.complexity.ApiUser.Active(childComplexity), true

	case "ApiUser.cbApiAuth":
		if e.complexity.ApiUser.CbAPIAuth == nil {
			break
		}

		return e.complexity.ApiUser.CbAPIAuth(childComplexity), true

	case "ApiUser.cbApiEndpoints":
		if e.complexity.ApiUser.CbAPIEndpoints == nil {
			break
		}

		return e.complexity.ApiUser.CbAPIEndpoints(childComplexity), true

	case "ApiUser.cbApiPwd":
		if e.complexity.ApiUser.CbAPIPwd == nil {
			break
		}

		return e.complexity.ApiUser.CbAPIPwd(childComplexity), true

	case "ApiUser.cbApiToken":
		if e.complexity.ApiUser.CbAPIToken == nil {
			break
		}

		return e.complexity.ApiUser.CbAPIToken(childComplexity), true

	case "ApiUser.cbApiUrl":
		if e.complexity.ApiUser.CbAPIURL == nil {
			break
		}

		return e.complexity.ApiUser.CbAPIURL(childComplexity), true

	case "ApiUser.cbApiUser":
		if e.complexity.ApiUser.CbAPIUser == nil {
			break
		}

		return e.complexity.ApiUser.CbAPIUser(childComplexity), true

	case "ApiUser.id":
		if e.complexity.ApiUser.ID == nil {
			break
		}

		return e.complexity.ApiUser.ID(childComplexity), true

	case "ApiUser.username":
		if e.complexity.ApiUser.Username == nil {
			break
		}

		return e.complexity.ApiUser.Username(childComplexity), true

	case "ApiUserConnection.edges":
		if e.complexity.ApiUserConnection.Edges == nil {
			break
		}

		return e.complexity.ApiUserConnection.Edges(childComplexity), true

	case "ApiUserConnection.pageInfo":
		if e.complexity.ApiUserConnection.PageInfo == nil {
			break
		}

		return e.complexity.ApiUserConnection.PageInfo(childComplexity), true

	case "ApiUserConnection.totalCount":
		if e.complexity.ApiUserConnection.TotalCount == nil {
			break
		}

		return e.complexity.ApiUserConnection.TotalCount(childComplexity), true

	case "ApiUserEdge.cursor":
		if e.complexity.ApiUserEdge.Cursor == nil {
			break
		}

		return e.complexity.ApiUserEdge.Cursor(childComplexity), true

	case "ApiUserEdge.node":
		if e.complexity.ApiUserEdge.Node == nil {
			break
		}

		return e.complexity.ApiUserEdge.Node(childComplexity), true

	case "ApiUserInfo.id":
		if e.complexity.ApiUserInfo.ID == nil {
			break
		}

		return e.complexity.ApiUserInfo.ID(childComplexity), true

	case "ApiUserInfo.username":
		if e.complexity.ApiUserInfo.Username == nil {
			break
		}

		return e.complexity.ApiUserInfo.Username(childComplexity), true

	case "AuditLog.apiUser":
		if e.complexity.AuditLog.APIUser == nil {
			break
		}

		return e.complexity.AuditLog.APIUser(childComplexity), true

	case "AuditLog.action":
		if e.complexity.AuditLog.Action == nil {
			break
		}

		return e.complexity.AuditLog.Action(childComplexity), true

	case "AuditLog.createdAt":
		if e.complexity.AuditLog.CreatedAt == nil {
			break
		}

		return e.complexity.AuditLog.CreatedAt(childComplexity), true

	case "AuditLog.description":
		if e.complexity.AuditLog.Description == nil {
			break
		}

		return e.complexity.AuditLog.Description(childComplexity), true

	case "AuditLog.id":
		if e.complexity.AuditLog.ID == nil {
			break
		}

		return e.complexity.AuditLog.ID(childComplexity), true

	case "AuditLog.ip":
		if e.complexity.AuditLog.IP == nil {
			break
		}

		return e.complexity.AuditLog.IP(childComplexity), true

	case "AuditLog.user":
		if e.complexity.AuditLog.User == nil {
			break
		}

		return e.complexity.AuditLog.User(childComplexity), true

	case "AuditLogConnection.edges":
		if e.complexity.AuditLogConnection.Edges == nil {
			break
		}

		return e.complexity.AuditLogConnection.Edges(childComplexity), true

	case "AuditLogConnection.pageInfo":
		if e.complexity.AuditLogConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuditLogConnection.PageInfo(childComplexity), true

	case "AuditLogConnection.totalCount":
		if e.complexity.AuditLogConnection.TotalCount == nil {
			break
		}

		return e.complexity.AuditLogConnection.TotalCount(childComplexity), true

	case "AuditLogEdge.cursor":
		if e.complexity.AuditLogEdge.Cursor == nil {
			break
		}

		return e.complexity.AuditLogEdge.Cursor(childComplexity), true

	case "AuditLogEdge.node":
		if e.complexity.AuditLogEdge.Node == nil {
			break
		}

		return e.complexity.AuditLogEdge.Node(childComplexity), true

	case "City.id":
		if e.complexity.City.ID == nil {
			break
		}

		return e.complexity.City.ID(childComplexity), true

	case "City.name":
		if e.complexity.City.Name == nil {
			break
		}

		return e.complexity.City.Name(childComplexity), true

	case "City.zip":
		if e.complexity.City.Zip == nil {
			break
		}

		return e.complexity.City.Zip(childComplexity), true

	case "ContactConnection.edges":
		if e.complexity.ContactConnection.Edges == nil {
			break
		}

		return e.complexity.ContactConnection.Edges(childComplexity), true

	case "ContactConnection.pageInfo":
		if e.complexity.ContactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactConnection.PageInfo(childComplexity), true

	case "ContactConnection.totalCount":
		if e.complexity.ContactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactConnection.TotalCount(childComplexity), true

	case "Counts.assignedJobCount":
		if e.complexity.Counts.AssignedJobCount == nil {
			break
		}

		return e.complexity.Counts.AssignedJobCount(childComplexity), true

	case "Counts.estimateCount":
		if e.complexity.Counts.EstimateCount == nil {
			break
		}

		return e.complexity.Counts.EstimateCount(childComplexity), true

	case "Counts.paymentsApproved":
		if e.complexity.Counts.PaymentsApproved == nil {
			break
		}

		return e.complexity.Counts.PaymentsApproved(childComplexity), true

	case "Counts.paymentsCompleted":
		if e.complexity.Counts.PaymentsCompleted == nil {
			break
		}

		return e.complexity.Counts.PaymentsCompleted(childComplexity), true

	case "Counts.paymentsPending":
		if e.complexity.Counts.PaymentsPending == nil {
			break
		}

		return e.complexity.Counts.PaymentsPending(childComplexity), true

	case "Counts.unassignedJobCount":
		if e.complexity.Counts.UnassignedJobCount == nil {
			break
		}

		return e.complexity.Counts.UnassignedJobCount(childComplexity), true

	case "CourseVideos.id":
		if e.complexity.CourseVideos.ID == nil {
			break
		}

		return e.complexity.CourseVideos.ID(childComplexity), true

	case "CourseVideos.name":
		if e.complexity.CourseVideos.Name == nil {
			break
		}

		return e.complexity.CourseVideos.Name(childComplexity), true

	case "CourseVideos.videos":
		if e.complexity.CourseVideos.Videos == nil {
			break
		}

		return e.complexity.CourseVideos.Videos(childComplexity), true

	case "Document.contentSize":
		if e.complexity.Document.ContentSize == nil {
			break
		}

		return e.complexity.Document.ContentSize(childComplexity), true

	case "Document.contentType":
		if e.complexity.Document.ContentType == nil {
			break
		}

		return e.complexity.Document.ContentType(childComplexity), true

	case "Document.createdAt":
		if e.complexity.Document.CreatedAt == nil {
			break
		}

		return e.complexity.Document.CreatedAt(childComplexity), true

	case "Document.filename":
		if e.complexity.Document.Filename == nil {
			break
		}

		return e.complexity.Document.Filename(childComplexity), true

	case "Document.id":
		if e.complexity.Document.ID == nil {
			break
		}

		return e.complexity.Document.ID(childComplexity), true

	case "Document.key":
		if e.complexity.Document.Key == nil {
			break
		}

		return e.complexity.Document.Key(childComplexity), true

	case "Document.meta":
		if e.complexity.Document.Meta == nil {
			break
		}

		return e.complexity.Document.Meta(childComplexity), true

	case "Document.name":
		if e.complexity.Document.Name == nil {
			break
		}

		return e.complexity.Document.Name(childComplexity), true

	case "Document.publicUrl":
		if e.complexity.Document.PublicURL == nil {
			break
		}

		return e.complexity.Document.PublicURL(childComplexity), true

	case "Document.ready":
		if e.complexity.Document.Ready == nil {
			break
		}

		return e.complexity.Document.Ready(childComplexity), true

	case "Document.section":
		if e.complexity.Document.Section == nil {
			break
		}

		return e.complexity.Document.Section(childComplexity), true

	case "Document.updatedAt":
		if e.complexity.Document.UpdatedAt == nil {
			break
		}

		return e.complexity.Document.UpdatedAt(childComplexity), true

	case "Document.uploadUrl":
		if e.complexity.Document.UploadUrl == nil {
			break
		}

		return e.complexity.Document.UploadUrl(childComplexity), true

	case "DocumentInfo.contentSize":
		if e.complexity.DocumentInfo.ContentSize == nil {
			break
		}

		return e.complexity.DocumentInfo.ContentSize(childComplexity), true

	case "DocumentInfo.contentType":
		if e.complexity.DocumentInfo.ContentType == nil {
			break
		}

		return e.complexity.DocumentInfo.ContentType(childComplexity), true

	case "DocumentInfo.createdAt":
		if e.complexity.DocumentInfo.CreatedAt == nil {
			break
		}

		return e.complexity.DocumentInfo.CreatedAt(childComplexity), true

	case "DocumentInfo.id":
		if e.complexity.DocumentInfo.ID == nil {
			break
		}

		return e.complexity.DocumentInfo.ID(childComplexity), true

	case "DocumentInfo.key":
		if e.complexity.DocumentInfo.Key == nil {
			break
		}

		return e.complexity.DocumentInfo.Key(childComplexity), true

	case "DocumentInfo.name":
		if e.complexity.DocumentInfo.Name == nil {
			break
		}

		return e.complexity.DocumentInfo.Name(childComplexity), true

	case "DocumentInfo.ready":
		if e.complexity.DocumentInfo.Ready == nil {
			break
		}

		return e.complexity.DocumentInfo.Ready(childComplexity), true

	case "DocumentInfo.url":
		if e.complexity.DocumentInfo.URL == nil {
			break
		}

		return e.complexity.DocumentInfo.URL(childComplexity), true

	case "Entity.id":
		if e.complexity.Entity.ID == nil {
			break
		}

		return e.complexity.Entity.ID(childComplexity), true

	case "Entity.name":
		if e.complexity.Entity.Name == nil {
			break
		}

		return e.complexity.Entity.Name(childComplexity), true

	case "Estimate.bounds":
		if e.complexity.Estimate.Bounds == nil {
			break
		}

		return e.complexity.Estimate.Bounds(childComplexity), true

	case "Estimate.companyName":
		if e.complexity.Estimate.CompanyName == nil {
			break
		}

		return e.complexity.Estimate.CompanyName(childComplexity), true

	case "Estimate.createdAt":
		if e.complexity.Estimate.CreatedAt == nil {
			break
		}

		return e.complexity.Estimate.CreatedAt(childComplexity), true

	case "Estimate.creatorName":
		if e.complexity.Estimate.CreatorName == nil {
			break
		}

		return e.complexity.Estimate.CreatorName(childComplexity), true

	case "Estimate.currentMaterial":
		if e.complexity.Estimate.CurrentMaterial == nil {
			break
		}

		return e.complexity.Estimate.CurrentMaterial(childComplexity), true

	case "Estimate.currentMaterialLowSlope":
		if e.complexity.Estimate.CurrentMaterialLowSlope == nil {
			break
		}

		return e.complexity.Estimate.CurrentMaterialLowSlope(childComplexity), true

	case "Estimate.estimatorRawResponse":
		if e.complexity.Estimate.EstimatorRawResponse == nil {
			break
		}

		return e.complexity.Estimate.EstimatorRawResponse(childComplexity), true

	case "Estimate.failureReason":
		if e.complexity.Estimate.FailureReason == nil {
			break
		}

		return e.complexity.Estimate.FailureReason(childComplexity), true

	case "Estimate.homeOwner":
		if e.complexity.Estimate.HomeOwner == nil {
			break
		}

		return e.complexity.Estimate.HomeOwner(childComplexity), true

	case "Estimate.id":
		if e.complexity.Estimate.ID == nil {
			break
		}

		return e.complexity.Estimate.ID(childComplexity), true

	case "Estimate.layer2Material":
		if e.complexity.Estimate.Layer2Material == nil {
			break
		}

		return e.complexity.Estimate.Layer2Material(childComplexity), true

	case "Estimate.layer3Material":
		if e.complexity.Estimate.Layer3Material == nil {
			break
		}

		return e.complexity.Estimate.Layer3Material(childComplexity), true

	case "Estimate.layers":
		if e.complexity.Estimate.Layers == nil {
			break
		}

		return e.complexity.Estimate.Layers(childComplexity), true

	case "Estimate.lowSlope":
		if e.complexity.Estimate.LowSlope == nil {
			break
		}

		return e.complexity.Estimate.LowSlope(childComplexity), true

	case "Estimate.measurementType":
		if e.complexity.Estimate.MeasurementType == nil {
			break
		}

		return e.complexity.Estimate.MeasurementType(childComplexity), true

	case "Estimate.newRoofingMaterial":
		if e.complexity.Estimate.NewRoofingMaterial == nil {
			break
		}

		return e.complexity.Estimate.NewRoofingMaterial(childComplexity), true

	case "Estimate.newRoofingMaterialLowSlope":
		if e.complexity.Estimate.NewRoofingMaterialLowSlope == nil {
			break
		}

		return e.complexity.Estimate.NewRoofingMaterialLowSlope(childComplexity), true

	case "Estimate.pdf":
		if e.complexity.Estimate.PDF == nil {
			break
		}

		return e.complexity.Estimate.PDF(childComplexity), true

	case "Estimate.partial":
		if e.complexity.Estimate.Partial == nil {
			break
		}

		return e.complexity.Estimate.Partial(childComplexity), true

	case "Estimate.price":
		if e.complexity.Estimate.Price == nil {
			break
		}

		return e.complexity.Estimate.Price(childComplexity), true

	case "Estimate.priceSummary":
		if e.complexity.Estimate.PriceSummary == nil {
			break
		}

		return e.complexity.Estimate.PriceSummary(childComplexity), true

	case "Estimate.primaryPitch":
		if e.complexity.Estimate.PrimaryPitch == nil {
			break
		}

		return e.complexity.Estimate.PrimaryPitch(childComplexity), true

	case "Estimate.redeck":
		if e.complexity.Estimate.Redeck == nil {
			break
		}

		return e.complexity.Estimate.Redeck(childComplexity), true

	case "Estimate.salesRep":
		if e.complexity.Estimate.SalesRep == nil {
			break
		}

		return e.complexity.Estimate.SalesRep(childComplexity), true

	case "Estimate.status":
		if e.complexity.Estimate.Status == nil {
			break
		}

		return e.complexity.Estimate.Status(childComplexity), true

	case "Estimate.totalSquares":
		if e.complexity.Estimate.TotalSquares == nil {
			break
		}

		return e.complexity.Estimate.TotalSquares(childComplexity), true

	case "EstimateConnection.edges":
		if e.complexity.EstimateConnection.Edges == nil {
			break
		}

		return e.complexity.EstimateConnection.Edges(childComplexity), true

	case "EstimateConnection.pageInfo":
		if e.complexity.EstimateConnection.PageInfo == nil {
			break
		}

		return e.complexity.EstimateConnection.PageInfo(childComplexity), true

	case "EstimateConnection.totalCount":
		if e.complexity.EstimateConnection.TotalCount == nil {
			break
		}

		return e.complexity.EstimateConnection.TotalCount(childComplexity), true

	case "EstimateEdge.cursor":
		if e.complexity.EstimateEdge.Cursor == nil {
			break
		}

		return e.complexity.EstimateEdge.Cursor(childComplexity), true

	case "EstimateEdge.node":
		if e.complexity.EstimateEdge.Node == nil {
			break
		}

		return e.complexity.EstimateEdge.Node(childComplexity), true

	case "EstimateResponse.createdAt":
		if e.complexity.EstimateResponse.CreatedAt == nil {
			break
		}

		return e.complexity.EstimateResponse.CreatedAt(childComplexity), true

	case "EstimateResponse.description":
		if e.complexity.EstimateResponse.Description == nil {
			break
		}

		return e.complexity.EstimateResponse.Description(childComplexity), true

	case "EstimateResponse.id":
		if e.complexity.EstimateResponse.ID == nil {
			break
		}

		return e.complexity.EstimateResponse.ID(childComplexity), true

	case "EstimateResponse.need":
		if e.complexity.EstimateResponse.Need == nil {
			break
		}

		return e.complexity.EstimateResponse.Need(childComplexity), true

	case "EstimateResponse.raw":
		if e.complexity.EstimateResponse.Raw == nil {
			break
		}

		return e.complexity.EstimateResponse.Raw(childComplexity), true

	case "HomeOwner.city":
		if e.complexity.HomeOwner.City == nil {
			break
		}

		return e.complexity.HomeOwner.City(childComplexity), true

	case "HomeOwner.email":
		if e.complexity.HomeOwner.Email == nil {
			break
		}

		return e.complexity.HomeOwner.Email(childComplexity), true

	case "HomeOwner.firstName":
		if e.complexity.HomeOwner.FirstName == nil {
			break
		}

		return e.complexity.HomeOwner.FirstName(childComplexity), true

	case "HomeOwner.id":
		if e.complexity.HomeOwner.ID == nil {
			break
		}

		return e.complexity.HomeOwner.ID(childComplexity), true

	case "HomeOwner.lastName":
		if e.complexity.HomeOwner.LastName == nil {
			break
		}

		return e.complexity.HomeOwner.LastName(childComplexity), true

	case "HomeOwner.latitude":
		if e.complexity.HomeOwner.Latitude == nil {
			break
		}

		return e.complexity.HomeOwner.Latitude(childComplexity), true

	case "HomeOwner.longitude":
		if e.complexity.HomeOwner.Longitude == nil {
			break
		}

		return e.complexity.HomeOwner.Longitude(childComplexity), true

	case "HomeOwner.phone":
		if e.complexity.HomeOwner.Phone == nil {
			break
		}

		return e.complexity.HomeOwner.Phone(childComplexity), true

	case "HomeOwner.state":
		if e.complexity.HomeOwner.State == nil {
			break
		}

		return e.complexity.HomeOwner.State(childComplexity), true

	case "HomeOwner.streetName":
		if e.complexity.HomeOwner.StreetName == nil {
			break
		}

		return e.complexity.HomeOwner.StreetName(childComplexity), true

	case "HomeOwner.streetNumber":
		if e.complexity.HomeOwner.StreetNumber == nil {
			break
		}

		return e.complexity.HomeOwner.StreetNumber(childComplexity), true

	case "HomeOwner.zip":
		if e.complexity.HomeOwner.Zip == nil {
			break
		}

		return e.complexity.HomeOwner.Zip(childComplexity), true

	case "InstallationJob.approval":
		if e.complexity.InstallationJob.Approval == nil {
			break
		}

		return e.complexity.InstallationJob.Approval(childComplexity), true

	case "InstallationJob.approvalAt":
		if e.complexity.InstallationJob.ApprovalAt == nil {
			break
		}

		return e.complexity.InstallationJob.ApprovalAt(childComplexity), true

	case "InstallationJob.createdAt":
		if e.complexity.InstallationJob.CreatedAt == nil {
			break
		}

		return e.complexity.InstallationJob.CreatedAt(childComplexity), true

	case "InstallationJob.id":
		if e.complexity.InstallationJob.ID == nil {
			break
		}

		return e.complexity.InstallationJob.ID(childComplexity), true

	case "InstallationJob.items":
		if e.complexity.InstallationJob.Items == nil {
			break
		}

		return e.complexity.InstallationJob.Items(childComplexity), true

	case "InstallationJob.ownerAddress":
		if e.complexity.InstallationJob.OwnerAddress == nil {
			break
		}

		return e.complexity.InstallationJob.OwnerAddress(childComplexity), true

	case "InstallationJob.ownerAddressLat":
		if e.complexity.InstallationJob.OwnerAddressLat == nil {
			break
		}

		return e.complexity.InstallationJob.OwnerAddressLat(childComplexity), true

	case "InstallationJob.ownerAddressLng":
		if e.complexity.InstallationJob.OwnerAddressLng == nil {
			break
		}

		return e.complexity.InstallationJob.OwnerAddressLng(childComplexity), true

	case "InstallationJob.ownerEmail":
		if e.complexity.InstallationJob.OwnerEmail == nil {
			break
		}

		return e.complexity.InstallationJob.OwnerEmail(childComplexity), true

	case "InstallationJob.ownerName":
		if e.complexity.InstallationJob.OwnerName == nil {
			break
		}

		return e.complexity.InstallationJob.OwnerName(childComplexity), true

	case "InstallationJob.ownerPhone":
		if e.complexity.InstallationJob.OwnerPhone == nil {
			break
		}

		return e.complexity.InstallationJob.OwnerPhone(childComplexity), true

	case "InstallationJob.pkg":
		if e.complexity.InstallationJob.Pkg == nil {
			break
		}

		return e.complexity.InstallationJob.Pkg(childComplexity), true

	case "InstallationJob.pkgDescription":
		if e.complexity.InstallationJob.PkgDescription == nil {
			break
		}

		return e.complexity.InstallationJob.PkgDescription(childComplexity), true

	case "InstallationJob.pkgFeatures":
		if e.complexity.InstallationJob.PkgFeatures == nil {
			break
		}

		return e.complexity.InstallationJob.PkgFeatures(childComplexity), true

	case "InstallationJob.price":
		if e.complexity.InstallationJob.Price == nil {
			break
		}

		return e.complexity.InstallationJob.Price(childComplexity), true

	case "InstallationJob.salesRep":
		if e.complexity.InstallationJob.SalesRep == nil {
			break
		}

		return e.complexity.InstallationJob.SalesRep(childComplexity), true

	case "InstallationJob.specialNote":
		if e.complexity.InstallationJob.SpecialNote == nil {
			break
		}

		return e.complexity.InstallationJob.SpecialNote(childComplexity), true

	case "InstallationJob.status":
		if e.complexity.InstallationJob.Status == nil {
			break
		}

		return e.complexity.InstallationJob.Status(childComplexity), true

	case "InstallationJob.statusAt":
		if e.complexity.InstallationJob.StatusAt == nil {
			break
		}

		return e.complexity.InstallationJob.StatusAt(childComplexity), true

	case "InstallationJobConnection.edges":
		if e.complexity.InstallationJobConnection.Edges == nil {
			break
		}

		return e.complexity.InstallationJobConnection.Edges(childComplexity), true

	case "InstallationJobConnection.pageInfo":
		if e.complexity.InstallationJobConnection.PageInfo == nil {
			break
		}

		return e.complexity.InstallationJobConnection.PageInfo(childComplexity), true

	case "InstallationJobConnection.totalCount":
		if e.complexity.InstallationJobConnection.TotalCount == nil {
			break
		}

		return e.complexity.InstallationJobConnection.TotalCount(childComplexity), true

	case "InstallationJobEdge.cursor":
		if e.complexity.InstallationJobEdge.Cursor == nil {
			break
		}

		return e.complexity.InstallationJobEdge.Cursor(childComplexity), true

	case "InstallationJobEdge.node":
		if e.complexity.InstallationJobEdge.Node == nil {
			break
		}

		return e.complexity.InstallationJobEdge.Node(childComplexity), true

	case "InstallationJobItem.description":
		if e.complexity.InstallationJobItem.Description == nil {
			break
		}

		return e.complexity.InstallationJobItem.Description(childComplexity), true

	case "InstallationJobItem.features":
		if e.complexity.InstallationJobItem.Features == nil {
			break
		}

		return e.complexity.InstallationJobItem.Features(childComplexity), true

	case "InstallationJobItem.imageURL":
		if e.complexity.InstallationJobItem.ImageURL == nil {
			break
		}

		return e.complexity.InstallationJobItem.ImageURL(childComplexity), true

	case "InstallationJobItem.name":
		if e.complexity.InstallationJobItem.Name == nil {
			break
		}

		return e.complexity.InstallationJobItem.Name(childComplexity), true

	case "InstallationJobItem.price":
		if e.complexity.InstallationJobItem.Price == nil {
			break
		}

		return e.complexity.InstallationJobItem.Price(childComplexity), true

	case "InstallationJobItem.specialNote":
		if e.complexity.InstallationJobItem.SpecialNote == nil {
			break
		}

		return e.complexity.InstallationJobItem.SpecialNote(childComplexity), true

	case "Invite.companyName":
		if e.complexity.Invite.CompanyName == nil {
			break
		}

		return e.complexity.Invite.CompanyName(childComplexity), true

	case "Invite.contactID":
		if e.complexity.Invite.ContactID == nil {
			break
		}

		return e.complexity.Invite.ContactID(childComplexity), true

	case "Invite.createdAt":
		if e.complexity.Invite.CreatedAt == nil {
			break
		}

		return e.complexity.Invite.CreatedAt(childComplexity), true

	case "Invite.email":
		if e.complexity.Invite.Email == nil {
			break
		}

		return e.complexity.Invite.Email(childComplexity), true

	case "Invite.firstName":
		if e.complexity.Invite.FirstName == nil {
			break
		}

		return e.complexity.Invite.FirstName(childComplexity), true

	case "Invite.id":
		if e.complexity.Invite.ID == nil {
			break
		}

		return e.complexity.Invite.ID(childComplexity), true

	case "Invite.lastName":
		if e.complexity.Invite.LastName == nil {
			break
		}

		return e.complexity.Invite.LastName(childComplexity), true

	case "Invite.phone":
		if e.complexity.Invite.Phone == nil {
			break
		}

		return e.complexity.Invite.Phone(childComplexity), true

	case "Invite.type":
		if e.complexity.Invite.Type == nil {
			break
		}

		return e.complexity.Invite.Type(childComplexity), true

	case "Invite.userID":
		if e.complexity.Invite.UserID == nil {
			break
		}

		return e.complexity.Invite.UserID(childComplexity), true

	case "Job.companyName":
		if e.complexity.Job.CompanyName == nil {
			break
		}

		return e.complexity.Job.CompanyName(childComplexity), true

	case "Job.completionDate":
		if e.complexity.Job.CompletionDate == nil {
			break
		}

		return e.complexity.Job.CompletionDate(childComplexity), true

	case "Job.contractor":
		if e.complexity.Job.Contractor == nil {
			break
		}

		return e.complexity.Job.Contractor(childComplexity), true

	case "Job.createdAt":
		if e.complexity.Job.CreatedAt == nil {
			break
		}

		return e.complexity.Job.CreatedAt(childComplexity), true

	case "Job.creator":
		if e.complexity.Job.Creator == nil {
			break
		}

		return e.complexity.Job.Creator(childComplexity), true

	case "Job.creatorName":
		if e.complexity.Job.CreatorName == nil {
			break
		}

		return e.complexity.Job.CreatorName(childComplexity), true

	case "Job.epcName":
		if e.complexity.Job.EpcName == nil {
			break
		}

		return e.complexity.Job.EpcName(childComplexity), true

	case "Job.estimate":
		if e.complexity.Job.Estimate == nil {
			break
		}

		return e.complexity.Job.Estimate(childComplexity), true

	case "Job.homeOwner":
		if e.complexity.Job.HomeOwner == nil {
			break
		}

		return e.complexity.Job.HomeOwner(childComplexity), true

	case "Job.id":
		if e.complexity.Job.ID == nil {
			break
		}

		return e.complexity.Job.ID(childComplexity), true

	case "Job.inspectionDate":
		if e.complexity.Job.InspectionDate == nil {
			break
		}

		return e.complexity.Job.InspectionDate(childComplexity), true

	case "Job.inspectionRequired":
		if e.complexity.Job.InspectionRequired == nil {
			break
		}

		return e.complexity.Job.InspectionRequired(childComplexity), true

	case "Job.installDate":
		if e.complexity.Job.InstallDate == nil {
			break
		}

		return e.complexity.Job.InstallDate(childComplexity), true

	case "Job.note":
		if e.complexity.Job.Note == nil {
			break
		}

		return e.complexity.Job.Note(childComplexity), true

	case "Job.permitRequired":
		if e.complexity.Job.PermitRequired == nil {
			break
		}

		return e.complexity.Job.PermitRequired(childComplexity), true

	case "Job.price":
		if e.complexity.Job.Price == nil {
			break
		}

		return e.complexity.Job.Price(childComplexity), true

	case "Job.progress":
		if e.complexity.Job.Progress == nil {
			break
		}

		return e.complexity.Job.Progress(childComplexity), true

	case "Job.progressAt":
		if e.complexity.Job.ProgressAt == nil {
			break
		}

		return e.complexity.Job.ProgressAt(childComplexity), true

	case "Job.progressFlagged":
		if e.complexity.Job.ProgressFlagged == nil {
			break
		}

		return e.complexity.Job.ProgressFlagged(childComplexity), true

	case "Job.salesRep":
		if e.complexity.Job.SalesRep == nil {
			break
		}

		return e.complexity.Job.SalesRep(childComplexity), true

	case "Job.updatedAt":
		if e.complexity.Job.UpdatedAt == nil {
			break
		}

		return e.complexity.Job.UpdatedAt(childComplexity), true

	case "Job.workOrderPrice":
		if e.complexity.Job.WorkOrderPrice == nil {
			break
		}

		return e.complexity.Job.WorkOrderPrice(childComplexity), true

	case "JobConnection.edges":
		if e.complexity.JobConnection.Edges == nil {
			break
		}

		return e.complexity.JobConnection.Edges(childComplexity), true

	case "JobConnection.pageInfo":
		if e.complexity.JobConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobConnection.PageInfo(childComplexity), true

	case "JobConnection.totalCount":
		if e.complexity.JobConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobConnection.TotalCount(childComplexity), true

	case "JobEdge.cursor":
		if e.complexity.JobEdge.Cursor == nil {
			break
		}

		return e.complexity.JobEdge.Cursor(childComplexity), true

	case "JobEdge.node":
		if e.complexity.JobEdge.Node == nil {
			break
		}

		return e.complexity.JobEdge.Node(childComplexity), true

	case "JobEstimates.estimates":
		if e.complexity.JobEstimates.Estimates == nil {
			break
		}

		return e.complexity.JobEstimates.Estimates(childComplexity), true

	case "JobEstimates.id":
		if e.complexity.JobEstimates.ID == nil {
			break
		}

		return e.complexity.JobEstimates.ID(childComplexity), true

	case "JobEstimates.status":
		if e.complexity.JobEstimates.Status == nil {
			break
		}

		return e.complexity.JobEstimates.Status(childComplexity), true

	case "JobNote.createdAt":
		if e.complexity.JobNote.CreatedAt == nil {
			break
		}

		return e.complexity.JobNote.CreatedAt(childComplexity), true

	case "JobNote.creator":
		if e.complexity.JobNote.Creator == nil {
			break
		}

		return e.complexity.JobNote.Creator(childComplexity), true

	case "JobNote.id":
		if e.complexity.JobNote.ID == nil {
			break
		}

		return e.complexity.JobNote.ID(childComplexity), true

	case "JobNote.note":
		if e.complexity.JobNote.Note == nil {
			break
		}

		return e.complexity.JobNote.Note(childComplexity), true

	case "JobNote.updatedAt":
		if e.complexity.JobNote.UpdatedAt == nil {
			break
		}

		return e.complexity.JobNote.UpdatedAt(childComplexity), true

	case "JobProgressData.answer":
		if e.complexity.JobProgressData.Answer == nil {
			break
		}

		return e.complexity.JobProgressData.Answer(childComplexity), true

	case "JobProgressData.order":
		if e.complexity.JobProgressData.Order == nil {
			break
		}

		return e.complexity.JobProgressData.Order(childComplexity), true

	case "JobProgressData.question":
		if e.complexity.JobProgressData.Question == nil {
			break
		}

		return e.complexity.JobProgressData.Question(childComplexity), true

	case "JobProgressHistory.complete":
		if e.complexity.JobProgressHistory.Complete == nil {
			break
		}

		return e.complexity.JobProgressHistory.Complete(childComplexity), true

	case "JobProgressHistory.id":
		if e.complexity.JobProgressHistory.ID == nil {
			break
		}

		return e.complexity.JobProgressHistory.ID(childComplexity), true

	case "JobProgressHistory.note":
		if e.complexity.JobProgressHistory.Note == nil {
			break
		}

		return e.complexity.JobProgressHistory.Note(childComplexity), true

	case "JobProgressHistory.status":
		if e.complexity.JobProgressHistory.Status == nil {
			break
		}

		return e.complexity.JobProgressHistory.Status(childComplexity), true

	case "JobProgressHistory.statusAt":
		if e.complexity.JobProgressHistory.StatusAt == nil {
			break
		}

		return e.complexity.JobProgressHistory.StatusAt(childComplexity), true

	case "JobProgressHistoryConnection.edges":
		if e.complexity.JobProgressHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.JobProgressHistoryConnection.Edges(childComplexity), true

	case "JobProgressHistoryConnection.pageInfo":
		if e.complexity.JobProgressHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobProgressHistoryConnection.PageInfo(childComplexity), true

	case "JobProgressHistoryConnection.totalCount":
		if e.complexity.JobProgressHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobProgressHistoryConnection.TotalCount(childComplexity), true

	case "JobProgressHistoryEdge.cursor":
		if e.complexity.JobProgressHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.JobProgressHistoryEdge.Cursor(childComplexity), true

	case "JobProgressHistoryEdge.node":
		if e.complexity.JobProgressHistoryEdge.Node == nil {
			break
		}

		return e.complexity.JobProgressHistoryEdge.Node(childComplexity), true

	case "LoginResult.token":
		if e.complexity.LoginResult.Token == nil {
			break
		}

		return e.complexity.LoginResult.Token(childComplexity), true

	case "LoginResult.user":
		if e.complexity.LoginResult.User == nil {
			break
		}

		return e.complexity.LoginResult.User(childComplexity), true

	case "MobileAppSettings.hideTabs":
		if e.complexity.MobileAppSettings.HideTabs == nil {
			break
		}

		return e.complexity.MobileAppSettings.HideTabs(childComplexity), true

	case "MobileAppSettings.logoURL":
		if e.complexity.MobileAppSettings.LogoURL == nil {
			break
		}

		return e.complexity.MobileAppSettings.LogoURL(childComplexity), true

	case "MobileAppSettings.primaryColor":
		if e.complexity.MobileAppSettings.PrimaryColor == nil {
			break
		}

		return e.complexity.MobileAppSettings.PrimaryColor(childComplexity), true

	case "Mutation.accForgotPwd":
		if e.complexity.Mutation.AccForgotPwd == nil {
			break
		}

		args, err := ec.field_Mutation_accForgotPwd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AccForgotPwd(childComplexity, args["email"].(string)), true

	case "Mutation.addApiUser":
		if e.complexity.Mutation.AddAPIUser == nil {
			break
		}

		args, err := ec.field_Mutation_addApiUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAPIUser(childComplexity, args["username"].(string)), true

	case "Mutation.approveEstimate":
		if e.complexity.Mutation.ApproveEstimate == nil {
			break
		}

		args, err := ec.field_Mutation_approveEstimate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveEstimate(childComplexity, args["input"].(model.ApproveEstimateInput)), true

	case "Mutation.approveInstallation":
		if e.complexity.Mutation.ApproveInstallation == nil {
			break
		}

		args, err := ec.field_Mutation_approveInstallation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveInstallation(childComplexity, args["input"].(model.InstallationApproveInput)), true

	case "Mutation.assignPartnerToJob":
		if e.complexity.Mutation.AssignPartnerToJob == nil {
			break
		}

		args, err := ec.field_Mutation_assignPartnerToJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignPartnerToJob(childComplexity, args["jobID"].(string), args["partnerID"].(string)), true

	case "Mutation.bookInstallation":
		if e.complexity.Mutation.BookInstallation == nil {
			break
		}

		args, err := ec.field_Mutation_bookInstallation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BookInstallation(childComplexity, args["type"].(enum.InstallationType), args["pkgID"].(string), args["productID"].(*string), args["owner"].(model.InstallationOwnerInput)), true

	case "Mutation.changeApiUserStatus":
		if e.complexity.Mutation.ChangeAPIUserStatus == nil {
			break
		}

		args, err := ec.field_Mutation_changeApiUserStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeAPIUserStatus(childComplexity, args["id"].(string), args["isActive"].(bool)), true

	case "Mutation.contactUs":
		if e.complexity.Mutation.ContactUs == nil {
			break
		}

		args, err := ec.field_Mutation_contactUs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactUs(childComplexity, args["reason"].(string)), true

	case "Mutation.creatJobNote":
		if e.complexity.Mutation.CreatJobNote == nil {
			break
		}

		args, err := ec.field_Mutation_creatJobNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatJobNote(childComplexity, args["jobID"].(string), args["note"].(string)), true

	case "Mutation.createEstimate":
		if e.complexity.Mutation.CreateEstimate == nil {
			break
		}

		args, err := ec.field_Mutation_createEstimate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEstimate(childComplexity, args["input"].(model.CreateEstimateInput)), true

	case "Mutation.createTrainingCourse":
		if e.complexity.Mutation.CreateTrainingCourse == nil {
			break
		}

		args, err := ec.field_Mutation_createTrainingCourse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrainingCourse(childComplexity, args["name"].(string)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(*account.CreateUserInput)), true

	case "Mutation.deleteDoc":
		if e.complexity.Mutation.DeleteDoc == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDoc(childComplexity, args["id"].(string)), true

	case "Mutation.denyEstimate":
		if e.complexity.Mutation.DenyEstimate == nil {
			break
		}

		args, err := ec.field_Mutation_denyEstimate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DenyEstimate(childComplexity, args["input"].(model.DenyEstimateInput)), true

	case "Mutation.denyInstallation":
		if e.complexity.Mutation.DenyInstallation == nil {
			break
		}

		args, err := ec.field_Mutation_denyInstallation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DenyInstallation(childComplexity, args["id"].(string), args["reason"].(string)), true

	case "Mutation.documentUploadUrl":
		if e.complexity.Mutation.DocumentUploadURL == nil {
			break
		}

		args, err := ec.field_Mutation_documentUploadUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DocumentUploadURL(childComplexity, args["doc"].(document.Input)), true

	case "Mutation.editApiUser":
		if e.complexity.Mutation.EditAPIUser == nil {
			break
		}

		args, err := ec.field_Mutation_editApiUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditAPIUser(childComplexity, args["input"].(model.APIUserInput)), true

	case "Mutation.editJobNote":
		if e.complexity.Mutation.EditJobNote == nil {
			break
		}

		args, err := ec.field_Mutation_editJobNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditJobNote(childComplexity, args["jobID"].(string), args["noteID"].(string), args["note"].(string)), true

	case "Mutation.invitePartner":
		if e.complexity.Mutation.InvitePartner == nil {
			break
		}

		args, err := ec.field_Mutation_invitePartner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvitePartner(childComplexity, args["input"].(partner.Invite)), true

	case "Mutation.jobDelay":
		if e.complexity.Mutation.JobDelay == nil {
			break
		}

		args, err := ec.field_Mutation_jobDelay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobDelay(childComplexity, args["id"].(string), args["flag"].(bool), args["reason"].(string)), true

	case "Mutation.jobDocUploadUrl":
		if e.complexity.Mutation.JobDocUploadURL == nil {
			break
		}

		args, err := ec.field_Mutation_jobDocUploadUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobDocUploadURL(childComplexity, args["jobID"].(string), args["section"].(enum.DocSection), args["doc"].(model.InputFile)), true

	case "Mutation.jobProgressUpdate":
		if e.complexity.Mutation.JobProgressUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_jobProgressUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobProgressUpdate(childComplexity, args["id"].(string), args["step"].(enum.JobProgress), args["stepComplete"].(bool), args["note"].(string), args["data"].(*model.ProgressInput)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(*account.LoginInput)), true

	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.markServiceArea":
		if e.complexity.Mutation.MarkServiceArea == nil {
			break
		}

		args, err := ec.field_Mutation_markServiceArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkServiceArea(childComplexity, args["id"].(string), args["value"].(bool)), true

	case "Mutation.notificationRead":
		if e.complexity.Mutation.NotificationRead == nil {
			break
		}

		args, err := ec.field_Mutation_notificationRead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NotificationRead(childComplexity, args["messageID"].(string)), true

	case "Mutation.partnerContactSendPwdResetEmail":
		if e.complexity.Mutation.PartnerContactSendPwdResetEmail == nil {
			break
		}

		args, err := ec.field_Mutation_partnerContactSendPwdResetEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PartnerContactSendPwdResetEmail(childComplexity, args["partnerID"].(string), args["userID"].(string)), true

	case "Mutation.partnerDocUploadUrl":
		if e.complexity.Mutation.PartnerDocUploadURL == nil {
			break
		}

		args, err := ec.field_Mutation_partnerDocUploadUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PartnerDocUploadURL(childComplexity, args["partnerID"].(string), args["section"].(enum.DocSection), args["doc"].(model.InputFile)), true

	case "Mutation.partnerTrainingVideoAccess":
		if e.complexity.Mutation.PartnerTrainingVideoAccess == nil {
			break
		}

		args, err := ec.field_Mutation_partnerTrainingVideoAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PartnerTrainingVideoAccess(childComplexity, args["partnerID"].(string), args["videoID"].(string), args["enabled"].(bool)), true

	case "Mutation.publicDataUploadUrl":
		if e.complexity.Mutation.PublicDataUploadURL == nil {
			break
		}

		args, err := ec.field_Mutation_publicDataUploadUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublicDataUploadURL(childComplexity, args["entityID"].(string), args["section"].(enum.DocSection), args["doc"].(model.InputFile)), true

	case "Mutation.refreshApiUserPwd":
		if e.complexity.Mutation.RefreshAPIUserPwd == nil {
			break
		}

		args, err := ec.field_Mutation_refreshApiUserPwd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshAPIUserPwd(childComplexity, args["id"].(string)), true

	case "Mutation.removeDenied":
		if e.complexity.Mutation.RemoveDenied == nil {
			break
		}

		args, err := ec.field_Mutation_removeDenied_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveDenied(childComplexity, args["id"].(string)), true

	case "Mutation.requestAnEstimate":
		if e.complexity.Mutation.RequestAnEstimate == nil {
			break
		}

		args, err := ec.field_Mutation_requestAnEstimate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestAnEstimate(childComplexity, args["inp"].(*model.EstimateRequest)), true

	case "Mutation.saveApiAccess":
		if e.complexity.Mutation.SaveAPIAccess == nil {
			break
		}

		args, err := ec.field_Mutation_saveApiAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveAPIAccess(childComplexity, args["input"].(apiaccess.Input)), true

	case "Mutation.saveLeadTime":
		if e.complexity.Mutation.SaveLeadTime == nil {
			break
		}

		args, err := ec.field_Mutation_saveLeadTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveLeadTime(childComplexity, args["partnerID"].(string), args["asphalt"].(*string), args["metal"].(*string), args["tile"].(*string)), true

	case "Mutation.saveNotifySettings":
		if e.complexity.Mutation.SaveNotifySettings == nil {
			break
		}

		args, err := ec.field_Mutation_saveNotifySettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveNotifySettings(childComplexity, args["userID"].(string), args["topicID"].(string), args["email"].(bool)), true

	case "Mutation.savePartner":
		if e.complexity.Mutation.SavePartner == nil {
			break
		}

		args, err := ec.field_Mutation_savePartner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePartner(childComplexity, args["input"].(partner.BasicDetail)), true

	case "Mutation.savePartnerCompletedSteps":
		if e.complexity.Mutation.SavePartnerCompletedSteps == nil {
			break
		}

		args, err := ec.field_Mutation_savePartnerCompletedSteps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePartnerCompletedSteps(childComplexity, args["partnerID"].(string), args["step"].(int), args["done"].(*bool)), true

	case "Mutation.savePartnerContact":
		if e.complexity.Mutation.SavePartnerContact == nil {
			break
		}

		args, err := ec.field_Mutation_savePartnerContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePartnerContact(childComplexity, args["partnerID"].(string), args["contact"].(partner.ContactUserInput)), true

	case "Mutation.savePartnerContacts":
		if e.complexity.Mutation.SavePartnerContacts == nil {
			break
		}

		args, err := ec.field_Mutation_savePartnerContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePartnerContacts(childComplexity, args["partnerID"].(string), args["contacts"].([]*partner.ContactUserInput)), true

	case "Mutation.savePartnerMobileSettings":
		if e.complexity.Mutation.SavePartnerMobileSettings == nil {
			break
		}

		args, err := ec.field_Mutation_savePartnerMobileSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePartnerMobileSettings(childComplexity, args["id"].(string), args["inp"].(model.InputMobileAppSettings)), true

	case "Mutation.savePartnerOperations":
		if e.complexity.Mutation.SavePartnerOperations == nil {
			break
		}

		args, err := ec.field_Mutation_savePartnerOperations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePartnerOperations(childComplexity, args["partnerID"].(string), args["inp"].(model.PartnerOperationInput)), true

	case "Mutation.saveProduct":
		if e.complexity.Mutation.SaveProduct == nil {
			break
		}

		args, err := ec.field_Mutation_saveProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveProduct(childComplexity, args["input"].(model.ProductInput)), true

	case "Mutation.saveProductPackage":
		if e.complexity.Mutation.SaveProductPackage == nil {
			break
		}

		args, err := ec.field_Mutation_saveProductPackage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveProductPackage(childComplexity, args["input"].(model.ProductPackageInput)), true

	case "Mutation.saveService":
		if e.complexity.Mutation.SaveService == nil {
			break
		}

		args, err := ec.field_Mutation_saveService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveService(childComplexity, args["id"].(string), args["partnerID"].(string), args["service"].(partner.Service), args["active"].(bool)), true

	case "Mutation.saveServiceCity":
		if e.complexity.Mutation.SaveServiceCity == nil {
			break
		}

		args, err := ec.field_Mutation_saveServiceCity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveServiceCity(childComplexity, args["partnerID"].(string), args["postalID"].(string), args["active"].(*bool), args["licNo"].(*string), args["proofDocID"].(*string)), true

	case "Mutation.saveServiceState":
		if e.complexity.Mutation.SaveServiceState == nil {
			break
		}

		args, err := ec.field_Mutation_saveServiceState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveServiceState(childComplexity, args["partnerID"].(string), args["state"].(string), args["licNo"].(*string), args["expDate"].(*time.Time), args["proofDocID"].(*string)), true

	case "Mutation.saveTrainingVideo":
		if e.complexity.Mutation.SaveTrainingVideo == nil {
			break
		}

		args, err := ec.field_Mutation_saveTrainingVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveTrainingVideo(childComplexity, args["inp"].(*model.InputTrainingVideo)), true

	case "Mutation.setMyPwd":
		if e.complexity.Mutation.SetMyPwd == nil {
			break
		}

		args, err := ec.field_Mutation_setMyPwd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetMyPwd(childComplexity, args["oldPwd"].(string), args["pwd"].(string), args["confirmPwd"].(string)), true

	case "Mutation.setPartnerActive":
		if e.complexity.Mutation.SetPartnerActive == nil {
			break
		}

		args, err := ec.field_Mutation_setPartnerActive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPartnerActive(childComplexity, args["partnerID"].(string), args["value"].(bool)), true

	case "Mutation.setUserPwd":
		if e.complexity.Mutation.SetUserPwd == nil {
			break
		}

		args, err := ec.field_Mutation_setUserPwd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUserPwd(childComplexity, args["userID"].(string), args["pwd"].(string), args["confirmPwd"].(string)), true

	case "Mutation.surveyDocUploadUrl":
		if e.complexity.Mutation.SurveyDocUploadURL == nil {
			break
		}

		args, err := ec.field_Mutation_surveyDocUploadUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SurveyDocUploadURL(childComplexity, args["surveyID"].(string), args["section"].(enum.DocSection), args["doc"].(model.InputFile)), true

	case "Mutation.surveyRequest":
		if e.complexity.Mutation.SurveyRequest == nil {
			break
		}

		args, err := ec.field_Mutation_surveyRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SurveyRequest(childComplexity, args["date"].(string), args["slotID"].(string)), true

	case "Mutation.surveyReserve":
		if e.complexity.Mutation.SurveyReserve == nil {
			break
		}

		args, err := ec.field_Mutation_surveyReserve_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SurveyReserve(childComplexity, args["input"].(model.SurveyInput)), true

	case "Mutation.testPricing":
		if e.complexity.Mutation.TestPricing == nil {
			break
		}

		args, err := ec.field_Mutation_testPricing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TestPricing(childComplexity, args["job"].(model.CreateEstimateInput), args["measure"].([]*pricing.Measurement)), true

	case "Mutation.undoDenyInstallation":
		if e.complexity.Mutation.UndoDenyInstallation == nil {
			break
		}

		args, err := ec.field_Mutation_undoDenyInstallation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UndoDenyInstallation(childComplexity, args["id"].(string)), true

	case "Mutation.updateApiAccessKey":
		if e.complexity.Mutation.UpdateAPIAccessKey == nil {
			break
		}

		args, err := ec.field_Mutation_updateApiAccessKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAPIAccessKey(childComplexity, args["id"].(string), args["key"].(string)), true

	case "Mutation.updateAPIAccessSecret":
		if e.complexity.Mutation.UpdateAPIAccessSecret == nil {
			break
		}

		args, err := ec.field_Mutation_updateAPIAccessSecret_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAPIAccessSecret(childComplexity, args["id"].(string), args["secret"].(string)), true

	case "Mutation.updateProfile":
		if e.complexity.Mutation.UpdateProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProfile(childComplexity, args["input"].(*model1.InputUserProfile)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(*account.UpdateUserInput)), true

	case "NearmapEstimateDetail.dominantRoofMaterial":
		if e.complexity.NearmapEstimateDetail.DominantRoofMaterial == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.DominantRoofMaterial(childComplexity), true

	case "NearmapEstimateDetail.dominantRoofMaterialID":
		if e.complexity.NearmapEstimateDetail.DominantRoofMaterialID == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.DominantRoofMaterialID(childComplexity), true

	case "NearmapEstimateDetail.dutchGableArea":
		if e.complexity.NearmapEstimateDetail.DutchGableArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.DutchGableArea(childComplexity), true

	case "NearmapEstimateDetail.dutchGableRatio":
		if e.complexity.NearmapEstimateDetail.DutchGableRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.DutchGableRatio(childComplexity), true

	case "NearmapEstimateDetail.flatArea":
		if e.complexity.NearmapEstimateDetail.FlatArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.FlatArea(childComplexity), true

	case "NearmapEstimateDetail.flatRatio":
		if e.complexity.NearmapEstimateDetail.FlatRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.FlatRatio(childComplexity), true

	case "NearmapEstimateDetail.gableArea":
		if e.complexity.NearmapEstimateDetail.GableArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.GableArea(childComplexity), true

	case "NearmapEstimateDetail.gableRatio":
		if e.complexity.NearmapEstimateDetail.GableRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.GableRatio(childComplexity), true

	case "NearmapEstimateDetail.hipArea":
		if e.complexity.NearmapEstimateDetail.HipArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.HipArea(childComplexity), true

	case "NearmapEstimateDetail.hipRatio":
		if e.complexity.NearmapEstimateDetail.HipRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.HipRatio(childComplexity), true

	case "NearmapEstimateDetail.metalArea":
		if e.complexity.NearmapEstimateDetail.MetalArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.MetalArea(childComplexity), true

	case "NearmapEstimateDetail.metalRatio":
		if e.complexity.NearmapEstimateDetail.MetalRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.MetalRatio(childComplexity), true

	case "NearmapEstimateDetail.price":
		if e.complexity.NearmapEstimateDetail.Price == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.Price(childComplexity), true

	case "NearmapEstimateDetail.primaryPitch":
		if e.complexity.NearmapEstimateDetail.PrimaryPitch == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.PrimaryPitch(childComplexity), true

	case "NearmapEstimateDetail.primaryPitchInDegrees":
		if e.complexity.NearmapEstimateDetail.PrimaryPitchInDegrees == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.PrimaryPitchInDegrees(childComplexity), true

	case "NearmapEstimateDetail.roofCount":
		if e.complexity.NearmapEstimateDetail.RoofCount == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.RoofCount(childComplexity), true

	case "NearmapEstimateDetail.roofMaterialRatioTotal":
		if e.complexity.NearmapEstimateDetail.RoofMaterialRatioTotal == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.RoofMaterialRatioTotal(childComplexity), true

	case "NearmapEstimateDetail.roofMaterialSurfaceAreaTotal":
		if e.complexity.NearmapEstimateDetail.RoofMaterialSurfaceAreaTotal == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.RoofMaterialSurfaceAreaTotal(childComplexity), true

	case "NearmapEstimateDetail.roofTypeRatioTotal":
		if e.complexity.NearmapEstimateDetail.RoofTypeRatioTotal == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.RoofTypeRatioTotal(childComplexity), true

	case "NearmapEstimateDetail.roofTypeSurfaceAreaTotal":
		if e.complexity.NearmapEstimateDetail.RoofTypeSurfaceAreaTotal == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.RoofTypeSurfaceAreaTotal(childComplexity), true

	case "NearmapEstimateDetail.shingleArea":
		if e.complexity.NearmapEstimateDetail.ShingleArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.ShingleArea(childComplexity), true

	case "NearmapEstimateDetail.shingleRatio":
		if e.complexity.NearmapEstimateDetail.ShingleRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.ShingleRatio(childComplexity), true

	case "NearmapEstimateDetail.tileArea":
		if e.complexity.NearmapEstimateDetail.TileArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TileArea(childComplexity), true

	case "NearmapEstimateDetail.tileRatio":
		if e.complexity.NearmapEstimateDetail.TileRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TileRatio(childComplexity), true

	case "NearmapEstimateDetail.totalUnclippedArea":
		if e.complexity.NearmapEstimateDetail.TotalUnclippedArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TotalUnclippedArea(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangAreaPrimaryRoof":
		if e.complexity.NearmapEstimateDetail.TreeOverhangAreaPrimaryRoof == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangAreaPrimaryRoof(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangConfidencePrimaryRoof":
		if e.complexity.NearmapEstimateDetail.TreeOverhangConfidencePrimaryRoof == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangConfidencePrimaryRoof(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangCount":
		if e.complexity.NearmapEstimateDetail.TreeOverhangCount == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangCount(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangPresenceConfidence":
		if e.complexity.NearmapEstimateDetail.TreeOverhangPresenceConfidence == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangPresenceConfidence(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangPresent":
		if e.complexity.NearmapEstimateDetail.TreeOverhangPresent == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangPresent(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangRatioPrimaryRoof":
		if e.complexity.NearmapEstimateDetail.TreeOverhangRatioPrimaryRoof == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangRatioPrimaryRoof(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangTotalClippedArea":
		if e.complexity.NearmapEstimateDetail.TreeOverhangTotalClippedArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangTotalClippedArea(childComplexity), true

	case "NearmapEstimateDetail.treeOverhangTotalUnClippedArea":
		if e.complexity.NearmapEstimateDetail.TreeOverhangTotalUnClippedArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TreeOverhangTotalUnClippedArea(childComplexity), true

	case "NearmapEstimateDetail.turretArea":
		if e.complexity.NearmapEstimateDetail.TurretArea == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TurretArea(childComplexity), true

	case "NearmapEstimateDetail.turretRatio":
		if e.complexity.NearmapEstimateDetail.TurretRatio == nil {
			break
		}

		return e.complexity.NearmapEstimateDetail.TurretRatio(childComplexity), true

	case "NearmapResponse.detail":
		if e.complexity.NearmapResponse.Detail == nil {
			break
		}

		return e.complexity.NearmapResponse.Detail(childComplexity), true

	case "NearmapResponse.raw":
		if e.complexity.NearmapResponse.Raw == nil {
			break
		}

		return e.complexity.NearmapResponse.Raw(childComplexity), true

	case "Notify.id":
		if e.complexity.Notify.ID == nil {
			break
		}

		return e.complexity.Notify.ID(childComplexity), true

	case "Notify.receiveEmail":
		if e.complexity.Notify.ReceiveEmail == nil {
			break
		}

		return e.complexity.Notify.ReceiveEmail(childComplexity), true

	case "Notify.receiveSMS":
		if e.complexity.Notify.ReceiveSms == nil {
			break
		}

		return e.complexity.Notify.ReceiveSms(childComplexity), true

	case "Notify.topic":
		if e.complexity.Notify.Topic == nil {
			break
		}

		return e.complexity.Notify.Topic(childComplexity), true

	case "NotifyMessage.channel":
		if e.complexity.NotifyMessage.Channel == nil {
			break
		}

		return e.complexity.NotifyMessage.Channel(childComplexity), true

	case "NotifyMessage.createdAt":
		if e.complexity.NotifyMessage.CreatedAt == nil {
			break
		}

		return e.complexity.NotifyMessage.CreatedAt(childComplexity), true

	case "NotifyMessage.from":
		if e.complexity.NotifyMessage.From == nil {
			break
		}

		return e.complexity.NotifyMessage.From(childComplexity), true

	case "NotifyMessage.id":
		if e.complexity.NotifyMessage.ID == nil {
			break
		}

		return e.complexity.NotifyMessage.ID(childComplexity), true

	case "NotifyMessage.message":
		if e.complexity.NotifyMessage.Message == nil {
			break
		}

		return e.complexity.NotifyMessage.Message(childComplexity), true

	case "NotifyMessage.refID":
		if e.complexity.NotifyMessage.RefID == nil {
			break
		}

		return e.complexity.NotifyMessage.RefID(childComplexity), true

	case "NotifyMessage.title":
		if e.complexity.NotifyMessage.Title == nil {
			break
		}

		return e.complexity.NotifyMessage.Title(childComplexity), true

	case "NotifyMessage.topic":
		if e.complexity.NotifyMessage.Topic == nil {
			break
		}

		return e.complexity.NotifyMessage.Topic(childComplexity), true

	case "NotifyMessage.unread":
		if e.complexity.NotifyMessage.Unread == nil {
			break
		}

		return e.complexity.NotifyMessage.Unread(childComplexity), true

	case "NotifyMessageConnection.edges":
		if e.complexity.NotifyMessageConnection.Edges == nil {
			break
		}

		return e.complexity.NotifyMessageConnection.Edges(childComplexity), true

	case "NotifyMessageConnection.pageInfo":
		if e.complexity.NotifyMessageConnection.PageInfo == nil {
			break
		}

		return e.complexity.NotifyMessageConnection.PageInfo(childComplexity), true

	case "NotifyMessageConnection.totalCount":
		if e.complexity.NotifyMessageConnection.TotalCount == nil {
			break
		}

		return e.complexity.NotifyMessageConnection.TotalCount(childComplexity), true

	case "NotifyMessageEdge.cursor":
		if e.complexity.NotifyMessageEdge.Cursor == nil {
			break
		}

		return e.complexity.NotifyMessageEdge.Cursor(childComplexity), true

	case "NotifyMessageEdge.node":
		if e.complexity.NotifyMessageEdge.Node == nil {
			break
		}

		return e.complexity.NotifyMessageEdge.Node(childComplexity), true

	case "Options.options":
		if e.complexity.Options.Options == nil {
			break
		}

		return e.complexity.Options.Options(childComplexity), true

	case "Options.type":
		if e.complexity.Options.Type == nil {
			break
		}

		return e.complexity.Options.Type(childComplexity), true

	case "Overview.id":
		if e.complexity.Overview.ID == nil {
			break
		}

		return e.complexity.Overview.ID(childComplexity), true

	case "Overview.items":
		if e.complexity.Overview.Items == nil {
			break
		}

		return e.complexity.Overview.Items(childComplexity), true

	case "Overview.total":
		if e.complexity.Overview.Total == nil {
			break
		}

		return e.complexity.Overview.Total(childComplexity), true

	case "OverviewItem.count":
		if e.complexity.OverviewItem.Count == nil {
			break
		}

		return e.complexity.OverviewItem.Count(childComplexity), true

	case "OverviewItem.id":
		if e.complexity.OverviewItem.ID == nil {
			break
		}

		return e.complexity.OverviewItem.ID(childComplexity), true

	case "OverviewItem.name":
		if e.complexity.OverviewItem.Name == nil {
			break
		}

		return e.complexity.OverviewItem.Name(childComplexity), true

	case "Package.category":
		if e.complexity.Package.Category == nil {
			break
		}

		return e.complexity.Package.Category(childComplexity), true

	case "Package.description":
		if e.complexity.Package.Description == nil {
			break
		}

		return e.complexity.Package.Description(childComplexity), true

	case "Package.features":
		if e.complexity.Package.Features == nil {
			break
		}

		return e.complexity.Package.Features(childComplexity), true

	case "Package.id":
		if e.complexity.Package.ID == nil {
			break
		}

		return e.complexity.Package.ID(childComplexity), true

	case "Package.items":
		if e.complexity.Package.Items == nil {
			break
		}

		return e.complexity.Package.Items(childComplexity), true

	case "Package.name":
		if e.complexity.Package.Name == nil {
			break
		}

		return e.complexity.Package.Name(childComplexity), true

	case "Package.price":
		if e.complexity.Package.Price == nil {
			break
		}

		return e.complexity.Package.Price(childComplexity), true

	case "Package.soldAs":
		if e.complexity.Package.SoldAs == nil {
			break
		}

		return e.complexity.Package.SoldAs(childComplexity), true

	case "PackageConnection.edges":
		if e.complexity.PackageConnection.Edges == nil {
			break
		}

		return e.complexity.PackageConnection.Edges(childComplexity), true

	case "PackageConnection.pageInfo":
		if e.complexity.PackageConnection.PageInfo == nil {
			break
		}

		return e.complexity.PackageConnection.PageInfo(childComplexity), true

	case "PackageConnection.totalCount":
		if e.complexity.PackageConnection.TotalCount == nil {
			break
		}

		return e.complexity.PackageConnection.TotalCount(childComplexity), true

	case "PackageEdge.cursor":
		if e.complexity.PackageEdge.Cursor == nil {
			break
		}

		return e.complexity.PackageEdge.Cursor(childComplexity), true

	case "PackageEdge.node":
		if e.complexity.PackageEdge.Node == nil {
			break
		}

		return e.complexity.PackageEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Partner.address":
		if e.complexity.Partner.Address == nil {
			break
		}

		return e.complexity.Partner.Address(childComplexity), true

	case "Partner.asphaltLeadT":
		if e.complexity.Partner.AsphaltLeadT == nil {
			break
		}

		return e.complexity.Partner.AsphaltLeadT(childComplexity), true

	case "Partner.contacts":
		if e.complexity.Partner.Contacts == nil {
			break
		}

		return e.complexity.Partner.Contacts(childComplexity), true

	case "Partner.createdAt":
		if e.complexity.Partner.CreatedAt == nil {
			break
		}

		return e.complexity.Partner.CreatedAt(childComplexity), true

	case "Partner.crewCount":
		if e.complexity.Partner.CrewCount == nil {
			break
		}

		return e.complexity.Partner.CrewCount(childComplexity), true

	case "Partner.downPayment":
		if e.complexity.Partner.DownPayment == nil {
			break
		}

		return e.complexity.Partner.DownPayment(childComplexity), true

	case "Partner.epcOptions":
		if e.complexity.Partner.EpcOptions == nil {
			break
		}

		return e.complexity.Partner.EpcOptions(childComplexity), true

	case "Partner.financeOptions":
		if e.complexity.Partner.FinanceOptions == nil {
			break
		}

		return e.complexity.Partner.FinanceOptions(childComplexity), true

	case "Partner.id":
		if e.complexity.Partner.ID == nil {
			break
		}

		return e.complexity.Partner.ID(childComplexity), true

	case "Partner.installInHouse":
		if e.complexity.Partner.InstallInHouse == nil {
			break
		}

		return e.complexity.Partner.InstallInHouse(childComplexity), true

	case "Partner.isActive":
		if e.complexity.Partner.IsActive == nil {
			break
		}

		return e.complexity.Partner.IsActive(childComplexity), true

	case "Partner.isNationWide":
		if e.complexity.Partner.IsNationWide == nil {
			break
		}

		return e.complexity.Partner.IsNationWide(childComplexity), true

	case "Partner.jobCapacity":
		if e.complexity.Partner.JobCapacity == nil {
			break
		}

		return e.complexity.Partner.JobCapacity(childComplexity), true

	case "Partner.metalLeadT":
		if e.complexity.Partner.MetalLeadT == nil {
			break
		}

		return e.complexity.Partner.MetalLeadT(childComplexity), true

	case "Partner.name":
		if e.complexity.Partner.Name == nil {
			break
		}

		return e.complexity.Partner.Name(childComplexity), true

	case "Partner.pifDate":
		if e.complexity.Partner.PifDate == nil {
			break
		}

		return e.complexity.Partner.PifDate(childComplexity), true

	case "Partner.salesVolume":
		if e.complexity.Partner.SalesVolume == nil {
			break
		}

		return e.complexity.Partner.SalesVolume(childComplexity), true

	case "Partner.setupStepsCompleted":
		if e.complexity.Partner.SetupStepsCompleted == nil {
			break
		}

		return e.complexity.Partner.SetupStepsCompleted(childComplexity), true

	case "Partner.status":
		if e.complexity.Partner.Status == nil {
			break
		}

		return e.complexity.Partner.Status(childComplexity), true

	case "Partner.tileLeadT":
		if e.complexity.Partner.TileLeadT == nil {
			break
		}

		return e.complexity.Partner.TileLeadT(childComplexity), true

	case "Partner.type":
		if e.complexity.Partner.Type == nil {
			break
		}

		return e.complexity.Partner.Type(childComplexity), true

	case "Partner.website":
		if e.complexity.Partner.Website == nil {
			break
		}

		return e.complexity.Partner.Website(childComplexity), true

	case "Partner.yearsInBusiness":
		if e.complexity.Partner.YearsInBusiness == nil {
			break
		}

		return e.complexity.Partner.YearsInBusiness(childComplexity), true

	case "PartnerConnection.edges":
		if e.complexity.PartnerConnection.Edges == nil {
			break
		}

		return e.complexity.PartnerConnection.Edges(childComplexity), true

	case "PartnerConnection.pageInfo":
		if e.complexity.PartnerConnection.PageInfo == nil {
			break
		}

		return e.complexity.PartnerConnection.PageInfo(childComplexity), true

	case "PartnerConnection.totalCount":
		if e.complexity.PartnerConnection.TotalCount == nil {
			break
		}

		return e.complexity.PartnerConnection.TotalCount(childComplexity), true

	case "PartnerContact.accountStatus":
		if e.complexity.PartnerContact.AccountStatus == nil {
			break
		}

		return e.complexity.PartnerContact.AccountStatus(childComplexity), true

	case "PartnerContact.createdAt":
		if e.complexity.PartnerContact.CreatedAt == nil {
			break
		}

		return e.complexity.PartnerContact.CreatedAt(childComplexity), true

	case "PartnerContact.description":
		if e.complexity.PartnerContact.Description == nil {
			break
		}

		return e.complexity.PartnerContact.Description(childComplexity), true

	case "PartnerContact.email":
		if e.complexity.PartnerContact.Email == nil {
			break
		}

		return e.complexity.PartnerContact.Email(childComplexity), true

	case "PartnerContact.firstName":
		if e.complexity.PartnerContact.FirstName == nil {
			break
		}

		return e.complexity.PartnerContact.FirstName(childComplexity), true

	case "PartnerContact.id":
		if e.complexity.PartnerContact.ID == nil {
			break
		}

		return e.complexity.PartnerContact.ID(childComplexity), true

	case "PartnerContact.lastName":
		if e.complexity.PartnerContact.LastName == nil {
			break
		}

		return e.complexity.PartnerContact.LastName(childComplexity), true

	case "PartnerContact.otherEmail":
		if e.complexity.PartnerContact.OtherEmail == nil {
			break
		}

		return e.complexity.PartnerContact.OtherEmail(childComplexity), true

	case "PartnerContact.phone":
		if e.complexity.PartnerContact.Phone == nil {
			break
		}

		return e.complexity.PartnerContact.Phone(childComplexity), true

	case "PartnerContact.picture":
		if e.complexity.PartnerContact.Picture == nil {
			break
		}

		return e.complexity.PartnerContact.Picture(childComplexity), true

	case "PartnerContact.role":
		if e.complexity.PartnerContact.Role == nil {
			break
		}

		return e.complexity.PartnerContact.Role(childComplexity), true

	case "PartnerContact.title":
		if e.complexity.PartnerContact.Title == nil {
			break
		}

		return e.complexity.PartnerContact.Title(childComplexity), true

	case "PartnerContact.type":
		if e.complexity.PartnerContact.Type == nil {
			break
		}

		return e.complexity.PartnerContact.Type(childComplexity), true

	case "PartnerContact.userID":
		if e.complexity.PartnerContact.UserID == nil {
			break
		}

		return e.complexity.PartnerContact.UserID(childComplexity), true

	case "PartnerContactEdge.cursor":
		if e.complexity.PartnerContactEdge.Cursor == nil {
			break
		}

		return e.complexity.PartnerContactEdge.Cursor(childComplexity), true

	case "PartnerContactEdge.node":
		if e.complexity.PartnerContactEdge.Node == nil {
			break
		}

		return e.complexity.PartnerContactEdge.Node(childComplexity), true

	case "PartnerContactInfo.contactType":
		if e.complexity.PartnerContactInfo.ContactType == nil {
			break
		}

		return e.complexity.PartnerContactInfo.ContactType(childComplexity), true

	case "PartnerContactInfo.id":
		if e.complexity.PartnerContactInfo.ID == nil {
			break
		}

		return e.complexity.PartnerContactInfo.ID(childComplexity), true

	case "PartnerContactInfo.mobileAppSettings":
		if e.complexity.PartnerContactInfo.MobileAppSettings == nil {
			break
		}

		return e.complexity.PartnerContactInfo.MobileAppSettings(childComplexity), true

	case "PartnerContactInfo.partnerName":
		if e.complexity.PartnerContactInfo.PartnerName == nil {
			break
		}

		return e.complexity.PartnerContactInfo.PartnerName(childComplexity), true

	case "PartnerContactInfo.role":
		if e.complexity.PartnerContactInfo.Role == nil {
			break
		}

		return e.complexity.PartnerContactInfo.Role(childComplexity), true

	case "PartnerContactInfo.status":
		if e.complexity.PartnerContactInfo.Status == nil {
			break
		}

		return e.complexity.PartnerContactInfo.Status(childComplexity), true

	case "PartnerContactInfo.type":
		if e.complexity.PartnerContactInfo.Type == nil {
			break
		}

		return e.complexity.PartnerContactInfo.Type(childComplexity), true

	case "PartnerEdge.cursor":
		if e.complexity.PartnerEdge.Cursor == nil {
			break
		}

		return e.complexity.PartnerEdge.Cursor(childComplexity), true

	case "PartnerEdge.node":
		if e.complexity.PartnerEdge.Node == nil {
			break
		}

		return e.complexity.PartnerEdge.Node(childComplexity), true

	case "PartnerJob.city":
		if e.complexity.PartnerJob.City == nil {
			break
		}

		return e.complexity.PartnerJob.City(childComplexity), true

	case "PartnerJob.companyName":
		if e.complexity.PartnerJob.CompanyName == nil {
			break
		}

		return e.complexity.PartnerJob.CompanyName(childComplexity), true

	case "PartnerJob.id":
		if e.complexity.PartnerJob.ID == nil {
			break
		}

		return e.complexity.PartnerJob.ID(childComplexity), true

	case "PartnerJob.latitude":
		if e.complexity.PartnerJob.Latitude == nil {
			break
		}

		return e.complexity.PartnerJob.Latitude(childComplexity), true

	case "PartnerJob.longitude":
		if e.complexity.PartnerJob.Longitude == nil {
			break
		}

		return e.complexity.PartnerJob.Longitude(childComplexity), true

	case "PartnerJob.notes":
		if e.complexity.PartnerJob.Notes == nil {
			break
		}

		return e.complexity.PartnerJob.Notes(childComplexity), true

	case "PartnerJob.ownerFirstName":
		if e.complexity.PartnerJob.OwnerFirstName == nil {
			break
		}

		return e.complexity.PartnerJob.OwnerFirstName(childComplexity), true

	case "PartnerJob.ownerLastName":
		if e.complexity.PartnerJob.OwnerLastName == nil {
			break
		}

		return e.complexity.PartnerJob.OwnerLastName(childComplexity), true

	case "PartnerJob.price":
		if e.complexity.PartnerJob.Price == nil {
			break
		}

		return e.complexity.PartnerJob.Price(childComplexity), true

	case "PartnerJob.region":
		if e.complexity.PartnerJob.Region == nil {
			break
		}

		return e.complexity.PartnerJob.Region(childComplexity), true

	case "PartnerJob.repEmail":
		if e.complexity.PartnerJob.RepEmail == nil {
			break
		}

		return e.complexity.PartnerJob.RepEmail(childComplexity), true

	case "PartnerJob.repFirstName":
		if e.complexity.PartnerJob.RepFirstName == nil {
			break
		}

		return e.complexity.PartnerJob.RepFirstName(childComplexity), true

	case "PartnerJob.repLastName":
		if e.complexity.PartnerJob.RepLastName == nil {
			break
		}

		return e.complexity.PartnerJob.RepLastName(childComplexity), true

	case "PartnerJob.repMobile":
		if e.complexity.PartnerJob.RepMobile == nil {
			break
		}

		return e.complexity.PartnerJob.RepMobile(childComplexity), true

	case "PartnerJob.state":
		if e.complexity.PartnerJob.State == nil {
			break
		}

		return e.complexity.PartnerJob.State(childComplexity), true

	case "PartnerJob.status":
		if e.complexity.PartnerJob.Status == nil {
			break
		}

		return e.complexity.PartnerJob.Status(childComplexity), true

	case "PartnerJob.statusAt":
		if e.complexity.PartnerJob.StatusAt == nil {
			break
		}

		return e.complexity.PartnerJob.StatusAt(childComplexity), true

	case "PartnerJob.streetName":
		if e.complexity.PartnerJob.StreetName == nil {
			break
		}

		return e.complexity.PartnerJob.StreetName(childComplexity), true

	case "PartnerJob.streetNumber":
		if e.complexity.PartnerJob.StreetNumber == nil {
			break
		}

		return e.complexity.PartnerJob.StreetNumber(childComplexity), true

	case "PartnerJob.zip":
		if e.complexity.PartnerJob.Zip == nil {
			break
		}

		return e.complexity.PartnerJob.Zip(childComplexity), true

	case "PartnerJobStats.confirmedCount":
		if e.complexity.PartnerJobStats.ConfirmedCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.ConfirmedCount(childComplexity), true

	case "PartnerJobStats.confirmedCountFlagged":
		if e.complexity.PartnerJobStats.ConfirmedCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.ConfirmedCountFlagged(childComplexity), true

	case "PartnerJobStats.contactedCount":
		if e.complexity.PartnerJobStats.ContactedCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.ContactedCount(childComplexity), true

	case "PartnerJobStats.contactedCountFlagged":
		if e.complexity.PartnerJobStats.ContactedCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.ContactedCountFlagged(childComplexity), true

	case "PartnerJobStats.delayedCount":
		if e.complexity.PartnerJobStats.DelayedCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.DelayedCount(childComplexity), true

	case "PartnerJobStats.id":
		if e.complexity.PartnerJobStats.ID == nil {
			break
		}

		return e.complexity.PartnerJobStats.ID(childComplexity), true

	case "PartnerJobStats.inProgressCount":
		if e.complexity.PartnerJobStats.InProgressCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.InProgressCount(childComplexity), true

	case "PartnerJobStats.inProgressCountFlagged":
		if e.complexity.PartnerJobStats.InProgressCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.InProgressCountFlagged(childComplexity), true

	case "PartnerJobStats.installedCount":
		if e.complexity.PartnerJobStats.InstalledCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.InstalledCount(childComplexity), true

	case "PartnerJobStats.installedCountFlagged":
		if e.complexity.PartnerJobStats.InstalledCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.InstalledCountFlagged(childComplexity), true

	case "PartnerJobStats.invoicedCount":
		if e.complexity.PartnerJobStats.InvoicedCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.InvoicedCount(childComplexity), true

	case "PartnerJobStats.invoicedCountFlagged":
		if e.complexity.PartnerJobStats.InvoicedCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.InvoicedCountFlagged(childComplexity), true

	case "PartnerJobStats.name":
		if e.complexity.PartnerJobStats.Name == nil {
			break
		}

		return e.complexity.PartnerJobStats.Name(childComplexity), true

	case "PartnerJobStats.newCount":
		if e.complexity.PartnerJobStats.NewCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.NewCount(childComplexity), true

	case "PartnerJobStats.newCountFlagged":
		if e.complexity.PartnerJobStats.NewCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.NewCountFlagged(childComplexity), true

	case "PartnerJobStats.permittingCount":
		if e.complexity.PartnerJobStats.PermittingCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.PermittingCount(childComplexity), true

	case "PartnerJobStats.permittingCountFlagged":
		if e.complexity.PartnerJobStats.PermittingCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.PermittingCountFlagged(childComplexity), true

	case "PartnerJobStats.scheduledCount":
		if e.complexity.PartnerJobStats.ScheduledCount == nil {
			break
		}

		return e.complexity.PartnerJobStats.ScheduledCount(childComplexity), true

	case "PartnerJobStats.scheduledCountFlagged":
		if e.complexity.PartnerJobStats.ScheduledCountFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.ScheduledCountFlagged(childComplexity), true

	case "PartnerJobStats.status":
		if e.complexity.PartnerJobStats.Status == nil {
			break
		}

		return e.complexity.PartnerJobStats.Status(childComplexity), true

	case "PartnerJobStats.total":
		if e.complexity.PartnerJobStats.Total == nil {
			break
		}

		return e.complexity.PartnerJobStats.Total(childComplexity), true

	case "PartnerJobStats.totalFlagged":
		if e.complexity.PartnerJobStats.TotalFlagged == nil {
			break
		}

		return e.complexity.PartnerJobStats.TotalFlagged(childComplexity), true

	case "PartnerService.active":
		if e.complexity.PartnerService.Active == nil {
			break
		}

		return e.complexity.PartnerService.Active(childComplexity), true

	case "PartnerService.description":
		if e.complexity.PartnerService.Description == nil {
			break
		}

		return e.complexity.PartnerService.Description(childComplexity), true

	case "PartnerService.id":
		if e.complexity.PartnerService.ID == nil {
			break
		}

		return e.complexity.PartnerService.ID(childComplexity), true

	case "PartnerService.service":
		if e.complexity.PartnerService.Service == nil {
			break
		}

		return e.complexity.PartnerService.Service(childComplexity), true

	case "PartnerUser.email":
		if e.complexity.PartnerUser.Email == nil {
			break
		}

		return e.complexity.PartnerUser.Email(childComplexity), true

	case "PartnerUser.firstName":
		if e.complexity.PartnerUser.FirstName == nil {
			break
		}

		return e.complexity.PartnerUser.FirstName(childComplexity), true

	case "PartnerUser.id":
		if e.complexity.PartnerUser.ID == nil {
			break
		}

		return e.complexity.PartnerUser.ID(childComplexity), true

	case "PartnerUser.lastName":
		if e.complexity.PartnerUser.LastName == nil {
			break
		}

		return e.complexity.PartnerUser.LastName(childComplexity), true

	case "PartnerUser.partnerName":
		if e.complexity.PartnerUser.PartnerName == nil {
			break
		}

		return e.complexity.PartnerUser.PartnerName(childComplexity), true

	case "PartnerUser.partnerUserRole":
		if e.complexity.PartnerUser.PartnerUserRole == nil {
			break
		}

		return e.complexity.PartnerUser.PartnerUserRole(childComplexity), true

	case "PartnerUser.partnerUserType":
		if e.complexity.PartnerUser.PartnerUserType == nil {
			break
		}

		return e.complexity.PartnerUser.PartnerUserType(childComplexity), true

	case "PartnerUser.phone":
		if e.complexity.PartnerUser.Phone == nil {
			break
		}

		return e.complexity.PartnerUser.Phone(childComplexity), true

	case "PartnerUser.picture":
		if e.complexity.PartnerUser.Picture == nil {
			break
		}

		return e.complexity.PartnerUser.Picture(childComplexity), true

	case "Point.lat":
		if e.complexity.Point.Lat == nil {
			break
		}

		return e.complexity.Point.Lat(childComplexity), true

	case "Point.lng":
		if e.complexity.Point.Lng == nil {
			break
		}

		return e.complexity.Point.Lng(childComplexity), true

	case "Price.city":
		if e.complexity.Price.City == nil {
			break
		}

		return e.complexity.Price.City(childComplexity), true

	case "Price.country":
		if e.complexity.Price.Country == nil {
			break
		}

		return e.complexity.Price.Country(childComplexity), true

	case "Price.id":
		if e.complexity.Price.ID == nil {
			break
		}

		return e.complexity.Price.ID(childComplexity), true

	case "Price.price":
		if e.complexity.Price.Price == nil {
			break
		}

		return e.complexity.Price.Price(childComplexity), true

	case "Price.pricePer":
		if e.complexity.Price.PricePer == nil {
			break
		}

		return e.complexity.Price.PricePer(childComplexity), true

	case "Price.productId":
		if e.complexity.Price.ProductID == nil {
			break
		}

		return e.complexity.Price.ProductID(childComplexity), true

	case "Price.state":
		if e.complexity.Price.State == nil {
			break
		}

		return e.complexity.Price.State(childComplexity), true

	case "Price.stateAbr":
		if e.complexity.Price.StateAbr == nil {
			break
		}

		return e.complexity.Price.StateAbr(childComplexity), true

	case "Price.zip":
		if e.complexity.Price.Zip == nil {
			break
		}

		return e.complexity.Price.Zip(childComplexity), true

	case "PriceSummary.summary":
		if e.complexity.PriceSummary.Summary == nil {
			break
		}

		return e.complexity.PriceSummary.Summary(childComplexity), true

	case "PriceSummary.total":
		if e.complexity.PriceSummary.Total == nil {
			break
		}

		return e.complexity.PriceSummary.Total(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "ProductConnection.edges":
		if e.complexity.ProductConnection.Edges == nil {
			break
		}

		return e.complexity.ProductConnection.Edges(childComplexity), true

	case "ProductConnection.pageInfo":
		if e.complexity.ProductConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductConnection.PageInfo(childComplexity), true

	case "ProductConnection.totalCount":
		if e.complexity.ProductConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductConnection.TotalCount(childComplexity), true

	case "ProductDetail.id":
		if e.complexity.ProductDetail.ID == nil {
			break
		}

		return e.complexity.ProductDetail.ID(childComplexity), true

	case "ProductDetail.image":
		if e.complexity.ProductDetail.Image == nil {
			break
		}

		return e.complexity.ProductDetail.Image(childComplexity), true

	case "ProductDetail.name":
		if e.complexity.ProductDetail.Name == nil {
			break
		}

		return e.complexity.ProductDetail.Name(childComplexity), true

	case "ProductEdge.cursor":
		if e.complexity.ProductEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductEdge.Cursor(childComplexity), true

	case "ProductEdge.node":
		if e.complexity.ProductEdge.Node == nil {
			break
		}

		return e.complexity.ProductEdge.Node(childComplexity), true

	case "ProductInfo.category":
		if e.complexity.ProductInfo.Category == nil {
			break
		}

		return e.complexity.ProductInfo.Category(childComplexity), true

	case "ProductInfo.description":
		if e.complexity.ProductInfo.Description == nil {
			break
		}

		return e.complexity.ProductInfo.Description(childComplexity), true

	case "ProductInfo.features":
		if e.complexity.ProductInfo.Features == nil {
			break
		}

		return e.complexity.ProductInfo.Features(childComplexity), true

	case "ProductInfo.id":
		if e.complexity.ProductInfo.ID == nil {
			break
		}

		return e.complexity.ProductInfo.ID(childComplexity), true

	case "ProductInfo.image":
		if e.complexity.ProductInfo.Image == nil {
			break
		}

		return e.complexity.ProductInfo.Image(childComplexity), true

	case "ProductInfo.name":
		if e.complexity.ProductInfo.Name == nil {
			break
		}

		return e.complexity.ProductInfo.Name(childComplexity), true

	case "ProductInfo.price":
		if e.complexity.ProductInfo.Price == nil {
			break
		}

		return e.complexity.ProductInfo.Price(childComplexity), true

	case "ProductInfo.specialNote":
		if e.complexity.ProductInfo.SpecialNote == nil {
			break
		}

		return e.complexity.ProductInfo.SpecialNote(childComplexity), true

	case "ProductPackage.category":
		if e.complexity.ProductPackage.Category == nil {
			break
		}

		return e.complexity.ProductPackage.Category(childComplexity), true

	case "ProductPackage.description":
		if e.complexity.ProductPackage.Description == nil {
			break
		}

		return e.complexity.ProductPackage.Description(childComplexity), true

	case "ProductPackage.features":
		if e.complexity.ProductPackage.Features == nil {
			break
		}

		return e.complexity.ProductPackage.Features(childComplexity), true

	case "ProductPackage.id":
		if e.complexity.ProductPackage.ID == nil {
			break
		}

		return e.complexity.ProductPackage.ID(childComplexity), true

	case "ProductPackage.items":
		if e.complexity.ProductPackage.Items == nil {
			break
		}

		return e.complexity.ProductPackage.Items(childComplexity), true

	case "ProductPackage.name":
		if e.complexity.ProductPackage.Name == nil {
			break
		}

		return e.complexity.ProductPackage.Name(childComplexity), true

	case "ProductPackage.price":
		if e.complexity.ProductPackage.Price == nil {
			break
		}

		return e.complexity.ProductPackage.Price(childComplexity), true

	case "ProductPackage.soldAs":
		if e.complexity.ProductPackage.SoldAs == nil {
			break
		}

		return e.complexity.ProductPackage.SoldAs(childComplexity), true

	case "ProductPackageConnection.edges":
		if e.complexity.ProductPackageConnection.Edges == nil {
			break
		}

		return e.complexity.ProductPackageConnection.Edges(childComplexity), true

	case "ProductPackageConnection.pageInfo":
		if e.complexity.ProductPackageConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductPackageConnection.PageInfo(childComplexity), true

	case "ProductPackageConnection.totalCount":
		if e.complexity.ProductPackageConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductPackageConnection.TotalCount(childComplexity), true

	case "ProductPackageEdge.cursor":
		if e.complexity.ProductPackageEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductPackageEdge.Cursor(childComplexity), true

	case "ProductPackageEdge.node":
		if e.complexity.ProductPackageEdge.Node == nil {
			break
		}

		return e.complexity.ProductPackageEdge.Node(childComplexity), true

	case "ProductPricing.id":
		if e.complexity.ProductPricing.ID == nil {
			break
		}

		return e.complexity.ProductPricing.ID(childComplexity), true

	case "ProductPricing.items":
		if e.complexity.ProductPricing.Items == nil {
			break
		}

		return e.complexity.ProductPricing.Items(childComplexity), true

	case "ProductPricing.products":
		if e.complexity.ProductPricing.Products == nil {
			break
		}

		return e.complexity.ProductPricing.Products(childComplexity), true

	case "ProgressFlag.flagged":
		if e.complexity.ProgressFlag.Flagged == nil {
			break
		}

		return e.complexity.ProgressFlag.Flagged(childComplexity), true

	case "ProgressFlag.status":
		if e.complexity.ProgressFlag.Status == nil {
			break
		}

		return e.complexity.ProgressFlag.Status(childComplexity), true

	case "Query.apiAccess":
		if e.complexity.Query.APIAccess == nil {
			break
		}

		args, err := ec.field_Query_apiAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APIAccess(childComplexity, args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.apiUser":
		if e.complexity.Query.APIUser == nil {
			break
		}

		args, err := ec.field_Query_apiUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APIUser(childComplexity, args["id"].(string)), true

	case "Query.apiUserAuditLogs":
		if e.complexity.Query.APIUserAuditLogs == nil {
			break
		}

		args, err := ec.field_Query_apiUserAuditLogs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APIUserAuditLogs(childComplexity, args["id"].(string), args["search"].(*string), args["page"].(model.PageInput), args["orderBy"].(*ent.AuditLogOrder)), true

	case "Query.apiUsers":
		if e.complexity.Query.APIUsers == nil {
			break
		}

		args, err := ec.field_Query_apiUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APIUsers(childComplexity, args["page"].(model.PageInput), args["where"].(*ent.ApiUserWhereInput)), true

	case "Query.allServiceAreas":
		if e.complexity.Query.AllServiceAreas == nil {
			break
		}

		return e.complexity.Query.AllServiceAreas(childComplexity), true

	case "Query.approvedInstallations":
		if e.complexity.Query.ApprovedInstallations == nil {
			break
		}

		args, err := ec.field_Query_approvedInstallations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ApprovedInstallations(childComplexity, args["type"].(enum.InstallationType), args["status"].(*enum.InstallationStatus), args["search"].(*string), args["betweenDates"].([]string), args["page"].(model.PageInput)), true

	case "Query.approvedJobs":
		if e.complexity.Query.ApprovedJobs == nil {
			break
		}

		args, err := ec.field_Query_approvedJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ApprovedJobs(childComplexity, args["search"].(*string), args["progress"].(*enum.JobProgress), args["dates"].([]string), args["page"].(model.PageInput)), true

	case "Query.assignedJobs":
		if e.complexity.Query.AssignedJobs == nil {
			break
		}

		args, err := ec.field_Query_assignedJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AssignedJobs(childComplexity, args["progress"].(*enum.JobProgress), args["search"].(*string), args["betweenDates"].([]string), args["page"].(model.PageInput), args["orderBy"].(*ent.JobOrder)), true

	case "Query.auditLogs":
		if e.complexity.Query.AuditLogs == nil {
			break
		}

		args, err := ec.field_Query_auditLogs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuditLogs(childComplexity, args["search"].(*string), args["page"].(model.PageInput), args["orderBy"].(*ent.AuditLogOrder)), true

	case "Query.cities":
		if e.complexity.Query.Cities == nil {
			break
		}

		args, err := ec.field_Query_cities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cities(childComplexity, args["state"].(string), args["q"].(string), args["skip"].(int), args["take"].(int)), true

	case "Query.counts":
		if e.complexity.Query.Counts == nil {
			break
		}

		return e.complexity.Query.Counts(childComplexity), true

	case "Query.estimate":
		if e.complexity.Query.Estimate == nil {
			break
		}

		args, err := ec.field_Query_estimate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Estimate(childComplexity, args["id"].(string)), true

	case "Query.estimates":
		if e.complexity.Query.Estimates == nil {
			break
		}

		args, err := ec.field_Query_estimates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Estimates(childComplexity, args["status"].(*enum.EstimateStatus), args["search"].(*string), args["dtRange"].([]string), args["page"].(model.PageInput)), true

	case "Query.getPricing":
		if e.complexity.Query.GetPricing == nil {
			break
		}

		return e.complexity.Query.GetPricing(childComplexity), true

	case "Query.hvacPackages":
		if e.complexity.Query.HvacPackages == nil {
			break
		}

		args, err := ec.field_Query_hvacPackages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HvacPackages(childComplexity, args["page"].(model.PageInput)), true

	case "Query.iosAppVersion":
		if e.complexity.Query.IosAppVersion == nil {
			break
		}

		return e.complexity.Query.IosAppVersion(childComplexity), true

	case "Query.job":
		if e.complexity.Query.Job == nil {
			break
		}

		args, err := ec.field_Query_job_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Job(childComplexity, args["id"].(string)), true

	case "Query.jobCompletedProgress":
		if e.complexity.Query.JobCompletedProgress == nil {
			break
		}

		args, err := ec.field_Query_jobCompletedProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobCompletedProgress(childComplexity, args["id"].(string)), true

	case "Query.jobDocs":
		if e.complexity.Query.JobDocs == nil {
			break
		}

		args, err := ec.field_Query_jobDocs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobDocs(childComplexity, args["jobID"].(string)), true

	case "Query.jobDocsBySection":
		if e.complexity.Query.JobDocsBySection == nil {
			break
		}

		args, err := ec.field_Query_jobDocsBySection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobDocsBySection(childComplexity, args["jobID"].(string)), true

	case "Query.jobEstimates":
		if e.complexity.Query.JobEstimates == nil {
			break
		}

		args, err := ec.field_Query_jobEstimates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobEstimates(childComplexity, args["jobID"].(string)), true

	case "Query.jobGeoCode":
		if e.complexity.Query.JobGeoCode == nil {
			break
		}

		args, err := ec.field_Query_jobGeoCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobGeoCode(childComplexity, args["id"].(string)), true

	case "Query.jobNotes":
		if e.complexity.Query.JobNotes == nil {
			break
		}

		args, err := ec.field_Query_jobNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobNotes(childComplexity, args["jobID"].(string)), true

	case "Query.jobProgress":
		if e.complexity.Query.JobProgress == nil {
			break
		}

		args, err := ec.field_Query_jobProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobProgress(childComplexity, args["id"].(string), args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.jobsByProgress":
		if e.complexity.Query.JobsByProgress == nil {
			break
		}

		args, err := ec.field_Query_jobsByProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobsByProgress(childComplexity, args["status"].(enum.JobProgress), args["search"].(*string), args["betweenDates"].([]string), args["page"].(model.PageInput), args["orderBy"].(*ent.JobOrder)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.myCompanyUsers":
		if e.complexity.Query.MyCompanyUsers == nil {
			break
		}

		args, err := ec.field_Query_myCompanyUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyCompanyUsers(childComplexity, args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.myJob":
		if e.complexity.Query.MyJob == nil {
			break
		}

		args, err := ec.field_Query_myJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyJob(childComplexity, args["id"].(string)), true

	case "Query.myNotifications":
		if e.complexity.Query.MyNotifications == nil {
			break
		}

		args, err := ec.field_Query_myNotifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyNotifications(childComplexity, args["page"].(model.PageInput)), true

	case "Query.myTrainingVideoCourses":
		if e.complexity.Query.MyTrainingVideoCourses == nil {
			break
		}

		args, err := ec.field_Query_myTrainingVideoCourses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyTrainingVideoCourses(childComplexity, args["kind"].(enum.TrainingType), args["pageSize"].(*int)), true

	case "Query.myTrainingVideoKinds":
		if e.complexity.Query.MyTrainingVideoKinds == nil {
			break
		}

		return e.complexity.Query.MyTrainingVideoKinds(childComplexity), true

	case "Query.myTrainingVideos":
		if e.complexity.Query.MyTrainingVideos == nil {
			break
		}

		args, err := ec.field_Query_myTrainingVideos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyTrainingVideos(childComplexity, args["kind"].(enum.TrainingType), args["courseID"].(string), args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.myUnreadNotificationsCount":
		if e.complexity.Query.MyUnreadNotificationsCount == nil {
			break
		}

		return e.complexity.Query.MyUnreadNotificationsCount(childComplexity), true

	case "Query.nearmapResponse":
		if e.complexity.Query.NearmapResponse == nil {
			break
		}

		args, err := ec.field_Query_nearmapResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NearmapResponse(childComplexity, args["id"].(string), args["respID"].(string)), true

	case "Query.newULID":
		if e.complexity.Query.NewUlid == nil {
			break
		}

		return e.complexity.Query.NewUlid(childComplexity), true

	case "Query.optionList":
		if e.complexity.Query.OptionList == nil {
			break
		}

		args, err := ec.field_Query_optionList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OptionList(childComplexity, args["types"].([]enum.OptionList)), true

	case "Query.overview":
		if e.complexity.Query.Overview == nil {
			break
		}

		args, err := ec.field_Query_overview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Overview(childComplexity, args["f"].(model.Filter)), true

	case "Query.partner":
		if e.complexity.Query.Partner == nil {
			break
		}

		args, err := ec.field_Query_partner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Partner(childComplexity, args["id"].(string), args["type"].(*enum.Partner)), true

	case "Query.partnerContacts":
		if e.complexity.Query.PartnerContacts == nil {
			break
		}

		args, err := ec.field_Query_partnerContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerContacts(childComplexity, args["partnerID"].(string), args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.partnerDocs":
		if e.complexity.Query.PartnerDocs == nil {
			break
		}

		args, err := ec.field_Query_partnerDocs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerDocs(childComplexity, args["partnerID"].(string), args["section"].(enum.DocSection)), true

	case "Query.partnerJobStats":
		if e.complexity.Query.PartnerJobStats == nil {
			break
		}

		args, err := ec.field_Query_partnerJobStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerJobStats(childComplexity, args["search"].(*string), args["partnerType"].(enum.Partner), args["skip"].(int), args["take"].(int)), true

	case "Query.partnerJobs":
		if e.complexity.Query.PartnerJobs == nil {
			break
		}

		args, err := ec.field_Query_partnerJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerJobs(childComplexity, args["partnerID"].(string), args["search"].(*string), args["flagged"].(*bool), args["progress"].(*enum.JobProgress), args["dates"].([]string), args["page"].(model.PageInput)), true

	case "Query.partnerMobileSettings":
		if e.complexity.Query.PartnerMobileSettings == nil {
			break
		}

		args, err := ec.field_Query_partnerMobileSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerMobileSettings(childComplexity, args["id"].(string)), true

	case "Query.partnerNameAvailable":
		if e.complexity.Query.PartnerNameAvailable == nil {
			break
		}

		args, err := ec.field_Query_partnerNameAvailable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerNameAvailable(childComplexity, args["id"].(string), args["name"].(string), args["type"].(enum.Partner)), true

	case "Query.partnerOptions":
		if e.complexity.Query.PartnerOptions == nil {
			break
		}

		args, err := ec.field_Query_partnerOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerOptions(childComplexity, args["partnerID"].(string)), true

	case "Query.partnerServiceStates":
		if e.complexity.Query.PartnerServiceStates == nil {
			break
		}

		args, err := ec.field_Query_partnerServiceStates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerServiceStates(childComplexity, args["partnerID"].(string)), true

	case "Query.partnerServices":
		if e.complexity.Query.PartnerServices == nil {
			break
		}

		args, err := ec.field_Query_partnerServices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartnerServices(childComplexity, args["partnerID"].(string)), true

	case "Query.partners":
		if e.complexity.Query.Partners == nil {
			break
		}

		args, err := ec.field_Query_partners_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Partners(childComplexity, args["search"].(*string), args["partnerType"].(*enum.Partner), args["status"].(*string), args["page"].(model.PageInput)), true

	case "Query.pendingInstallations":
		if e.complexity.Query.PendingInstallations == nil {
			break
		}

		args, err := ec.field_Query_pendingInstallations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PendingInstallations(childComplexity, args["type"].(enum.InstallationType), args["approval"].(*enum.Approval), args["search"].(*string), args["betweenDates"].([]string), args["page"].(model.PageInput)), true

	case "Query.productPackages":
		if e.complexity.Query.ProductPackages == nil {
			break
		}

		args, err := ec.field_Query_productPackages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductPackages(childComplexity, args["category"].(*enum.Product), args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["category"].(*enum.Product), args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.serviceStates":
		if e.complexity.Query.ServiceStates == nil {
			break
		}

		args, err := ec.field_Query_serviceStates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceStates(childComplexity, args["q"].(string)), true

	case "Query.sessionAlive":
		if e.complexity.Query.SessionAlive == nil {
			break
		}

		return e.complexity.Query.SessionAlive(childComplexity), true

	case "Query.smartHomePackages":
		if e.complexity.Query.SmartHomePackages == nil {
			break
		}

		args, err := ec.field_Query_smartHomePackages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SmartHomePackages(childComplexity, args["page"].(model.PageInput)), true

	case "Query.states":
		if e.complexity.Query.States == nil {
			break
		}

		args, err := ec.field_Query_states_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.States(childComplexity, args["q"].(string)), true

	case "Query.surveyCompletedProgress":
		if e.complexity.Query.SurveyCompletedProgress == nil {
			break
		}

		args, err := ec.field_Query_surveyCompletedProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurveyCompletedProgress(childComplexity, args["id"].(string)), true

	case "Query.surveyDetails":
		if e.complexity.Query.SurveyDetails == nil {
			break
		}

		args, err := ec.field_Query_surveyDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurveyDetails(childComplexity, args["id"].(string)), true

	case "Query.surveyDocs":
		if e.complexity.Query.SurveyDocs == nil {
			break
		}

		args, err := ec.field_Query_surveyDocs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurveyDocs(childComplexity, args["surveyID"].(string)), true

	case "Query.surveyProgress":
		if e.complexity.Query.SurveyProgress == nil {
			break
		}

		args, err := ec.field_Query_surveyProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurveyProgress(childComplexity, args["id"].(string), args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.surveySlotAvailability":
		if e.complexity.Query.SurveySlotAvailability == nil {
			break
		}

		args, err := ec.field_Query_surveySlotAvailability_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurveySlotAvailability(childComplexity, args["date"].(string)), true

	case "Query.surveys":
		if e.complexity.Query.Surveys == nil {
			break
		}

		args, err := ec.field_Query_surveys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Surveys(childComplexity, args["progress"].(*enum.SurveyProgress), args["search"].(*string), args["betweenDates"].([]string), args["page"].(model.PageInput), args["orderBy"].(*ent.SurveyOrder)), true

	case "Query.trainingCourses":
		if e.complexity.Query.TrainingCourses == nil {
			break
		}

		args, err := ec.field_Query_trainingCourses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingCourses(childComplexity, args["search"].(*string), args["page"].(model.PageInput)), true

	case "Query.trainingVideoCourses":
		if e.complexity.Query.TrainingVideoCourses == nil {
			break
		}

		args, err := ec.field_Query_trainingVideoCourses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingVideoCourses(childComplexity, args["kind"].(enum.TrainingType), args["partnerID"].(*string), args["pageSize"].(*int)), true

	case "Query.trainingVideoKinds":
		if e.complexity.Query.TrainingVideoKinds == nil {
			break
		}

		return e.complexity.Query.TrainingVideoKinds(childComplexity), true

	case "Query.trainingVideos":
		if e.complexity.Query.TrainingVideos == nil {
			break
		}

		args, err := ec.field_Query_trainingVideos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingVideos(childComplexity, args["kind"].(enum.TrainingType), args["courseID"].(string), args["search"].(*string), args["partnerID"].(*string), args["page"].(model.PageInput)), true

	case "Query.unassignedJobs":
		if e.complexity.Query.UnassignedJobs == nil {
			break
		}

		args, err := ec.field_Query_unassignedJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UnassignedJobs(childComplexity, args["progress"].(*enum.JobProgress), args["search"].(*string), args["betweenDates"].([]string), args["page"].(model.PageInput), args["orderBy"].(*ent.JobOrder)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.userEmailAvailable":
		if e.complexity.Query.UserEmailAvailable == nil {
			break
		}

		args, err := ec.field_Query_userEmailAvailable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserEmailAvailable(childComplexity, args["id"].(string), args["email"].(string)), true

	case "Query.userNotifySettings":
		if e.complexity.Query.UserNotifySettings == nil {
			break
		}

		args, err := ec.field_Query_userNotifySettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserNotifySettings(childComplexity, args["id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["page"].(model.PageInput), args["where"].(*ent.UserWhereInput)), true

	case "Query.usersSearch":
		if e.complexity.Query.UsersSearch == nil {
			break
		}

		args, err := ec.field_Query_usersSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UsersSearch(childComplexity, args["search"].(*string)), true

	case "Query.viewDocURL":
		if e.complexity.Query.ViewDocURL == nil {
			break
		}

		args, err := ec.field_Query_viewDocURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewDocURL(childComplexity, args["docID"].(string)), true

	case "SectionDocs.docs":
		if e.complexity.SectionDocs.Docs == nil {
			break
		}

		return e.complexity.SectionDocs.Docs(childComplexity), true

	case "SectionDocs.section":
		if e.complexity.SectionDocs.Section == nil {
			break
		}

		return e.complexity.SectionDocs.Section(childComplexity), true

	case "ServiceCity.active":
		if e.complexity.ServiceCity.Active == nil {
			break
		}

		return e.complexity.ServiceCity.Active(childComplexity), true

	case "ServiceCity.cityName":
		if e.complexity.ServiceCity.CityName == nil {
			break
		}

		return e.complexity.ServiceCity.CityName(childComplexity), true

	case "ServiceCity.cityZip":
		if e.complexity.ServiceCity.CityZip == nil {
			break
		}

		return e.complexity.ServiceCity.CityZip(childComplexity), true

	case "ServiceCity.id":
		if e.complexity.ServiceCity.ID == nil {
			break
		}

		return e.complexity.ServiceCity.ID(childComplexity), true

	case "ServiceCity.licenseNo":
		if e.complexity.ServiceCity.LicenseNo == nil {
			break
		}

		return e.complexity.ServiceCity.LicenseNo(childComplexity), true

	case "ServiceCity.licenseProof":
		if e.complexity.ServiceCity.LicenseProof == nil {
			break
		}

		return e.complexity.ServiceCity.LicenseProof(childComplexity), true

	case "ServiceState.cities":
		if e.complexity.ServiceState.Cities == nil {
			break
		}

		return e.complexity.ServiceState.Cities(childComplexity), true

	case "ServiceState.expand":
		if e.complexity.ServiceState.Expand == nil {
			break
		}

		return e.complexity.ServiceState.Expand(childComplexity), true

	case "ServiceState.id":
		if e.complexity.ServiceState.ID == nil {
			break
		}

		return e.complexity.ServiceState.ID(childComplexity), true

	case "ServiceState.licenseExpDate":
		if e.complexity.ServiceState.LicenseExpDate == nil {
			break
		}

		return e.complexity.ServiceState.LicenseExpDate(childComplexity), true

	case "ServiceState.licenseNo":
		if e.complexity.ServiceState.LicenseNo == nil {
			break
		}

		return e.complexity.ServiceState.LicenseNo(childComplexity), true

	case "ServiceState.name":
		if e.complexity.ServiceState.Name == nil {
			break
		}

		return e.complexity.ServiceState.Name(childComplexity), true

	case "SessionUser.email":
		if e.complexity.SessionUser.Email == nil {
			break
		}

		return e.complexity.SessionUser.Email(childComplexity), true

	case "SessionUser.firstName":
		if e.complexity.SessionUser.FirstName == nil {
			break
		}

		return e.complexity.SessionUser.FirstName(childComplexity), true

	case "SessionUser.id":
		if e.complexity.SessionUser.ID == nil {
			break
		}

		return e.complexity.SessionUser.ID(childComplexity), true

	case "SessionUser.isAdmin":
		if e.complexity.SessionUser.IsAdmin == nil {
			break
		}

		return e.complexity.SessionUser.IsAdmin(childComplexity), true

	case "SessionUser.isCompanyAdmin":
		if e.complexity.SessionUser.IsCompanyAdmin == nil {
			break
		}

		return e.complexity.SessionUser.IsCompanyAdmin(childComplexity), true

	case "SessionUser.lastName":
		if e.complexity.SessionUser.LastName == nil {
			break
		}

		return e.complexity.SessionUser.LastName(childComplexity), true

	case "SessionUser.partner":
		if e.complexity.SessionUser.Partner == nil {
			break
		}

		return e.complexity.SessionUser.Partner(childComplexity), true

	case "SessionUser.phone":
		if e.complexity.SessionUser.Phone == nil {
			break
		}

		return e.complexity.SessionUser.Phone(childComplexity), true

	case "SessionUser.picture":
		if e.complexity.SessionUser.Picture == nil {
			break
		}

		return e.complexity.SessionUser.Picture(childComplexity), true

	case "SessionUser.role":
		if e.complexity.SessionUser.Role == nil {
			break
		}

		return e.complexity.SessionUser.Role(childComplexity), true

	case "SessionUser.status":
		if e.complexity.SessionUser.Status == nil {
			break
		}

		return e.complexity.SessionUser.Status(childComplexity), true

	case "SessionUser.token":
		if e.complexity.SessionUser.Token == nil {
			break
		}

		return e.complexity.SessionUser.Token(childComplexity), true

	case "State.cities":
		if e.complexity.State.Cities == nil {
			break
		}

		return e.complexity.State.Cities(childComplexity), true

	case "State.id":
		if e.complexity.State.ID == nil {
			break
		}

		return e.complexity.State.ID(childComplexity), true

	case "State.name":
		if e.complexity.State.Name == nil {
			break
		}

		return e.complexity.State.Name(childComplexity), true

	case "Subscription.currentTime":
		if e.complexity.Subscription.CurrentTime == nil {
			break
		}

		return e.complexity.Subscription.CurrentTime(childComplexity), true

	case "Survey.address":
		if e.complexity.Survey.Address == nil {
			break
		}

		return e.complexity.Survey.Address(childComplexity), true

	case "Survey.date":
		if e.complexity.Survey.Date == nil {
			break
		}

		return e.complexity.Survey.Date(childComplexity), true

	case "Survey.from":
		if e.complexity.Survey.From == nil {
			break
		}

		return e.complexity.Survey.From(childComplexity), true

	case "Survey.id":
		if e.complexity.Survey.ID == nil {
			break
		}

		return e.complexity.Survey.ID(childComplexity), true

	case "Survey.name":
		if e.complexity.Survey.Name == nil {
			break
		}

		return e.complexity.Survey.Name(childComplexity), true

	case "Survey.notes":
		if e.complexity.Survey.Notes == nil {
			break
		}

		return e.complexity.Survey.Notes(childComplexity), true

	case "Survey.phone":
		if e.complexity.Survey.Phone == nil {
			break
		}

		return e.complexity.Survey.Phone(childComplexity), true

	case "Survey.progress":
		if e.complexity.Survey.Progress == nil {
			break
		}

		return e.complexity.Survey.Progress(childComplexity), true

	case "Survey.slot":
		if e.complexity.Survey.Slot == nil {
			break
		}

		return e.complexity.Survey.Slot(childComplexity), true

	case "Survey.status":
		if e.complexity.Survey.Status == nil {
			break
		}

		return e.complexity.Survey.Status(childComplexity), true

	case "Survey.to":
		if e.complexity.Survey.To == nil {
			break
		}

		return e.complexity.Survey.To(childComplexity), true

	case "SurveyConnection.edges":
		if e.complexity.SurveyConnection.Edges == nil {
			break
		}

		return e.complexity.SurveyConnection.Edges(childComplexity), true

	case "SurveyConnection.pageInfo":
		if e.complexity.SurveyConnection.PageInfo == nil {
			break
		}

		return e.complexity.SurveyConnection.PageInfo(childComplexity), true

	case "SurveyConnection.totalCount":
		if e.complexity.SurveyConnection.TotalCount == nil {
			break
		}

		return e.complexity.SurveyConnection.TotalCount(childComplexity), true

	case "SurveyEdge.cursor":
		if e.complexity.SurveyEdge.Cursor == nil {
			break
		}

		return e.complexity.SurveyEdge.Cursor(childComplexity), true

	case "SurveyEdge.node":
		if e.complexity.SurveyEdge.Node == nil {
			break
		}

		return e.complexity.SurveyEdge.Node(childComplexity), true

	case "SurveyProgressConnection.edges":
		if e.complexity.SurveyProgressConnection.Edges == nil {
			break
		}

		return e.complexity.SurveyProgressConnection.Edges(childComplexity), true

	case "SurveyProgressConnection.pageInfo":
		if e.complexity.SurveyProgressConnection.PageInfo == nil {
			break
		}

		return e.complexity.SurveyProgressConnection.PageInfo(childComplexity), true

	case "SurveyProgressConnection.totalCount":
		if e.complexity.SurveyProgressConnection.TotalCount == nil {
			break
		}

		return e.complexity.SurveyProgressConnection.TotalCount(childComplexity), true

	case "SurveyProgressDetail.id":
		if e.complexity.SurveyProgressDetail.ID == nil {
			break
		}

		return e.complexity.SurveyProgressDetail.ID(childComplexity), true

	case "SurveyProgressDetail.note":
		if e.complexity.SurveyProgressDetail.Note == nil {
			break
		}

		return e.complexity.SurveyProgressDetail.Note(childComplexity), true

	case "SurveyProgressDetail.status":
		if e.complexity.SurveyProgressDetail.Status == nil {
			break
		}

		return e.complexity.SurveyProgressDetail.Status(childComplexity), true

	case "SurveyProgressDetail.statusAt":
		if e.complexity.SurveyProgressDetail.StatusAt == nil {
			break
		}

		return e.complexity.SurveyProgressDetail.StatusAt(childComplexity), true

	case "SurveyProgressEdge.cursor":
		if e.complexity.SurveyProgressEdge.Cursor == nil {
			break
		}

		return e.complexity.SurveyProgressEdge.Cursor(childComplexity), true

	case "SurveyProgressEdge.node":
		if e.complexity.SurveyProgressEdge.Node == nil {
			break
		}

		return e.complexity.SurveyProgressEdge.Node(childComplexity), true

	case "SurveyProgressHistory.complete":
		if e.complexity.SurveyProgressHistory.Complete == nil {
			break
		}

		return e.complexity.SurveyProgressHistory.Complete(childComplexity), true

	case "SurveyProgressHistory.id":
		if e.complexity.SurveyProgressHistory.ID == nil {
			break
		}

		return e.complexity.SurveyProgressHistory.ID(childComplexity), true

	case "SurveyProgressHistory.note":
		if e.complexity.SurveyProgressHistory.Note == nil {
			break
		}

		return e.complexity.SurveyProgressHistory.Note(childComplexity), true

	case "SurveyProgressHistory.status":
		if e.complexity.SurveyProgressHistory.Status == nil {
			break
		}

		return e.complexity.SurveyProgressHistory.Status(childComplexity), true

	case "SurveyProgressHistory.statusAt":
		if e.complexity.SurveyProgressHistory.StatusAt == nil {
			break
		}

		return e.complexity.SurveyProgressHistory.StatusAt(childComplexity), true

	case "SurveySlot.available":
		if e.complexity.SurveySlot.Available == nil {
			break
		}

		return e.complexity.SurveySlot.Available(childComplexity), true

	case "SurveySlot.id":
		if e.complexity.SurveySlot.ID == nil {
			break
		}

		return e.complexity.SurveySlot.ID(childComplexity), true

	case "SurveySlot.name":
		if e.complexity.SurveySlot.Name == nil {
			break
		}

		return e.complexity.SurveySlot.Name(childComplexity), true

	case "TrainingCourse.id":
		if e.complexity.TrainingCourse.ID == nil {
			break
		}

		return e.complexity.TrainingCourse.ID(childComplexity), true

	case "TrainingCourse.name":
		if e.complexity.TrainingCourse.Name == nil {
			break
		}

		return e.complexity.TrainingCourse.Name(childComplexity), true

	case "TrainingCourseConnection.edges":
		if e.complexity.TrainingCourseConnection.Edges == nil {
			break
		}

		return e.complexity.TrainingCourseConnection.Edges(childComplexity), true

	case "TrainingCourseConnection.pageInfo":
		if e.complexity.TrainingCourseConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrainingCourseConnection.PageInfo(childComplexity), true

	case "TrainingCourseConnection.totalCount":
		if e.complexity.TrainingCourseConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrainingCourseConnection.TotalCount(childComplexity), true

	case "TrainingCourseEdge.cursor":
		if e.complexity.TrainingCourseEdge.Cursor == nil {
			break
		}

		return e.complexity.TrainingCourseEdge.Cursor(childComplexity), true

	case "TrainingCourseEdge.node":
		if e.complexity.TrainingCourseEdge.Node == nil {
			break
		}

		return e.complexity.TrainingCourseEdge.Node(childComplexity), true

	case "TrainingVideo.assigned":
		if e.complexity.TrainingVideo.Assigned == nil {
			break
		}

		return e.complexity.TrainingVideo.Assigned(childComplexity), true

	case "TrainingVideo.course":
		if e.complexity.TrainingVideo.Course == nil {
			break
		}

		return e.complexity.TrainingVideo.Course(childComplexity), true

	case "TrainingVideo.description":
		if e.complexity.TrainingVideo.Description == nil {
			break
		}

		return e.complexity.TrainingVideo.Description(childComplexity), true

	case "TrainingVideo.id":
		if e.complexity.TrainingVideo.ID == nil {
			break
		}

		return e.complexity.TrainingVideo.ID(childComplexity), true

	case "TrainingVideo.kind":
		if e.complexity.TrainingVideo.Kind == nil {
			break
		}

		return e.complexity.TrainingVideo.Kind(childComplexity), true

	case "TrainingVideo.posterURL":
		if e.complexity.TrainingVideo.PosterURL == nil {
			break
		}

		return e.complexity.TrainingVideo.PosterURL(childComplexity), true

	case "TrainingVideo.title":
		if e.complexity.TrainingVideo.Title == nil {
			break
		}

		return e.complexity.TrainingVideo.Title(childComplexity), true

	case "TrainingVideo.videoURL":
		if e.complexity.TrainingVideo.VideoURL == nil {
			break
		}

		return e.complexity.TrainingVideo.VideoURL(childComplexity), true

	case "TrainingVideoAccess.enabled":
		if e.complexity.TrainingVideoAccess.Enabled == nil {
			break
		}

		return e.complexity.TrainingVideoAccess.Enabled(childComplexity), true

	case "TrainingVideoAccess.videoID":
		if e.complexity.TrainingVideoAccess.VideoID == nil {
			break
		}

		return e.complexity.TrainingVideoAccess.VideoID(childComplexity), true

	case "TrainingVideoConnection.edges":
		if e.complexity.TrainingVideoConnection.Edges == nil {
			break
		}

		return e.complexity.TrainingVideoConnection.Edges(childComplexity), true

	case "TrainingVideoConnection.pageInfo":
		if e.complexity.TrainingVideoConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrainingVideoConnection.PageInfo(childComplexity), true

	case "TrainingVideoConnection.totalCount":
		if e.complexity.TrainingVideoConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrainingVideoConnection.TotalCount(childComplexity), true

	case "TrainingVideoEdge.cursor":
		if e.complexity.TrainingVideoEdge.Cursor == nil {
			break
		}

		return e.complexity.TrainingVideoEdge.Cursor(childComplexity), true

	case "TrainingVideoEdge.node":
		if e.complexity.TrainingVideoEdge.Node == nil {
			break
		}

		return e.complexity.TrainingVideoEdge.Node(childComplexity), true

	case "UpdateProfileResponse.picture":
		if e.complexity.UpdateProfileResponse.Picture == nil {
			break
		}

		return e.complexity.UpdateProfileResponse.Picture(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.note":
		if e.complexity.User.Note == nil {
			break
		}

		return e.complexity.User.Note(childComplexity), true

	case "User.partner":
		if e.complexity.User.Partner == nil {
			break
		}

		return e.complexity.User.Partner(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.picture":
		if e.complexity.User.Picture == nil {
			break
		}

		return e.complexity.User.Picture(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserInfo.email":
		if e.complexity.UserInfo.Email == nil {
			break
		}

		return e.complexity.UserInfo.Email(childComplexity), true

	case "UserInfo.firstName":
		if e.complexity.UserInfo.FirstName == nil {
			break
		}

		return e.complexity.UserInfo.FirstName(childComplexity), true

	case "UserInfo.id":
		if e.complexity.UserInfo.ID == nil {
			break
		}

		return e.complexity.UserInfo.ID(childComplexity), true

	case "UserInfo.lastName":
		if e.complexity.UserInfo.LastName == nil {
			break
		}

		return e.complexity.UserInfo.LastName(childComplexity), true

	case "UserInfo.phone":
		if e.complexity.UserInfo.Phone == nil {
			break
		}

		return e.complexity.UserInfo.Phone(childComplexity), true

	case "UserInfo.picture":
		if e.complexity.UserInfo.Picture == nil {
			break
		}

		return e.complexity.UserInfo.Picture(childComplexity), true

	case "UserSearchResult.email":
		if e.complexity.UserSearchResult.Email == nil {
			break
		}

		return e.complexity.UserSearchResult.Email(childComplexity), true

	case "UserSearchResult.firstName":
		if e.complexity.UserSearchResult.FirstName == nil {
			break
		}

		return e.complexity.UserSearchResult.FirstName(childComplexity), true

	case "UserSearchResult.id":
		if e.complexity.UserSearchResult.ID == nil {
			break
		}

		return e.complexity.UserSearchResult.ID(childComplexity), true

	case "UserSearchResult.lastName":
		if e.complexity.UserSearchResult.LastName == nil {
			break
		}

		return e.complexity.UserSearchResult.LastName(childComplexity), true

	case "UserSearchResult.partnerContactTitle":
		if e.complexity.UserSearchResult.PartnerContactTitle == nil {
			break
		}

		return e.complexity.UserSearchResult.PartnerContactTitle(childComplexity), true

	case "UserSearchResult.partnerContactTypeID":
		if e.complexity.UserSearchResult.PartnerContactTypeID == nil {
			break
		}

		return e.complexity.UserSearchResult.PartnerContactTypeID(childComplexity), true

	case "UserSearchResult.partnerID":
		if e.complexity.UserSearchResult.PartnerID == nil {
			break
		}

		return e.complexity.UserSearchResult.PartnerID(childComplexity), true

	case "UserSearchResult.partnerName":
		if e.complexity.UserSearchResult.PartnerName == nil {
			break
		}

		return e.complexity.UserSearchResult.PartnerName(childComplexity), true

	case "UserSearchResult.phone":
		if e.complexity.UserSearchResult.Phone == nil {
			break
		}

		return e.complexity.UserSearchResult.Phone(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputApiAccessInput,
		ec.unmarshalInputApiAccessOrder,
		ec.unmarshalInputApiAccessWhereInput,
		ec.unmarshalInputApiUserInput,
		ec.unmarshalInputApiUserTokenWhereInput,
		ec.unmarshalInputApiUserWhereInput,
		ec.unmarshalInputApproveEstimateInput,
		ec.unmarshalInputApproveJobInput,
		ec.unmarshalInputAuditLogOrder,
		ec.unmarshalInputAuditLogWhereInput,
		ec.unmarshalInputChannelMessageReadWhereInput,
		ec.unmarshalInputChannelMessageWhereInput,
		ec.unmarshalInputChannelSubWhereInput,
		ec.unmarshalInputChannelWhereInput,
		ec.unmarshalInputContactUsWhereInput,
		ec.unmarshalInputCreateEstimateInput,
		ec.unmarshalInputCreatePartnerServiceCityInput,
		ec.unmarshalInputCreatePartnerServiceStateInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputDenyEstimateInput,
		ec.unmarshalInputDocumentWhereInput,
		ec.unmarshalInputEstimateActivityWhereInput,
		ec.unmarshalInputEstimateRequest,
		ec.unmarshalInputEstimateWhereInput,
		ec.unmarshalInputHomeOwnerWhereInput,
		ec.unmarshalInputInputDocument,
		ec.unmarshalInputInputFile,
		ec.unmarshalInputInputMobileAppSettings,
		ec.unmarshalInputInputPoint,
		ec.unmarshalInputInputTrainingVideo,
		ec.unmarshalInputInputUserProfile,
		ec.unmarshalInputInstallationApproveInput,
		ec.unmarshalInputInstallationJobItemWhereInput,
		ec.unmarshalInputInstallationJobProgressWhereInput,
		ec.unmarshalInputInstallationJobWhereInput,
		ec.unmarshalInputInstallationOwnerInput,
		ec.unmarshalInputInstallationPackageInput,
		ec.unmarshalInputInstallationPackageItemInput,
		ec.unmarshalInputInvitePartnerInput,
		ec.unmarshalInputJobActivityWhereInput,
		ec.unmarshalInputJobAssignmentHistoryWhereInput,
		ec.unmarshalInputJobDatesInput,
		ec.unmarshalInputJobDocURLWhereInput,
		ec.unmarshalInputJobNoteWhereInput,
		ec.unmarshalInputJobOrder,
		ec.unmarshalInputJobProgressHistoryWhereInput,
		ec.unmarshalInputJobProgressInput,
		ec.unmarshalInputJobWhereInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputMeasurement,
		ec.unmarshalInputNotifySettingWhereInput,
		ec.unmarshalInputOptionListWhereInput,
		ec.unmarshalInputPageInput,
		ec.unmarshalInputPartnerActivityWhereInput,
		ec.unmarshalInputPartnerContactInput,
		ec.unmarshalInputPartnerContactWhereInput,
		ec.unmarshalInputPartnerInput,
		ec.unmarshalInputPartnerOperationInput,
		ec.unmarshalInputPartnerOrder,
		ec.unmarshalInputPartnerServiceCityWhereInput,
		ec.unmarshalInputPartnerServiceStateWhereInput,
		ec.unmarshalInputPartnerServiceWhereInput,
		ec.unmarshalInputPartnerTrainingVideoWhereInput,
		ec.unmarshalInputPartnerWhereInput,
		ec.unmarshalInputPaymentWhereInput,
		ec.unmarshalInputPostalCodeWhereInput,
		ec.unmarshalInputPricingWhereInput,
		ec.unmarshalInputProductInput,
		ec.unmarshalInputProductPackageInput,
		ec.unmarshalInputProductPackageWhereInput,
		ec.unmarshalInputProductWhereInput,
		ec.unmarshalInputProgressInput,
		ec.unmarshalInputSetPasswordInput,
		ec.unmarshalInputSurveyInput,
		ec.unmarshalInputSurveyOrder,
		ec.unmarshalInputSurveyProgressWhereInput,
		ec.unmarshalInputSurveyWhereInput,
		ec.unmarshalInputTokenWhereInput,
		ec.unmarshalInputTrainingCourseWhereInput,
		ec.unmarshalInputTrainingVideoWhereInput,
		ec.unmarshalInputUpdateJobInput,
		ec.unmarshalInputUpdatePartnerServiceCityInput,
		ec.unmarshalInputUpdatePartnerServiceStateInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUserActivityWhereInput,
		ec.unmarshalInputUserAuthWhereInput,
		ec.unmarshalInputUserSessionSocketWhereInput,
		ec.unmarshalInputUserSessionWhereInput,
		ec.unmarshalInputUserWhereInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../account.graphql", Input: `extend type Mutation {
    login(input: LoginInput): LoginResult!
    logout: Boolean! @authorize
    """ creates a new  system user """
    createUser(input: CreateUserInput): String!  @authorize(roles: [ADMIN])
    updateUser(input: UpdateUserInput): Boolean!  @authorize(roles: [ADMIN])
    """request reset password email"""
    accForgotPwd(email: String!): Boolean!
    """set user password"""
    setUserPwd(userID: ID!, pwd: String!, confirmPwd: String!): Boolean! @authorize(roles: [ADMIN])
    """set session user account password"""
    setMyPwd(oldPwd: String!, pwd: String!, confirmPwd: String!): Boolean! @authorize
    """update user profile info"""
    updateProfile(input: InputUserProfile): Boolean! @authorize
}

extend type Query {
    """check if user session is still alive"""
    sessionAlive: Boolean!
    me: SessionUser
    """ user detail by its ID """
    user(id: ID!) : User @authorize(roles:[ADMIN])
    """ users list"""
    users(page: PageInput!, where: UserWhereInput): UserConnection @authorize(roles:[ADMIN])
    """ users search"""
    usersSearch(search: String): [UserSearchResult] @authorize(roles:[ADMIN])
    """ user email available"""
    userEmailAvailable(id: String!, email: String!): Boolean! @authorize
    """ search users in my company """
    myCompanyUsers(search: String page: PageInput!): UserConnection @authorize

    """get current ios app version"""
    iosAppVersion:String!
}

enum Role @goModel(model: "roofix/pkg/enum.Role") {
    NONE
    ADMIN
    SITE_USER
}

enum AccountStatus @goModel(model: "roofix/pkg/enum.AccountStatus"){
    PENDING
    ACTIVE
    DISABLED
    LOCKED
}

enum AuthProvider @goModel(model: "roofix/pkg/enum.AuthProvider") {
    Roofix
    GOOGLE
    FB
}

input LoginInput @goModel(model: "roofix/pkg/account.LoginInput") {
    email: String!
    password: String!
}


input SetPasswordInput @goModel(model: "roofix/pkg/account.SetPasswordInput") {
    token: String!
    password: String!
    confirmPassword: String!
}


type UserInfo @goModel(model: "roofix/ent.User") {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phone: String
    picture: String
}

type UserConnection {
    edges:     [UserEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type UserEdge {
    node:   User
    cursor: Cursor
}

type User implements Node{
    id: ID!
    email: String!
    name: String
    firstName: String!
    lastName: String!
    phone: String!
    role: Role
    status: AccountStatus,
    picture: String,
    note: String
    partner: Entity
}

type UserSearchResult implements Node{
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phone: String
    partnerID: ID
    partnerName: String
    partnerContactTypeID: Int
    partnerContactTitle: String
}

type LoginResult {
    token: String!
    user: SessionUser!
}

type SessionUser @goModel(model: "roofix/pkg/account.User") {
    id: ID!
    email: String!
    firstName: String!
    lastName: String!
    role: Role!
    status: AccountStatus!,
    phone: String
    picture: String
    partner: PartnerContactInfo
    token: String
    isAdmin: Boolean!
    isCompanyAdmin: Boolean!
}

type PartnerUser @goModel(model: "roofix/pkg/account.PartnerUser") {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    picture: String!
    partnerName: String!
    partnerUserType: PartnerContactType!
    partnerUserRole: PartnerContactRole!
}


input CreateUserInput @goModel(model: "roofix/pkg/account.CreateUserInput") {
    email: String!
    firstName: String!
    lastName: String!
    phone: String
    role: Role!
    note: String
}

input UpdateUserInput @goModel(model: "roofix/pkg/account.UpdateUserInput") {
    id: ID!
    firstName: String!
    lastName: String!
    phone: String
    role: Role!
    status: AccountStatus!
    note: String
}

input InputUserProfile {
    picture: String
    firstName: String
    lastName: String
    phone: String
    oldPwd: String
    newPwd: String
    confirmNewPwd: String
}

type UpdateProfileResponse {
    picture: String
}

`, BuiltIn: false},
	{Name: "../apiaccess.graphql", Input: `extend type Mutation {
    """ api access save """
    saveApiAccess(input: ApiAccessInput!): Boolean! @authorize(roles: [ADMIN])
    """ update api access key """
    updateApiAccessKey(id: ID! key: String!): Boolean! @authorize(roles: [ADMIN])
    """ update api access secret """
    updateAPIAccessSecret(id: ID! secret: String!): Boolean! @authorize(roles: [ADMIN])
}

extend type Query  {
    """ api access list"""
    apiAccess(search: String, page: PageInput!): ApiAccessConnection @authorize(roles: [ADMIN])
}

enum ApiAccessOrderField {
    CREATED
}

input ApiAccessInput @goModel(model: "roofix/pkg/apiaccess.Input") {
    id: ID!
    name: String!
    url: String!
    username: String
    password: String
    key: String
    secret: String
}

input ApiAccessOrder {
    direction: OrderDirection!
    field: ApiAccessOrderField
}

type ApiAccessConnection {
    edges:     [ApiAccessEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type ApiAccessEdge {
    node:   ApiAccess
    cursor: Cursor
}

type ApiAccess implements Node{
    id: ID!
    url: String!
    username: String
    password: String
    key: String
    secret: String
}

`, BuiltIn: false},
	{Name: "../apiuser.graphql", Input: `extend type Mutation {
    """ creates a new api user and returns its pwd """
    addApiUser(username: String!): String! @authorize(roles: [ADMIN])
    editApiUser(input: ApiUserInput!): Boolean! @authorize(roles: [ADMIN])
    """ set new pwd to give api username """
    refreshApiUserPwd(id: ID!): String! @authorize(roles: [ADMIN])
    """ enable | disabled api user access """
    changeApiUserStatus(id: ID! isActive: Boolean!): Boolean! @authorize(roles: [ADMIN])
}

extend type Query {
    """ list api users"""
    apiUsers(page: PageInput!, where: ApiUserWhereInput): ApiUserConnection @authorize(roles: [ADMIN])
    apiUser(id: ID!): ApiUser @authorize(roles: [ADMIN])
}

enum ApiUserCbAPIAuth {
    NONE
    BASIC
    TOKEN
    OAUTH
}

type ApiUserConnection {
    edges:     [ApiUserEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type ApiUserEdge {
    node:   ApiUser
    cursor: Cursor
}

type ApiUser implements Node{
    id: ID!
    username: String!
    active: Boolean!
    cbApiAuth: ApiUserCbAPIAuth
    cbApiUrl: String
    cbApiUser: String
    cbApiPwd: String
    cbApiToken: String
    cbApiEndpoints: Map
}

input ApiUserInput {
    id: ID!
    cbApiAuth: ApiUserCbAPIAuth
    cbApiUrl: String
    cbApiUser: String
    cbApiPwd: String
    cbApiToken: String
    cbApiEndpoints: Map
}

type ApiUserInfo @goModel(model: "roofix/ent.ApiUser"){
    id: ID!
    username: String!
}
`, BuiltIn: false},
	{Name: "../auditlog.graphql", Input: `extend type Query {
    """ audit logs"""
    auditLogs(search: String, page: PageInput!, orderBy: AuditLogOrder): AuditLogConnection @authorize(roles: [ADMIN])
    apiUserAuditLogs(id: ID!, search: String, page: PageInput!, orderBy: AuditLogOrder): AuditLogConnection @authorize(roles: [ADMIN])
}

enum AuditLogOrderField {
    CREATED
}

input AuditLogOrder {
    direction: OrderDirection!
    field: AuditLogOrderField
}

type AuditLogConnection {
    edges:     [AuditLogEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type AuditLogEdge {
    node:   AuditLog
    cursor: Cursor
}

type AuditLog implements Node{
    id: ID!
    createdAt: Time!,
    action: String!
    description: String!
    user: User
    apiUser: ApiUser
    ip: String!
}
`, BuiltIn: false},
	{Name: "../contact_us.graphql", Input: `extend type Mutation {
    contactUs(reason: String!): Boolean! @authorize
}
`, BuiltIn: false},
	{Name: "../dashboard.graphql", Input: `extend type Query {
    overview(f: Filter!): Overview! @authorize(roles: [ADMIN])
}

enum Filter {
    BY_REGION
    BY_STATE
}

type Overview {
    id: Filter!
    total: Int!
    items: [OverviewItem]
}

type OverviewItem {
    id: String!
    name: String!
    count: Int!
}`, BuiltIn: false},
	{Name: "../document.graphql", Input: `extend type Mutation {
    """ document upload url """
    documentUploadUrl(doc: InputDocument!): Document! @authorize(roles: [ADMIN])
    """ public upload url """
    publicDataUploadUrl(entityID: ID!, section: PublicDataSection!, doc: InputFile!): Document! @authorize
    """ company doc upload url """
    partnerDocUploadUrl(partnerID: ID!, section: DocumentSection!, doc: InputFile!): Document! @authorize
    """ job doc upload url """
    jobDocUploadUrl(jobID: ID!, section: DocumentSection!, doc: InputFile!): Document! @authorize
    """ survey docs"""
    surveyDocUploadUrl(surveyID: ID!, section: DocumentSection!, doc: InputFile!): Document! @authorize
    """ delete a document from storage and db """
    deleteDoc(id: ID!): Boolean! @authorize(roles: [ADMIN])
}

extend type Query {
    """doc view url"""
    viewDocURL(docID: String!): String! @authorize
    """ all job docs """
    jobDocs(jobID: ID!): [Document]! @authorize
    """ all job docs byt section """
    jobDocsBySection(jobID: ID!):[SectionDocs!]! @authorize
    """ all survey docs """
    surveyDocs(surveyID: ID!): [Document]! @authorize
}

enum DocumentFolder @goModel(model: "roofix/pkg/enum.DocFolder")  {
    PartnerDocs
    JobDocs
    TrainingVideos
    PublicData
    Survey
}

enum DocumentSection @goModel(model: "roofix/pkg/enum.DocSection")  {
    Docs
    InspectionDocs
    ProductionPics
    PricingPDF
    Proposal
    Proof
    Logo
    Avatar
    Image
    Video
}

enum PublicDataSection @goModel(model: "roofix/pkg/enum.DocSection")  {
    Logo
    Avatar
    Image
}

enum JobDocSection  @goModel(model: "roofix/pkg/enum.DocSection")  {
    Docs
    InspectionDocs
    ProductionPics
    PricingPDF
}

input InputDocument @goModel(model: "roofix/pkg/document.Input") {
    folder: DocumentFolder!
    dir: String!
    section: DocumentSection!
    name: String!
    fileName: String!
    contentType: String
    contentSize: Int64!
    overwrite: Boolean!
}

input InputFile  {
    name: String!
    fileName: String!
    contentType: String
    contentSize: Int64!
}

type Document @goModel(model: "roofix/pkg/document.Info") {
    id: ID!
    key: String!
    name: String!
    section: String!
    filename: String!
    contentType: String
    contentSize: Int64!
    ready: Boolean!
    uploadUrl: String
    publicUrl: String
    meta: Any
    createdAt: Time
    updatedAt: Time
}

type DocumentInfo @goModel(model: "roofix/pkg/document.InfoShort") {
    id: ID!
    key: String!
    name: String!
    contentType: String
    contentSize: Int64
    url: String!
    ready: Boolean!
    createdAt: Time
}


type SectionDocs {
    section: JobDocSection!
    docs: [DocumentInfo!]!
}
`, BuiltIn: false},
	{Name: "../ent.graphql", Input: `"""
ApiAccessWhereInput is used for filtering ApiAccess objects.
Input was generated by ent.
"""
input ApiAccessWhereInput {
  not: ApiAccessWhereInput
  and: [ApiAccessWhereInput!]
  or: [ApiAccessWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """password field predicates"""
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordEqualFold: String
  passwordContainsFold: String
  """key field predicates"""
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """secret field predicates"""
  secret: String
  secretNEQ: String
  secretIn: [String!]
  secretNotIn: [String!]
  secretGT: String
  secretGTE: String
  secretLT: String
  secretLTE: String
  secretContains: String
  secretHasPrefix: String
  secretHasSuffix: String
  secretEqualFold: String
  secretContainsFold: String
  """access_token field predicates"""
  accessToken: String
  accessTokenNEQ: String
  accessTokenIn: [String!]
  accessTokenNotIn: [String!]
  accessTokenGT: String
  accessTokenGTE: String
  accessTokenLT: String
  accessTokenLTE: String
  accessTokenContains: String
  accessTokenHasPrefix: String
  accessTokenHasSuffix: String
  accessTokenIsNil: Boolean
  accessTokenNotNil: Boolean
  accessTokenEqualFold: String
  accessTokenContainsFold: String
  """refresh_token field predicates"""
  refreshToken: String
  refreshTokenNEQ: String
  refreshTokenIn: [String!]
  refreshTokenNotIn: [String!]
  refreshTokenGT: String
  refreshTokenGTE: String
  refreshTokenLT: String
  refreshTokenLTE: String
  refreshTokenContains: String
  refreshTokenHasPrefix: String
  refreshTokenHasSuffix: String
  refreshTokenIsNil: Boolean
  refreshTokenNotNil: Boolean
  refreshTokenEqualFold: String
  refreshTokenContainsFold: String
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
}
"""
ApiUserTokenWhereInput is used for filtering ApiUserToken objects.
Input was generated by ent.
"""
input ApiUserTokenWhereInput {
  not: ApiUserTokenWhereInput
  and: [ApiUserTokenWhereInput!]
  or: [ApiUserTokenWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """token_type field predicates"""
  tokenType: String
  tokenTypeNEQ: String
  tokenTypeIn: [String!]
  tokenTypeNotIn: [String!]
  tokenTypeGT: String
  tokenTypeGTE: String
  tokenTypeLT: String
  tokenTypeLTE: String
  tokenTypeContains: String
  tokenTypeHasPrefix: String
  tokenTypeHasSuffix: String
  tokenTypeEqualFold: String
  tokenTypeContainsFold: String
  """token_id field predicates"""
  tokenID: String
  tokenIDNEQ: String
  tokenIDIn: [String!]
  tokenIDNotIn: [String!]
  tokenIDGT: String
  tokenIDGTE: String
  tokenIDLT: String
  tokenIDLTE: String
  tokenIDContains: String
  tokenIDHasPrefix: String
  tokenIDHasSuffix: String
  tokenIDEqualFold: String
  tokenIDContainsFold: String
  """refresh_token_id field predicates"""
  refreshTokenID: String
  refreshTokenIDNEQ: String
  refreshTokenIDIn: [String!]
  refreshTokenIDNotIn: [String!]
  refreshTokenIDGT: String
  refreshTokenIDGTE: String
  refreshTokenIDLT: String
  refreshTokenIDLTE: String
  refreshTokenIDContains: String
  refreshTokenIDHasPrefix: String
  refreshTokenIDHasSuffix: String
  refreshTokenIDEqualFold: String
  refreshTokenIDContainsFold: String
  """api_user edge predicates"""
  hasAPIUser: Boolean
  hasAPIUserWith: [ApiUserWhereInput!]
}
"""
ApiUserWhereInput is used for filtering ApiUser objects.
Input was generated by ent.
"""
input ApiUserWhereInput {
  not: ApiUserWhereInput
  and: [ApiUserWhereInput!]
  or: [ApiUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """pwd_hash field predicates"""
  pwdHash: String
  pwdHashNEQ: String
  pwdHashIn: [String!]
  pwdHashNotIn: [String!]
  pwdHashGT: String
  pwdHashGTE: String
  pwdHashLT: String
  pwdHashLTE: String
  pwdHashContains: String
  pwdHashHasPrefix: String
  pwdHashHasSuffix: String
  pwdHashEqualFold: String
  pwdHashContainsFold: String
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """cb_api_url field predicates"""
  cbAPIURL: String
  cbAPIURLNEQ: String
  cbAPIURLIn: [String!]
  cbAPIURLNotIn: [String!]
  cbAPIURLGT: String
  cbAPIURLGTE: String
  cbAPIURLLT: String
  cbAPIURLLTE: String
  cbAPIURLContains: String
  cbAPIURLHasPrefix: String
  cbAPIURLHasSuffix: String
  cbAPIURLIsNil: Boolean
  cbAPIURLNotNil: Boolean
  cbAPIURLEqualFold: String
  cbAPIURLContainsFold: String
  """cb_api_auth field predicates"""
  cbAPIAuth: ApiUserCbAPIAuth
  cbAPIAuthNEQ: ApiUserCbAPIAuth
  cbAPIAuthIn: [ApiUserCbAPIAuth!]
  cbAPIAuthNotIn: [ApiUserCbAPIAuth!]
  cbAPIAuthIsNil: Boolean
  cbAPIAuthNotNil: Boolean
  """cb_api_user field predicates"""
  cbAPIUser: String
  cbAPIUserNEQ: String
  cbAPIUserIn: [String!]
  cbAPIUserNotIn: [String!]
  cbAPIUserGT: String
  cbAPIUserGTE: String
  cbAPIUserLT: String
  cbAPIUserLTE: String
  cbAPIUserContains: String
  cbAPIUserHasPrefix: String
  cbAPIUserHasSuffix: String
  cbAPIUserIsNil: Boolean
  cbAPIUserNotNil: Boolean
  cbAPIUserEqualFold: String
  cbAPIUserContainsFold: String
  """cb_api_pwd field predicates"""
  cbAPIPwd: String
  cbAPIPwdNEQ: String
  cbAPIPwdIn: [String!]
  cbAPIPwdNotIn: [String!]
  cbAPIPwdGT: String
  cbAPIPwdGTE: String
  cbAPIPwdLT: String
  cbAPIPwdLTE: String
  cbAPIPwdContains: String
  cbAPIPwdHasPrefix: String
  cbAPIPwdHasSuffix: String
  cbAPIPwdIsNil: Boolean
  cbAPIPwdNotNil: Boolean
  cbAPIPwdEqualFold: String
  cbAPIPwdContainsFold: String
  """cb_api_token field predicates"""
  cbAPIToken: String
  cbAPITokenNEQ: String
  cbAPITokenIn: [String!]
  cbAPITokenNotIn: [String!]
  cbAPITokenGT: String
  cbAPITokenGTE: String
  cbAPITokenLT: String
  cbAPITokenLTE: String
  cbAPITokenContains: String
  cbAPITokenHasPrefix: String
  cbAPITokenHasSuffix: String
  cbAPITokenIsNil: Boolean
  cbAPITokenNotNil: Boolean
  cbAPITokenEqualFold: String
  cbAPITokenContainsFold: String
  """tokens edge predicates"""
  hasTokens: Boolean
  hasTokensWith: [ApiUserTokenWhereInput!]
  """audit_logs edge predicates"""
  hasAuditLogs: Boolean
  hasAuditLogsWith: [AuditLogWhereInput!]
  """created_estimates edge predicates"""
  hasCreatedEstimates: Boolean
  hasCreatedEstimatesWith: [EstimateWhereInput!]
  """created_jobs edge predicates"""
  hasCreatedJobs: Boolean
  hasCreatedJobsWith: [JobWhereInput!]
  """created_partners edge predicates"""
  hasCreatedPartners: Boolean
  hasCreatedPartnersWith: [PartnerWhereInput!]
  """survey_progress edge predicates"""
  hasSurveyProgress: Boolean
  hasSurveyProgressWith: [SurveyProgressWhereInput!]
  """estimate_activities edge predicates"""
  hasEstimateActivities: Boolean
  hasEstimateActivitiesWith: [EstimateActivityWhereInput!]
  """user_activities edge predicates"""
  hasUserActivities: Boolean
  hasUserActivitiesWith: [UserActivityWhereInput!]
  """partner_activities edge predicates"""
  hasPartnerActivities: Boolean
  hasPartnerActivitiesWith: [PartnerActivityWhereInput!]
  """job_activities edge predicates"""
  hasJobActivities: Boolean
  hasJobActivitiesWith: [JobActivityWhereInput!]
  """notifications edge predicates"""
  hasNotifications: Boolean
  hasNotificationsWith: [ChannelMessageWhereInput!]
  """job_progress_history edge predicates"""
  hasJobProgressHistory: Boolean
  hasJobProgressHistoryWith: [JobProgressHistoryWhereInput!]
}
"""
AuditLogWhereInput is used for filtering AuditLog objects.
Input was generated by ent.
"""
input AuditLogWhereInput {
  not: AuditLogWhereInput
  and: [AuditLogWhereInput!]
  or: [AuditLogWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """action field predicates"""
  action: String
  actionNEQ: String
  actionIn: [String!]
  actionNotIn: [String!]
  actionGT: String
  actionGTE: String
  actionLT: String
  actionLTE: String
  actionContains: String
  actionHasPrefix: String
  actionHasSuffix: String
  actionEqualFold: String
  actionContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """ip field predicates"""
  ip: String
  ipNEQ: String
  ipIn: [String!]
  ipNotIn: [String!]
  ipGT: String
  ipGTE: String
  ipLT: String
  ipLTE: String
  ipContains: String
  ipHasPrefix: String
  ipHasSuffix: String
  ipIsNil: Boolean
  ipNotNil: Boolean
  ipEqualFold: String
  ipContainsFold: String
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """api_user edge predicates"""
  hasAPIUser: Boolean
  hasAPIUserWith: [ApiUserWhereInput!]
}
"""
ChannelMessageReadWhereInput is used for filtering ChannelMessageRead objects.
Input was generated by ent.
"""
input ChannelMessageReadWhereInput {
  not: ChannelMessageReadWhereInput
  and: [ChannelMessageReadWhereInput!]
  or: [ChannelMessageReadWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """read field predicates"""
  read: Boolean
  readNEQ: Boolean
  """channel_message edge predicates"""
  hasChannelMessage: Boolean
  hasChannelMessageWith: [ChannelMessageWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
ChannelMessageWhereInput is used for filtering ChannelMessage objects.
Input was generated by ent.
"""
input ChannelMessageWhereInput {
  not: ChannelMessageWhereInput
  and: [ChannelMessageWhereInput!]
  or: [ChannelMessageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  """from_name field predicates"""
  fromName: String
  fromNameNEQ: String
  fromNameIn: [String!]
  fromNameNotIn: [String!]
  fromNameGT: String
  fromNameGTE: String
  fromNameLT: String
  fromNameLTE: String
  fromNameContains: String
  fromNameHasPrefix: String
  fromNameHasSuffix: String
  fromNameEqualFold: String
  fromNameContainsFold: String
  """to_name field predicates"""
  toName: String
  toNameNEQ: String
  toNameIn: [String!]
  toNameNotIn: [String!]
  toNameGT: String
  toNameGTE: String
  toNameLT: String
  toNameLTE: String
  toNameContains: String
  toNameHasPrefix: String
  toNameHasSuffix: String
  toNameIsNil: Boolean
  toNameNotNil: Boolean
  toNameEqualFold: String
  toNameContainsFold: String
  """private field predicates"""
  private: Boolean
  privateNEQ: Boolean
  """unread field predicates"""
  unread: Boolean
  unreadNEQ: Boolean
  unreadIsNil: Boolean
  unreadNotNil: Boolean
  """reads edge predicates"""
  hasReads: Boolean
  hasReadsWith: [ChannelMessageReadWhereInput!]
  """channel edge predicates"""
  hasChannel: Boolean
  hasChannelWith: [ChannelWhereInput!]
  """from edge predicates"""
  hasFrom: Boolean
  hasFromWith: [UserWhereInput!]
  """from_api_user edge predicates"""
  hasFromAPIUser: Boolean
  hasFromAPIUserWith: [ApiUserWhereInput!]
  """to edge predicates"""
  hasTo: Boolean
  hasToWith: [UserWhereInput!]
}
"""
ChannelSubWhereInput is used for filtering ChannelSub objects.
Input was generated by ent.
"""
input ChannelSubWhereInput {
  not: ChannelSubWhereInput
  and: [ChannelSubWhereInput!]
  or: [ChannelSubWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """role field predicates"""
  role: Role
  roleNEQ: Role
  roleIn: [Role!]
  roleNotIn: [Role!]
  roleIsNil: Boolean
  roleNotNil: Boolean
  """channel edge predicates"""
  hasChannel: Boolean
  hasChannelWith: [ChannelWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
ChannelWhereInput is used for filtering Channel objects.
Input was generated by ent.
"""
input ChannelWhereInput {
  not: ChannelWhereInput
  and: [ChannelWhereInput!]
  or: [ChannelWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: Channel
  nameNEQ: Channel
  nameIn: [Channel!]
  nameNotIn: [Channel!]
  """topic field predicates"""
  topic: Topic
  topicNEQ: Topic
  topicIn: [Topic!]
  topicNotIn: [Topic!]
  """ref_id field predicates"""
  refID: String
  refIDNEQ: String
  refIDIn: [String!]
  refIDNotIn: [String!]
  refIDGT: String
  refIDGTE: String
  refIDLT: String
  refIDLTE: String
  refIDContains: String
  refIDHasPrefix: String
  refIDHasSuffix: String
  refIDIsNil: Boolean
  refIDNotNil: Boolean
  refIDEqualFold: String
  refIDContainsFold: String
  """subscriptions edge predicates"""
  hasSubscriptions: Boolean
  hasSubscriptionsWith: [ChannelSubWhereInput!]
  """messages edge predicates"""
  hasMessages: Boolean
  hasMessagesWith: [ChannelMessageWhereInput!]
}
"""
ContactUsWhereInput is used for filtering ContactUs objects.
Input was generated by ent.
"""
input ContactUsWhereInput {
  not: ContactUsWhereInput
  and: [ContactUsWhereInput!]
  or: [ContactUsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """reason field predicates"""
  reason: String
  reasonNEQ: String
  reasonIn: [String!]
  reasonNotIn: [String!]
  reasonGT: String
  reasonGTE: String
  reasonLT: String
  reasonLTE: String
  reasonContains: String
  reasonHasPrefix: String
  reasonHasSuffix: String
  reasonEqualFold: String
  reasonContainsFold: String
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
"""
CreatePartnerServiceCityInput is used for create PartnerServiceCity object.
Input was generated by ent.
"""
input CreatePartnerServiceCityInput {
  createdAt: Time
  updatedAt: Time
  postalID: String!
  active: Boolean
  name: String!
  naicsCode: Int!
  licenseNo: String
  proofDocID: String
  partnerID: ID!
}
"""
CreatePartnerServiceStateInput is used for create PartnerServiceState object.
Input was generated by ent.
"""
input CreatePartnerServiceStateInput {
  createdAt: Time
  updatedAt: Time
  country: String!
  state: String!
  licenseNo: String
  licenseExpDate: Time
  proofDocID: String
  partnerID: ID!
}
"""
DocumentWhereInput is used for filtering Document objects.
Input was generated by ent.
"""
input DocumentWhereInput {
  not: DocumentWhereInput
  and: [DocumentWhereInput!]
  or: [DocumentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """bucket field predicates"""
  bucket: String
  bucketNEQ: String
  bucketIn: [String!]
  bucketNotIn: [String!]
  bucketGT: String
  bucketGTE: String
  bucketLT: String
  bucketLTE: String
  bucketContains: String
  bucketHasPrefix: String
  bucketHasSuffix: String
  bucketEqualFold: String
  bucketContainsFold: String
  """key field predicates"""
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """folder field predicates"""
  folder: DocumentFolder
  folderNEQ: DocumentFolder
  folderIn: [DocumentFolder!]
  folderNotIn: [DocumentFolder!]
  """dir field predicates"""
  dir: String
  dirNEQ: String
  dirIn: [String!]
  dirNotIn: [String!]
  dirGT: String
  dirGTE: String
  dirLT: String
  dirLTE: String
  dirContains: String
  dirHasPrefix: String
  dirHasSuffix: String
  dirIsNil: Boolean
  dirNotNil: Boolean
  dirEqualFold: String
  dirContainsFold: String
  """section field predicates"""
  section: DocumentSection
  sectionNEQ: DocumentSection
  sectionIn: [DocumentSection!]
  sectionNotIn: [DocumentSection!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """filename field predicates"""
  filename: String
  filenameNEQ: String
  filenameIn: [String!]
  filenameNotIn: [String!]
  filenameGT: String
  filenameGTE: String
  filenameLT: String
  filenameLTE: String
  filenameContains: String
  filenameHasPrefix: String
  filenameHasSuffix: String
  filenameEqualFold: String
  filenameContainsFold: String
  """content_type field predicates"""
  contentType: String
  contentTypeNEQ: String
  contentTypeIn: [String!]
  contentTypeNotIn: [String!]
  contentTypeGT: String
  contentTypeGTE: String
  contentTypeLT: String
  contentTypeLTE: String
  contentTypeContains: String
  contentTypeHasPrefix: String
  contentTypeHasSuffix: String
  contentTypeIsNil: Boolean
  contentTypeNotNil: Boolean
  contentTypeEqualFold: String
  contentTypeContainsFold: String
  """content_size field predicates"""
  contentSize: Int
  contentSizeNEQ: Int
  contentSizeIn: [Int!]
  contentSizeNotIn: [Int!]
  contentSizeGT: Int
  contentSizeGTE: Int
  contentSizeLT: Int
  contentSizeLTE: Int
  """ready field predicates"""
  ready: Boolean
  readyNEQ: Boolean
  """creator_id field predicates"""
  creatorID: String
  creatorIDNEQ: String
  creatorIDIn: [String!]
  creatorIDNotIn: [String!]
  creatorIDGT: String
  creatorIDGTE: String
  creatorIDLT: String
  creatorIDLTE: String
  creatorIDContains: String
  creatorIDHasPrefix: String
  creatorIDHasSuffix: String
  creatorIDEqualFold: String
  creatorIDContainsFold: String
  """updater_id field predicates"""
  updaterID: String
  updaterIDNEQ: String
  updaterIDIn: [String!]
  updaterIDNotIn: [String!]
  updaterIDGT: String
  updaterIDGTE: String
  updaterIDLT: String
  updaterIDLTE: String
  updaterIDContains: String
  updaterIDHasPrefix: String
  updaterIDHasSuffix: String
  updaterIDIsNil: Boolean
  updaterIDNotNil: Boolean
  updaterIDEqualFold: String
  updaterIDContainsFold: String
  """training_video edge predicates"""
  hasTrainingVideo: Boolean
  hasTrainingVideoWith: [TrainingVideoWhereInput!]
  """training_video_poster edge predicates"""
  hasTrainingVideoPoster: Boolean
  hasTrainingVideoPosterWith: [TrainingVideoWhereInput!]
  """products_image edge predicates"""
  hasProductsImage: Boolean
  hasProductsImageWith: [ProductWhereInput!]
  """installation_job_item_image edge predicates"""
  hasInstallationJobItemImage: Boolean
  hasInstallationJobItemImageWith: [InstallationJobItemWhereInput!]
  """estimate_pdf edge predicates"""
  hasEstimatePdf: Boolean
  hasEstimatePdfWith: [EstimateWhereInput!]
  """job_estimate_pdf edge predicates"""
  hasJobEstimatePdf: Boolean
  hasJobEstimatePdfWith: [JobWhereInput!]
}
"""
EstimateActivityWhereInput is used for filtering EstimateActivity objects.
Input was generated by ent.
"""
input EstimateActivityWhereInput {
  not: EstimateActivityWhereInput
  and: [EstimateActivityWhereInput!]
  or: [EstimateActivityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """estimate edge predicates"""
  hasEstimate: Boolean
  hasEstimateWith: [EstimateWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
}
"""
EstimateWhereInput is used for filtering Estimate objects.
Input was generated by ent.
"""
input EstimateWhereInput {
  not: EstimateWhereInput
  and: [EstimateWhereInput!]
  or: [EstimateWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """region_id field predicates"""
  regionID: Int
  regionIDNEQ: Int
  regionIDIn: [Int!]
  regionIDNotIn: [Int!]
  regionIDGT: Int
  regionIDGTE: Int
  regionIDLT: Int
  regionIDLTE: Int
  """status field predicates"""
  status: EstimateStatus
  statusNEQ: EstimateStatus
  statusIn: [EstimateStatus!]
  statusNotIn: [EstimateStatus!]
  """current_material field predicates"""
  currentMaterial: String
  currentMaterialNEQ: String
  currentMaterialIn: [String!]
  currentMaterialNotIn: [String!]
  currentMaterialGT: String
  currentMaterialGTE: String
  currentMaterialLT: String
  currentMaterialLTE: String
  currentMaterialContains: String
  currentMaterialHasPrefix: String
  currentMaterialHasSuffix: String
  currentMaterialIsNil: Boolean
  currentMaterialNotNil: Boolean
  currentMaterialEqualFold: String
  currentMaterialContainsFold: String
  """new_roofing_material field predicates"""
  newRoofingMaterial: String
  newRoofingMaterialNEQ: String
  newRoofingMaterialIn: [String!]
  newRoofingMaterialNotIn: [String!]
  newRoofingMaterialGT: String
  newRoofingMaterialGTE: String
  newRoofingMaterialLT: String
  newRoofingMaterialLTE: String
  newRoofingMaterialContains: String
  newRoofingMaterialHasPrefix: String
  newRoofingMaterialHasSuffix: String
  newRoofingMaterialIsNil: Boolean
  newRoofingMaterialNotNil: Boolean
  newRoofingMaterialEqualFold: String
  newRoofingMaterialContainsFold: String
  """lowSlope field predicates"""
  lowslope: Boolean
  lowslopeNEQ: Boolean
  """current_material_low_slope field predicates"""
  currentMaterialLowSlope: String
  currentMaterialLowSlopeNEQ: String
  currentMaterialLowSlopeIn: [String!]
  currentMaterialLowSlopeNotIn: [String!]
  currentMaterialLowSlopeGT: String
  currentMaterialLowSlopeGTE: String
  currentMaterialLowSlopeLT: String
  currentMaterialLowSlopeLTE: String
  currentMaterialLowSlopeContains: String
  currentMaterialLowSlopeHasPrefix: String
  currentMaterialLowSlopeHasSuffix: String
  currentMaterialLowSlopeIsNil: Boolean
  currentMaterialLowSlopeNotNil: Boolean
  currentMaterialLowSlopeEqualFold: String
  currentMaterialLowSlopeContainsFold: String
  """new_roofing_material_low_slope field predicates"""
  newRoofingMaterialLowSlope: String
  newRoofingMaterialLowSlopeNEQ: String
  newRoofingMaterialLowSlopeIn: [String!]
  newRoofingMaterialLowSlopeNotIn: [String!]
  newRoofingMaterialLowSlopeGT: String
  newRoofingMaterialLowSlopeGTE: String
  newRoofingMaterialLowSlopeLT: String
  newRoofingMaterialLowSlopeLTE: String
  newRoofingMaterialLowSlopeContains: String
  newRoofingMaterialLowSlopeHasPrefix: String
  newRoofingMaterialLowSlopeHasSuffix: String
  newRoofingMaterialLowSlopeIsNil: Boolean
  newRoofingMaterialLowSlopeNotNil: Boolean
  newRoofingMaterialLowSlopeEqualFold: String
  newRoofingMaterialLowSlopeContainsFold: String
  """redeck field predicates"""
  redeck: Boolean
  redeckNEQ: Boolean
  """layers field predicates"""
  layers: Int
  layersNEQ: Int
  layersIn: [Int!]
  layersNotIn: [Int!]
  layersGT: Int
  layersGTE: Int
  layersLT: Int
  layersLTE: Int
  """layer2_material field predicates"""
  layer2Material: String
  layer2MaterialNEQ: String
  layer2MaterialIn: [String!]
  layer2MaterialNotIn: [String!]
  layer2MaterialGT: String
  layer2MaterialGTE: String
  layer2MaterialLT: String
  layer2MaterialLTE: String
  layer2MaterialContains: String
  layer2MaterialHasPrefix: String
  layer2MaterialHasSuffix: String
  layer2MaterialIsNil: Boolean
  layer2MaterialNotNil: Boolean
  layer2MaterialEqualFold: String
  layer2MaterialContainsFold: String
  """layer3_material field predicates"""
  layer3Material: String
  layer3MaterialNEQ: String
  layer3MaterialIn: [String!]
  layer3MaterialNotIn: [String!]
  layer3MaterialGT: String
  layer3MaterialGTE: String
  layer3MaterialLT: String
  layer3MaterialLTE: String
  layer3MaterialContains: String
  layer3MaterialHasPrefix: String
  layer3MaterialHasSuffix: String
  layer3MaterialIsNil: Boolean
  layer3MaterialNotNil: Boolean
  layer3MaterialEqualFold: String
  layer3MaterialContainsFold: String
  """partial_percentage field predicates"""
  partialPercentage: Float
  partialPercentageNEQ: Float
  partialPercentageIn: [Float!]
  partialPercentageNotIn: [Float!]
  partialPercentageGT: Float
  partialPercentageGTE: Float
  partialPercentageLT: Float
  partialPercentageLTE: Float
  partialPercentageIsNil: Boolean
  partialPercentageNotNil: Boolean
  """material_mapping_note field predicates"""
  materialMappingNote: String
  materialMappingNoteNEQ: String
  materialMappingNoteIn: [String!]
  materialMappingNoteNotIn: [String!]
  materialMappingNoteGT: String
  materialMappingNoteGTE: String
  materialMappingNoteLT: String
  materialMappingNoteLTE: String
  materialMappingNoteContains: String
  materialMappingNoteHasPrefix: String
  materialMappingNoteHasSuffix: String
  materialMappingNoteIsNil: Boolean
  materialMappingNoteNotNil: Boolean
  materialMappingNoteEqualFold: String
  materialMappingNoteContainsFold: String
  """measure_type field predicates"""
  measureType: Measure
  measureTypeNEQ: Measure
  measureTypeIn: [Measure!]
  measureTypeNotIn: [Measure!]
  """extra_charge_type field predicates"""
  extraChargeType: ExtraCharge
  extraChargeTypeNEQ: ExtraCharge
  extraChargeTypeIn: [ExtraCharge!]
  extraChargeTypeNotIn: [ExtraCharge!]
  extraChargeTypeIsNil: Boolean
  extraChargeTypeNotNil: Boolean
  """extra_charges field predicates"""
  extraCharges: Float
  extraChargesNEQ: Float
  extraChargesIn: [Float!]
  extraChargesNotIn: [Float!]
  extraChargesGT: Float
  extraChargesGTE: Float
  extraChargesLT: Float
  extraChargesLTE: Float
  extraChargesIsNil: Boolean
  extraChargesNotNil: Boolean
  """extra_charge_note field predicates"""
  extraChargeNote: String
  extraChargeNoteNEQ: String
  extraChargeNoteIn: [String!]
  extraChargeNoteNotIn: [String!]
  extraChargeNoteGT: String
  extraChargeNoteGTE: String
  extraChargeNoteLT: String
  extraChargeNoteLTE: String
  extraChargeNoteContains: String
  extraChargeNoteHasPrefix: String
  extraChargeNoteHasSuffix: String
  extraChargeNoteIsNil: Boolean
  extraChargeNoteNotNil: Boolean
  extraChargeNoteEqualFold: String
  extraChargeNoteContainsFold: String
  """estimator field predicates"""
  estimator: String
  estimatorNEQ: String
  estimatorIn: [String!]
  estimatorNotIn: [String!]
  estimatorGT: String
  estimatorGTE: String
  estimatorLT: String
  estimatorLTE: String
  estimatorContains: String
  estimatorHasPrefix: String
  estimatorHasSuffix: String
  estimatorIsNil: Boolean
  estimatorNotNil: Boolean
  estimatorEqualFold: String
  estimatorContainsFold: String
  """estimator_order_id field predicates"""
  estimatorOrderID: Int
  estimatorOrderIDNEQ: Int
  estimatorOrderIDIn: [Int!]
  estimatorOrderIDNotIn: [Int!]
  estimatorOrderIDGT: Int
  estimatorOrderIDGTE: Int
  estimatorOrderIDLT: Int
  estimatorOrderIDLTE: Int
  estimatorOrderIDIsNil: Boolean
  estimatorOrderIDNotNil: Boolean
  """estimator_report_id field predicates"""
  estimatorReportID: Int
  estimatorReportIDNEQ: Int
  estimatorReportIDIn: [Int!]
  estimatorReportIDNotIn: [Int!]
  estimatorReportIDGT: Int
  estimatorReportIDGTE: Int
  estimatorReportIDLT: Int
  estimatorReportIDLTE: Int
  estimatorReportIDIsNil: Boolean
  estimatorReportIDNotNil: Boolean
  """total_squares field predicates"""
  totalSquares: Float
  totalSquaresNEQ: Float
  totalSquaresIn: [Float!]
  totalSquaresNotIn: [Float!]
  totalSquaresGT: Float
  totalSquaresGTE: Float
  totalSquaresLT: Float
  totalSquaresLTE: Float
  """primary_pitch field predicates"""
  primaryPitch: Float
  primaryPitchNEQ: Float
  primaryPitchIn: [Float!]
  primaryPitchNotIn: [Float!]
  primaryPitchGT: Float
  primaryPitchGTE: Float
  primaryPitchLT: Float
  primaryPitchLTE: Float
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """price_summary field predicates"""
  priceSummary: String
  priceSummaryNEQ: String
  priceSummaryIn: [String!]
  priceSummaryNotIn: [String!]
  priceSummaryGT: String
  priceSummaryGTE: String
  priceSummaryLT: String
  priceSummaryLTE: String
  priceSummaryContains: String
  priceSummaryHasPrefix: String
  priceSummaryHasSuffix: String
  priceSummaryIsNil: Boolean
  priceSummaryNotNil: Boolean
  priceSummaryEqualFold: String
  priceSummaryContainsFold: String
  """override field predicates"""
  override: Boolean
  overrideNEQ: Boolean
  overrideIsNil: Boolean
  overrideNotNil: Boolean
  """override_total_squares field predicates"""
  overrideTotalSquares: Float
  overrideTotalSquaresNEQ: Float
  overrideTotalSquaresIn: [Float!]
  overrideTotalSquaresNotIn: [Float!]
  overrideTotalSquaresGT: Float
  overrideTotalSquaresGTE: Float
  overrideTotalSquaresLT: Float
  overrideTotalSquaresLTE: Float
  """override_primary_pitch field predicates"""
  overridePrimaryPitch: Float
  overridePrimaryPitchNEQ: Float
  overridePrimaryPitchIn: [Float!]
  overridePrimaryPitchNotIn: [Float!]
  overridePrimaryPitchGT: Float
  overridePrimaryPitchGTE: Float
  overridePrimaryPitchLT: Float
  overridePrimaryPitchLTE: Float
  """override_price field predicates"""
  overridePrice: Float
  overridePriceNEQ: Float
  overridePriceIn: [Float!]
  overridePriceNotIn: [Float!]
  overridePriceGT: Float
  overridePriceGTE: Float
  overridePriceLT: Float
  overridePriceLTE: Float
  """override_price_summary field predicates"""
  overridePriceSummary: String
  overridePriceSummaryNEQ: String
  overridePriceSummaryIn: [String!]
  overridePriceSummaryNotIn: [String!]
  overridePriceSummaryGT: String
  overridePriceSummaryGTE: String
  overridePriceSummaryLT: String
  overridePriceSummaryLTE: String
  overridePriceSummaryContains: String
  overridePriceSummaryHasPrefix: String
  overridePriceSummaryHasSuffix: String
  overridePriceSummaryIsNil: Boolean
  overridePriceSummaryNotNil: Boolean
  overridePriceSummaryEqualFold: String
  overridePriceSummaryContainsFold: String
  """company_ref_id field predicates"""
  companyRefID: String
  companyRefIDNEQ: String
  companyRefIDIn: [String!]
  companyRefIDNotIn: [String!]
  companyRefIDGT: String
  companyRefIDGTE: String
  companyRefIDLT: String
  companyRefIDLTE: String
  companyRefIDContains: String
  companyRefIDHasPrefix: String
  companyRefIDHasSuffix: String
  companyRefIDIsNil: Boolean
  companyRefIDNotNil: Boolean
  companyRefIDEqualFold: String
  companyRefIDContainsFold: String
  """company_ref_name field predicates"""
  companyRefName: String
  companyRefNameNEQ: String
  companyRefNameIn: [String!]
  companyRefNameNotIn: [String!]
  companyRefNameGT: String
  companyRefNameGTE: String
  companyRefNameLT: String
  companyRefNameLTE: String
  companyRefNameContains: String
  companyRefNameHasPrefix: String
  companyRefNameHasSuffix: String
  companyRefNameIsNil: Boolean
  companyRefNameNotNil: Boolean
  companyRefNameEqualFold: String
  companyRefNameContainsFold: String
  """failure_reason field predicates"""
  failureReason: String
  failureReasonNEQ: String
  failureReasonIn: [String!]
  failureReasonNotIn: [String!]
  failureReasonGT: String
  failureReasonGTE: String
  failureReasonLT: String
  failureReasonLTE: String
  failureReasonContains: String
  failureReasonHasPrefix: String
  failureReasonHasSuffix: String
  failureReasonIsNil: Boolean
  failureReasonNotNil: Boolean
  failureReasonEqualFold: String
  failureReasonContainsFold: String
  """activities edge predicates"""
  hasActivities: Boolean
  hasActivitiesWith: [EstimateActivityWhereInput!]
  """job_info edge predicates"""
  hasJobInfo: Boolean
  hasJobInfoWith: [JobWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
  """home_owner edge predicates"""
  hasHomeOwner: Boolean
  hasHomeOwnerWith: [HomeOwnerWhereInput!]
  """sales_rep edge predicates"""
  hasSalesRep: Boolean
  hasSalesRepWith: [UserWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
  """pdf edge predicates"""
  hasPdf: Boolean
  hasPdfWith: [DocumentWhereInput!]
}
"""
HomeOwnerWhereInput is used for filtering HomeOwner objects.
Input was generated by ent.
"""
input HomeOwnerWhereInput {
  not: HomeOwnerWhereInput
  and: [HomeOwnerWhereInput!]
  or: [HomeOwnerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """first_name field predicates"""
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """last_name field predicates"""
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """street_number field predicates"""
  streetNumber: String
  streetNumberNEQ: String
  streetNumberIn: [String!]
  streetNumberNotIn: [String!]
  streetNumberGT: String
  streetNumberGTE: String
  streetNumberLT: String
  streetNumberLTE: String
  streetNumberContains: String
  streetNumberHasPrefix: String
  streetNumberHasSuffix: String
  streetNumberEqualFold: String
  streetNumberContainsFold: String
  """street_name field predicates"""
  streetName: String
  streetNameNEQ: String
  streetNameIn: [String!]
  streetNameNotIn: [String!]
  streetNameGT: String
  streetNameGTE: String
  streetNameLT: String
  streetNameLTE: String
  streetNameContains: String
  streetNameHasPrefix: String
  streetNameHasSuffix: String
  streetNameEqualFold: String
  streetNameContainsFold: String
  """city field predicates"""
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateEqualFold: String
  stateContainsFold: String
  """state_abbr field predicates"""
  stateAbbr: String
  stateAbbrNEQ: String
  stateAbbrIn: [String!]
  stateAbbrNotIn: [String!]
  stateAbbrGT: String
  stateAbbrGTE: String
  stateAbbrLT: String
  stateAbbrLTE: String
  stateAbbrContains: String
  stateAbbrHasPrefix: String
  stateAbbrHasSuffix: String
  stateAbbrIsNil: Boolean
  stateAbbrNotNil: Boolean
  stateAbbrEqualFold: String
  stateAbbrContainsFold: String
  """zip field predicates"""
  zip: String
  zipNEQ: String
  zipIn: [String!]
  zipNotIn: [String!]
  zipGT: String
  zipGTE: String
  zipLT: String
  zipLTE: String
  zipContains: String
  zipHasPrefix: String
  zipHasSuffix: String
  zipEqualFold: String
  zipContainsFold: String
  """formatted_address field predicates"""
  formattedAddress: String
  formattedAddressNEQ: String
  formattedAddressIn: [String!]
  formattedAddressNotIn: [String!]
  formattedAddressGT: String
  formattedAddressGTE: String
  formattedAddressLT: String
  formattedAddressLTE: String
  formattedAddressContains: String
  formattedAddressHasPrefix: String
  formattedAddressHasSuffix: String
  formattedAddressIsNil: Boolean
  formattedAddressNotNil: Boolean
  formattedAddressEqualFold: String
  formattedAddressContainsFold: String
  """latitude field predicates"""
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  latitudeIsNil: Boolean
  latitudeNotNil: Boolean
  """longitude field predicates"""
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  longitudeIsNil: Boolean
  longitudeNotNil: Boolean
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashIsNil: Boolean
  hashNotNil: Boolean
  hashEqualFold: String
  hashContainsFold: String
  """estimates edge predicates"""
  hasEstimates: Boolean
  hasEstimatesWith: [EstimateWhereInput!]
  """jobs edge predicates"""
  hasJobs: Boolean
  hasJobsWith: [JobWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
InstallationJobItemWhereInput is used for filtering InstallationJobItem objects.
Input was generated by ent.
"""
input InstallationJobItemWhereInput {
  not: InstallationJobItemWhereInput
  and: [InstallationJobItemWhereInput!]
  or: [InstallationJobItemWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """img_key field predicates"""
  imgKey: String
  imgKeyNEQ: String
  imgKeyIn: [String!]
  imgKeyNotIn: [String!]
  imgKeyGT: String
  imgKeyGTE: String
  imgKeyLT: String
  imgKeyLTE: String
  imgKeyContains: String
  imgKeyHasPrefix: String
  imgKeyHasSuffix: String
  imgKeyEqualFold: String
  imgKeyContainsFold: String
  """special_note field predicates"""
  specialNote: String
  specialNoteNEQ: String
  specialNoteIn: [String!]
  specialNoteNotIn: [String!]
  specialNoteGT: String
  specialNoteGTE: String
  specialNoteLT: String
  specialNoteLTE: String
  specialNoteContains: String
  specialNoteHasPrefix: String
  specialNoteHasSuffix: String
  specialNoteIsNil: Boolean
  specialNoteNotNil: Boolean
  specialNoteEqualFold: String
  specialNoteContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [InstallationJobWhereInput!]
}
"""
InstallationJobProgressWhereInput is used for filtering InstallationJobProgress objects.
Input was generated by ent.
"""
input InstallationJobProgressWhereInput {
  not: InstallationJobProgressWhereInput
  and: [InstallationJobProgressWhereInput!]
  or: [InstallationJobProgressWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """status field predicates"""
  status: InstallationStatus
  statusNEQ: InstallationStatus
  statusIn: [InstallationStatus!]
  statusNotIn: [InstallationStatus!]
  """complete field predicates"""
  complete: Boolean
  completeNEQ: Boolean
  completeIsNil: Boolean
  completeNotNil: Boolean
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [InstallationJobWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
"""
InstallationJobWhereInput is used for filtering InstallationJob objects.
Input was generated by ent.
"""
input InstallationJobWhereInput {
  not: InstallationJobWhereInput
  and: [InstallationJobWhereInput!]
  or: [InstallationJobWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """type field predicates"""
  type: InstallationType
  typeNEQ: InstallationType
  typeIn: [InstallationType!]
  typeNotIn: [InstallationType!]
  """owner_name field predicates"""
  ownerName: String
  ownerNameNEQ: String
  ownerNameIn: [String!]
  ownerNameNotIn: [String!]
  ownerNameGT: String
  ownerNameGTE: String
  ownerNameLT: String
  ownerNameLTE: String
  ownerNameContains: String
  ownerNameHasPrefix: String
  ownerNameHasSuffix: String
  ownerNameEqualFold: String
  ownerNameContainsFold: String
  """owner_phone field predicates"""
  ownerPhone: String
  ownerPhoneNEQ: String
  ownerPhoneIn: [String!]
  ownerPhoneNotIn: [String!]
  ownerPhoneGT: String
  ownerPhoneGTE: String
  ownerPhoneLT: String
  ownerPhoneLTE: String
  ownerPhoneContains: String
  ownerPhoneHasPrefix: String
  ownerPhoneHasSuffix: String
  ownerPhoneEqualFold: String
  ownerPhoneContainsFold: String
  """owner_email field predicates"""
  ownerEmail: String
  ownerEmailNEQ: String
  ownerEmailIn: [String!]
  ownerEmailNotIn: [String!]
  ownerEmailGT: String
  ownerEmailGTE: String
  ownerEmailLT: String
  ownerEmailLTE: String
  ownerEmailContains: String
  ownerEmailHasPrefix: String
  ownerEmailHasSuffix: String
  ownerEmailIsNil: Boolean
  ownerEmailNotNil: Boolean
  ownerEmailEqualFold: String
  ownerEmailContainsFold: String
  """owner_address field predicates"""
  ownerAddress: String
  ownerAddressNEQ: String
  ownerAddressIn: [String!]
  ownerAddressNotIn: [String!]
  ownerAddressGT: String
  ownerAddressGTE: String
  ownerAddressLT: String
  ownerAddressLTE: String
  ownerAddressContains: String
  ownerAddressHasPrefix: String
  ownerAddressHasSuffix: String
  ownerAddressEqualFold: String
  ownerAddressContainsFold: String
  """owner_address_lat field predicates"""
  ownerAddressLat: Float
  ownerAddressLatNEQ: Float
  ownerAddressLatIn: [Float!]
  ownerAddressLatNotIn: [Float!]
  ownerAddressLatGT: Float
  ownerAddressLatGTE: Float
  ownerAddressLatLT: Float
  ownerAddressLatLTE: Float
  ownerAddressLatIsNil: Boolean
  ownerAddressLatNotNil: Boolean
  """owner_address_lng field predicates"""
  ownerAddressLng: Float
  ownerAddressLngNEQ: Float
  ownerAddressLngIn: [Float!]
  ownerAddressLngNotIn: [Float!]
  ownerAddressLngGT: Float
  ownerAddressLngGTE: Float
  ownerAddressLngLT: Float
  ownerAddressLngLTE: Float
  ownerAddressLngIsNil: Boolean
  ownerAddressLngNotNil: Boolean
  """special_note field predicates"""
  specialNote: String
  specialNoteNEQ: String
  specialNoteIn: [String!]
  specialNoteNotIn: [String!]
  specialNoteGT: String
  specialNoteGTE: String
  specialNoteLT: String
  specialNoteLTE: String
  specialNoteContains: String
  specialNoteHasPrefix: String
  specialNoteHasSuffix: String
  specialNoteIsNil: Boolean
  specialNoteNotNil: Boolean
  specialNoteEqualFold: String
  specialNoteContainsFold: String
  """pkg field predicates"""
  pkg: String
  pkgNEQ: String
  pkgIn: [String!]
  pkgNotIn: [String!]
  pkgGT: String
  pkgGTE: String
  pkgLT: String
  pkgLTE: String
  pkgContains: String
  pkgHasPrefix: String
  pkgHasSuffix: String
  pkgEqualFold: String
  pkgContainsFold: String
  """pkg_description field predicates"""
  pkgDescription: String
  pkgDescriptionNEQ: String
  pkgDescriptionIn: [String!]
  pkgDescriptionNotIn: [String!]
  pkgDescriptionGT: String
  pkgDescriptionGTE: String
  pkgDescriptionLT: String
  pkgDescriptionLTE: String
  pkgDescriptionContains: String
  pkgDescriptionHasPrefix: String
  pkgDescriptionHasSuffix: String
  pkgDescriptionIsNil: Boolean
  pkgDescriptionNotNil: Boolean
  pkgDescriptionEqualFold: String
  pkgDescriptionContainsFold: String
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """approval field predicates"""
  approval: Approval
  approvalNEQ: Approval
  approvalIn: [Approval!]
  approvalNotIn: [Approval!]
  """approval_at field predicates"""
  approvalAt: Time
  approvalAtNEQ: Time
  approvalAtIn: [Time!]
  approvalAtNotIn: [Time!]
  approvalAtGT: Time
  approvalAtGTE: Time
  approvalAtLT: Time
  approvalAtLTE: Time
  """deny_reason field predicates"""
  denyReason: String
  denyReasonNEQ: String
  denyReasonIn: [String!]
  denyReasonNotIn: [String!]
  denyReasonGT: String
  denyReasonGTE: String
  denyReasonLT: String
  denyReasonLTE: String
  denyReasonContains: String
  denyReasonHasPrefix: String
  denyReasonHasSuffix: String
  denyReasonIsNil: Boolean
  denyReasonNotNil: Boolean
  denyReasonEqualFold: String
  denyReasonContainsFold: String
  """status field predicates"""
  status: InstallationStatus
  statusNEQ: InstallationStatus
  statusIn: [InstallationStatus!]
  statusNotIn: [InstallationStatus!]
  """status_at field predicates"""
  statusAt: Time
  statusAtNEQ: Time
  statusAtIn: [Time!]
  statusAtNotIn: [Time!]
  statusAtGT: Time
  statusAtGTE: Time
  statusAtLT: Time
  statusAtLTE: Time
  """items edge predicates"""
  hasItems: Boolean
  hasItemsWith: [InstallationJobItemWhereInput!]
  """progress_history edge predicates"""
  hasProgressHistory: Boolean
  hasProgressHistoryWith: [InstallationJobProgressWhereInput!]
  """requesting_partner edge predicates"""
  hasRequestingPartner: Boolean
  hasRequestingPartnerWith: [PartnerWhereInput!]
  """assigned_partner edge predicates"""
  hasAssignedPartner: Boolean
  hasAssignedPartnerWith: [PartnerWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """sales_rep edge predicates"""
  hasSalesRep: Boolean
  hasSalesRepWith: [UserWhereInput!]
}
"""
JobActivityWhereInput is used for filtering JobActivity objects.
Input was generated by ent.
"""
input JobActivityWhereInput {
  not: JobActivityWhereInput
  and: [JobActivityWhereInput!]
  or: [JobActivityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
}
"""
JobAssignmentHistoryWhereInput is used for filtering JobAssignmentHistory objects.
Input was generated by ent.
"""
input JobAssignmentHistoryWhereInput {
  not: JobAssignmentHistoryWhereInput
  and: [JobAssignmentHistoryWhereInput!]
  or: [JobAssignmentHistoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """status field predicates"""
  status: JobAssignmentStatus
  statusNEQ: JobAssignmentStatus
  statusIn: [JobAssignmentStatus!]
  statusNotIn: [JobAssignmentStatus!]
  """Note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
JobDocURLWhereInput is used for filtering JobDocURL objects.
Input was generated by ent.
"""
input JobDocURLWhereInput {
  not: JobDocURLWhereInput
  and: [JobDocURLWhereInput!]
  or: [JobDocURLWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """type field predicates"""
  type: JobDocUrlType
  typeNEQ: JobDocUrlType
  typeIn: [JobDocUrlType!]
  typeNotIn: [JobDocUrlType!]
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
"""
JobNoteWhereInput is used for filtering JobNote objects.
Input was generated by ent.
"""
input JobNoteWhereInput {
  not: JobNoteWhereInput
  and: [JobNoteWhereInput!]
  or: [JobNoteWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteEqualFold: String
  noteContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
JobProgressHistoryWhereInput is used for filtering JobProgressHistory objects.
Input was generated by ent.
"""
input JobProgressHistoryWhereInput {
  not: JobProgressHistoryWhereInput
  and: [JobProgressHistoryWhereInput!]
  or: [JobProgressHistoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """status field predicates"""
  status: JobProgress
  statusNEQ: JobProgress
  statusIn: [JobProgress!]
  statusNotIn: [JobProgress!]
  """complete field predicates"""
  complete: Boolean
  completeNEQ: Boolean
  completeIsNil: Boolean
  completeNotNil: Boolean
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api_user edge predicates"""
  hasCreatorAPIUser: Boolean
  hasCreatorAPIUserWith: [ApiUserWhereInput!]
}
"""
JobWhereInput is used for filtering Job objects.
Input was generated by ent.
"""
input JobWhereInput {
  not: JobWhereInput
  and: [JobWhereInput!]
  or: [JobWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """progress field predicates"""
  progress: JobProgress
  progressNEQ: JobProgress
  progressIn: [JobProgress!]
  progressNotIn: [JobProgress!]
  progressIsNil: Boolean
  progressNotNil: Boolean
  """progress_at field predicates"""
  progressAt: Time
  progressAtNEQ: Time
  progressAtIn: [Time!]
  progressAtNotIn: [Time!]
  progressAtGT: Time
  progressAtGTE: Time
  progressAtLT: Time
  progressAtLTE: Time
  progressAtIsNil: Boolean
  progressAtNotNil: Boolean
  """progress_flag_at field predicates"""
  progressFlagAt: Time
  progressFlagAtNEQ: Time
  progressFlagAtIn: [Time!]
  progressFlagAtNotIn: [Time!]
  progressFlagAtGT: Time
  progressFlagAtGTE: Time
  progressFlagAtLT: Time
  progressFlagAtLTE: Time
  progressFlagAtIsNil: Boolean
  progressFlagAtNotNil: Boolean
  """region_id field predicates"""
  regionID: Int
  regionIDNEQ: Int
  regionIDIn: [Int!]
  regionIDNotIn: [Int!]
  regionIDGT: Int
  regionIDGTE: Int
  regionIDLT: Int
  regionIDLTE: Int
  regionIDIsNil: Boolean
  regionIDNotNil: Boolean
  """company_ref_id field predicates"""
  companyRefID: String
  companyRefIDNEQ: String
  companyRefIDIn: [String!]
  companyRefIDNotIn: [String!]
  companyRefIDGT: String
  companyRefIDGTE: String
  companyRefIDLT: String
  companyRefIDLTE: String
  companyRefIDContains: String
  companyRefIDHasPrefix: String
  companyRefIDHasSuffix: String
  companyRefIDIsNil: Boolean
  companyRefIDNotNil: Boolean
  companyRefIDEqualFold: String
  companyRefIDContainsFold: String
  """company_name field predicates"""
  companyName: String
  companyNameNEQ: String
  companyNameIn: [String!]
  companyNameNotIn: [String!]
  companyNameGT: String
  companyNameGTE: String
  companyNameLT: String
  companyNameLTE: String
  companyNameContains: String
  companyNameHasPrefix: String
  companyNameHasSuffix: String
  companyNameIsNil: Boolean
  companyNameNotNil: Boolean
  companyNameEqualFold: String
  companyNameContainsFold: String
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """work_order_price field predicates"""
  workOrderPrice: Float
  workOrderPriceNEQ: Float
  workOrderPriceIn: [Float!]
  workOrderPriceNotIn: [Float!]
  workOrderPriceGT: Float
  workOrderPriceGTE: Float
  workOrderPriceLT: Float
  workOrderPriceLTE: Float
  """contract_price field predicates"""
  contractPrice: Float
  contractPriceNEQ: Float
  contractPriceIn: [Float!]
  contractPriceNotIn: [Float!]
  contractPriceGT: Float
  contractPriceGTE: Float
  contractPriceLT: Float
  contractPriceLTE: Float
  contractPriceIsNil: Boolean
  contractPriceNotNil: Boolean
  """change_order_price field predicates"""
  changeOrderPrice: Float
  changeOrderPriceNEQ: Float
  changeOrderPriceIn: [Float!]
  changeOrderPriceNotIn: [Float!]
  changeOrderPriceGT: Float
  changeOrderPriceGTE: Float
  changeOrderPriceLT: Float
  changeOrderPriceLTE: Float
  changeOrderPriceIsNil: Boolean
  changeOrderPriceNotNil: Boolean
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """shingle_color field predicates"""
  shingleColor: String
  shingleColorNEQ: String
  shingleColorIn: [String!]
  shingleColorNotIn: [String!]
  shingleColorGT: String
  shingleColorGTE: String
  shingleColorLT: String
  shingleColorLTE: String
  shingleColorContains: String
  shingleColorHasPrefix: String
  shingleColorHasSuffix: String
  shingleColorIsNil: Boolean
  shingleColorNotNil: Boolean
  shingleColorEqualFold: String
  shingleColorContainsFold: String
  """permit_required field predicates"""
  permitRequired: Boolean
  permitRequiredNEQ: Boolean
  permitRequiredIsNil: Boolean
  permitRequiredNotNil: Boolean
  """inspection_required field predicates"""
  inspectionRequired: Boolean
  inspectionRequiredNEQ: Boolean
  inspectionRequiredIsNil: Boolean
  inspectionRequiredNotNil: Boolean
  """inspection_date field predicates"""
  inspectionDate: Time
  inspectionDateNEQ: Time
  inspectionDateIn: [Time!]
  inspectionDateNotIn: [Time!]
  inspectionDateGT: Time
  inspectionDateGTE: Time
  inspectionDateLT: Time
  inspectionDateLTE: Time
  inspectionDateIsNil: Boolean
  inspectionDateNotNil: Boolean
  """progress_inspection_date field predicates"""
  progressInspectionDate: Time
  progressInspectionDateNEQ: Time
  progressInspectionDateIn: [Time!]
  progressInspectionDateNotIn: [Time!]
  progressInspectionDateGT: Time
  progressInspectionDateGTE: Time
  progressInspectionDateLT: Time
  progressInspectionDateLTE: Time
  progressInspectionDateIsNil: Boolean
  progressInspectionDateNotNil: Boolean
  """install_date field predicates"""
  installDate: Time
  installDateNEQ: Time
  installDateIn: [Time!]
  installDateNotIn: [Time!]
  installDateGT: Time
  installDateGTE: Time
  installDateLT: Time
  installDateLTE: Time
  installDateIsNil: Boolean
  installDateNotNil: Boolean
  """completion_date field predicates"""
  completionDate: Time
  completionDateNEQ: Time
  completionDateIn: [Time!]
  completionDateNotIn: [Time!]
  completionDateGT: Time
  completionDateGTE: Time
  completionDateLT: Time
  completionDateLTE: Time
  completionDateIsNil: Boolean
  completionDateNotNil: Boolean
  """material_delivery_date field predicates"""
  materialDeliveryDate: Time
  materialDeliveryDateNEQ: Time
  materialDeliveryDateIn: [Time!]
  materialDeliveryDateNotIn: [Time!]
  materialDeliveryDateGT: Time
  materialDeliveryDateGTE: Time
  materialDeliveryDateLT: Time
  materialDeliveryDateLTE: Time
  materialDeliveryDateIsNil: Boolean
  materialDeliveryDateNotNil: Boolean
  """agree field predicates"""
  agree: Boolean
  agreeNEQ: Boolean
  agreeIsNil: Boolean
  agreeNotNil: Boolean
  """agree_at field predicates"""
  agreeAt: Time
  agreeAtNEQ: Time
  agreeAtIn: [Time!]
  agreeAtNotIn: [Time!]
  agreeAtGT: Time
  agreeAtGTE: Time
  agreeAtLT: Time
  agreeAtLTE: Time
  agreeAtIsNil: Boolean
  agreeAtNotNil: Boolean
  """po_number field predicates"""
  poNumber: String
  poNumberNEQ: String
  poNumberIn: [String!]
  poNumberNotIn: [String!]
  poNumberGT: String
  poNumberGTE: String
  poNumberLT: String
  poNumberLTE: String
  poNumberContains: String
  poNumberHasPrefix: String
  poNumberHasSuffix: String
  poNumberIsNil: Boolean
  poNumberNotNil: Boolean
  poNumberEqualFold: String
  poNumberContainsFold: String
  """roofing_partner_assigned_at field predicates"""
  roofingPartnerAssignedAt: Time
  roofingPartnerAssignedAtNEQ: Time
  roofingPartnerAssignedAtIn: [Time!]
  roofingPartnerAssignedAtNotIn: [Time!]
  roofingPartnerAssignedAtGT: Time
  roofingPartnerAssignedAtGTE: Time
  roofingPartnerAssignedAtLT: Time
  roofingPartnerAssignedAtLTE: Time
  roofingPartnerAssignedAtIsNil: Boolean
  roofingPartnerAssignedAtNotNil: Boolean
  """roofing_partner_flag_at field predicates"""
  roofingPartnerFlagAt: Time
  roofingPartnerFlagAtNEQ: Time
  roofingPartnerFlagAtIn: [Time!]
  roofingPartnerFlagAtNotIn: [Time!]
  roofingPartnerFlagAtGT: Time
  roofingPartnerFlagAtGTE: Time
  roofingPartnerFlagAtLT: Time
  roofingPartnerFlagAtLTE: Time
  roofingPartnerFlagAtIsNil: Boolean
  roofingPartnerFlagAtNotNil: Boolean
  """payments edge predicates"""
  hasPayments: Boolean
  hasPaymentsWith: [PaymentWhereInput!]
  """activities edge predicates"""
  hasActivities: Boolean
  hasActivitiesWith: [JobActivityWhereInput!]
  """assignment_history edge predicates"""
  hasAssignmentHistory: Boolean
  hasAssignmentHistoryWith: [JobAssignmentHistoryWhereInput!]
  """progress_history edge predicates"""
  hasProgressHistory: Boolean
  hasProgressHistoryWith: [JobProgressHistoryWhereInput!]
  """notes edge predicates"""
  hasNotes: Boolean
  hasNotesWith: [JobNoteWhereInput!]
  """doc_urls edge predicates"""
  hasDocUrls: Boolean
  hasDocUrlsWith: [JobDocURLWhereInput!]
  """estimate edge predicates"""
  hasEstimate: Boolean
  hasEstimateWith: [EstimateWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """home_owner edge predicates"""
  hasHomeOwner: Boolean
  hasHomeOwnerWith: [HomeOwnerWhereInput!]
  """sales_rep edge predicates"""
  hasSalesRep: Boolean
  hasSalesRepWith: [UserWhereInput!]
  """requester edge predicates"""
  hasRequester: Boolean
  hasRequesterWith: [PartnerWhereInput!]
  """roofing_partner edge predicates"""
  hasRoofingPartner: Boolean
  hasRoofingPartnerWith: [PartnerWhereInput!]
  """integration_partner edge predicates"""
  hasIntegrationPartner: Boolean
  hasIntegrationPartnerWith: [PartnerWhereInput!]
  """epc_partner edge predicates"""
  hasEpcPartner: Boolean
  hasEpcPartnerWith: [PartnerWhereInput!]
  """epc edge predicates"""
  hasEpc: Boolean
  hasEpcWith: [OptionListWhereInput!]
  """estimate_pdf edge predicates"""
  hasEstimatePdf: Boolean
  hasEstimatePdfWith: [DocumentWhereInput!]
}
"""
NotifySettingWhereInput is used for filtering NotifySetting objects.
Input was generated by ent.
"""
input NotifySettingWhereInput {
  not: NotifySettingWhereInput
  and: [NotifySettingWhereInput!]
  or: [NotifySettingWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """topic_id field predicates"""
  topicID: String
  topicIDNEQ: String
  topicIDIn: [String!]
  topicIDNotIn: [String!]
  topicIDGT: String
  topicIDGTE: String
  topicIDLT: String
  topicIDLTE: String
  topicIDContains: String
  topicIDHasPrefix: String
  topicIDHasSuffix: String
  topicIDEqualFold: String
  topicIDContainsFold: String
  """receive_email field predicates"""
  receiveEmail: Boolean
  receiveEmailNEQ: Boolean
  receiveEmailIsNil: Boolean
  receiveEmailNotNil: Boolean
  """receive_sms field predicates"""
  receiveSms: Boolean
  receiveSmsNEQ: Boolean
  receiveSmsIsNil: Boolean
  receiveSmsNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
OptionListWhereInput is used for filtering OptionList objects.
Input was generated by ent.
"""
input OptionListWhereInput {
  not: OptionListWhereInput
  and: [OptionListWhereInput!]
  or: [OptionListWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """type field predicates"""
  type: OptionListType
  typeNEQ: OptionListType
  typeIn: [OptionListType!]
  typeNotIn: [OptionListType!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """order field predicates"""
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """finance_options edge predicates"""
  hasFinanceOptions: Boolean
  hasFinanceOptionsWith: [PartnerWhereInput!]
  """epc_options edge predicates"""
  hasEpcOptions: Boolean
  hasEpcOptionsWith: [PartnerWhereInput!]
  """epc edge predicates"""
  hasEpc: Boolean
  hasEpcWith: [JobWhereInput!]
}
"""
PartnerActivityWhereInput is used for filtering PartnerActivity objects.
Input was generated by ent.
"""
input PartnerActivityWhereInput {
  not: PartnerActivityWhereInput
  and: [PartnerActivityWhereInput!]
  or: [PartnerActivityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
}
"""
PartnerContactWhereInput is used for filtering PartnerContact objects.
Input was generated by ent.
"""
input PartnerContactWhereInput {
  not: PartnerContactWhereInput
  and: [PartnerContactWhereInput!]
  or: [PartnerContactWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """role field predicates"""
  role: PartnerContactRole
  roleNEQ: PartnerContactRole
  roleIn: [PartnerContactRole!]
  roleNotIn: [PartnerContactRole!]
  """type field predicates"""
  type: PartnerContactType
  typeNEQ: PartnerContactType
  typeIn: [PartnerContactType!]
  typeNotIn: [PartnerContactType!]
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """invoicing_email field predicates"""
  invoicingEmail: String
  invoicingEmailNEQ: String
  invoicingEmailIn: [String!]
  invoicingEmailNotIn: [String!]
  invoicingEmailGT: String
  invoicingEmailGTE: String
  invoicingEmailLT: String
  invoicingEmailLTE: String
  invoicingEmailContains: String
  invoicingEmailHasPrefix: String
  invoicingEmailHasSuffix: String
  invoicingEmailIsNil: Boolean
  invoicingEmailNotNil: Boolean
  invoicingEmailEqualFold: String
  invoicingEmailContainsFold: String
}
"""
PartnerServiceCityWhereInput is used for filtering PartnerServiceCity objects.
Input was generated by ent.
"""
input PartnerServiceCityWhereInput {
  not: PartnerServiceCityWhereInput
  and: [PartnerServiceCityWhereInput!]
  or: [PartnerServiceCityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """postal_id field predicates"""
  postalID: String
  postalIDNEQ: String
  postalIDIn: [String!]
  postalIDNotIn: [String!]
  postalIDGT: String
  postalIDGTE: String
  postalIDLT: String
  postalIDLTE: String
  postalIDContains: String
  postalIDHasPrefix: String
  postalIDHasSuffix: String
  postalIDEqualFold: String
  postalIDContainsFold: String
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """naics_code field predicates"""
  naicsCode: Int
  naicsCodeNEQ: Int
  naicsCodeIn: [Int!]
  naicsCodeNotIn: [Int!]
  naicsCodeGT: Int
  naicsCodeGTE: Int
  naicsCodeLT: Int
  naicsCodeLTE: Int
  """license_no field predicates"""
  licenseNo: String
  licenseNoNEQ: String
  licenseNoIn: [String!]
  licenseNoNotIn: [String!]
  licenseNoGT: String
  licenseNoGTE: String
  licenseNoLT: String
  licenseNoLTE: String
  licenseNoContains: String
  licenseNoHasPrefix: String
  licenseNoHasSuffix: String
  licenseNoIsNil: Boolean
  licenseNoNotNil: Boolean
  licenseNoEqualFold: String
  licenseNoContainsFold: String
  """proof_doc_id field predicates"""
  proofDocID: String
  proofDocIDNEQ: String
  proofDocIDIn: [String!]
  proofDocIDNotIn: [String!]
  proofDocIDGT: String
  proofDocIDGTE: String
  proofDocIDLT: String
  proofDocIDLTE: String
  proofDocIDContains: String
  proofDocIDHasPrefix: String
  proofDocIDHasSuffix: String
  proofDocIDIsNil: Boolean
  proofDocIDNotNil: Boolean
  proofDocIDEqualFold: String
  proofDocIDContainsFold: String
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
PartnerServiceStateWhereInput is used for filtering PartnerServiceState objects.
Input was generated by ent.
"""
input PartnerServiceStateWhereInput {
  not: PartnerServiceStateWhereInput
  and: [PartnerServiceStateWhereInput!]
  or: [PartnerServiceStateWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateEqualFold: String
  stateContainsFold: String
  """license_no field predicates"""
  licenseNo: String
  licenseNoNEQ: String
  licenseNoIn: [String!]
  licenseNoNotIn: [String!]
  licenseNoGT: String
  licenseNoGTE: String
  licenseNoLT: String
  licenseNoLTE: String
  licenseNoContains: String
  licenseNoHasPrefix: String
  licenseNoHasSuffix: String
  licenseNoIsNil: Boolean
  licenseNoNotNil: Boolean
  licenseNoEqualFold: String
  licenseNoContainsFold: String
  """license_exp_date field predicates"""
  licenseExpDate: Time
  licenseExpDateNEQ: Time
  licenseExpDateIn: [Time!]
  licenseExpDateNotIn: [Time!]
  licenseExpDateGT: Time
  licenseExpDateGTE: Time
  licenseExpDateLT: Time
  licenseExpDateLTE: Time
  licenseExpDateIsNil: Boolean
  licenseExpDateNotNil: Boolean
  """proof_doc_id field predicates"""
  proofDocID: String
  proofDocIDNEQ: String
  proofDocIDIn: [String!]
  proofDocIDNotIn: [String!]
  proofDocIDGT: String
  proofDocIDGTE: String
  proofDocIDLT: String
  proofDocIDLTE: String
  proofDocIDContains: String
  proofDocIDHasPrefix: String
  proofDocIDHasSuffix: String
  proofDocIDIsNil: Boolean
  proofDocIDNotNil: Boolean
  proofDocIDEqualFold: String
  proofDocIDContainsFold: String
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
PartnerServiceWhereInput is used for filtering PartnerService objects.
Input was generated by ent.
"""
input PartnerServiceWhereInput {
  not: PartnerServiceWhereInput
  and: [PartnerServiceWhereInput!]
  or: [PartnerServiceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """service_id field predicates"""
  serviceID: Int
  serviceIDNEQ: Int
  serviceIDIn: [Int!]
  serviceIDNotIn: [Int!]
  serviceIDGT: Int
  serviceIDGTE: Int
  serviceIDLT: Int
  serviceIDLTE: Int
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
PartnerTrainingVideoWhereInput is used for filtering PartnerTrainingVideo objects.
Input was generated by ent.
"""
input PartnerTrainingVideoWhereInput {
  not: PartnerTrainingVideoWhereInput
  and: [PartnerTrainingVideoWhereInput!]
  or: [PartnerTrainingVideoWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """video edge predicates"""
  hasVideo: Boolean
  hasVideoWith: [TrainingVideoWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
PartnerWhereInput is used for filtering Partner objects.
Input was generated by ent.
"""
input PartnerWhereInput {
  not: PartnerWhereInput
  and: [PartnerWhereInput!]
  or: [PartnerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """external_id field predicates"""
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """creator_id field predicates"""
  creatorID: ID
  creatorIDNEQ: ID
  creatorIDIn: [ID!]
  creatorIDNotIn: [ID!]
  creatorIDGT: ID
  creatorIDGTE: ID
  creatorIDLT: ID
  creatorIDLTE: ID
  creatorIDContains: ID
  creatorIDHasPrefix: ID
  creatorIDHasSuffix: ID
  creatorIDIsNil: Boolean
  creatorIDNotNil: Boolean
  creatorIDEqualFold: ID
  creatorIDContainsFold: ID
  """type field predicates"""
  type: PartnerType
  typeNEQ: PartnerType
  typeIn: [PartnerType!]
  typeNotIn: [PartnerType!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """website field predicates"""
  website: String
  websiteNEQ: String
  websiteIn: [String!]
  websiteNotIn: [String!]
  websiteGT: String
  websiteGTE: String
  websiteLT: String
  websiteLTE: String
  websiteContains: String
  websiteHasPrefix: String
  websiteHasSuffix: String
  websiteIsNil: Boolean
  websiteNotNil: Boolean
  websiteEqualFold: String
  websiteContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """latitude field predicates"""
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  latitudeIsNil: Boolean
  latitudeNotNil: Boolean
  """longitude field predicates"""
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  longitudeIsNil: Boolean
  longitudeNotNil: Boolean
  """is_nation_wide field predicates"""
  isNationWide: Boolean
  isNationWideNEQ: Boolean
  """crew_count field predicates"""
  crewCount: Int
  crewCountNEQ: Int
  crewCountIn: [Int!]
  crewCountNotIn: [Int!]
  crewCountGT: Int
  crewCountGTE: Int
  crewCountLT: Int
  crewCountLTE: Int
  """years_in_business field predicates"""
  yearsInBusiness: Int
  yearsInBusinessNEQ: Int
  yearsInBusinessIn: [Int!]
  yearsInBusinessNotIn: [Int!]
  yearsInBusinessGT: Int
  yearsInBusinessGTE: Int
  yearsInBusinessLT: Int
  yearsInBusinessLTE: Int
  yearsInBusinessIsNil: Boolean
  yearsInBusinessNotNil: Boolean
  """job_capacity field predicates"""
  jobCapacity: Int
  jobCapacityNEQ: Int
  jobCapacityIn: [Int!]
  jobCapacityNotIn: [Int!]
  jobCapacityGT: Int
  jobCapacityGTE: Int
  jobCapacityLT: Int
  jobCapacityLTE: Int
  """asphalt_lead_t field predicates"""
  asphaltLeadT: String
  asphaltLeadTNEQ: String
  asphaltLeadTIn: [String!]
  asphaltLeadTNotIn: [String!]
  asphaltLeadTGT: String
  asphaltLeadTGTE: String
  asphaltLeadTLT: String
  asphaltLeadTLTE: String
  asphaltLeadTContains: String
  asphaltLeadTHasPrefix: String
  asphaltLeadTHasSuffix: String
  asphaltLeadTIsNil: Boolean
  asphaltLeadTNotNil: Boolean
  asphaltLeadTEqualFold: String
  asphaltLeadTContainsFold: String
  """metal_lead_t field predicates"""
  metalLeadT: String
  metalLeadTNEQ: String
  metalLeadTIn: [String!]
  metalLeadTNotIn: [String!]
  metalLeadTGT: String
  metalLeadTGTE: String
  metalLeadTLT: String
  metalLeadTLTE: String
  metalLeadTContains: String
  metalLeadTHasPrefix: String
  metalLeadTHasSuffix: String
  metalLeadTIsNil: Boolean
  metalLeadTNotNil: Boolean
  metalLeadTEqualFold: String
  metalLeadTContainsFold: String
  """tile_lead_t field predicates"""
  tileLeadT: String
  tileLeadTNEQ: String
  tileLeadTIn: [String!]
  tileLeadTNotIn: [String!]
  tileLeadTGT: String
  tileLeadTGTE: String
  tileLeadTLT: String
  tileLeadTLTE: String
  tileLeadTContains: String
  tileLeadTHasPrefix: String
  tileLeadTHasSuffix: String
  tileLeadTIsNil: Boolean
  tileLeadTNotNil: Boolean
  tileLeadTEqualFold: String
  tileLeadTContainsFold: String
  """setup_steps_completed field predicates"""
  setupStepsCompleted: Int
  setupStepsCompletedNEQ: Int
  setupStepsCompletedIn: [Int!]
  setupStepsCompletedNotIn: [Int!]
  setupStepsCompletedGT: Int
  setupStepsCompletedGTE: Int
  setupStepsCompletedLT: Int
  setupStepsCompletedLTE: Int
  """sales_volume field predicates"""
  salesVolume: Int
  salesVolumeNEQ: Int
  salesVolumeIn: [Int!]
  salesVolumeNotIn: [Int!]
  salesVolumeGT: Int
  salesVolumeGTE: Int
  salesVolumeLT: Int
  salesVolumeLTE: Int
  salesVolumeIsNil: Boolean
  salesVolumeNotNil: Boolean
  """down_payment field predicates"""
  downPayment: Int
  downPaymentNEQ: Int
  downPaymentIn: [Int!]
  downPaymentNotIn: [Int!]
  downPaymentGT: Int
  downPaymentGTE: Int
  downPaymentLT: Int
  downPaymentLTE: Int
  downPaymentIsNil: Boolean
  downPaymentNotNil: Boolean
  """pif field predicates"""
  pif: Int
  pifNEQ: Int
  pifIn: [Int!]
  pifNotIn: [Int!]
  pifGT: Int
  pifGTE: Int
  pifLT: Int
  pifLTE: Int
  pifIsNil: Boolean
  pifNotNil: Boolean
  """install_in_house field predicates"""
  installInHouse: Boolean
  installInHouseNEQ: Boolean
  installInHouseIsNil: Boolean
  installInHouseNotNil: Boolean
  """status field predicates"""
  status: PartnerStatus
  statusNEQ: PartnerStatus
  statusIn: [PartnerStatus!]
  statusNotIn: [PartnerStatus!]
  """epc_status field predicates"""
  epcStatus: EPCStatus
  epcStatusNEQ: EPCStatus
  epcStatusIn: [EPCStatus!]
  epcStatusNotIn: [EPCStatus!]
  epcStatusIsNil: Boolean
  epcStatusNotNil: Boolean
  """requested_estimates edge predicates"""
  hasRequestedEstimates: Boolean
  hasRequestedEstimatesWith: [EstimateWhereInput!]
  """estimate_home_owners edge predicates"""
  hasEstimateHomeOwners: Boolean
  hasEstimateHomeOwnersWith: [HomeOwnerWhereInput!]
  """roofing_jobs edge predicates"""
  hasRoofingJobs: Boolean
  hasRoofingJobsWith: [JobWhereInput!]
  """integration_jobs edge predicates"""
  hasIntegrationJobs: Boolean
  hasIntegrationJobsWith: [JobWhereInput!]
  """epc_jobs edge predicates"""
  hasEpcJobs: Boolean
  hasEpcJobsWith: [JobWhereInput!]
  """job_requests edge predicates"""
  hasJobRequests: Boolean
  hasJobRequestsWith: [JobWhereInput!]
  """activities edge predicates"""
  hasActivities: Boolean
  hasActivitiesWith: [PartnerActivityWhereInput!]
  """job_assignment_history edge predicates"""
  hasJobAssignmentHistory: Boolean
  hasJobAssignmentHistoryWith: [JobAssignmentHistoryWhereInput!]
  """requested_installation_jobs edge predicates"""
  hasRequestedInstallationJobs: Boolean
  hasRequestedInstallationJobsWith: [InstallationJobWhereInput!]
  """assigned_installation_jobs edge predicates"""
  hasAssignedInstallationJobs: Boolean
  hasAssignedInstallationJobsWith: [InstallationJobWhereInput!]
  """contacts edge predicates"""
  hasContacts: Boolean
  hasContactsWith: [UserWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
  """services edge predicates"""
  hasServices: Boolean
  hasServicesWith: [PartnerServiceWhereInput!]
  """service_states edge predicates"""
  hasServiceStates: Boolean
  hasServiceStatesWith: [PartnerServiceStateWhereInput!]
  """service_cities edge predicates"""
  hasServiceCities: Boolean
  hasServiceCitiesWith: [PartnerServiceCityWhereInput!]
  """training_videos edge predicates"""
  hasTrainingVideos: Boolean
  hasTrainingVideosWith: [PartnerTrainingVideoWhereInput!]
  """contact_us_requests edge predicates"""
  hasContactUsRequests: Boolean
  hasContactUsRequestsWith: [ContactUsWhereInput!]
  """surveys edge predicates"""
  hasSurveys: Boolean
  hasSurveysWith: [SurveyWhereInput!]
  """sessions edge predicates"""
  hasSessions: Boolean
  hasSessionsWith: [UserSessionWhereInput!]
  """job_notes edge predicates"""
  hasJobNotes: Boolean
  hasJobNotesWith: [JobNoteWhereInput!]
  """channels edge predicates"""
  hasChannels: Boolean
  hasChannelsWith: [ChannelSubWhereInput!]
  """finance_options edge predicates"""
  hasFinanceOptions: Boolean
  hasFinanceOptionsWith: [OptionListWhereInput!]
  """epc_options edge predicates"""
  hasEpcOptions: Boolean
  hasEpcOptionsWith: [OptionListWhereInput!]
  """partner_contacts edge predicates"""
  hasPartnerContacts: Boolean
  hasPartnerContactsWith: [PartnerContactWhereInput!]
}
"""
PaymentWhereInput is used for filtering Payment objects.
Input was generated by ent.
"""
input PaymentWhereInput {
  not: PaymentWhereInput
  and: [PaymentWhereInput!]
  or: [PaymentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """amount field predicates"""
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float
  """status_id field predicates"""
  statusID: Int
  statusIDNEQ: Int
  statusIDIn: [Int!]
  statusIDNotIn: [Int!]
  statusIDGT: Int
  statusIDGTE: Int
  statusIDLT: Int
  statusIDLTE: Int
  """job edge predicates"""
  hasJob: Boolean
  hasJobWith: [JobWhereInput!]
}
"""
PostalCodeWhereInput is used for filtering PostalCode objects.
Input was generated by ent.
"""
input PostalCodeWhereInput {
  not: PostalCodeWhereInput
  and: [PostalCodeWhereInput!]
  or: [PostalCodeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """city field predicates"""
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateEqualFold: String
  stateContainsFold: String
  """state_abr field predicates"""
  stateAbr: String
  stateAbrNEQ: String
  stateAbrIn: [String!]
  stateAbrNotIn: [String!]
  stateAbrGT: String
  stateAbrGTE: String
  stateAbrLT: String
  stateAbrLTE: String
  stateAbrContains: String
  stateAbrHasPrefix: String
  stateAbrHasSuffix: String
  stateAbrEqualFold: String
  stateAbrContainsFold: String
  """region_id field predicates"""
  regionID: Int
  regionIDNEQ: Int
  regionIDIn: [Int!]
  regionIDNotIn: [Int!]
  regionIDGT: Int
  regionIDGTE: Int
  regionIDLT: Int
  regionIDLTE: Int
  """latitude field predicates"""
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  """longitude field predicates"""
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  """accuracy field predicates"""
  accuracy: Int
  accuracyNEQ: Int
  accuracyIn: [Int!]
  accuracyNotIn: [Int!]
  accuracyGT: Int
  accuracyGTE: Int
  accuracyLT: Int
  accuracyLTE: Int
  """service_area field predicates"""
  serviceArea: Boolean
  serviceAreaNEQ: Boolean
  """pricing edge predicates"""
  hasPricing: Boolean
  hasPricingWith: [PricingWhereInput!]
}
"""
PricingWhereInput is used for filtering Pricing objects.
Input was generated by ent.
"""
input PricingWhereInput {
  not: PricingWhereInput
  and: [PricingWhereInput!]
  or: [PricingWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """postal_country field predicates"""
  postalCountry: String
  postalCountryNEQ: String
  postalCountryIn: [String!]
  postalCountryNotIn: [String!]
  postalCountryGT: String
  postalCountryGTE: String
  postalCountryLT: String
  postalCountryLTE: String
  postalCountryContains: String
  postalCountryHasPrefix: String
  postalCountryHasSuffix: String
  postalCountryEqualFold: String
  postalCountryContainsFold: String
  """postal_code field predicates"""
  postalCode: String
  postalCodeNEQ: String
  postalCodeIn: [String!]
  postalCodeNotIn: [String!]
  postalCodeGT: String
  postalCodeGTE: String
  postalCodeLT: String
  postalCodeLTE: String
  postalCodeContains: String
  postalCodeHasPrefix: String
  postalCodeHasSuffix: String
  postalCodeEqualFold: String
  postalCodeContainsFold: String
  """product_id field predicates"""
  productID: Int
  productIDNEQ: Int
  productIDIn: [Int!]
  productIDNotIn: [Int!]
  productIDGT: Int
  productIDGTE: Int
  productIDLT: Int
  productIDLTE: Int
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """price_per field predicates"""
  pricePer: String
  pricePerNEQ: String
  pricePerIn: [String!]
  pricePerNotIn: [String!]
  pricePerGT: String
  pricePerGTE: String
  pricePerLT: String
  pricePerLTE: String
  pricePerContains: String
  pricePerHasPrefix: String
  pricePerHasSuffix: String
  pricePerEqualFold: String
  pricePerContainsFold: String
  """postal edge predicates"""
  hasPostal: Boolean
  hasPostalWith: [PostalCodeWhereInput!]
}
"""
ProductPackageWhereInput is used for filtering ProductPackage objects.
Input was generated by ent.
"""
input ProductPackageWhereInput {
  not: ProductPackageWhereInput
  and: [ProductPackageWhereInput!]
  or: [ProductPackageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """type field predicates"""
  type: ProductType
  typeNEQ: ProductType
  typeIn: [ProductType!]
  typeNotIn: [ProductType!]
  """sold_as field predicates"""
  soldAs: SoldAs
  soldAsNEQ: SoldAs
  soldAsIn: [SoldAs!]
  soldAsNotIn: [SoldAs!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """discontinued field predicates"""
  discontinued: Boolean
  discontinuedNEQ: Boolean
  discontinuedIsNil: Boolean
  discontinuedNotNil: Boolean
  """items edge predicates"""
  hasItems: Boolean
  hasItemsWith: [ProductWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """type field predicates"""
  type: ProductType
  typeNEQ: ProductType
  typeIn: [ProductType!]
  typeNotIn: [ProductType!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """special_note field predicates"""
  specialNote: String
  specialNoteNEQ: String
  specialNoteIn: [String!]
  specialNoteNotIn: [String!]
  specialNoteGT: String
  specialNoteGTE: String
  specialNoteLT: String
  specialNoteLTE: String
  specialNoteContains: String
  specialNoteHasPrefix: String
  specialNoteHasSuffix: String
  specialNoteIsNil: Boolean
  specialNoteNotNil: Boolean
  specialNoteEqualFold: String
  specialNoteContainsFold: String
  """unit_price field predicates"""
  unitPrice: Float
  unitPriceNEQ: Float
  unitPriceIn: [Float!]
  unitPriceNotIn: [Float!]
  unitPriceGT: Float
  unitPriceGTE: Float
  unitPriceLT: Float
  unitPriceLTE: Float
  """units_in_stock field predicates"""
  unitsInStock: Int
  unitsInStockNEQ: Int
  unitsInStockIn: [Int!]
  unitsInStockNotIn: [Int!]
  unitsInStockGT: Int
  unitsInStockGTE: Int
  unitsInStockLT: Int
  unitsInStockLTE: Int
  unitsInStockIsNil: Boolean
  unitsInStockNotNil: Boolean
  """units_on_order field predicates"""
  unitsOnOrder: Int
  unitsOnOrderNEQ: Int
  unitsOnOrderIn: [Int!]
  unitsOnOrderNotIn: [Int!]
  unitsOnOrderGT: Int
  unitsOnOrderGTE: Int
  unitsOnOrderLT: Int
  unitsOnOrderLTE: Int
  unitsOnOrderIsNil: Boolean
  unitsOnOrderNotNil: Boolean
  """discontinued field predicates"""
  discontinued: Boolean
  discontinuedNEQ: Boolean
  discontinuedIsNil: Boolean
  discontinuedNotNil: Boolean
  """package edge predicates"""
  hasPackage: Boolean
  hasPackageWith: [ProductPackageWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """image edge predicates"""
  hasImage: Boolean
  hasImageWith: [DocumentWhereInput!]
}
"""
SurveyProgressWhereInput is used for filtering SurveyProgress objects.
Input was generated by ent.
"""
input SurveyProgressWhereInput {
  not: SurveyProgressWhereInput
  and: [SurveyProgressWhereInput!]
  or: [SurveyProgressWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """status field predicates"""
  status: SurveyProgress
  statusNEQ: SurveyProgress
  statusIn: [SurveyProgress!]
  statusNotIn: [SurveyProgress!]
  """complete field predicates"""
  complete: Boolean
  completeNEQ: Boolean
  completeIsNil: Boolean
  completeNotNil: Boolean
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """survey edge predicates"""
  hasSurvey: Boolean
  hasSurveyWith: [SurveyWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
}
"""
SurveyWhereInput is used for filtering Survey objects.
Input was generated by ent.
"""
input SurveyWhereInput {
  not: SurveyWhereInput
  and: [SurveyWhereInput!]
  or: [SurveyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """date field predicates"""
  date: String
  dateNEQ: String
  dateIn: [String!]
  dateNotIn: [String!]
  dateGT: String
  dateGTE: String
  dateLT: String
  dateLTE: String
  dateContains: String
  dateHasPrefix: String
  dateHasSuffix: String
  dateEqualFold: String
  dateContainsFold: String
  """slot field predicates"""
  slot: String
  slotNEQ: String
  slotIn: [String!]
  slotNotIn: [String!]
  slotGT: String
  slotGTE: String
  slotLT: String
  slotLTE: String
  slotContains: String
  slotHasPrefix: String
  slotHasSuffix: String
  slotEqualFold: String
  slotContainsFold: String
  """slot_id field predicates"""
  slotID: String
  slotIDNEQ: String
  slotIDIn: [String!]
  slotIDNotIn: [String!]
  slotIDGT: String
  slotIDGTE: String
  slotIDLT: String
  slotIDLTE: String
  slotIDContains: String
  slotIDHasPrefix: String
  slotIDHasSuffix: String
  slotIDEqualFold: String
  slotIDContainsFold: String
  """from field predicates"""
  from: Time
  fromNEQ: Time
  fromIn: [Time!]
  fromNotIn: [Time!]
  fromGT: Time
  fromGTE: Time
  fromLT: Time
  fromLTE: Time
  """to field predicates"""
  to: Time
  toNEQ: Time
  toIn: [Time!]
  toNotIn: [Time!]
  toGT: Time
  toGTE: Time
  toLT: Time
  toLTE: Time
  """until field predicates"""
  until: Time
  untilNEQ: Time
  untilIn: [Time!]
  untilNotIn: [Time!]
  untilGT: Time
  untilGTE: Time
  untilLT: Time
  untilLTE: Time
  untilIsNil: Boolean
  untilNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """notes field predicates"""
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """status field predicates"""
  status: SurveyStatus
  statusNEQ: SurveyStatus
  statusIn: [SurveyStatus!]
  statusNotIn: [SurveyStatus!]
  """progress field predicates"""
  progress: SurveyProgress
  progressNEQ: SurveyProgress
  progressIn: [SurveyProgress!]
  progressNotIn: [SurveyProgress!]
  progressIsNil: Boolean
  progressNotNil: Boolean
  """progress_at field predicates"""
  progressAt: Time
  progressAtNEQ: Time
  progressAtIn: [Time!]
  progressAtNotIn: [Time!]
  progressAtGT: Time
  progressAtGTE: Time
  progressAtLT: Time
  progressAtLTE: Time
  progressAtIsNil: Boolean
  progressAtNotNil: Boolean
  """progress_flag_at field predicates"""
  progressFlagAt: Time
  progressFlagAtNEQ: Time
  progressFlagAtIn: [Time!]
  progressFlagAtNotIn: [Time!]
  progressFlagAtGT: Time
  progressFlagAtGTE: Time
  progressFlagAtLT: Time
  progressFlagAtLTE: Time
  progressFlagAtIsNil: Boolean
  progressFlagAtNotNil: Boolean
  """progress_history edge predicates"""
  hasProgressHistory: Boolean
  hasProgressHistoryWith: [SurveyProgressWhereInput!]
  """created_by edge predicates"""
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
}
"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  not: TokenWhereInput
  and: [TokenWhereInput!]
  or: [TokenWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """confirmed_at field predicates"""
  confirmedAt: Time
  confirmedAtNEQ: Time
  confirmedAtIn: [Time!]
  confirmedAtNotIn: [Time!]
  confirmedAtGT: Time
  confirmedAtGTE: Time
  confirmedAtLT: Time
  confirmedAtLTE: Time
  confirmedAtIsNil: Boolean
  confirmedAtNotNil: Boolean
  """action field predicates"""
  action: String
  actionNEQ: String
  actionIn: [String!]
  actionNotIn: [String!]
  actionGT: String
  actionGTE: String
  actionLT: String
  actionLTE: String
  actionContains: String
  actionHasPrefix: String
  actionHasSuffix: String
  actionEqualFold: String
  actionContainsFold: String
}
"""
TrainingCourseWhereInput is used for filtering TrainingCourse objects.
Input was generated by ent.
"""
input TrainingCourseWhereInput {
  not: TrainingCourseWhereInput
  and: [TrainingCourseWhereInput!]
  or: [TrainingCourseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """training_videos edge predicates"""
  hasTrainingVideos: Boolean
  hasTrainingVideosWith: [TrainingVideoWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
}
"""
TrainingVideoWhereInput is used for filtering TrainingVideo objects.
Input was generated by ent.
"""
input TrainingVideoWhereInput {
  not: TrainingVideoWhereInput
  and: [TrainingVideoWhereInput!]
  or: [TrainingVideoWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """kind field predicates"""
  kind: TrainingType
  kindNEQ: TrainingType
  kindIn: [TrainingType!]
  kindNotIn: [TrainingType!]
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """training_videos edge predicates"""
  hasTrainingVideos: Boolean
  hasTrainingVideosWith: [PartnerTrainingVideoWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """course edge predicates"""
  hasCourse: Boolean
  hasCourseWith: [TrainingCourseWhereInput!]
  """poster edge predicates"""
  hasPoster: Boolean
  hasPosterWith: [DocumentWhereInput!]
  """video edge predicates"""
  hasVideo: Boolean
  hasVideoWith: [DocumentWhereInput!]
}
"""
UpdateJobInput is used for update Job object.
Input was generated by ent.
"""
input UpdateJobInput {
  updatedAt: Time
  progress: JobProgress
  clearProgress: Boolean
  progressAt: Time
  clearProgressAt: Boolean
  progressFlagAt: Time
  clearProgressFlagAt: Boolean
  regionID: Int
  clearRegionID: Boolean
  companyRefID: String
  clearCompanyRefID: Boolean
  companyName: String
  clearCompanyName: Boolean
  price: Float
  workOrderPrice: Float
  contractPrice: Float
  clearContractPrice: Boolean
  changeOrderPrice: Float
  clearChangeOrderPrice: Boolean
  note: String
  clearNote: Boolean
  shingleColor: String
  clearShingleColor: Boolean
  permitRequired: Boolean
  clearPermitRequired: Boolean
  """final inspection required flag"""
  inspectionRequired: Boolean
  clearInspectionRequired: Boolean
  """final inspection date"""
  inspectionDate: Time
  clearInspectionDate: Boolean
  progressInspectionDate: Time
  clearProgressInspectionDate: Boolean
  installDate: Time
  clearInstallDate: Boolean
  completionDate: Time
  clearCompletionDate: Boolean
  materialDeliveryDate: Time
  clearMaterialDeliveryDate: Boolean
  """solar approved job to production and agrees to the terms and conditions"""
  agree: Boolean
  clearAgree: Boolean
  agreeAt: Time
  clearAgreeAt: Boolean
  poNumber: String
  clearPoNumber: Boolean
  roofingPartnerAssignedAt: Time
  clearRoofingPartnerAssignedAt: Boolean
  roofingPartnerFlagAt: Time
  clearRoofingPartnerFlagAt: Boolean
  addPaymentIDs: [ID!]
  removePaymentIDs: [ID!]
  clearPayments: Boolean
  addActivityIDs: [ID!]
  removeActivityIDs: [ID!]
  clearActivities: Boolean
  addAssignmentHistoryIDs: [ID!]
  removeAssignmentHistoryIDs: [ID!]
  clearAssignmentHistory: Boolean
  addProgressHistoryIDs: [ID!]
  removeProgressHistoryIDs: [ID!]
  clearProgressHistory: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addDocURLIDs: [ID!]
  removeDocURLIDs: [ID!]
  clearDocUrls: Boolean
  estimateID: ID
  clearEstimate: Boolean
  creatorAPIID: ID
  clearCreatorAPI: Boolean
  creatorID: ID
  clearCreator: Boolean
  homeOwnerID: ID
  clearHomeOwner: Boolean
  salesRepID: ID
  clearSalesRep: Boolean
  requesterID: ID
  clearRequester: Boolean
  roofingPartnerID: ID
  clearRoofingPartner: Boolean
  integrationPartnerID: ID
  clearIntegrationPartner: Boolean
  epcPartnerID: ID
  clearEpcPartner: Boolean
  epcID: ID
  clearEpc: Boolean
  estimatePdfID: ID
  clearEstimatePdf: Boolean
}
"""
UpdatePartnerServiceCityInput is used for update PartnerServiceCity object.
Input was generated by ent.
"""
input UpdatePartnerServiceCityInput {
  updatedAt: Time
  postalID: String
  active: Boolean
  name: String
  naicsCode: Int
  licenseNo: String
  clearLicenseNo: Boolean
  proofDocID: String
  clearProofDocID: Boolean
  partnerID: ID
}
"""
UpdatePartnerServiceStateInput is used for update PartnerServiceState object.
Input was generated by ent.
"""
input UpdatePartnerServiceStateInput {
  updatedAt: Time
  country: String
  state: String
  licenseNo: String
  clearLicenseNo: Boolean
  licenseExpDate: Time
  clearLicenseExpDate: Boolean
  proofDocID: String
  clearProofDocID: Boolean
  partnerID: ID
}
"""
UserActivityWhereInput is used for filtering UserActivity objects.
Input was generated by ent.
"""
input UserActivityWhereInput {
  not: UserActivityWhereInput
  and: [UserActivityWhereInput!]
  or: [UserActivityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """creator_api edge predicates"""
  hasCreatorAPI: Boolean
  hasCreatorAPIWith: [ApiUserWhereInput!]
}
"""
UserAuthWhereInput is used for filtering UserAuth objects.
Input was generated by ent.
"""
input UserAuthWhereInput {
  not: UserAuthWhereInput
  and: [UserAuthWhereInput!]
  or: [UserAuthWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """provider_id field predicates"""
  providerID: Int
  providerIDNEQ: Int
  providerIDIn: [Int!]
  providerIDNotIn: [Int!]
  providerIDGT: Int
  providerIDGTE: Int
  providerIDLT: Int
  providerIDLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
UserSessionSocketWhereInput is used for filtering UserSessionSocket objects.
Input was generated by ent.
"""
input UserSessionSocketWhereInput {
  not: UserSessionSocketWhereInput
  and: [UserSessionSocketWhereInput!]
  or: [UserSessionSocketWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """session edge predicates"""
  hasSession: Boolean
  hasSessionWith: [UserSessionWhereInput!]
}
"""
UserSessionWhereInput is used for filtering UserSession objects.
Input was generated by ent.
"""
input UserSessionWhereInput {
  not: UserSessionWhereInput
  and: [UserSessionWhereInput!]
  or: [UserSessionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  """ip field predicates"""
  ip: String
  ipNEQ: String
  ipIn: [String!]
  ipNotIn: [String!]
  ipGT: String
  ipGTE: String
  ipLT: String
  ipLTE: String
  ipContains: String
  ipHasPrefix: String
  ipHasSuffix: String
  ipEqualFold: String
  ipContainsFold: String
  """sockets edge predicates"""
  hasSockets: Boolean
  hasSocketsWith: [UserSessionSocketWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
  """partner_contact edge predicates"""
  hasPartnerContact: Boolean
  hasPartnerContactWith: [PartnerContactWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """external_id field predicates"""
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """first_name field predicates"""
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """last_name field predicates"""
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """email_verified field predicates"""
  emailVerified: Boolean
  emailVerifiedNEQ: Boolean
  """phone_verified field predicates"""
  phoneVerified: Boolean
  phoneVerifiedNEQ: Boolean
  """picture field predicates"""
  picture: String
  pictureNEQ: String
  pictureIn: [String!]
  pictureNotIn: [String!]
  pictureGT: String
  pictureGTE: String
  pictureLT: String
  pictureLTE: String
  pictureContains: String
  pictureHasPrefix: String
  pictureHasSuffix: String
  pictureIsNil: Boolean
  pictureNotNil: Boolean
  pictureEqualFold: String
  pictureContainsFold: String
  """status field predicates"""
  status: AccountStatus
  statusNEQ: AccountStatus
  statusIn: [AccountStatus!]
  statusNotIn: [AccountStatus!]
  """role field predicates"""
  role: Role
  roleNEQ: Role
  roleIn: [Role!]
  roleNotIn: [Role!]
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """wrong_attempts field predicates"""
  wrongAttempts: Int
  wrongAttemptsNEQ: Int
  wrongAttemptsIn: [Int!]
  wrongAttemptsNotIn: [Int!]
  wrongAttemptsGT: Int
  wrongAttemptsGTE: Int
  wrongAttemptsLT: Int
  wrongAttemptsLTE: Int
  wrongAttemptsIsNil: Boolean
  wrongAttemptsNotNil: Boolean
  """wrong_attempt_at field predicates"""
  wrongAttemptAt: Time
  wrongAttemptAtNEQ: Time
  wrongAttemptAtIn: [Time!]
  wrongAttemptAtNotIn: [Time!]
  wrongAttemptAtGT: Time
  wrongAttemptAtGTE: Time
  wrongAttemptAtLT: Time
  wrongAttemptAtLTE: Time
  wrongAttemptAtIsNil: Boolean
  wrongAttemptAtNotNil: Boolean
  """locked_until field predicates"""
  lockedUntil: Time
  lockedUntilNEQ: Time
  lockedUntilIn: [Time!]
  lockedUntilNotIn: [Time!]
  lockedUntilGT: Time
  lockedUntilGTE: Time
  lockedUntilLT: Time
  lockedUntilLTE: Time
  lockedUntilIsNil: Boolean
  lockedUntilNotNil: Boolean
  """location field predicates"""
  location: String
  locationNEQ: String
  locationIn: [String!]
  locationNotIn: [String!]
  locationGT: String
  locationGTE: String
  locationLT: String
  locationLTE: String
  locationContains: String
  locationHasPrefix: String
  locationHasSuffix: String
  locationIsNil: Boolean
  locationNotNil: Boolean
  locationEqualFold: String
  locationContainsFold: String
  """accepted_general_terms field predicates"""
  acceptedGeneralTerms: Boolean
  acceptedGeneralTermsNEQ: Boolean
  acceptedGeneralTermsIsNil: Boolean
  acceptedGeneralTermsNotNil: Boolean
  """accepted_terms_n_privacy field predicates"""
  acceptedTermsNPrivacy: Boolean
  acceptedTermsNPrivacyNEQ: Boolean
  acceptedTermsNPrivacyIsNil: Boolean
  acceptedTermsNPrivacyNotNil: Boolean
  """auths edge predicates"""
  hasAuths: Boolean
  hasAuthsWith: [UserAuthWhereInput!]
  """sessions edge predicates"""
  hasSessions: Boolean
  hasSessionsWith: [UserSessionWhereInput!]
  """audit_logs edge predicates"""
  hasAuditLogs: Boolean
  hasAuditLogsWith: [AuditLogWhereInput!]
  """notify edge predicates"""
  hasNotify: Boolean
  hasNotifyWith: [NotifySettingWhereInput!]
  """created_jobs edge predicates"""
  hasCreatedJobs: Boolean
  hasCreatedJobsWith: [JobWhereInput!]
  """created_estimates edge predicates"""
  hasCreatedEstimates: Boolean
  hasCreatedEstimatesWith: [EstimateWhereInput!]
  """sales_rep_estimates edge predicates"""
  hasSalesRepEstimates: Boolean
  hasSalesRepEstimatesWith: [EstimateWhereInput!]
  """sales edge predicates"""
  hasSales: Boolean
  hasSalesWith: [JobWhereInput!]
  """created_installation_jobs edge predicates"""
  hasCreatedInstallationJobs: Boolean
  hasCreatedInstallationJobsWith: [InstallationJobWhereInput!]
  """installation_leads edge predicates"""
  hasInstallationLeads: Boolean
  hasInstallationLeadsWith: [InstallationJobWhereInput!]
  """estimate_activities edge predicates"""
  hasEstimateActivities: Boolean
  hasEstimateActivitiesWith: [EstimateActivityWhereInput!]
  """job_activities edge predicates"""
  hasJobActivities: Boolean
  hasJobActivitiesWith: [JobActivityWhereInput!]
  """partner_activities edge predicates"""
  hasPartnerActivities: Boolean
  hasPartnerActivitiesWith: [PartnerActivityWhereInput!]
  """user_activities edge predicates"""
  hasUserActivities: Boolean
  hasUserActivitiesWith: [UserActivityWhereInput!]
  """activities edge predicates"""
  hasActivities: Boolean
  hasActivitiesWith: [UserActivityWhereInput!]
  """job_progress_history edge predicates"""
  hasJobProgressHistory: Boolean
  hasJobProgressHistoryWith: [JobProgressHistoryWhereInput!]
  """installation_job_status_changer edge predicates"""
  hasInstallationJobStatusChanger: Boolean
  hasInstallationJobStatusChangerWith: [InstallationJobProgressWhereInput!]
  """contact_us_requests edge predicates"""
  hasContactUsRequests: Boolean
  hasContactUsRequestsWith: [ContactUsWhereInput!]
  """partner edge predicates"""
  hasPartner: Boolean
  hasPartnerWith: [PartnerWhereInput!]
  """surveys edge predicates"""
  hasSurveys: Boolean
  hasSurveysWith: [SurveyWhereInput!]
  """survey_progress edge predicates"""
  hasSurveyProgress: Boolean
  hasSurveyProgressWith: [SurveyProgressWhereInput!]
  """created_training_videos edge predicates"""
  hasCreatedTrainingVideos: Boolean
  hasCreatedTrainingVideosWith: [TrainingVideoWhereInput!]
  """created_training_courses edge predicates"""
  hasCreatedTrainingCourses: Boolean
  hasCreatedTrainingCoursesWith: [TrainingCourseWhereInput!]
  """job_notes edge predicates"""
  hasJobNotes: Boolean
  hasJobNotesWith: [JobNoteWhereInput!]
  """chat_channels edge predicates"""
  hasChatChannels: Boolean
  hasChatChannelsWith: [ChannelSubWhereInput!]
  """sent_messages edge predicates"""
  hasSentMessages: Boolean
  hasSentMessagesWith: [ChannelMessageWhereInput!]
  """received_messages edge predicates"""
  hasReceivedMessages: Boolean
  hasReceivedMessagesWith: [ChannelMessageWhereInput!]
  """channel_message_read edge predicates"""
  hasChannelMessageRead: Boolean
  hasChannelMessageReadWith: [ChannelMessageReadWhereInput!]
  """products_created edge predicates"""
  hasProductsCreated: Boolean
  hasProductsCreatedWith: [ProductWhereInput!]
  """product_pkg_created edge predicates"""
  hasProductPkgCreated: Boolean
  hasProductPkgCreatedWith: [ProductPackageWhereInput!]
  """job_doc_urls edge predicates"""
  hasJobDocUrls: Boolean
  hasJobDocUrlsWith: [JobDocURLWhereInput!]
  """partner_contacts edge predicates"""
  hasPartnerContacts: Boolean
  hasPartnerContactsWith: [PartnerContactWhereInput!]
}
`, BuiltIn: false},
	{Name: "../estimate.graphql", Input: `extend type Mutation {
    """
    create a new job manually
    """
    createEstimate(input: CreateEstimateInput!): ID! @authorize

    """ request an estimate used by mobile app """
    requestAnEstimate(inp: EstimateRequest): String! @authorize

    """approve estimate request"""
    approveEstimate(input: ApproveEstimateInput!): Boolean! @authorize

    """deny estimate request"""
    denyEstimate(input: DenyEstimateInput!): Boolean! @authorize

    """
    remove denied status of an estimate
    only estimate owner(submitted by), company-admin or site-admin can do it
    """
    removeDenied(id: ID!):Boolean! @authorize

    """ test job price calc """
    testPricing(job: CreateEstimateInput!, measure: [Measurement!]!): PriceSummary! @authorize(roles:[ADMIN])
}

extend type Query {
    """ estimate by its id """
    estimate(id: ID!): Estimate @authorize
    """ estimates """
    estimates(status: EstimateStatus, search: String, dtRange: [String!], page: PageInput!): EstimateConnection @authorize

    """ nearmap api response data """
    nearmapResponse(id: ID!, respID: ID!): NearmapResponse @authorize(roles:[ADMIN])
}

enum CurrentMaterial {
    ThreeTabAsphaltShingles
    ArchAsphaltShingles
    TileClay
    TileConcrete
    WoodShakes
    MetalShakes
    MetalTitle
    StandingSeamMetal
    Slate
    MetalRPanelExpFastener
    LowSlopeOnly
}

enum NewMaterial {
    ArchBestValue
    ArchMoreExpensive
    StandingSeamMetal
    TileConcrete
    TileClayBarrel
    Repaper
    ModBit
}

enum Measure @goModel(model: "roofix/pkg/enum.Measure"){
    PrimaryStructureOnly
    PrimaryPlusDetachedGarage
    AllStructuresOnParcel
}

enum EstimateStatus @goModel(model: "roofix/pkg/enum.EstimateStatus") {
    New
    Pending
    Approved
    Denied
    OnHold
    Failed
}

enum ExtraChargeCondition @goModel(model: "roofix/pkg/enum.Condition") {
    AddIfStateIn
    SubtractIfStateIn
}

input EstimateRequest {
    ownerName: String!
    ownerEmail: String!
    ownerPhone: String!
    streetNumber: String!
    streetName: String!
    city: String!
    state: String!
    zip: String!
    latitude: Float!
    longitude: Float!
    layers: Int!
    currentMaterial: CurrentMaterial!
    newRoofingMaterial: NewMaterial!
    redeck: Boolean!
    partial: Int
    includeDetachedStructure: Boolean
}


input CreateEstimateInput {
    id: ID
    ownerFirstName: String!
    ownerLastName: String!
    streetNumber: String!
    streetName: String!
    city: String!
    state: String!
    zip: String!
    latitude: Float
    longitude: Float
    repFirstName: String!
    repLastName: String!
    repEmail: String!
    repMobile: String!
    companyName: String!
    currentMaterial: String!
    newRoofingMaterial: String
    lowSlope: Boolean!
    currentMaterialLowSlope: String
    newRoofingMaterialLowSlope: String
    redeck: Boolean!
    layers: Int!
    layer2Material: String
    layer3Material: String
    measurementType: String!
    partial: Int
}

input ApproveEstimateInput {
    id: ID!
    ownerEmail: String
    ownerPhone: String
    epc: ID
    agree: Boolean
}

input DenyEstimateInput {
    id: ID!
    note: String
}

type EstimateConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [EstimateEdge!]
}

type EstimateEdge {
    cursor: Cursor
    node:   Estimate
}

type Estimate @goModel(model: "roofix/ent.Estimate") {
    id: ID!
    createdAt: Time!
    status: EstimateStatus!
    currentMaterial: String!
    newRoofingMaterial: String
    lowSlope: Boolean!
    currentMaterialLowSlope: String
    newRoofingMaterialLowSlope: String
    redeck: Boolean!
    layers: Int!
    layer2Material: String
    layer3Material: String
    measurementType: Measure!
    partial: Int

    totalSquares: Float
    primaryPitch: Float
    price: Float
    priceSummary: String
    bounds: [Point!]
    estimatorRawResponse: Map
    failureReason: String

    companyName: String!
    creatorName: String!
    homeOwner: HomeOwner!
    salesRep: UserInfo

    pdf: DocumentInfo
}

type HomeOwner @goModel(model: "roofix/ent.HomeOwner") {
    id: ID!
    firstName: String!
    lastName: String!
    email: String
    phone: String
    streetNumber: String!
    streetName: String!
    city: String!
    state: String!
    zip: String!
    latitude: Float
    longitude: Float
}



`, BuiltIn: false},
	{Name: "../index.graphql", Input: `directive @authorize(roles: [Role]) on FIELD_DEFINITION
directive @stringFor(roles: [Role]) on FIELD_DEFINITION
directive @floatFor(roles: [Role]) on FIELD_DEFINITION
directive @goModel(
    model: String
    models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @goTag(
    key: String!
    value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Mutation

type Query {
    newULID:ID!
}

type Subscription {
    currentTime: Time!
}

"""Maps a Time GraphQL scalar to a Go time.Time struct."""
scalar Time
""" type Map(Go type: map[string]interface{})"""
scalar Map
""" Go type interface{} """
scalar Any
scalar Void
scalar Upload
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
scalar Int64

enum OrderDirection {
    ASC
    DESC
}

enum DateRange {
    TODAY
    YESTERDAY
    THIS_WEEK
    LAST_WEEK
    THIS_MONTH
    LAST_MONTH
    THIS_YEAR
    LAST_YEAR
}

interface Node @goModel(model: "roofix/ent.Noder") {
    """The id of the object."""
    id: ID!
}

input PageInput {
    after: Cursor
    first: Int
    before: Cursor
    last: Int
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: Cursor
    hasPreviousPage: Boolean!
    startCursor: Cursor
}

type Entity {
    id: ID!
    name: String!
}

`, BuiltIn: false},
	{Name: "../installation_job.graphql", Input: `extend type Mutation {
    bookInstallation(type: InstallationType!, pkgID: ID!, productID: ID, owner: InstallationOwnerInput!): Boolean! @authorize
    approveInstallation(input: InstallationApproveInput!): Boolean! @authorize
    denyInstallation(id: ID!, reason: String!): Boolean! @authorize
    undoDenyInstallation(id: ID!): Boolean! @authorize
}

extend type Query {
    pendingInstallations(type: InstallationType!, approval: Approval,  search: String, betweenDates: [String!], page: PageInput!): InstallationJobConnection!
    approvedInstallations(type: InstallationType!, status: InstallationStatus,  search: String, betweenDates: [String!], page: PageInput!): InstallationJobConnection!
}

enum InstallationType @goModel(model: "roofix/pkg/enum.InstallationType") {
    SMART_HOME
    HVAC
}

enum Approval @goModel(model: "roofix/pkg/enum.Approval") {
    PENDING
    APPROVED
    DENIED
}

enum InstallationStatus @goModel(model: "roofix/pkg/enum.InstallationStatus"){
    PENDING
    NEW
    SCHEDULED
    INSTALLED
}

input InstallationApproveInput {
    id: ID!
    ownerEmail: String
    ownerPhone: String
    agree: Boolean
}

input InstallationOwnerInput {
    name: String!
    email: String!
    phone: String!
    address: String!
    latitude: Float
    longitude: Float
    specialNote: String
}

input InstallationPackageInput {
    name: String!
    description: String!
    features: [String!]
    price: Float!
    items: [InstallationPackageItemInput!]!
}

input InstallationPackageItemInput {
    name: String!
    description: String!
    features: [String!]
    specialNote: String
}

type InstallationJobConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [InstallationJobEdge!]
}

type InstallationJobEdge {
    cursor: Cursor
    node:   InstallationJob
}

type InstallationJob {
    id: String!
    ownerName: String!
    ownerPhone: String!
    ownerEmail: String
    ownerAddress: String!
    ownerAddressLat: Float
    ownerAddressLng: Float
    specialNote: String
    pkg: String!
    pkgDescription: String
    pkgFeatures: [String!]
    price: Float!
    approval: Approval!
    approvalAt: Time!
    status: InstallationStatus!
    statusAt: Time!
    salesRep: Entity!
    items: [InstallationJobItem!]
    createdAt: Time!
}

type InstallationJobItem {
    name: String!
    description: String!
    features: [String!]!
    specialNote: String
    price: Float!
    imageURL: String!
}
`, BuiltIn: false},
	{Name: "../job.graphql", Input: `extend type Mutation {
    """ Invite a partner to job """
    assignPartnerToJob(jobID: ID!, partnerID: ID!): String! @authorize(roles: [ADMIN])
}

extend type Query {
    """
    get job by ID
    """
    job(id: ID!): Job @authorize(roles:[ADMIN])

    """assigned job detail"""
    myJob(id: ID!): Job @authorize

    """ get job geocode """
    jobGeoCode(id: ID!): [Point]! @authorize(roles:[ADMIN])

    """ unassigned jobs """
    unassignedJobs(
        progress: JobProgress
        search: String
        betweenDates: [String!]
        page: PageInput!
        orderBy: JobOrder
    ): JobConnection @authorize

    """ assigned jobs """
    assignedJobs(
        progress: JobProgress
        search: String
        betweenDates: [String!]
        page: PageInput!
        orderBy: JobOrder
    ): JobConnection @authorize

    jobsByProgress(
        status: JobProgress!, search: String, betweenDates: [String!], page: PageInput!, orderBy: JobOrder
    ): JobConnection @authorize(roles:[ADMIN])

    """ partner jobs stats """
    partnerJobStats(search: String, partnerType: PartnerType!, skip: Int!, take: Int!): [PartnerJobStats!] @authorize(roles: [ADMIN])

    """ job assigned to partner.
    This will include the jobs that are accepted & Job Invites that are waiting partner response
    """
    partnerJobs(
        partnerID: ID!
        search: String
        flagged: Boolean
        progress: JobProgress
        dates: [String!]
        page: PageInput!
    ): JobConnection @authorize

    """ approved jobs as per the logged in user."""
    approvedJobs(search: String, progress: JobProgress, dates: [String!], page: PageInput!): JobConnection @authorize



    """DEPRECATED get a job estimates list """
    jobEstimates(jobID: ID!):JobEstimates @authorize(roles:[ADMIN])
}

enum JobOrderField {
    CREATED
    STATUS_AT
    PROGRESS_AT
}

enum JobStatus @goModel(model: "roofix/pkg/enum.JobStatus") {
    Request
    Estimating
    Estimated
    Denied
    Approved
    Assigned
    Accepted
}


enum JobAssignmentStatus @goModel(model: "roofix/pkg/enum.JobAssignmentStatus"){
    Assigned
    Accepted
    Rejected
    Expired
}

enum JobSource @goModel(model: "roofix/pkg/enum.JobSource") {
    Manual
    External
}

enum EstimateProvider {
    RoofixAPI
    EagleView
    NearMap
}

enum ExtraCharge {
    NONE
    AMOUNT
    PERCENT
    PER_SQ
}

enum JobDocUrlType {
    InspectionDocs
    ProductionPics
}

input ApproveJobInput {
    ownerEmail: String
    ownerPhone: String
    epc: ID
    agree: Boolean
}

input JobDatesInput @goModel(model: "roofix/pkg/job.DatesInput") {
    materialDate: Time,
    removeDate: Time,
    installDate: Time,
    completionDate: Time
}

input Measurement @goModel(model: "roofix/pkg/pricing.Measurement") {
    squares: Float!
    pitch: String!
}

input InputPoint {
    lat: Float!
    lng: Float!
}

input JobOrder {
    direction: OrderDirection!
    field: JobOrderField
}

type JobConnection {
    edges:     [JobEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type JobEdge {
    node:   Job
    cursor: Cursor
}

type Job implements Node @goModel(model: "roofix/ent.Job") {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    price: Float! @floatFor(roles: [ADMIN])
    workOrderPrice: Float!
    progress: JobProgress
    progressAt: Time
    progressFlagged: Boolean
    installDate: Time
    inspectionDate: Time
    completionDate: Time
    note: String
    permitRequired: Boolean
    inspectionRequired: Boolean

    estimate: Estimate
    contractor: Entity

    companyName: String!
    creatorName: String!
    epcName: String!
    homeOwner: HomeOwner
    salesRep: UserInfo
    creator: UserInfo
}

type JobEstimates {
    id: ID!
    status: String!
    estimates: [Estimate!]
}

type EstimateResponse {
    id: ID!
    createdAt: Time!
    description: String!
    need: Boolean!
    raw: Map
}

type PriceSummary {
    total: Float!
    summary:  String!
}

type Point {
    lat: Float!
    lng: Float!
}

type ProgressFlag {
    status: JobProgress!
    flagged: Boolean!
}

type NearmapResponse  @goModel(model: "roofix/pkg/nearmap.ResponseAndDetail") {
    detail: NearmapEstimateDetail!
    raw: Map!
}

type NearmapEstimateDetail @goModel(model: "roofix/pkg/nearmap.EstimateDetail")  {
    price: Float! @authorize(roles: [ADMIN])
    primaryPitchInDegrees: Float!
    primaryPitch: Float!
    tileArea: Float!
    tileRatio: Float!
    shingleArea: Float!
    shingleRatio: Float!
    metalArea: Float!
    metalRatio: Float!
    flatArea: Float!
    flatRatio: Float!
    gableArea: Float!
    gableRatio: Float!
    hipArea: Float!
    hipRatio: Float!
    dutchGableArea: Float!
    dutchGableRatio: Float!
    turretArea: Float!
    turretRatio: Float!
    dominantRoofMaterial: String!
    dominantRoofMaterialID: Int!
    roofCount: Int!
    totalUnclippedArea: Float!
    roofMaterialRatioTotal: Float!
    roofTypeRatioTotal: Float!
    roofMaterialSurfaceAreaTotal: Float!
    roofTypeSurfaceAreaTotal: Float!
    treeOverhangRatioPrimaryRoof: Float!
    treeOverhangConfidencePrimaryRoof: Float!
    treeOverhangPresenceConfidence: Float!
    treeOverhangAreaPrimaryRoof: Float!
    treeOverhangTotalClippedArea: Float!
    treeOverhangTotalUnClippedArea: Float!
    treeOverhangPresent: Boolean!
    treeOverhangCount: Int!
}


type PartnerJobStats @goModel(model: "roofix/pkg/partner.JobStats") {
    id: ID!
    name: String!
    status: PartnerStatus!
    newCount: Int!
    newCountFlagged: Int!
    contactedCount: Int!
    contactedCountFlagged: Int!
    confirmedCount: Int!
    confirmedCountFlagged: Int!
    permittingCount: Int!
    permittingCountFlagged: Int!
    scheduledCount: Int!
    scheduledCountFlagged: Int!
    inProgressCount: Int!
    inProgressCountFlagged: Int!
    installedCount: Int!
    installedCountFlagged: Int!
    invoicedCount: Int!
    invoicedCountFlagged: Int!
    delayedCount: Int!
    total: Int!
    totalFlagged: Int!
}
`, BuiltIn: false},
	{Name: "../job_note.graphql", Input: `extend type Mutation  {
    """
    create Job Note
    """
    creatJobNote(jobID: ID! note: String!):Boolean! @authorize
    """
    update Job Note
    """
    editJobNote(jobID: ID! noteID: ID! note: String!):Boolean! @authorize
}


extend type Query {
    """
    job note list
    """
    jobNotes(jobID: ID!): [JobNote!] @authorize
}


type JobNote {
    id: ID!
    note: String!
    createdAt: Time!
    updatedAt: Time!
    creator: UserInfo!
}

`, BuiltIn: false},
	{Name: "../job_progress.graphql", Input: `extend type Mutation {
    """ update job progress """
    jobProgressUpdate(
        id: ID!
        step: JobProgress!
        stepComplete: Boolean!
        note: String!
        data: ProgressInput
    ): Boolean! @authorize

    jobDelay(id: ID!, flag: Boolean!, reason: String!): Boolean! @authorize
}

extend type Query {
    """ completed steps history """
    jobCompletedProgress( id: ID! ): [JobProgressHistory]! @authorize
    jobProgress(id: ID!, search: String, page: PageInput!): JobProgressHistoryConnection @authorize
}

enum JobProgress @goModel(model: "roofix/pkg/enum.JobProgress")  {
    New
    CustomerContacted
    JobDetailsConfirmed
    Permitting
    Delayed
    Scheduled
    InProgress
    Installed
    Invoiced
    InvoiceApproved
    InvoicePaid
}


enum JobShingleColor  {
    Brown
    Sandstorm
    Blue
}

enum JobInspectionRequired  {
    Yes
    No
}

enum JobPermitRequired  {
    Yes
    No
}

input JobProgressInput @goModel(model: "roofix/ent/schema.JobProgressInput") {
    question: String!
    answer: String!
    order: Int!
}

input ProgressInput {
    shingleColor: String
    permitRequired: Boolean
    inspectionRequired: Boolean
    installDate: Time
    inspectionDate: Time
    completionDate: Time
}

type JobProgressHistory @goModel(model: "roofix/ent.JobProgressHistory") {
    id: ID!
    status: JobProgress!
    statusAt: Time!
    complete: Boolean!
    note: String!
}

type JobProgressData @goModel(model: "roofix/ent/schema.JobProgressInput")  {
    question: String!
    answer: String!
    order: Int!
}


type JobProgressHistoryConnection {
    edges:     [JobProgressHistoryEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type JobProgressHistoryEdge {
    node:   JobProgressHistory
    cursor: Cursor
}
`, BuiltIn: false},
	{Name: "../notification.graphql", Input: `extend type Mutation {
    saveNotifySettings(userID: ID!, topicID: String!, email: Boolean!): Boolean! @authorize(roles: [ADMIN])
    notificationRead(messageID: ID!): Boolean! @authorize
}

extend type Query {
    userNotifySettings(id: ID!): [Notify] @authorize(roles: [ADMIN])
    myUnreadNotificationsCount: Int! @authorize
    myNotifications(page: PageInput!): NotifyMessageConnection! @authorize
}

enum NotifyType {
    EMAIL,
    SMS
}

enum Channel @goModel(model: "roofix/pkg/enum.Channel") {
    PING
    ESTIMATE
    JOB
    JOB_CHAT
    JOB_NOTE
    TASK
    TRAINING_VIDEO
    PARTNER
    PARTNER_USER
}

enum Topic @goModel(model: "roofix/pkg/enum.Topic"){
    BROADCAST
    CHANGE
    STATUS_CHANGE
    PROGRESS
    FILE_UPLOAD
    ASSIGNED
    CREATED
    UPDATED
    NEW_MESSAGE
}

enum AdminNotifyTopic {
    PARTNER_ONBOARDING_DONE
    EAGLE_VIEW_ESTIMATE_PROGRESS
    EAGLE_VIEW_ESTIMATE_NEED
    JOB_INVITATION_EXPIRED
    CONTACT_US_REQUEST
}

enum UserNotifyTopic {
    NEW_JOB_ALERT
}

type NotifyMessageConnection @goModel(model: "roofix/pkg/model.NotifyMessageConnection") {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [NotifyMessageEdge!]
}

type NotifyMessageEdge @goModel(model: "roofix/pkg/model.NotifyMessageEdge") {
    cursor: Cursor!
    node:   NotifyMessage!
}

type NotifyMessage @goModel(model: "roofix/pkg/model.NotifyMessage") {
    id: ID!
    channel: Channel!
    topic: Topic!
    refID: String
    title: String!
    message: String!
    from: String!
    unread: Boolean!
    createdAt: Time!
}

type Notify @goModel(model: "roofix/pkg/model.Notify"){
    id: ID!
    topic: String!
    receiveEmail: Boolean!
    receiveSMS: Boolean!
}
`, BuiltIn: false},
	{Name: "../options.graphql", Input: `extend type Query {
    optionList(types: [OptionListType!]): [Options!] @authorize
}

enum OptionListType @goModel(model: "roofix/pkg/enum.OptionList") {
    FINANCE
    EPC
}

type Options {
    type: OptionListType!,
    options: [Entity!]
}
`, BuiltIn: false},
	{Name: "../partner.graphql", Input: `extend type Mutation {
    """ save partner basic detail """
    savePartner(input: PartnerInput!): Boolean! @authorize
    """ save partner basic detail """
    invitePartner(input: InvitePartnerInput!): Invite! @authorize(roles: [ADMIN])
    """ set partner active status as true or false """
    setPartnerActive(partnerID: ID!, value: Boolean!): Boolean! @authorize(roles: [ADMIN])
    """ save operations detail """
    savePartnerOperations(partnerID: ID!, inp: PartnerOperationInput!): Boolean! @authorize
    """ steps completed in save-partner process"""
    savePartnerCompletedSteps(partnerID: ID!, step: Int!, done: Boolean): Boolean! @authorize
    """save partner work state"""
    saveServiceState(partnerID: ID!, state: String!, licNo: String, expDate: Time, proofDocID: String): Boolean! @authorize
    """save partner work city"""
    saveServiceCity(partnerID: ID!, postalID: ID!, active: Boolean, licNo: String, proofDocID: String): Boolean! @authorize
    """save partner service"""
    saveService(id: ID!, partnerID: ID!, service: Service!, active: Boolean!): Boolean! @authorize
    """save partner lead time"""
    saveLeadTime(partnerID: ID!, asphalt: String, metal: String, tile: String): Boolean! @authorize
}

extend type Query {
    """ check if a partner with same name already exists """
    partnerNameAvailable(id: ID!, name: String!, type: PartnerType!): Boolean! @authorize
    """ get partner detail by its ID """
    partner(id: ID!, type: PartnerType): Partner! @authorize
    """ get partner detail by its ID """
    partnerDocs(partnerID: ID!, section: DocumentSection!):[Document!]! @authorize
    """ partners list"""
    partners(search: String, partnerType: PartnerType, status: String, page: PageInput!): PartnerConnection! @authorize(roles: [ADMIN])
    """ partner service states """
    partnerServiceStates(partnerID:  ID!):[ServiceState!]! @authorize
    """ list of partner services """
    partnerServices(partnerID:  ID!):[PartnerService!]! @authorize
    """
    Partner Finance & EPC options
    """
    partnerOptions(partnerID: ID!): [Options]
}

enum PartnerOrderField {
    CREATED
}

enum PartnerType @goModel(model: "roofix/pkg/enum.Partner"){
    ROOFING
    SOLAR
    EPC
    INTEGRATION
}

enum PartnerStatus @goModel(model: "roofix/pkg/enum.PartnerStatus") {
    Active
    InActive
    Onboarding
    OnboardingDone
}

enum CompanyDocName {
    W9
    GENERAL_LIABILITY
    WORKERS_COMPENSATION
}

enum Service @goModel(model: "roofix/pkg/partner.Service") {
    ASPHALT_SHINGLE_TEAR_OFF
    ASPHALT_SHINGLE_OVERLAY
    ASPHALT_SHINGLE_SMALL_REPAIRS
    ROLLED_ASPHALT_TEAR_OFF
    TAR_GRAVEL_REPAIRS
    CONCRETE_TILE_REMOVER_REPLACE
    CONCRETE_TILE_UNDER_ARRAY_ROOF_SWAPS
    CONCRETE_TILE_SMALL_REPAIRS
    SLATE_TILE_REMOVE_REPLACE
    SLATE_TILE_UNDER_ARRAY_ROOF_SWAPS
    SLATE_TILE_SMALL_REPAIRS
    METAL_ROOF_REPAIRS
    FLAT_ROOF_REPAIRS
    ROOF_TRUSS_RETROFITS
}

enum EPCStatus {
    None
    Dealer
    MultipleDealers
    VerticallyIntegrated
}

input PartnerInput @goModel(model: "roofix/pkg/partner.BasicDetail") {
    id: ID
    type: PartnerType!
    name: String!
    address: String
    latitude: Float
    longitude: Float
    website: String
    isNationWide: Boolean
    crewCount: Int
    jobCapacity: Int
    yearsInBusiness: Int
}

input PartnerOperationInput {
    salesVolume: Int
    financeOptions: [ID!]
    epcOptions: [ID!]
    downPayment: Int
    pifDate: Int
    installInHouse: Boolean
}

input PartnerOrder {
    direction: OrderDirection!
    field: PartnerOrderField
}

input InvitePartnerInput @goModel(model: "roofix/pkg/partner.Invite") {
    id: ID!
    type: PartnerType!
    companyName: String!
    contactID: String
    userID: String
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
}

type Invite @goModel(model: "roofix/pkg/partner.Invite") {
    id: ID!
    type: PartnerType!
    companyName: String!
    contactID: String
    userID: String
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    createdAt: Time
}

type PartnerConnection {
    edges:     [PartnerEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type PartnerEdge {
    node:   Partner
    cursor: Cursor
}

type Partner implements Node {
    id: ID!
    type: PartnerType!
    createdAt: Time!,
    name: String!
    address: String
    website: String
    isNationWide: Boolean
    contacts: [PartnerContact!]
    crewCount: Int!
    jobCapacity: Int!
    yearsInBusiness: Int
    setupStepsCompleted: Int!
    isActive: Boolean!
    asphaltLeadT: String
    metalLeadT: String
    tileLeadT: String
    status: PartnerStatus!
    salesVolume: Int,
    financeOptions: [ID!],
    downPayment: Int,
    pifDate: Int,
    installInHouse: Boolean,
    epcOptions: [ID!],
}


type PartnerJob @goModel(model: "roofix/pkg/partner.Job") {
    id: ID!
    ownerFirstName: String!
    ownerLastName: String!
    streetNumber: String!
    streetName: String!
    city: String!
    state: String!
    region: String!
    zip: String!
    latitude: Float!
    longitude: Float!
    repFirstName: String!
    repLastName: String!
    repEmail: String!
    repMobile: String!
    companyName: String!
    status: String!
    statusAt: Time!
    notes: String
    price: Float
}

type ServiceState {
    id: ID!
    name: String!
    licenseNo: String
    licenseExpDate: Time
    cities: [ServiceCity!]!
    expand: Boolean!
}

type ServiceCity {
    id: ID!
    active: Boolean!
    licenseNo: String
    licenseProof:String
    cityZip: String!
    cityName: String!
}

type PartnerService {
    id: ID!
    service: Service!
    description: String!
    active: Boolean!
}
`, BuiltIn: false},
	{Name: "../partner_contact.graphql", Input: `extend type Mutation {
    """
    partner, create primary contact
    """
    savePartnerContacts(partnerID: ID!, contacts: [PartnerContactInput!]!): [PartnerContact!]! @authorize
    """
    save a partner contact
    """
    savePartnerContact(partnerID: ID!, contact: PartnerContactInput!): Boolean! @authorize
    """
    set user password reset email instruction
    """
    partnerContactSendPwdResetEmail(partnerID: ID!, userID: ID!): Boolean! @authorize
}

extend type Query {
    """
    query partner contacts
    """
    partnerContacts(partnerID: ID!, search: String, page: PageInput!): ContactConnection
}

enum PartnerContactRole @goModel(model: "roofix/pkg/enum.PartnerContactRole") {
    ADMIN
    SALES_REP
}

enum PartnerContactType @goModel(model: "roofix/pkg/enum.PartnerContact") {
    PRIMARY
    OPERATIONS
    INVOICING
    ACCOUNTING
    CUSTOMER_SERVICE
    CUSTOM
}

input PartnerContactInput @goModel(model: "roofix/pkg/partner.ContactUserInput") {
    id: ID
    type: PartnerContactType!
    role: PartnerContactRole
    accountStatus: AccountStatus
    userID: ID
    firstName: String!
    lastName: String!
    phone: String!
    email: String!
    otherEmail: String
    title: String
    description: String
}

type ContactConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [PartnerContactEdge!]
}

type PartnerContactEdge {
    cursor: Cursor
    node:   PartnerContact
}

type PartnerContact {
    id: ID!
    userID: ID!
    createdAt: Time!,
    type: PartnerContactType,
    role: PartnerContactRole,
    accountStatus: AccountStatus,
    firstName: String!
    lastName: String!
    email: String!
    phone: String
    otherEmail: String
    picture: String
    title: String
    description: String
}

type PartnerContactInfo @goModel(model: "roofix/pkg/account.UserPartnerInfo") {
    id: ID!
    type: PartnerType!
    partnerName: String!
    status: PartnerStatus!
    contactType: PartnerContactType
    role: PartnerContactRole
    mobileAppSettings: MobileAppSettings!
}
`, BuiltIn: false},
	{Name: "../partner_settings.graphql", Input: `extend type Mutation  {
    savePartnerMobileSettings(id: ID!, inp: InputMobileAppSettings!): Boolean!
}


extend type Query  {
    partnerMobileSettings(id: ID!): MobileAppSettings!
}

input InputMobileAppSettings {
    logoURL: String
    primaryColor: String
    hideTabs: [String!]
}

type MobileAppSettings @goModel(model: "roofix/pkg/model.MobileAppSettings") {
    logoURL: String!
    primaryColor: String!
    hideTabs: [String!]!
}
`, BuiltIn: false},
	{Name: "../postalcode.graphql", Input: `extend type Mutation {
    markServiceArea(id: ID!, value: Boolean!): Boolean! @authorize(roles: [ADMIN])
}

extend type Query {
    states(q: String!): [State!] @authorize
    serviceStates(q: String!): [State!] @authorize
    cities(state: String!, q: String!, skip: Int!, take: Int!): [City!] @authorize
    allServiceAreas: [State!] @authorize
}

type State {
    id: ID!
    name: String!
    cities: [City]!
}

type City {
    id: ID!
    name: String
    zip: String
}
`, BuiltIn: false},
	{Name: "../pricing.graphql", Input: `extend type Query {
    """ zip & product pricing info """
    getPricing: ProductPricing! @authorize(roles: [ADMIN])
}

type ProductPricing {
    id: String!
    items: [Price!]
    products: [Product!]
}

type Price @goModel(model: "roofix/pkg/pricing.ProductPrice") {
    id: ID!
    country: String!
    state: String!
    stateAbr: String!
    zip: String!
    city: String!
    productId: Int!
    price: Float!
    pricePer: String!
}

type Product @goModel(model: "roofix/pkg/pricing.ProductInfo") {
    id: Int!
    name: String!
}
`, BuiltIn: false},
	{Name: "../product.graphql", Input: `extend type Mutation {
    saveProductPackage(input: ProductPackageInput!): Boolean! @authorize(roles: [ADMIN])
    saveProduct(input: ProductInput!): Boolean! @authorize(roles: [ADMIN])
}

extend type Query {
    productPackages(category: ProductType, search: String, page: PageInput!): ProductPackageConnection! @authorize(roles: [ADMIN])
    products(category: ProductType, search: String, page: PageInput!): ProductConnection! @authorize(roles: [ADMIN])
    smartHomePackages(page: PageInput!): PackageConnection! @authorize
    hvacPackages(page: PageInput!): PackageConnection! @authorize
}

enum ProductType @goModel(model: "roofix/pkg/enum.Product") {
    HVAC
    SMART_HOME
}

enum SoldAs @goModel(model: "roofix/pkg/enum.SoldAs") {
    PACKAGE
    INDIVIDUAL_ITEM
}

input ProductPackageInput {
    id: ID!
    category: ProductType!
    soldAs: SoldAs!
    name: String!
    description: String!
    price: Float!
    features: [String!]!
    productIDs: [ID!]!
}

input ProductInput {
    id: ID!
    imageID: ID!
    category: ProductType!
    name: String!
    description: String!
    price: Float!
    features: [String!]!
    specialNote: String
}

type ProductPackageConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [ProductPackageEdge!]
}

type ProductPackageEdge {
    cursor: Cursor
    node:   ProductPackage
}

type ProductPackage{
    id: ID!
    name: String!
    category: ProductType!
    soldAs: SoldAs!
    description: String!
    price: Float!
    features: [String!]!
    items: [ProductDetail!]!
}

#
#
type PackageConnection @goModel(model: "roofix/ent.ProductPackageConnection") {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [PackageEdge!]
}

type PackageEdge @goModel(model: "roofix/ent.ProductPackageEdge"){
    cursor: Cursor
    node:   Package
}

type Package @goModel(model: "roofix/ent.ProductPackage"){
    id: ID!
    name: String!
    category: ProductType!
    soldAs: SoldAs!
    description: String!
    price: Float!
    features: [String!]!
    items: [ProductInfo!]!
}
#
#

type ProductConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [ProductEdge!]
}

type ProductEdge {
    cursor: Cursor
    node:   ProductInfo
}

type ProductInfo @goModel(model: "roofix/ent.Product") {
    id: ID!
    category: ProductType!
    name: String!
    description: String!
    price: Float!
    features: [String!]!
    specialNote: String
    image: Document!
}

type ProductDetail @goModel(model: "roofix/ent.Product") {
    id: ID!
    name: String!
    image: Document!
}
`, BuiltIn: false},
	{Name: "../stats.graphql", Input: `extend type Query  {
    counts: Counts @authorize
}

type Counts {
    estimateCount: Int!
    unassignedJobCount: Int!
    assignedJobCount: Int!
    paymentsPending: Int!
    paymentsApproved: Int!
    paymentsCompleted: Int!
}
`, BuiltIn: false},
	{Name: "../survey.graphql", Input: `extend type Mutation {
    """hold a survey slot to reserve"""
    surveyRequest(date: String! slotID: ID!): ID! @authorize
    """reserve a survey slot"""
    surveyReserve(input: SurveyInput!): Survey! @authorize
}

extend type Query {
    """ survey schedule for given data """
    surveySlotAvailability(date: String!): [SurveySlot!] @authorize
    """ get survey by id """
    surveyDetails(id: ID!): Survey @authorize
    """ surveys list """
    surveys(
        progress: SurveyProgress
        search: String
        betweenDates: [String!]
        page: PageInput!,
        orderBy: SurveyOrder
    ):SurveyConnection! @authorize
}

enum SurveyStatus @goModel(model: "roofix/pkg/enum.SurveyStatus") {
    REQUESTING
    REQUESTED
    IN_PROGRESS
    COMPLETED
}

enum SurveyProgress @goModel(model: "roofix/pkg/enum.SurveyProgress") {
    SCHEDULED
    EN_ROUTE
    ON_SITE
    COMPLETED
    DOCS_UPLOADED
}

enum SurveyOrderField {
    CREATED
}

input SurveyInput {
    id: ID!
    name: String!
    phoneNumber: String!
    address: String!
    notes: String
}

input SurveyOrder {
    direction: OrderDirection!
    field: SurveyOrderField
}

type SurveyConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [SurveyEdge!]
}

type SurveyEdge {
    node:   Survey
    cursor: Cursor
}

type Survey {
    id: ID!
    date: String!
    slot: String!
    from: Time!
    to: Time!
    name: String
    phone: String
    address: String
    notes: String
    status: SurveyStatus!
    progress: SurveyProgress
}

type SurveySlot {
    id: ID!
    name: String!
    available: Boolean!
}
`, BuiltIn: false},
	{Name: "../survey_progress.graphql", Input: `extend type Query {
    """ completed steps history """
    surveyCompletedProgress( id: ID! ): [SurveyProgressDetail]! @authorize
    surveyProgress(id: ID!, search: String, page: PageInput!): SurveyProgressConnection @authorize
}

type SurveyProgressConnection {
    edges:     [SurveyProgressEdge!]
    pageInfo:   PageInfo!
    totalCount: Int!
}

type SurveyProgressEdge {
    node:   SurveyProgressHistory
    cursor: Cursor
}

type SurveyProgressHistory @goModel(model: "roofix/ent.SurveyProgress") {
    id: ID!
    status: SurveyProgress!
    statusAt: Time!
    complete: Boolean!
    note: String!
}

type SurveyProgressDetail @goModel(model: "roofix/ent.SurveyProgress") {
    id: ID!
    status: SurveyProgress!
    statusAt: Time!
    note: String!
}
`, BuiltIn: false},
	{Name: "../training.graphql", Input: `extend type Mutation {
    """create a new training course"""
    createTrainingCourse(name: String!): TrainingCourse! @authorize(roles: [ADMIN])

    """ save a training video """
    saveTrainingVideo(inp: InputTrainingVideo): Boolean! @authorize(roles: [ADMIN])

    """ partner video access"""
    partnerTrainingVideoAccess(partnerID: ID!, videoID: ID!, enabled: Boolean!):Boolean! @authorize(roles: [ADMIN])
}

extend type Query  {
    """ search training course by its name"""
    trainingCourses(search: String, page: PageInput!): TrainingCourseConnection! @authorize(roles: [ADMIN])

    """ training kinds | types """
    trainingVideoKinds: [Entity!] @authorize(roles: [ADMIN])

    """training video categories"""
    trainingVideoCourses(kind: TrainingType!, partnerID: ID, pageSize: Int): [CourseVideos] @authorize(roles: [ADMIN])

    """training videos"""
    trainingVideos(
        kind: TrainingType!, courseID: ID!, search: String, partnerID: ID, page: PageInput!
    ): TrainingVideoConnection @authorize(roles: [ADMIN])


    """ training kinds | types as per assigned videos """
    myTrainingVideoKinds: [Entity!] @authorize

    """training video categories"""
    myTrainingVideoCourses(kind: TrainingType!,pageSize: Int): [CourseVideos] @authorize

    """training videos"""
    myTrainingVideos(
        kind: TrainingType!, courseID: ID!, search: String, page: PageInput!
    ): TrainingVideoConnection @authorize
}

enum TrainingType @goModel(model: "roofix/pkg/enum.TrainingType") {
    ROOFING
    SOLAR
    SITE_SURVEY
}

input InputTrainingVideo {
    id: ID!
    kind: TrainingType!
    title: String!
    description: String!
    courseID: ID!
    posterID: ID!
    videoID: ID!
}

type TrainingCourseConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [TrainingCourseEdge!]
}

type TrainingCourseEdge {
    node:   TrainingCourse
    cursor: Cursor
}

type TrainingCourse {
    id: ID!
    name: String!
}

type CourseVideos {
    id: ID!
    name: String!
    videos: TrainingVideoConnection!
}

type TrainingVideoConnection {
    totalCount: Int!
    pageInfo:   PageInfo!
    edges:     [TrainingVideoEdge!]
}

type TrainingVideoEdge {
    node:   TrainingVideo
    cursor: Cursor
}

type TrainingVideo {
    id: ID!
    kind: TrainingType!
    title: String!
    description: String!
    course: TrainingCourse!
    posterURL: String!
    videoURL: String!
    assigned: Boolean
}


type TrainingVideoAccess {
    videoID: ID!
    enabled: Boolean!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
